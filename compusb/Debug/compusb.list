
compusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004934  08008198  08008198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800cacc  0800cacc  0000cacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cadc  0800cadc  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cadc  0800cadc  0000cadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae4  0800cae4  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae4  0800cae4  0000cae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae8  0800cae8  0000cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800caec  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000000c  0800caf8  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800caf8  00010438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e844  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b0  00000000  00000000  0001e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00020c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  00021600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4e  00000000  00000000  00021ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b73a  00000000  00000000  00038b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863a4  00000000  00000000  00044260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  000ca658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008198 <__do_global_dtors_aux>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4c05      	ldr	r4, [pc, #20]	; (80081b0 <__do_global_dtors_aux+0x18>)
 800819c:	7823      	ldrb	r3, [r4, #0]
 800819e:	b933      	cbnz	r3, 80081ae <__do_global_dtors_aux+0x16>
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x1c>)
 80081a2:	b113      	cbz	r3, 80081aa <__do_global_dtors_aux+0x12>
 80081a4:	4804      	ldr	r0, [pc, #16]	; (80081b8 <__do_global_dtors_aux+0x20>)
 80081a6:	f3af 8000 	nop.w
 80081aa:	2301      	movs	r3, #1
 80081ac:	7023      	strb	r3, [r4, #0]
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	00000000 	.word	0x00000000
 80081b8:	0800cab4 	.word	0x0800cab4

080081bc <frame_dummy>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	4b03      	ldr	r3, [pc, #12]	; (80081cc <frame_dummy+0x10>)
 80081c0:	b11b      	cbz	r3, 80081ca <frame_dummy+0xe>
 80081c2:	4903      	ldr	r1, [pc, #12]	; (80081d0 <frame_dummy+0x14>)
 80081c4:	4803      	ldr	r0, [pc, #12]	; (80081d4 <frame_dummy+0x18>)
 80081c6:	f3af 8000 	nop.w
 80081ca:	bd08      	pop	{r3, pc}
 80081cc:	00000000 	.word	0x00000000
 80081d0:	20000010 	.word	0x20000010
 80081d4:	0800cab4 	.word	0x0800cab4

080081d8 <__aeabi_uldivmod>:
 80081d8:	b953      	cbnz	r3, 80081f0 <__aeabi_uldivmod+0x18>
 80081da:	b94a      	cbnz	r2, 80081f0 <__aeabi_uldivmod+0x18>
 80081dc:	2900      	cmp	r1, #0
 80081de:	bf08      	it	eq
 80081e0:	2800      	cmpeq	r0, #0
 80081e2:	bf1c      	itt	ne
 80081e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80081e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80081ec:	f000 b96e 	b.w	80084cc <__aeabi_idiv0>
 80081f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081f8:	f000 f806 	bl	8008208 <__udivmoddi4>
 80081fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr

08008208 <__udivmoddi4>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	9d08      	ldr	r5, [sp, #32]
 800820e:	4604      	mov	r4, r0
 8008210:	468c      	mov	ip, r1
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 8083 	bne.w	800831e <__udivmoddi4+0x116>
 8008218:	428a      	cmp	r2, r1
 800821a:	4617      	mov	r7, r2
 800821c:	d947      	bls.n	80082ae <__udivmoddi4+0xa6>
 800821e:	fab2 f282 	clz	r2, r2
 8008222:	b142      	cbz	r2, 8008236 <__udivmoddi4+0x2e>
 8008224:	f1c2 0020 	rsb	r0, r2, #32
 8008228:	fa24 f000 	lsr.w	r0, r4, r0
 800822c:	4091      	lsls	r1, r2
 800822e:	4097      	lsls	r7, r2
 8008230:	ea40 0c01 	orr.w	ip, r0, r1
 8008234:	4094      	lsls	r4, r2
 8008236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800823a:	0c23      	lsrs	r3, r4, #16
 800823c:	fbbc f6f8 	udiv	r6, ip, r8
 8008240:	fa1f fe87 	uxth.w	lr, r7
 8008244:	fb08 c116 	mls	r1, r8, r6, ip
 8008248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800824c:	fb06 f10e 	mul.w	r1, r6, lr
 8008250:	4299      	cmp	r1, r3
 8008252:	d909      	bls.n	8008268 <__udivmoddi4+0x60>
 8008254:	18fb      	adds	r3, r7, r3
 8008256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800825a:	f080 8119 	bcs.w	8008490 <__udivmoddi4+0x288>
 800825e:	4299      	cmp	r1, r3
 8008260:	f240 8116 	bls.w	8008490 <__udivmoddi4+0x288>
 8008264:	3e02      	subs	r6, #2
 8008266:	443b      	add	r3, r7
 8008268:	1a5b      	subs	r3, r3, r1
 800826a:	b2a4      	uxth	r4, r4
 800826c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008270:	fb08 3310 	mls	r3, r8, r0, r3
 8008274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008278:	fb00 fe0e 	mul.w	lr, r0, lr
 800827c:	45a6      	cmp	lr, r4
 800827e:	d909      	bls.n	8008294 <__udivmoddi4+0x8c>
 8008280:	193c      	adds	r4, r7, r4
 8008282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008286:	f080 8105 	bcs.w	8008494 <__udivmoddi4+0x28c>
 800828a:	45a6      	cmp	lr, r4
 800828c:	f240 8102 	bls.w	8008494 <__udivmoddi4+0x28c>
 8008290:	3802      	subs	r0, #2
 8008292:	443c      	add	r4, r7
 8008294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008298:	eba4 040e 	sub.w	r4, r4, lr
 800829c:	2600      	movs	r6, #0
 800829e:	b11d      	cbz	r5, 80082a8 <__udivmoddi4+0xa0>
 80082a0:	40d4      	lsrs	r4, r2
 80082a2:	2300      	movs	r3, #0
 80082a4:	e9c5 4300 	strd	r4, r3, [r5]
 80082a8:	4631      	mov	r1, r6
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	b902      	cbnz	r2, 80082b2 <__udivmoddi4+0xaa>
 80082b0:	deff      	udf	#255	; 0xff
 80082b2:	fab2 f282 	clz	r2, r2
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	d150      	bne.n	800835c <__udivmoddi4+0x154>
 80082ba:	1bcb      	subs	r3, r1, r7
 80082bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80082c0:	fa1f f887 	uxth.w	r8, r7
 80082c4:	2601      	movs	r6, #1
 80082c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80082ca:	0c21      	lsrs	r1, r4, #16
 80082cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80082d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80082d4:	fb08 f30c 	mul.w	r3, r8, ip
 80082d8:	428b      	cmp	r3, r1
 80082da:	d907      	bls.n	80082ec <__udivmoddi4+0xe4>
 80082dc:	1879      	adds	r1, r7, r1
 80082de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80082e2:	d202      	bcs.n	80082ea <__udivmoddi4+0xe2>
 80082e4:	428b      	cmp	r3, r1
 80082e6:	f200 80e9 	bhi.w	80084bc <__udivmoddi4+0x2b4>
 80082ea:	4684      	mov	ip, r0
 80082ec:	1ac9      	subs	r1, r1, r3
 80082ee:	b2a3      	uxth	r3, r4
 80082f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80082f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80082f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80082fc:	fb08 f800 	mul.w	r8, r8, r0
 8008300:	45a0      	cmp	r8, r4
 8008302:	d907      	bls.n	8008314 <__udivmoddi4+0x10c>
 8008304:	193c      	adds	r4, r7, r4
 8008306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800830a:	d202      	bcs.n	8008312 <__udivmoddi4+0x10a>
 800830c:	45a0      	cmp	r8, r4
 800830e:	f200 80d9 	bhi.w	80084c4 <__udivmoddi4+0x2bc>
 8008312:	4618      	mov	r0, r3
 8008314:	eba4 0408 	sub.w	r4, r4, r8
 8008318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800831c:	e7bf      	b.n	800829e <__udivmoddi4+0x96>
 800831e:	428b      	cmp	r3, r1
 8008320:	d909      	bls.n	8008336 <__udivmoddi4+0x12e>
 8008322:	2d00      	cmp	r5, #0
 8008324:	f000 80b1 	beq.w	800848a <__udivmoddi4+0x282>
 8008328:	2600      	movs	r6, #0
 800832a:	e9c5 0100 	strd	r0, r1, [r5]
 800832e:	4630      	mov	r0, r6
 8008330:	4631      	mov	r1, r6
 8008332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008336:	fab3 f683 	clz	r6, r3
 800833a:	2e00      	cmp	r6, #0
 800833c:	d14a      	bne.n	80083d4 <__udivmoddi4+0x1cc>
 800833e:	428b      	cmp	r3, r1
 8008340:	d302      	bcc.n	8008348 <__udivmoddi4+0x140>
 8008342:	4282      	cmp	r2, r0
 8008344:	f200 80b8 	bhi.w	80084b8 <__udivmoddi4+0x2b0>
 8008348:	1a84      	subs	r4, r0, r2
 800834a:	eb61 0103 	sbc.w	r1, r1, r3
 800834e:	2001      	movs	r0, #1
 8008350:	468c      	mov	ip, r1
 8008352:	2d00      	cmp	r5, #0
 8008354:	d0a8      	beq.n	80082a8 <__udivmoddi4+0xa0>
 8008356:	e9c5 4c00 	strd	r4, ip, [r5]
 800835a:	e7a5      	b.n	80082a8 <__udivmoddi4+0xa0>
 800835c:	f1c2 0320 	rsb	r3, r2, #32
 8008360:	fa20 f603 	lsr.w	r6, r0, r3
 8008364:	4097      	lsls	r7, r2
 8008366:	fa01 f002 	lsl.w	r0, r1, r2
 800836a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800836e:	40d9      	lsrs	r1, r3
 8008370:	4330      	orrs	r0, r6
 8008372:	0c03      	lsrs	r3, r0, #16
 8008374:	fbb1 f6fe 	udiv	r6, r1, lr
 8008378:	fa1f f887 	uxth.w	r8, r7
 800837c:	fb0e 1116 	mls	r1, lr, r6, r1
 8008380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008384:	fb06 f108 	mul.w	r1, r6, r8
 8008388:	4299      	cmp	r1, r3
 800838a:	fa04 f402 	lsl.w	r4, r4, r2
 800838e:	d909      	bls.n	80083a4 <__udivmoddi4+0x19c>
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8008396:	f080 808d 	bcs.w	80084b4 <__udivmoddi4+0x2ac>
 800839a:	4299      	cmp	r1, r3
 800839c:	f240 808a 	bls.w	80084b4 <__udivmoddi4+0x2ac>
 80083a0:	3e02      	subs	r6, #2
 80083a2:	443b      	add	r3, r7
 80083a4:	1a5b      	subs	r3, r3, r1
 80083a6:	b281      	uxth	r1, r0
 80083a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80083ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80083b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80083b4:	fb00 f308 	mul.w	r3, r0, r8
 80083b8:	428b      	cmp	r3, r1
 80083ba:	d907      	bls.n	80083cc <__udivmoddi4+0x1c4>
 80083bc:	1879      	adds	r1, r7, r1
 80083be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80083c2:	d273      	bcs.n	80084ac <__udivmoddi4+0x2a4>
 80083c4:	428b      	cmp	r3, r1
 80083c6:	d971      	bls.n	80084ac <__udivmoddi4+0x2a4>
 80083c8:	3802      	subs	r0, #2
 80083ca:	4439      	add	r1, r7
 80083cc:	1acb      	subs	r3, r1, r3
 80083ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80083d2:	e778      	b.n	80082c6 <__udivmoddi4+0xbe>
 80083d4:	f1c6 0c20 	rsb	ip, r6, #32
 80083d8:	fa03 f406 	lsl.w	r4, r3, r6
 80083dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80083e0:	431c      	orrs	r4, r3
 80083e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80083e6:	fa01 f306 	lsl.w	r3, r1, r6
 80083ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80083ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80083f2:	431f      	orrs	r7, r3
 80083f4:	0c3b      	lsrs	r3, r7, #16
 80083f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80083fa:	fa1f f884 	uxth.w	r8, r4
 80083fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8008402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8008406:	fb09 fa08 	mul.w	sl, r9, r8
 800840a:	458a      	cmp	sl, r1
 800840c:	fa02 f206 	lsl.w	r2, r2, r6
 8008410:	fa00 f306 	lsl.w	r3, r0, r6
 8008414:	d908      	bls.n	8008428 <__udivmoddi4+0x220>
 8008416:	1861      	adds	r1, r4, r1
 8008418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800841c:	d248      	bcs.n	80084b0 <__udivmoddi4+0x2a8>
 800841e:	458a      	cmp	sl, r1
 8008420:	d946      	bls.n	80084b0 <__udivmoddi4+0x2a8>
 8008422:	f1a9 0902 	sub.w	r9, r9, #2
 8008426:	4421      	add	r1, r4
 8008428:	eba1 010a 	sub.w	r1, r1, sl
 800842c:	b2bf      	uxth	r7, r7
 800842e:	fbb1 f0fe 	udiv	r0, r1, lr
 8008432:	fb0e 1110 	mls	r1, lr, r0, r1
 8008436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800843a:	fb00 f808 	mul.w	r8, r0, r8
 800843e:	45b8      	cmp	r8, r7
 8008440:	d907      	bls.n	8008452 <__udivmoddi4+0x24a>
 8008442:	19e7      	adds	r7, r4, r7
 8008444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8008448:	d22e      	bcs.n	80084a8 <__udivmoddi4+0x2a0>
 800844a:	45b8      	cmp	r8, r7
 800844c:	d92c      	bls.n	80084a8 <__udivmoddi4+0x2a0>
 800844e:	3802      	subs	r0, #2
 8008450:	4427      	add	r7, r4
 8008452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008456:	eba7 0708 	sub.w	r7, r7, r8
 800845a:	fba0 8902 	umull	r8, r9, r0, r2
 800845e:	454f      	cmp	r7, r9
 8008460:	46c6      	mov	lr, r8
 8008462:	4649      	mov	r1, r9
 8008464:	d31a      	bcc.n	800849c <__udivmoddi4+0x294>
 8008466:	d017      	beq.n	8008498 <__udivmoddi4+0x290>
 8008468:	b15d      	cbz	r5, 8008482 <__udivmoddi4+0x27a>
 800846a:	ebb3 020e 	subs.w	r2, r3, lr
 800846e:	eb67 0701 	sbc.w	r7, r7, r1
 8008472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008476:	40f2      	lsrs	r2, r6
 8008478:	ea4c 0202 	orr.w	r2, ip, r2
 800847c:	40f7      	lsrs	r7, r6
 800847e:	e9c5 2700 	strd	r2, r7, [r5]
 8008482:	2600      	movs	r6, #0
 8008484:	4631      	mov	r1, r6
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	462e      	mov	r6, r5
 800848c:	4628      	mov	r0, r5
 800848e:	e70b      	b.n	80082a8 <__udivmoddi4+0xa0>
 8008490:	4606      	mov	r6, r0
 8008492:	e6e9      	b.n	8008268 <__udivmoddi4+0x60>
 8008494:	4618      	mov	r0, r3
 8008496:	e6fd      	b.n	8008294 <__udivmoddi4+0x8c>
 8008498:	4543      	cmp	r3, r8
 800849a:	d2e5      	bcs.n	8008468 <__udivmoddi4+0x260>
 800849c:	ebb8 0e02 	subs.w	lr, r8, r2
 80084a0:	eb69 0104 	sbc.w	r1, r9, r4
 80084a4:	3801      	subs	r0, #1
 80084a6:	e7df      	b.n	8008468 <__udivmoddi4+0x260>
 80084a8:	4608      	mov	r0, r1
 80084aa:	e7d2      	b.n	8008452 <__udivmoddi4+0x24a>
 80084ac:	4660      	mov	r0, ip
 80084ae:	e78d      	b.n	80083cc <__udivmoddi4+0x1c4>
 80084b0:	4681      	mov	r9, r0
 80084b2:	e7b9      	b.n	8008428 <__udivmoddi4+0x220>
 80084b4:	4666      	mov	r6, ip
 80084b6:	e775      	b.n	80083a4 <__udivmoddi4+0x19c>
 80084b8:	4630      	mov	r0, r6
 80084ba:	e74a      	b.n	8008352 <__udivmoddi4+0x14a>
 80084bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80084c0:	4439      	add	r1, r7
 80084c2:	e713      	b.n	80082ec <__udivmoddi4+0xe4>
 80084c4:	3802      	subs	r0, #2
 80084c6:	443c      	add	r4, r7
 80084c8:	e724      	b.n	8008314 <__udivmoddi4+0x10c>
 80084ca:	bf00      	nop

080084cc <__aeabi_idiv0>:
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_Pin) {
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d104      	bne.n	80084ea <HAL_GPIO_EXTI_Callback+0x1a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80084e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084e4:	4803      	ldr	r0, [pc, #12]	; (80084f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80084e6:	f000 fcd8 	bl	8008e9a <HAL_GPIO_TogglePin>
	}
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	40020800 	.word	0x40020800

080084f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084fe:	f000 f9ab 	bl	8008858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008502:	f000 f825 	bl	8008550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008506:	f000 f88b 	bl	8008620 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	uint32_t then = 0, now = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	607b      	str	r3, [r7, #4]
 800850e:	2300      	movs	r3, #0
 8008510:	603b      	str	r3, [r7, #0]

	while (1) {

		now = HAL_GetTick();
 8008512:	f000 fa07 	bl	8008924 <HAL_GetTick>
 8008516:	6038      	str	r0, [r7, #0]
		if (now % 500 == 0 && now != then) {
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4b0b      	ldr	r3, [pc, #44]	; (8008548 <main+0x50>)
 800851c:	fba3 1302 	umull	r1, r3, r3, r2
 8008520:	095b      	lsrs	r3, r3, #5
 8008522:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008526:	fb01 f303 	mul.w	r3, r1, r3
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1f0      	bne.n	8008512 <main+0x1a>
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d0ec      	beq.n	8008512 <main+0x1a>

			//if (now % 1000 == 0)
			//	printf("Tick (now = %lu)\n", now / 1000);

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8008538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800853c:	4803      	ldr	r0, [pc, #12]	; (800854c <main+0x54>)
 800853e:	f000 fcac 	bl	8008e9a <HAL_GPIO_TogglePin>

			then = now;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	607b      	str	r3, [r7, #4]
		now = HAL_GetTick();
 8008546:	e7e4      	b.n	8008512 <main+0x1a>
 8008548:	10624dd3 	.word	0x10624dd3
 800854c:	40020800 	.word	0x40020800

08008550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b094      	sub	sp, #80	; 0x50
 8008554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008556:	f107 0320 	add.w	r3, r7, #32
 800855a:	2230      	movs	r2, #48	; 0x30
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f004 faa0 	bl	800caa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	605a      	str	r2, [r3, #4]
 800856e:	609a      	str	r2, [r3, #8]
 8008570:	60da      	str	r2, [r3, #12]
 8008572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008574:	2300      	movs	r3, #0
 8008576:	60bb      	str	r3, [r7, #8]
 8008578:	4b27      	ldr	r3, [pc, #156]	; (8008618 <SystemClock_Config+0xc8>)
 800857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857c:	4a26      	ldr	r2, [pc, #152]	; (8008618 <SystemClock_Config+0xc8>)
 800857e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008582:	6413      	str	r3, [r2, #64]	; 0x40
 8008584:	4b24      	ldr	r3, [pc, #144]	; (8008618 <SystemClock_Config+0xc8>)
 8008586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800858c:	60bb      	str	r3, [r7, #8]
 800858e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008590:	2300      	movs	r3, #0
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	4b21      	ldr	r3, [pc, #132]	; (800861c <SystemClock_Config+0xcc>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a20      	ldr	r2, [pc, #128]	; (800861c <SystemClock_Config+0xcc>)
 800859a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	4b1e      	ldr	r3, [pc, #120]	; (800861c <SystemClock_Config+0xcc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085a8:	607b      	str	r3, [r7, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085ac:	2301      	movs	r3, #1
 80085ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085b6:	2302      	movs	r3, #2
 80085b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80085c0:	2319      	movs	r3, #25
 80085c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80085c4:	23c0      	movs	r3, #192	; 0xc0
 80085c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085c8:	2302      	movs	r3, #2
 80085ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80085cc:	2304      	movs	r3, #4
 80085ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085d0:	f107 0320 	add.w	r3, r7, #32
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fc0d 	bl	8009df4 <HAL_RCC_OscConfig>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80085e0:	f000 f888 	bl	80086f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085e4:	230f      	movs	r3, #15
 80085e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085e8:	2302      	movs	r3, #2
 80085ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80085f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80085fa:	f107 030c 	add.w	r3, r7, #12
 80085fe:	2103      	movs	r1, #3
 8008600:	4618      	mov	r0, r3
 8008602:	f001 fe6f 	bl	800a2e4 <HAL_RCC_ClockConfig>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800860c:	f000 f872 	bl	80086f4 <Error_Handler>
  }
}
 8008610:	bf00      	nop
 8008612:	3750      	adds	r7, #80	; 0x50
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40023800 	.word	0x40023800
 800861c:	40007000 	.word	0x40007000

08008620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008626:	f107 030c 	add.w	r3, r7, #12
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	605a      	str	r2, [r3, #4]
 8008630:	609a      	str	r2, [r3, #8]
 8008632:	60da      	str	r2, [r3, #12]
 8008634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	4b2a      	ldr	r3, [pc, #168]	; (80086e4 <MX_GPIO_Init+0xc4>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	4a29      	ldr	r2, [pc, #164]	; (80086e4 <MX_GPIO_Init+0xc4>)
 8008640:	f043 0304 	orr.w	r3, r3, #4
 8008644:	6313      	str	r3, [r2, #48]	; 0x30
 8008646:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <MX_GPIO_Init+0xc4>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	60bb      	str	r3, [r7, #8]
 8008650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008652:	2300      	movs	r3, #0
 8008654:	607b      	str	r3, [r7, #4]
 8008656:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <MX_GPIO_Init+0xc4>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	4a22      	ldr	r2, [pc, #136]	; (80086e4 <MX_GPIO_Init+0xc4>)
 800865c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008660:	6313      	str	r3, [r2, #48]	; 0x30
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <MX_GPIO_Init+0xc4>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866a:	607b      	str	r3, [r7, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800866e:	2300      	movs	r3, #0
 8008670:	603b      	str	r3, [r7, #0]
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <MX_GPIO_Init+0xc4>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <MX_GPIO_Init+0xc4>)
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	6313      	str	r3, [r2, #48]	; 0x30
 800867e:	4b19      	ldr	r3, [pc, #100]	; (80086e4 <MX_GPIO_Init+0xc4>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800868a:	2201      	movs	r2, #1
 800868c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008690:	4815      	ldr	r0, [pc, #84]	; (80086e8 <MX_GPIO_Init+0xc8>)
 8008692:	f000 fbe9 	bl	8008e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8008696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800869a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800869c:	2311      	movs	r3, #17
 800869e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80086a8:	f107 030c 	add.w	r3, r7, #12
 80086ac:	4619      	mov	r1, r3
 80086ae:	480e      	ldr	r0, [pc, #56]	; (80086e8 <MX_GPIO_Init+0xc8>)
 80086b0:	f000 fa56 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80086b4:	2301      	movs	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80086b8:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <MX_GPIO_Init+0xcc>)
 80086ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80086c0:	f107 030c 	add.w	r3, r7, #12
 80086c4:	4619      	mov	r1, r3
 80086c6:	480a      	ldr	r0, [pc, #40]	; (80086f0 <MX_GPIO_Init+0xd0>)
 80086c8:	f000 fa4a 	bl	8008b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	2006      	movs	r0, #6
 80086d2:	f000 fa0e 	bl	8008af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80086d6:	2006      	movs	r0, #6
 80086d8:	f000 fa27 	bl	8008b2a <HAL_NVIC_EnableIRQ>

}
 80086dc:	bf00      	nop
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40023800 	.word	0x40023800
 80086e8:	40020800 	.word	0x40020800
 80086ec:	10210000 	.word	0x10210000
 80086f0:	40020000 	.word	0x40020000

080086f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80086f8:	b672      	cpsid	i
}
 80086fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80086fc:	e7fe      	b.n	80086fc <Error_Handler+0x8>
	...

08008700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008706:	2300      	movs	r3, #0
 8008708:	607b      	str	r3, [r7, #4]
 800870a:	4b13      	ldr	r3, [pc, #76]	; (8008758 <HAL_MspInit+0x58>)
 800870c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870e:	4a12      	ldr	r2, [pc, #72]	; (8008758 <HAL_MspInit+0x58>)
 8008710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008714:	6453      	str	r3, [r2, #68]	; 0x44
 8008716:	4b10      	ldr	r3, [pc, #64]	; (8008758 <HAL_MspInit+0x58>)
 8008718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800871e:	607b      	str	r3, [r7, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008722:	2300      	movs	r3, #0
 8008724:	603b      	str	r3, [r7, #0]
 8008726:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <HAL_MspInit+0x58>)
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	4a0b      	ldr	r2, [pc, #44]	; (8008758 <HAL_MspInit+0x58>)
 800872c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008730:	6413      	str	r3, [r2, #64]	; 0x40
 8008732:	4b09      	ldr	r3, [pc, #36]	; (8008758 <HAL_MspInit+0x58>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800873e:	2200      	movs	r2, #0
 8008740:	2100      	movs	r1, #0
 8008742:	2005      	movs	r0, #5
 8008744:	f000 f9d5 	bl	8008af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8008748:	2005      	movs	r0, #5
 800874a:	f000 f9ee 	bl	8008b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40023800 	.word	0x40023800

0800875c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008760:	e7fe      	b.n	8008760 <NMI_Handler+0x4>

08008762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008762:	b480      	push	{r7}
 8008764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008766:	e7fe      	b.n	8008766 <HardFault_Handler+0x4>

08008768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800876c:	e7fe      	b.n	800876c <MemManage_Handler+0x4>

0800876e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800876e:	b480      	push	{r7}
 8008770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008772:	e7fe      	b.n	8008772 <BusFault_Handler+0x4>

08008774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008778:	e7fe      	b.n	8008778 <UsageFault_Handler+0x4>

0800877a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800877a:	b480      	push	{r7}
 800877c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800877e:	bf00      	nop
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008788:	b480      	push	{r7}
 800878a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800878c:	bf00      	nop
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008796:	b480      	push	{r7}
 8008798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800879a:	bf00      	nop
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80087a8:	f000 f8a8 	bl	80088fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80087ac:	bf00      	nop
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80087b4:	bf00      	nop
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80087c2:	2001      	movs	r0, #1
 80087c4:	f000 fb84 	bl	8008ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80087c8:	bf00      	nop
 80087ca:	bd80      	pop	{r7, pc}

080087cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80087d0:	4802      	ldr	r0, [pc, #8]	; (80087dc <OTG_FS_IRQHandler+0x10>)
 80087d2:	f000 fb95 	bl	8008f00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80087d6:	bf00      	nop
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	2000002c 	.word	0x2000002c

080087e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80087e4:	4b06      	ldr	r3, [pc, #24]	; (8008800 <SystemInit+0x20>)
 80087e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ea:	4a05      	ldr	r2, [pc, #20]	; (8008800 <SystemInit+0x20>)
 80087ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	e000ed00 	.word	0xe000ed00

08008804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800883c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008808:	480d      	ldr	r0, [pc, #52]	; (8008840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800880a:	490e      	ldr	r1, [pc, #56]	; (8008844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800880c:	4a0e      	ldr	r2, [pc, #56]	; (8008848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800880e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008810:	e002      	b.n	8008818 <LoopCopyDataInit>

08008812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008816:	3304      	adds	r3, #4

08008818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800881a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800881c:	d3f9      	bcc.n	8008812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800881e:	4a0b      	ldr	r2, [pc, #44]	; (800884c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008820:	4c0b      	ldr	r4, [pc, #44]	; (8008850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008824:	e001      	b.n	800882a <LoopFillZerobss>

08008826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008828:	3204      	adds	r2, #4

0800882a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800882a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800882c:	d3fb      	bcc.n	8008826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800882e:	f7ff ffd7 	bl	80087e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008832:	f004 f913 	bl	800ca5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008836:	f7ff fe5f 	bl	80084f8 <main>
  bx  lr    
 800883a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800883c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008848:	0800caec 	.word	0x0800caec
  ldr r2, =_sbss
 800884c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008850:	20000438 	.word	0x20000438

08008854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008854:	e7fe      	b.n	8008854 <ADC_IRQHandler>
	...

08008858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800885c:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <HAL_Init+0x40>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0d      	ldr	r2, [pc, #52]	; (8008898 <HAL_Init+0x40>)
 8008862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <HAL_Init+0x40>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <HAL_Init+0x40>)
 800886e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008874:	4b08      	ldr	r3, [pc, #32]	; (8008898 <HAL_Init+0x40>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a07      	ldr	r2, [pc, #28]	; (8008898 <HAL_Init+0x40>)
 800887a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008880:	2003      	movs	r0, #3
 8008882:	f000 f92b 	bl	8008adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008886:	2000      	movs	r0, #0
 8008888:	f000 f808 	bl	800889c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800888c:	f7ff ff38 	bl	8008700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	40023c00 	.word	0x40023c00

0800889c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088a4:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <HAL_InitTick+0x54>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	4b12      	ldr	r3, [pc, #72]	; (80088f4 <HAL_InitTick+0x58>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	4619      	mov	r1, r3
 80088ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80088b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f943 	bl	8008b46 <HAL_SYSTICK_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e00e      	b.n	80088e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b0f      	cmp	r3, #15
 80088ce:	d80a      	bhi.n	80088e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088d0:	2200      	movs	r2, #0
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088d8:	f000 f90b 	bl	8008af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088dc:	4a06      	ldr	r2, [pc, #24]	; (80088f8 <HAL_InitTick+0x5c>)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	e000      	b.n	80088e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000000 	.word	0x20000000
 80088f4:	20000008 	.word	0x20000008
 80088f8:	20000004 	.word	0x20000004

080088fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <HAL_IncTick+0x20>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <HAL_IncTick+0x24>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4413      	add	r3, r2
 800890c:	4a04      	ldr	r2, [pc, #16]	; (8008920 <HAL_IncTick+0x24>)
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20000008 	.word	0x20000008
 8008920:	20000434 	.word	0x20000434

08008924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
  return uwTick;
 8008928:	4b03      	ldr	r3, [pc, #12]	; (8008938 <HAL_GetTick+0x14>)
 800892a:	681b      	ldr	r3, [r3, #0]
}
 800892c:	4618      	mov	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000434 	.word	0x20000434

0800893c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <__NVIC_SetPriorityGrouping+0x44>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008958:	4013      	ands	r3, r2
 800895a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800896c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800896e:	4a04      	ldr	r2, [pc, #16]	; (8008980 <__NVIC_SetPriorityGrouping+0x44>)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	60d3      	str	r3, [r2, #12]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	e000ed00 	.word	0xe000ed00

08008984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008988:	4b04      	ldr	r3, [pc, #16]	; (800899c <__NVIC_GetPriorityGrouping+0x18>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	0a1b      	lsrs	r3, r3, #8
 800898e:	f003 0307 	and.w	r3, r3, #7
}
 8008992:	4618      	mov	r0, r3
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	e000ed00 	.word	0xe000ed00

080089a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	db0b      	blt.n	80089ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	f003 021f 	and.w	r2, r3, #31
 80089b8:	4907      	ldr	r1, [pc, #28]	; (80089d8 <__NVIC_EnableIRQ+0x38>)
 80089ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	2001      	movs	r0, #1
 80089c2:	fa00 f202 	lsl.w	r2, r0, r2
 80089c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	e000e100 	.word	0xe000e100

080089dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	db0a      	blt.n	8008a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	490c      	ldr	r1, [pc, #48]	; (8008a28 <__NVIC_SetPriority+0x4c>)
 80089f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089fa:	0112      	lsls	r2, r2, #4
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	440b      	add	r3, r1
 8008a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a04:	e00a      	b.n	8008a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	4908      	ldr	r1, [pc, #32]	; (8008a2c <__NVIC_SetPriority+0x50>)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	3b04      	subs	r3, #4
 8008a14:	0112      	lsls	r2, r2, #4
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	440b      	add	r3, r1
 8008a1a:	761a      	strb	r2, [r3, #24]
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	e000e100 	.word	0xe000e100
 8008a2c:	e000ed00 	.word	0xe000ed00

08008a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	; 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f1c3 0307 	rsb	r3, r3, #7
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	bf28      	it	cs
 8008a4e:	2304      	movcs	r3, #4
 8008a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2b06      	cmp	r3, #6
 8008a58:	d902      	bls.n	8008a60 <NVIC_EncodePriority+0x30>
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3b03      	subs	r3, #3
 8008a5e:	e000      	b.n	8008a62 <NVIC_EncodePriority+0x32>
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43da      	mvns	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	401a      	ands	r2, r3
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a82:	43d9      	mvns	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a88:	4313      	orrs	r3, r2
         );
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3724      	adds	r7, #36	; 0x24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008aa8:	d301      	bcc.n	8008aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e00f      	b.n	8008ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008aae:	4a0a      	ldr	r2, [pc, #40]	; (8008ad8 <SysTick_Config+0x40>)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ab6:	210f      	movs	r1, #15
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008abc:	f7ff ff8e 	bl	80089dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <SysTick_Config+0x40>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ac6:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <SysTick_Config+0x40>)
 8008ac8:	2207      	movs	r2, #7
 8008aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	e000e010 	.word	0xe000e010

08008adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff ff29 	bl	800893c <__NVIC_SetPriorityGrouping>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	4603      	mov	r3, r0
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b04:	f7ff ff3e 	bl	8008984 <__NVIC_GetPriorityGrouping>
 8008b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	6978      	ldr	r0, [r7, #20]
 8008b10:	f7ff ff8e 	bl	8008a30 <NVIC_EncodePriority>
 8008b14:	4602      	mov	r2, r0
 8008b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff ff5d 	bl	80089dc <__NVIC_SetPriority>
}
 8008b22:	bf00      	nop
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	4603      	mov	r3, r0
 8008b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff ff31 	bl	80089a0 <__NVIC_EnableIRQ>
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff ffa2 	bl	8008a98 <SysTick_Config>
 8008b54:	4603      	mov	r3, r0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b089      	sub	sp, #36	; 0x24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e159      	b.n	8008e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	f040 8148 	bne.w	8008e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d005      	beq.n	8008bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d130      	bne.n	8008c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	2203      	movs	r2, #3
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008be8:	2201      	movs	r2, #1
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	091b      	lsrs	r3, r3, #4
 8008bfe:	f003 0201 	and.w	r2, r3, #1
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d017      	beq.n	8008c50 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	43db      	mvns	r3, r3
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	4013      	ands	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	fa02 f303 	lsl.w	r3, r2, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d123      	bne.n	8008ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	08da      	lsrs	r2, r3, #3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3208      	adds	r2, #8
 8008c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	f003 0307 	and.w	r3, r3, #7
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	220f      	movs	r2, #15
 8008c74:	fa02 f303 	lsl.w	r3, r2, r3
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	691a      	ldr	r2, [r3, #16]
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	08da      	lsrs	r2, r3, #3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3208      	adds	r2, #8
 8008c9e:	69b9      	ldr	r1, [r7, #24]
 8008ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	2203      	movs	r2, #3
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	43db      	mvns	r3, r3
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f003 0203 	and.w	r2, r3, #3
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 80a2 	beq.w	8008e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
 8008cea:	4b57      	ldr	r3, [pc, #348]	; (8008e48 <HAL_GPIO_Init+0x2e8>)
 8008cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cee:	4a56      	ldr	r2, [pc, #344]	; (8008e48 <HAL_GPIO_Init+0x2e8>)
 8008cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8008cf6:	4b54      	ldr	r3, [pc, #336]	; (8008e48 <HAL_GPIO_Init+0x2e8>)
 8008cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d02:	4a52      	ldr	r2, [pc, #328]	; (8008e4c <HAL_GPIO_Init+0x2ec>)
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	089b      	lsrs	r3, r3, #2
 8008d08:	3302      	adds	r3, #2
 8008d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	220f      	movs	r2, #15
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	4013      	ands	r3, r2
 8008d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a49      	ldr	r2, [pc, #292]	; (8008e50 <HAL_GPIO_Init+0x2f0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d019      	beq.n	8008d62 <HAL_GPIO_Init+0x202>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a48      	ldr	r2, [pc, #288]	; (8008e54 <HAL_GPIO_Init+0x2f4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_GPIO_Init+0x1fe>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a47      	ldr	r2, [pc, #284]	; (8008e58 <HAL_GPIO_Init+0x2f8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00d      	beq.n	8008d5a <HAL_GPIO_Init+0x1fa>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a46      	ldr	r2, [pc, #280]	; (8008e5c <HAL_GPIO_Init+0x2fc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <HAL_GPIO_Init+0x1f6>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a45      	ldr	r2, [pc, #276]	; (8008e60 <HAL_GPIO_Init+0x300>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d101      	bne.n	8008d52 <HAL_GPIO_Init+0x1f2>
 8008d4e:	2304      	movs	r3, #4
 8008d50:	e008      	b.n	8008d64 <HAL_GPIO_Init+0x204>
 8008d52:	2307      	movs	r3, #7
 8008d54:	e006      	b.n	8008d64 <HAL_GPIO_Init+0x204>
 8008d56:	2303      	movs	r3, #3
 8008d58:	e004      	b.n	8008d64 <HAL_GPIO_Init+0x204>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e002      	b.n	8008d64 <HAL_GPIO_Init+0x204>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <HAL_GPIO_Init+0x204>
 8008d62:	2300      	movs	r3, #0
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	f002 0203 	and.w	r2, r2, #3
 8008d6a:	0092      	lsls	r2, r2, #2
 8008d6c:	4093      	lsls	r3, r2
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d74:	4935      	ldr	r1, [pc, #212]	; (8008e4c <HAL_GPIO_Init+0x2ec>)
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	089b      	lsrs	r3, r3, #2
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d82:	4b38      	ldr	r3, [pc, #224]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008da6:	4a2f      	ldr	r2, [pc, #188]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008dac:	4b2d      	ldr	r3, [pc, #180]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	43db      	mvns	r3, r3
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	4013      	ands	r3, r2
 8008dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008dd0:	4a24      	ldr	r2, [pc, #144]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dd6:	4b23      	ldr	r3, [pc, #140]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	43db      	mvns	r3, r3
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	4013      	ands	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008dfa:	4a1a      	ldr	r2, [pc, #104]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e00:	4b18      	ldr	r3, [pc, #96]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	43db      	mvns	r3, r3
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e24:	4a0f      	ldr	r2, [pc, #60]	; (8008e64 <HAL_GPIO_Init+0x304>)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b0f      	cmp	r3, #15
 8008e34:	f67f aea2 	bls.w	8008b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	3724      	adds	r7, #36	; 0x24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	40013800 	.word	0x40013800
 8008e50:	40020000 	.word	0x40020000
 8008e54:	40020400 	.word	0x40020400
 8008e58:	40020800 	.word	0x40020800
 8008e5c:	40020c00 	.word	0x40020c00
 8008e60:	40021000 	.word	0x40021000
 8008e64:	40013c00 	.word	0x40013c00

08008e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	807b      	strh	r3, [r7, #2]
 8008e74:	4613      	mov	r3, r2
 8008e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e78:	787b      	ldrb	r3, [r7, #1]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e7e:	887a      	ldrh	r2, [r7, #2]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e84:	e003      	b.n	8008e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e86:	887b      	ldrh	r3, [r7, #2]
 8008e88:	041a      	lsls	r2, r3, #16
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	619a      	str	r2, [r3, #24]
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008eac:	887a      	ldrh	r2, [r7, #2]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	041a      	lsls	r2, r3, #16
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	43d9      	mvns	r1, r3
 8008eb8:	887b      	ldrh	r3, [r7, #2]
 8008eba:	400b      	ands	r3, r1
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	619a      	str	r2, [r3, #24]
}
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
	...

08008ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008eda:	4b08      	ldr	r3, [pc, #32]	; (8008efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d006      	beq.n	8008ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ee6:	4a05      	ldr	r2, [pc, #20]	; (8008efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008eec:	88fb      	ldrh	r3, [r7, #6]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff faee 	bl	80084d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	40013c00 	.word	0x40013c00

08008f00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008f00:	b590      	push	{r4, r7, lr}
 8008f02:	b08d      	sub	sp, #52	; 0x34
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 fa82 	bl	800b420 <USB_GetMode>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f040 839d 	bne.w	800965e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f002 f9e6 	bl	800b2fa <USB_ReadInterrupts>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8393 	beq.w	800965c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f002 f9dd 	bl	800b2fa <USB_ReadInterrupts>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d107      	bne.n	8008f5a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f002 0202 	and.w	r2, r2, #2
 8008f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f002 f9cb 	bl	800b2fa <USB_ReadInterrupts>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f003 0310 	and.w	r3, r3, #16
 8008f6a:	2b10      	cmp	r3, #16
 8008f6c:	d161      	bne.n	8009032 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0210 	bic.w	r2, r2, #16
 8008f7c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	f003 020f 	and.w	r2, r3, #15
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	4413      	add	r3, r2
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	0c5b      	lsrs	r3, r3, #17
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d124      	bne.n	8008ff4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d035      	beq.n	8009022 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	091b      	lsrs	r3, r3, #4
 8008fbe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	6a38      	ldr	r0, [r7, #32]
 8008fca:	f002 f873 	bl	800b0b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	091b      	lsrs	r3, r3, #4
 8008fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fda:	441a      	add	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	699a      	ldr	r2, [r3, #24]
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fec:	441a      	add	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	619a      	str	r2, [r3, #24]
 8008ff2:	e016      	b.n	8009022 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	0c5b      	lsrs	r3, r3, #17
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	2b06      	cmp	r3, #6
 8008ffe:	d110      	bne.n	8009022 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009006:	2208      	movs	r2, #8
 8009008:	4619      	mov	r1, r3
 800900a:	6a38      	ldr	r0, [r7, #32]
 800900c:	f002 f852 	bl	800b0b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	699a      	ldr	r2, [r3, #24]
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	091b      	lsrs	r3, r3, #4
 8009018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800901c:	441a      	add	r2, r3
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 0210 	orr.w	r2, r2, #16
 8009030:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f002 f95f 	bl	800b2fa <USB_ReadInterrupts>
 800903c:	4603      	mov	r3, r0
 800903e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009042:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009046:	d16e      	bne.n	8009126 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4618      	mov	r0, r3
 8009052:	f002 f965 	bl	800b320 <USB_ReadDevAllOutEpInterrupt>
 8009056:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009058:	e062      	b.n	8009120 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d057      	beq.n	8009114 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	b2d2      	uxtb	r2, r2
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f002 f98a 	bl	800b388 <USB_ReadDevOutEPInterrupt>
 8009074:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00c      	beq.n	800909a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908c:	461a      	mov	r2, r3
 800908e:	2301      	movs	r3, #1
 8009090:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fd4f 	bl	8009b38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f003 0308 	and.w	r3, r3, #8
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00c      	beq.n	80090be <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	461a      	mov	r2, r3
 80090b2:	2308      	movs	r3, #8
 80090b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80090b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fe49 	bl	8009d50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d008      	beq.n	80090da <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d4:	461a      	mov	r2, r3
 80090d6:	2310      	movs	r3, #16
 80090d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d008      	beq.n	80090f6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f0:	461a      	mov	r2, r3
 80090f2:	2320      	movs	r3, #32
 80090f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d009      	beq.n	8009114 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910c:	461a      	mov	r2, r3
 800910e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009112:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	3301      	adds	r3, #1
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d199      	bne.n	800905a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4618      	mov	r0, r3
 800912c:	f002 f8e5 	bl	800b2fa <USB_ReadInterrupts>
 8009130:	4603      	mov	r3, r0
 8009132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009136:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800913a:	f040 80c0 	bne.w	80092be <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f002 f906 	bl	800b354 <USB_ReadDevAllInEpInterrupt>
 8009148:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800914e:	e0b2      	b.n	80092b6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 80a7 	beq.w	80092aa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f002 f92c 	bl	800b3c4 <USB_ReadDevInEPInterrupt>
 800916c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d057      	beq.n	8009228 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	2201      	movs	r2, #1
 8009180:	fa02 f303 	lsl.w	r3, r2, r3
 8009184:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	43db      	mvns	r3, r3
 8009192:	69f9      	ldr	r1, [r7, #28]
 8009194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009198:	4013      	ands	r3, r2
 800919a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	461a      	mov	r2, r3
 80091aa:	2301      	movs	r3, #1
 80091ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d132      	bne.n	800921c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	4613      	mov	r3, r2
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	440b      	add	r3, r1
 80091c4:	3348      	adds	r3, #72	; 0x48
 80091c6:	6819      	ldr	r1, [r3, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091cc:	4613      	mov	r3, r2
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	1a9b      	subs	r3, r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4403      	add	r3, r0
 80091d6:	3344      	adds	r3, #68	; 0x44
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4419      	add	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e0:	4613      	mov	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4403      	add	r3, r0
 80091ea:	3348      	adds	r3, #72	; 0x48
 80091ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d113      	bne.n	800921c <HAL_PCD_IRQHandler+0x31c>
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f8:	4613      	mov	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	3350      	adds	r3, #80	; 0x50
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d108      	bne.n	800921c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009214:	461a      	mov	r2, r3
 8009216:	2101      	movs	r1, #1
 8009218:	f002 f934 	bl	800b484 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	b2db      	uxtb	r3, r3
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f003 fa41 	bl	800c6aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f003 0308 	and.w	r3, r3, #8
 800922e:	2b00      	cmp	r3, #0
 8009230:	d008      	beq.n	8009244 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923e:	461a      	mov	r2, r3
 8009240:	2308      	movs	r3, #8
 8009242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	461a      	mov	r2, r3
 800925c:	2310      	movs	r3, #16
 800925e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	d008      	beq.n	800927c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009276:	461a      	mov	r2, r3
 8009278:	2340      	movs	r3, #64	; 0x40
 800927a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	4413      	add	r3, r2
 800928e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009292:	461a      	mov	r2, r3
 8009294:	2302      	movs	r3, #2
 8009296:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80092a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fbb9 	bl	8009a1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	3301      	adds	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	085b      	lsrs	r3, r3, #1
 80092b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f47f af49 	bne.w	8009150 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f002 f819 	bl	800b2fa <USB_ReadInterrupts>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d2:	d122      	bne.n	800931a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092e2:	f023 0301 	bic.w	r3, r3, #1
 80092e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d108      	bne.n	8009304 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80092fa:	2100      	movs	r1, #0
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fd6d 	bl	8009ddc <HAL_PCDEx_LPM_Callback>
 8009302:	e002      	b.n	800930a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f003 fa3d 	bl	800c784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	695a      	ldr	r2, [r3, #20]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f001 ffeb 	bl	800b2fa <USB_ReadInterrupts>
 8009324:	4603      	mov	r3, r0
 8009326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800932a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800932e:	d112      	bne.n	8009356 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b01      	cmp	r3, #1
 800933e:	d102      	bne.n	8009346 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f003 f9f9 	bl	800c738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695a      	ldr	r2, [r3, #20]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009354:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4618      	mov	r0, r3
 800935c:	f001 ffcd 	bl	800b2fa <USB_ReadInterrupts>
 8009360:	4603      	mov	r3, r0
 8009362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936a:	f040 80c7 	bne.w	80094fc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	69fa      	ldr	r2, [r7, #28]
 8009378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2110      	movs	r1, #16
 8009388:	4618      	mov	r0, r3
 800938a:	f001 f9f5 	bl	800a778 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800938e:	2300      	movs	r3, #0
 8009390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009392:	e056      	b.n	8009442 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a0:	461a      	mov	r2, r3
 80093a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093c6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f4:	461a      	mov	r2, r3
 80093f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800940c:	0151      	lsls	r1, r2, #5
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	440a      	add	r2, r1
 8009412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800941a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009436:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800943a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	3301      	adds	r3, #1
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009448:	429a      	cmp	r2, r3
 800944a:	d3a3      	bcc.n	8009394 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800945a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800945e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	2b00      	cmp	r3, #0
 8009466:	d016      	beq.n	8009496 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009478:	f043 030b 	orr.w	r3, r3, #11
 800947c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800948e:	f043 030b 	orr.w	r3, r3, #11
 8009492:	6453      	str	r3, [r2, #68]	; 0x44
 8009494:	e015      	b.n	80094c2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80094a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80094ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094bc:	f043 030b 	orr.w	r3, r3, #11
 80094c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	69fa      	ldr	r2, [r7, #28]
 80094cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6818      	ldr	r0, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80094e6:	461a      	mov	r2, r3
 80094e8:	f001 ffcc 	bl	800b484 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	695a      	ldr	r2, [r3, #20]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80094fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4618      	mov	r0, r3
 8009502:	f001 fefa 	bl	800b2fa <USB_ReadInterrupts>
 8009506:	4603      	mov	r3, r0
 8009508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800950c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009510:	d124      	bne.n	800955c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f001 ff90 	bl	800b43c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f001 f94f 	bl	800a7c4 <USB_GetDevSpeed>
 8009526:	4603      	mov	r3, r0
 8009528:	461a      	mov	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681c      	ldr	r4, [r3, #0]
 8009532:	f001 f873 	bl	800a61c <HAL_RCC_GetHCLKFreq>
 8009536:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800953c:	b2db      	uxtb	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	4620      	mov	r0, r4
 8009542:	f001 f877 	bl	800a634 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f003 f8d7 	bl	800c6fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	695a      	ldr	r2, [r3, #20]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800955a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f001 feca 	bl	800b2fa <USB_ReadInterrupts>
 8009566:	4603      	mov	r3, r0
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b08      	cmp	r3, #8
 800956e:	d10a      	bne.n	8009586 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f003 f8b4 	bl	800c6de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695a      	ldr	r2, [r3, #20]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f002 0208 	and.w	r2, r2, #8
 8009584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f001 feb5 	bl	800b2fa <USB_ReadInterrupts>
 8009590:	4603      	mov	r3, r0
 8009592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800959a:	d10f      	bne.n	80095bc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f003 f90c 	bl	800c7c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695a      	ldr	r2, [r3, #20]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80095ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 fe9a 	bl	800b2fa <USB_ReadInterrupts>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095d0:	d10f      	bne.n	80095f2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f003 f8df 	bl	800c7a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695a      	ldr	r2, [r3, #20]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80095f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f001 fe7f 	bl	800b2fa <USB_ReadInterrupts>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009606:	d10a      	bne.n	800961e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f003 f8ed 	bl	800c7e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	695a      	ldr	r2, [r3, #20]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800961c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fe69 	bl	800b2fa <USB_ReadInterrupts>
 8009628:	4603      	mov	r3, r0
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	2b04      	cmp	r3, #4
 8009630:	d115      	bne.n	800965e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f003 f8dd 	bl	800c804 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6859      	ldr	r1, [r3, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	430a      	orrs	r2, r1
 8009658:	605a      	str	r2, [r3, #4]
 800965a:	e000      	b.n	800965e <HAL_PCD_IRQHandler+0x75e>
      return;
 800965c:	bf00      	nop
    }
  }
}
 800965e:	3734      	adds	r7, #52	; 0x34
 8009660:	46bd      	mov	sp, r7
 8009662:	bd90      	pop	{r4, r7, pc}

08009664 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <HAL_PCD_SetAddress+0x1a>
 800967a:	2302      	movs	r3, #2
 800967c:	e013      	b.n	80096a6 <HAL_PCD_SetAddress+0x42>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	78fa      	ldrb	r2, [r7, #3]
 800968a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f001 fe09 	bl	800b2ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	4608      	mov	r0, r1
 80096b8:	4611      	mov	r1, r2
 80096ba:	461a      	mov	r2, r3
 80096bc:	4603      	mov	r3, r0
 80096be:	70fb      	strb	r3, [r7, #3]
 80096c0:	460b      	mov	r3, r1
 80096c2:	803b      	strh	r3, [r7, #0]
 80096c4:	4613      	mov	r3, r2
 80096c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80096cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da0f      	bge.n	80096f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	f003 020f 	and.w	r2, r3, #15
 80096da:	4613      	mov	r3, r2
 80096dc:	00db      	lsls	r3, r3, #3
 80096de:	1a9b      	subs	r3, r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	3338      	adds	r3, #56	; 0x38
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	4413      	add	r3, r2
 80096e8:	3304      	adds	r3, #4
 80096ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	705a      	strb	r2, [r3, #1]
 80096f2:	e00f      	b.n	8009714 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	f003 020f 	and.w	r2, r3, #15
 80096fa:	4613      	mov	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	1a9b      	subs	r3, r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	4413      	add	r3, r2
 800970a:	3304      	adds	r3, #4
 800970c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	b2da      	uxtb	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009720:	883a      	ldrh	r2, [r7, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	78ba      	ldrb	r2, [r7, #2]
 800972a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	785b      	ldrb	r3, [r3, #1]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	b29a      	uxth	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800973e:	78bb      	ldrb	r3, [r7, #2]
 8009740:	2b02      	cmp	r3, #2
 8009742:	d102      	bne.n	800974a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_PCD_EP_Open+0xaa>
 8009754:	2302      	movs	r3, #2
 8009756:	e00e      	b.n	8009776 <HAL_PCD_EP_Open+0xc8>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68f9      	ldr	r1, [r7, #12]
 8009766:	4618      	mov	r0, r3
 8009768:	f001 f851 	bl	800a80e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009774:	7afb      	ldrb	r3, [r7, #11]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b086      	sub	sp, #24
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
 800978a:	460b      	mov	r3, r1
 800978c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800978e:	7afb      	ldrb	r3, [r7, #11]
 8009790:	f003 020f 	and.w	r2, r3, #15
 8009794:	4613      	mov	r3, r2
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	3304      	adds	r3, #4
 80097a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2200      	movs	r2, #0
 80097b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097c0:	7afb      	ldrb	r3, [r7, #11]
 80097c2:	f003 030f 	and.w	r3, r3, #15
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d102      	bne.n	80097da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80097da:	7afb      	ldrb	r3, [r7, #11]
 80097dc:	f003 030f 	and.w	r3, r3, #15
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d109      	bne.n	80097f8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	6979      	ldr	r1, [r7, #20]
 80097f2:	f001 fad7 	bl	800ada4 <USB_EP0StartXfer>
 80097f6:	e008      	b.n	800980a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	461a      	mov	r2, r3
 8009804:	6979      	ldr	r1, [r7, #20]
 8009806:	f001 f889 	bl	800a91c <USB_EPStartXfer>
  }

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	607a      	str	r2, [r7, #4]
 800981e:	603b      	str	r3, [r7, #0]
 8009820:	460b      	mov	r3, r1
 8009822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	f003 020f 	and.w	r2, r3, #15
 800982a:	4613      	mov	r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	3338      	adds	r3, #56	; 0x38
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	3304      	adds	r3, #4
 800983a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2200      	movs	r2, #0
 800984c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2201      	movs	r2, #1
 8009852:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009854:	7afb      	ldrb	r3, [r7, #11]
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	b2da      	uxtb	r2, r3
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d102      	bne.n	800986e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	2b00      	cmp	r3, #0
 8009876:	d109      	bne.n	800988c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6818      	ldr	r0, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	6979      	ldr	r1, [r7, #20]
 8009886:	f001 fa8d 	bl	800ada4 <USB_EP0StartXfer>
 800988a:	e008      	b.n	800989e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	6979      	ldr	r1, [r7, #20]
 800989a:	f001 f83f 	bl	800a91c <USB_EPStartXfer>
  }

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d901      	bls.n	80098c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e050      	b.n	8009968 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80098c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	da0f      	bge.n	80098ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	f003 020f 	and.w	r2, r3, #15
 80098d4:	4613      	mov	r3, r2
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	3338      	adds	r3, #56	; 0x38
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	4413      	add	r3, r2
 80098e2:	3304      	adds	r3, #4
 80098e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	705a      	strb	r2, [r3, #1]
 80098ec:	e00d      	b.n	800990a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80098ee:	78fa      	ldrb	r2, [r7, #3]
 80098f0:	4613      	mov	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	4413      	add	r3, r2
 8009900:	3304      	adds	r3, #4
 8009902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2201      	movs	r2, #1
 800990e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	f003 030f 	and.w	r3, r3, #15
 8009916:	b2da      	uxtb	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_PCD_EP_SetStall+0x82>
 8009926:	2302      	movs	r3, #2
 8009928:	e01e      	b.n	8009968 <HAL_PCD_EP_SetStall+0xc0>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fbe4 	bl	800b106 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f003 030f 	and.w	r3, r3, #15
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	b2d9      	uxtb	r1, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009958:	461a      	mov	r2, r3
 800995a:	f001 fd93 	bl	800b484 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	f003 020f 	and.w	r2, r3, #15
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d901      	bls.n	800998e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e042      	b.n	8009a14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800998e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009992:	2b00      	cmp	r3, #0
 8009994:	da0f      	bge.n	80099b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	f003 020f 	and.w	r2, r3, #15
 800999c:	4613      	mov	r3, r2
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	3338      	adds	r3, #56	; 0x38
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	4413      	add	r3, r2
 80099aa:	3304      	adds	r3, #4
 80099ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	705a      	strb	r2, [r3, #1]
 80099b4:	e00f      	b.n	80099d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 020f 	and.w	r2, r3, #15
 80099bc:	4613      	mov	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	1a9b      	subs	r3, r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4413      	add	r3, r2
 80099cc:	3304      	adds	r3, #4
 80099ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	f003 030f 	and.w	r3, r3, #15
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d101      	bne.n	80099f6 <HAL_PCD_EP_ClrStall+0x86>
 80099f2:	2302      	movs	r3, #2
 80099f4:	e00e      	b.n	8009a14 <HAL_PCD_EP_ClrStall+0xa4>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 fbec 	bl	800b1e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	3338      	adds	r3, #56	; 0x38
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	4413      	add	r3, r2
 8009a40:	3304      	adds	r3, #4
 8009a42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	699a      	ldr	r2, [r3, #24]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d901      	bls.n	8009a54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e06c      	b.n	8009b2e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	695a      	ldr	r2, [r3, #20]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d902      	bls.n	8009a70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	3303      	adds	r3, #3
 8009a74:	089b      	lsrs	r3, r3, #2
 8009a76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a78:	e02b      	b.n	8009ad2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	695a      	ldr	r2, [r3, #20]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	69fa      	ldr	r2, [r7, #28]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d902      	bls.n	8009a96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	3303      	adds	r3, #3
 8009a9a:	089b      	lsrs	r3, r3, #2
 8009a9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68d9      	ldr	r1, [r3, #12]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	6978      	ldr	r0, [r7, #20]
 8009ab6:	f001 fac8 	bl	800b04a <USB_WritePacket>

    ep->xfer_buff  += len;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	441a      	add	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	699a      	ldr	r2, [r3, #24]
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	441a      	add	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d809      	bhi.n	8009afc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d203      	bcs.n	8009afc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1be      	bne.n	8009a7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	695a      	ldr	r2, [r3, #20]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d811      	bhi.n	8009b2c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	2201      	movs	r2, #1
 8009b10:	fa02 f303 	lsl.w	r3, r2, r3
 8009b14:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	43db      	mvns	r3, r3
 8009b22:	6939      	ldr	r1, [r7, #16]
 8009b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b28:	4013      	ands	r3, r2
 8009b2a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	333c      	adds	r3, #60	; 0x3c
 8009b50:	3304      	adds	r3, #4
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	f040 80a0 	bne.w	8009cb0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f003 0308 	and.w	r3, r3, #8
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d015      	beq.n	8009ba6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4a72      	ldr	r2, [pc, #456]	; (8009d48 <PCD_EP_OutXfrComplete_int+0x210>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	f240 80dd 	bls.w	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80d7 	beq.w	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ba2:	6093      	str	r3, [r2, #8]
 8009ba4:	e0cb      	b.n	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d009      	beq.n	8009bc4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	2320      	movs	r3, #32
 8009bc0:	6093      	str	r3, [r2, #8]
 8009bc2:	e0bc      	b.n	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f040 80b7 	bne.w	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a5d      	ldr	r2, [pc, #372]	; (8009d48 <PCD_EP_OutXfrComplete_int+0x210>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d90f      	bls.n	8009bf8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00a      	beq.n	8009bf8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bf4:	6093      	str	r3, [r2, #8]
 8009bf6:	e0a2      	b.n	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	1a9b      	subs	r3, r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	440b      	add	r3, r1
 8009c06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009c0a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	0159      	lsls	r1, r3, #5
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	440b      	add	r3, r1
 8009c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009c1e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4613      	mov	r3, r2
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	1a9b      	subs	r3, r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4403      	add	r3, r0
 8009c2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009c32:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c46:	6819      	ldr	r1, [r3, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4403      	add	r3, r0
 8009c56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4419      	add	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	4613      	mov	r3, r2
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4403      	add	r3, r0
 8009c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c70:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d114      	bne.n	8009ca2 <PCD_EP_OutXfrComplete_int+0x16a>
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	1a9b      	subs	r3, r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d108      	bne.n	8009ca2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	f001 fbf1 	bl	800b484 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f002 fce3 	bl	800c674 <HAL_PCD_DataOutStageCallback>
 8009cae:	e046      	b.n	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4a26      	ldr	r2, [pc, #152]	; (8009d4c <PCD_EP_OutXfrComplete_int+0x214>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d124      	bne.n	8009d02 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cd4:	6093      	str	r3, [r2, #8]
 8009cd6:	e032      	b.n	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cee:	461a      	mov	r2, r3
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f002 fcba 	bl	800c674 <HAL_PCD_DataOutStageCallback>
 8009d00:	e01d      	b.n	8009d3e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d114      	bne.n	8009d32 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	440b      	add	r3, r1
 8009d16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d108      	bne.n	8009d32 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	f001 fba9 	bl	800b484 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f002 fc9b 	bl	800c674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	4f54300a 	.word	0x4f54300a
 8009d4c:	4f54310a 	.word	0x4f54310a

08009d50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	333c      	adds	r3, #60	; 0x3c
 8009d68:	3304      	adds	r3, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4a15      	ldr	r2, [pc, #84]	; (8009dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d90e      	bls.n	8009da4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d009      	beq.n	8009da4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009da2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f002 fc53 	bl	800c650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d90c      	bls.n	8009dcc <PCD_EP_OutSetupPacket_int+0x7c>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d108      	bne.n	8009dcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	f001 fb5c 	bl	800b484 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	4f54300a 	.word	0x4f54300a

08009ddc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e264      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d075      	beq.n	8009efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e12:	4ba3      	ldr	r3, [pc, #652]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f003 030c 	and.w	r3, r3, #12
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	d00c      	beq.n	8009e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e1e:	4ba0      	ldr	r3, [pc, #640]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e26:	2b08      	cmp	r3, #8
 8009e28:	d112      	bne.n	8009e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e2a:	4b9d      	ldr	r3, [pc, #628]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e36:	d10b      	bne.n	8009e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e38:	4b99      	ldr	r3, [pc, #612]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d05b      	beq.n	8009efc <HAL_RCC_OscConfig+0x108>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d157      	bne.n	8009efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e23f      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e58:	d106      	bne.n	8009e68 <HAL_RCC_OscConfig+0x74>
 8009e5a:	4b91      	ldr	r3, [pc, #580]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a90      	ldr	r2, [pc, #576]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	e01d      	b.n	8009ea4 <HAL_RCC_OscConfig+0xb0>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e70:	d10c      	bne.n	8009e8c <HAL_RCC_OscConfig+0x98>
 8009e72:	4b8b      	ldr	r3, [pc, #556]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a8a      	ldr	r2, [pc, #552]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	4b88      	ldr	r3, [pc, #544]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a87      	ldr	r2, [pc, #540]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	e00b      	b.n	8009ea4 <HAL_RCC_OscConfig+0xb0>
 8009e8c:	4b84      	ldr	r3, [pc, #528]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a83      	ldr	r2, [pc, #524]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	4b81      	ldr	r3, [pc, #516]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a80      	ldr	r2, [pc, #512]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d013      	beq.n	8009ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eac:	f7fe fd3a 	bl	8008924 <HAL_GetTick>
 8009eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eb2:	e008      	b.n	8009ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009eb4:	f7fe fd36 	bl	8008924 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b64      	cmp	r3, #100	; 0x64
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e204      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ec6:	4b76      	ldr	r3, [pc, #472]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0f0      	beq.n	8009eb4 <HAL_RCC_OscConfig+0xc0>
 8009ed2:	e014      	b.n	8009efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ed4:	f7fe fd26 	bl	8008924 <HAL_GetTick>
 8009ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eda:	e008      	b.n	8009eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009edc:	f7fe fd22 	bl	8008924 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b64      	cmp	r3, #100	; 0x64
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e1f0      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eee:	4b6c      	ldr	r3, [pc, #432]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f0      	bne.n	8009edc <HAL_RCC_OscConfig+0xe8>
 8009efa:	e000      	b.n	8009efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d063      	beq.n	8009fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f0a:	4b65      	ldr	r3, [pc, #404]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f003 030c 	and.w	r3, r3, #12
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00b      	beq.n	8009f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f16:	4b62      	ldr	r3, [pc, #392]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f1e:	2b08      	cmp	r3, #8
 8009f20:	d11c      	bne.n	8009f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f22:	4b5f      	ldr	r3, [pc, #380]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d116      	bne.n	8009f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f2e:	4b5c      	ldr	r3, [pc, #368]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d005      	beq.n	8009f46 <HAL_RCC_OscConfig+0x152>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d001      	beq.n	8009f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e1c4      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f46:	4b56      	ldr	r3, [pc, #344]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	4952      	ldr	r1, [pc, #328]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f5a:	e03a      	b.n	8009fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d020      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f64:	4b4f      	ldr	r3, [pc, #316]	; (800a0a4 <HAL_RCC_OscConfig+0x2b0>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f6a:	f7fe fcdb 	bl	8008924 <HAL_GetTick>
 8009f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f70:	e008      	b.n	8009f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f72:	f7fe fcd7 	bl	8008924 <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d901      	bls.n	8009f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e1a5      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f84:	4b46      	ldr	r3, [pc, #280]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0f0      	beq.n	8009f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f90:	4b43      	ldr	r3, [pc, #268]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	00db      	lsls	r3, r3, #3
 8009f9e:	4940      	ldr	r1, [pc, #256]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	600b      	str	r3, [r1, #0]
 8009fa4:	e015      	b.n	8009fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fa6:	4b3f      	ldr	r3, [pc, #252]	; (800a0a4 <HAL_RCC_OscConfig+0x2b0>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fac:	f7fe fcba 	bl	8008924 <HAL_GetTick>
 8009fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fb2:	e008      	b.n	8009fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fb4:	f7fe fcb6 	bl	8008924 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d901      	bls.n	8009fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e184      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fc6:	4b36      	ldr	r3, [pc, #216]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f0      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0308 	and.w	r3, r3, #8
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d030      	beq.n	800a040 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d016      	beq.n	800a014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fe6:	4b30      	ldr	r3, [pc, #192]	; (800a0a8 <HAL_RCC_OscConfig+0x2b4>)
 8009fe8:	2201      	movs	r2, #1
 8009fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fec:	f7fe fc9a 	bl	8008924 <HAL_GetTick>
 8009ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ff4:	f7fe fc96 	bl	8008924 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d901      	bls.n	800a006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e164      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a006:	4b26      	ldr	r3, [pc, #152]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 800a008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0f0      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x200>
 800a012:	e015      	b.n	800a040 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a014:	4b24      	ldr	r3, [pc, #144]	; (800a0a8 <HAL_RCC_OscConfig+0x2b4>)
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a01a:	f7fe fc83 	bl	8008924 <HAL_GetTick>
 800a01e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a020:	e008      	b.n	800a034 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a022:	f7fe fc7f 	bl	8008924 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e14d      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a034:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 800a036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a038:	f003 0302 	and.w	r3, r3, #2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1f0      	bne.n	800a022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 80a0 	beq.w	800a18e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a04e:	2300      	movs	r3, #0
 800a050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a052:	4b13      	ldr	r3, [pc, #76]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10f      	bne.n	800a07e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a05e:	2300      	movs	r3, #0
 800a060:	60bb      	str	r3, [r7, #8]
 800a062:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	4a0e      	ldr	r2, [pc, #56]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 800a068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a06c:	6413      	str	r3, [r2, #64]	; 0x40
 800a06e:	4b0c      	ldr	r3, [pc, #48]	; (800a0a0 <HAL_RCC_OscConfig+0x2ac>)
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a076:	60bb      	str	r3, [r7, #8]
 800a078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a07a:	2301      	movs	r3, #1
 800a07c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a07e:	4b0b      	ldr	r3, [pc, #44]	; (800a0ac <HAL_RCC_OscConfig+0x2b8>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a086:	2b00      	cmp	r3, #0
 800a088:	d121      	bne.n	800a0ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a08a:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <HAL_RCC_OscConfig+0x2b8>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a07      	ldr	r2, [pc, #28]	; (800a0ac <HAL_RCC_OscConfig+0x2b8>)
 800a090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a096:	f7fe fc45 	bl	8008924 <HAL_GetTick>
 800a09a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a09c:	e011      	b.n	800a0c2 <HAL_RCC_OscConfig+0x2ce>
 800a09e:	bf00      	nop
 800a0a0:	40023800 	.word	0x40023800
 800a0a4:	42470000 	.word	0x42470000
 800a0a8:	42470e80 	.word	0x42470e80
 800a0ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0b0:	f7fe fc38 	bl	8008924 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d901      	bls.n	800a0c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e106      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0c2:	4b85      	ldr	r3, [pc, #532]	; (800a2d8 <HAL_RCC_OscConfig+0x4e4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0f0      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d106      	bne.n	800a0e4 <HAL_RCC_OscConfig+0x2f0>
 800a0d6:	4b81      	ldr	r3, [pc, #516]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0da:	4a80      	ldr	r2, [pc, #512]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a0dc:	f043 0301 	orr.w	r3, r3, #1
 800a0e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a0e2:	e01c      	b.n	800a11e <HAL_RCC_OscConfig+0x32a>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	2b05      	cmp	r3, #5
 800a0ea:	d10c      	bne.n	800a106 <HAL_RCC_OscConfig+0x312>
 800a0ec:	4b7b      	ldr	r3, [pc, #492]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f0:	4a7a      	ldr	r2, [pc, #488]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a0f2:	f043 0304 	orr.w	r3, r3, #4
 800a0f6:	6713      	str	r3, [r2, #112]	; 0x70
 800a0f8:	4b78      	ldr	r3, [pc, #480]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fc:	4a77      	ldr	r2, [pc, #476]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a0fe:	f043 0301 	orr.w	r3, r3, #1
 800a102:	6713      	str	r3, [r2, #112]	; 0x70
 800a104:	e00b      	b.n	800a11e <HAL_RCC_OscConfig+0x32a>
 800a106:	4b75      	ldr	r3, [pc, #468]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10a:	4a74      	ldr	r2, [pc, #464]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a10c:	f023 0301 	bic.w	r3, r3, #1
 800a110:	6713      	str	r3, [r2, #112]	; 0x70
 800a112:	4b72      	ldr	r3, [pc, #456]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a116:	4a71      	ldr	r2, [pc, #452]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a118:	f023 0304 	bic.w	r3, r3, #4
 800a11c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d015      	beq.n	800a152 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a126:	f7fe fbfd 	bl	8008924 <HAL_GetTick>
 800a12a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a12c:	e00a      	b.n	800a144 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a12e:	f7fe fbf9 	bl	8008924 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	f241 3288 	movw	r2, #5000	; 0x1388
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d901      	bls.n	800a144 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e0c5      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a144:	4b65      	ldr	r3, [pc, #404]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d0ee      	beq.n	800a12e <HAL_RCC_OscConfig+0x33a>
 800a150:	e014      	b.n	800a17c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a152:	f7fe fbe7 	bl	8008924 <HAL_GetTick>
 800a156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a158:	e00a      	b.n	800a170 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a15a:	f7fe fbe3 	bl	8008924 <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	f241 3288 	movw	r2, #5000	; 0x1388
 800a168:	4293      	cmp	r3, r2
 800a16a:	d901      	bls.n	800a170 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e0af      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a170:	4b5a      	ldr	r3, [pc, #360]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a174:	f003 0302 	and.w	r3, r3, #2
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1ee      	bne.n	800a15a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d105      	bne.n	800a18e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a182:	4b56      	ldr	r3, [pc, #344]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	4a55      	ldr	r2, [pc, #340]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a18c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 809b 	beq.w	800a2ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a198:	4b50      	ldr	r3, [pc, #320]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f003 030c 	and.w	r3, r3, #12
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d05c      	beq.n	800a25e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d141      	bne.n	800a230 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1ac:	4b4c      	ldr	r3, [pc, #304]	; (800a2e0 <HAL_RCC_OscConfig+0x4ec>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1b2:	f7fe fbb7 	bl	8008924 <HAL_GetTick>
 800a1b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1b8:	e008      	b.n	800a1cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1ba:	f7fe fbb3 	bl	8008924 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d901      	bls.n	800a1cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e081      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1cc:	4b43      	ldr	r3, [pc, #268]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1f0      	bne.n	800a1ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	69da      	ldr	r2, [r3, #28]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	019b      	lsls	r3, r3, #6
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	041b      	lsls	r3, r3, #16
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fa:	061b      	lsls	r3, r3, #24
 800a1fc:	4937      	ldr	r1, [pc, #220]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a202:	4b37      	ldr	r3, [pc, #220]	; (800a2e0 <HAL_RCC_OscConfig+0x4ec>)
 800a204:	2201      	movs	r2, #1
 800a206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a208:	f7fe fb8c 	bl	8008924 <HAL_GetTick>
 800a20c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a20e:	e008      	b.n	800a222 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a210:	f7fe fb88 	bl	8008924 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e056      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a222:	4b2e      	ldr	r3, [pc, #184]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <HAL_RCC_OscConfig+0x41c>
 800a22e:	e04e      	b.n	800a2ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a230:	4b2b      	ldr	r3, [pc, #172]	; (800a2e0 <HAL_RCC_OscConfig+0x4ec>)
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a236:	f7fe fb75 	bl	8008924 <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a23c:	e008      	b.n	800a250 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a23e:	f7fe fb71 	bl	8008924 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e03f      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a250:	4b22      	ldr	r3, [pc, #136]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1f0      	bne.n	800a23e <HAL_RCC_OscConfig+0x44a>
 800a25c:	e037      	b.n	800a2ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d101      	bne.n	800a26a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e032      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a26a:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <HAL_RCC_OscConfig+0x4e8>)
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d028      	beq.n	800a2ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a282:	429a      	cmp	r2, r3
 800a284:	d121      	bne.n	800a2ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a290:	429a      	cmp	r2, r3
 800a292:	d11a      	bne.n	800a2ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a29a:	4013      	ands	r3, r2
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d111      	bne.n	800a2ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b0:	085b      	lsrs	r3, r3, #1
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d107      	bne.n	800a2ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d001      	beq.n	800a2ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40007000 	.word	0x40007000
 800a2dc:	40023800 	.word	0x40023800
 800a2e0:	42470060 	.word	0x42470060

0800a2e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0cc      	b.n	800a492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2f8:	4b68      	ldr	r3, [pc, #416]	; (800a49c <HAL_RCC_ClockConfig+0x1b8>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0307 	and.w	r3, r3, #7
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d90c      	bls.n	800a320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a306:	4b65      	ldr	r3, [pc, #404]	; (800a49c <HAL_RCC_ClockConfig+0x1b8>)
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a30e:	4b63      	ldr	r3, [pc, #396]	; (800a49c <HAL_RCC_ClockConfig+0x1b8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d001      	beq.n	800a320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e0b8      	b.n	800a492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d020      	beq.n	800a36e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	d005      	beq.n	800a344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a338:	4b59      	ldr	r3, [pc, #356]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	4a58      	ldr	r2, [pc, #352]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a33e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d005      	beq.n	800a35c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a350:	4b53      	ldr	r3, [pc, #332]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	4a52      	ldr	r2, [pc, #328]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a35a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a35c:	4b50      	ldr	r3, [pc, #320]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	494d      	ldr	r1, [pc, #308]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d044      	beq.n	800a404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d107      	bne.n	800a392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a382:	4b47      	ldr	r3, [pc, #284]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d119      	bne.n	800a3c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e07f      	b.n	800a492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b02      	cmp	r3, #2
 800a398:	d003      	beq.n	800a3a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d107      	bne.n	800a3b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3a2:	4b3f      	ldr	r3, [pc, #252]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d109      	bne.n	800a3c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e06f      	b.n	800a492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3b2:	4b3b      	ldr	r3, [pc, #236]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e067      	b.n	800a492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3c2:	4b37      	ldr	r3, [pc, #220]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f023 0203 	bic.w	r2, r3, #3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	4934      	ldr	r1, [pc, #208]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3d4:	f7fe faa6 	bl	8008924 <HAL_GetTick>
 800a3d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3da:	e00a      	b.n	800a3f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3dc:	f7fe faa2 	bl	8008924 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d901      	bls.n	800a3f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e04f      	b.n	800a492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3f2:	4b2b      	ldr	r3, [pc, #172]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f003 020c 	and.w	r2, r3, #12
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	429a      	cmp	r2, r3
 800a402:	d1eb      	bne.n	800a3dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a404:	4b25      	ldr	r3, [pc, #148]	; (800a49c <HAL_RCC_ClockConfig+0x1b8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d20c      	bcs.n	800a42c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a412:	4b22      	ldr	r3, [pc, #136]	; (800a49c <HAL_RCC_ClockConfig+0x1b8>)
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	b2d2      	uxtb	r2, r2
 800a418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a41a:	4b20      	ldr	r3, [pc, #128]	; (800a49c <HAL_RCC_ClockConfig+0x1b8>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0307 	and.w	r3, r3, #7
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	429a      	cmp	r2, r3
 800a426:	d001      	beq.n	800a42c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e032      	b.n	800a492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a438:	4b19      	ldr	r3, [pc, #100]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	4916      	ldr	r1, [pc, #88]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a446:	4313      	orrs	r3, r2
 800a448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0308 	and.w	r3, r3, #8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a456:	4b12      	ldr	r3, [pc, #72]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	490e      	ldr	r1, [pc, #56]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a466:	4313      	orrs	r3, r2
 800a468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a46a:	f000 f821 	bl	800a4b0 <HAL_RCC_GetSysClockFreq>
 800a46e:	4602      	mov	r2, r0
 800a470:	4b0b      	ldr	r3, [pc, #44]	; (800a4a0 <HAL_RCC_ClockConfig+0x1bc>)
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	091b      	lsrs	r3, r3, #4
 800a476:	f003 030f 	and.w	r3, r3, #15
 800a47a:	490a      	ldr	r1, [pc, #40]	; (800a4a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a47c:	5ccb      	ldrb	r3, [r1, r3]
 800a47e:	fa22 f303 	lsr.w	r3, r2, r3
 800a482:	4a09      	ldr	r2, [pc, #36]	; (800a4a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a486:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <HAL_RCC_ClockConfig+0x1c8>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fa06 	bl	800889c <HAL_InitTick>

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	40023c00 	.word	0x40023c00
 800a4a0:	40023800 	.word	0x40023800
 800a4a4:	0800cacc 	.word	0x0800cacc
 800a4a8:	20000000 	.word	0x20000000
 800a4ac:	20000004 	.word	0x20000004

0800a4b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4b0:	b5b0      	push	{r4, r5, r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6079      	str	r1, [r7, #4]
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	60f9      	str	r1, [r7, #12]
 800a4be:	2100      	movs	r1, #0
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4c6:	4952      	ldr	r1, [pc, #328]	; (800a610 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4c8:	6889      	ldr	r1, [r1, #8]
 800a4ca:	f001 010c 	and.w	r1, r1, #12
 800a4ce:	2908      	cmp	r1, #8
 800a4d0:	d00d      	beq.n	800a4ee <HAL_RCC_GetSysClockFreq+0x3e>
 800a4d2:	2908      	cmp	r1, #8
 800a4d4:	f200 8094 	bhi.w	800a600 <HAL_RCC_GetSysClockFreq+0x150>
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	d002      	beq.n	800a4e2 <HAL_RCC_GetSysClockFreq+0x32>
 800a4dc:	2904      	cmp	r1, #4
 800a4de:	d003      	beq.n	800a4e8 <HAL_RCC_GetSysClockFreq+0x38>
 800a4e0:	e08e      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4e2:	4b4c      	ldr	r3, [pc, #304]	; (800a614 <HAL_RCC_GetSysClockFreq+0x164>)
 800a4e4:	60bb      	str	r3, [r7, #8]
       break;
 800a4e6:	e08e      	b.n	800a606 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4e8:	4b4b      	ldr	r3, [pc, #300]	; (800a618 <HAL_RCC_GetSysClockFreq+0x168>)
 800a4ea:	60bb      	str	r3, [r7, #8]
      break;
 800a4ec:	e08b      	b.n	800a606 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4ee:	4948      	ldr	r1, [pc, #288]	; (800a610 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4f0:	6849      	ldr	r1, [r1, #4]
 800a4f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a4f6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4f8:	4945      	ldr	r1, [pc, #276]	; (800a610 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4fa:	6849      	ldr	r1, [r1, #4]
 800a4fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a500:	2900      	cmp	r1, #0
 800a502:	d024      	beq.n	800a54e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a504:	4942      	ldr	r1, [pc, #264]	; (800a610 <HAL_RCC_GetSysClockFreq+0x160>)
 800a506:	6849      	ldr	r1, [r1, #4]
 800a508:	0989      	lsrs	r1, r1, #6
 800a50a:	4608      	mov	r0, r1
 800a50c:	f04f 0100 	mov.w	r1, #0
 800a510:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a514:	f04f 0500 	mov.w	r5, #0
 800a518:	ea00 0204 	and.w	r2, r0, r4
 800a51c:	ea01 0305 	and.w	r3, r1, r5
 800a520:	493d      	ldr	r1, [pc, #244]	; (800a618 <HAL_RCC_GetSysClockFreq+0x168>)
 800a522:	fb01 f003 	mul.w	r0, r1, r3
 800a526:	2100      	movs	r1, #0
 800a528:	fb01 f102 	mul.w	r1, r1, r2
 800a52c:	1844      	adds	r4, r0, r1
 800a52e:	493a      	ldr	r1, [pc, #232]	; (800a618 <HAL_RCC_GetSysClockFreq+0x168>)
 800a530:	fba2 0101 	umull	r0, r1, r2, r1
 800a534:	1863      	adds	r3, r4, r1
 800a536:	4619      	mov	r1, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f04f 0300 	mov.w	r3, #0
 800a540:	f7fd fe4a 	bl	80081d8 <__aeabi_uldivmod>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4613      	mov	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e04a      	b.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a54e:	4b30      	ldr	r3, [pc, #192]	; (800a610 <HAL_RCC_GetSysClockFreq+0x160>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	099b      	lsrs	r3, r3, #6
 800a554:	461a      	mov	r2, r3
 800a556:	f04f 0300 	mov.w	r3, #0
 800a55a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a55e:	f04f 0100 	mov.w	r1, #0
 800a562:	ea02 0400 	and.w	r4, r2, r0
 800a566:	ea03 0501 	and.w	r5, r3, r1
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f04f 0200 	mov.w	r2, #0
 800a572:	f04f 0300 	mov.w	r3, #0
 800a576:	014b      	lsls	r3, r1, #5
 800a578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a57c:	0142      	lsls	r2, r0, #5
 800a57e:	4610      	mov	r0, r2
 800a580:	4619      	mov	r1, r3
 800a582:	1b00      	subs	r0, r0, r4
 800a584:	eb61 0105 	sbc.w	r1, r1, r5
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	018b      	lsls	r3, r1, #6
 800a592:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a596:	0182      	lsls	r2, r0, #6
 800a598:	1a12      	subs	r2, r2, r0
 800a59a:	eb63 0301 	sbc.w	r3, r3, r1
 800a59e:	f04f 0000 	mov.w	r0, #0
 800a5a2:	f04f 0100 	mov.w	r1, #0
 800a5a6:	00d9      	lsls	r1, r3, #3
 800a5a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5ac:	00d0      	lsls	r0, r2, #3
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	1912      	adds	r2, r2, r4
 800a5b4:	eb45 0303 	adc.w	r3, r5, r3
 800a5b8:	f04f 0000 	mov.w	r0, #0
 800a5bc:	f04f 0100 	mov.w	r1, #0
 800a5c0:	0299      	lsls	r1, r3, #10
 800a5c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a5c6:	0290      	lsls	r0, r2, #10
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f04f 0300 	mov.w	r3, #0
 800a5d8:	f7fd fdfe 	bl	80081d8 <__aeabi_uldivmod>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <HAL_RCC_GetSysClockFreq+0x160>)
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	0c1b      	lsrs	r3, r3, #16
 800a5ea:	f003 0303 	and.w	r3, r3, #3
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fc:	60bb      	str	r3, [r7, #8]
      break;
 800a5fe:	e002      	b.n	800a606 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a600:	4b04      	ldr	r3, [pc, #16]	; (800a614 <HAL_RCC_GetSysClockFreq+0x164>)
 800a602:	60bb      	str	r3, [r7, #8]
      break;
 800a604:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a606:	68bb      	ldr	r3, [r7, #8]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bdb0      	pop	{r4, r5, r7, pc}
 800a610:	40023800 	.word	0x40023800
 800a614:	00f42400 	.word	0x00f42400
 800a618:	017d7840 	.word	0x017d7840

0800a61c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a620:	4b03      	ldr	r3, [pc, #12]	; (800a630 <HAL_RCC_GetHCLKFreq+0x14>)
 800a622:	681b      	ldr	r3, [r3, #0]
}
 800a624:	4618      	mov	r0, r3
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	20000000 	.word	0x20000000

0800a634 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	2b02      	cmp	r3, #2
 800a646:	d165      	bne.n	800a714 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	4a41      	ldr	r2, [pc, #260]	; (800a750 <USB_SetTurnaroundTime+0x11c>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d906      	bls.n	800a65e <USB_SetTurnaroundTime+0x2a>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4a40      	ldr	r2, [pc, #256]	; (800a754 <USB_SetTurnaroundTime+0x120>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d202      	bcs.n	800a65e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a658:	230f      	movs	r3, #15
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e062      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	4a3c      	ldr	r2, [pc, #240]	; (800a754 <USB_SetTurnaroundTime+0x120>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d306      	bcc.n	800a674 <USB_SetTurnaroundTime+0x40>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	4a3b      	ldr	r2, [pc, #236]	; (800a758 <USB_SetTurnaroundTime+0x124>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d202      	bcs.n	800a674 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a66e:	230e      	movs	r3, #14
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	e057      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4a38      	ldr	r2, [pc, #224]	; (800a758 <USB_SetTurnaroundTime+0x124>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d306      	bcc.n	800a68a <USB_SetTurnaroundTime+0x56>
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	4a37      	ldr	r2, [pc, #220]	; (800a75c <USB_SetTurnaroundTime+0x128>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d202      	bcs.n	800a68a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a684:	230d      	movs	r3, #13
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e04c      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	4a33      	ldr	r2, [pc, #204]	; (800a75c <USB_SetTurnaroundTime+0x128>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d306      	bcc.n	800a6a0 <USB_SetTurnaroundTime+0x6c>
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	4a32      	ldr	r2, [pc, #200]	; (800a760 <USB_SetTurnaroundTime+0x12c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d802      	bhi.n	800a6a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a69a:	230c      	movs	r3, #12
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	e041      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4a2f      	ldr	r2, [pc, #188]	; (800a760 <USB_SetTurnaroundTime+0x12c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d906      	bls.n	800a6b6 <USB_SetTurnaroundTime+0x82>
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	4a2e      	ldr	r2, [pc, #184]	; (800a764 <USB_SetTurnaroundTime+0x130>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d802      	bhi.n	800a6b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a6b0:	230b      	movs	r3, #11
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	e036      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	4a2a      	ldr	r2, [pc, #168]	; (800a764 <USB_SetTurnaroundTime+0x130>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d906      	bls.n	800a6cc <USB_SetTurnaroundTime+0x98>
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	4a29      	ldr	r2, [pc, #164]	; (800a768 <USB_SetTurnaroundTime+0x134>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d802      	bhi.n	800a6cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a6c6:	230a      	movs	r3, #10
 800a6c8:	617b      	str	r3, [r7, #20]
 800a6ca:	e02b      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	4a26      	ldr	r2, [pc, #152]	; (800a768 <USB_SetTurnaroundTime+0x134>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d906      	bls.n	800a6e2 <USB_SetTurnaroundTime+0xae>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4a25      	ldr	r2, [pc, #148]	; (800a76c <USB_SetTurnaroundTime+0x138>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d202      	bcs.n	800a6e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a6dc:	2309      	movs	r3, #9
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	e020      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	4a21      	ldr	r2, [pc, #132]	; (800a76c <USB_SetTurnaroundTime+0x138>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d306      	bcc.n	800a6f8 <USB_SetTurnaroundTime+0xc4>
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4a20      	ldr	r2, [pc, #128]	; (800a770 <USB_SetTurnaroundTime+0x13c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d802      	bhi.n	800a6f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a6f2:	2308      	movs	r3, #8
 800a6f4:	617b      	str	r3, [r7, #20]
 800a6f6:	e015      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4a1d      	ldr	r2, [pc, #116]	; (800a770 <USB_SetTurnaroundTime+0x13c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d906      	bls.n	800a70e <USB_SetTurnaroundTime+0xda>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4a1c      	ldr	r2, [pc, #112]	; (800a774 <USB_SetTurnaroundTime+0x140>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d202      	bcs.n	800a70e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a708:	2307      	movs	r3, #7
 800a70a:	617b      	str	r3, [r7, #20]
 800a70c:	e00a      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a70e:	2306      	movs	r3, #6
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	e007      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d102      	bne.n	800a720 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a71a:	2309      	movs	r3, #9
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e001      	b.n	800a724 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a720:	2309      	movs	r3, #9
 800a722:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	029b      	lsls	r3, r3, #10
 800a738:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a73c:	431a      	orrs	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	00d8acbf 	.word	0x00d8acbf
 800a754:	00e4e1c0 	.word	0x00e4e1c0
 800a758:	00f42400 	.word	0x00f42400
 800a75c:	01067380 	.word	0x01067380
 800a760:	011a499f 	.word	0x011a499f
 800a764:	01312cff 	.word	0x01312cff
 800a768:	014ca43f 	.word	0x014ca43f
 800a76c:	016e3600 	.word	0x016e3600
 800a770:	01a6ab1f 	.word	0x01a6ab1f
 800a774:	01e84800 	.word	0x01e84800

0800a778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	019b      	lsls	r3, r3, #6
 800a78a:	f043 0220 	orr.w	r2, r3, #32
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3301      	adds	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4a09      	ldr	r2, [pc, #36]	; (800a7c0 <USB_FlushTxFifo+0x48>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d901      	bls.n	800a7a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e006      	b.n	800a7b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	f003 0320 	and.w	r3, r3, #32
 800a7ac:	2b20      	cmp	r3, #32
 800a7ae:	d0f0      	beq.n	800a792 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	00030d40 	.word	0x00030d40

0800a7c4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f003 0306 	and.w	r3, r3, #6
 800a7dc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d102      	bne.n	800a7ea <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	75fb      	strb	r3, [r7, #23]
 800a7e8:	e00a      	b.n	800a800 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d002      	beq.n	800a7f6 <USB_GetDevSpeed+0x32>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b06      	cmp	r3, #6
 800a7f4:	d102      	bne.n	800a7fc <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	75fb      	strb	r3, [r7, #23]
 800a7fa:	e001      	b.n	800a800 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a7fc:	230f      	movs	r3, #15
 800a7fe:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
}
 800a802:	4618      	mov	r0, r3
 800a804:	371c      	adds	r7, #28
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a80e:	b480      	push	{r7}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d13a      	bne.n	800a8a0 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a830:	69da      	ldr	r2, [r3, #28]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	f003 030f 	and.w	r3, r3, #15
 800a83a:	2101      	movs	r1, #1
 800a83c:	fa01 f303 	lsl.w	r3, r1, r3
 800a840:	b29b      	uxth	r3, r3
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a848:	4313      	orrs	r3, r2
 800a84a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	015a      	lsls	r2, r3, #5
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4413      	add	r3, r2
 800a854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d155      	bne.n	800a90e <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	78db      	ldrb	r3, [r3, #3]
 800a87c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a87e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	059b      	lsls	r3, r3, #22
 800a884:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a886:	4313      	orrs	r3, r2
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	e036      	b.n	800a90e <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a6:	69da      	ldr	r2, [r3, #28]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	f003 030f 	and.w	r3, r3, #15
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b6:	041b      	lsls	r3, r3, #16
 800a8b8:	68f9      	ldr	r1, [r7, #12]
 800a8ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d11a      	bne.n	800a90e <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	78db      	ldrb	r3, [r3, #3]
 800a8f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	0151      	lsls	r1, r2, #5
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	440a      	add	r2, r1
 800a900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a90c:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08a      	sub	sp, #40	; 0x28
 800a920:	af02      	add	r7, sp, #8
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	f040 815c 	bne.w	800abf6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d132      	bne.n	800a9ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	69ba      	ldr	r2, [r7, #24]
 800a956:	0151      	lsls	r1, r2, #5
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	440a      	add	r2, r1
 800a95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a960:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a964:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a968:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	0151      	lsls	r1, r2, #5
 800a97c:	69fa      	ldr	r2, [r7, #28]
 800a97e:	440a      	add	r2, r1
 800a980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a984:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a988:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a4:	0cdb      	lsrs	r3, r3, #19
 800a9a6:	04db      	lsls	r3, r3, #19
 800a9a8:	6113      	str	r3, [r2, #16]
 800a9aa:	e074      	b.n	800aa96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	0151      	lsls	r1, r2, #5
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	440a      	add	r2, r1
 800a9c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c6:	0cdb      	lsrs	r3, r3, #19
 800a9c8:	04db      	lsls	r3, r3, #19
 800a9ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	69ba      	ldr	r2, [r7, #24]
 800a9dc:	0151      	lsls	r1, r2, #5
 800a9de:	69fa      	ldr	r2, [r7, #28]
 800a9e0:	440a      	add	r2, r1
 800a9e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fc:	691a      	ldr	r2, [r3, #16]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	6959      	ldr	r1, [r3, #20]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	440b      	add	r3, r1
 800aa08:	1e59      	subs	r1, r3, #1
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa12:	04d9      	lsls	r1, r3, #19
 800aa14:	4b9d      	ldr	r3, [pc, #628]	; (800ac8c <USB_EPStartXfer+0x370>)
 800aa16:	400b      	ands	r3, r1
 800aa18:	69b9      	ldr	r1, [r7, #24]
 800aa1a:	0148      	lsls	r0, r1, #5
 800aa1c:	69f9      	ldr	r1, [r7, #28]
 800aa1e:	4401      	add	r1, r0
 800aa20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa24:	4313      	orrs	r3, r2
 800aa26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa34:	691a      	ldr	r2, [r3, #16]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa3e:	69b9      	ldr	r1, [r7, #24]
 800aa40:	0148      	lsls	r0, r1, #5
 800aa42:	69f9      	ldr	r1, [r7, #28]
 800aa44:	4401      	add	r1, r0
 800aa46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	78db      	ldrb	r3, [r3, #3]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d11f      	bne.n	800aa96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	0151      	lsls	r1, r2, #5
 800aa68:	69fa      	ldr	r2, [r7, #28]
 800aa6a:	440a      	add	r2, r1
 800aa6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aa74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	69ba      	ldr	r2, [r7, #24]
 800aa86:	0151      	lsls	r1, r2, #5
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	440a      	add	r2, r1
 800aa8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d14b      	bne.n	800ab34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d009      	beq.n	800aab8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab0:	461a      	mov	r2, r3
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	78db      	ldrb	r3, [r3, #3]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d128      	bne.n	800ab12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d110      	bne.n	800aaf2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	0151      	lsls	r1, r2, #5
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	440a      	add	r2, r1
 800aae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	e00f      	b.n	800ab12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	015a      	lsls	r2, r3, #5
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	4413      	add	r3, r2
 800ab1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	0151      	lsls	r1, r2, #5
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	440a      	add	r2, r1
 800ab28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	e12f      	b.n	800ad94 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	78db      	ldrb	r3, [r3, #3]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d015      	beq.n	800ab88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 8117 	beq.w	800ad94 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	2101      	movs	r1, #1
 800ab78:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7c:	69f9      	ldr	r1, [r7, #28]
 800ab7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab82:	4313      	orrs	r3, r2
 800ab84:	634b      	str	r3, [r1, #52]	; 0x34
 800ab86:	e105      	b.n	800ad94 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d110      	bne.n	800abba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	0151      	lsls	r1, r2, #5
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	440a      	add	r2, r1
 800abae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	e00f      	b.n	800abda <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	0151      	lsls	r1, r2, #5
 800abcc:	69fa      	ldr	r2, [r7, #28]
 800abce:	440a      	add	r2, r1
 800abd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abd8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	68d9      	ldr	r1, [r3, #12]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	b298      	uxth	r0, r3
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	4603      	mov	r3, r0
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 fa2b 	bl	800b04a <USB_WritePacket>
 800abf4:	e0ce      	b.n	800ad94 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	0151      	lsls	r1, r2, #5
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	440a      	add	r2, r1
 800ac0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac10:	0cdb      	lsrs	r3, r3, #19
 800ac12:	04db      	lsls	r3, r3, #19
 800ac14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	0151      	lsls	r1, r2, #5
 800ac28:	69fa      	ldr	r2, [r7, #28]
 800ac2a:	440a      	add	r2, r1
 800ac2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d126      	bne.n	800ac90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	015a      	lsls	r2, r3, #5
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	4413      	add	r3, r2
 800ac4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4e:	691a      	ldr	r2, [r3, #16]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac58:	69b9      	ldr	r1, [r7, #24]
 800ac5a:	0148      	lsls	r0, r1, #5
 800ac5c:	69f9      	ldr	r1, [r7, #28]
 800ac5e:	4401      	add	r1, r0
 800ac60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac64:	4313      	orrs	r3, r2
 800ac66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	015a      	lsls	r2, r3, #5
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	4413      	add	r3, r2
 800ac70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	69ba      	ldr	r2, [r7, #24]
 800ac78:	0151      	lsls	r1, r2, #5
 800ac7a:	69fa      	ldr	r2, [r7, #28]
 800ac7c:	440a      	add	r2, r1
 800ac7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac86:	6113      	str	r3, [r2, #16]
 800ac88:	e036      	b.n	800acf8 <USB_EPStartXfer+0x3dc>
 800ac8a:	bf00      	nop
 800ac8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	695a      	ldr	r2, [r3, #20]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	4413      	add	r3, r2
 800ac9a:	1e5a      	subs	r2, r3, #1
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb2:	691a      	ldr	r2, [r3, #16]
 800acb4:	8afb      	ldrh	r3, [r7, #22]
 800acb6:	04d9      	lsls	r1, r3, #19
 800acb8:	4b39      	ldr	r3, [pc, #228]	; (800ada0 <USB_EPStartXfer+0x484>)
 800acba:	400b      	ands	r3, r1
 800acbc:	69b9      	ldr	r1, [r7, #24]
 800acbe:	0148      	lsls	r0, r1, #5
 800acc0:	69f9      	ldr	r1, [r7, #28]
 800acc2:	4401      	add	r1, r0
 800acc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acc8:	4313      	orrs	r3, r2
 800acca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd8:	691a      	ldr	r2, [r3, #16]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	8af9      	ldrh	r1, [r7, #22]
 800ace0:	fb01 f303 	mul.w	r3, r1, r3
 800ace4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ace8:	69b9      	ldr	r1, [r7, #24]
 800acea:	0148      	lsls	r0, r1, #5
 800acec:	69f9      	ldr	r1, [r7, #28]
 800acee:	4401      	add	r1, r0
 800acf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acf4:	4313      	orrs	r3, r2
 800acf6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d10d      	bne.n	800ad1a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d009      	beq.n	800ad1a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	68d9      	ldr	r1, [r3, #12]
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad16:	460a      	mov	r2, r1
 800ad18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	78db      	ldrb	r3, [r3, #3]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d128      	bne.n	800ad74 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d110      	bne.n	800ad54 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	e00f      	b.n	800ad74 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	0151      	lsls	r1, r2, #5
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	440a      	add	r2, r1
 800ad6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3720      	adds	r7, #32
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	1ff80000 	.word	0x1ff80000

0800ada4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	4613      	mov	r3, r2
 800adb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	785b      	ldrb	r3, [r3, #1]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	f040 80cd 	bne.w	800af60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d132      	bne.n	800ae34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	4413      	add	r3, r2
 800add6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	0151      	lsls	r1, r2, #5
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	440a      	add	r2, r1
 800ade4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800adec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800adf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	0151      	lsls	r1, r2, #5
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	440a      	add	r2, r1
 800ae08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	0151      	lsls	r1, r2, #5
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	440a      	add	r2, r1
 800ae28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae2c:	0cdb      	lsrs	r3, r3, #19
 800ae2e:	04db      	lsls	r3, r3, #19
 800ae30:	6113      	str	r3, [r2, #16]
 800ae32:	e04e      	b.n	800aed2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4e:	0cdb      	lsrs	r3, r3, #19
 800ae50:	04db      	lsls	r3, r3, #19
 800ae52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	695a      	ldr	r2, [r3, #20]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb8:	691a      	ldr	r2, [r3, #16]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aec2:	6939      	ldr	r1, [r7, #16]
 800aec4:	0148      	lsls	r0, r1, #5
 800aec6:	6979      	ldr	r1, [r7, #20]
 800aec8:	4401      	add	r1, r0
 800aeca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aece:	4313      	orrs	r3, r2
 800aed0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d11e      	bne.n	800af16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d009      	beq.n	800aef4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeec:	461a      	mov	r2, r3
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	0151      	lsls	r1, r2, #5
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	440a      	add	r2, r1
 800af0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	e092      	b.n	800b03c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	0151      	lsls	r1, r2, #5
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	440a      	add	r2, r1
 800af2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d07e      	beq.n	800b03c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	f003 030f 	and.w	r3, r3, #15
 800af4e:	2101      	movs	r1, #1
 800af50:	fa01 f303 	lsl.w	r3, r1, r3
 800af54:	6979      	ldr	r1, [r7, #20]
 800af56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af5a:	4313      	orrs	r3, r2
 800af5c:	634b      	str	r3, [r1, #52]	; 0x34
 800af5e:	e06d      	b.n	800b03c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	0151      	lsls	r1, r2, #5
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	440a      	add	r2, r1
 800af76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af7a:	0cdb      	lsrs	r3, r3, #19
 800af7c:	04db      	lsls	r3, r3, #19
 800af7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	0151      	lsls	r1, r2, #5
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	440a      	add	r2, r1
 800af96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afa2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	695b      	ldr	r3, [r3, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	0151      	lsls	r1, r2, #5
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	440a      	add	r2, r1
 800afca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe0:	691a      	ldr	r2, [r3, #16]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afea:	6939      	ldr	r1, [r7, #16]
 800afec:	0148      	lsls	r0, r1, #5
 800afee:	6979      	ldr	r1, [r7, #20]
 800aff0:	4401      	add	r1, r0
 800aff2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aff6:	4313      	orrs	r3, r2
 800aff8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d10d      	bne.n	800b01c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d009      	beq.n	800b01c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	68d9      	ldr	r1, [r3, #12]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b018:	460a      	mov	r2, r1
 800b01a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	440a      	add	r2, r1
 800b032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b03a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	371c      	adds	r7, #28
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b089      	sub	sp, #36	; 0x24
 800b04e:	af00      	add	r7, sp, #0
 800b050:	60f8      	str	r0, [r7, #12]
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	4611      	mov	r1, r2
 800b056:	461a      	mov	r2, r3
 800b058:	460b      	mov	r3, r1
 800b05a:	71fb      	strb	r3, [r7, #7]
 800b05c:	4613      	mov	r3, r2
 800b05e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b068:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d11a      	bne.n	800b0a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b070:	88bb      	ldrh	r3, [r7, #4]
 800b072:	3303      	adds	r3, #3
 800b074:	089b      	lsrs	r3, r3, #2
 800b076:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b078:	2300      	movs	r3, #0
 800b07a:	61bb      	str	r3, [r7, #24]
 800b07c:	e00f      	b.n	800b09e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	031a      	lsls	r2, r3, #12
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	4413      	add	r3, r2
 800b086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b08a:	461a      	mov	r2, r3
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	3304      	adds	r3, #4
 800b096:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	3301      	adds	r3, #1
 800b09c:	61bb      	str	r3, [r7, #24]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d3eb      	bcc.n	800b07e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3724      	adds	r7, #36	; 0x24
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b089      	sub	sp, #36	; 0x24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b0ca:	88fb      	ldrh	r3, [r7, #6]
 800b0cc:	3303      	adds	r3, #3
 800b0ce:	089b      	lsrs	r3, r3, #2
 800b0d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61bb      	str	r3, [r7, #24]
 800b0d6:	e00b      	b.n	800b0f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	61bb      	str	r3, [r7, #24]
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d3ef      	bcc.n	800b0d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b0f8:	69fb      	ldr	r3, [r7, #28]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3724      	adds	r7, #36	; 0x24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d12c      	bne.n	800b17c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	db12      	blt.n	800b15a <USB_EPSetStall+0x54>
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00f      	beq.n	800b15a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	015a      	lsls	r2, r3, #5
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	4413      	add	r3, r2
 800b142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	0151      	lsls	r1, r2, #5
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	440a      	add	r2, r1
 800b150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b154:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b158:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4413      	add	r3, r2
 800b162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	0151      	lsls	r1, r2, #5
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	440a      	add	r2, r1
 800b170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	e02b      	b.n	800b1d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	db12      	blt.n	800b1b4 <USB_EPSetStall+0xae>
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00f      	beq.n	800b1b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	0151      	lsls	r1, r2, #5
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	440a      	add	r2, r1
 800b1ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	785b      	ldrb	r3, [r3, #1]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d128      	bne.n	800b250 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	015a      	lsls	r2, r3, #5
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4413      	add	r3, r2
 800b206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	0151      	lsls	r1, r2, #5
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	440a      	add	r2, r1
 800b214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b21c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	78db      	ldrb	r3, [r3, #3]
 800b222:	2b03      	cmp	r3, #3
 800b224:	d003      	beq.n	800b22e <USB_EPClearStall+0x4c>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	78db      	ldrb	r3, [r3, #3]
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d138      	bne.n	800b2a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	4413      	add	r3, r2
 800b236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	0151      	lsls	r1, r2, #5
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	440a      	add	r2, r1
 800b244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	e027      	b.n	800b2a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	0151      	lsls	r1, r2, #5
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	440a      	add	r2, r1
 800b266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b26a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b26e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	78db      	ldrb	r3, [r3, #3]
 800b274:	2b03      	cmp	r3, #3
 800b276:	d003      	beq.n	800b280 <USB_EPClearStall+0x9e>
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	78db      	ldrb	r3, [r3, #3]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d10f      	bne.n	800b2a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	0151      	lsls	r1, r2, #5
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	440a      	add	r2, r1
 800b296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b29a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b29e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b2d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	011b      	lsls	r3, r3, #4
 800b2de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b2e2:	68f9      	ldr	r1, [r7, #12]
 800b2e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4013      	ands	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b312:	68fb      	ldr	r3, [r7, #12]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	4013      	ands	r3, r2
 800b342:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	0c1b      	lsrs	r3, r3, #16
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	4013      	ands	r3, r2
 800b376:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	b29b      	uxth	r3, r3
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b398:	78fb      	ldrb	r3, [r7, #3]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b3e8:	78fb      	ldrb	r3, [r7, #3]
 800b3ea:	f003 030f 	and.w	r3, r3, #15
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3f4:	01db      	lsls	r3, r3, #7
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	4013      	ands	r3, r2
 800b410:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b412:	68bb      	ldr	r3, [r7, #8]
}
 800b414:	4618      	mov	r0, r3
 800b416:	371c      	adds	r7, #28
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	f003 0301 	and.w	r3, r3, #1
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b456:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b45a:	f023 0307 	bic.w	r3, r3, #7
 800b45e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b46e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b472:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
	...

0800b484 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b484:	b480      	push	{r7}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	460b      	mov	r3, r1
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	333c      	adds	r3, #60	; 0x3c
 800b49a:	3304      	adds	r3, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	4a26      	ldr	r2, [pc, #152]	; (800b53c <USB_EP0_OutStart+0xb8>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d90a      	bls.n	800b4be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4b8:	d101      	bne.n	800b4be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	e037      	b.n	800b52e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ec:	f043 0318 	orr.w	r3, r3, #24
 800b4f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b500:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b504:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b506:	7afb      	ldrb	r3, [r7, #11]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d10f      	bne.n	800b52c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b512:	461a      	mov	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b526:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b52a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	371c      	adds	r7, #28
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	4f54300a 	.word	0x4f54300a

0800b540 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b562:	2303      	movs	r3, #3
 800b564:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d009      	beq.n	800b584 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	78fa      	ldrb	r2, [r7, #3]
 800b57a:	4611      	mov	r1, r2
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	4798      	blx	r3
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d007      	beq.n	800b5b4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	78fa      	ldrb	r2, [r7, #3]
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	4798      	blx	r3
  }

  return USBD_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 ff8f 	bl	800c4f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5f2:	f003 031f 	and.w	r3, r3, #31
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d01a      	beq.n	800b630 <USBD_LL_SetupStage+0x72>
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d822      	bhi.n	800b644 <USBD_LL_SetupStage+0x86>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <USBD_LL_SetupStage+0x4a>
 800b602:	2b01      	cmp	r3, #1
 800b604:	d00a      	beq.n	800b61c <USBD_LL_SetupStage+0x5e>
 800b606:	e01d      	b.n	800b644 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b60e:	4619      	mov	r1, r3
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fa61 	bl	800bad8 <USBD_StdDevReq>
 800b616:	4603      	mov	r3, r0
 800b618:	73fb      	strb	r3, [r7, #15]
      break;
 800b61a:	e020      	b.n	800b65e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fac5 	bl	800bbb4 <USBD_StdItfReq>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]
      break;
 800b62e:	e016      	b.n	800b65e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fb04 	bl	800bc46 <USBD_StdEPReq>
 800b63e:	4603      	mov	r3, r0
 800b640:	73fb      	strb	r3, [r7, #15]
      break;
 800b642:	e00c      	b.n	800b65e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b64a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f001 f90a 	bl	800c86c <USBD_LL_StallEP>
 800b658:	4603      	mov	r3, r0
 800b65a:	73fb      	strb	r3, [r7, #15]
      break;
 800b65c:	bf00      	nop
  }

  return ret;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	460b      	mov	r3, r1
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b676:	7afb      	ldrb	r3, [r7, #11]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d138      	bne.n	800b6ee <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b682:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d14a      	bne.n	800b724 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	689a      	ldr	r2, [r3, #8]
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	429a      	cmp	r2, r3
 800b698:	d913      	bls.n	800b6c2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	689a      	ldr	r2, [r3, #8]
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	1ad2      	subs	r2, r2, r3
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	68da      	ldr	r2, [r3, #12]
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bf28      	it	cs
 800b6b4:	4613      	movcs	r3, r2
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 ff91 	bl	800c5e2 <USBD_CtlContinueRx>
 800b6c0:	e030      	b.n	800b724 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d10b      	bne.n	800b6e6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d005      	beq.n	800b6e6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 ff8c 	bl	800c604 <USBD_CtlSendStatus>
 800b6ec:	e01a      	b.n	800b724 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d114      	bne.n	800b724 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00e      	beq.n	800b724 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	7afa      	ldrb	r2, [r7, #11]
 800b710:	4611      	mov	r1, r2
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	4798      	blx	r3
 800b716:	4603      	mov	r3, r0
 800b718:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b720:	7dfb      	ldrb	r3, [r7, #23]
 800b722:	e000      	b.n	800b726 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b086      	sub	sp, #24
 800b732:	af00      	add	r7, sp, #0
 800b734:	60f8      	str	r0, [r7, #12]
 800b736:	460b      	mov	r3, r1
 800b738:	607a      	str	r2, [r7, #4]
 800b73a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b73c:	7afb      	ldrb	r3, [r7, #11]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d16b      	bne.n	800b81a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3314      	adds	r3, #20
 800b746:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d156      	bne.n	800b800 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d914      	bls.n	800b788 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	1ad2      	subs	r2, r2, r3
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	461a      	mov	r2, r3
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f000 ff23 	bl	800c5c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b77a:	2300      	movs	r3, #0
 800b77c:	2200      	movs	r2, #0
 800b77e:	2100      	movs	r1, #0
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f001 f91d 	bl	800c9c0 <USBD_LL_PrepareReceive>
 800b786:	e03b      	b.n	800b800 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	68da      	ldr	r2, [r3, #12]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	429a      	cmp	r2, r3
 800b792:	d11c      	bne.n	800b7ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d316      	bcc.n	800b7ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d20f      	bcs.n	800b7ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 ff04 	bl	800c5c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f001 f8fa 	bl	800c9c0 <USBD_LL_PrepareReceive>
 800b7cc:	e018      	b.n	800b800 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d10b      	bne.n	800b7f2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7f2:	2180      	movs	r1, #128	; 0x80
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f001 f839 	bl	800c86c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 ff15 	bl	800c62a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b806:	2b01      	cmp	r3, #1
 800b808:	d122      	bne.n	800b850 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff fe98 	bl	800b540 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b818:	e01a      	b.n	800b850 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b03      	cmp	r3, #3
 800b824:	d114      	bne.n	800b850 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00e      	beq.n	800b850 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	7afa      	ldrb	r2, [r7, #11]
 800b83c:	4611      	mov	r1, r2
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	4798      	blx	r3
 800b842:	4603      	mov	r3, r0
 800b844:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
 800b84e:	e000      	b.n	800b852 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e02f      	b.n	800b8ee <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00f      	beq.n	800b8b8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d009      	beq.n	800b8b8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	6852      	ldr	r2, [r2, #4]
 800b8b0:	b2d2      	uxtb	r2, r2
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8b8:	2340      	movs	r3, #64	; 0x40
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2100      	movs	r1, #0
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 ffae 	bl	800c820 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2240      	movs	r2, #64	; 0x40
 800b8d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8d4:	2340      	movs	r3, #64	; 0x40
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	2180      	movs	r1, #128	; 0x80
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 ffa0 	bl	800c820 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2240      	movs	r2, #64	; 0x40
 800b8ea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	460b      	mov	r3, r1
 800b900:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	78fa      	ldrb	r2, [r7, #3]
 800b906:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b924:	b2da      	uxtb	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2204      	movs	r2, #4
 800b930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b942:	b480      	push	{r7}
 800b944:	b083      	sub	sp, #12
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b950:	b2db      	uxtb	r3, r3
 800b952:	2b04      	cmp	r3, #4
 800b954:	d106      	bne.n	800b964 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	370c      	adds	r7, #12
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b082      	sub	sp, #8
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b984:	2303      	movs	r3, #3
 800b986:	e012      	b.n	800b9ae <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b03      	cmp	r3, #3
 800b992:	d10b      	bne.n	800b9ac <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99a:	69db      	ldr	r3, [r3, #28]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a6:	69db      	ldr	r3, [r3, #28]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	e014      	b.n	800b9fa <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b03      	cmp	r3, #3
 800b9da:	d10d      	bne.n	800b9f8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e2:	6a1b      	ldr	r3, [r3, #32]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ee:	6a1b      	ldr	r3, [r3, #32]
 800b9f0:	78fa      	ldrb	r2, [r7, #3]
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d101      	bne.n	800ba1c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e014      	b.n	800ba46 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d10d      	bne.n	800ba44 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d007      	beq.n	800ba44 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	78fa      	ldrb	r2, [r7, #3]
 800ba3e:	4611      	mov	r1, r2
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d009      	beq.n	800ba92 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	6852      	ldr	r2, [r2, #4]
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	4798      	blx	r3
  }

  return USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	3301      	adds	r3, #1
 800bab2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800baba:	8a3b      	ldrh	r3, [r7, #16]
 800babc:	021b      	lsls	r3, r3, #8
 800babe:	b21a      	sxth	r2, r3
 800bac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	b21b      	sxth	r3, r3
 800bac8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800baca:	89fb      	ldrh	r3, [r7, #14]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	371c      	adds	r7, #28
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baee:	2b40      	cmp	r3, #64	; 0x40
 800baf0:	d005      	beq.n	800bafe <USBD_StdDevReq+0x26>
 800baf2:	2b40      	cmp	r3, #64	; 0x40
 800baf4:	d853      	bhi.n	800bb9e <USBD_StdDevReq+0xc6>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00b      	beq.n	800bb12 <USBD_StdDevReq+0x3a>
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	d14f      	bne.n	800bb9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	6839      	ldr	r1, [r7, #0]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	4798      	blx	r3
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb10:	e04a      	b.n	800bba8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	785b      	ldrb	r3, [r3, #1]
 800bb16:	2b09      	cmp	r3, #9
 800bb18:	d83b      	bhi.n	800bb92 <USBD_StdDevReq+0xba>
 800bb1a:	a201      	add	r2, pc, #4	; (adr r2, 800bb20 <USBD_StdDevReq+0x48>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bb75 	.word	0x0800bb75
 800bb24:	0800bb89 	.word	0x0800bb89
 800bb28:	0800bb93 	.word	0x0800bb93
 800bb2c:	0800bb7f 	.word	0x0800bb7f
 800bb30:	0800bb93 	.word	0x0800bb93
 800bb34:	0800bb53 	.word	0x0800bb53
 800bb38:	0800bb49 	.word	0x0800bb49
 800bb3c:	0800bb93 	.word	0x0800bb93
 800bb40:	0800bb6b 	.word	0x0800bb6b
 800bb44:	0800bb5d 	.word	0x0800bb5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f9de 	bl	800bf0c <USBD_GetDescriptor>
          break;
 800bb50:	e024      	b.n	800bb9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fb43 	bl	800c1e0 <USBD_SetAddress>
          break;
 800bb5a:	e01f      	b.n	800bb9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fb82 	bl	800c268 <USBD_SetConfig>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
          break;
 800bb68:	e018      	b.n	800bb9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fc21 	bl	800c3b4 <USBD_GetConfig>
          break;
 800bb72:	e013      	b.n	800bb9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fc52 	bl	800c420 <USBD_GetStatus>
          break;
 800bb7c:	e00e      	b.n	800bb9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb7e:	6839      	ldr	r1, [r7, #0]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fc81 	bl	800c488 <USBD_SetFeature>
          break;
 800bb86:	e009      	b.n	800bb9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fc90 	bl	800c4b0 <USBD_ClrFeature>
          break;
 800bb90:	e004      	b.n	800bb9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fce7 	bl	800c568 <USBD_CtlError>
          break;
 800bb9a:	bf00      	nop
      }
      break;
 800bb9c:	e004      	b.n	800bba8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fce1 	bl	800c568 <USBD_CtlError>
      break;
 800bba6:	bf00      	nop
  }

  return ret;
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop

0800bbb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbca:	2b40      	cmp	r3, #64	; 0x40
 800bbcc:	d005      	beq.n	800bbda <USBD_StdItfReq+0x26>
 800bbce:	2b40      	cmp	r3, #64	; 0x40
 800bbd0:	d82f      	bhi.n	800bc32 <USBD_StdItfReq+0x7e>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <USBD_StdItfReq+0x26>
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	d12b      	bne.n	800bc32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d81d      	bhi.n	800bc24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	889b      	ldrh	r3, [r3, #4]
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d813      	bhi.n	800bc1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	6839      	ldr	r1, [r7, #0]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
 800bc00:	4603      	mov	r3, r0
 800bc02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	88db      	ldrh	r3, [r3, #6]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d110      	bne.n	800bc2e <USBD_StdItfReq+0x7a>
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10d      	bne.n	800bc2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fcf6 	bl	800c604 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc18:	e009      	b.n	800bc2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fca3 	bl	800c568 <USBD_CtlError>
          break;
 800bc22:	e004      	b.n	800bc2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fc9e 	bl	800c568 <USBD_CtlError>
          break;
 800bc2c:	e000      	b.n	800bc30 <USBD_StdItfReq+0x7c>
          break;
 800bc2e:	bf00      	nop
      }
      break;
 800bc30:	e004      	b.n	800bc3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fc97 	bl	800c568 <USBD_CtlError>
      break;
 800bc3a:	bf00      	nop
  }

  return ret;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	889b      	ldrh	r3, [r3, #4]
 800bc58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc62:	2b40      	cmp	r3, #64	; 0x40
 800bc64:	d007      	beq.n	800bc76 <USBD_StdEPReq+0x30>
 800bc66:	2b40      	cmp	r3, #64	; 0x40
 800bc68:	f200 8145 	bhi.w	800bef6 <USBD_StdEPReq+0x2b0>
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00c      	beq.n	800bc8a <USBD_StdEPReq+0x44>
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	f040 8140 	bne.w	800bef6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	4798      	blx	r3
 800bc84:	4603      	mov	r3, r0
 800bc86:	73fb      	strb	r3, [r7, #15]
      break;
 800bc88:	e13a      	b.n	800bf00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d007      	beq.n	800bca2 <USBD_StdEPReq+0x5c>
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	f300 8129 	bgt.w	800beea <USBD_StdEPReq+0x2a4>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d07f      	beq.n	800bd9c <USBD_StdEPReq+0x156>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d03c      	beq.n	800bd1a <USBD_StdEPReq+0xd4>
 800bca0:	e123      	b.n	800beea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d002      	beq.n	800bcb4 <USBD_StdEPReq+0x6e>
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d016      	beq.n	800bce0 <USBD_StdEPReq+0x9a>
 800bcb2:	e02c      	b.n	800bd0e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcb4:	7bbb      	ldrb	r3, [r7, #14]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00d      	beq.n	800bcd6 <USBD_StdEPReq+0x90>
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	2b80      	cmp	r3, #128	; 0x80
 800bcbe:	d00a      	beq.n	800bcd6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcc0:	7bbb      	ldrb	r3, [r7, #14]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fdd1 	bl	800c86c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcca:	2180      	movs	r1, #128	; 0x80
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fdcd 	bl	800c86c <USBD_LL_StallEP>
 800bcd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcd4:	e020      	b.n	800bd18 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 fc45 	bl	800c568 <USBD_CtlError>
              break;
 800bcde:	e01b      	b.n	800bd18 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	885b      	ldrh	r3, [r3, #2]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10e      	bne.n	800bd06 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00b      	beq.n	800bd06 <USBD_StdEPReq+0xc0>
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	2b80      	cmp	r3, #128	; 0x80
 800bcf2:	d008      	beq.n	800bd06 <USBD_StdEPReq+0xc0>
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	88db      	ldrh	r3, [r3, #6]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d104      	bne.n	800bd06 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcfc:	7bbb      	ldrb	r3, [r7, #14]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fdb3 	bl	800c86c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fc7c 	bl	800c604 <USBD_CtlSendStatus>

              break;
 800bd0c:	e004      	b.n	800bd18 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fc29 	bl	800c568 <USBD_CtlError>
              break;
 800bd16:	bf00      	nop
          }
          break;
 800bd18:	e0ec      	b.n	800bef4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d002      	beq.n	800bd2c <USBD_StdEPReq+0xe6>
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d016      	beq.n	800bd58 <USBD_StdEPReq+0x112>
 800bd2a:	e030      	b.n	800bd8e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00d      	beq.n	800bd4e <USBD_StdEPReq+0x108>
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	2b80      	cmp	r3, #128	; 0x80
 800bd36:	d00a      	beq.n	800bd4e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd38:	7bbb      	ldrb	r3, [r7, #14]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fd95 	bl	800c86c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd42:	2180      	movs	r1, #128	; 0x80
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fd91 	bl	800c86c <USBD_LL_StallEP>
 800bd4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd4c:	e025      	b.n	800bd9a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fc09 	bl	800c568 <USBD_CtlError>
              break;
 800bd56:	e020      	b.n	800bd9a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	885b      	ldrh	r3, [r3, #2]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d11b      	bne.n	800bd98 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd60:	7bbb      	ldrb	r3, [r7, #14]
 800bd62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d004      	beq.n	800bd74 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fd9b 	bl	800c8aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fc45 	bl	800c604 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	4798      	blx	r3
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bd8c:	e004      	b.n	800bd98 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fbe9 	bl	800c568 <USBD_CtlError>
              break;
 800bd96:	e000      	b.n	800bd9a <USBD_StdEPReq+0x154>
              break;
 800bd98:	bf00      	nop
          }
          break;
 800bd9a:	e0ab      	b.n	800bef4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d002      	beq.n	800bdae <USBD_StdEPReq+0x168>
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d032      	beq.n	800be12 <USBD_StdEPReq+0x1cc>
 800bdac:	e097      	b.n	800bede <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <USBD_StdEPReq+0x17e>
 800bdb4:	7bbb      	ldrb	r3, [r7, #14]
 800bdb6:	2b80      	cmp	r3, #128	; 0x80
 800bdb8:	d004      	beq.n	800bdc4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fbd3 	bl	800c568 <USBD_CtlError>
                break;
 800bdc2:	e091      	b.n	800bee8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	da0b      	bge.n	800bde4 <USBD_StdEPReq+0x19e>
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	3310      	adds	r3, #16
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	4413      	add	r3, r2
 800bde0:	3304      	adds	r3, #4
 800bde2:	e00b      	b.n	800bdfc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
 800bde6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdea:	4613      	mov	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2202      	movs	r2, #2
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fbbd 	bl	800c58a <USBD_CtlSendData>
              break;
 800be10:	e06a      	b.n	800bee8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be16:	2b00      	cmp	r3, #0
 800be18:	da11      	bge.n	800be3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
 800be1c:	f003 020f 	and.w	r2, r3, #15
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3324      	adds	r3, #36	; 0x24
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d117      	bne.n	800be64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fb96 	bl	800c568 <USBD_CtlError>
                  break;
 800be3c:	e054      	b.n	800bee8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be3e:	7bbb      	ldrb	r3, [r7, #14]
 800be40:	f003 020f 	and.w	r2, r3, #15
 800be44:	6879      	ldr	r1, [r7, #4]
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	440b      	add	r3, r1
 800be50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d104      	bne.n	800be64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fb83 	bl	800c568 <USBD_CtlError>
                  break;
 800be62:	e041      	b.n	800bee8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	da0b      	bge.n	800be84 <USBD_StdEPReq+0x23e>
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
 800be6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	3310      	adds	r3, #16
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	4413      	add	r3, r2
 800be80:	3304      	adds	r3, #4
 800be82:	e00b      	b.n	800be9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be8a:	4613      	mov	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	4413      	add	r3, r2
 800be9a:	3304      	adds	r3, #4
 800be9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <USBD_StdEPReq+0x264>
 800bea4:	7bbb      	ldrb	r3, [r7, #14]
 800bea6:	2b80      	cmp	r3, #128	; 0x80
 800bea8:	d103      	bne.n	800beb2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	2200      	movs	r2, #0
 800beae:	601a      	str	r2, [r3, #0]
 800beb0:	e00e      	b.n	800bed0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fd16 	bl	800c8e8 <USBD_LL_IsStallEP>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2201      	movs	r2, #1
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	e002      	b.n	800bed0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2200      	movs	r2, #0
 800bece:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2202      	movs	r2, #2
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fb57 	bl	800c58a <USBD_CtlSendData>
              break;
 800bedc:	e004      	b.n	800bee8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fb41 	bl	800c568 <USBD_CtlError>
              break;
 800bee6:	bf00      	nop
          }
          break;
 800bee8:	e004      	b.n	800bef4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fb3b 	bl	800c568 <USBD_CtlError>
          break;
 800bef2:	bf00      	nop
      }
      break;
 800bef4:	e004      	b.n	800bf00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fb35 	bl	800c568 <USBD_CtlError>
      break;
 800befe:	bf00      	nop
  }

  return ret;
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	885b      	ldrh	r3, [r3, #2]
 800bf26:	0a1b      	lsrs	r3, r3, #8
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	2b06      	cmp	r3, #6
 800bf2e:	f200 8128 	bhi.w	800c182 <USBD_GetDescriptor+0x276>
 800bf32:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <USBD_GetDescriptor+0x2c>)
 800bf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf38:	0800bf55 	.word	0x0800bf55
 800bf3c:	0800bf6d 	.word	0x0800bf6d
 800bf40:	0800bfad 	.word	0x0800bfad
 800bf44:	0800c183 	.word	0x0800c183
 800bf48:	0800c183 	.word	0x0800c183
 800bf4c:	0800c123 	.word	0x0800c123
 800bf50:	0800c14f 	.word	0x0800c14f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	7c12      	ldrb	r2, [r2, #16]
 800bf60:	f107 0108 	add.w	r1, r7, #8
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
 800bf68:	60f8      	str	r0, [r7, #12]
      break;
 800bf6a:	e112      	b.n	800c192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7c1b      	ldrb	r3, [r3, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10d      	bne.n	800bf90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7c:	f107 0208 	add.w	r2, r7, #8
 800bf80:	4610      	mov	r0, r2
 800bf82:	4798      	blx	r3
 800bf84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf8e:	e100      	b.n	800c192 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	f107 0208 	add.w	r2, r7, #8
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4798      	blx	r3
 800bfa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	701a      	strb	r2, [r3, #0]
      break;
 800bfaa:	e0f2      	b.n	800c192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	885b      	ldrh	r3, [r3, #2]
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	f200 80ac 	bhi.w	800c110 <USBD_GetDescriptor+0x204>
 800bfb8:	a201      	add	r2, pc, #4	; (adr r2, 800bfc0 <USBD_GetDescriptor+0xb4>)
 800bfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbe:	bf00      	nop
 800bfc0:	0800bfd9 	.word	0x0800bfd9
 800bfc4:	0800c00d 	.word	0x0800c00d
 800bfc8:	0800c041 	.word	0x0800c041
 800bfcc:	0800c075 	.word	0x0800c075
 800bfd0:	0800c0a9 	.word	0x0800c0a9
 800bfd4:	0800c0dd 	.word	0x0800c0dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00b      	beq.n	800bffc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	7c12      	ldrb	r2, [r2, #16]
 800bff0:	f107 0108 	add.w	r1, r7, #8
 800bff4:	4610      	mov	r0, r2
 800bff6:	4798      	blx	r3
 800bff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bffa:	e091      	b.n	800c120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fab2 	bl	800c568 <USBD_CtlError>
            err++;
 800c004:	7afb      	ldrb	r3, [r7, #11]
 800c006:	3301      	adds	r3, #1
 800c008:	72fb      	strb	r3, [r7, #11]
          break;
 800c00a:	e089      	b.n	800c120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00b      	beq.n	800c030 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	7c12      	ldrb	r2, [r2, #16]
 800c024:	f107 0108 	add.w	r1, r7, #8
 800c028:	4610      	mov	r0, r2
 800c02a:	4798      	blx	r3
 800c02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c02e:	e077      	b.n	800c120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fa98 	bl	800c568 <USBD_CtlError>
            err++;
 800c038:	7afb      	ldrb	r3, [r7, #11]
 800c03a:	3301      	adds	r3, #1
 800c03c:	72fb      	strb	r3, [r7, #11]
          break;
 800c03e:	e06f      	b.n	800c120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	7c12      	ldrb	r2, [r2, #16]
 800c058:	f107 0108 	add.w	r1, r7, #8
 800c05c:	4610      	mov	r0, r2
 800c05e:	4798      	blx	r3
 800c060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c062:	e05d      	b.n	800c120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fa7e 	bl	800c568 <USBD_CtlError>
            err++;
 800c06c:	7afb      	ldrb	r3, [r7, #11]
 800c06e:	3301      	adds	r3, #1
 800c070:	72fb      	strb	r3, [r7, #11]
          break;
 800c072:	e055      	b.n	800c120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00b      	beq.n	800c098 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	7c12      	ldrb	r2, [r2, #16]
 800c08c:	f107 0108 	add.w	r1, r7, #8
 800c090:	4610      	mov	r0, r2
 800c092:	4798      	blx	r3
 800c094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c096:	e043      	b.n	800c120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fa64 	bl	800c568 <USBD_CtlError>
            err++;
 800c0a0:	7afb      	ldrb	r3, [r7, #11]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0a6:	e03b      	b.n	800c120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00b      	beq.n	800c0cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	7c12      	ldrb	r2, [r2, #16]
 800c0c0:	f107 0108 	add.w	r1, r7, #8
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	4798      	blx	r3
 800c0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ca:	e029      	b.n	800c120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fa4a 	bl	800c568 <USBD_CtlError>
            err++;
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0da:	e021      	b.n	800c120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	7c12      	ldrb	r2, [r2, #16]
 800c0f4:	f107 0108 	add.w	r1, r7, #8
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	4798      	blx	r3
 800c0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0fe:	e00f      	b.n	800c120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa30 	bl	800c568 <USBD_CtlError>
            err++;
 800c108:	7afb      	ldrb	r3, [r7, #11]
 800c10a:	3301      	adds	r3, #1
 800c10c:	72fb      	strb	r3, [r7, #11]
          break;
 800c10e:	e007      	b.n	800c120 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fa28 	bl	800c568 <USBD_CtlError>
          err++;
 800c118:	7afb      	ldrb	r3, [r7, #11]
 800c11a:	3301      	adds	r3, #1
 800c11c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c11e:	bf00      	nop
      }
      break;
 800c120:	e037      	b.n	800c192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	7c1b      	ldrb	r3, [r3, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d109      	bne.n	800c13e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c132:	f107 0208 	add.w	r2, r7, #8
 800c136:	4610      	mov	r0, r2
 800c138:	4798      	blx	r3
 800c13a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c13c:	e029      	b.n	800c192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fa11 	bl	800c568 <USBD_CtlError>
        err++;
 800c146:	7afb      	ldrb	r3, [r7, #11]
 800c148:	3301      	adds	r3, #1
 800c14a:	72fb      	strb	r3, [r7, #11]
      break;
 800c14c:	e021      	b.n	800c192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	7c1b      	ldrb	r3, [r3, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10d      	bne.n	800c172 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15e:	f107 0208 	add.w	r2, r7, #8
 800c162:	4610      	mov	r0, r2
 800c164:	4798      	blx	r3
 800c166:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3301      	adds	r3, #1
 800c16c:	2207      	movs	r2, #7
 800c16e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c170:	e00f      	b.n	800c192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f9f7 	bl	800c568 <USBD_CtlError>
        err++;
 800c17a:	7afb      	ldrb	r3, [r7, #11]
 800c17c:	3301      	adds	r3, #1
 800c17e:	72fb      	strb	r3, [r7, #11]
      break;
 800c180:	e007      	b.n	800c192 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f9ef 	bl	800c568 <USBD_CtlError>
      err++;
 800c18a:	7afb      	ldrb	r3, [r7, #11]
 800c18c:	3301      	adds	r3, #1
 800c18e:	72fb      	strb	r3, [r7, #11]
      break;
 800c190:	bf00      	nop
  }

  if (err != 0U)
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d11e      	bne.n	800c1d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	88db      	ldrh	r3, [r3, #6]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d016      	beq.n	800c1ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c1a0:	893b      	ldrh	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00e      	beq.n	800c1c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	88da      	ldrh	r2, [r3, #6]
 800c1aa:	893b      	ldrh	r3, [r7, #8]
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	bf28      	it	cs
 800c1b0:	4613      	movcs	r3, r2
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1b6:	893b      	ldrh	r3, [r7, #8]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	68f9      	ldr	r1, [r7, #12]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f9e4 	bl	800c58a <USBD_CtlSendData>
 800c1c2:	e009      	b.n	800c1d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f9ce 	bl	800c568 <USBD_CtlError>
 800c1cc:	e004      	b.n	800c1d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fa18 	bl	800c604 <USBD_CtlSendStatus>
 800c1d4:	e000      	b.n	800c1d8 <USBD_GetDescriptor+0x2cc>
    return;
 800c1d6:	bf00      	nop
  }
}
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop

0800c1e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	889b      	ldrh	r3, [r3, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d131      	bne.n	800c256 <USBD_SetAddress+0x76>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	88db      	ldrh	r3, [r3, #6]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d12d      	bne.n	800c256 <USBD_SetAddress+0x76>
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	885b      	ldrh	r3, [r3, #2]
 800c1fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c200:	d829      	bhi.n	800c256 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	885b      	ldrh	r3, [r3, #2]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c20c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b03      	cmp	r3, #3
 800c218:	d104      	bne.n	800c224 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f9a3 	bl	800c568 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c222:	e01d      	b.n	800c260 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	7bfa      	ldrb	r2, [r7, #15]
 800c228:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fb85 	bl	800c940 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f9e4 	bl	800c604 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d004      	beq.n	800c24c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2202      	movs	r2, #2
 800c246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c24a:	e009      	b.n	800c260 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c254:	e004      	b.n	800c260 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f985 	bl	800c568 <USBD_CtlError>
  }
}
 800c25e:	bf00      	nop
 800c260:	bf00      	nop
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	885b      	ldrh	r3, [r3, #2]
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	4b4c      	ldr	r3, [pc, #304]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c27e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c280:	4b4b      	ldr	r3, [pc, #300]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d905      	bls.n	800c294 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f96c 	bl	800c568 <USBD_CtlError>
    return USBD_FAIL;
 800c290:	2303      	movs	r3, #3
 800c292:	e088      	b.n	800c3a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d002      	beq.n	800c2a6 <USBD_SetConfig+0x3e>
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	d025      	beq.n	800c2f0 <USBD_SetConfig+0x88>
 800c2a4:	e071      	b.n	800c38a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c2a6:	4b42      	ldr	r3, [pc, #264]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d01c      	beq.n	800c2e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c2ae:	4b40      	ldr	r3, [pc, #256]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2b8:	4b3d      	ldr	r3, [pc, #244]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7ff f949 	bl	800b556 <USBD_SetClassConfig>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d004      	beq.n	800c2d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f949 	bl	800c568 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2d6:	e065      	b.n	800c3a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f993 	bl	800c604 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2203      	movs	r2, #3
 800c2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c2e6:	e05d      	b.n	800c3a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f98b 	bl	800c604 <USBD_CtlSendStatus>
      break;
 800c2ee:	e059      	b.n	800c3a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c2f0:	4b2f      	ldr	r3, [pc, #188]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d112      	bne.n	800c31e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c300:	4b2b      	ldr	r3, [pc, #172]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	461a      	mov	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c30a:	4b29      	ldr	r3, [pc, #164]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	4619      	mov	r1, r3
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f7ff f93c 	bl	800b58e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f974 	bl	800c604 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c31c:	e042      	b.n	800c3a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c31e:	4b24      	ldr	r3, [pc, #144]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d02a      	beq.n	800c382 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	b2db      	uxtb	r3, r3
 800c332:	4619      	mov	r1, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff f92a 	bl	800b58e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c33a:	4b1d      	ldr	r3, [pc, #116]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c344:	4b1a      	ldr	r3, [pc, #104]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	4619      	mov	r1, r3
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7ff f903 	bl	800b556 <USBD_SetClassConfig>
 800c350:	4603      	mov	r3, r0
 800c352:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00f      	beq.n	800c37a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f903 	bl	800c568 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff f90f 	bl	800b58e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c378:	e014      	b.n	800c3a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f942 	bl	800c604 <USBD_CtlSendStatus>
      break;
 800c380:	e010      	b.n	800c3a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f93e 	bl	800c604 <USBD_CtlSendStatus>
      break;
 800c388:	e00c      	b.n	800c3a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f8eb 	bl	800c568 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c392:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <USBD_SetConfig+0x148>)
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff f8f8 	bl	800b58e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c39e:	2303      	movs	r3, #3
 800c3a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c3a2:	bf00      	nop
  }

  return ret;
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20000028 	.word	0x20000028

0800c3b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	88db      	ldrh	r3, [r3, #6]
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d004      	beq.n	800c3d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f8cd 	bl	800c568 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c3ce:	e023      	b.n	800c418 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	dc02      	bgt.n	800c3e2 <USBD_GetConfig+0x2e>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dc03      	bgt.n	800c3e8 <USBD_GetConfig+0x34>
 800c3e0:	e015      	b.n	800c40e <USBD_GetConfig+0x5a>
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d00b      	beq.n	800c3fe <USBD_GetConfig+0x4a>
 800c3e6:	e012      	b.n	800c40e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f8c7 	bl	800c58a <USBD_CtlSendData>
        break;
 800c3fc:	e00c      	b.n	800c418 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3304      	adds	r3, #4
 800c402:	2201      	movs	r2, #1
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f8bf 	bl	800c58a <USBD_CtlSendData>
        break;
 800c40c:	e004      	b.n	800c418 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f8a9 	bl	800c568 <USBD_CtlError>
        break;
 800c416:	bf00      	nop
}
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c430:	b2db      	uxtb	r3, r3
 800c432:	3b01      	subs	r3, #1
 800c434:	2b02      	cmp	r3, #2
 800c436:	d81e      	bhi.n	800c476 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	88db      	ldrh	r3, [r3, #6]
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d004      	beq.n	800c44a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f890 	bl	800c568 <USBD_CtlError>
        break;
 800c448:	e01a      	b.n	800c480 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2201      	movs	r2, #1
 800c44e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c456:	2b00      	cmp	r3, #0
 800c458:	d005      	beq.n	800c466 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f043 0202 	orr.w	r2, r3, #2
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	330c      	adds	r3, #12
 800c46a:	2202      	movs	r2, #2
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f88b 	bl	800c58a <USBD_CtlSendData>
      break;
 800c474:	e004      	b.n	800c480 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f875 	bl	800c568 <USBD_CtlError>
      break;
 800c47e:	bf00      	nop
  }
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	885b      	ldrh	r3, [r3, #2]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d106      	bne.n	800c4a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f8ae 	bl	800c604 <USBD_CtlSendStatus>
  }
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d80b      	bhi.n	800c4e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	885b      	ldrh	r3, [r3, #2]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d10c      	bne.n	800c4ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f893 	bl	800c604 <USBD_CtlSendStatus>
      }
      break;
 800c4de:	e004      	b.n	800c4ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c4e0:	6839      	ldr	r1, [r7, #0]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f840 	bl	800c568 <USBD_CtlError>
      break;
 800c4e8:	e000      	b.n	800c4ec <USBD_ClrFeature+0x3c>
      break;
 800c4ea:	bf00      	nop
  }
}
 800c4ec:	bf00      	nop
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	781a      	ldrb	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	3301      	adds	r3, #1
 800c50e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	781a      	ldrb	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	3301      	adds	r3, #1
 800c51c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7ff fabc 	bl	800ba9c <SWAPBYTE>
 800c524:	4603      	mov	r3, r0
 800c526:	461a      	mov	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	3301      	adds	r3, #1
 800c530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3301      	adds	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f7ff faaf 	bl	800ba9c <SWAPBYTE>
 800c53e:	4603      	mov	r3, r0
 800c540:	461a      	mov	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3301      	adds	r3, #1
 800c54a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	3301      	adds	r3, #1
 800c550:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7ff faa2 	bl	800ba9c <SWAPBYTE>
 800c558:	4603      	mov	r3, r0
 800c55a:	461a      	mov	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	80da      	strh	r2, [r3, #6]
}
 800c560:	bf00      	nop
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c572:	2180      	movs	r1, #128	; 0x80
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f979 	bl	800c86c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c57a:	2100      	movs	r1, #0
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f975 	bl	800c86c <USBD_LL_StallEP>
}
 800c582:	bf00      	nop
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b084      	sub	sp, #16
 800c58e:	af00      	add	r7, sp, #0
 800c590:	60f8      	str	r0, [r7, #12]
 800c592:	60b9      	str	r1, [r7, #8]
 800c594:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2202      	movs	r2, #2
 800c59a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f9e4 	bl	800c97e <USBD_LL_Transmit>

  return USBD_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f000 f9d3 	bl	800c97e <USBD_LL_Transmit>

  return USBD_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	60b9      	str	r1, [r7, #8]
 800c5ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 f9e3 	bl	800c9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2204      	movs	r2, #4
 800c610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c614:	2300      	movs	r3, #0
 800c616:	2200      	movs	r2, #0
 800c618:	2100      	movs	r1, #0
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f9af 	bl	800c97e <USBD_LL_Transmit>

  return USBD_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b082      	sub	sp, #8
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2205      	movs	r2, #5
 800c636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c63a:	2300      	movs	r3, #0
 800c63c:	2200      	movs	r2, #0
 800c63e:	2100      	movs	r1, #0
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f9bd 	bl	800c9c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c664:	4619      	mov	r1, r3
 800c666:	4610      	mov	r0, r2
 800c668:	f7fe ffa9 	bl	800b5be <USBD_LL_SetupStage>
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c686:	78fa      	ldrb	r2, [r7, #3]
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	4613      	mov	r3, r2
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	1a9b      	subs	r3, r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	440b      	add	r3, r1
 800c694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	78fb      	ldrb	r3, [r7, #3]
 800c69c:	4619      	mov	r1, r3
 800c69e:	f7fe ffe3 	bl	800b668 <USBD_LL_DataOutStage>
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c6bc:	78fa      	ldrb	r2, [r7, #3]
 800c6be:	6879      	ldr	r1, [r7, #4]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	1a9b      	subs	r3, r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	440b      	add	r3, r1
 800c6ca:	3348      	adds	r3, #72	; 0x48
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	78fb      	ldrb	r3, [r7, #3]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	f7ff f82c 	bl	800b72e <USBD_LL_DataInStage>
}
 800c6d6:	bf00      	nop
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff f940 	bl	800b972 <USBD_LL_SOF>
}
 800c6f2:	bf00      	nop
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c702:	2301      	movs	r3, #1
 800c704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d001      	beq.n	800c712 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c70e:	f7fb fff1 	bl	80086f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c718:	7bfa      	ldrb	r2, [r7, #15]
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff f8ea 	bl	800b8f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c728:	4618      	mov	r0, r3
 800c72a:	f7ff f896 	bl	800b85a <USBD_LL_Reset>
}
 800c72e:	bf00      	nop
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff f8e5 	bl	800b916 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	6812      	ldr	r2, [r2, #0]
 800c75a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c75e:	f043 0301 	orr.w	r3, r3, #1
 800c762:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a1b      	ldr	r3, [r3, #32]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d005      	beq.n	800c778 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c76c:	4b04      	ldr	r3, [pc, #16]	; (800c780 <HAL_PCD_SuspendCallback+0x48>)
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	4a03      	ldr	r2, [pc, #12]	; (800c780 <HAL_PCD_SuspendCallback+0x48>)
 800c772:	f043 0306 	orr.w	r3, r3, #6
 800c776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	e000ed00 	.word	0xe000ed00

0800c784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff f8d5 	bl	800b942 <USBD_LL_Resume>
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7b2:	78fa      	ldrb	r2, [r7, #3]
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7ff f923 	bl	800ba02 <USBD_LL_IsoOUTIncomplete>
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7d6:	78fa      	ldrb	r2, [r7, #3]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff f8eb 	bl	800b9b6 <USBD_LL_IsoINIncomplete>
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7ff f929 	bl	800ba4e <USBD_LL_DevConnected>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff f926 	bl	800ba64 <USBD_LL_DevDisconnected>
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	4608      	mov	r0, r1
 800c82a:	4611      	mov	r1, r2
 800c82c:	461a      	mov	r2, r3
 800c82e:	4603      	mov	r3, r0
 800c830:	70fb      	strb	r3, [r7, #3]
 800c832:	460b      	mov	r3, r1
 800c834:	70bb      	strb	r3, [r7, #2]
 800c836:	4613      	mov	r3, r2
 800c838:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c848:	78bb      	ldrb	r3, [r7, #2]
 800c84a:	883a      	ldrh	r2, [r7, #0]
 800c84c:	78f9      	ldrb	r1, [r7, #3]
 800c84e:	f7fc ff2e 	bl	80096ae <HAL_PCD_EP_Open>
 800c852:	4603      	mov	r3, r0
 800c854:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c856:	7bfb      	ldrb	r3, [r7, #15]
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 f8d3 	bl	800ca04 <USBD_Get_USB_Status>
 800c85e:	4603      	mov	r3, r0
 800c860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c862:	7bbb      	ldrb	r3, [r7, #14]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c878:	2300      	movs	r3, #0
 800c87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c886:	78fa      	ldrb	r2, [r7, #3]
 800c888:	4611      	mov	r1, r2
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fd f80c 	bl	80098a8 <HAL_PCD_EP_SetStall>
 800c890:	4603      	mov	r3, r0
 800c892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f8b4 	bl	800ca04 <USBD_Get_USB_Status>
 800c89c:	4603      	mov	r3, r0
 800c89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8c4:	78fa      	ldrb	r2, [r7, #3]
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fd f851 	bl	8009970 <HAL_PCD_EP_ClrStall>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d2:	7bfb      	ldrb	r3, [r7, #15]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 f895 	bl	800ca04 <USBD_Get_USB_Status>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c900:	2b00      	cmp	r3, #0
 800c902:	da0b      	bge.n	800c91c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c904:	78fb      	ldrb	r3, [r7, #3]
 800c906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c90a:	68f9      	ldr	r1, [r7, #12]
 800c90c:	4613      	mov	r3, r2
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	1a9b      	subs	r3, r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	440b      	add	r3, r1
 800c916:	333e      	adds	r3, #62	; 0x3e
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	e00b      	b.n	800c934 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c91c:	78fb      	ldrb	r3, [r7, #3]
 800c91e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c922:	68f9      	ldr	r1, [r7, #12]
 800c924:	4613      	mov	r3, r2
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	1a9b      	subs	r3, r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	440b      	add	r3, r1
 800c92e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c932:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c934:	4618      	mov	r0, r3
 800c936:	3714      	adds	r7, #20
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	460b      	mov	r3, r1
 800c94a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c95a:	78fa      	ldrb	r2, [r7, #3]
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fc fe80 	bl	8009664 <HAL_PCD_SetAddress>
 800c964:	4603      	mov	r3, r0
 800c966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c968:	7bfb      	ldrb	r3, [r7, #15]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 f84a 	bl	800ca04 <USBD_Get_USB_Status>
 800c970:	4603      	mov	r3, r0
 800c972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c974:	7bbb      	ldrb	r3, [r7, #14]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b086      	sub	sp, #24
 800c982:	af00      	add	r7, sp, #0
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	607a      	str	r2, [r7, #4]
 800c988:	603b      	str	r3, [r7, #0]
 800c98a:	460b      	mov	r3, r1
 800c98c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c99c:	7af9      	ldrb	r1, [r7, #11]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	f7fc ff37 	bl	8009814 <HAL_PCD_EP_Transmit>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9aa:	7dfb      	ldrb	r3, [r7, #23]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 f829 	bl	800ca04 <USBD_Get_USB_Status>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	607a      	str	r2, [r7, #4]
 800c9ca:	603b      	str	r3, [r7, #0]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c9de:	7af9      	ldrb	r1, [r7, #11]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	f7fc fecb 	bl	800977e <HAL_PCD_EP_Receive>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 f808 	bl	800ca04 <USBD_Get_USB_Status>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3718      	adds	r7, #24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca12:	79fb      	ldrb	r3, [r7, #7]
 800ca14:	2b03      	cmp	r3, #3
 800ca16:	d817      	bhi.n	800ca48 <USBD_Get_USB_Status+0x44>
 800ca18:	a201      	add	r2, pc, #4	; (adr r2, 800ca20 <USBD_Get_USB_Status+0x1c>)
 800ca1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1e:	bf00      	nop
 800ca20:	0800ca31 	.word	0x0800ca31
 800ca24:	0800ca37 	.word	0x0800ca37
 800ca28:	0800ca3d 	.word	0x0800ca3d
 800ca2c:	0800ca43 	.word	0x0800ca43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	73fb      	strb	r3, [r7, #15]
    break;
 800ca34:	e00b      	b.n	800ca4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca36:	2303      	movs	r3, #3
 800ca38:	73fb      	strb	r3, [r7, #15]
    break;
 800ca3a:	e008      	b.n	800ca4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca40:	e005      	b.n	800ca4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca42:	2303      	movs	r3, #3
 800ca44:	73fb      	strb	r3, [r7, #15]
    break;
 800ca46:	e002      	b.n	800ca4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca4c:	bf00      	nop
  }
  return usb_status;
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3714      	adds	r7, #20
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <__libc_init_array>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	4d0d      	ldr	r5, [pc, #52]	; (800ca94 <__libc_init_array+0x38>)
 800ca60:	4c0d      	ldr	r4, [pc, #52]	; (800ca98 <__libc_init_array+0x3c>)
 800ca62:	1b64      	subs	r4, r4, r5
 800ca64:	10a4      	asrs	r4, r4, #2
 800ca66:	2600      	movs	r6, #0
 800ca68:	42a6      	cmp	r6, r4
 800ca6a:	d109      	bne.n	800ca80 <__libc_init_array+0x24>
 800ca6c:	4d0b      	ldr	r5, [pc, #44]	; (800ca9c <__libc_init_array+0x40>)
 800ca6e:	4c0c      	ldr	r4, [pc, #48]	; (800caa0 <__libc_init_array+0x44>)
 800ca70:	f000 f820 	bl	800cab4 <_init>
 800ca74:	1b64      	subs	r4, r4, r5
 800ca76:	10a4      	asrs	r4, r4, #2
 800ca78:	2600      	movs	r6, #0
 800ca7a:	42a6      	cmp	r6, r4
 800ca7c:	d105      	bne.n	800ca8a <__libc_init_array+0x2e>
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca84:	4798      	blx	r3
 800ca86:	3601      	adds	r6, #1
 800ca88:	e7ee      	b.n	800ca68 <__libc_init_array+0xc>
 800ca8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca8e:	4798      	blx	r3
 800ca90:	3601      	adds	r6, #1
 800ca92:	e7f2      	b.n	800ca7a <__libc_init_array+0x1e>
 800ca94:	0800cae4 	.word	0x0800cae4
 800ca98:	0800cae4 	.word	0x0800cae4
 800ca9c:	0800cae4 	.word	0x0800cae4
 800caa0:	0800cae8 	.word	0x0800cae8

0800caa4 <memset>:
 800caa4:	4402      	add	r2, r0
 800caa6:	4603      	mov	r3, r0
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d100      	bne.n	800caae <memset+0xa>
 800caac:	4770      	bx	lr
 800caae:	f803 1b01 	strb.w	r1, [r3], #1
 800cab2:	e7f9      	b.n	800caa8 <memset+0x4>

0800cab4 <_init>:
 800cab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab6:	bf00      	nop
 800cab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caba:	bc08      	pop	{r3}
 800cabc:	469e      	mov	lr, r3
 800cabe:	4770      	bx	lr

0800cac0 <_fini>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	bf00      	nop
 800cac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cac6:	bc08      	pop	{r3}
 800cac8:	469e      	mov	lr, r3
 800caca:	4770      	bx	lr
