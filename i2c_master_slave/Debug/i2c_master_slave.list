
i2c_master_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000672c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080068cc  080068cc  000168cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bfc  08006bfc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c04  08006c04  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c08  08006c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000074  08006c80  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006c80  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d33c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc0  00000000  00000000  0002d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016717  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd99  00000000  00000000  00046c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008995d  00000000  00000000  000539a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd2fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003334  00000000  00000000  000dd350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068b4 	.word	0x080068b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080068b4 	.word	0x080068b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d002      	beq.n	8000590 <_write+0x18>
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d111      	bne.n	80005b4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	b29a      	uxth	r2, r3
 8000594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000598:	68b9      	ldr	r1, [r7, #8]
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <_write+0x48>)
 800059c:	f004 fedb 	bl	8005356 <HAL_UART_Transmit>
 80005a0:	4603      	mov	r3, r0
 80005a2:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d101      	bne.n	80005ae <_write+0x36>
      return len;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	e004      	b.n	80005b8 <_write+0x40>
    else
      return -1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b2:	e001      	b.n	80005b8 <_write+0x40>
  }
  return -1;
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000270 	.word	0x20000270

080005c4 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	DBG("LCB");
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <HAL_I2C_ListenCpltCallback+0x28>)
 80005ce:	f005 f9bd 	bl	800594c <iprintf>
 80005d2:	200a      	movs	r0, #10
 80005d4:	f005 f9d2 	bl	800597c <putchar>
	first = 1;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_I2C_ListenCpltCallback+0x2c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f002 f8a6 	bl	8002730 <HAL_I2C_EnableListen_IT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	080068cc 	.word	0x080068cc
 80005f0:	20000000 	.word	0x20000000

080005f4 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
 8000600:	4613      	mov	r3, r2
 8000602:	803b      	strh	r3, [r7, #0]
	DBG("ACB %s", TransferDirection==I2C_DIRECTION_RECEIVE ? "rx" : "tx" );
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <HAL_I2C_AddrCallback+0x1a>
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <HAL_I2C_AddrCallback+0x78>)
 800060c:	e000      	b.n	8000610 <HAL_I2C_AddrCallback+0x1c>
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_I2C_AddrCallback+0x7c>)
 8000610:	4619      	mov	r1, r3
 8000612:	4818      	ldr	r0, [pc, #96]	; (8000674 <HAL_I2C_AddrCallback+0x80>)
 8000614:	f005 f99a 	bl	800594c <iprintf>
 8000618:	200a      	movs	r0, #10
 800061a:	f005 f9af 	bl	800597c <putchar>

	if( TransferDirection==I2C_DIRECTION_TRANSMIT ) {
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d115      	bne.n	8000650 <HAL_I2C_AddrCallback+0x5c>
		if( first ) {
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_I2C_AddrCallback+0x84>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d006      	beq.n	800063a <HAL_I2C_AddrCallback+0x46>
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, &offset, 1, I2C_NEXT_FRAME);
 800062c:	2304      	movs	r3, #4
 800062e:	2201      	movs	r2, #1
 8000630:	4912      	ldr	r1, [pc, #72]	; (800067c <HAL_I2C_AddrCallback+0x88>)
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f002 f809 	bl	800264a <HAL_I2C_Slave_Seq_Receive_IT>
		}
	} else {
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &ram[offset], 1, I2C_NEXT_FRAME);
	}

}
 8000638:	e014      	b.n	8000664 <HAL_I2C_AddrCallback+0x70>
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, &ram[offset], 1, I2C_NEXT_FRAME);
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <HAL_I2C_AddrCallback+0x88>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_I2C_AddrCallback+0x8c>)
 8000642:	18d1      	adds	r1, r2, r3
 8000644:	2304      	movs	r3, #4
 8000646:	2201      	movs	r2, #1
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f001 fffe 	bl	800264a <HAL_I2C_Slave_Seq_Receive_IT>
}
 800064e:	e009      	b.n	8000664 <HAL_I2C_AddrCallback+0x70>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &ram[offset], 1, I2C_NEXT_FRAME);
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_I2C_AddrCallback+0x88>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_I2C_AddrCallback+0x8c>)
 8000658:	18d1      	adds	r1, r2, r3
 800065a:	2304      	movs	r3, #4
 800065c:	2201      	movs	r2, #1
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f001 ff80 	bl	8002564 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	080068d0 	.word	0x080068d0
 8000670:	080068d4 	.word	0x080068d4
 8000674:	080068d8 	.word	0x080068d8
 8000678:	20000000 	.word	0x20000000
 800067c:	20000190 	.word	0x20000190
 8000680:	20000090 	.word	0x20000090

08000684 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

	if(first) {
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00c      	beq.n	80006ae <HAL_I2C_SlaveRxCpltCallback+0x2a>
		DBG("RXCB: offset <== %3d", offset );
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4818      	ldr	r0, [pc, #96]	; (80006fc <HAL_I2C_SlaveRxCpltCallback+0x78>)
 800069c:	f005 f956 	bl	800594c <iprintf>
 80006a0:	200a      	movs	r0, #10
 80006a2:	f005 f96b 	bl	800597c <putchar>
		first = 0;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e014      	b.n	80006d8 <HAL_I2C_SlaveRxCpltCallback+0x54>
	} else {
		DBG("RXCB: ram[%3d] <== %3d", offset,  ram[offset] );
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 80006bc:	5c9b      	ldrb	r3, [r3, r2]
 80006be:	461a      	mov	r2, r3
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 80006c2:	f005 f943 	bl	800594c <iprintf>
 80006c6:	200a      	movs	r0, #10
 80006c8:	f005 f958 	bl	800597c <putchar>
		offset++;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80006d6:	701a      	strb	r2, [r3, #0]
	}
	HAL_I2C_Slave_Seq_Receive_IT(hi2c, &ram[offset], 1, I2C_NEXT_FRAME);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 80006e0:	18d1      	adds	r1, r2, r3
 80006e2:	2304      	movs	r3, #4
 80006e4:	2201      	movs	r2, #1
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f001 ffaf 	bl	800264a <HAL_I2C_Slave_Seq_Receive_IT>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000190 	.word	0x20000190
 80006fc:	080068e0 	.word	0x080068e0
 8000700:	20000090 	.word	0x20000090
 8000704:	080068f8 	.word	0x080068f8

08000708 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	DBG("TXCB: ram[%3d] ==> %3d", offset, ram[offset] );
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_I2C_SlaveTxCpltCallback+0x54>)
 800071e:	5c9b      	ldrb	r3, [r3, r2]
 8000720:	461a      	mov	r2, r3
 8000722:	480f      	ldr	r0, [pc, #60]	; (8000760 <HAL_I2C_SlaveTxCpltCallback+0x58>)
 8000724:	f005 f912 	bl	800594c <iprintf>
 8000728:	200a      	movs	r0, #10
 800072a:	f005 f927 	bl	800597c <putchar>
	offset++;
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000738:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &ram[offset], 1, I2C_NEXT_FRAME);
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_I2C_SlaveTxCpltCallback+0x54>)
 8000742:	18d1      	adds	r1, r2, r3
 8000744:	2304      	movs	r3, #4
 8000746:	2201      	movs	r2, #1
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f001 ff0b 	bl	8002564 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000190 	.word	0x20000190
 800075c:	20000090 	.word	0x20000090
 8000760:	08006910 	.word	0x08006910

08000764 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c)==HAL_I2C_ERROR_AF ) {
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f002 fa55 	bl	8002c1c <HAL_I2C_GetError>
 8000772:	4603      	mov	r3, r0
 8000774:	2b04      	cmp	r3, #4
 8000776:	d10c      	bne.n	8000792 <HAL_I2C_ErrorCallback+0x2e>
		// transaction terminated by master
		DBG("ECB end" );
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <HAL_I2C_ErrorCallback+0x4c>)
 800077a:	f005 f8e7 	bl	800594c <iprintf>
 800077e:	200a      	movs	r0, #10
 8000780:	f005 f8fc 	bl	800597c <putchar>
		offset--;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_I2C_ErrorCallback+0x50>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_I2C_ErrorCallback+0x50>)
 800078e:	701a      	strb	r2, [r3, #0]
	} else {
		DBG("ECB err=0x%02lx", HAL_I2C_GetError(hi2c) );
	}
}
 8000790:	e00a      	b.n	80007a8 <HAL_I2C_ErrorCallback+0x44>
		DBG("ECB err=0x%02lx", HAL_I2C_GetError(hi2c) );
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f002 fa42 	bl	8002c1c <HAL_I2C_GetError>
 8000798:	4603      	mov	r3, r0
 800079a:	4619      	mov	r1, r3
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <HAL_I2C_ErrorCallback+0x54>)
 800079e:	f005 f8d5 	bl	800594c <iprintf>
 80007a2:	200a      	movs	r0, #10
 80007a4:	f005 f8ea 	bl	800597c <putchar>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08006928 	.word	0x08006928
 80007b4:	20000190 	.word	0x20000190
 80007b8:	08006930 	.word	0x08006930

080007bc <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	DBG("aborted" );  // never seen...
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <HAL_I2C_AbortCpltCallback+0x1c>)
 80007c6:	f005 f8c1 	bl	800594c <iprintf>
 80007ca:	200a      	movs	r0, #10
 80007cc:	f005 f8d6 	bl	800597c <putchar>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	08006940 	.word	0x08006940

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fbdb 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f8a1 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 f98d 	bl	8000b08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ee:	f000 f905 	bl	80009fc <MX_I2C1_Init>
  MX_I2C2_Init();
 80007f2:	f000 f931 	bl	8000a58 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80007f6:	f000 f95d 	bl	8000ab4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DBG("\n\n\nStarting up");
 80007fa:	4840      	ldr	r0, [pc, #256]	; (80008fc <main+0x120>)
 80007fc:	f005 f8a6 	bl	800594c <iprintf>
 8000800:	200a      	movs	r0, #10
 8000802:	f005 f8bb 	bl	800597c <putchar>

  HAL_I2C_EnableListen_IT( &hi2c2 ); // slave is ready
 8000806:	483e      	ldr	r0, [pc, #248]	; (8000900 <main+0x124>)
 8000808:	f001 ff92 	bl	8002730 <HAL_I2C_EnableListen_IT>
  {

	  static uint8_t tx_data[20];
	  static uint8_t rx_data[20];

	  tx_data[0] = 20;
 800080c:	4b3d      	ldr	r3, [pc, #244]	; (8000904 <main+0x128>)
 800080e:	2214      	movs	r2, #20
 8000810:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = 10;
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <main+0x128>)
 8000814:	220a      	movs	r2, #10
 8000816:	705a      	strb	r2, [r3, #1]

	  HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDR << 1, tx_data, 2, HAL_MAX_DELAY);
 8000818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2302      	movs	r3, #2
 8000820:	4a38      	ldr	r2, [pc, #224]	; (8000904 <main+0x128>)
 8000822:	2128      	movs	r1, #40	; 0x28
 8000824:	4838      	ldr	r0, [pc, #224]	; (8000908 <main+0x12c>)
 8000826:	f001 f859 	bl	80018dc <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c1, I2C_SLAVE_ADDR << 1, rx_data, 2, HAL_MAX_DELAY);
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2302      	movs	r3, #2
 8000832:	4a36      	ldr	r2, [pc, #216]	; (800090c <main+0x130>)
 8000834:	2128      	movs	r1, #40	; 0x28
 8000836:	4834      	ldr	r0, [pc, #208]	; (8000908 <main+0x12c>)
 8000838:	f001 f94e 	bl	8001ad8 <HAL_I2C_Master_Receive>

	  DBG("HAL_I2C_Mem_Write( &hi2c1, I2C_SLAVE_ADDR << 1, 1, I2C_MEMADD_SIZE_8BIT, \"AB\", 2, HAL_MAX_DELAY );" );
 800083c:	4834      	ldr	r0, [pc, #208]	; (8000910 <main+0x134>)
 800083e:	f005 f885 	bl	800594c <iprintf>
 8000842:	200a      	movs	r0, #10
 8000844:	f005 f89a 	bl	800597c <putchar>
	  HAL_I2C_Mem_Write( &hi2c1, I2C_SLAVE_ADDR << 1, 1, I2C_MEMADD_SIZE_8BIT, "AB", 2, HAL_MAX_DELAY );
 8000848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084c:	9302      	str	r3, [sp, #8]
 800084e:	2302      	movs	r3, #2
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <main+0x138>)
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	2201      	movs	r2, #1
 800085a:	2128      	movs	r1, #40	; 0x28
 800085c:	482a      	ldr	r0, [pc, #168]	; (8000908 <main+0x12c>)
 800085e:	f001 fb61 	bl	8001f24 <HAL_I2C_Mem_Write>

	  DBG("HAL_I2C_Mem_Read( &hi2c1, I2C_SLAVE_ADDR << 1, 2, I2C_MEMADD_SIZE_8BIT, rx_data, 1, HAL_MAX_DELAY );");
 8000862:	482d      	ldr	r0, [pc, #180]	; (8000918 <main+0x13c>)
 8000864:	f005 f872 	bl	800594c <iprintf>
 8000868:	200a      	movs	r0, #10
 800086a:	f005 f887 	bl	800597c <putchar>
	  HAL_I2C_Mem_Read( &hi2c1, I2C_SLAVE_ADDR << 1, 2, I2C_MEMADD_SIZE_8BIT, rx_data, 1, HAL_MAX_DELAY );
 800086e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	2301      	movs	r3, #1
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <main+0x130>)
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	2202      	movs	r2, #2
 8000880:	2128      	movs	r1, #40	; 0x28
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <main+0x12c>)
 8000884:	f001 fc48 	bl	8002118 <HAL_I2C_Mem_Read>

	  DBG("HAL_I2C_Mem_Write( &hi2c1, I2C_SLAVE_ADDR, 5, I2C_MEMADD_SIZE_8BIT, \"0123456789\", 10, HAL_MAX_DELAY );");
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <main+0x140>)
 800088a:	f005 f85f 	bl	800594c <iprintf>
 800088e:	200a      	movs	r0, #10
 8000890:	f005 f874 	bl	800597c <putchar>
	  HAL_I2C_Mem_Write( &hi2c1, I2C_SLAVE_ADDR << 1, 5, I2C_MEMADD_SIZE_8BIT, "0123456789", 10, HAL_MAX_DELAY );
 8000894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	230a      	movs	r3, #10
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <main+0x144>)
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2301      	movs	r3, #1
 80008a4:	2205      	movs	r2, #5
 80008a6:	2128      	movs	r1, #40	; 0x28
 80008a8:	4817      	ldr	r0, [pc, #92]	; (8000908 <main+0x12c>)
 80008aa:	f001 fb3b 	bl	8001f24 <HAL_I2C_Mem_Write>

	  DBG("HAL_I2C_Mem_Read( &hi2c1, I2C_SLAVE_ADDR, 5, I2C_MEMADD_SIZE_8BIT, rx_data, 5, HAL_MAX_DELAY );");
 80008ae:	481d      	ldr	r0, [pc, #116]	; (8000924 <main+0x148>)
 80008b0:	f005 f84c 	bl	800594c <iprintf>
 80008b4:	200a      	movs	r0, #10
 80008b6:	f005 f861 	bl	800597c <putchar>
	  HAL_I2C_Mem_Read( &hi2c1, I2C_SLAVE_ADDR << 1, 5, I2C_MEMADD_SIZE_8BIT, rx_data, 5, HAL_MAX_DELAY );
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	2305      	movs	r3, #5
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <main+0x130>)
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2301      	movs	r3, #1
 80008ca:	2205      	movs	r2, #5
 80008cc:	2128      	movs	r1, #40	; 0x28
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <main+0x12c>)
 80008d0:	f001 fc22 	bl	8002118 <HAL_I2C_Mem_Read>

	  DBG("HAL_I2C_Master_Receive( &hi2c1, I2C_SLAVE_ADDR, rx_data, 5, HAL_MAX_DELAY );");
 80008d4:	4814      	ldr	r0, [pc, #80]	; (8000928 <main+0x14c>)
 80008d6:	f005 f839 	bl	800594c <iprintf>
 80008da:	200a      	movs	r0, #10
 80008dc:	f005 f84e 	bl	800597c <putchar>
	  HAL_I2C_Master_Receive( &hi2c1, I2C_SLAVE_ADDR << 1, rx_data, 5, HAL_MAX_DELAY );
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2305      	movs	r3, #5
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <main+0x130>)
 80008ea:	2128      	movs	r1, #40	; 0x28
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <main+0x12c>)
 80008ee:	f001 f8f3 	bl	8001ad8 <HAL_I2C_Master_Receive>
	  HAL_Delay(10000);
 80008f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80008f6:	f000 fbc3 	bl	8001080 <HAL_Delay>
  {
 80008fa:	e787      	b.n	800080c <main+0x30>
 80008fc:	08006948 	.word	0x08006948
 8000900:	2000021c 	.word	0x2000021c
 8000904:	20000194 	.word	0x20000194
 8000908:	200001c8 	.word	0x200001c8
 800090c:	200001a8 	.word	0x200001a8
 8000910:	08006958 	.word	0x08006958
 8000914:	080069bc 	.word	0x080069bc
 8000918:	080069c0 	.word	0x080069c0
 800091c:	08006a28 	.word	0x08006a28
 8000920:	08006a90 	.word	0x08006a90
 8000924:	08006a9c 	.word	0x08006a9c
 8000928:	08006afc 	.word	0x08006afc

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fffe 	bl	800593c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <SystemClock_Config+0xc8>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <SystemClock_Config+0xc8>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <SystemClock_Config+0xc8>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <SystemClock_Config+0xcc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <SystemClock_Config+0xcc>)
 8000976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <SystemClock_Config+0xcc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800099c:	2319      	movs	r3, #25
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009a0:	23c0      	movs	r3, #192	; 0xc0
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 f83b 	bl	8004a2c <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 f8da 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2103      	movs	r1, #3
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fa9d 	bl	8004f1c <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e8:	f000 f8c4 	bl	8000b74 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_I2C1_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a3a:	f000 fe0b 	bl	8001654 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f896 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001c8 	.word	0x200001c8
 8000a50:	40005400 	.word	0x40005400
 8000a54:	00061a80 	.word	0x00061a80

08000a58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_I2C2_Init+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_I2C2_Init+0x58>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 40;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a70:	2228      	movs	r2, #40	; 0x28
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a96:	f000 fddd 	bl	8001654 <HAL_I2C_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa0:	f000 f868 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000021c 	.word	0x2000021c
 8000aac:	40005800 	.word	0x40005800
 8000ab0:	00061a80 	.word	0x00061a80

08000ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART1_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART1_UART_Init+0x4c>)
 8000aec:	f004 fbe6 	bl	80052bc <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f000 f83d 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000270 	.word	0x20000270
 8000b04:	40011000 	.word	0x40011000

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x68>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <HAL_I2C_MspInit+0x128>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12c      	bne.n	8000c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a40      	ldr	r2, [pc, #256]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b3e      	ldr	r3, [pc, #248]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4835      	ldr	r0, [pc, #212]	; (8000d00 <HAL_I2C_MspInit+0x130>)
 8000c2a:	f000 fb8f 	bl	800134c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a31      	ldr	r2, [pc, #196]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c4a:	e051      	b.n	8000cf0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <HAL_I2C_MspInit+0x134>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d14c      	bne.n	8000cf0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c84:	2304      	movs	r3, #4
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481c      	ldr	r0, [pc, #112]	; (8000d00 <HAL_I2C_MspInit+0x130>)
 8000c90:	f000 fb5c 	bl	800134c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c94:	2308      	movs	r3, #8
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <HAL_I2C_MspInit+0x130>)
 8000cb0:	f000 fb4c 	bl	800134c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000cbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2021      	movs	r0, #33	; 0x21
 8000cd6:	f000 fad2 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000cda:	2021      	movs	r0, #33	; 0x21
 8000cdc:	f000 faeb 	bl	80012b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2022      	movs	r0, #34	; 0x22
 8000ce6:	f000 faca 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000cea:	2022      	movs	r0, #34	; 0x22
 8000cec:	f000 fae3 	bl	80012b6 <HAL_NVIC_EnableIRQ>
}
 8000cf0:	bf00      	nop
 8000cf2:	3730      	adds	r7, #48	; 0x30
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40005800 	.word	0x40005800

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12c      	bne.n	8000d84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d74:	2307      	movs	r3, #7
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_UART_MspInit+0x8c>)
 8000d80:	f000 fae4 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40011000 	.word	0x40011000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f92c 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <I2C2_EV_IRQHandler+0x10>)
 8000df2:	f001 fcd3 	bl	800279c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000021c 	.word	0x2000021c

08000e00 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <I2C2_ER_IRQHandler+0x10>)
 8000e06:	f001 fe3a 	bl	8002a7e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000021c 	.word	0x2000021c

08000e14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e00a      	b.n	8000e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e26:	f3af 8000 	nop.w
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	b2ca      	uxtb	r2, r1
 8000e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf0      	blt.n	8000e26 <_read+0x12>
	}

return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	return -1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e76:	605a      	str	r2, [r3, #4]
	return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_isatty>:

int _isatty(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f004 fcfe 	bl	80058e8 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20020000 	.word	0x20020000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	200001bc 	.word	0x200001bc
 8000f20:	200002c8 	.word	0x200002c8

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f72:	f7ff ffd7 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f004 fcbd 	bl	80058f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fc2f 	bl	80007dc <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f8c:	08006c0c 	.word	0x08006c0c
  ldr r2, =_sbss
 8000f90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f94:	200002c8 	.word	0x200002c8

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f94f 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fdd6 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f967 	bl	80012d2 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	f000 f92f 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000004 	.word	0x20000004
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000000c 	.word	0x2000000c
 8001064:	200002b4 	.word	0x200002b4

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200002b4 	.word	0x200002b4

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000000c 	.word	0x2000000c

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d004      	beq.n	8001308 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e00c      	b.n	8001322 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2205      	movs	r2, #5
 800130c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800133c:	b2db      	uxtb	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e159      	b.n	800161c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8148 	bne.w	8001616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d005      	beq.n	800139e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	2b02      	cmp	r3, #2
 800139c:	d130      	bne.n	8001400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 0201 	and.w	r2, r3, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b03      	cmp	r3, #3
 800140a:	d017      	beq.n	800143c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d123      	bne.n	8001490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a2 	beq.w	8001616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b57      	ldr	r3, [pc, #348]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a56      	ldr	r2, [pc, #344]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b54      	ldr	r3, [pc, #336]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ee:	4a52      	ldr	r2, [pc, #328]	; (8001638 <HAL_GPIO_Init+0x2ec>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a49      	ldr	r2, [pc, #292]	; (800163c <HAL_GPIO_Init+0x2f0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d019      	beq.n	800154e <HAL_GPIO_Init+0x202>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_GPIO_Init+0x2f4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0x1fe>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a47      	ldr	r2, [pc, #284]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00d      	beq.n	8001546 <HAL_GPIO_Init+0x1fa>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a46      	ldr	r2, [pc, #280]	; (8001648 <HAL_GPIO_Init+0x2fc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d007      	beq.n	8001542 <HAL_GPIO_Init+0x1f6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a45      	ldr	r2, [pc, #276]	; (800164c <HAL_GPIO_Init+0x300>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_GPIO_Init+0x1f2>
 800153a:	2304      	movs	r3, #4
 800153c:	e008      	b.n	8001550 <HAL_GPIO_Init+0x204>
 800153e:	2307      	movs	r3, #7
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x204>
 8001542:	2303      	movs	r3, #3
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x204>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x204>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x204>
 800154e:	2300      	movs	r3, #0
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4093      	lsls	r3, r2
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001560:	4935      	ldr	r1, [pc, #212]	; (8001638 <HAL_GPIO_Init+0x2ec>)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001592:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_GPIO_Init+0x304>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_GPIO_Init+0x304>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3301      	adds	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	f67f aea2 	bls.w	8001368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40013800 	.word	0x40013800
 800163c:	40020000 	.word	0x40020000
 8001640:	40020400 	.word	0x40020400
 8001644:	40020800 	.word	0x40020800
 8001648:	40020c00 	.word	0x40020c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40013c00 	.word	0x40013c00

08001654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e12b      	b.n	80018be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff faa8 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2224      	movs	r2, #36	; 0x24
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b8:	f003 fdd8 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a81      	ldr	r2, [pc, #516]	; (80018c8 <HAL_I2C_Init+0x274>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d807      	bhi.n	80016d8 <HAL_I2C_Init+0x84>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a80      	ldr	r2, [pc, #512]	; (80018cc <HAL_I2C_Init+0x278>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bf94      	ite	ls
 80016d0:	2301      	movls	r3, #1
 80016d2:	2300      	movhi	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	e006      	b.n	80016e6 <HAL_I2C_Init+0x92>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4a7d      	ldr	r2, [pc, #500]	; (80018d0 <HAL_I2C_Init+0x27c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	bf94      	ite	ls
 80016e0:	2301      	movls	r3, #1
 80016e2:	2300      	movhi	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0e7      	b.n	80018be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4a78      	ldr	r2, [pc, #480]	; (80018d4 <HAL_I2C_Init+0x280>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_I2C_Init+0x274>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d802      	bhi.n	8001728 <HAL_I2C_Init+0xd4>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3301      	adds	r3, #1
 8001726:	e009      	b.n	800173c <HAL_I2C_Init+0xe8>
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	4a69      	ldr	r2, [pc, #420]	; (80018d8 <HAL_I2C_Init+0x284>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	3301      	adds	r3, #1
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	430b      	orrs	r3, r1
 8001742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800174e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	495c      	ldr	r1, [pc, #368]	; (80018c8 <HAL_I2C_Init+0x274>)
 8001758:	428b      	cmp	r3, r1
 800175a:	d819      	bhi.n	8001790 <HAL_I2C_Init+0x13c>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e59      	subs	r1, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fbb1 f3f3 	udiv	r3, r1, r3
 800176a:	1c59      	adds	r1, r3, #1
 800176c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001770:	400b      	ands	r3, r1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00a      	beq.n	800178c <HAL_I2C_Init+0x138>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1e59      	subs	r1, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fbb1 f3f3 	udiv	r3, r1, r3
 8001784:	3301      	adds	r3, #1
 8001786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178a:	e051      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 800178c:	2304      	movs	r3, #4
 800178e:	e04f      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d111      	bne.n	80017bc <HAL_I2C_Init+0x168>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1e58      	subs	r0, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	440b      	add	r3, r1
 80017a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	e012      	b.n	80017e2 <HAL_I2C_Init+0x18e>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Init+0x196>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e022      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10e      	bne.n	8001810 <HAL_I2C_Init+0x1bc>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1e58      	subs	r0, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6859      	ldr	r1, [r3, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	440b      	add	r3, r1
 8001800:	fbb0 f3f3 	udiv	r3, r0, r3
 8001804:	3301      	adds	r3, #1
 8001806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180e:	e00f      	b.n	8001830 <HAL_I2C_Init+0x1dc>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1e58      	subs	r0, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	0099      	lsls	r1, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	fbb0 f3f3 	udiv	r3, r0, r3
 8001826:	3301      	adds	r3, #1
 8001828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	6809      	ldr	r1, [r1, #0]
 8001834:	4313      	orrs	r3, r2
 8001836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800185e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6911      	ldr	r1, [r2, #16]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68d2      	ldr	r2, [r2, #12]
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	430b      	orrs	r3, r1
 8001872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	000186a0 	.word	0x000186a0
 80018cc:	001e847f 	.word	0x001e847f
 80018d0:	003d08ff 	.word	0x003d08ff
 80018d4:	431bde83 	.word	0x431bde83
 80018d8:	10624dd3 	.word	0x10624dd3

080018dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	461a      	mov	r2, r3
 80018e8:	460b      	mov	r3, r1
 80018ea:	817b      	strh	r3, [r7, #10]
 80018ec:	4613      	mov	r3, r2
 80018ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff fbba 	bl	8001068 <HAL_GetTick>
 80018f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b20      	cmp	r3, #32
 8001900:	f040 80e0 	bne.w	8001ac4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2319      	movs	r3, #25
 800190a:	2201      	movs	r2, #1
 800190c:	4970      	ldr	r1, [pc, #448]	; (8001ad0 <HAL_I2C_Master_Transmit+0x1f4>)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f002 fe62 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800191a:	2302      	movs	r3, #2
 800191c:	e0d3      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_I2C_Master_Transmit+0x50>
 8001928:	2302      	movs	r3, #2
 800192a:	e0cc      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ea>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d007      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001960:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2221      	movs	r2, #33	; 0x21
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2210      	movs	r2, #16
 800196e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	893a      	ldrh	r2, [r7, #8]
 8001982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4a50      	ldr	r2, [pc, #320]	; (8001ad4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001994:	8979      	ldrh	r1, [r7, #10]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f002 faa6 	bl	8003eec <I2C_MasterRequestWrite>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e08d      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019c0:	e066      	b.n	8001a90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	6a39      	ldr	r1, [r7, #32]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f002 fedc 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00d      	beq.n	80019ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d107      	bne.n	80019ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06b      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d11b      	bne.n	8001a64 <HAL_I2C_Master_Transmit+0x188>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d017      	beq.n	8001a64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	6a39      	ldr	r1, [r7, #32]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f002 fecc 	bl	8004806 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00d      	beq.n	8001a90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d107      	bne.n	8001a8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e01a      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d194      	bne.n	80019c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e000      	b.n	8001ac6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ac4:	2302      	movs	r3, #2
  }
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	00100002 	.word	0x00100002
 8001ad4:	ffff0000 	.word	0xffff0000

08001ad8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	817b      	strh	r3, [r7, #10]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff fabc 	bl	8001068 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	f040 820b 	bne.w	8001f16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2319      	movs	r3, #25
 8001b06:	2201      	movs	r2, #1
 8001b08:	497c      	ldr	r1, [pc, #496]	; (8001cfc <HAL_I2C_Master_Receive+0x224>)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f002 fd64 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
 8001b18:	e1fe      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_I2C_Master_Receive+0x50>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e1f7      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d007      	beq.n	8001b4e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2222      	movs	r2, #34	; 0x22
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	893a      	ldrh	r2, [r7, #8]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a5c      	ldr	r2, [pc, #368]	; (8001d00 <HAL_I2C_Master_Receive+0x228>)
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b90:	8979      	ldrh	r1, [r7, #10]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f002 fa2a 	bl	8003ff0 <I2C_MasterRequestRead>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1b8      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d113      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	623b      	str	r3, [r7, #32]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e18c      	b.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d11b      	bne.n	8001c16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e16c      	b.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d11b      	bne.n	8001c56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	e14c      	b.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c7c:	e138      	b.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	f200 80f1 	bhi.w	8001e6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d123      	bne.n	8001cd8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f002 fe29 	bl	80048ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e139      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cd6:	e10b      	b.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d14e      	bne.n	8001d7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4906      	ldr	r1, [pc, #24]	; (8001d04 <HAL_I2C_Master_Receive+0x22c>)
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f002 fc74 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e10e      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
 8001cfa:	bf00      	nop
 8001cfc:	00100002 	.word	0x00100002
 8001d00:	ffff0000 	.word	0xffff0000
 8001d04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d7c:	e0b8      	b.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	2200      	movs	r2, #0
 8001d86:	4966      	ldr	r1, [pc, #408]	; (8001f20 <HAL_I2C_Master_Receive+0x448>)
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f002 fc25 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0bf      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	2200      	movs	r2, #0
 8001de2:	494f      	ldr	r1, [pc, #316]	; (8001f20 <HAL_I2C_Master_Receive+0x448>)
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f002 fbf7 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e091      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e68:	e042      	b.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f002 fd3c 	bl	80048ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e04c      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d118      	bne.n	8001ef0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f47f aec2 	bne.w	8001c7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	00010004 	.word	0x00010004

08001f24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	817b      	strh	r3, [r7, #10]
 8001f36:	460b      	mov	r3, r1
 8001f38:	813b      	strh	r3, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f3e:	f7ff f893 	bl	8001068 <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	f040 80d9 	bne.w	8002104 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2319      	movs	r3, #25
 8001f58:	2201      	movs	r2, #1
 8001f5a:	496d      	ldr	r1, [pc, #436]	; (8002110 <HAL_I2C_Mem_Write+0x1ec>)
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f002 fb3b 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0cc      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_I2C_Mem_Write+0x56>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e0c5      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d007      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2221      	movs	r2, #33	; 0x21
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2240      	movs	r2, #64	; 0x40
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a3a      	ldr	r2, [r7, #32]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <HAL_I2C_Mem_Write+0x1f0>)
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fe2:	88f8      	ldrh	r0, [r7, #6]
 8001fe4:	893a      	ldrh	r2, [r7, #8]
 8001fe6:	8979      	ldrh	r1, [r7, #10]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f002 f8ca 	bl	800418c <I2C_RequestMemoryWrite>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d052      	beq.n	80020a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e081      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f002 fbbc 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b04      	cmp	r3, #4
 8002018:	d107      	bne.n	800202a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06b      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d11b      	bne.n	80020a4 <HAL_I2C_Mem_Write+0x180>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d017      	beq.n	80020a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1aa      	bne.n	8002002 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f002 fba8 	bl	8004806 <I2C_WaitOnBTFFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e016      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00100002 	.word	0x00100002
 8002114:	ffff0000 	.word	0xffff0000

08002118 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	817b      	strh	r3, [r7, #10]
 800212a:	460b      	mov	r3, r1
 800212c:	813b      	strh	r3, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002132:	f7fe ff99 	bl	8001068 <HAL_GetTick>
 8002136:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b20      	cmp	r3, #32
 8002142:	f040 8208 	bne.w	8002556 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2319      	movs	r3, #25
 800214c:	2201      	movs	r2, #1
 800214e:	497b      	ldr	r1, [pc, #492]	; (800233c <HAL_I2C_Mem_Read+0x224>)
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f002 fa41 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
 800215e:	e1fb      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_I2C_Mem_Read+0x56>
 800216a:	2302      	movs	r3, #2
 800216c:	e1f4      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d007      	beq.n	8002194 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2222      	movs	r2, #34	; 0x22
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <HAL_I2C_Mem_Read+0x228>)
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d6:	88f8      	ldrh	r0, [r7, #6]
 80021d8:	893a      	ldrh	r2, [r7, #8]
 80021da:	8979      	ldrh	r1, [r7, #10]
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4603      	mov	r3, r0
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f002 f866 	bl	80042b8 <I2C_RequestMemoryRead>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1b0      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d113      	bne.n	8002226 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e184      	b.n	8002530 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	2b01      	cmp	r3, #1
 800222c:	d11b      	bne.n	8002266 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e164      	b.n	8002530 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	2b02      	cmp	r3, #2
 800226c:	d11b      	bne.n	80022a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	e144      	b.n	8002530 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022bc:	e138      	b.n	8002530 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	f200 80f1 	bhi.w	80024aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d123      	bne.n	8002318 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f002 fb09 	bl	80048ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e139      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002316:	e10b      	b.n	8002530 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b02      	cmp	r3, #2
 800231e:	d14e      	bne.n	80023be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	2200      	movs	r2, #0
 8002328:	4906      	ldr	r1, [pc, #24]	; (8002344 <HAL_I2C_Mem_Read+0x22c>)
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f002 f954 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e10e      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
 800233a:	bf00      	nop
 800233c:	00100002 	.word	0x00100002
 8002340:	ffff0000 	.word	0xffff0000
 8002344:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023bc:	e0b8      	b.n	8002530 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	2200      	movs	r2, #0
 80023c6:	4966      	ldr	r1, [pc, #408]	; (8002560 <HAL_I2C_Mem_Read+0x448>)
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f002 f905 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0bf      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002420:	2200      	movs	r2, #0
 8002422:	494f      	ldr	r1, [pc, #316]	; (8002560 <HAL_I2C_Mem_Read+0x448>)
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f002 f8d7 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e091      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a8:	e042      	b.n	8002530 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f002 fa1c 	bl	80048ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e04c      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d118      	bne.n	8002530 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f aec2 	bne.w	80022be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	00010004 	.word	0x00010004

08002564 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002580:	2b28      	cmp	r3, #40	; 0x28
 8002582:	d15b      	bne.n	800263c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e054      	b.n	800263e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800259e:	2302      	movs	r3, #2
 80025a0:	e04d      	b.n	800263e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d007      	beq.n	80025c8 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2229      	movs	r2, #41	; 0x29
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002636:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2302      	movs	r3, #2
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800264a:	b480      	push	{r7}
 800264c:	b087      	sub	sp, #28
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002666:	2b28      	cmp	r3, #40	; 0x28
 8002668:	d15b      	bne.n	8002722 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e054      	b.n	8002724 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002684:	2302      	movs	r3, #2
 8002686:	e04d      	b.n	8002724 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d007      	beq.n	80026ae <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	222a      	movs	r2, #42	; 0x2a
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800271c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b20      	cmp	r3, #32
 8002742:	d124      	bne.n	800278e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2228      	movs	r2, #40	; 0x28
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d007      	beq.n	800276a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002788:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d003      	beq.n	80027d4 <HAL_I2C_EV_IRQHandler+0x38>
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	f040 80c1 	bne.w	8002956 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <HAL_I2C_EV_IRQHandler+0x6e>
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80027f4:	d003      	beq.n	80027fe <HAL_I2C_EV_IRQHandler+0x62>
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80027fc:	d101      	bne.n	8002802 <HAL_I2C_EV_IRQHandler+0x66>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x68>
 8002802:	2300      	movs	r3, #0
 8002804:	2b01      	cmp	r3, #1
 8002806:	f000 8132 	beq.w	8002a6e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <HAL_I2C_EV_IRQHandler+0x92>
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	0a5b      	lsrs	r3, r3, #9
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f002 f8e8 	bl	80049f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fd45 	bl	80032b6 <I2C_Master_SB>
 800282c:	e092      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	08db      	lsrs	r3, r3, #3
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_I2C_EV_IRQHandler+0xb2>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	0a5b      	lsrs	r3, r3, #9
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fdbb 	bl	80033c2 <I2C_Master_ADD10>
 800284c:	e082      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_I2C_EV_IRQHandler+0xd2>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	0a5b      	lsrs	r3, r3, #9
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fdd5 	bl	8003416 <I2C_Master_ADDR>
 800286c:	e072      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d03b      	beq.n	80028f2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002888:	f000 80f3 	beq.w	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	09db      	lsrs	r3, r3, #7
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00f      	beq.n	80028b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	0a9b      	lsrs	r3, r3, #10
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f9bf 	bl	8002c34 <I2C_MasterTransmit_TXE>
 80028b6:	e04d      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80d6 	beq.w	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	0a5b      	lsrs	r3, r3, #9
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80cf 	beq.w	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	2b21      	cmp	r3, #33	; 0x21
 80028d8:	d103      	bne.n	80028e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa46 	bl	8002d6c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028e0:	e0c7      	b.n	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	f040 80c4 	bne.w	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fab4 	bl	8002e58 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028f0:	e0bf      	b.n	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002900:	f000 80b7 	beq.w	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00f      	beq.n	8002930 <HAL_I2C_EV_IRQHandler+0x194>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	0a9b      	lsrs	r3, r3, #10
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_I2C_EV_IRQHandler+0x194>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fb29 	bl	8002f80 <I2C_MasterReceive_RXNE>
 800292e:	e011      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 809a 	beq.w	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	0a5b      	lsrs	r3, r3, #9
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8093 	beq.w	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fbc8 	bl	80030e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002952:	e08e      	b.n	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002954:	e08d      	b.n	8002a72 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d004      	beq.n	8002968 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e007      	b.n	8002978 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <HAL_I2C_EV_IRQHandler+0x20e>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00c      	beq.n	80029aa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80029a0:	69b9      	ldr	r1, [r7, #24]
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 ff86 	bl	80038b4 <I2C_Slave_ADDR>
 80029a8:	e066      	b.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_I2C_EV_IRQHandler+0x22e>
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	0a5b      	lsrs	r3, r3, #9
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 ffc0 	bl	8003948 <I2C_Slave_STOPF>
 80029c8:	e056      	b.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	2b21      	cmp	r3, #33	; 0x21
 80029ce:	d002      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x23a>
 80029d0:	7bbb      	ldrb	r3, [r7, #14]
 80029d2:	2b29      	cmp	r3, #41	; 0x29
 80029d4:	d125      	bne.n	8002a22 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	09db      	lsrs	r3, r3, #7
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00f      	beq.n	8002a02 <HAL_I2C_EV_IRQHandler+0x266>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	0a9b      	lsrs	r3, r3, #10
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_I2C_EV_IRQHandler+0x266>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fe9c 	bl	8003738 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a00:	e039      	b.n	8002a76 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d033      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0x2da>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	0a5b      	lsrs	r3, r3, #9
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d02d      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fec9 	bl	80037b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a20:	e029      	b.n	8002a76 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00f      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	0a9b      	lsrs	r3, r3, #10
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fed4 	bl	80037f4 <I2C_SlaveReceive_RXNE>
 8002a4c:	e014      	b.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	0a5b      	lsrs	r3, r3, #9
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 ff02 	bl	8003870 <I2C_SlaveReceive_BTF>
 8002a6c:	e004      	b.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	; 0x28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <HAL_I2C_ER_IRQHandler+0x4e>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002aca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	0a5b      	lsrs	r3, r3, #9
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <HAL_I2C_ER_IRQHandler+0x78>
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002af4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	0a9b      	lsrs	r3, r3, #10
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d03f      	beq.n	8002b82 <HAL_I2C_ER_IRQHandler+0x104>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d039      	beq.n	8002b82 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002b0e:	7efb      	ldrb	r3, [r7, #27]
 8002b10:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002b28:	7ebb      	ldrb	r3, [r7, #26]
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d112      	bne.n	8002b54 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10f      	bne.n	8002b54 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	2b21      	cmp	r3, #33	; 0x21
 8002b38:	d008      	beq.n	8002b4c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	2b29      	cmp	r3, #41	; 0x29
 8002b3e:	d005      	beq.n	8002b4c <HAL_I2C_ER_IRQHandler+0xce>
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b28      	cmp	r3, #40	; 0x28
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b21      	cmp	r3, #33	; 0x21
 8002b4a:	d103      	bne.n	8002b54 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f001 f82b 	bl	8003ba8 <I2C_Slave_AF>
 8002b52:	e016      	b.n	8002b82 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b5c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b66:	7efb      	ldrb	r3, [r7, #27]
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d002      	beq.n	8002b72 <HAL_I2C_ER_IRQHandler+0xf4>
 8002b6c:	7efb      	ldrb	r3, [r7, #27]
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d107      	bne.n	8002b82 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b80:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	0adb      	lsrs	r3, r3, #11
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00e      	beq.n	8002bac <HAL_I2C_ER_IRQHandler+0x12e>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002baa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f001 f862 	bl	8003c88 <I2C_ITError>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d150      	bne.n	8002cfc <I2C_MasterTransmit_TXE+0xc8>
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b21      	cmp	r3, #33	; 0x21
 8002c5e:	d14d      	bne.n	8002cfc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d01d      	beq.n	8002ca2 <I2C_MasterTransmit_TXE+0x6e>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d01a      	beq.n	8002ca2 <I2C_MasterTransmit_TXE+0x6e>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c72:	d016      	beq.n	8002ca2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2211      	movs	r2, #17
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ff96 	bl	8002bcc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ca0:	e060      	b.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cb0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d107      	bne.n	8002cec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff85 	bl	8002bf4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cea:	e03b      	b.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff69 	bl	8002bcc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cfa:	e033      	b.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b21      	cmp	r3, #33	; 0x21
 8002d00:	d005      	beq.n	8002d0e <I2C_MasterTransmit_TXE+0xda>
 8002d02:	7bbb      	ldrb	r3, [r7, #14]
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d12d      	bne.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b22      	cmp	r3, #34	; 0x22
 8002d0c:	d12a      	bne.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d26:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d28:	e01c      	b.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d103      	bne.n	8002d3e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f88e 	bl	8002e58 <I2C_MemoryTransmit_TXE_BTF>
}
 8002d3c:	e012      	b.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d62:	e7ff      	b.n	8002d64 <I2C_MasterTransmit_TXE+0x130>
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b21      	cmp	r3, #33	; 0x21
 8002d84:	d164      	bne.n	8002e50 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002db4:	e04c      	b.n	8002e50 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d01d      	beq.n	8002df8 <I2C_MasterTransmit_BTF+0x8c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d01a      	beq.n	8002df8 <I2C_MasterTransmit_BTF+0x8c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dc8:	d016      	beq.n	8002df8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dd8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2211      	movs	r2, #17
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff feeb 	bl	8002bcc <HAL_I2C_MasterTxCpltCallback>
}
 8002df6:	e02b      	b.n	8002e50 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e06:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d107      	bne.n	8002e42 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff feda 	bl	8002bf4 <HAL_I2C_MemTxCpltCallback>
}
 8002e40:	e006      	b.n	8002e50 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff febe 	bl	8002bcc <HAL_I2C_MasterTxCpltCallback>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11d      	bne.n	8002eac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10b      	bne.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	1c9a      	adds	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002e8e:	e073      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	121b      	asrs	r3, r3, #8
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002eaa:	e065      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10b      	bne.n	8002ecc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002eca:	e055      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d151      	bne.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b22      	cmp	r3, #34	; 0x22
 8002ed8:	d10d      	bne.n	8002ef6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ef4:	e040      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b21      	cmp	r3, #33	; 0x21
 8002f04:	d112      	bne.n	8002f2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f2a:	e025      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d120      	bne.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b21      	cmp	r3, #33	; 0x21
 8002f3a:	d11d      	bne.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fe3e 	bl	8002bf4 <HAL_I2C_MemTxCpltCallback>
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b22      	cmp	r3, #34	; 0x22
 8002f92:	f040 80a2 	bne.w	80030da <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d921      	bls.n	8002fe8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	f040 8082 	bne.w	80030da <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002fe6:	e078      	b.n	80030da <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d074      	beq.n	80030da <I2C_MasterReceive_RXNE+0x15a>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d002      	beq.n	8002ffc <I2C_MasterReceive_RXNE+0x7c>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d16e      	bne.n	80030da <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f001 fc43 	bl	8004888 <I2C_WaitOnSTOPRequestThroughIT>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d142      	bne.n	800308e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003026:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d10a      	bne.n	8003078 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff fdc9 	bl	8002c08 <HAL_I2C_MemRxCpltCallback>
}
 8003076:	e030      	b.n	80030da <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2212      	movs	r2, #18
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff fdaa 	bl	8002be0 <HAL_I2C_MasterRxCpltCallback>
}
 800308c:	e025      	b.n	80030da <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800309c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7fd fb45 	bl	8000764 <HAL_I2C_ErrorCallback>
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d11b      	bne.n	8003132 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003130:	e0bd      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d129      	bne.n	8003190 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00a      	beq.n	8003168 <I2C_MasterReceive_BTF+0x86>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d007      	beq.n	8003168 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003166:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800318e:	e08e      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d176      	bne.n	8003288 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <I2C_MasterReceive_BTF+0xc4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d108      	bne.n	80031b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e019      	b.n	80031ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d002      	beq.n	80031c4 <I2C_MasterReceive_BTF+0xe2>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d108      	bne.n	80031d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e00a      	b.n	80031ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d007      	beq.n	80031ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003246:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d10a      	bne.n	8003272 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fccc 	bl	8002c08 <HAL_I2C_MemRxCpltCallback>
}
 8003270:	e01d      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2212      	movs	r2, #18
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fcad 	bl	8002be0 <HAL_I2C_MasterRxCpltCallback>
}
 8003286:	e012      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d117      	bne.n	80032fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80032e4:	e067      	b.n	80033b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]
}
 80032f8:	e05d      	b.n	80033b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003302:	d133      	bne.n	800336c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b21      	cmp	r3, #33	; 0x21
 800330e:	d109      	bne.n	8003324 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	e008      	b.n	8003336 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <I2C_Master_SB+0x92>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	2b00      	cmp	r3, #0
 800334e:	d032      	beq.n	80033b6 <I2C_Master_SB+0x100>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02d      	beq.n	80033b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003368:	605a      	str	r2, [r3, #4]
}
 800336a:	e024      	b.n	80033b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10e      	bne.n	8003392 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	b29b      	uxth	r3, r3
 800337a:	11db      	asrs	r3, r3, #7
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f063 030f 	orn	r3, r3, #15
 8003388:	b2da      	uxtb	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]
}
 8003390:	e011      	b.n	80033b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10d      	bne.n	80033b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	b29b      	uxth	r3, r3
 80033a0:	11db      	asrs	r3, r3, #7
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0306 	and.w	r3, r3, #6
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f063 030e 	orn	r3, r3, #14
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <I2C_Master_ADD10+0x26>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <I2C_Master_ADD10+0x48>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003408:	605a      	str	r2, [r3, #4]
  }
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003416:	b480      	push	{r7}
 8003418:	b091      	sub	sp, #68	; 0x44
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b22      	cmp	r3, #34	; 0x22
 800343e:	f040 8169 	bne.w	8003714 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <I2C_Master_ADDR+0x54>
 800344a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d10b      	bne.n	800346a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003452:	2300      	movs	r3, #0
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	633b      	str	r3, [r7, #48]	; 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	e160      	b.n	800372c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11d      	bne.n	80034ae <I2C_Master_ADDR+0x98>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800347a:	d118      	bne.n	80034ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	651a      	str	r2, [r3, #80]	; 0x50
 80034ac:	e13e      	b.n	800372c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d113      	bne.n	80034e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e115      	b.n	800370c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 808a 	bne.w	8003600 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034f2:	d137      	bne.n	8003564 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003502:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d113      	bne.n	800353c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003522:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	e0e7      	b.n	800370c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353c:	2300      	movs	r3, #0
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	623b      	str	r3, [r7, #32]
 8003550:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e0d3      	b.n	800370c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2b08      	cmp	r3, #8
 8003568:	d02e      	beq.n	80035c8 <I2C_Master_ADDR+0x1b2>
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2b20      	cmp	r3, #32
 800356e:	d02b      	beq.n	80035c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	2b12      	cmp	r3, #18
 8003574:	d102      	bne.n	800357c <I2C_Master_ADDR+0x166>
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	2b01      	cmp	r3, #1
 800357a:	d125      	bne.n	80035c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	2b04      	cmp	r3, #4
 8003580:	d00e      	beq.n	80035a0 <I2C_Master_ADDR+0x18a>
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	2b02      	cmp	r3, #2
 8003586:	d00b      	beq.n	80035a0 <I2C_Master_ADDR+0x18a>
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	2b10      	cmp	r3, #16
 800358c:	d008      	beq.n	80035a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e007      	b.n	80035b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	e0a1      	b.n	800370c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e085      	b.n	800370c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d14d      	bne.n	80036a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	2b04      	cmp	r3, #4
 800360e:	d016      	beq.n	800363e <I2C_Master_ADDR+0x228>
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	2b02      	cmp	r3, #2
 8003614:	d013      	beq.n	800363e <I2C_Master_ADDR+0x228>
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	2b10      	cmp	r3, #16
 800361a:	d010      	beq.n	800363e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e007      	b.n	800364e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800364c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365c:	d117      	bne.n	800368e <I2C_Master_ADDR+0x278>
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003664:	d00b      	beq.n	800367e <I2C_Master_ADDR+0x268>
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b01      	cmp	r3, #1
 800366a:	d008      	beq.n	800367e <I2C_Master_ADDR+0x268>
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b08      	cmp	r3, #8
 8003670:	d005      	beq.n	800367e <I2C_Master_ADDR+0x268>
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b10      	cmp	r3, #16
 8003676:	d002      	beq.n	800367e <I2C_Master_ADDR+0x268>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b20      	cmp	r3, #32
 800367c:	d107      	bne.n	800368e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800368c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	e032      	b.n	800370c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c4:	d117      	bne.n	80036f6 <I2C_Master_ADDR+0x2e0>
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036cc:	d00b      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d008      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d005      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d002      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d107      	bne.n	80036f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003712:	e00b      	b.n	800372c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
}
 800372a:	e7ff      	b.n	800372c <I2C_Master_ADDR+0x316>
 800372c:	bf00      	nop
 800372e:	3744      	adds	r7, #68	; 0x44
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02b      	beq.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d114      	bne.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b29      	cmp	r3, #41	; 0x29
 8003784:	d111      	bne.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2228      	movs	r2, #40	; 0x28
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fc ffaf 	bl	8000708 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d011      	beq.n	80037e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003802:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02c      	beq.n	8003868 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d114      	bne.n	8003868 <I2C_SlaveReceive_RXNE+0x74>
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b2a      	cmp	r3, #42	; 0x2a
 8003842:	d111      	bne.n	8003868 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003852:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2222      	movs	r2, #34	; 0x22
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2228      	movs	r2, #40	; 0x28
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fc ff0e 	bl	8000684 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ce:	2b28      	cmp	r3, #40	; 0x28
 80038d0:	d127      	bne.n	8003922 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	09db      	lsrs	r3, r3, #7
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	81bb      	strh	r3, [r7, #12]
 8003904:	e002      	b.n	800390c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003914:	89ba      	ldrh	r2, [r7, #12]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fc fe6a 	bl	80005f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003920:	e00e      	b.n	8003940 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003966:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a4:	d172      	bne.n	8003a8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b22      	cmp	r3, #34	; 0x22
 80039aa:	d002      	beq.n	80039b2 <I2C_Slave_STOPF+0x6a>
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b2a      	cmp	r3, #42	; 0x2a
 80039b0:	d135      	bne.n	8003a1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f043 0204 	orr.w	r2, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd fc9f 	bl	800132e <HAL_DMA_GetState>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d049      	beq.n	8003a8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	4a69      	ldr	r2, [pc, #420]	; (8003ba0 <I2C_Slave_STOPF+0x258>)
 80039fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fc71 	bl	80012ea <HAL_DMA_Abort_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03d      	beq.n	8003a8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a1c:	e035      	b.n	8003a8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fc69 	bl	800132e <HAL_DMA_GetState>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d014      	beq.n	8003a8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	4a4e      	ldr	r2, [pc, #312]	; (8003ba0 <I2C_Slave_STOPF+0x258>)
 8003a68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fc3b 	bl	80012ea <HAL_DMA_Abort_IT>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a84:	4610      	mov	r0, r2
 8003a86:	4798      	blx	r3
 8003a88:	e000      	b.n	8003a8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03e      	beq.n	8003b14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d112      	bne.n	8003aca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d112      	bne.n	8003afe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f8b3 	bl	8003c88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b22:	e039      	b.n	8003b98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b2a      	cmp	r3, #42	; 0x2a
 8003b28:	d109      	bne.n	8003b3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2228      	movs	r2, #40	; 0x28
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fc fda3 	bl	8000684 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b28      	cmp	r3, #40	; 0x28
 8003b48:	d111      	bne.n	8003b6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <I2C_Slave_STOPF+0x25c>)
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fc fd2c 	bl	80005c4 <HAL_I2C_ListenCpltCallback>
}
 8003b6c:	e014      	b.n	8003b98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	2b22      	cmp	r3, #34	; 0x22
 8003b74:	d002      	beq.n	8003b7c <I2C_Slave_STOPF+0x234>
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b22      	cmp	r3, #34	; 0x22
 8003b7a:	d10d      	bne.n	8003b98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc fd76 	bl	8000684 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	08004489 	.word	0x08004489
 8003ba4:	ffff0000 	.word	0xffff0000

08003ba8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d002      	beq.n	8003bca <I2C_Slave_AF+0x22>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d129      	bne.n	8003c1e <I2C_Slave_AF+0x76>
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b28      	cmp	r3, #40	; 0x28
 8003bce:	d126      	bne.n	8003c1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <I2C_Slave_AF+0xdc>)
 8003bd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003be4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc fcd4 	bl	80005c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003c1c:	e02e      	b.n	8003c7c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b21      	cmp	r3, #33	; 0x21
 8003c22:	d126      	bne.n	8003c72 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <I2C_Slave_AF+0xdc>)
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2221      	movs	r2, #33	; 0x21
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c68:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fc fd4c 	bl	8000708 <HAL_I2C_SlaveTxCpltCallback>
}
 8003c70:	e004      	b.n	8003c7c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c7a:	615a      	str	r2, [r3, #20]
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	ffff0000 	.word	0xffff0000

08003c88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d002      	beq.n	8003cac <I2C_ITError+0x24>
 8003ca6:	7bbb      	ldrb	r3, [r7, #14]
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d10a      	bne.n	8003cc2 <I2C_ITError+0x3a>
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b22      	cmp	r3, #34	; 0x22
 8003cb0:	d107      	bne.n	8003cc2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc8:	2b28      	cmp	r3, #40	; 0x28
 8003cca:	d107      	bne.n	8003cdc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2228      	movs	r2, #40	; 0x28
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cda:	e015      	b.n	8003d08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cea:	d00a      	beq.n	8003d02 <I2C_ITError+0x7a>
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b60      	cmp	r3, #96	; 0x60
 8003cf0:	d007      	beq.n	8003d02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d16:	d162      	bne.n	8003dde <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d020      	beq.n	8003d78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	4a6a      	ldr	r2, [pc, #424]	; (8003ee4 <I2C_ITError+0x25c>)
 8003d3c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fad1 	bl	80012ea <HAL_DMA_Abort_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8089 	beq.w	8003e62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d72:	4610      	mov	r0, r2
 8003d74:	4798      	blx	r3
 8003d76:	e074      	b.n	8003e62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	4a59      	ldr	r2, [pc, #356]	; (8003ee4 <I2C_ITError+0x25c>)
 8003d7e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fd fab0 	bl	80012ea <HAL_DMA_Abort_IT>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d068      	beq.n	8003e62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d10b      	bne.n	8003db6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4798      	blx	r3
 8003ddc:	e041      	b.n	8003e62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b60      	cmp	r3, #96	; 0x60
 8003de8:	d125      	bne.n	8003e36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d10b      	bne.n	8003e1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc fcc4 	bl	80007bc <HAL_I2C_AbortCpltCallback>
 8003e34:	e015      	b.n	8003e62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d10b      	bne.n	8003e5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fc fc81 	bl	8000764 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10e      	bne.n	8003e90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d113      	bne.n	8003edc <I2C_ITError+0x254>
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b28      	cmp	r3, #40	; 0x28
 8003eb8:	d110      	bne.n	8003edc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <I2C_ITError+0x260>)
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fc fb74 	bl	80005c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08004489 	.word	0x08004489
 8003ee8:	ffff0000 	.word	0xffff0000

08003eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d006      	beq.n	8003f16 <I2C_MasterRequestWrite+0x2a>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d003      	beq.n	8003f16 <I2C_MasterRequestWrite+0x2a>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f14:	d108      	bne.n	8003f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e00b      	b.n	8003f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	2b12      	cmp	r3, #18
 8003f2e:	d107      	bne.n	8003f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fb43 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	d103      	bne.n	8003f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e035      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7e:	897b      	ldrh	r3, [r7, #10]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	e01b      	b.n	8003fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	11db      	asrs	r3, r3, #7
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0306 	and.w	r3, r3, #6
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f063 030f 	orn	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <I2C_MasterRequestWrite+0xfc>)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fb69 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e010      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4907      	ldr	r1, [pc, #28]	; (8003fec <I2C_MasterRequestWrite+0x100>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fb59 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00010008 	.word	0x00010008
 8003fec:	00010002 	.word	0x00010002

08003ff0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004014:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d006      	beq.n	800402a <I2C_MasterRequestRead+0x3a>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d003      	beq.n	800402a <I2C_MasterRequestRead+0x3a>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004028:	d108      	bne.n	800403c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e00b      	b.n	8004054 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b11      	cmp	r3, #17
 8004042:	d107      	bne.n	8004054 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fab9 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d103      	bne.n	8004084 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e079      	b.n	800417c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004090:	d108      	bne.n	80040a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	e05f      	b.n	8004164 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a4:	897b      	ldrh	r3, [r7, #10]
 80040a6:	11db      	asrs	r3, r3, #7
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f063 030f 	orn	r3, r3, #15
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4930      	ldr	r1, [pc, #192]	; (8004184 <I2C_MasterRequestRead+0x194>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fadf 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e054      	b.n	800417c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4929      	ldr	r1, [pc, #164]	; (8004188 <I2C_MasterRequestRead+0x198>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 facf 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e044      	b.n	800417c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fa57 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d103      	bne.n	8004148 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e017      	b.n	800417c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800414c:	897b      	ldrh	r3, [r7, #10]
 800414e:	11db      	asrs	r3, r3, #7
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0306 	and.w	r3, r3, #6
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f063 030e 	orn	r3, r3, #14
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4907      	ldr	r1, [pc, #28]	; (8004188 <I2C_MasterRequestRead+0x198>)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fa8b 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	00010008 	.word	0x00010008
 8004188:	00010002 	.word	0x00010002

0800418c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	4608      	mov	r0, r1
 8004196:	4611      	mov	r1, r2
 8004198:	461a      	mov	r2, r3
 800419a:	4603      	mov	r3, r0
 800419c:	817b      	strh	r3, [r7, #10]
 800419e:	460b      	mov	r3, r1
 80041a0:	813b      	strh	r3, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	2200      	movs	r2, #0
 80041be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fa08 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041dc:	d103      	bne.n	80041e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e05f      	b.n	80042aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ea:	897b      	ldrh	r3, [r7, #10]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	492d      	ldr	r1, [pc, #180]	; (80042b4 <I2C_RequestMemoryWrite+0x128>)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fa40 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e04c      	b.n	80042aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004228:	6a39      	ldr	r1, [r7, #32]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 faaa 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e02b      	b.n	80042aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004258:	893b      	ldrh	r3, [r7, #8]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	611a      	str	r2, [r3, #16]
 8004262:	e021      	b.n	80042a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004264:	893b      	ldrh	r3, [r7, #8]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	b29b      	uxth	r3, r3
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fa84 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b04      	cmp	r3, #4
 8004288:	d107      	bne.n	800429a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e005      	b.n	80042aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800429e:	893b      	ldrh	r3, [r7, #8]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	00010002 	.word	0x00010002

080042b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	817b      	strh	r3, [r7, #10]
 80042ca:	460b      	mov	r3, r1
 80042cc:	813b      	strh	r3, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f96a 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004318:	d103      	bne.n	8004322 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e0aa      	b.n	800447c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	4952      	ldr	r1, [pc, #328]	; (8004484 <I2C_RequestMemoryRead+0x1cc>)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f9a2 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e097      	b.n	800447c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fa0c 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e076      	b.n	800447c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	e021      	b.n	80043e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043a0:	893b      	ldrh	r3, [r7, #8]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	6a39      	ldr	r1, [r7, #32]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f9e6 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d107      	bne.n	80043d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e050      	b.n	800447c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043da:	893b      	ldrh	r3, [r7, #8]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e6:	6a39      	ldr	r1, [r7, #32]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f9cb 	bl	8004784 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d107      	bne.n	800440c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e035      	b.n	800447c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2200      	movs	r2, #0
 8004428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f8d3 	bl	80045d8 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004446:	d103      	bne.n	8004450 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e013      	b.n	800447c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004454:	897b      	ldrh	r3, [r7, #10]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	4906      	ldr	r1, [pc, #24]	; (8004484 <I2C_RequestMemoryRead+0x1cc>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f90b 	bl	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	00010002 	.word	0x00010002

08004488 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044a2:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <I2C_DMAAbort+0x148>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	4a4a      	ldr	r2, [pc, #296]	; (80045d4 <I2C_DMAAbort+0x14c>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0a1a      	lsrs	r2, r3, #8
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00da      	lsls	r2, r3, #3
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80044ce:	e00a      	b.n	80044e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e4:	d0ea      	beq.n	80044bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	2200      	movs	r2, #0
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	2200      	movs	r2, #0
 8004504:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	2200      	movs	r2, #0
 800452a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	2200      	movs	r2, #0
 800453a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b60      	cmp	r3, #96	; 0x60
 8004556:	d10e      	bne.n	8004576 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800456e:	6978      	ldr	r0, [r7, #20]
 8004570:	f7fc f924 	bl	80007bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004574:	e027      	b.n	80045c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800457c:	2b28      	cmp	r3, #40	; 0x28
 800457e:	d117      	bne.n	80045b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2228      	movs	r2, #40	; 0x28
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045ae:	e007      	b.n	80045c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	f7fc f8cf 	bl	8000764 <HAL_I2C_ErrorCallback>
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000004 	.word	0x20000004
 80045d4:	14f8b589 	.word	0x14f8b589

080045d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e8:	e025      	b.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f0:	d021      	beq.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fc fd39 	bl	8001068 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d116      	bne.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e023      	b.n	800467e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10d      	bne.n	800465c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	43da      	mvns	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	e00c      	b.n	8004676 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	43da      	mvns	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d0b6      	beq.n	80045ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004694:	e051      	b.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d123      	bne.n	80046ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f043 0204 	orr.w	r2, r3, #4
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e046      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f4:	d021      	beq.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fc fcb7 	bl	8001068 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e020      	b.n	800477c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d10c      	bne.n	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e00b      	b.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	43da      	mvns	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4013      	ands	r3, r2
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d18d      	bne.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004790:	e02d      	b.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f900 	bl	8004998 <I2C_IsAcknowledgeFailed>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e02d      	b.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a8:	d021      	beq.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fc fc5d 	bl	8001068 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e007      	b.n	80047fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d1ca      	bne.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004812:	e02d      	b.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f8bf 	bl	8004998 <I2C_IsAcknowledgeFailed>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e02d      	b.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800482a:	d021      	beq.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482c:	f7fc fc1c 	bl	8001068 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e007      	b.n	8004880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d1ca      	bne.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	08db      	lsrs	r3, r3, #3
 800489a:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	0a1a      	lsrs	r2, r3, #8
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e008      	b.n	80048d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d0e9      	beq.n	80048aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	20000004 	.word	0x20000004
 80048e8:	14f8b589 	.word	0x14f8b589

080048ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048f8:	e042      	b.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b10      	cmp	r3, #16
 8004906:	d119      	bne.n	800493c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0210 	mvn.w	r2, #16
 8004910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e029      	b.n	8004990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493c:	f7fc fb94 	bl	8001068 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d116      	bne.n	8004980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e007      	b.n	8004990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d1b5      	bne.n	80048fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ae:	d11b      	bne.n	80049e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f043 0204 	orr.w	r2, r3, #4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a06:	d103      	bne.n	8004a10 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a0e:	e007      	b.n	8004a20 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a18:	d102      	bne.n	8004a20 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e264      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d075      	beq.n	8004b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a4a:	4ba3      	ldr	r3, [pc, #652]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d00c      	beq.n	8004a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a56:	4ba0      	ldr	r3, [pc, #640]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d112      	bne.n	8004a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a62:	4b9d      	ldr	r3, [pc, #628]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a6e:	d10b      	bne.n	8004a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	4b99      	ldr	r3, [pc, #612]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d05b      	beq.n	8004b34 <HAL_RCC_OscConfig+0x108>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d157      	bne.n	8004b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e23f      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x74>
 8004a92:	4b91      	ldr	r3, [pc, #580]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a90      	ldr	r2, [pc, #576]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e01d      	b.n	8004adc <HAL_RCC_OscConfig+0xb0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x98>
 8004aaa:	4b8b      	ldr	r3, [pc, #556]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a8a      	ldr	r2, [pc, #552]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	4b88      	ldr	r3, [pc, #544]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a87      	ldr	r2, [pc, #540]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e00b      	b.n	8004adc <HAL_RCC_OscConfig+0xb0>
 8004ac4:	4b84      	ldr	r3, [pc, #528]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a83      	ldr	r2, [pc, #524]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4b81      	ldr	r3, [pc, #516]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a80      	ldr	r2, [pc, #512]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d013      	beq.n	8004b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fc fac0 	bl	8001068 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fc fabc 	bl	8001068 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	; 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e204      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	4b76      	ldr	r3, [pc, #472]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0xc0>
 8004b0a:	e014      	b.n	8004b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fc faac 	bl	8001068 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b14:	f7fc faa8 	bl	8001068 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e1f0      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0xe8>
 8004b32:	e000      	b.n	8004b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d063      	beq.n	8004c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b42:	4b65      	ldr	r3, [pc, #404]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b4e:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d11c      	bne.n	8004b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b5a:	4b5f      	ldr	r3, [pc, #380]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d116      	bne.n	8004b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b66:	4b5c      	ldr	r3, [pc, #368]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_RCC_OscConfig+0x152>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d001      	beq.n	8004b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e1c4      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7e:	4b56      	ldr	r3, [pc, #344]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4952      	ldr	r1, [pc, #328]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b92:	e03a      	b.n	8004c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d020      	beq.n	8004bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b9c:	4b4f      	ldr	r3, [pc, #316]	; (8004cdc <HAL_RCC_OscConfig+0x2b0>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fa61 	bl	8001068 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004baa:	f7fc fa5d 	bl	8001068 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e1a5      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbc:	4b46      	ldr	r3, [pc, #280]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc8:	4b43      	ldr	r3, [pc, #268]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4940      	ldr	r1, [pc, #256]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]
 8004bdc:	e015      	b.n	8004c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bde:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_OscConfig+0x2b0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fc fa40 	bl	8001068 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bec:	f7fc fa3c 	bl	8001068 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e184      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d030      	beq.n	8004c78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1e:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <HAL_RCC_OscConfig+0x2b4>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fc fa20 	bl	8001068 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2c:	f7fc fa1c 	bl	8001068 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e164      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3e:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x200>
 8004c4a:	e015      	b.n	8004c78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c4c:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_RCC_OscConfig+0x2b4>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c52:	f7fc fa09 	bl	8001068 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c5a:	f7fc fa05 	bl	8001068 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e14d      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80a0 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCC_OscConfig+0x2b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d121      	bne.n	8004d06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <HAL_RCC_OscConfig+0x2b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <HAL_RCC_OscConfig+0x2b8>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7fc f9cb 	bl	8001068 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	e011      	b.n	8004cfa <HAL_RCC_OscConfig+0x2ce>
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	42470000 	.word	0x42470000
 8004ce0:	42470e80 	.word	0x42470e80
 8004ce4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce8:	f7fc f9be 	bl	8001068 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e106      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfa:	4b85      	ldr	r3, [pc, #532]	; (8004f10 <HAL_RCC_OscConfig+0x4e4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2f0>
 8004d0e:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	4a80      	ldr	r2, [pc, #512]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1a:	e01c      	b.n	8004d56 <HAL_RCC_OscConfig+0x32a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b05      	cmp	r3, #5
 8004d22:	d10c      	bne.n	8004d3e <HAL_RCC_OscConfig+0x312>
 8004d24:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	4a7a      	ldr	r2, [pc, #488]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d2a:	f043 0304 	orr.w	r3, r3, #4
 8004d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d30:	4b78      	ldr	r3, [pc, #480]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	4a77      	ldr	r2, [pc, #476]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3c:	e00b      	b.n	8004d56 <HAL_RCC_OscConfig+0x32a>
 8004d3e:	4b75      	ldr	r3, [pc, #468]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a74      	ldr	r2, [pc, #464]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4a:	4b72      	ldr	r3, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a71      	ldr	r2, [pc, #452]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d015      	beq.n	8004d8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fc f983 	bl	8001068 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fc f97f 	bl	8001068 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0c5      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ee      	beq.n	8004d66 <HAL_RCC_OscConfig+0x33a>
 8004d88:	e014      	b.n	8004db4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fc f96d 	bl	8001068 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fc f969 	bl	8001068 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e0af      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da8:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ee      	bne.n	8004d92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4b56      	ldr	r3, [pc, #344]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a55      	ldr	r2, [pc, #340]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 809b 	beq.w	8004f06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dd0:	4b50      	ldr	r3, [pc, #320]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 030c 	and.w	r3, r3, #12
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d05c      	beq.n	8004e96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d141      	bne.n	8004e68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de4:	4b4c      	ldr	r3, [pc, #304]	; (8004f18 <HAL_RCC_OscConfig+0x4ec>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dea:	f7fc f93d 	bl	8001068 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fc f939 	bl	8001068 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e081      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e04:	4b43      	ldr	r3, [pc, #268]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f0      	bne.n	8004df2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	019b      	lsls	r3, r3, #6
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	4937      	ldr	r1, [pc, #220]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e3a:	4b37      	ldr	r3, [pc, #220]	; (8004f18 <HAL_RCC_OscConfig+0x4ec>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fc f912 	bl	8001068 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fc f90e 	bl	8001068 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e056      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0x41c>
 8004e66:	e04e      	b.n	8004f06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e68:	4b2b      	ldr	r3, [pc, #172]	; (8004f18 <HAL_RCC_OscConfig+0x4ec>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6e:	f7fc f8fb 	bl	8001068 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e76:	f7fc f8f7 	bl	8001068 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e03f      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e88:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <HAL_RCC_OscConfig+0x44a>
 8004e94:	e037      	b.n	8004f06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e032      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <HAL_RCC_OscConfig+0x4e8>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d028      	beq.n	8004f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d121      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d11a      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ed8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d111      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40007000 	.word	0x40007000
 8004f14:	40023800 	.word	0x40023800
 8004f18:	42470060 	.word	0x42470060

08004f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0cc      	b.n	80050ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f30:	4b68      	ldr	r3, [pc, #416]	; (80050d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d90c      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b65      	ldr	r3, [pc, #404]	; (80050d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0b8      	b.n	80050ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f70:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a58      	ldr	r2, [pc, #352]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f88:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f94:	4b50      	ldr	r3, [pc, #320]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	494d      	ldr	r1, [pc, #308]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d044      	beq.n	800503c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d119      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e07f      	b.n	80050ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d003      	beq.n	8004fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d107      	bne.n	8004fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e06f      	b.n	80050ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fea:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e067      	b.n	80050ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ffa:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f023 0203 	bic.w	r2, r3, #3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4934      	ldr	r1, [pc, #208]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	4313      	orrs	r3, r2
 800500a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800500c:	f7fc f82c 	bl	8001068 <HAL_GetTick>
 8005010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	e00a      	b.n	800502a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005014:	f7fc f828 	bl	8001068 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e04f      	b.n	80050ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 020c 	and.w	r2, r3, #12
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	429a      	cmp	r2, r3
 800503a:	d1eb      	bne.n	8005014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800503c:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <HAL_RCC_ClockConfig+0x1b8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d20c      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504a:	4b22      	ldr	r3, [pc, #136]	; (80050d4 <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e032      	b.n	80050ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005070:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4916      	ldr	r1, [pc, #88]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	490e      	ldr	r1, [pc, #56]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050a2:	f000 f821 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	490a      	ldr	r1, [pc, #40]	; (80050dc <HAL_RCC_ClockConfig+0x1c0>)
 80050b4:	5ccb      	ldrb	r3, [r1, r3]
 80050b6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_ClockConfig+0x1c8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb ff8c 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40023c00 	.word	0x40023c00
 80050d8:	40023800 	.word	0x40023800
 80050dc:	08006b4c 	.word	0x08006b4c
 80050e0:	20000004 	.word	0x20000004
 80050e4:	20000008 	.word	0x20000008

080050e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050ee:	2100      	movs	r1, #0
 80050f0:	6079      	str	r1, [r7, #4]
 80050f2:	2100      	movs	r1, #0
 80050f4:	60f9      	str	r1, [r7, #12]
 80050f6:	2100      	movs	r1, #0
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050fa:	2100      	movs	r1, #0
 80050fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050fe:	4952      	ldr	r1, [pc, #328]	; (8005248 <HAL_RCC_GetSysClockFreq+0x160>)
 8005100:	6889      	ldr	r1, [r1, #8]
 8005102:	f001 010c 	and.w	r1, r1, #12
 8005106:	2908      	cmp	r1, #8
 8005108:	d00d      	beq.n	8005126 <HAL_RCC_GetSysClockFreq+0x3e>
 800510a:	2908      	cmp	r1, #8
 800510c:	f200 8094 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x150>
 8005110:	2900      	cmp	r1, #0
 8005112:	d002      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x32>
 8005114:	2904      	cmp	r1, #4
 8005116:	d003      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x38>
 8005118:	e08e      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800511a:	4b4c      	ldr	r3, [pc, #304]	; (800524c <HAL_RCC_GetSysClockFreq+0x164>)
 800511c:	60bb      	str	r3, [r7, #8]
       break;
 800511e:	e08e      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005120:	4b4b      	ldr	r3, [pc, #300]	; (8005250 <HAL_RCC_GetSysClockFreq+0x168>)
 8005122:	60bb      	str	r3, [r7, #8]
      break;
 8005124:	e08b      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005126:	4948      	ldr	r1, [pc, #288]	; (8005248 <HAL_RCC_GetSysClockFreq+0x160>)
 8005128:	6849      	ldr	r1, [r1, #4]
 800512a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800512e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005130:	4945      	ldr	r1, [pc, #276]	; (8005248 <HAL_RCC_GetSysClockFreq+0x160>)
 8005132:	6849      	ldr	r1, [r1, #4]
 8005134:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005138:	2900      	cmp	r1, #0
 800513a:	d024      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513c:	4942      	ldr	r1, [pc, #264]	; (8005248 <HAL_RCC_GetSysClockFreq+0x160>)
 800513e:	6849      	ldr	r1, [r1, #4]
 8005140:	0989      	lsrs	r1, r1, #6
 8005142:	4608      	mov	r0, r1
 8005144:	f04f 0100 	mov.w	r1, #0
 8005148:	f240 14ff 	movw	r4, #511	; 0x1ff
 800514c:	f04f 0500 	mov.w	r5, #0
 8005150:	ea00 0204 	and.w	r2, r0, r4
 8005154:	ea01 0305 	and.w	r3, r1, r5
 8005158:	493d      	ldr	r1, [pc, #244]	; (8005250 <HAL_RCC_GetSysClockFreq+0x168>)
 800515a:	fb01 f003 	mul.w	r0, r1, r3
 800515e:	2100      	movs	r1, #0
 8005160:	fb01 f102 	mul.w	r1, r1, r2
 8005164:	1844      	adds	r4, r0, r1
 8005166:	493a      	ldr	r1, [pc, #232]	; (8005250 <HAL_RCC_GetSysClockFreq+0x168>)
 8005168:	fba2 0101 	umull	r0, r1, r2, r1
 800516c:	1863      	adds	r3, r4, r1
 800516e:	4619      	mov	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	461a      	mov	r2, r3
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f7fb f882 	bl	8000280 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4613      	mov	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e04a      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005186:	4b30      	ldr	r3, [pc, #192]	; (8005248 <HAL_RCC_GetSysClockFreq+0x160>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	ea02 0400 	and.w	r4, r2, r0
 800519e:	ea03 0501 	and.w	r5, r3, r1
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	014b      	lsls	r3, r1, #5
 80051b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051b4:	0142      	lsls	r2, r0, #5
 80051b6:	4610      	mov	r0, r2
 80051b8:	4619      	mov	r1, r3
 80051ba:	1b00      	subs	r0, r0, r4
 80051bc:	eb61 0105 	sbc.w	r1, r1, r5
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	018b      	lsls	r3, r1, #6
 80051ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051ce:	0182      	lsls	r2, r0, #6
 80051d0:	1a12      	subs	r2, r2, r0
 80051d2:	eb63 0301 	sbc.w	r3, r3, r1
 80051d6:	f04f 0000 	mov.w	r0, #0
 80051da:	f04f 0100 	mov.w	r1, #0
 80051de:	00d9      	lsls	r1, r3, #3
 80051e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e4:	00d0      	lsls	r0, r2, #3
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	1912      	adds	r2, r2, r4
 80051ec:	eb45 0303 	adc.w	r3, r5, r3
 80051f0:	f04f 0000 	mov.w	r0, #0
 80051f4:	f04f 0100 	mov.w	r1, #0
 80051f8:	0299      	lsls	r1, r3, #10
 80051fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051fe:	0290      	lsls	r0, r2, #10
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	461a      	mov	r2, r3
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	f7fb f836 	bl	8000280 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_GetSysClockFreq+0x160>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	60bb      	str	r3, [r7, #8]
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <HAL_RCC_GetSysClockFreq+0x164>)
 800523a:	60bb      	str	r3, [r7, #8]
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	68bb      	ldr	r3, [r7, #8]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bdb0      	pop	{r4, r5, r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	00f42400 	.word	0x00f42400
 8005250:	017d7840 	.word	0x017d7840

08005254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <HAL_RCC_GetHCLKFreq+0x14>)
 800525a:	681b      	ldr	r3, [r3, #0]
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000004 	.word	0x20000004

0800526c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005270:	f7ff fff0 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0a9b      	lsrs	r3, r3, #10
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4903      	ldr	r1, [pc, #12]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40023800 	.word	0x40023800
 8005290:	08006b5c 	.word	0x08006b5c

08005294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005298:	f7ff ffdc 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0b5b      	lsrs	r3, r3, #13
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	08006b5c 	.word	0x08006b5c

080052bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e03f      	b.n	800534e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fb fd10 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	; 0x24
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f929 	bl	8005558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b08a      	sub	sp, #40	; 0x28
 800535a:	af02      	add	r7, sp, #8
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b20      	cmp	r3, #32
 8005374:	d17c      	bne.n	8005470 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_UART_Transmit+0x2c>
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e075      	b.n	8005472 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_UART_Transmit+0x3e>
 8005390:	2302      	movs	r3, #2
 8005392:	e06e      	b.n	8005472 <HAL_UART_Transmit+0x11c>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2221      	movs	r2, #33	; 0x21
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053aa:	f7fb fe5d 	bl	8001068 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d108      	bne.n	80053d8 <HAL_UART_Transmit+0x82>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e003      	b.n	80053e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053e8:	e02a      	b.n	8005440 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f840 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e036      	b.n	8005472 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3302      	adds	r3, #2
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e007      	b.n	8005432 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	3301      	adds	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1cf      	bne.n	80053ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2140      	movs	r1, #64	; 0x40
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f810 	bl	800547a <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e006      	b.n	8005472 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	e000      	b.n	8005472 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005470:	2302      	movs	r3, #2
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b090      	sub	sp, #64	; 0x40
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548a:	e050      	b.n	800552e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005492:	d04c      	beq.n	800552e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <UART_WaitOnFlagUntilTimeout+0x30>
 800549a:	f7fb fde5 	bl	8001068 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d241      	bcs.n	800552e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	330c      	adds	r3, #12
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054ca:	637a      	str	r2, [r7, #52]	; 0x34
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e5      	bne.n	80054aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	613b      	str	r3, [r7, #16]
   return(result);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3314      	adds	r3, #20
 80054fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054fe:	623a      	str	r2, [r7, #32]
 8005500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	69f9      	ldr	r1, [r7, #28]
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	61bb      	str	r3, [r7, #24]
   return(result);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e00f      	b.n	800554e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	429a      	cmp	r2, r3
 800553c:	bf0c      	ite	eq
 800553e:	2301      	moveq	r3, #1
 8005540:	2300      	movne	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	429a      	cmp	r2, r3
 800554a:	d09f      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3740      	adds	r7, #64	; 0x40
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	b09f      	sub	sp, #124	; 0x7c
 800555e:	af00      	add	r7, sp, #0
 8005560:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	68d9      	ldr	r1, [r3, #12]
 8005570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	ea40 0301 	orr.w	r3, r0, r1
 8005578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	431a      	orrs	r2, r3
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	431a      	orrs	r2, r3
 800558a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	4313      	orrs	r3, r2
 8005590:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800559c:	f021 010c 	bic.w	r1, r1, #12
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a6:	430b      	orrs	r3, r1
 80055a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b6:	6999      	ldr	r1, [r3, #24]
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	ea40 0301 	orr.w	r3, r0, r1
 80055c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4bc5      	ldr	r3, [pc, #788]	; (80058dc <UART_SetConfig+0x384>)
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d004      	beq.n	80055d6 <UART_SetConfig+0x7e>
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4bc3      	ldr	r3, [pc, #780]	; (80058e0 <UART_SetConfig+0x388>)
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d103      	bne.n	80055de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055d6:	f7ff fe5d 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 80055da:	6778      	str	r0, [r7, #116]	; 0x74
 80055dc:	e002      	b.n	80055e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055de:	f7ff fe45 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 80055e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	f040 80b6 	bne.w	800575c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f2:	461c      	mov	r4, r3
 80055f4:	f04f 0500 	mov.w	r5, #0
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	1891      	adds	r1, r2, r2
 80055fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005600:	415b      	adcs	r3, r3
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
 8005604:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005608:	1912      	adds	r2, r2, r4
 800560a:	eb45 0303 	adc.w	r3, r5, r3
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	00d9      	lsls	r1, r3, #3
 8005618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800561c:	00d0      	lsls	r0, r2, #3
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	1911      	adds	r1, r2, r4
 8005624:	6639      	str	r1, [r7, #96]	; 0x60
 8005626:	416b      	adcs	r3, r5
 8005628:	667b      	str	r3, [r7, #100]	; 0x64
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	461a      	mov	r2, r3
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	1891      	adds	r1, r2, r2
 8005636:	63b9      	str	r1, [r7, #56]	; 0x38
 8005638:	415b      	adcs	r3, r3
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005640:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005644:	f7fa fe1c 	bl	8000280 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4ba5      	ldr	r3, [pc, #660]	; (80058e4 <UART_SetConfig+0x38c>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	011e      	lsls	r6, r3, #4
 8005656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005658:	461c      	mov	r4, r3
 800565a:	f04f 0500 	mov.w	r5, #0
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	1891      	adds	r1, r2, r2
 8005664:	6339      	str	r1, [r7, #48]	; 0x30
 8005666:	415b      	adcs	r3, r3
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800566e:	1912      	adds	r2, r2, r4
 8005670:	eb45 0303 	adc.w	r3, r5, r3
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	00d9      	lsls	r1, r3, #3
 800567e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005682:	00d0      	lsls	r0, r2, #3
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	1911      	adds	r1, r2, r4
 800568a:	65b9      	str	r1, [r7, #88]	; 0x58
 800568c:	416b      	adcs	r3, r5
 800568e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	461a      	mov	r2, r3
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	1891      	adds	r1, r2, r2
 800569c:	62b9      	str	r1, [r7, #40]	; 0x28
 800569e:	415b      	adcs	r3, r3
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056aa:	f7fa fde9 	bl	8000280 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b8c      	ldr	r3, [pc, #560]	; (80058e4 <UART_SetConfig+0x38c>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a87      	ldr	r2, [pc, #540]	; (80058e4 <UART_SetConfig+0x38c>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056d4:	441e      	add	r6, r3
 80056d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d8:	4618      	mov	r0, r3
 80056da:	f04f 0100 	mov.w	r1, #0
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	1894      	adds	r4, r2, r2
 80056e4:	623c      	str	r4, [r7, #32]
 80056e6:	415b      	adcs	r3, r3
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ee:	1812      	adds	r2, r2, r0
 80056f0:	eb41 0303 	adc.w	r3, r1, r3
 80056f4:	f04f 0400 	mov.w	r4, #0
 80056f8:	f04f 0500 	mov.w	r5, #0
 80056fc:	00dd      	lsls	r5, r3, #3
 80056fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005702:	00d4      	lsls	r4, r2, #3
 8005704:	4622      	mov	r2, r4
 8005706:	462b      	mov	r3, r5
 8005708:	1814      	adds	r4, r2, r0
 800570a:	653c      	str	r4, [r7, #80]	; 0x50
 800570c:	414b      	adcs	r3, r1
 800570e:	657b      	str	r3, [r7, #84]	; 0x54
 8005710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	461a      	mov	r2, r3
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	1891      	adds	r1, r2, r2
 800571c:	61b9      	str	r1, [r7, #24]
 800571e:	415b      	adcs	r3, r3
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005726:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800572a:	f7fa fda9 	bl	8000280 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4b6c      	ldr	r3, [pc, #432]	; (80058e4 <UART_SetConfig+0x38c>)
 8005734:	fba3 1302 	umull	r1, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	2164      	movs	r1, #100	; 0x64
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	3332      	adds	r3, #50	; 0x32
 8005746:	4a67      	ldr	r2, [pc, #412]	; (80058e4 <UART_SetConfig+0x38c>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f003 0207 	and.w	r2, r3, #7
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4432      	add	r2, r6
 8005758:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800575a:	e0b9      	b.n	80058d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800575c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575e:	461c      	mov	r4, r3
 8005760:	f04f 0500 	mov.w	r5, #0
 8005764:	4622      	mov	r2, r4
 8005766:	462b      	mov	r3, r5
 8005768:	1891      	adds	r1, r2, r2
 800576a:	6139      	str	r1, [r7, #16]
 800576c:	415b      	adcs	r3, r3
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005774:	1912      	adds	r2, r2, r4
 8005776:	eb45 0303 	adc.w	r3, r5, r3
 800577a:	f04f 0000 	mov.w	r0, #0
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	00d9      	lsls	r1, r3, #3
 8005784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005788:	00d0      	lsls	r0, r2, #3
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	eb12 0804 	adds.w	r8, r2, r4
 8005792:	eb43 0905 	adc.w	r9, r3, r5
 8005796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	f04f 0100 	mov.w	r1, #0
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057ae:	0082      	lsls	r2, r0, #2
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f7fa fd64 	bl	8000280 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4b49      	ldr	r3, [pc, #292]	; (80058e4 <UART_SetConfig+0x38c>)
 80057be:	fba3 2302 	umull	r2, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	011e      	lsls	r6, r3, #4
 80057c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c8:	4618      	mov	r0, r3
 80057ca:	f04f 0100 	mov.w	r1, #0
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	1894      	adds	r4, r2, r2
 80057d4:	60bc      	str	r4, [r7, #8]
 80057d6:	415b      	adcs	r3, r3
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057de:	1812      	adds	r2, r2, r0
 80057e0:	eb41 0303 	adc.w	r3, r1, r3
 80057e4:	f04f 0400 	mov.w	r4, #0
 80057e8:	f04f 0500 	mov.w	r5, #0
 80057ec:	00dd      	lsls	r5, r3, #3
 80057ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057f2:	00d4      	lsls	r4, r2, #3
 80057f4:	4622      	mov	r2, r4
 80057f6:	462b      	mov	r3, r5
 80057f8:	1814      	adds	r4, r2, r0
 80057fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80057fc:	414b      	adcs	r3, r1
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	008b      	lsls	r3, r1, #2
 8005814:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005818:	0082      	lsls	r2, r0, #2
 800581a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800581e:	f7fa fd2f 	bl	8000280 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <UART_SetConfig+0x38c>)
 8005828:	fba3 1302 	umull	r1, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2164      	movs	r1, #100	; 0x64
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	3332      	adds	r3, #50	; 0x32
 800583a:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <UART_SetConfig+0x38c>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005846:	441e      	add	r6, r3
 8005848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584a:	4618      	mov	r0, r3
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	1894      	adds	r4, r2, r2
 8005856:	603c      	str	r4, [r7, #0]
 8005858:	415b      	adcs	r3, r3
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005860:	1812      	adds	r2, r2, r0
 8005862:	eb41 0303 	adc.w	r3, r1, r3
 8005866:	f04f 0400 	mov.w	r4, #0
 800586a:	f04f 0500 	mov.w	r5, #0
 800586e:	00dd      	lsls	r5, r3, #3
 8005870:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005874:	00d4      	lsls	r4, r2, #3
 8005876:	4622      	mov	r2, r4
 8005878:	462b      	mov	r3, r5
 800587a:	eb12 0a00 	adds.w	sl, r2, r0
 800587e:	eb43 0b01 	adc.w	fp, r3, r1
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	008b      	lsls	r3, r1, #2
 8005896:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800589a:	0082      	lsls	r2, r0, #2
 800589c:	4650      	mov	r0, sl
 800589e:	4659      	mov	r1, fp
 80058a0:	f7fa fcee 	bl	8000280 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <UART_SetConfig+0x38c>)
 80058aa:	fba3 1302 	umull	r1, r3, r3, r2
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	2164      	movs	r1, #100	; 0x64
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	3332      	adds	r3, #50	; 0x32
 80058bc:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <UART_SetConfig+0x38c>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	f003 020f 	and.w	r2, r3, #15
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4432      	add	r2, r6
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	377c      	adds	r7, #124	; 0x7c
 80058d4:	46bd      	mov	sp, r7
 80058d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058da:	bf00      	nop
 80058dc:	40011000 	.word	0x40011000
 80058e0:	40011400 	.word	0x40011400
 80058e4:	51eb851f 	.word	0x51eb851f

080058e8 <__errno>:
 80058e8:	4b01      	ldr	r3, [pc, #4]	; (80058f0 <__errno+0x8>)
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000010 	.word	0x20000010

080058f4 <__libc_init_array>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4d0d      	ldr	r5, [pc, #52]	; (800592c <__libc_init_array+0x38>)
 80058f8:	4c0d      	ldr	r4, [pc, #52]	; (8005930 <__libc_init_array+0x3c>)
 80058fa:	1b64      	subs	r4, r4, r5
 80058fc:	10a4      	asrs	r4, r4, #2
 80058fe:	2600      	movs	r6, #0
 8005900:	42a6      	cmp	r6, r4
 8005902:	d109      	bne.n	8005918 <__libc_init_array+0x24>
 8005904:	4d0b      	ldr	r5, [pc, #44]	; (8005934 <__libc_init_array+0x40>)
 8005906:	4c0c      	ldr	r4, [pc, #48]	; (8005938 <__libc_init_array+0x44>)
 8005908:	f000 ffd4 	bl	80068b4 <_init>
 800590c:	1b64      	subs	r4, r4, r5
 800590e:	10a4      	asrs	r4, r4, #2
 8005910:	2600      	movs	r6, #0
 8005912:	42a6      	cmp	r6, r4
 8005914:	d105      	bne.n	8005922 <__libc_init_array+0x2e>
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	f855 3b04 	ldr.w	r3, [r5], #4
 800591c:	4798      	blx	r3
 800591e:	3601      	adds	r6, #1
 8005920:	e7ee      	b.n	8005900 <__libc_init_array+0xc>
 8005922:	f855 3b04 	ldr.w	r3, [r5], #4
 8005926:	4798      	blx	r3
 8005928:	3601      	adds	r6, #1
 800592a:	e7f2      	b.n	8005912 <__libc_init_array+0x1e>
 800592c:	08006c04 	.word	0x08006c04
 8005930:	08006c04 	.word	0x08006c04
 8005934:	08006c04 	.word	0x08006c04
 8005938:	08006c08 	.word	0x08006c08

0800593c <memset>:
 800593c:	4402      	add	r2, r0
 800593e:	4603      	mov	r3, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <iprintf>:
 800594c:	b40f      	push	{r0, r1, r2, r3}
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <iprintf+0x2c>)
 8005950:	b513      	push	{r0, r1, r4, lr}
 8005952:	681c      	ldr	r4, [r3, #0]
 8005954:	b124      	cbz	r4, 8005960 <iprintf+0x14>
 8005956:	69a3      	ldr	r3, [r4, #24]
 8005958:	b913      	cbnz	r3, 8005960 <iprintf+0x14>
 800595a:	4620      	mov	r0, r4
 800595c:	f000 f87c 	bl	8005a58 <__sinit>
 8005960:	ab05      	add	r3, sp, #20
 8005962:	9a04      	ldr	r2, [sp, #16]
 8005964:	68a1      	ldr	r1, [r4, #8]
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f999 	bl	8005ca0 <_vfiprintf_r>
 800596e:	b002      	add	sp, #8
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	b004      	add	sp, #16
 8005976:	4770      	bx	lr
 8005978:	20000010 	.word	0x20000010

0800597c <putchar>:
 800597c:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <putchar+0x28>)
 800597e:	b513      	push	{r0, r1, r4, lr}
 8005980:	681c      	ldr	r4, [r3, #0]
 8005982:	4601      	mov	r1, r0
 8005984:	b134      	cbz	r4, 8005994 <putchar+0x18>
 8005986:	69a3      	ldr	r3, [r4, #24]
 8005988:	b923      	cbnz	r3, 8005994 <putchar+0x18>
 800598a:	9001      	str	r0, [sp, #4]
 800598c:	4620      	mov	r0, r4
 800598e:	f000 f863 	bl	8005a58 <__sinit>
 8005992:	9901      	ldr	r1, [sp, #4]
 8005994:	68a2      	ldr	r2, [r4, #8]
 8005996:	4620      	mov	r0, r4
 8005998:	b002      	add	sp, #8
 800599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599e:	f000 bc43 	b.w	8006228 <_putc_r>
 80059a2:	bf00      	nop
 80059a4:	20000010 	.word	0x20000010

080059a8 <std>:
 80059a8:	2300      	movs	r3, #0
 80059aa:	b510      	push	{r4, lr}
 80059ac:	4604      	mov	r4, r0
 80059ae:	e9c0 3300 	strd	r3, r3, [r0]
 80059b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059b6:	6083      	str	r3, [r0, #8]
 80059b8:	8181      	strh	r1, [r0, #12]
 80059ba:	6643      	str	r3, [r0, #100]	; 0x64
 80059bc:	81c2      	strh	r2, [r0, #14]
 80059be:	6183      	str	r3, [r0, #24]
 80059c0:	4619      	mov	r1, r3
 80059c2:	2208      	movs	r2, #8
 80059c4:	305c      	adds	r0, #92	; 0x5c
 80059c6:	f7ff ffb9 	bl	800593c <memset>
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <std+0x38>)
 80059cc:	6263      	str	r3, [r4, #36]	; 0x24
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <std+0x3c>)
 80059d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <std+0x40>)
 80059d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <std+0x44>)
 80059d8:	6224      	str	r4, [r4, #32]
 80059da:	6323      	str	r3, [r4, #48]	; 0x30
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	bf00      	nop
 80059e0:	080062d9 	.word	0x080062d9
 80059e4:	080062fb 	.word	0x080062fb
 80059e8:	08006333 	.word	0x08006333
 80059ec:	08006357 	.word	0x08006357

080059f0 <_cleanup_r>:
 80059f0:	4901      	ldr	r1, [pc, #4]	; (80059f8 <_cleanup_r+0x8>)
 80059f2:	f000 b8af 	b.w	8005b54 <_fwalk_reent>
 80059f6:	bf00      	nop
 80059f8:	08006631 	.word	0x08006631

080059fc <__sfmoreglue>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	1e4a      	subs	r2, r1, #1
 8005a00:	2568      	movs	r5, #104	; 0x68
 8005a02:	4355      	muls	r5, r2
 8005a04:	460e      	mov	r6, r1
 8005a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a0a:	f000 f8c5 	bl	8005b98 <_malloc_r>
 8005a0e:	4604      	mov	r4, r0
 8005a10:	b140      	cbz	r0, 8005a24 <__sfmoreglue+0x28>
 8005a12:	2100      	movs	r1, #0
 8005a14:	e9c0 1600 	strd	r1, r6, [r0]
 8005a18:	300c      	adds	r0, #12
 8005a1a:	60a0      	str	r0, [r4, #8]
 8005a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a20:	f7ff ff8c 	bl	800593c <memset>
 8005a24:	4620      	mov	r0, r4
 8005a26:	bd70      	pop	{r4, r5, r6, pc}

08005a28 <__sfp_lock_acquire>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__sfp_lock_acquire+0x8>)
 8005a2a:	f000 b8b3 	b.w	8005b94 <__retarget_lock_acquire_recursive>
 8005a2e:	bf00      	nop
 8005a30:	200002c0 	.word	0x200002c0

08005a34 <__sfp_lock_release>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__sfp_lock_release+0x8>)
 8005a36:	f000 b8ae 	b.w	8005b96 <__retarget_lock_release_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	200002c0 	.word	0x200002c0

08005a40 <__sinit_lock_acquire>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__sinit_lock_acquire+0x8>)
 8005a42:	f000 b8a7 	b.w	8005b94 <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	200002bb 	.word	0x200002bb

08005a4c <__sinit_lock_release>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <__sinit_lock_release+0x8>)
 8005a4e:	f000 b8a2 	b.w	8005b96 <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	200002bb 	.word	0x200002bb

08005a58 <__sinit>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	f7ff fff0 	bl	8005a40 <__sinit_lock_acquire>
 8005a60:	69a3      	ldr	r3, [r4, #24]
 8005a62:	b11b      	cbz	r3, 8005a6c <__sinit+0x14>
 8005a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a68:	f7ff bff0 	b.w	8005a4c <__sinit_lock_release>
 8005a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a70:	6523      	str	r3, [r4, #80]	; 0x50
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <__sinit+0x68>)
 8005a74:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <__sinit+0x6c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a7a:	42a3      	cmp	r3, r4
 8005a7c:	bf04      	itt	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	61a3      	streq	r3, [r4, #24]
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f820 	bl	8005ac8 <__sfp>
 8005a88:	6060      	str	r0, [r4, #4]
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f81c 	bl	8005ac8 <__sfp>
 8005a90:	60a0      	str	r0, [r4, #8]
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 f818 	bl	8005ac8 <__sfp>
 8005a98:	2200      	movs	r2, #0
 8005a9a:	60e0      	str	r0, [r4, #12]
 8005a9c:	2104      	movs	r1, #4
 8005a9e:	6860      	ldr	r0, [r4, #4]
 8005aa0:	f7ff ff82 	bl	80059a8 <std>
 8005aa4:	68a0      	ldr	r0, [r4, #8]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	2109      	movs	r1, #9
 8005aaa:	f7ff ff7d 	bl	80059a8 <std>
 8005aae:	68e0      	ldr	r0, [r4, #12]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	2112      	movs	r1, #18
 8005ab4:	f7ff ff78 	bl	80059a8 <std>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	61a3      	str	r3, [r4, #24]
 8005abc:	e7d2      	b.n	8005a64 <__sinit+0xc>
 8005abe:	bf00      	nop
 8005ac0:	08006b64 	.word	0x08006b64
 8005ac4:	080059f1 	.word	0x080059f1

08005ac8 <__sfp>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	4607      	mov	r7, r0
 8005acc:	f7ff ffac 	bl	8005a28 <__sfp_lock_acquire>
 8005ad0:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <__sfp+0x84>)
 8005ad2:	681e      	ldr	r6, [r3, #0]
 8005ad4:	69b3      	ldr	r3, [r6, #24]
 8005ad6:	b913      	cbnz	r3, 8005ade <__sfp+0x16>
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f7ff ffbd 	bl	8005a58 <__sinit>
 8005ade:	3648      	adds	r6, #72	; 0x48
 8005ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	d503      	bpl.n	8005af0 <__sfp+0x28>
 8005ae8:	6833      	ldr	r3, [r6, #0]
 8005aea:	b30b      	cbz	r3, 8005b30 <__sfp+0x68>
 8005aec:	6836      	ldr	r6, [r6, #0]
 8005aee:	e7f7      	b.n	8005ae0 <__sfp+0x18>
 8005af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005af4:	b9d5      	cbnz	r5, 8005b2c <__sfp+0x64>
 8005af6:	4b16      	ldr	r3, [pc, #88]	; (8005b50 <__sfp+0x88>)
 8005af8:	60e3      	str	r3, [r4, #12]
 8005afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005afe:	6665      	str	r5, [r4, #100]	; 0x64
 8005b00:	f000 f847 	bl	8005b92 <__retarget_lock_init_recursive>
 8005b04:	f7ff ff96 	bl	8005a34 <__sfp_lock_release>
 8005b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b10:	6025      	str	r5, [r4, #0]
 8005b12:	61a5      	str	r5, [r4, #24]
 8005b14:	2208      	movs	r2, #8
 8005b16:	4629      	mov	r1, r5
 8005b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b1c:	f7ff ff0e 	bl	800593c <memset>
 8005b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b28:	4620      	mov	r0, r4
 8005b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2c:	3468      	adds	r4, #104	; 0x68
 8005b2e:	e7d9      	b.n	8005ae4 <__sfp+0x1c>
 8005b30:	2104      	movs	r1, #4
 8005b32:	4638      	mov	r0, r7
 8005b34:	f7ff ff62 	bl	80059fc <__sfmoreglue>
 8005b38:	4604      	mov	r4, r0
 8005b3a:	6030      	str	r0, [r6, #0]
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d1d5      	bne.n	8005aec <__sfp+0x24>
 8005b40:	f7ff ff78 	bl	8005a34 <__sfp_lock_release>
 8005b44:	230c      	movs	r3, #12
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	e7ee      	b.n	8005b28 <__sfp+0x60>
 8005b4a:	bf00      	nop
 8005b4c:	08006b64 	.word	0x08006b64
 8005b50:	ffff0001 	.word	0xffff0001

08005b54 <_fwalk_reent>:
 8005b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b58:	4606      	mov	r6, r0
 8005b5a:	4688      	mov	r8, r1
 8005b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b60:	2700      	movs	r7, #0
 8005b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b66:	f1b9 0901 	subs.w	r9, r9, #1
 8005b6a:	d505      	bpl.n	8005b78 <_fwalk_reent+0x24>
 8005b6c:	6824      	ldr	r4, [r4, #0]
 8005b6e:	2c00      	cmp	r4, #0
 8005b70:	d1f7      	bne.n	8005b62 <_fwalk_reent+0xe>
 8005b72:	4638      	mov	r0, r7
 8005b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b78:	89ab      	ldrh	r3, [r5, #12]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d907      	bls.n	8005b8e <_fwalk_reent+0x3a>
 8005b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b82:	3301      	adds	r3, #1
 8005b84:	d003      	beq.n	8005b8e <_fwalk_reent+0x3a>
 8005b86:	4629      	mov	r1, r5
 8005b88:	4630      	mov	r0, r6
 8005b8a:	47c0      	blx	r8
 8005b8c:	4307      	orrs	r7, r0
 8005b8e:	3568      	adds	r5, #104	; 0x68
 8005b90:	e7e9      	b.n	8005b66 <_fwalk_reent+0x12>

08005b92 <__retarget_lock_init_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <__retarget_lock_acquire_recursive>:
 8005b94:	4770      	bx	lr

08005b96 <__retarget_lock_release_recursive>:
 8005b96:	4770      	bx	lr

08005b98 <_malloc_r>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	1ccd      	adds	r5, r1, #3
 8005b9c:	f025 0503 	bic.w	r5, r5, #3
 8005ba0:	3508      	adds	r5, #8
 8005ba2:	2d0c      	cmp	r5, #12
 8005ba4:	bf38      	it	cc
 8005ba6:	250c      	movcc	r5, #12
 8005ba8:	2d00      	cmp	r5, #0
 8005baa:	4606      	mov	r6, r0
 8005bac:	db01      	blt.n	8005bb2 <_malloc_r+0x1a>
 8005bae:	42a9      	cmp	r1, r5
 8005bb0:	d903      	bls.n	8005bba <_malloc_r+0x22>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	6033      	str	r3, [r6, #0]
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bba:	f000 fdeb 	bl	8006794 <__malloc_lock>
 8005bbe:	4921      	ldr	r1, [pc, #132]	; (8005c44 <_malloc_r+0xac>)
 8005bc0:	680a      	ldr	r2, [r1, #0]
 8005bc2:	4614      	mov	r4, r2
 8005bc4:	b99c      	cbnz	r4, 8005bee <_malloc_r+0x56>
 8005bc6:	4f20      	ldr	r7, [pc, #128]	; (8005c48 <_malloc_r+0xb0>)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	b923      	cbnz	r3, 8005bd6 <_malloc_r+0x3e>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f000 fb72 	bl	80062b8 <_sbrk_r>
 8005bd4:	6038      	str	r0, [r7, #0]
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f000 fb6d 	bl	80062b8 <_sbrk_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	d123      	bne.n	8005c2a <_malloc_r+0x92>
 8005be2:	230c      	movs	r3, #12
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	4630      	mov	r0, r6
 8005be8:	f000 fdda 	bl	80067a0 <__malloc_unlock>
 8005bec:	e7e3      	b.n	8005bb6 <_malloc_r+0x1e>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	1b5b      	subs	r3, r3, r5
 8005bf2:	d417      	bmi.n	8005c24 <_malloc_r+0x8c>
 8005bf4:	2b0b      	cmp	r3, #11
 8005bf6:	d903      	bls.n	8005c00 <_malloc_r+0x68>
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	441c      	add	r4, r3
 8005bfc:	6025      	str	r5, [r4, #0]
 8005bfe:	e004      	b.n	8005c0a <_malloc_r+0x72>
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	42a2      	cmp	r2, r4
 8005c04:	bf0c      	ite	eq
 8005c06:	600b      	streq	r3, [r1, #0]
 8005c08:	6053      	strne	r3, [r2, #4]
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f000 fdc8 	bl	80067a0 <__malloc_unlock>
 8005c10:	f104 000b 	add.w	r0, r4, #11
 8005c14:	1d23      	adds	r3, r4, #4
 8005c16:	f020 0007 	bic.w	r0, r0, #7
 8005c1a:	1ac2      	subs	r2, r0, r3
 8005c1c:	d0cc      	beq.n	8005bb8 <_malloc_r+0x20>
 8005c1e:	1a1b      	subs	r3, r3, r0
 8005c20:	50a3      	str	r3, [r4, r2]
 8005c22:	e7c9      	b.n	8005bb8 <_malloc_r+0x20>
 8005c24:	4622      	mov	r2, r4
 8005c26:	6864      	ldr	r4, [r4, #4]
 8005c28:	e7cc      	b.n	8005bc4 <_malloc_r+0x2c>
 8005c2a:	1cc4      	adds	r4, r0, #3
 8005c2c:	f024 0403 	bic.w	r4, r4, #3
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d0e3      	beq.n	8005bfc <_malloc_r+0x64>
 8005c34:	1a21      	subs	r1, r4, r0
 8005c36:	4630      	mov	r0, r6
 8005c38:	f000 fb3e 	bl	80062b8 <_sbrk_r>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d1dd      	bne.n	8005bfc <_malloc_r+0x64>
 8005c40:	e7cf      	b.n	8005be2 <_malloc_r+0x4a>
 8005c42:	bf00      	nop
 8005c44:	200001c0 	.word	0x200001c0
 8005c48:	200001c4 	.word	0x200001c4

08005c4c <__sfputc_r>:
 8005c4c:	6893      	ldr	r3, [r2, #8]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	b410      	push	{r4}
 8005c54:	6093      	str	r3, [r2, #8]
 8005c56:	da08      	bge.n	8005c6a <__sfputc_r+0x1e>
 8005c58:	6994      	ldr	r4, [r2, #24]
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	db01      	blt.n	8005c62 <__sfputc_r+0x16>
 8005c5e:	290a      	cmp	r1, #10
 8005c60:	d103      	bne.n	8005c6a <__sfputc_r+0x1e>
 8005c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c66:	f000 bb7b 	b.w	8006360 <__swbuf_r>
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	1c58      	adds	r0, r3, #1
 8005c6e:	6010      	str	r0, [r2, #0]
 8005c70:	7019      	strb	r1, [r3, #0]
 8005c72:	4608      	mov	r0, r1
 8005c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <__sfputs_r>:
 8005c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	460f      	mov	r7, r1
 8005c80:	4614      	mov	r4, r2
 8005c82:	18d5      	adds	r5, r2, r3
 8005c84:	42ac      	cmp	r4, r5
 8005c86:	d101      	bne.n	8005c8c <__sfputs_r+0x12>
 8005c88:	2000      	movs	r0, #0
 8005c8a:	e007      	b.n	8005c9c <__sfputs_r+0x22>
 8005c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c90:	463a      	mov	r2, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	f7ff ffda 	bl	8005c4c <__sfputc_r>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d1f3      	bne.n	8005c84 <__sfputs_r+0xa>
 8005c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ca0 <_vfiprintf_r>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	460d      	mov	r5, r1
 8005ca6:	b09d      	sub	sp, #116	; 0x74
 8005ca8:	4614      	mov	r4, r2
 8005caa:	4698      	mov	r8, r3
 8005cac:	4606      	mov	r6, r0
 8005cae:	b118      	cbz	r0, 8005cb8 <_vfiprintf_r+0x18>
 8005cb0:	6983      	ldr	r3, [r0, #24]
 8005cb2:	b90b      	cbnz	r3, 8005cb8 <_vfiprintf_r+0x18>
 8005cb4:	f7ff fed0 	bl	8005a58 <__sinit>
 8005cb8:	4b89      	ldr	r3, [pc, #548]	; (8005ee0 <_vfiprintf_r+0x240>)
 8005cba:	429d      	cmp	r5, r3
 8005cbc:	d11b      	bne.n	8005cf6 <_vfiprintf_r+0x56>
 8005cbe:	6875      	ldr	r5, [r6, #4]
 8005cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cc2:	07d9      	lsls	r1, r3, #31
 8005cc4:	d405      	bmi.n	8005cd2 <_vfiprintf_r+0x32>
 8005cc6:	89ab      	ldrh	r3, [r5, #12]
 8005cc8:	059a      	lsls	r2, r3, #22
 8005cca:	d402      	bmi.n	8005cd2 <_vfiprintf_r+0x32>
 8005ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cce:	f7ff ff61 	bl	8005b94 <__retarget_lock_acquire_recursive>
 8005cd2:	89ab      	ldrh	r3, [r5, #12]
 8005cd4:	071b      	lsls	r3, r3, #28
 8005cd6:	d501      	bpl.n	8005cdc <_vfiprintf_r+0x3c>
 8005cd8:	692b      	ldr	r3, [r5, #16]
 8005cda:	b9eb      	cbnz	r3, 8005d18 <_vfiprintf_r+0x78>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f000 fba2 	bl	8006428 <__swsetup_r>
 8005ce4:	b1c0      	cbz	r0, 8005d18 <_vfiprintf_r+0x78>
 8005ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ce8:	07dc      	lsls	r4, r3, #31
 8005cea:	d50e      	bpl.n	8005d0a <_vfiprintf_r+0x6a>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf0:	b01d      	add	sp, #116	; 0x74
 8005cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf6:	4b7b      	ldr	r3, [pc, #492]	; (8005ee4 <_vfiprintf_r+0x244>)
 8005cf8:	429d      	cmp	r5, r3
 8005cfa:	d101      	bne.n	8005d00 <_vfiprintf_r+0x60>
 8005cfc:	68b5      	ldr	r5, [r6, #8]
 8005cfe:	e7df      	b.n	8005cc0 <_vfiprintf_r+0x20>
 8005d00:	4b79      	ldr	r3, [pc, #484]	; (8005ee8 <_vfiprintf_r+0x248>)
 8005d02:	429d      	cmp	r5, r3
 8005d04:	bf08      	it	eq
 8005d06:	68f5      	ldreq	r5, [r6, #12]
 8005d08:	e7da      	b.n	8005cc0 <_vfiprintf_r+0x20>
 8005d0a:	89ab      	ldrh	r3, [r5, #12]
 8005d0c:	0598      	lsls	r0, r3, #22
 8005d0e:	d4ed      	bmi.n	8005cec <_vfiprintf_r+0x4c>
 8005d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d12:	f7ff ff40 	bl	8005b96 <__retarget_lock_release_recursive>
 8005d16:	e7e9      	b.n	8005cec <_vfiprintf_r+0x4c>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d26:	2330      	movs	r3, #48	; 0x30
 8005d28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005eec <_vfiprintf_r+0x24c>
 8005d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d30:	f04f 0901 	mov.w	r9, #1
 8005d34:	4623      	mov	r3, r4
 8005d36:	469a      	mov	sl, r3
 8005d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3c:	b10a      	cbz	r2, 8005d42 <_vfiprintf_r+0xa2>
 8005d3e:	2a25      	cmp	r2, #37	; 0x25
 8005d40:	d1f9      	bne.n	8005d36 <_vfiprintf_r+0x96>
 8005d42:	ebba 0b04 	subs.w	fp, sl, r4
 8005d46:	d00b      	beq.n	8005d60 <_vfiprintf_r+0xc0>
 8005d48:	465b      	mov	r3, fp
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff ff93 	bl	8005c7a <__sfputs_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	f000 80aa 	beq.w	8005eae <_vfiprintf_r+0x20e>
 8005d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d5c:	445a      	add	r2, fp
 8005d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d60:	f89a 3000 	ldrb.w	r3, [sl]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80a2 	beq.w	8005eae <_vfiprintf_r+0x20e>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d74:	f10a 0a01 	add.w	sl, sl, #1
 8005d78:	9304      	str	r3, [sp, #16]
 8005d7a:	9307      	str	r3, [sp, #28]
 8005d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d80:	931a      	str	r3, [sp, #104]	; 0x68
 8005d82:	4654      	mov	r4, sl
 8005d84:	2205      	movs	r2, #5
 8005d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8a:	4858      	ldr	r0, [pc, #352]	; (8005eec <_vfiprintf_r+0x24c>)
 8005d8c:	f7fa fa28 	bl	80001e0 <memchr>
 8005d90:	9a04      	ldr	r2, [sp, #16]
 8005d92:	b9d8      	cbnz	r0, 8005dcc <_vfiprintf_r+0x12c>
 8005d94:	06d1      	lsls	r1, r2, #27
 8005d96:	bf44      	itt	mi
 8005d98:	2320      	movmi	r3, #32
 8005d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d9e:	0713      	lsls	r3, r2, #28
 8005da0:	bf44      	itt	mi
 8005da2:	232b      	movmi	r3, #43	; 0x2b
 8005da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da8:	f89a 3000 	ldrb.w	r3, [sl]
 8005dac:	2b2a      	cmp	r3, #42	; 0x2a
 8005dae:	d015      	beq.n	8005ddc <_vfiprintf_r+0x13c>
 8005db0:	9a07      	ldr	r2, [sp, #28]
 8005db2:	4654      	mov	r4, sl
 8005db4:	2000      	movs	r0, #0
 8005db6:	f04f 0c0a 	mov.w	ip, #10
 8005dba:	4621      	mov	r1, r4
 8005dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc0:	3b30      	subs	r3, #48	; 0x30
 8005dc2:	2b09      	cmp	r3, #9
 8005dc4:	d94e      	bls.n	8005e64 <_vfiprintf_r+0x1c4>
 8005dc6:	b1b0      	cbz	r0, 8005df6 <_vfiprintf_r+0x156>
 8005dc8:	9207      	str	r2, [sp, #28]
 8005dca:	e014      	b.n	8005df6 <_vfiprintf_r+0x156>
 8005dcc:	eba0 0308 	sub.w	r3, r0, r8
 8005dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	46a2      	mov	sl, r4
 8005dda:	e7d2      	b.n	8005d82 <_vfiprintf_r+0xe2>
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	1d19      	adds	r1, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	9103      	str	r1, [sp, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bfbb      	ittet	lt
 8005de8:	425b      	neglt	r3, r3
 8005dea:	f042 0202 	orrlt.w	r2, r2, #2
 8005dee:	9307      	strge	r3, [sp, #28]
 8005df0:	9307      	strlt	r3, [sp, #28]
 8005df2:	bfb8      	it	lt
 8005df4:	9204      	strlt	r2, [sp, #16]
 8005df6:	7823      	ldrb	r3, [r4, #0]
 8005df8:	2b2e      	cmp	r3, #46	; 0x2e
 8005dfa:	d10c      	bne.n	8005e16 <_vfiprintf_r+0x176>
 8005dfc:	7863      	ldrb	r3, [r4, #1]
 8005dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8005e00:	d135      	bne.n	8005e6e <_vfiprintf_r+0x1ce>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	1d1a      	adds	r2, r3, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	9203      	str	r2, [sp, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfb8      	it	lt
 8005e0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e12:	3402      	adds	r4, #2
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005efc <_vfiprintf_r+0x25c>
 8005e1a:	7821      	ldrb	r1, [r4, #0]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	4650      	mov	r0, sl
 8005e20:	f7fa f9de 	bl	80001e0 <memchr>
 8005e24:	b140      	cbz	r0, 8005e38 <_vfiprintf_r+0x198>
 8005e26:	2340      	movs	r3, #64	; 0x40
 8005e28:	eba0 000a 	sub.w	r0, r0, sl
 8005e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	4303      	orrs	r3, r0
 8005e34:	3401      	adds	r4, #1
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3c:	482c      	ldr	r0, [pc, #176]	; (8005ef0 <_vfiprintf_r+0x250>)
 8005e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e42:	2206      	movs	r2, #6
 8005e44:	f7fa f9cc 	bl	80001e0 <memchr>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d03f      	beq.n	8005ecc <_vfiprintf_r+0x22c>
 8005e4c:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <_vfiprintf_r+0x254>)
 8005e4e:	bb1b      	cbnz	r3, 8005e98 <_vfiprintf_r+0x1f8>
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	3307      	adds	r3, #7
 8005e54:	f023 0307 	bic.w	r3, r3, #7
 8005e58:	3308      	adds	r3, #8
 8005e5a:	9303      	str	r3, [sp, #12]
 8005e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5e:	443b      	add	r3, r7
 8005e60:	9309      	str	r3, [sp, #36]	; 0x24
 8005e62:	e767      	b.n	8005d34 <_vfiprintf_r+0x94>
 8005e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e68:	460c      	mov	r4, r1
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	e7a5      	b.n	8005dba <_vfiprintf_r+0x11a>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	3401      	adds	r4, #1
 8005e72:	9305      	str	r3, [sp, #20]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f04f 0c0a 	mov.w	ip, #10
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e80:	3a30      	subs	r2, #48	; 0x30
 8005e82:	2a09      	cmp	r2, #9
 8005e84:	d903      	bls.n	8005e8e <_vfiprintf_r+0x1ee>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0c5      	beq.n	8005e16 <_vfiprintf_r+0x176>
 8005e8a:	9105      	str	r1, [sp, #20]
 8005e8c:	e7c3      	b.n	8005e16 <_vfiprintf_r+0x176>
 8005e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e92:	4604      	mov	r4, r0
 8005e94:	2301      	movs	r3, #1
 8005e96:	e7f0      	b.n	8005e7a <_vfiprintf_r+0x1da>
 8005e98:	ab03      	add	r3, sp, #12
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <_vfiprintf_r+0x258>)
 8005ea0:	a904      	add	r1, sp, #16
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	1c78      	adds	r0, r7, #1
 8005eac:	d1d6      	bne.n	8005e5c <_vfiprintf_r+0x1bc>
 8005eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eb0:	07d9      	lsls	r1, r3, #31
 8005eb2:	d405      	bmi.n	8005ec0 <_vfiprintf_r+0x220>
 8005eb4:	89ab      	ldrh	r3, [r5, #12]
 8005eb6:	059a      	lsls	r2, r3, #22
 8005eb8:	d402      	bmi.n	8005ec0 <_vfiprintf_r+0x220>
 8005eba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ebc:	f7ff fe6b 	bl	8005b96 <__retarget_lock_release_recursive>
 8005ec0:	89ab      	ldrh	r3, [r5, #12]
 8005ec2:	065b      	lsls	r3, r3, #25
 8005ec4:	f53f af12 	bmi.w	8005cec <_vfiprintf_r+0x4c>
 8005ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eca:	e711      	b.n	8005cf0 <_vfiprintf_r+0x50>
 8005ecc:	ab03      	add	r3, sp, #12
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <_vfiprintf_r+0x258>)
 8005ed4:	a904      	add	r1, sp, #16
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f000 f880 	bl	8005fdc <_printf_i>
 8005edc:	e7e4      	b.n	8005ea8 <_vfiprintf_r+0x208>
 8005ede:	bf00      	nop
 8005ee0:	08006b88 	.word	0x08006b88
 8005ee4:	08006ba8 	.word	0x08006ba8
 8005ee8:	08006b68 	.word	0x08006b68
 8005eec:	08006bc8 	.word	0x08006bc8
 8005ef0:	08006bd2 	.word	0x08006bd2
 8005ef4:	00000000 	.word	0x00000000
 8005ef8:	08005c7b 	.word	0x08005c7b
 8005efc:	08006bce 	.word	0x08006bce

08005f00 <_printf_common>:
 8005f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	4616      	mov	r6, r2
 8005f06:	4699      	mov	r9, r3
 8005f08:	688a      	ldr	r2, [r1, #8]
 8005f0a:	690b      	ldr	r3, [r1, #16]
 8005f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f10:	4293      	cmp	r3, r2
 8005f12:	bfb8      	it	lt
 8005f14:	4613      	movlt	r3, r2
 8005f16:	6033      	str	r3, [r6, #0]
 8005f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	b10a      	cbz	r2, 8005f26 <_printf_common+0x26>
 8005f22:	3301      	adds	r3, #1
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	0699      	lsls	r1, r3, #26
 8005f2a:	bf42      	ittt	mi
 8005f2c:	6833      	ldrmi	r3, [r6, #0]
 8005f2e:	3302      	addmi	r3, #2
 8005f30:	6033      	strmi	r3, [r6, #0]
 8005f32:	6825      	ldr	r5, [r4, #0]
 8005f34:	f015 0506 	ands.w	r5, r5, #6
 8005f38:	d106      	bne.n	8005f48 <_printf_common+0x48>
 8005f3a:	f104 0a19 	add.w	sl, r4, #25
 8005f3e:	68e3      	ldr	r3, [r4, #12]
 8005f40:	6832      	ldr	r2, [r6, #0]
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	42ab      	cmp	r3, r5
 8005f46:	dc26      	bgt.n	8005f96 <_printf_common+0x96>
 8005f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f4c:	1e13      	subs	r3, r2, #0
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	bf18      	it	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	0692      	lsls	r2, r2, #26
 8005f56:	d42b      	bmi.n	8005fb0 <_printf_common+0xb0>
 8005f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c0      	blx	r8
 8005f62:	3001      	adds	r0, #1
 8005f64:	d01e      	beq.n	8005fa4 <_printf_common+0xa4>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	68e5      	ldr	r5, [r4, #12]
 8005f6a:	6832      	ldr	r2, [r6, #0]
 8005f6c:	f003 0306 	and.w	r3, r3, #6
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	bf08      	it	eq
 8005f74:	1aad      	subeq	r5, r5, r2
 8005f76:	68a3      	ldr	r3, [r4, #8]
 8005f78:	6922      	ldr	r2, [r4, #16]
 8005f7a:	bf0c      	ite	eq
 8005f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f80:	2500      	movne	r5, #0
 8005f82:	4293      	cmp	r3, r2
 8005f84:	bfc4      	itt	gt
 8005f86:	1a9b      	subgt	r3, r3, r2
 8005f88:	18ed      	addgt	r5, r5, r3
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	341a      	adds	r4, #26
 8005f8e:	42b5      	cmp	r5, r6
 8005f90:	d11a      	bne.n	8005fc8 <_printf_common+0xc8>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e008      	b.n	8005fa8 <_printf_common+0xa8>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4652      	mov	r2, sl
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	47c0      	blx	r8
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d103      	bne.n	8005fac <_printf_common+0xac>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	3501      	adds	r5, #1
 8005fae:	e7c6      	b.n	8005f3e <_printf_common+0x3e>
 8005fb0:	18e1      	adds	r1, r4, r3
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	2030      	movs	r0, #48	; 0x30
 8005fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fba:	4422      	add	r2, r4
 8005fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	e7c7      	b.n	8005f58 <_printf_common+0x58>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4649      	mov	r1, r9
 8005fce:	4638      	mov	r0, r7
 8005fd0:	47c0      	blx	r8
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d0e6      	beq.n	8005fa4 <_printf_common+0xa4>
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7d9      	b.n	8005f8e <_printf_common+0x8e>
	...

08005fdc <_printf_i>:
 8005fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	4691      	mov	r9, r2
 8005fe4:	7e27      	ldrb	r7, [r4, #24]
 8005fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fe8:	2f78      	cmp	r7, #120	; 0x78
 8005fea:	4680      	mov	r8, r0
 8005fec:	469a      	mov	sl, r3
 8005fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ff2:	d807      	bhi.n	8006004 <_printf_i+0x28>
 8005ff4:	2f62      	cmp	r7, #98	; 0x62
 8005ff6:	d80a      	bhi.n	800600e <_printf_i+0x32>
 8005ff8:	2f00      	cmp	r7, #0
 8005ffa:	f000 80d8 	beq.w	80061ae <_printf_i+0x1d2>
 8005ffe:	2f58      	cmp	r7, #88	; 0x58
 8006000:	f000 80a3 	beq.w	800614a <_printf_i+0x16e>
 8006004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800600c:	e03a      	b.n	8006084 <_printf_i+0xa8>
 800600e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006012:	2b15      	cmp	r3, #21
 8006014:	d8f6      	bhi.n	8006004 <_printf_i+0x28>
 8006016:	a001      	add	r0, pc, #4	; (adr r0, 800601c <_printf_i+0x40>)
 8006018:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800601c:	08006075 	.word	0x08006075
 8006020:	08006089 	.word	0x08006089
 8006024:	08006005 	.word	0x08006005
 8006028:	08006005 	.word	0x08006005
 800602c:	08006005 	.word	0x08006005
 8006030:	08006005 	.word	0x08006005
 8006034:	08006089 	.word	0x08006089
 8006038:	08006005 	.word	0x08006005
 800603c:	08006005 	.word	0x08006005
 8006040:	08006005 	.word	0x08006005
 8006044:	08006005 	.word	0x08006005
 8006048:	08006195 	.word	0x08006195
 800604c:	080060b9 	.word	0x080060b9
 8006050:	08006177 	.word	0x08006177
 8006054:	08006005 	.word	0x08006005
 8006058:	08006005 	.word	0x08006005
 800605c:	080061b7 	.word	0x080061b7
 8006060:	08006005 	.word	0x08006005
 8006064:	080060b9 	.word	0x080060b9
 8006068:	08006005 	.word	0x08006005
 800606c:	08006005 	.word	0x08006005
 8006070:	0800617f 	.word	0x0800617f
 8006074:	680b      	ldr	r3, [r1, #0]
 8006076:	1d1a      	adds	r2, r3, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	600a      	str	r2, [r1, #0]
 800607c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006084:	2301      	movs	r3, #1
 8006086:	e0a3      	b.n	80061d0 <_printf_i+0x1f4>
 8006088:	6825      	ldr	r5, [r4, #0]
 800608a:	6808      	ldr	r0, [r1, #0]
 800608c:	062e      	lsls	r6, r5, #24
 800608e:	f100 0304 	add.w	r3, r0, #4
 8006092:	d50a      	bpl.n	80060aa <_printf_i+0xce>
 8006094:	6805      	ldr	r5, [r0, #0]
 8006096:	600b      	str	r3, [r1, #0]
 8006098:	2d00      	cmp	r5, #0
 800609a:	da03      	bge.n	80060a4 <_printf_i+0xc8>
 800609c:	232d      	movs	r3, #45	; 0x2d
 800609e:	426d      	negs	r5, r5
 80060a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a4:	485e      	ldr	r0, [pc, #376]	; (8006220 <_printf_i+0x244>)
 80060a6:	230a      	movs	r3, #10
 80060a8:	e019      	b.n	80060de <_printf_i+0x102>
 80060aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060ae:	6805      	ldr	r5, [r0, #0]
 80060b0:	600b      	str	r3, [r1, #0]
 80060b2:	bf18      	it	ne
 80060b4:	b22d      	sxthne	r5, r5
 80060b6:	e7ef      	b.n	8006098 <_printf_i+0xbc>
 80060b8:	680b      	ldr	r3, [r1, #0]
 80060ba:	6825      	ldr	r5, [r4, #0]
 80060bc:	1d18      	adds	r0, r3, #4
 80060be:	6008      	str	r0, [r1, #0]
 80060c0:	0628      	lsls	r0, r5, #24
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0xec>
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0xf2>
 80060c8:	0669      	lsls	r1, r5, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0xe8>
 80060cc:	881d      	ldrh	r5, [r3, #0]
 80060ce:	4854      	ldr	r0, [pc, #336]	; (8006220 <_printf_i+0x244>)
 80060d0:	2f6f      	cmp	r7, #111	; 0x6f
 80060d2:	bf0c      	ite	eq
 80060d4:	2308      	moveq	r3, #8
 80060d6:	230a      	movne	r3, #10
 80060d8:	2100      	movs	r1, #0
 80060da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060de:	6866      	ldr	r6, [r4, #4]
 80060e0:	60a6      	str	r6, [r4, #8]
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	bfa2      	ittt	ge
 80060e6:	6821      	ldrge	r1, [r4, #0]
 80060e8:	f021 0104 	bicge.w	r1, r1, #4
 80060ec:	6021      	strge	r1, [r4, #0]
 80060ee:	b90d      	cbnz	r5, 80060f4 <_printf_i+0x118>
 80060f0:	2e00      	cmp	r6, #0
 80060f2:	d04d      	beq.n	8006190 <_printf_i+0x1b4>
 80060f4:	4616      	mov	r6, r2
 80060f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80060fa:	fb03 5711 	mls	r7, r3, r1, r5
 80060fe:	5dc7      	ldrb	r7, [r0, r7]
 8006100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006104:	462f      	mov	r7, r5
 8006106:	42bb      	cmp	r3, r7
 8006108:	460d      	mov	r5, r1
 800610a:	d9f4      	bls.n	80060f6 <_printf_i+0x11a>
 800610c:	2b08      	cmp	r3, #8
 800610e:	d10b      	bne.n	8006128 <_printf_i+0x14c>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	07df      	lsls	r7, r3, #31
 8006114:	d508      	bpl.n	8006128 <_printf_i+0x14c>
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	6861      	ldr	r1, [r4, #4]
 800611a:	4299      	cmp	r1, r3
 800611c:	bfde      	ittt	le
 800611e:	2330      	movle	r3, #48	; 0x30
 8006120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006124:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006128:	1b92      	subs	r2, r2, r6
 800612a:	6122      	str	r2, [r4, #16]
 800612c:	f8cd a000 	str.w	sl, [sp]
 8006130:	464b      	mov	r3, r9
 8006132:	aa03      	add	r2, sp, #12
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff fee2 	bl	8005f00 <_printf_common>
 800613c:	3001      	adds	r0, #1
 800613e:	d14c      	bne.n	80061da <_printf_i+0x1fe>
 8006140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006144:	b004      	add	sp, #16
 8006146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614a:	4835      	ldr	r0, [pc, #212]	; (8006220 <_printf_i+0x244>)
 800614c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	680e      	ldr	r6, [r1, #0]
 8006154:	061f      	lsls	r7, r3, #24
 8006156:	f856 5b04 	ldr.w	r5, [r6], #4
 800615a:	600e      	str	r6, [r1, #0]
 800615c:	d514      	bpl.n	8006188 <_printf_i+0x1ac>
 800615e:	07d9      	lsls	r1, r3, #31
 8006160:	bf44      	itt	mi
 8006162:	f043 0320 	orrmi.w	r3, r3, #32
 8006166:	6023      	strmi	r3, [r4, #0]
 8006168:	b91d      	cbnz	r5, 8006172 <_printf_i+0x196>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f023 0320 	bic.w	r3, r3, #32
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	2310      	movs	r3, #16
 8006174:	e7b0      	b.n	80060d8 <_printf_i+0xfc>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	f043 0320 	orr.w	r3, r3, #32
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	2378      	movs	r3, #120	; 0x78
 8006180:	4828      	ldr	r0, [pc, #160]	; (8006224 <_printf_i+0x248>)
 8006182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006186:	e7e3      	b.n	8006150 <_printf_i+0x174>
 8006188:	065e      	lsls	r6, r3, #25
 800618a:	bf48      	it	mi
 800618c:	b2ad      	uxthmi	r5, r5
 800618e:	e7e6      	b.n	800615e <_printf_i+0x182>
 8006190:	4616      	mov	r6, r2
 8006192:	e7bb      	b.n	800610c <_printf_i+0x130>
 8006194:	680b      	ldr	r3, [r1, #0]
 8006196:	6826      	ldr	r6, [r4, #0]
 8006198:	6960      	ldr	r0, [r4, #20]
 800619a:	1d1d      	adds	r5, r3, #4
 800619c:	600d      	str	r5, [r1, #0]
 800619e:	0635      	lsls	r5, r6, #24
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	d501      	bpl.n	80061a8 <_printf_i+0x1cc>
 80061a4:	6018      	str	r0, [r3, #0]
 80061a6:	e002      	b.n	80061ae <_printf_i+0x1d2>
 80061a8:	0671      	lsls	r1, r6, #25
 80061aa:	d5fb      	bpl.n	80061a4 <_printf_i+0x1c8>
 80061ac:	8018      	strh	r0, [r3, #0]
 80061ae:	2300      	movs	r3, #0
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	4616      	mov	r6, r2
 80061b4:	e7ba      	b.n	800612c <_printf_i+0x150>
 80061b6:	680b      	ldr	r3, [r1, #0]
 80061b8:	1d1a      	adds	r2, r3, #4
 80061ba:	600a      	str	r2, [r1, #0]
 80061bc:	681e      	ldr	r6, [r3, #0]
 80061be:	6862      	ldr	r2, [r4, #4]
 80061c0:	2100      	movs	r1, #0
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7fa f80c 	bl	80001e0 <memchr>
 80061c8:	b108      	cbz	r0, 80061ce <_printf_i+0x1f2>
 80061ca:	1b80      	subs	r0, r0, r6
 80061cc:	6060      	str	r0, [r4, #4]
 80061ce:	6863      	ldr	r3, [r4, #4]
 80061d0:	6123      	str	r3, [r4, #16]
 80061d2:	2300      	movs	r3, #0
 80061d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d8:	e7a8      	b.n	800612c <_printf_i+0x150>
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	4632      	mov	r2, r6
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	47d0      	blx	sl
 80061e4:	3001      	adds	r0, #1
 80061e6:	d0ab      	beq.n	8006140 <_printf_i+0x164>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	079b      	lsls	r3, r3, #30
 80061ec:	d413      	bmi.n	8006216 <_printf_i+0x23a>
 80061ee:	68e0      	ldr	r0, [r4, #12]
 80061f0:	9b03      	ldr	r3, [sp, #12]
 80061f2:	4298      	cmp	r0, r3
 80061f4:	bfb8      	it	lt
 80061f6:	4618      	movlt	r0, r3
 80061f8:	e7a4      	b.n	8006144 <_printf_i+0x168>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4632      	mov	r2, r6
 80061fe:	4649      	mov	r1, r9
 8006200:	4640      	mov	r0, r8
 8006202:	47d0      	blx	sl
 8006204:	3001      	adds	r0, #1
 8006206:	d09b      	beq.n	8006140 <_printf_i+0x164>
 8006208:	3501      	adds	r5, #1
 800620a:	68e3      	ldr	r3, [r4, #12]
 800620c:	9903      	ldr	r1, [sp, #12]
 800620e:	1a5b      	subs	r3, r3, r1
 8006210:	42ab      	cmp	r3, r5
 8006212:	dcf2      	bgt.n	80061fa <_printf_i+0x21e>
 8006214:	e7eb      	b.n	80061ee <_printf_i+0x212>
 8006216:	2500      	movs	r5, #0
 8006218:	f104 0619 	add.w	r6, r4, #25
 800621c:	e7f5      	b.n	800620a <_printf_i+0x22e>
 800621e:	bf00      	nop
 8006220:	08006bd9 	.word	0x08006bd9
 8006224:	08006bea 	.word	0x08006bea

08006228 <_putc_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	460d      	mov	r5, r1
 800622c:	4614      	mov	r4, r2
 800622e:	4606      	mov	r6, r0
 8006230:	b118      	cbz	r0, 800623a <_putc_r+0x12>
 8006232:	6983      	ldr	r3, [r0, #24]
 8006234:	b90b      	cbnz	r3, 800623a <_putc_r+0x12>
 8006236:	f7ff fc0f 	bl	8005a58 <__sinit>
 800623a:	4b1c      	ldr	r3, [pc, #112]	; (80062ac <_putc_r+0x84>)
 800623c:	429c      	cmp	r4, r3
 800623e:	d124      	bne.n	800628a <_putc_r+0x62>
 8006240:	6874      	ldr	r4, [r6, #4]
 8006242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006244:	07d8      	lsls	r0, r3, #31
 8006246:	d405      	bmi.n	8006254 <_putc_r+0x2c>
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	0599      	lsls	r1, r3, #22
 800624c:	d402      	bmi.n	8006254 <_putc_r+0x2c>
 800624e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006250:	f7ff fca0 	bl	8005b94 <__retarget_lock_acquire_recursive>
 8006254:	68a3      	ldr	r3, [r4, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	60a3      	str	r3, [r4, #8]
 800625c:	da05      	bge.n	800626a <_putc_r+0x42>
 800625e:	69a2      	ldr	r2, [r4, #24]
 8006260:	4293      	cmp	r3, r2
 8006262:	db1c      	blt.n	800629e <_putc_r+0x76>
 8006264:	b2eb      	uxtb	r3, r5
 8006266:	2b0a      	cmp	r3, #10
 8006268:	d019      	beq.n	800629e <_putc_r+0x76>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	6022      	str	r2, [r4, #0]
 8006270:	701d      	strb	r5, [r3, #0]
 8006272:	b2ed      	uxtb	r5, r5
 8006274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006276:	07da      	lsls	r2, r3, #31
 8006278:	d405      	bmi.n	8006286 <_putc_r+0x5e>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	059b      	lsls	r3, r3, #22
 800627e:	d402      	bmi.n	8006286 <_putc_r+0x5e>
 8006280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006282:	f7ff fc88 	bl	8005b96 <__retarget_lock_release_recursive>
 8006286:	4628      	mov	r0, r5
 8006288:	bd70      	pop	{r4, r5, r6, pc}
 800628a:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <_putc_r+0x88>)
 800628c:	429c      	cmp	r4, r3
 800628e:	d101      	bne.n	8006294 <_putc_r+0x6c>
 8006290:	68b4      	ldr	r4, [r6, #8]
 8006292:	e7d6      	b.n	8006242 <_putc_r+0x1a>
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <_putc_r+0x8c>)
 8006296:	429c      	cmp	r4, r3
 8006298:	bf08      	it	eq
 800629a:	68f4      	ldreq	r4, [r6, #12]
 800629c:	e7d1      	b.n	8006242 <_putc_r+0x1a>
 800629e:	4629      	mov	r1, r5
 80062a0:	4622      	mov	r2, r4
 80062a2:	4630      	mov	r0, r6
 80062a4:	f000 f85c 	bl	8006360 <__swbuf_r>
 80062a8:	4605      	mov	r5, r0
 80062aa:	e7e3      	b.n	8006274 <_putc_r+0x4c>
 80062ac:	08006b88 	.word	0x08006b88
 80062b0:	08006ba8 	.word	0x08006ba8
 80062b4:	08006b68 	.word	0x08006b68

080062b8 <_sbrk_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d06      	ldr	r5, [pc, #24]	; (80062d4 <_sbrk_r+0x1c>)
 80062bc:	2300      	movs	r3, #0
 80062be:	4604      	mov	r4, r0
 80062c0:	4608      	mov	r0, r1
 80062c2:	602b      	str	r3, [r5, #0]
 80062c4:	f7fa fdf8 	bl	8000eb8 <_sbrk>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_sbrk_r+0x1a>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_sbrk_r+0x1a>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	200002c4 	.word	0x200002c4

080062d8 <__sread>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	460c      	mov	r4, r1
 80062dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e0:	f000 fab4 	bl	800684c <_read_r>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	bfab      	itete	ge
 80062e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062ea:	89a3      	ldrhlt	r3, [r4, #12]
 80062ec:	181b      	addge	r3, r3, r0
 80062ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062f2:	bfac      	ite	ge
 80062f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80062f6:	81a3      	strhlt	r3, [r4, #12]
 80062f8:	bd10      	pop	{r4, pc}

080062fa <__swrite>:
 80062fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fe:	461f      	mov	r7, r3
 8006300:	898b      	ldrh	r3, [r1, #12]
 8006302:	05db      	lsls	r3, r3, #23
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	4616      	mov	r6, r2
 800630a:	d505      	bpl.n	8006318 <__swrite+0x1e>
 800630c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006310:	2302      	movs	r3, #2
 8006312:	2200      	movs	r2, #0
 8006314:	f000 f9c8 	bl	80066a8 <_lseek_r>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800631e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	4632      	mov	r2, r6
 8006326:	463b      	mov	r3, r7
 8006328:	4628      	mov	r0, r5
 800632a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	f000 b869 	b.w	8006404 <_write_r>

08006332 <__sseek>:
 8006332:	b510      	push	{r4, lr}
 8006334:	460c      	mov	r4, r1
 8006336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633a:	f000 f9b5 	bl	80066a8 <_lseek_r>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	bf15      	itete	ne
 8006344:	6560      	strne	r0, [r4, #84]	; 0x54
 8006346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800634a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800634e:	81a3      	strheq	r3, [r4, #12]
 8006350:	bf18      	it	ne
 8006352:	81a3      	strhne	r3, [r4, #12]
 8006354:	bd10      	pop	{r4, pc}

08006356 <__sclose>:
 8006356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635a:	f000 b8d3 	b.w	8006504 <_close_r>
	...

08006360 <__swbuf_r>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	460e      	mov	r6, r1
 8006364:	4614      	mov	r4, r2
 8006366:	4605      	mov	r5, r0
 8006368:	b118      	cbz	r0, 8006372 <__swbuf_r+0x12>
 800636a:	6983      	ldr	r3, [r0, #24]
 800636c:	b90b      	cbnz	r3, 8006372 <__swbuf_r+0x12>
 800636e:	f7ff fb73 	bl	8005a58 <__sinit>
 8006372:	4b21      	ldr	r3, [pc, #132]	; (80063f8 <__swbuf_r+0x98>)
 8006374:	429c      	cmp	r4, r3
 8006376:	d12b      	bne.n	80063d0 <__swbuf_r+0x70>
 8006378:	686c      	ldr	r4, [r5, #4]
 800637a:	69a3      	ldr	r3, [r4, #24]
 800637c:	60a3      	str	r3, [r4, #8]
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	071a      	lsls	r2, r3, #28
 8006382:	d52f      	bpl.n	80063e4 <__swbuf_r+0x84>
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	b36b      	cbz	r3, 80063e4 <__swbuf_r+0x84>
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	1ac0      	subs	r0, r0, r3
 800638e:	6963      	ldr	r3, [r4, #20]
 8006390:	b2f6      	uxtb	r6, r6
 8006392:	4283      	cmp	r3, r0
 8006394:	4637      	mov	r7, r6
 8006396:	dc04      	bgt.n	80063a2 <__swbuf_r+0x42>
 8006398:	4621      	mov	r1, r4
 800639a:	4628      	mov	r0, r5
 800639c:	f000 f948 	bl	8006630 <_fflush_r>
 80063a0:	bb30      	cbnz	r0, 80063f0 <__swbuf_r+0x90>
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	60a3      	str	r3, [r4, #8]
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	6022      	str	r2, [r4, #0]
 80063ae:	701e      	strb	r6, [r3, #0]
 80063b0:	6963      	ldr	r3, [r4, #20]
 80063b2:	3001      	adds	r0, #1
 80063b4:	4283      	cmp	r3, r0
 80063b6:	d004      	beq.n	80063c2 <__swbuf_r+0x62>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	07db      	lsls	r3, r3, #31
 80063bc:	d506      	bpl.n	80063cc <__swbuf_r+0x6c>
 80063be:	2e0a      	cmp	r6, #10
 80063c0:	d104      	bne.n	80063cc <__swbuf_r+0x6c>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	f000 f933 	bl	8006630 <_fflush_r>
 80063ca:	b988      	cbnz	r0, 80063f0 <__swbuf_r+0x90>
 80063cc:	4638      	mov	r0, r7
 80063ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <__swbuf_r+0x9c>)
 80063d2:	429c      	cmp	r4, r3
 80063d4:	d101      	bne.n	80063da <__swbuf_r+0x7a>
 80063d6:	68ac      	ldr	r4, [r5, #8]
 80063d8:	e7cf      	b.n	800637a <__swbuf_r+0x1a>
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <__swbuf_r+0xa0>)
 80063dc:	429c      	cmp	r4, r3
 80063de:	bf08      	it	eq
 80063e0:	68ec      	ldreq	r4, [r5, #12]
 80063e2:	e7ca      	b.n	800637a <__swbuf_r+0x1a>
 80063e4:	4621      	mov	r1, r4
 80063e6:	4628      	mov	r0, r5
 80063e8:	f000 f81e 	bl	8006428 <__swsetup_r>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d0cb      	beq.n	8006388 <__swbuf_r+0x28>
 80063f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80063f4:	e7ea      	b.n	80063cc <__swbuf_r+0x6c>
 80063f6:	bf00      	nop
 80063f8:	08006b88 	.word	0x08006b88
 80063fc:	08006ba8 	.word	0x08006ba8
 8006400:	08006b68 	.word	0x08006b68

08006404 <_write_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4d07      	ldr	r5, [pc, #28]	; (8006424 <_write_r+0x20>)
 8006408:	4604      	mov	r4, r0
 800640a:	4608      	mov	r0, r1
 800640c:	4611      	mov	r1, r2
 800640e:	2200      	movs	r2, #0
 8006410:	602a      	str	r2, [r5, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	f7fa f8b0 	bl	8000578 <_write>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_write_r+0x1e>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b103      	cbz	r3, 8006422 <_write_r+0x1e>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200002c4 	.word	0x200002c4

08006428 <__swsetup_r>:
 8006428:	4b32      	ldr	r3, [pc, #200]	; (80064f4 <__swsetup_r+0xcc>)
 800642a:	b570      	push	{r4, r5, r6, lr}
 800642c:	681d      	ldr	r5, [r3, #0]
 800642e:	4606      	mov	r6, r0
 8006430:	460c      	mov	r4, r1
 8006432:	b125      	cbz	r5, 800643e <__swsetup_r+0x16>
 8006434:	69ab      	ldr	r3, [r5, #24]
 8006436:	b913      	cbnz	r3, 800643e <__swsetup_r+0x16>
 8006438:	4628      	mov	r0, r5
 800643a:	f7ff fb0d 	bl	8005a58 <__sinit>
 800643e:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <__swsetup_r+0xd0>)
 8006440:	429c      	cmp	r4, r3
 8006442:	d10f      	bne.n	8006464 <__swsetup_r+0x3c>
 8006444:	686c      	ldr	r4, [r5, #4]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800644c:	0719      	lsls	r1, r3, #28
 800644e:	d42c      	bmi.n	80064aa <__swsetup_r+0x82>
 8006450:	06dd      	lsls	r5, r3, #27
 8006452:	d411      	bmi.n	8006478 <__swsetup_r+0x50>
 8006454:	2309      	movs	r3, #9
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800645c:	81a3      	strh	r3, [r4, #12]
 800645e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006462:	e03e      	b.n	80064e2 <__swsetup_r+0xba>
 8006464:	4b25      	ldr	r3, [pc, #148]	; (80064fc <__swsetup_r+0xd4>)
 8006466:	429c      	cmp	r4, r3
 8006468:	d101      	bne.n	800646e <__swsetup_r+0x46>
 800646a:	68ac      	ldr	r4, [r5, #8]
 800646c:	e7eb      	b.n	8006446 <__swsetup_r+0x1e>
 800646e:	4b24      	ldr	r3, [pc, #144]	; (8006500 <__swsetup_r+0xd8>)
 8006470:	429c      	cmp	r4, r3
 8006472:	bf08      	it	eq
 8006474:	68ec      	ldreq	r4, [r5, #12]
 8006476:	e7e6      	b.n	8006446 <__swsetup_r+0x1e>
 8006478:	0758      	lsls	r0, r3, #29
 800647a:	d512      	bpl.n	80064a2 <__swsetup_r+0x7a>
 800647c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800647e:	b141      	cbz	r1, 8006492 <__swsetup_r+0x6a>
 8006480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006484:	4299      	cmp	r1, r3
 8006486:	d002      	beq.n	800648e <__swsetup_r+0x66>
 8006488:	4630      	mov	r0, r6
 800648a:	f000 f98f 	bl	80067ac <_free_r>
 800648e:	2300      	movs	r3, #0
 8006490:	6363      	str	r3, [r4, #52]	; 0x34
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006498:	81a3      	strh	r3, [r4, #12]
 800649a:	2300      	movs	r3, #0
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f043 0308 	orr.w	r3, r3, #8
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	b94b      	cbnz	r3, 80064c2 <__swsetup_r+0x9a>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b8:	d003      	beq.n	80064c2 <__swsetup_r+0x9a>
 80064ba:	4621      	mov	r1, r4
 80064bc:	4630      	mov	r0, r6
 80064be:	f000 f929 	bl	8006714 <__smakebuf_r>
 80064c2:	89a0      	ldrh	r0, [r4, #12]
 80064c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064c8:	f010 0301 	ands.w	r3, r0, #1
 80064cc:	d00a      	beq.n	80064e4 <__swsetup_r+0xbc>
 80064ce:	2300      	movs	r3, #0
 80064d0:	60a3      	str	r3, [r4, #8]
 80064d2:	6963      	ldr	r3, [r4, #20]
 80064d4:	425b      	negs	r3, r3
 80064d6:	61a3      	str	r3, [r4, #24]
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	b943      	cbnz	r3, 80064ee <__swsetup_r+0xc6>
 80064dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064e0:	d1ba      	bne.n	8006458 <__swsetup_r+0x30>
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	0781      	lsls	r1, r0, #30
 80064e6:	bf58      	it	pl
 80064e8:	6963      	ldrpl	r3, [r4, #20]
 80064ea:	60a3      	str	r3, [r4, #8]
 80064ec:	e7f4      	b.n	80064d8 <__swsetup_r+0xb0>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e7f7      	b.n	80064e2 <__swsetup_r+0xba>
 80064f2:	bf00      	nop
 80064f4:	20000010 	.word	0x20000010
 80064f8:	08006b88 	.word	0x08006b88
 80064fc:	08006ba8 	.word	0x08006ba8
 8006500:	08006b68 	.word	0x08006b68

08006504 <_close_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4d06      	ldr	r5, [pc, #24]	; (8006520 <_close_r+0x1c>)
 8006508:	2300      	movs	r3, #0
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	602b      	str	r3, [r5, #0]
 8006510:	f7fa fc9d 	bl	8000e4e <_close>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_close_r+0x1a>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_close_r+0x1a>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	200002c4 	.word	0x200002c4

08006524 <__sflush_r>:
 8006524:	898a      	ldrh	r2, [r1, #12]
 8006526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652a:	4605      	mov	r5, r0
 800652c:	0710      	lsls	r0, r2, #28
 800652e:	460c      	mov	r4, r1
 8006530:	d458      	bmi.n	80065e4 <__sflush_r+0xc0>
 8006532:	684b      	ldr	r3, [r1, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	dc05      	bgt.n	8006544 <__sflush_r+0x20>
 8006538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	dc02      	bgt.n	8006544 <__sflush_r+0x20>
 800653e:	2000      	movs	r0, #0
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006546:	2e00      	cmp	r6, #0
 8006548:	d0f9      	beq.n	800653e <__sflush_r+0x1a>
 800654a:	2300      	movs	r3, #0
 800654c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006550:	682f      	ldr	r7, [r5, #0]
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	d032      	beq.n	80065bc <__sflush_r+0x98>
 8006556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	075a      	lsls	r2, r3, #29
 800655c:	d505      	bpl.n	800656a <__sflush_r+0x46>
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	1ac0      	subs	r0, r0, r3
 8006562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006564:	b10b      	cbz	r3, 800656a <__sflush_r+0x46>
 8006566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006568:	1ac0      	subs	r0, r0, r3
 800656a:	2300      	movs	r3, #0
 800656c:	4602      	mov	r2, r0
 800656e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006570:	6a21      	ldr	r1, [r4, #32]
 8006572:	4628      	mov	r0, r5
 8006574:	47b0      	blx	r6
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	d106      	bne.n	800658a <__sflush_r+0x66>
 800657c:	6829      	ldr	r1, [r5, #0]
 800657e:	291d      	cmp	r1, #29
 8006580:	d82c      	bhi.n	80065dc <__sflush_r+0xb8>
 8006582:	4a2a      	ldr	r2, [pc, #168]	; (800662c <__sflush_r+0x108>)
 8006584:	40ca      	lsrs	r2, r1
 8006586:	07d6      	lsls	r6, r2, #31
 8006588:	d528      	bpl.n	80065dc <__sflush_r+0xb8>
 800658a:	2200      	movs	r2, #0
 800658c:	6062      	str	r2, [r4, #4]
 800658e:	04d9      	lsls	r1, r3, #19
 8006590:	6922      	ldr	r2, [r4, #16]
 8006592:	6022      	str	r2, [r4, #0]
 8006594:	d504      	bpl.n	80065a0 <__sflush_r+0x7c>
 8006596:	1c42      	adds	r2, r0, #1
 8006598:	d101      	bne.n	800659e <__sflush_r+0x7a>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	b903      	cbnz	r3, 80065a0 <__sflush_r+0x7c>
 800659e:	6560      	str	r0, [r4, #84]	; 0x54
 80065a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065a2:	602f      	str	r7, [r5, #0]
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d0ca      	beq.n	800653e <__sflush_r+0x1a>
 80065a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ac:	4299      	cmp	r1, r3
 80065ae:	d002      	beq.n	80065b6 <__sflush_r+0x92>
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f8fb 	bl	80067ac <_free_r>
 80065b6:	2000      	movs	r0, #0
 80065b8:	6360      	str	r0, [r4, #52]	; 0x34
 80065ba:	e7c1      	b.n	8006540 <__sflush_r+0x1c>
 80065bc:	6a21      	ldr	r1, [r4, #32]
 80065be:	2301      	movs	r3, #1
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b0      	blx	r6
 80065c4:	1c41      	adds	r1, r0, #1
 80065c6:	d1c7      	bne.n	8006558 <__sflush_r+0x34>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0c4      	beq.n	8006558 <__sflush_r+0x34>
 80065ce:	2b1d      	cmp	r3, #29
 80065d0:	d001      	beq.n	80065d6 <__sflush_r+0xb2>
 80065d2:	2b16      	cmp	r3, #22
 80065d4:	d101      	bne.n	80065da <__sflush_r+0xb6>
 80065d6:	602f      	str	r7, [r5, #0]
 80065d8:	e7b1      	b.n	800653e <__sflush_r+0x1a>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	e7ad      	b.n	8006540 <__sflush_r+0x1c>
 80065e4:	690f      	ldr	r7, [r1, #16]
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	d0a9      	beq.n	800653e <__sflush_r+0x1a>
 80065ea:	0793      	lsls	r3, r2, #30
 80065ec:	680e      	ldr	r6, [r1, #0]
 80065ee:	bf08      	it	eq
 80065f0:	694b      	ldreq	r3, [r1, #20]
 80065f2:	600f      	str	r7, [r1, #0]
 80065f4:	bf18      	it	ne
 80065f6:	2300      	movne	r3, #0
 80065f8:	eba6 0807 	sub.w	r8, r6, r7
 80065fc:	608b      	str	r3, [r1, #8]
 80065fe:	f1b8 0f00 	cmp.w	r8, #0
 8006602:	dd9c      	ble.n	800653e <__sflush_r+0x1a>
 8006604:	6a21      	ldr	r1, [r4, #32]
 8006606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006608:	4643      	mov	r3, r8
 800660a:	463a      	mov	r2, r7
 800660c:	4628      	mov	r0, r5
 800660e:	47b0      	blx	r6
 8006610:	2800      	cmp	r0, #0
 8006612:	dc06      	bgt.n	8006622 <__sflush_r+0xfe>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006620:	e78e      	b.n	8006540 <__sflush_r+0x1c>
 8006622:	4407      	add	r7, r0
 8006624:	eba8 0800 	sub.w	r8, r8, r0
 8006628:	e7e9      	b.n	80065fe <__sflush_r+0xda>
 800662a:	bf00      	nop
 800662c:	20400001 	.word	0x20400001

08006630 <_fflush_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	690b      	ldr	r3, [r1, #16]
 8006634:	4605      	mov	r5, r0
 8006636:	460c      	mov	r4, r1
 8006638:	b913      	cbnz	r3, 8006640 <_fflush_r+0x10>
 800663a:	2500      	movs	r5, #0
 800663c:	4628      	mov	r0, r5
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	b118      	cbz	r0, 800664a <_fflush_r+0x1a>
 8006642:	6983      	ldr	r3, [r0, #24]
 8006644:	b90b      	cbnz	r3, 800664a <_fflush_r+0x1a>
 8006646:	f7ff fa07 	bl	8005a58 <__sinit>
 800664a:	4b14      	ldr	r3, [pc, #80]	; (800669c <_fflush_r+0x6c>)
 800664c:	429c      	cmp	r4, r3
 800664e:	d11b      	bne.n	8006688 <_fflush_r+0x58>
 8006650:	686c      	ldr	r4, [r5, #4]
 8006652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0ef      	beq.n	800663a <_fflush_r+0xa>
 800665a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800665c:	07d0      	lsls	r0, r2, #31
 800665e:	d404      	bmi.n	800666a <_fflush_r+0x3a>
 8006660:	0599      	lsls	r1, r3, #22
 8006662:	d402      	bmi.n	800666a <_fflush_r+0x3a>
 8006664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006666:	f7ff fa95 	bl	8005b94 <__retarget_lock_acquire_recursive>
 800666a:	4628      	mov	r0, r5
 800666c:	4621      	mov	r1, r4
 800666e:	f7ff ff59 	bl	8006524 <__sflush_r>
 8006672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006674:	07da      	lsls	r2, r3, #31
 8006676:	4605      	mov	r5, r0
 8006678:	d4e0      	bmi.n	800663c <_fflush_r+0xc>
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	059b      	lsls	r3, r3, #22
 800667e:	d4dd      	bmi.n	800663c <_fflush_r+0xc>
 8006680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006682:	f7ff fa88 	bl	8005b96 <__retarget_lock_release_recursive>
 8006686:	e7d9      	b.n	800663c <_fflush_r+0xc>
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <_fflush_r+0x70>)
 800668a:	429c      	cmp	r4, r3
 800668c:	d101      	bne.n	8006692 <_fflush_r+0x62>
 800668e:	68ac      	ldr	r4, [r5, #8]
 8006690:	e7df      	b.n	8006652 <_fflush_r+0x22>
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <_fflush_r+0x74>)
 8006694:	429c      	cmp	r4, r3
 8006696:	bf08      	it	eq
 8006698:	68ec      	ldreq	r4, [r5, #12]
 800669a:	e7da      	b.n	8006652 <_fflush_r+0x22>
 800669c:	08006b88 	.word	0x08006b88
 80066a0:	08006ba8 	.word	0x08006ba8
 80066a4:	08006b68 	.word	0x08006b68

080066a8 <_lseek_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	; (80066c8 <_lseek_r+0x20>)
 80066ac:	4604      	mov	r4, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	602a      	str	r2, [r5, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f7fa fbf0 	bl	8000e9c <_lseek>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_lseek_r+0x1e>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_lseek_r+0x1e>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	200002c4 	.word	0x200002c4

080066cc <__swhatbuf_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	460e      	mov	r6, r1
 80066d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d4:	2900      	cmp	r1, #0
 80066d6:	b096      	sub	sp, #88	; 0x58
 80066d8:	4614      	mov	r4, r2
 80066da:	461d      	mov	r5, r3
 80066dc:	da07      	bge.n	80066ee <__swhatbuf_r+0x22>
 80066de:	2300      	movs	r3, #0
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	89b3      	ldrh	r3, [r6, #12]
 80066e4:	061a      	lsls	r2, r3, #24
 80066e6:	d410      	bmi.n	800670a <__swhatbuf_r+0x3e>
 80066e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ec:	e00e      	b.n	800670c <__swhatbuf_r+0x40>
 80066ee:	466a      	mov	r2, sp
 80066f0:	f000 f8be 	bl	8006870 <_fstat_r>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	dbf2      	blt.n	80066de <__swhatbuf_r+0x12>
 80066f8:	9a01      	ldr	r2, [sp, #4]
 80066fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006702:	425a      	negs	r2, r3
 8006704:	415a      	adcs	r2, r3
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	e7ee      	b.n	80066e8 <__swhatbuf_r+0x1c>
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	2000      	movs	r0, #0
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	b016      	add	sp, #88	; 0x58
 8006712:	bd70      	pop	{r4, r5, r6, pc}

08006714 <__smakebuf_r>:
 8006714:	898b      	ldrh	r3, [r1, #12]
 8006716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006718:	079d      	lsls	r5, r3, #30
 800671a:	4606      	mov	r6, r0
 800671c:	460c      	mov	r4, r1
 800671e:	d507      	bpl.n	8006730 <__smakebuf_r+0x1c>
 8006720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	2301      	movs	r3, #1
 800672a:	6163      	str	r3, [r4, #20]
 800672c:	b002      	add	sp, #8
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	ab01      	add	r3, sp, #4
 8006732:	466a      	mov	r2, sp
 8006734:	f7ff ffca 	bl	80066cc <__swhatbuf_r>
 8006738:	9900      	ldr	r1, [sp, #0]
 800673a:	4605      	mov	r5, r0
 800673c:	4630      	mov	r0, r6
 800673e:	f7ff fa2b 	bl	8005b98 <_malloc_r>
 8006742:	b948      	cbnz	r0, 8006758 <__smakebuf_r+0x44>
 8006744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006748:	059a      	lsls	r2, r3, #22
 800674a:	d4ef      	bmi.n	800672c <__smakebuf_r+0x18>
 800674c:	f023 0303 	bic.w	r3, r3, #3
 8006750:	f043 0302 	orr.w	r3, r3, #2
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	e7e3      	b.n	8006720 <__smakebuf_r+0xc>
 8006758:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <__smakebuf_r+0x7c>)
 800675a:	62b3      	str	r3, [r6, #40]	; 0x28
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	6020      	str	r0, [r4, #0]
 8006760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	9b00      	ldr	r3, [sp, #0]
 8006768:	6163      	str	r3, [r4, #20]
 800676a:	9b01      	ldr	r3, [sp, #4]
 800676c:	6120      	str	r0, [r4, #16]
 800676e:	b15b      	cbz	r3, 8006788 <__smakebuf_r+0x74>
 8006770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f88d 	bl	8006894 <_isatty_r>
 800677a:	b128      	cbz	r0, 8006788 <__smakebuf_r+0x74>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	89a0      	ldrh	r0, [r4, #12]
 800678a:	4305      	orrs	r5, r0
 800678c:	81a5      	strh	r5, [r4, #12]
 800678e:	e7cd      	b.n	800672c <__smakebuf_r+0x18>
 8006790:	080059f1 	.word	0x080059f1

08006794 <__malloc_lock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_lock+0x8>)
 8006796:	f7ff b9fd 	b.w	8005b94 <__retarget_lock_acquire_recursive>
 800679a:	bf00      	nop
 800679c:	200002bc 	.word	0x200002bc

080067a0 <__malloc_unlock>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__malloc_unlock+0x8>)
 80067a2:	f7ff b9f8 	b.w	8005b96 <__retarget_lock_release_recursive>
 80067a6:	bf00      	nop
 80067a8:	200002bc 	.word	0x200002bc

080067ac <_free_r>:
 80067ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ae:	2900      	cmp	r1, #0
 80067b0:	d048      	beq.n	8006844 <_free_r+0x98>
 80067b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b6:	9001      	str	r0, [sp, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f1a1 0404 	sub.w	r4, r1, #4
 80067be:	bfb8      	it	lt
 80067c0:	18e4      	addlt	r4, r4, r3
 80067c2:	f7ff ffe7 	bl	8006794 <__malloc_lock>
 80067c6:	4a20      	ldr	r2, [pc, #128]	; (8006848 <_free_r+0x9c>)
 80067c8:	9801      	ldr	r0, [sp, #4]
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	4615      	mov	r5, r2
 80067ce:	b933      	cbnz	r3, 80067de <_free_r+0x32>
 80067d0:	6063      	str	r3, [r4, #4]
 80067d2:	6014      	str	r4, [r2, #0]
 80067d4:	b003      	add	sp, #12
 80067d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067da:	f7ff bfe1 	b.w	80067a0 <__malloc_unlock>
 80067de:	42a3      	cmp	r3, r4
 80067e0:	d90b      	bls.n	80067fa <_free_r+0x4e>
 80067e2:	6821      	ldr	r1, [r4, #0]
 80067e4:	1862      	adds	r2, r4, r1
 80067e6:	4293      	cmp	r3, r2
 80067e8:	bf04      	itt	eq
 80067ea:	681a      	ldreq	r2, [r3, #0]
 80067ec:	685b      	ldreq	r3, [r3, #4]
 80067ee:	6063      	str	r3, [r4, #4]
 80067f0:	bf04      	itt	eq
 80067f2:	1852      	addeq	r2, r2, r1
 80067f4:	6022      	streq	r2, [r4, #0]
 80067f6:	602c      	str	r4, [r5, #0]
 80067f8:	e7ec      	b.n	80067d4 <_free_r+0x28>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x58>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x4e>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1855      	adds	r5, r2, r1
 8006808:	42a5      	cmp	r5, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x78>
 800680c:	6824      	ldr	r4, [r4, #0]
 800680e:	4421      	add	r1, r4
 8006810:	1854      	adds	r4, r2, r1
 8006812:	42a3      	cmp	r3, r4
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1dd      	bne.n	80067d4 <_free_r+0x28>
 8006818:	681c      	ldr	r4, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4421      	add	r1, r4
 8006820:	6011      	str	r1, [r2, #0]
 8006822:	e7d7      	b.n	80067d4 <_free_r+0x28>
 8006824:	d902      	bls.n	800682c <_free_r+0x80>
 8006826:	230c      	movs	r3, #12
 8006828:	6003      	str	r3, [r0, #0]
 800682a:	e7d3      	b.n	80067d4 <_free_r+0x28>
 800682c:	6825      	ldr	r5, [r4, #0]
 800682e:	1961      	adds	r1, r4, r5
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1949      	addeq	r1, r1, r5
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7c7      	b.n	80067d4 <_free_r+0x28>
 8006844:	b003      	add	sp, #12
 8006846:	bd30      	pop	{r4, r5, pc}
 8006848:	200001c0 	.word	0x200001c0

0800684c <_read_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d07      	ldr	r5, [pc, #28]	; (800686c <_read_r+0x20>)
 8006850:	4604      	mov	r4, r0
 8006852:	4608      	mov	r0, r1
 8006854:	4611      	mov	r1, r2
 8006856:	2200      	movs	r2, #0
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fa fada 	bl	8000e14 <_read>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_read_r+0x1e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_read_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	200002c4 	.word	0x200002c4

08006870 <_fstat_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	; (8006890 <_fstat_r+0x20>)
 8006874:	2300      	movs	r3, #0
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	f7fa faf2 	bl	8000e66 <_fstat>
 8006882:	1c43      	adds	r3, r0, #1
 8006884:	d102      	bne.n	800688c <_fstat_r+0x1c>
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	b103      	cbz	r3, 800688c <_fstat_r+0x1c>
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	bf00      	nop
 8006890:	200002c4 	.word	0x200002c4

08006894 <_isatty_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d06      	ldr	r5, [pc, #24]	; (80068b0 <_isatty_r+0x1c>)
 8006898:	2300      	movs	r3, #0
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	602b      	str	r3, [r5, #0]
 80068a0:	f7fa faf1 	bl	8000e86 <_isatty>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_isatty_r+0x1a>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_isatty_r+0x1a>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	200002c4 	.word	0x200002c4

080068b4 <_init>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr

080068c0 <_fini>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	bf00      	nop
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr
