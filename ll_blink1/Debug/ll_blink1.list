
ll_blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005bc  080005bc  000015bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c0  080005c0  000015c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005c4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005c8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005c8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c41  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000acf  00000000  00000000  00004c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000ab4  00000000  00000000  00005744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  000061f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001fc  00000000  00000000  00006370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc60  00000000  00000000  0000656c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002858  00000000  00000000  000161cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005b8ad  00000000  00000000  00018a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000742d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002b0  00000000  00000000  00074314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000745c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005a4 	.word	0x080005a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080005a4 	.word	0x080005a4

080001d8 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <LL_AHB1_GRP1_EnableClock+0x18>)
 80001da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80001dc:	4302      	orrs	r2, r0
{
 80001de:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e4:	4003      	ands	r3, r0
 80001e6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80001e8:	9b01      	ldr	r3, [sp, #4]
}
 80001ea:	b002      	add	sp, #8
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40023800 	.word	0x40023800

080001f4 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80001f4:	4a29      	ldr	r2, [pc, #164]	@ (800029c <SystemClock_Config+0xa8>)
 80001f6:	6813      	ldr	r3, [r2, #0]
 80001f8:	f023 0307 	bic.w	r3, r3, #7
 80001fc:	f043 0303 	orr.w	r3, r3, #3
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b510      	push	{r4, lr}
 8000202:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000204:	6813      	ldr	r3, [r2, #0]
 8000206:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800020a:	2b03      	cmp	r3, #3
 800020c:	d1fa      	bne.n	8000204 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800020e:	4a24      	ldr	r2, [pc, #144]	@ (80002a0 <SystemClock_Config+0xac>)
 8000210:	6813      	ldr	r3, [r2, #0]
 8000212:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000216:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000218:	4b22      	ldr	r3, [pc, #136]	@ (80002a4 <SystemClock_Config+0xb0>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000220:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000222:	681a      	ldr	r2, [r3, #0]
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000224:	0391      	lsls	r1, r2, #14
 8000226:	d5fc      	bpl.n	8000222 <SystemClock_Config+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000228:	685a      	ldr	r2, [r3, #4]
 800022a:	491f      	ldr	r1, [pc, #124]	@ (80002a8 <SystemClock_Config+0xb4>)
 800022c:	4011      	ands	r1, r2
 800022e:	4a1f      	ldr	r2, [pc, #124]	@ (80002ac <SystemClock_Config+0xb8>)
 8000230:	430a      	orrs	r2, r1
 8000232:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800023a:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000242:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000244:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <SystemClock_Config+0xb0>)
 8000246:	681a      	ldr	r2, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_25, 192, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000248:	0192      	lsls	r2, r2, #6
 800024a:	d5fc      	bpl.n	8000246 <SystemClock_Config+0x52>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800024c:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800024e:	4c15      	ldr	r4, [pc, #84]	@ (80002a4 <SystemClock_Config+0xb0>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000250:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000254:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800025c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000260:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000262:	689a      	ldr	r2, [r3, #8]
 8000264:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000268:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	f022 0203 	bic.w	r2, r2, #3
 8000270:	f042 0202 	orr.w	r2, r2, #2
 8000274:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000276:	68a3      	ldr	r3, [r4, #8]
 8000278:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800027c:	2b08      	cmp	r3, #8
 800027e:	d1fa      	bne.n	8000276 <SystemClock_Config+0x82>
  {

  }
  LL_Init1msTick(96000000);
 8000280:	480b      	ldr	r0, [pc, #44]	@ (80002b0 <SystemClock_Config+0xbc>)
 8000282:	f000 f957 	bl	8000534 <LL_Init1msTick>
  LL_SetSystemCoreClock(96000000);
 8000286:	480a      	ldr	r0, [pc, #40]	@ (80002b0 <SystemClock_Config+0xbc>)
 8000288:	f000 f962 	bl	8000550 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800028c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8000290:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000294:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
}
 8000298:	bd10      	pop	{r4, pc}
 800029a:	bf00      	nop
 800029c:	40023c00 	.word	0x40023c00
 80002a0:	40007000 	.word	0x40007000
 80002a4:	40023800 	.word	0x40023800
 80002a8:	ffbf8000 	.word	0xffbf8000
 80002ac:	00403019 	.word	0x00403019
 80002b0:	05b8d800 	.word	0x05b8d800

080002b4 <main>:
{
 80002b4:	b530      	push	{r4, r5, lr}
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002b6:	4b26      	ldr	r3, [pc, #152]	@ (8000350 <main+0x9c>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b8:	4926      	ldr	r1, [pc, #152]	@ (8000354 <main+0xa0>)
 80002ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002bc:	4d26      	ldr	r5, [pc, #152]	@ (8000358 <main+0xa4>)
 80002be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80002c2:	b089      	sub	sp, #36	@ 0x24
 80002c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80002c8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80002cc:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80002ce:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80002d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80002d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80002d6:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80002d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002de:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80002e0:	9b00      	ldr	r3, [sp, #0]
 80002e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002e4:	4b1d      	ldr	r3, [pc, #116]	@ (800035c <main+0xa8>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80002ea:	0412      	lsls	r2, r2, #16
 80002ec:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 80002ee:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80002f0:	60cb      	str	r3, [r1, #12]
  SystemClock_Config();
 80002f2:	f7ff ff7f 	bl	80001f4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80002f8:	2004      	movs	r0, #4
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	9407      	str	r4, [sp, #28]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80002fc:	f7ff ff6c 	bl	80001d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000300:	2080      	movs	r0, #128	@ 0x80
 8000302:	f7ff ff69 	bl	80001d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000306:	2001      	movs	r0, #1
 8000308:	f7ff ff66 	bl	80001d8 <LL_AHB1_GRP1_EnableClock>
 800030c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000310:	61ab      	str	r3, [r5, #24]
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000312:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000314:	e9cd 3002 	strd	r3, r0, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000318:	e9cd 4004 	strd	r4, r0, [sp, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800031c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800031e:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000320:	f000 f867 	bl	80003f2 <LL_GPIO_Init>
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000324:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000328:	6913      	ldr	r3, [r2, #16]
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6113      	str	r3, [r2, #16]
        now = get_systick_counter();
 8000330:	f000 f826 	bl	8000380 <get_systick_counter>
        if (now - then >= 100) {
 8000334:	1b03      	subs	r3, r0, r4
 8000336:	2b63      	cmp	r3, #99	@ 0x63
 8000338:	d9fa      	bls.n	8000330 <main+0x7c>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 800033a:	696b      	ldr	r3, [r5, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800033c:	041a      	lsls	r2, r3, #16
 800033e:	43db      	mvns	r3, r3
 8000340:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000348:	4313      	orrs	r3, r2
 800034a:	61ab      	str	r3, [r5, #24]
            then = now;
 800034c:	4604      	mov	r4, r0
}
 800034e:	e7ef      	b.n	8000330 <main+0x7c>
 8000350:	40023800 	.word	0x40023800
 8000354:	e000ed00 	.word	0xe000ed00
 8000358:	40020800 	.word	0x40020800
 800035c:	05fa0300 	.word	0x05fa0300

08000360 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <NMI_Handler>

08000362 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <HardFault_Handler>

08000364 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <MemManage_Handler>

08000366 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <BusFault_Handler>

08000368 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <UsageFault_Handler>

0800036a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036a:	4770      	bx	lr

0800036c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800036c:	4770      	bx	lr

0800036e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800036e:	4770      	bx	lr

08000370 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  // Just increase the systick variable
  systick_counter++;
 8000370:	4a02      	ldr	r2, [pc, #8]	@ (800037c <SysTick_Handler+0xc>)
 8000372:	6813      	ldr	r3, [r2, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000020 	.word	0x20000020

08000380 <get_systick_counter>:
/* USER CODE BEGIN 1 */

uint32_t get_systick_counter() {
	// Return current value of systick_counter variable
	return systick_counter;
}
 8000380:	4b01      	ldr	r3, [pc, #4]	@ (8000388 <get_systick_counter+0x8>)
 8000382:	6818      	ldr	r0, [r3, #0]
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20000020 	.word	0x20000020

0800038c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800038c:	4a03      	ldr	r2, [pc, #12]	@ (800039c <SystemInit+0x10>)
 800038e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000396:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003a4:	480d      	ldr	r0, [pc, #52]	@ (80003dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003a6:	490e      	ldr	r1, [pc, #56]	@ (80003e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003a8:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0b      	ldr	r2, [pc, #44]	@ (80003e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003bc:	4c0b      	ldr	r4, [pc, #44]	@ (80003ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ca:	f7ff ffdf 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ce:	f000 f8c5 	bl	800055c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003d2:	f7ff ff6f 	bl	80002b4 <main>
  bx  lr    
 80003d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003e4:	080005c4 	.word	0x080005c4
  ldr r2, =_sbss
 80003e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003ec:	20000024 	.word	0x20000024

080003f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>

080003f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f6:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003f8:	680d      	ldr	r5, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	fa95 f4a5 	rbit	r4, r5
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003fe:	f04f 0c01 	mov.w	ip, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000402:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000406:	2603      	movs	r6, #3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000408:	fa35 f004 	lsrs.w	r0, r5, r4
 800040c:	d101      	bne.n	8000412 <LL_GPIO_Init+0x20>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000412:	fa0c f304 	lsl.w	r3, ip, r4
    if (currentpin)
 8000416:	402b      	ands	r3, r5
 8000418:	d06f      	beq.n	80004fa <LL_GPIO_Init+0x108>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800041a:	6848      	ldr	r0, [r1, #4]
 800041c:	1e47      	subs	r7, r0, #1
 800041e:	2f01      	cmp	r7, #1
 8000420:	d81e      	bhi.n	8000460 <LL_GPIO_Init+0x6e>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000422:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8000426:	fa93 f7a3 	rbit	r7, r3
 800042a:	fab7 f787 	clz	r7, r7
 800042e:	fa93 f8a3 	rbit	r8, r3
 8000432:	007f      	lsls	r7, r7, #1
 8000434:	fa06 f707 	lsl.w	r7, r6, r7
 8000438:	ea2e 0e07 	bic.w	lr, lr, r7
 800043c:	fab8 f888 	clz	r8, r8
 8000440:	688f      	ldr	r7, [r1, #8]
 8000442:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000446:	fa07 f708 	lsl.w	r7, r7, r8
 800044a:	ea4e 0707 	orr.w	r7, lr, r7
 800044e:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000450:	6857      	ldr	r7, [r2, #4]
 8000452:	ea27 0e03 	bic.w	lr, r7, r3
 8000456:	68cf      	ldr	r7, [r1, #12]
 8000458:	435f      	muls	r7, r3
 800045a:	ea4e 0707 	orr.w	r7, lr, r7
 800045e:	6057      	str	r7, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000460:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8000464:	fa93 f7a3 	rbit	r7, r3
 8000468:	fab7 f787 	clz	r7, r7
 800046c:	fa93 f8a3 	rbit	r8, r3
 8000470:	007f      	lsls	r7, r7, #1
 8000472:	fa06 f707 	lsl.w	r7, r6, r7
 8000476:	ea2e 0e07 	bic.w	lr, lr, r7
 800047a:	fab8 f888 	clz	r8, r8
 800047e:	690f      	ldr	r7, [r1, #16]
 8000480:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000484:	fa07 f708 	lsl.w	r7, r7, r8
 8000488:	ea4e 0707 	orr.w	r7, lr, r7
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800048c:	2802      	cmp	r0, #2
 800048e:	60d7      	str	r7, [r2, #12]
 8000490:	d11f      	bne.n	80004d2 <LL_GPIO_Init+0xe0>
 8000492:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000496:	fab7 f787 	clz	r7, r7
 800049a:	2f07      	cmp	r7, #7
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800049c:	f8d1 8014 	ldr.w	r8, [r1, #20]
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80004a0:	dc2d      	bgt.n	80004fe <LL_GPIO_Init+0x10c>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80004a2:	6a17      	ldr	r7, [r2, #32]
 80004a4:	fa93 f9a3 	rbit	r9, r3
 80004a8:	fab9 f989 	clz	r9, r9
 80004ac:	fa93 fea3 	rbit	lr, r3
 80004b0:	f04f 0a0f 	mov.w	sl, #15
 80004b4:	fabe fe8e 	clz	lr, lr
 80004b8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80004bc:	fa0a f909 	lsl.w	r9, sl, r9
 80004c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80004c4:	ea27 0709 	bic.w	r7, r7, r9
 80004c8:	fa08 fe0e 	lsl.w	lr, r8, lr
 80004cc:	ea47 070e 	orr.w	r7, r7, lr
 80004d0:	6217      	str	r7, [r2, #32]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80004d2:	f8d2 e000 	ldr.w	lr, [r2]
 80004d6:	fa93 f7a3 	rbit	r7, r3
 80004da:	fab7 f787 	clz	r7, r7
 80004de:	fa93 f3a3 	rbit	r3, r3
 80004e2:	fab3 f383 	clz	r3, r3
 80004e6:	007f      	lsls	r7, r7, #1
 80004e8:	fa06 f707 	lsl.w	r7, r6, r7
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	ea2e 0e07 	bic.w	lr, lr, r7
 80004f2:	4098      	lsls	r0, r3
 80004f4:	ea4e 0000 	orr.w	r0, lr, r0
 80004f8:	6010      	str	r0, [r2, #0]
    pinpos++;
 80004fa:	3401      	adds	r4, #1
 80004fc:	e784      	b.n	8000408 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80004fe:	6a57      	ldr	r7, [r2, #36]	@ 0x24
 8000500:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8000504:	fa99 fea9 	rbit	lr, r9
 8000508:	fabe fe8e 	clz	lr, lr
 800050c:	fa99 f9a9 	rbit	r9, r9
 8000510:	f04f 0a0f 	mov.w	sl, #15
 8000514:	fab9 f989 	clz	r9, r9
 8000518:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800051c:	fa0a fe0e 	lsl.w	lr, sl, lr
 8000520:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000524:	ea27 070e 	bic.w	r7, r7, lr
 8000528:	fa08 f809 	lsl.w	r8, r8, r9
 800052c:	ea47 0708 	orr.w	r7, r7, r8
 8000530:	6257      	str	r7, [r2, #36]	@ 0x24
}
 8000532:	e7ce      	b.n	80004d2 <LL_GPIO_Init+0xe0>

08000534 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000534:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000538:	fbb0 f0f3 	udiv	r0, r0, r3
 800053c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000540:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000542:	3801      	subs	r0, #1
 8000544:	6158      	str	r0, [r3, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000546:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000548:	2205      	movs	r2, #5
 800054a:	611a      	str	r2, [r3, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800054c:	4770      	bx	lr
	...

08000550 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000550:	4b01      	ldr	r3, [pc, #4]	@ (8000558 <LL_SetSystemCoreClock+0x8>)
 8000552:	6018      	str	r0, [r3, #0]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000000 	.word	0x20000000

0800055c <__libc_init_array>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	4d0d      	ldr	r5, [pc, #52]	@ (8000594 <__libc_init_array+0x38>)
 8000560:	4c0d      	ldr	r4, [pc, #52]	@ (8000598 <__libc_init_array+0x3c>)
 8000562:	1b64      	subs	r4, r4, r5
 8000564:	10a4      	asrs	r4, r4, #2
 8000566:	2600      	movs	r6, #0
 8000568:	42a6      	cmp	r6, r4
 800056a:	d109      	bne.n	8000580 <__libc_init_array+0x24>
 800056c:	4d0b      	ldr	r5, [pc, #44]	@ (800059c <__libc_init_array+0x40>)
 800056e:	4c0c      	ldr	r4, [pc, #48]	@ (80005a0 <__libc_init_array+0x44>)
 8000570:	f000 f818 	bl	80005a4 <_init>
 8000574:	1b64      	subs	r4, r4, r5
 8000576:	10a4      	asrs	r4, r4, #2
 8000578:	2600      	movs	r6, #0
 800057a:	42a6      	cmp	r6, r4
 800057c:	d105      	bne.n	800058a <__libc_init_array+0x2e>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	f855 3b04 	ldr.w	r3, [r5], #4
 8000584:	4798      	blx	r3
 8000586:	3601      	adds	r6, #1
 8000588:	e7ee      	b.n	8000568 <__libc_init_array+0xc>
 800058a:	f855 3b04 	ldr.w	r3, [r5], #4
 800058e:	4798      	blx	r3
 8000590:	3601      	adds	r6, #1
 8000592:	e7f2      	b.n	800057a <__libc_init_array+0x1e>
 8000594:	080005bc 	.word	0x080005bc
 8000598:	080005bc 	.word	0x080005bc
 800059c:	080005bc 	.word	0x080005bc
 80005a0:	080005c0 	.word	0x080005c0

080005a4 <_init>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr

080005b0 <_fini>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr
