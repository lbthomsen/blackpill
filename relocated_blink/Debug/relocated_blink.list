
relocated_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004850  08008198  08008198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800c9e8  0800c9e8  0000c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9f8  0800c9f8  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9f8  0800c9f8  0000c9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca00  0800ca00  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca00  0800ca00  0000ca00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca04  0800ca04  0000ca04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800ca08  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000000c  0800ca14  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800ca14  00010438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d978  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002277  00000000  00000000  0001d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0001fc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  000205d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d60  00000000  00000000  00020e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7a8  00000000  00000000  00037be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863aa  00000000  00000000  00043390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c973a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000c9790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008198 <__do_global_dtors_aux>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4c05      	ldr	r4, [pc, #20]	; (80081b0 <__do_global_dtors_aux+0x18>)
 800819c:	7823      	ldrb	r3, [r4, #0]
 800819e:	b933      	cbnz	r3, 80081ae <__do_global_dtors_aux+0x16>
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x1c>)
 80081a2:	b113      	cbz	r3, 80081aa <__do_global_dtors_aux+0x12>
 80081a4:	4804      	ldr	r0, [pc, #16]	; (80081b8 <__do_global_dtors_aux+0x20>)
 80081a6:	f3af 8000 	nop.w
 80081aa:	2301      	movs	r3, #1
 80081ac:	7023      	strb	r3, [r4, #0]
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	00000000 	.word	0x00000000
 80081b8:	0800c9d0 	.word	0x0800c9d0

080081bc <frame_dummy>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	4b03      	ldr	r3, [pc, #12]	; (80081cc <frame_dummy+0x10>)
 80081c0:	b11b      	cbz	r3, 80081ca <frame_dummy+0xe>
 80081c2:	4903      	ldr	r1, [pc, #12]	; (80081d0 <frame_dummy+0x14>)
 80081c4:	4803      	ldr	r0, [pc, #12]	; (80081d4 <frame_dummy+0x18>)
 80081c6:	f3af 8000 	nop.w
 80081ca:	bd08      	pop	{r3, pc}
 80081cc:	00000000 	.word	0x00000000
 80081d0:	20000010 	.word	0x20000010
 80081d4:	0800c9d0 	.word	0x0800c9d0

080081d8 <__aeabi_uldivmod>:
 80081d8:	b953      	cbnz	r3, 80081f0 <__aeabi_uldivmod+0x18>
 80081da:	b94a      	cbnz	r2, 80081f0 <__aeabi_uldivmod+0x18>
 80081dc:	2900      	cmp	r1, #0
 80081de:	bf08      	it	eq
 80081e0:	2800      	cmpeq	r0, #0
 80081e2:	bf1c      	itt	ne
 80081e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80081e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80081ec:	f000 b96e 	b.w	80084cc <__aeabi_idiv0>
 80081f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081f8:	f000 f806 	bl	8008208 <__udivmoddi4>
 80081fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008204:	b004      	add	sp, #16
 8008206:	4770      	bx	lr

08008208 <__udivmoddi4>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	9d08      	ldr	r5, [sp, #32]
 800820e:	4604      	mov	r4, r0
 8008210:	468c      	mov	ip, r1
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 8083 	bne.w	800831e <__udivmoddi4+0x116>
 8008218:	428a      	cmp	r2, r1
 800821a:	4617      	mov	r7, r2
 800821c:	d947      	bls.n	80082ae <__udivmoddi4+0xa6>
 800821e:	fab2 f282 	clz	r2, r2
 8008222:	b142      	cbz	r2, 8008236 <__udivmoddi4+0x2e>
 8008224:	f1c2 0020 	rsb	r0, r2, #32
 8008228:	fa24 f000 	lsr.w	r0, r4, r0
 800822c:	4091      	lsls	r1, r2
 800822e:	4097      	lsls	r7, r2
 8008230:	ea40 0c01 	orr.w	ip, r0, r1
 8008234:	4094      	lsls	r4, r2
 8008236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800823a:	0c23      	lsrs	r3, r4, #16
 800823c:	fbbc f6f8 	udiv	r6, ip, r8
 8008240:	fa1f fe87 	uxth.w	lr, r7
 8008244:	fb08 c116 	mls	r1, r8, r6, ip
 8008248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800824c:	fb06 f10e 	mul.w	r1, r6, lr
 8008250:	4299      	cmp	r1, r3
 8008252:	d909      	bls.n	8008268 <__udivmoddi4+0x60>
 8008254:	18fb      	adds	r3, r7, r3
 8008256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800825a:	f080 8119 	bcs.w	8008490 <__udivmoddi4+0x288>
 800825e:	4299      	cmp	r1, r3
 8008260:	f240 8116 	bls.w	8008490 <__udivmoddi4+0x288>
 8008264:	3e02      	subs	r6, #2
 8008266:	443b      	add	r3, r7
 8008268:	1a5b      	subs	r3, r3, r1
 800826a:	b2a4      	uxth	r4, r4
 800826c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008270:	fb08 3310 	mls	r3, r8, r0, r3
 8008274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008278:	fb00 fe0e 	mul.w	lr, r0, lr
 800827c:	45a6      	cmp	lr, r4
 800827e:	d909      	bls.n	8008294 <__udivmoddi4+0x8c>
 8008280:	193c      	adds	r4, r7, r4
 8008282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008286:	f080 8105 	bcs.w	8008494 <__udivmoddi4+0x28c>
 800828a:	45a6      	cmp	lr, r4
 800828c:	f240 8102 	bls.w	8008494 <__udivmoddi4+0x28c>
 8008290:	3802      	subs	r0, #2
 8008292:	443c      	add	r4, r7
 8008294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008298:	eba4 040e 	sub.w	r4, r4, lr
 800829c:	2600      	movs	r6, #0
 800829e:	b11d      	cbz	r5, 80082a8 <__udivmoddi4+0xa0>
 80082a0:	40d4      	lsrs	r4, r2
 80082a2:	2300      	movs	r3, #0
 80082a4:	e9c5 4300 	strd	r4, r3, [r5]
 80082a8:	4631      	mov	r1, r6
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	b902      	cbnz	r2, 80082b2 <__udivmoddi4+0xaa>
 80082b0:	deff      	udf	#255	; 0xff
 80082b2:	fab2 f282 	clz	r2, r2
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	d150      	bne.n	800835c <__udivmoddi4+0x154>
 80082ba:	1bcb      	subs	r3, r1, r7
 80082bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80082c0:	fa1f f887 	uxth.w	r8, r7
 80082c4:	2601      	movs	r6, #1
 80082c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80082ca:	0c21      	lsrs	r1, r4, #16
 80082cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80082d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80082d4:	fb08 f30c 	mul.w	r3, r8, ip
 80082d8:	428b      	cmp	r3, r1
 80082da:	d907      	bls.n	80082ec <__udivmoddi4+0xe4>
 80082dc:	1879      	adds	r1, r7, r1
 80082de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80082e2:	d202      	bcs.n	80082ea <__udivmoddi4+0xe2>
 80082e4:	428b      	cmp	r3, r1
 80082e6:	f200 80e9 	bhi.w	80084bc <__udivmoddi4+0x2b4>
 80082ea:	4684      	mov	ip, r0
 80082ec:	1ac9      	subs	r1, r1, r3
 80082ee:	b2a3      	uxth	r3, r4
 80082f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80082f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80082f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80082fc:	fb08 f800 	mul.w	r8, r8, r0
 8008300:	45a0      	cmp	r8, r4
 8008302:	d907      	bls.n	8008314 <__udivmoddi4+0x10c>
 8008304:	193c      	adds	r4, r7, r4
 8008306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800830a:	d202      	bcs.n	8008312 <__udivmoddi4+0x10a>
 800830c:	45a0      	cmp	r8, r4
 800830e:	f200 80d9 	bhi.w	80084c4 <__udivmoddi4+0x2bc>
 8008312:	4618      	mov	r0, r3
 8008314:	eba4 0408 	sub.w	r4, r4, r8
 8008318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800831c:	e7bf      	b.n	800829e <__udivmoddi4+0x96>
 800831e:	428b      	cmp	r3, r1
 8008320:	d909      	bls.n	8008336 <__udivmoddi4+0x12e>
 8008322:	2d00      	cmp	r5, #0
 8008324:	f000 80b1 	beq.w	800848a <__udivmoddi4+0x282>
 8008328:	2600      	movs	r6, #0
 800832a:	e9c5 0100 	strd	r0, r1, [r5]
 800832e:	4630      	mov	r0, r6
 8008330:	4631      	mov	r1, r6
 8008332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008336:	fab3 f683 	clz	r6, r3
 800833a:	2e00      	cmp	r6, #0
 800833c:	d14a      	bne.n	80083d4 <__udivmoddi4+0x1cc>
 800833e:	428b      	cmp	r3, r1
 8008340:	d302      	bcc.n	8008348 <__udivmoddi4+0x140>
 8008342:	4282      	cmp	r2, r0
 8008344:	f200 80b8 	bhi.w	80084b8 <__udivmoddi4+0x2b0>
 8008348:	1a84      	subs	r4, r0, r2
 800834a:	eb61 0103 	sbc.w	r1, r1, r3
 800834e:	2001      	movs	r0, #1
 8008350:	468c      	mov	ip, r1
 8008352:	2d00      	cmp	r5, #0
 8008354:	d0a8      	beq.n	80082a8 <__udivmoddi4+0xa0>
 8008356:	e9c5 4c00 	strd	r4, ip, [r5]
 800835a:	e7a5      	b.n	80082a8 <__udivmoddi4+0xa0>
 800835c:	f1c2 0320 	rsb	r3, r2, #32
 8008360:	fa20 f603 	lsr.w	r6, r0, r3
 8008364:	4097      	lsls	r7, r2
 8008366:	fa01 f002 	lsl.w	r0, r1, r2
 800836a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800836e:	40d9      	lsrs	r1, r3
 8008370:	4330      	orrs	r0, r6
 8008372:	0c03      	lsrs	r3, r0, #16
 8008374:	fbb1 f6fe 	udiv	r6, r1, lr
 8008378:	fa1f f887 	uxth.w	r8, r7
 800837c:	fb0e 1116 	mls	r1, lr, r6, r1
 8008380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008384:	fb06 f108 	mul.w	r1, r6, r8
 8008388:	4299      	cmp	r1, r3
 800838a:	fa04 f402 	lsl.w	r4, r4, r2
 800838e:	d909      	bls.n	80083a4 <__udivmoddi4+0x19c>
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8008396:	f080 808d 	bcs.w	80084b4 <__udivmoddi4+0x2ac>
 800839a:	4299      	cmp	r1, r3
 800839c:	f240 808a 	bls.w	80084b4 <__udivmoddi4+0x2ac>
 80083a0:	3e02      	subs	r6, #2
 80083a2:	443b      	add	r3, r7
 80083a4:	1a5b      	subs	r3, r3, r1
 80083a6:	b281      	uxth	r1, r0
 80083a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80083ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80083b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80083b4:	fb00 f308 	mul.w	r3, r0, r8
 80083b8:	428b      	cmp	r3, r1
 80083ba:	d907      	bls.n	80083cc <__udivmoddi4+0x1c4>
 80083bc:	1879      	adds	r1, r7, r1
 80083be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80083c2:	d273      	bcs.n	80084ac <__udivmoddi4+0x2a4>
 80083c4:	428b      	cmp	r3, r1
 80083c6:	d971      	bls.n	80084ac <__udivmoddi4+0x2a4>
 80083c8:	3802      	subs	r0, #2
 80083ca:	4439      	add	r1, r7
 80083cc:	1acb      	subs	r3, r1, r3
 80083ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80083d2:	e778      	b.n	80082c6 <__udivmoddi4+0xbe>
 80083d4:	f1c6 0c20 	rsb	ip, r6, #32
 80083d8:	fa03 f406 	lsl.w	r4, r3, r6
 80083dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80083e0:	431c      	orrs	r4, r3
 80083e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80083e6:	fa01 f306 	lsl.w	r3, r1, r6
 80083ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80083ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80083f2:	431f      	orrs	r7, r3
 80083f4:	0c3b      	lsrs	r3, r7, #16
 80083f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80083fa:	fa1f f884 	uxth.w	r8, r4
 80083fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8008402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8008406:	fb09 fa08 	mul.w	sl, r9, r8
 800840a:	458a      	cmp	sl, r1
 800840c:	fa02 f206 	lsl.w	r2, r2, r6
 8008410:	fa00 f306 	lsl.w	r3, r0, r6
 8008414:	d908      	bls.n	8008428 <__udivmoddi4+0x220>
 8008416:	1861      	adds	r1, r4, r1
 8008418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800841c:	d248      	bcs.n	80084b0 <__udivmoddi4+0x2a8>
 800841e:	458a      	cmp	sl, r1
 8008420:	d946      	bls.n	80084b0 <__udivmoddi4+0x2a8>
 8008422:	f1a9 0902 	sub.w	r9, r9, #2
 8008426:	4421      	add	r1, r4
 8008428:	eba1 010a 	sub.w	r1, r1, sl
 800842c:	b2bf      	uxth	r7, r7
 800842e:	fbb1 f0fe 	udiv	r0, r1, lr
 8008432:	fb0e 1110 	mls	r1, lr, r0, r1
 8008436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800843a:	fb00 f808 	mul.w	r8, r0, r8
 800843e:	45b8      	cmp	r8, r7
 8008440:	d907      	bls.n	8008452 <__udivmoddi4+0x24a>
 8008442:	19e7      	adds	r7, r4, r7
 8008444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8008448:	d22e      	bcs.n	80084a8 <__udivmoddi4+0x2a0>
 800844a:	45b8      	cmp	r8, r7
 800844c:	d92c      	bls.n	80084a8 <__udivmoddi4+0x2a0>
 800844e:	3802      	subs	r0, #2
 8008450:	4427      	add	r7, r4
 8008452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008456:	eba7 0708 	sub.w	r7, r7, r8
 800845a:	fba0 8902 	umull	r8, r9, r0, r2
 800845e:	454f      	cmp	r7, r9
 8008460:	46c6      	mov	lr, r8
 8008462:	4649      	mov	r1, r9
 8008464:	d31a      	bcc.n	800849c <__udivmoddi4+0x294>
 8008466:	d017      	beq.n	8008498 <__udivmoddi4+0x290>
 8008468:	b15d      	cbz	r5, 8008482 <__udivmoddi4+0x27a>
 800846a:	ebb3 020e 	subs.w	r2, r3, lr
 800846e:	eb67 0701 	sbc.w	r7, r7, r1
 8008472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008476:	40f2      	lsrs	r2, r6
 8008478:	ea4c 0202 	orr.w	r2, ip, r2
 800847c:	40f7      	lsrs	r7, r6
 800847e:	e9c5 2700 	strd	r2, r7, [r5]
 8008482:	2600      	movs	r6, #0
 8008484:	4631      	mov	r1, r6
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	462e      	mov	r6, r5
 800848c:	4628      	mov	r0, r5
 800848e:	e70b      	b.n	80082a8 <__udivmoddi4+0xa0>
 8008490:	4606      	mov	r6, r0
 8008492:	e6e9      	b.n	8008268 <__udivmoddi4+0x60>
 8008494:	4618      	mov	r0, r3
 8008496:	e6fd      	b.n	8008294 <__udivmoddi4+0x8c>
 8008498:	4543      	cmp	r3, r8
 800849a:	d2e5      	bcs.n	8008468 <__udivmoddi4+0x260>
 800849c:	ebb8 0e02 	subs.w	lr, r8, r2
 80084a0:	eb69 0104 	sbc.w	r1, r9, r4
 80084a4:	3801      	subs	r0, #1
 80084a6:	e7df      	b.n	8008468 <__udivmoddi4+0x260>
 80084a8:	4608      	mov	r0, r1
 80084aa:	e7d2      	b.n	8008452 <__udivmoddi4+0x24a>
 80084ac:	4660      	mov	r0, ip
 80084ae:	e78d      	b.n	80083cc <__udivmoddi4+0x1c4>
 80084b0:	4681      	mov	r9, r0
 80084b2:	e7b9      	b.n	8008428 <__udivmoddi4+0x220>
 80084b4:	4666      	mov	r6, ip
 80084b6:	e775      	b.n	80083a4 <__udivmoddi4+0x19c>
 80084b8:	4630      	mov	r0, r6
 80084ba:	e74a      	b.n	8008352 <__udivmoddi4+0x14a>
 80084bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80084c0:	4439      	add	r1, r7
 80084c2:	e713      	b.n	80082ec <__udivmoddi4+0xe4>
 80084c4:	3802      	subs	r0, #2
 80084c6:	443c      	add	r4, r7
 80084c8:	e724      	b.n	8008314 <__udivmoddi4+0x10c>
 80084ca:	bf00      	nop

080084cc <__aeabi_idiv0>:
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084d6:	f000 f993 	bl	8008800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084da:	f000 f825 	bl	8008528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084de:	f000 f88b 	bl	80085f8 <MX_GPIO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, then = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	2300      	movs	r3, #0
 80084e8:	607b      	str	r3, [r7, #4]

  while (1)
  {

	now = HAL_GetTick();
 80084ea:	f000 f9ef 	bl	80088cc <HAL_GetTick>
 80084ee:	6038      	str	r0, [r7, #0]
	if (now % 500 == 0 && now != then)
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <main+0x50>)
 80084f4:	fba3 1302 	umull	r1, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80084fe:	fb01 f303 	mul.w	r3, r1, r3
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1f0      	bne.n	80084ea <main+0x1a>
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	429a      	cmp	r2, r3
 800850e:	d0ec      	beq.n	80084ea <main+0x1a>
	{

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8008510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008514:	4803      	ldr	r0, [pc, #12]	; (8008524 <main+0x54>)
 8008516:	f000 fc68 	bl	8008dea <HAL_GPIO_TogglePin>

		then = now;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	607b      	str	r3, [r7, #4]
	now = HAL_GetTick();
 800851e:	e7e4      	b.n	80084ea <main+0x1a>
 8008520:	10624dd3 	.word	0x10624dd3
 8008524:	40020800 	.word	0x40020800

08008528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b094      	sub	sp, #80	; 0x50
 800852c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800852e:	f107 0320 	add.w	r3, r7, #32
 8008532:	2230      	movs	r2, #48	; 0x30
 8008534:	2100      	movs	r1, #0
 8008536:	4618      	mov	r0, r3
 8008538:	f004 fa42 	bl	800c9c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800853c:	f107 030c 	add.w	r3, r7, #12
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800854c:	2300      	movs	r3, #0
 800854e:	60bb      	str	r3, [r7, #8]
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <SystemClock_Config+0xc8>)
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	4a26      	ldr	r2, [pc, #152]	; (80085f0 <SystemClock_Config+0xc8>)
 8008556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800855a:	6413      	str	r3, [r2, #64]	; 0x40
 800855c:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <SystemClock_Config+0xc8>)
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008564:	60bb      	str	r3, [r7, #8]
 8008566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008568:	2300      	movs	r3, #0
 800856a:	607b      	str	r3, [r7, #4]
 800856c:	4b21      	ldr	r3, [pc, #132]	; (80085f4 <SystemClock_Config+0xcc>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a20      	ldr	r2, [pc, #128]	; (80085f4 <SystemClock_Config+0xcc>)
 8008572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4b1e      	ldr	r3, [pc, #120]	; (80085f4 <SystemClock_Config+0xcc>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008580:	607b      	str	r3, [r7, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008584:	2301      	movs	r3, #1
 8008586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800858e:	2302      	movs	r3, #2
 8008590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8008598:	2319      	movs	r3, #25
 800859a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800859c:	23c0      	movs	r3, #192	; 0xc0
 800859e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085a0:	2302      	movs	r3, #2
 80085a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80085a4:	2304      	movs	r3, #4
 80085a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085a8:	f107 0320 	add.w	r3, r7, #32
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fbaf 	bl	8009d10 <HAL_RCC_OscConfig>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80085b8:	f000 f880 	bl	80086bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085bc:	230f      	movs	r3, #15
 80085be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085c0:	2302      	movs	r3, #2
 80085c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80085c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	2103      	movs	r1, #3
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 fe11 	bl	800a200 <HAL_RCC_ClockConfig>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80085e4:	f000 f86a 	bl	80086bc <Error_Handler>
  }
}
 80085e8:	bf00      	nop
 80085ea:	3750      	adds	r7, #80	; 0x50
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	40023800 	.word	0x40023800
 80085f4:	40007000 	.word	0x40007000

080085f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085fe:	f107 030c 	add.w	r3, r7, #12
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	605a      	str	r2, [r3, #4]
 8008608:	609a      	str	r2, [r3, #8]
 800860a:	60da      	str	r2, [r3, #12]
 800860c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	4b26      	ldr	r3, [pc, #152]	; (80086ac <MX_GPIO_Init+0xb4>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	4a25      	ldr	r2, [pc, #148]	; (80086ac <MX_GPIO_Init+0xb4>)
 8008618:	f043 0304 	orr.w	r3, r3, #4
 800861c:	6313      	str	r3, [r2, #48]	; 0x30
 800861e:	4b23      	ldr	r3, [pc, #140]	; (80086ac <MX_GPIO_Init+0xb4>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800862a:	2300      	movs	r3, #0
 800862c:	607b      	str	r3, [r7, #4]
 800862e:	4b1f      	ldr	r3, [pc, #124]	; (80086ac <MX_GPIO_Init+0xb4>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <MX_GPIO_Init+0xb4>)
 8008634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008638:	6313      	str	r3, [r2, #48]	; 0x30
 800863a:	4b1c      	ldr	r3, [pc, #112]	; (80086ac <MX_GPIO_Init+0xb4>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008646:	2300      	movs	r3, #0
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	4b18      	ldr	r3, [pc, #96]	; (80086ac <MX_GPIO_Init+0xb4>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4a17      	ldr	r2, [pc, #92]	; (80086ac <MX_GPIO_Init+0xb4>)
 8008650:	f043 0301 	orr.w	r3, r3, #1
 8008654:	6313      	str	r3, [r2, #48]	; 0x30
 8008656:	4b15      	ldr	r3, [pc, #84]	; (80086ac <MX_GPIO_Init+0xb4>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8008662:	2201      	movs	r2, #1
 8008664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008668:	4811      	ldr	r0, [pc, #68]	; (80086b0 <MX_GPIO_Init+0xb8>)
 800866a:	f000 fba5 	bl	8008db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800866e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008674:	2311      	movs	r3, #17
 8008676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800867c:	2300      	movs	r3, #0
 800867e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8008680:	f107 030c 	add.w	r3, r7, #12
 8008684:	4619      	mov	r1, r3
 8008686:	480a      	ldr	r0, [pc, #40]	; (80086b0 <MX_GPIO_Init+0xb8>)
 8008688:	f000 fa12 	bl	8008ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800868c:	2301      	movs	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008690:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <MX_GPIO_Init+0xbc>)
 8008692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008694:	2301      	movs	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	4619      	mov	r1, r3
 800869e:	4806      	ldr	r0, [pc, #24]	; (80086b8 <MX_GPIO_Init+0xc0>)
 80086a0:	f000 fa06 	bl	8008ab0 <HAL_GPIO_Init>

}
 80086a4:	bf00      	nop
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40023800 	.word	0x40023800
 80086b0:	40020800 	.word	0x40020800
 80086b4:	10210000 	.word	0x10210000
 80086b8:	40020000 	.word	0x40020000

080086bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80086c0:	b672      	cpsid	i
}
 80086c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80086c4:	e7fe      	b.n	80086c4 <Error_Handler+0x8>
	...

080086c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <HAL_MspInit+0x4c>)
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	4a0f      	ldr	r2, [pc, #60]	; (8008714 <HAL_MspInit+0x4c>)
 80086d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086dc:	6453      	str	r3, [r2, #68]	; 0x44
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <HAL_MspInit+0x4c>)
 80086e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086e6:	607b      	str	r3, [r7, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	603b      	str	r3, [r7, #0]
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <HAL_MspInit+0x4c>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	4a08      	ldr	r2, [pc, #32]	; (8008714 <HAL_MspInit+0x4c>)
 80086f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f8:	6413      	str	r3, [r2, #64]	; 0x40
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <HAL_MspInit+0x4c>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800

08008718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800871c:	e7fe      	b.n	800871c <NMI_Handler+0x4>

0800871e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800871e:	b480      	push	{r7}
 8008720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008722:	e7fe      	b.n	8008722 <HardFault_Handler+0x4>

08008724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008728:	e7fe      	b.n	8008728 <MemManage_Handler+0x4>

0800872a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800872a:	b480      	push	{r7}
 800872c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800872e:	e7fe      	b.n	800872e <BusFault_Handler+0x4>

08008730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008734:	e7fe      	b.n	8008734 <UsageFault_Handler+0x4>

08008736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008736:	b480      	push	{r7}
 8008738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800873a:	bf00      	nop
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008748:	bf00      	nop
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008752:	b480      	push	{r7}
 8008754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008756:	bf00      	nop
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008764:	f000 f89e 	bl	80088a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008768:	bf00      	nop
 800876a:	bd80      	pop	{r7, pc}

0800876c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008770:	4802      	ldr	r0, [pc, #8]	; (800877c <OTG_FS_IRQHandler+0x10>)
 8008772:	f000 fb54 	bl	8008e1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008776:	bf00      	nop
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000030 	.word	0x20000030

08008780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <SystemInit+0x24>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	4a06      	ldr	r2, [pc, #24]	; (80087a4 <SystemInit+0x24>)
 800878c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008794:	4b03      	ldr	r3, [pc, #12]	; (80087a4 <SystemInit+0x24>)
 8008796:	4a04      	ldr	r2, [pc, #16]	; (80087a8 <SystemInit+0x28>)
 8008798:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800879a:	bf00      	nop
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	e000ed00 	.word	0xe000ed00
 80087a8:	08008000 	.word	0x08008000

080087ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80087ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80087b0:	480d      	ldr	r0, [pc, #52]	; (80087e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80087b2:	490e      	ldr	r1, [pc, #56]	; (80087ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80087b4:	4a0e      	ldr	r2, [pc, #56]	; (80087f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80087b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087b8:	e002      	b.n	80087c0 <LoopCopyDataInit>

080087ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087be:	3304      	adds	r3, #4

080087c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087c4:	d3f9      	bcc.n	80087ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087c6:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80087c8:	4c0b      	ldr	r4, [pc, #44]	; (80087f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80087ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087cc:	e001      	b.n	80087d2 <LoopFillZerobss>

080087ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087d0:	3204      	adds	r2, #4

080087d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80087d4:	d3fb      	bcc.n	80087ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80087d6:	f7ff ffd3 	bl	8008780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80087da:	f004 f8cd 	bl	800c978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087de:	f7ff fe77 	bl	80084d0 <main>
  bx  lr    
 80087e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80087e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80087e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80087ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80087f0:	0800ca08 	.word	0x0800ca08
  ldr r2, =_sbss
 80087f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80087f8:	20000438 	.word	0x20000438

080087fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087fc:	e7fe      	b.n	80087fc <ADC_IRQHandler>
	...

08008800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008804:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <HAL_Init+0x40>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <HAL_Init+0x40>)
 800880a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800880e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <HAL_Init+0x40>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a0a      	ldr	r2, [pc, #40]	; (8008840 <HAL_Init+0x40>)
 8008816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800881a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800881c:	4b08      	ldr	r3, [pc, #32]	; (8008840 <HAL_Init+0x40>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a07      	ldr	r2, [pc, #28]	; (8008840 <HAL_Init+0x40>)
 8008822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008828:	2003      	movs	r0, #3
 800882a:	f000 f90d 	bl	8008a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800882e:	2000      	movs	r0, #0
 8008830:	f000 f808 	bl	8008844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008834:	f7ff ff48 	bl	80086c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40023c00 	.word	0x40023c00

08008844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800884c:	4b12      	ldr	r3, [pc, #72]	; (8008898 <HAL_InitTick+0x54>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	4b12      	ldr	r3, [pc, #72]	; (800889c <HAL_InitTick+0x58>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	4619      	mov	r1, r3
 8008856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800885a:	fbb3 f3f1 	udiv	r3, r3, r1
 800885e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f917 	bl	8008a96 <HAL_SYSTICK_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e00e      	b.n	8008890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b0f      	cmp	r3, #15
 8008876:	d80a      	bhi.n	800888e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008878:	2200      	movs	r2, #0
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008880:	f000 f8ed 	bl	8008a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008884:	4a06      	ldr	r2, [pc, #24]	; (80088a0 <HAL_InitTick+0x5c>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	e000      	b.n	8008890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000000 	.word	0x20000000
 800889c:	20000008 	.word	0x20000008
 80088a0:	20000004 	.word	0x20000004

080088a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088a8:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <HAL_IncTick+0x20>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <HAL_IncTick+0x24>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4413      	add	r3, r2
 80088b4:	4a04      	ldr	r2, [pc, #16]	; (80088c8 <HAL_IncTick+0x24>)
 80088b6:	6013      	str	r3, [r2, #0]
}
 80088b8:	bf00      	nop
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000008 	.word	0x20000008
 80088c8:	2000002c 	.word	0x2000002c

080088cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
  return uwTick;
 80088d0:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <HAL_GetTick+0x14>)
 80088d2:	681b      	ldr	r3, [r3, #0]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	2000002c 	.word	0x2000002c

080088e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088f4:	4b0c      	ldr	r3, [pc, #48]	; (8008928 <__NVIC_SetPriorityGrouping+0x44>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008900:	4013      	ands	r3, r2
 8008902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800890c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008916:	4a04      	ldr	r2, [pc, #16]	; (8008928 <__NVIC_SetPriorityGrouping+0x44>)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	60d3      	str	r3, [r2, #12]
}
 800891c:	bf00      	nop
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	e000ed00 	.word	0xe000ed00

0800892c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008930:	4b04      	ldr	r3, [pc, #16]	; (8008944 <__NVIC_GetPriorityGrouping+0x18>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	0a1b      	lsrs	r3, r3, #8
 8008936:	f003 0307 	and.w	r3, r3, #7
}
 800893a:	4618      	mov	r0, r3
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	e000ed00 	.word	0xe000ed00

08008948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	6039      	str	r1, [r7, #0]
 8008952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008958:	2b00      	cmp	r3, #0
 800895a:	db0a      	blt.n	8008972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	b2da      	uxtb	r2, r3
 8008960:	490c      	ldr	r1, [pc, #48]	; (8008994 <__NVIC_SetPriority+0x4c>)
 8008962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008966:	0112      	lsls	r2, r2, #4
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	440b      	add	r3, r1
 800896c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008970:	e00a      	b.n	8008988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	b2da      	uxtb	r2, r3
 8008976:	4908      	ldr	r1, [pc, #32]	; (8008998 <__NVIC_SetPriority+0x50>)
 8008978:	79fb      	ldrb	r3, [r7, #7]
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	3b04      	subs	r3, #4
 8008980:	0112      	lsls	r2, r2, #4
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	440b      	add	r3, r1
 8008986:	761a      	strb	r2, [r3, #24]
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	e000e100 	.word	0xe000e100
 8008998:	e000ed00 	.word	0xe000ed00

0800899c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800899c:	b480      	push	{r7}
 800899e:	b089      	sub	sp, #36	; 0x24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f1c3 0307 	rsb	r3, r3, #7
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	bf28      	it	cs
 80089ba:	2304      	movcs	r3, #4
 80089bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	3304      	adds	r3, #4
 80089c2:	2b06      	cmp	r3, #6
 80089c4:	d902      	bls.n	80089cc <NVIC_EncodePriority+0x30>
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	3b03      	subs	r3, #3
 80089ca:	e000      	b.n	80089ce <NVIC_EncodePriority+0x32>
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	fa02 f303 	lsl.w	r3, r2, r3
 80089da:	43da      	mvns	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	401a      	ands	r2, r3
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	fa01 f303 	lsl.w	r3, r1, r3
 80089ee:	43d9      	mvns	r1, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089f4:	4313      	orrs	r3, r2
         );
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3724      	adds	r7, #36	; 0x24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a14:	d301      	bcc.n	8008a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a16:	2301      	movs	r3, #1
 8008a18:	e00f      	b.n	8008a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a1a:	4a0a      	ldr	r2, [pc, #40]	; (8008a44 <SysTick_Config+0x40>)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a22:	210f      	movs	r1, #15
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a28:	f7ff ff8e 	bl	8008948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <SysTick_Config+0x40>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a32:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <SysTick_Config+0x40>)
 8008a34:	2207      	movs	r2, #7
 8008a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	e000e010 	.word	0xe000e010

08008a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff ff47 	bl	80088e4 <__NVIC_SetPriorityGrouping>
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b086      	sub	sp, #24
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	4603      	mov	r3, r0
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]
 8008a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a70:	f7ff ff5c 	bl	800892c <__NVIC_GetPriorityGrouping>
 8008a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	6978      	ldr	r0, [r7, #20]
 8008a7c:	f7ff ff8e 	bl	800899c <NVIC_EncodePriority>
 8008a80:	4602      	mov	r2, r0
 8008a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a86:	4611      	mov	r1, r2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff ff5d 	bl	8008948 <__NVIC_SetPriority>
}
 8008a8e:	bf00      	nop
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff ffb0 	bl	8008a04 <SysTick_Config>
 8008aa4:	4603      	mov	r3, r0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b089      	sub	sp, #36	; 0x24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	61fb      	str	r3, [r7, #28]
 8008aca:	e159      	b.n	8008d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008acc:	2201      	movs	r2, #1
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4013      	ands	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	f040 8148 	bne.w	8008d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d005      	beq.n	8008b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d130      	bne.n	8008b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b12:	43db      	mvns	r3, r3
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	4013      	ands	r3, r2
 8008b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b38:	2201      	movs	r2, #1
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	43db      	mvns	r3, r3
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	4013      	ands	r3, r2
 8008b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	091b      	lsrs	r3, r3, #4
 8008b4e:	f003 0201 	and.w	r2, r3, #1
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d017      	beq.n	8008ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b80:	43db      	mvns	r3, r3
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	4013      	ands	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	fa02 f303 	lsl.w	r3, r2, r3
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d123      	bne.n	8008bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	08da      	lsrs	r2, r3, #3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3208      	adds	r2, #8
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	220f      	movs	r2, #15
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	43db      	mvns	r3, r3
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	08da      	lsrs	r2, r3, #3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3208      	adds	r2, #8
 8008bee:	69b9      	ldr	r1, [r7, #24]
 8008bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	2203      	movs	r2, #3
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	43db      	mvns	r3, r3
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	4013      	ands	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f003 0203 	and.w	r2, r3, #3
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 80a2 	beq.w	8008d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	4b57      	ldr	r3, [pc, #348]	; (8008d98 <HAL_GPIO_Init+0x2e8>)
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3e:	4a56      	ldr	r2, [pc, #344]	; (8008d98 <HAL_GPIO_Init+0x2e8>)
 8008c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c44:	6453      	str	r3, [r2, #68]	; 0x44
 8008c46:	4b54      	ldr	r3, [pc, #336]	; (8008d98 <HAL_GPIO_Init+0x2e8>)
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c52:	4a52      	ldr	r2, [pc, #328]	; (8008d9c <HAL_GPIO_Init+0x2ec>)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	089b      	lsrs	r3, r3, #2
 8008c58:	3302      	adds	r3, #2
 8008c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	220f      	movs	r2, #15
 8008c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4013      	ands	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a49      	ldr	r2, [pc, #292]	; (8008da0 <HAL_GPIO_Init+0x2f0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d019      	beq.n	8008cb2 <HAL_GPIO_Init+0x202>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a48      	ldr	r2, [pc, #288]	; (8008da4 <HAL_GPIO_Init+0x2f4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d013      	beq.n	8008cae <HAL_GPIO_Init+0x1fe>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a47      	ldr	r2, [pc, #284]	; (8008da8 <HAL_GPIO_Init+0x2f8>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00d      	beq.n	8008caa <HAL_GPIO_Init+0x1fa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a46      	ldr	r2, [pc, #280]	; (8008dac <HAL_GPIO_Init+0x2fc>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d007      	beq.n	8008ca6 <HAL_GPIO_Init+0x1f6>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a45      	ldr	r2, [pc, #276]	; (8008db0 <HAL_GPIO_Init+0x300>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d101      	bne.n	8008ca2 <HAL_GPIO_Init+0x1f2>
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	e008      	b.n	8008cb4 <HAL_GPIO_Init+0x204>
 8008ca2:	2307      	movs	r3, #7
 8008ca4:	e006      	b.n	8008cb4 <HAL_GPIO_Init+0x204>
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e004      	b.n	8008cb4 <HAL_GPIO_Init+0x204>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e002      	b.n	8008cb4 <HAL_GPIO_Init+0x204>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <HAL_GPIO_Init+0x204>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	f002 0203 	and.w	r2, r2, #3
 8008cba:	0092      	lsls	r2, r2, #2
 8008cbc:	4093      	lsls	r3, r2
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cc4:	4935      	ldr	r1, [pc, #212]	; (8008d9c <HAL_GPIO_Init+0x2ec>)
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	089b      	lsrs	r3, r3, #2
 8008cca:	3302      	adds	r3, #2
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cd2:	4b38      	ldr	r3, [pc, #224]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	43db      	mvns	r3, r3
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008cee:	69ba      	ldr	r2, [r7, #24]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008cf6:	4a2f      	ldr	r2, [pc, #188]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008cfc:	4b2d      	ldr	r3, [pc, #180]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	43db      	mvns	r3, r3
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d20:	4a24      	ldr	r2, [pc, #144]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d26:	4b23      	ldr	r3, [pc, #140]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	43db      	mvns	r3, r3
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	4013      	ands	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d4a:	4a1a      	ldr	r2, [pc, #104]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d50:	4b18      	ldr	r3, [pc, #96]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d74:	4a0f      	ldr	r2, [pc, #60]	; (8008db4 <HAL_GPIO_Init+0x304>)
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b0f      	cmp	r3, #15
 8008d84:	f67f aea2 	bls.w	8008acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	3724      	adds	r7, #36	; 0x24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	40013800 	.word	0x40013800
 8008da0:	40020000 	.word	0x40020000
 8008da4:	40020400 	.word	0x40020400
 8008da8:	40020800 	.word	0x40020800
 8008dac:	40020c00 	.word	0x40020c00
 8008db0:	40021000 	.word	0x40021000
 8008db4:	40013c00 	.word	0x40013c00

08008db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	807b      	strh	r3, [r7, #2]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008dc8:	787b      	ldrb	r3, [r7, #1]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008dce:	887a      	ldrh	r2, [r7, #2]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008dd4:	e003      	b.n	8008dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008dd6:	887b      	ldrh	r3, [r7, #2]
 8008dd8:	041a      	lsls	r2, r3, #16
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	619a      	str	r2, [r3, #24]
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b085      	sub	sp, #20
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4013      	ands	r3, r2
 8008e02:	041a      	lsls	r2, r3, #16
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	43d9      	mvns	r1, r3
 8008e08:	887b      	ldrh	r3, [r7, #2]
 8008e0a:	400b      	ands	r3, r1
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	619a      	str	r2, [r3, #24]
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008e1e:	b590      	push	{r4, r7, lr}
 8008e20:	b08d      	sub	sp, #52	; 0x34
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f002 fa81 	bl	800b33c <USB_GetMode>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f040 839d 	bne.w	800957c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 f9e5 	bl	800b216 <USB_ReadInterrupts>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 8393 	beq.w	800957a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f002 f9dc 	bl	800b216 <USB_ReadInterrupts>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d107      	bne.n	8008e78 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	695a      	ldr	r2, [r3, #20]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f002 0202 	and.w	r2, r2, #2
 8008e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 f9ca 	bl	800b216 <USB_ReadInterrupts>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b10      	cmp	r3, #16
 8008e8a:	d161      	bne.n	8008f50 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0210 	bic.w	r2, r2, #16
 8008e9a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f003 020f 	and.w	r2, r3, #15
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3304      	adds	r3, #4
 8008eba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	0c5b      	lsrs	r3, r3, #17
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d124      	bne.n	8008f12 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d035      	beq.n	8008f40 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	091b      	lsrs	r3, r3, #4
 8008edc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6a38      	ldr	r0, [r7, #32]
 8008ee8:	f002 f872 	bl	800afd0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	091b      	lsrs	r3, r3, #4
 8008ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ef8:	441a      	add	r2, r3
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	091b      	lsrs	r3, r3, #4
 8008f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f0a:	441a      	add	r2, r3
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	619a      	str	r2, [r3, #24]
 8008f10:	e016      	b.n	8008f40 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	0c5b      	lsrs	r3, r3, #17
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	2b06      	cmp	r3, #6
 8008f1c:	d110      	bne.n	8008f40 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f24:	2208      	movs	r2, #8
 8008f26:	4619      	mov	r1, r3
 8008f28:	6a38      	ldr	r0, [r7, #32]
 8008f2a:	f002 f851 	bl	800afd0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	091b      	lsrs	r3, r3, #4
 8008f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f3a:	441a      	add	r2, r3
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	699a      	ldr	r2, [r3, #24]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0210 	orr.w	r2, r2, #16
 8008f4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f002 f95e 	bl	800b216 <USB_ReadInterrupts>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f64:	d16e      	bne.n	8009044 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f002 f964 	bl	800b23c <USB_ReadDevAllOutEpInterrupt>
 8008f74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008f76:	e062      	b.n	800903e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d057      	beq.n	8009032 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f88:	b2d2      	uxtb	r2, r2
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f002 f989 	bl	800b2a4 <USB_ReadDevOutEPInterrupt>
 8008f92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008faa:	461a      	mov	r2, r3
 8008fac:	2301      	movs	r3, #1
 8008fae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fd4e 	bl	8009a54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f003 0308 	and.w	r3, r3, #8
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00c      	beq.n	8008fdc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	461a      	mov	r2, r3
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fe48 	bl	8009c6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f003 0310 	and.w	r3, r3, #16
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d008      	beq.n	8008ff8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900e:	461a      	mov	r2, r3
 8009010:	2320      	movs	r3, #32
 8009012:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	461a      	mov	r2, r3
 800902c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009030:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	3301      	adds	r3, #1
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009040:	2b00      	cmp	r3, #0
 8009042:	d199      	bne.n	8008f78 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4618      	mov	r0, r3
 800904a:	f002 f8e4 	bl	800b216 <USB_ReadInterrupts>
 800904e:	4603      	mov	r3, r0
 8009050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009058:	f040 80c0 	bne.w	80091dc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f002 f905 	bl	800b270 <USB_ReadDevAllInEpInterrupt>
 8009066:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800906c:	e0b2      	b.n	80091d4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 80a7 	beq.w	80091c8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f002 f92b 	bl	800b2e0 <USB_ReadDevInEPInterrupt>
 800908a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d057      	beq.n	8009146 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	2201      	movs	r2, #1
 800909e:	fa02 f303 	lsl.w	r3, r2, r3
 80090a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	43db      	mvns	r3, r3
 80090b0:	69f9      	ldr	r1, [r7, #28]
 80090b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b6:	4013      	ands	r3, r2
 80090b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c6:	461a      	mov	r2, r3
 80090c8:	2301      	movs	r3, #1
 80090ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d132      	bne.n	800913a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d8:	4613      	mov	r3, r2
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	3348      	adds	r3, #72	; 0x48
 80090e4:	6819      	ldr	r1, [r3, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ea:	4613      	mov	r3, r2
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4403      	add	r3, r0
 80090f4:	3344      	adds	r3, #68	; 0x44
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4419      	add	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4403      	add	r3, r0
 8009108:	3348      	adds	r3, #72	; 0x48
 800910a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	2b00      	cmp	r3, #0
 8009110:	d113      	bne.n	800913a <HAL_PCD_IRQHandler+0x31c>
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009116:	4613      	mov	r3, r2
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	440b      	add	r3, r1
 8009120:	3350      	adds	r3, #80	; 0x50
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d108      	bne.n	800913a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009132:	461a      	mov	r2, r3
 8009134:	2101      	movs	r1, #1
 8009136:	f002 f933 	bl	800b3a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	b2db      	uxtb	r3, r3
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f003 fa40 	bl	800c5c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f003 0308 	and.w	r3, r3, #8
 800914c:	2b00      	cmp	r3, #0
 800914e:	d008      	beq.n	8009162 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915c:	461a      	mov	r2, r3
 800915e:	2308      	movs	r3, #8
 8009160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	461a      	mov	r2, r3
 800917a:	2310      	movs	r3, #16
 800917c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d008      	beq.n	800919a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009194:	461a      	mov	r2, r3
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	461a      	mov	r2, r3
 80091b2:	2302      	movs	r3, #2
 80091b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80091c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fbb9 	bl	800993a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	3301      	adds	r3, #1
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80091ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d0:	085b      	lsrs	r3, r3, #1
 80091d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f47f af49 	bne.w	800906e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f002 f818 	bl	800b216 <USB_ReadInterrupts>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091f0:	d122      	bne.n	8009238 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800920c:	2b01      	cmp	r3, #1
 800920e:	d108      	bne.n	8009222 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009218:	2100      	movs	r1, #0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fd6c 	bl	8009cf8 <HAL_PCDEx_LPM_Callback>
 8009220:	e002      	b.n	8009228 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f003 fa3c 	bl	800c6a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	695a      	ldr	r2, [r3, #20]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f001 ffea 	bl	800b216 <USB_ReadInterrupts>
 8009242:	4603      	mov	r3, r0
 8009244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800924c:	d112      	bne.n	8009274 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b01      	cmp	r3, #1
 800925c:	d102      	bne.n	8009264 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f003 f9f8 	bl	800c654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695a      	ldr	r2, [r3, #20]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009272:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4618      	mov	r0, r3
 800927a:	f001 ffcc 	bl	800b216 <USB_ReadInterrupts>
 800927e:	4603      	mov	r3, r0
 8009280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009288:	f040 80c7 	bne.w	800941a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2110      	movs	r1, #16
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 f9f4 	bl	800a694 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092ac:	2300      	movs	r3, #0
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092b0:	e056      	b.n	8009360 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092be:	461a      	mov	r2, r3
 80092c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092e4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	69fa      	ldr	r2, [r7, #28]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009300:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009304:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	461a      	mov	r2, r3
 8009314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009318:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800932a:	0151      	lsls	r1, r2, #5
 800932c:	69fa      	ldr	r2, [r7, #28]
 800932e:	440a      	add	r2, r1
 8009330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009334:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009338:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800934a:	0151      	lsls	r1, r2, #5
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	440a      	add	r2, r1
 8009350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009354:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009358:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935c:	3301      	adds	r3, #1
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009366:	429a      	cmp	r2, r3
 8009368:	d3a3      	bcc.n	80092b2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	69fa      	ldr	r2, [r7, #28]
 8009374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009378:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800937c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009382:	2b00      	cmp	r3, #0
 8009384:	d016      	beq.n	80093b4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009390:	69fa      	ldr	r2, [r7, #28]
 8009392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009396:	f043 030b 	orr.w	r3, r3, #11
 800939a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ac:	f043 030b 	orr.w	r3, r3, #11
 80093b0:	6453      	str	r3, [r2, #68]	; 0x44
 80093b2:	e015      	b.n	80093e0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80093ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093da:	f043 030b 	orr.w	r3, r3, #11
 80093de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69fa      	ldr	r2, [r7, #28]
 80093ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009404:	461a      	mov	r2, r3
 8009406:	f001 ffcb 	bl	800b3a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695a      	ldr	r2, [r3, #20]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f001 fef9 	bl	800b216 <USB_ReadInterrupts>
 8009424:	4603      	mov	r3, r0
 8009426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800942a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800942e:	d124      	bne.n	800947a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	f001 ff8f 	bl	800b358 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4618      	mov	r0, r3
 8009440:	f001 f94e 	bl	800a6e0 <USB_GetDevSpeed>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681c      	ldr	r4, [r3, #0]
 8009450:	f001 f872 	bl	800a538 <HAL_RCC_GetHCLKFreq>
 8009454:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800945a:	b2db      	uxtb	r3, r3
 800945c:	461a      	mov	r2, r3
 800945e:	4620      	mov	r0, r4
 8009460:	f001 f876 	bl	800a550 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f003 f8d6 	bl	800c616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	695a      	ldr	r2, [r3, #20]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009478:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fec9 	bl	800b216 <USB_ReadInterrupts>
 8009484:	4603      	mov	r3, r0
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	2b08      	cmp	r3, #8
 800948c:	d10a      	bne.n	80094a4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f003 f8b3 	bl	800c5fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695a      	ldr	r2, [r3, #20]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f002 0208 	and.w	r2, r2, #8
 80094a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 feb4 	bl	800b216 <USB_ReadInterrupts>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b8:	d10f      	bne.n	80094da <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f003 f90b 	bl	800c6e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	695a      	ldr	r2, [r3, #20]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80094d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 fe99 	bl	800b216 <USB_ReadInterrupts>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094ee:	d10f      	bne.n	8009510 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f003 f8de 	bl	800c6bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695a      	ldr	r2, [r3, #20]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800950e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4618      	mov	r0, r3
 8009516:	f001 fe7e 	bl	800b216 <USB_ReadInterrupts>
 800951a:	4603      	mov	r3, r0
 800951c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009524:	d10a      	bne.n	800953c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f003 f8ec 	bl	800c704 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	695a      	ldr	r2, [r3, #20]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800953a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f001 fe68 	bl	800b216 <USB_ReadInterrupts>
 8009546:	4603      	mov	r3, r0
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b04      	cmp	r3, #4
 800954e:	d115      	bne.n	800957c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	f003 0304 	and.w	r3, r3, #4
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f003 f8dc 	bl	800c720 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6859      	ldr	r1, [r3, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	430a      	orrs	r2, r1
 8009576:	605a      	str	r2, [r3, #4]
 8009578:	e000      	b.n	800957c <HAL_PCD_IRQHandler+0x75e>
      return;
 800957a:	bf00      	nop
    }
  }
}
 800957c:	3734      	adds	r7, #52	; 0x34
 800957e:	46bd      	mov	sp, r7
 8009580:	bd90      	pop	{r4, r7, pc}

08009582 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_PCD_SetAddress+0x1a>
 8009598:	2302      	movs	r3, #2
 800959a:	e013      	b.n	80095c4 <HAL_PCD_SetAddress+0x42>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 fe08 	bl	800b1ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	4603      	mov	r3, r0
 80095dc:	70fb      	strb	r3, [r7, #3]
 80095de:	460b      	mov	r3, r1
 80095e0:	803b      	strh	r3, [r7, #0]
 80095e2:	4613      	mov	r3, r2
 80095e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80095ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	da0f      	bge.n	8009612 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	f003 020f 	and.w	r2, r3, #15
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	3338      	adds	r3, #56	; 0x38
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4413      	add	r3, r2
 8009606:	3304      	adds	r3, #4
 8009608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	705a      	strb	r2, [r3, #1]
 8009610:	e00f      	b.n	8009632 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	f003 020f 	and.w	r2, r3, #15
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	4413      	add	r3, r2
 8009628:	3304      	adds	r3, #4
 800962a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	f003 030f 	and.w	r3, r3, #15
 8009638:	b2da      	uxtb	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800963e:	883a      	ldrh	r2, [r7, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	78ba      	ldrb	r2, [r7, #2]
 8009648:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800965c:	78bb      	ldrb	r3, [r7, #2]
 800965e:	2b02      	cmp	r3, #2
 8009660:	d102      	bne.n	8009668 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_PCD_EP_Open+0xaa>
 8009672:	2302      	movs	r3, #2
 8009674:	e00e      	b.n	8009694 <HAL_PCD_EP_Open+0xc8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	4618      	mov	r0, r3
 8009686:	f001 f850 	bl	800a72a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009692:	7afb      	ldrb	r3, [r7, #11]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	460b      	mov	r3, r1
 80096aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096ac:	7afb      	ldrb	r3, [r7, #11]
 80096ae:	f003 020f 	and.w	r2, r3, #15
 80096b2:	4613      	mov	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	3304      	adds	r3, #4
 80096c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2200      	movs	r2, #0
 80096d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d102      	bne.n	80096f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	f003 030f 	and.w	r3, r3, #15
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	461a      	mov	r2, r3
 800970e:	6979      	ldr	r1, [r7, #20]
 8009710:	f001 fad6 	bl	800acc0 <USB_EP0StartXfer>
 8009714:	e008      	b.n	8009728 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	6979      	ldr	r1, [r7, #20]
 8009724:	f001 f888 	bl	800a838 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
 800973e:	460b      	mov	r3, r1
 8009740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	f003 020f 	and.w	r2, r3, #15
 8009748:	4613      	mov	r3, r2
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	3338      	adds	r3, #56	; 0x38
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	3304      	adds	r3, #4
 8009758:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2200      	movs	r2, #0
 800976a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2201      	movs	r2, #1
 8009770:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	b2da      	uxtb	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d102      	bne.n	800978c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800978c:	7afb      	ldrb	r3, [r7, #11]
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	2b00      	cmp	r3, #0
 8009794:	d109      	bne.n	80097aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	461a      	mov	r2, r3
 80097a2:	6979      	ldr	r1, [r7, #20]
 80097a4:	f001 fa8c 	bl	800acc0 <USB_EP0StartXfer>
 80097a8:	e008      	b.n	80097bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	6979      	ldr	r1, [r7, #20]
 80097b8:	f001 f83e 	bl	800a838 <USB_EPStartXfer>
  }

  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d901      	bls.n	80097e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e050      	b.n	8009886 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80097e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	da0f      	bge.n	800980c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	f003 020f 	and.w	r2, r3, #15
 80097f2:	4613      	mov	r3, r2
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	3338      	adds	r3, #56	; 0x38
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	4413      	add	r3, r2
 8009800:	3304      	adds	r3, #4
 8009802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2201      	movs	r2, #1
 8009808:	705a      	strb	r2, [r3, #1]
 800980a:	e00d      	b.n	8009828 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	4613      	mov	r3, r2
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	4413      	add	r3, r2
 800981e:	3304      	adds	r3, #4
 8009820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	f003 030f 	and.w	r3, r3, #15
 8009834:	b2da      	uxtb	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009840:	2b01      	cmp	r3, #1
 8009842:	d101      	bne.n	8009848 <HAL_PCD_EP_SetStall+0x82>
 8009844:	2302      	movs	r3, #2
 8009846:	e01e      	b.n	8009886 <HAL_PCD_EP_SetStall+0xc0>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68f9      	ldr	r1, [r7, #12]
 8009856:	4618      	mov	r0, r3
 8009858:	f001 fbe3 	bl	800b022 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	b2d9      	uxtb	r1, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009876:	461a      	mov	r2, r3
 8009878:	f001 fd92 	bl	800b3a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800989a:	78fb      	ldrb	r3, [r7, #3]
 800989c:	f003 020f 	and.w	r2, r3, #15
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d901      	bls.n	80098ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e042      	b.n	8009932 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80098ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	da0f      	bge.n	80098d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	4613      	mov	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	3338      	adds	r3, #56	; 0x38
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	4413      	add	r3, r2
 80098c8:	3304      	adds	r3, #4
 80098ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	705a      	strb	r2, [r3, #1]
 80098d2:	e00f      	b.n	80098f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	f003 020f 	and.w	r2, r3, #15
 80098da:	4613      	mov	r3, r2
 80098dc:	00db      	lsls	r3, r3, #3
 80098de:	1a9b      	subs	r3, r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4413      	add	r3, r2
 80098ea:	3304      	adds	r3, #4
 80098ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	b2da      	uxtb	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_PCD_EP_ClrStall+0x86>
 8009910:	2302      	movs	r3, #2
 8009912:	e00e      	b.n	8009932 <HAL_PCD_EP_ClrStall+0xa4>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68f9      	ldr	r1, [r7, #12]
 8009922:	4618      	mov	r0, r3
 8009924:	f001 fbeb 	bl	800b0fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b08a      	sub	sp, #40	; 0x28
 800993e:	af02      	add	r7, sp, #8
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	4613      	mov	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	3338      	adds	r3, #56	; 0x38
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	3304      	adds	r3, #4
 8009960:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	699a      	ldr	r2, [r3, #24]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	429a      	cmp	r2, r3
 800996c:	d901      	bls.n	8009972 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e06c      	b.n	8009a4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	695a      	ldr	r2, [r3, #20]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	429a      	cmp	r2, r3
 8009986:	d902      	bls.n	800998e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	3303      	adds	r3, #3
 8009992:	089b      	lsrs	r3, r3, #2
 8009994:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009996:	e02b      	b.n	80099f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	695a      	ldr	r2, [r3, #20]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d902      	bls.n	80099b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	3303      	adds	r3, #3
 80099b8:	089b      	lsrs	r3, r3, #2
 80099ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68d9      	ldr	r1, [r3, #12]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	4603      	mov	r3, r0
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f001 fac7 	bl	800af66 <USB_WritePacket>

    ep->xfer_buff  += len;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	441a      	add	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	699a      	ldr	r2, [r3, #24]
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	441a      	add	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d809      	bhi.n	8009a1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d203      	bcs.n	8009a1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1be      	bne.n	8009998 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	695a      	ldr	r2, [r3, #20]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d811      	bhi.n	8009a4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	f003 030f 	and.w	r3, r3, #15
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	43db      	mvns	r3, r3
 8009a40:	6939      	ldr	r1, [r7, #16]
 8009a42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a46:	4013      	ands	r3, r2
 8009a48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3720      	adds	r7, #32
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	333c      	adds	r3, #60	; 0x3c
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	f040 80a0 	bne.w	8009bcc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f003 0308 	and.w	r3, r3, #8
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d015      	beq.n	8009ac2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4a72      	ldr	r2, [pc, #456]	; (8009c64 <PCD_EP_OutXfrComplete_int+0x210>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	f240 80dd 	bls.w	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 80d7 	beq.w	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009abe:	6093      	str	r3, [r2, #8]
 8009ac0:	e0cb      	b.n	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f003 0320 	and.w	r3, r3, #32
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d009      	beq.n	8009ae0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	461a      	mov	r2, r3
 8009ada:	2320      	movs	r3, #32
 8009adc:	6093      	str	r3, [r2, #8]
 8009ade:	e0bc      	b.n	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f040 80b7 	bne.w	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4a5d      	ldr	r2, [pc, #372]	; (8009c64 <PCD_EP_OutXfrComplete_int+0x210>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d90f      	bls.n	8009b14 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b10:	6093      	str	r3, [r2, #8]
 8009b12:	e0a2      	b.n	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009b26:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	0159      	lsls	r1, r3, #5
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	440b      	add	r3, r1
 8009b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009b3a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	4613      	mov	r3, r2
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4403      	add	r3, r0
 8009b4a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009b4e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	4613      	mov	r3, r2
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	440b      	add	r3, r1
 8009b5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4403      	add	r3, r0
 8009b72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4419      	add	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	00db      	lsls	r3, r3, #3
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4403      	add	r3, r0
 8009b88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b8c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d114      	bne.n	8009bbe <PCD_EP_OutXfrComplete_int+0x16a>
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	00db      	lsls	r3, r3, #3
 8009b9c:	1a9b      	subs	r3, r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d108      	bne.n	8009bbe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6818      	ldr	r0, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	2101      	movs	r1, #1
 8009bba:	f001 fbf1 	bl	800b3a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f002 fce3 	bl	800c590 <HAL_PCD_DataOutStageCallback>
 8009bca:	e046      	b.n	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4a26      	ldr	r2, [pc, #152]	; (8009c68 <PCD_EP_OutXfrComplete_int+0x214>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d124      	bne.n	8009c1e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	461a      	mov	r2, r3
 8009bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bf0:	6093      	str	r3, [r2, #8]
 8009bf2:	e032      	b.n	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 0320 	and.w	r3, r3, #32
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d008      	beq.n	8009c10 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2320      	movs	r3, #32
 8009c0e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f002 fcba 	bl	800c590 <HAL_PCD_DataOutStageCallback>
 8009c1c:	e01d      	b.n	8009c5a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d114      	bne.n	8009c4e <PCD_EP_OutXfrComplete_int+0x1fa>
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	1a9b      	subs	r3, r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d108      	bne.n	8009c4e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c46:	461a      	mov	r2, r3
 8009c48:	2100      	movs	r1, #0
 8009c4a:	f001 fba9 	bl	800b3a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f002 fc9b 	bl	800c590 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	4f54300a 	.word	0x4f54300a
 8009c68:	4f54310a 	.word	0x4f54310a

08009c6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	333c      	adds	r3, #60	; 0x3c
 8009c84:	3304      	adds	r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4a15      	ldr	r2, [pc, #84]	; (8009cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d90e      	bls.n	8009cc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d009      	beq.n	8009cc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f002 fc53 	bl	800c56c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4a0a      	ldr	r2, [pc, #40]	; (8009cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d90c      	bls.n	8009ce8 <PCD_EP_OutSetupPacket_int+0x7c>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d108      	bne.n	8009ce8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	f001 fb5c 	bl	800b3a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	4f54300a 	.word	0x4f54300a

08009cf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e264      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d075      	beq.n	8009e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d2e:	4ba3      	ldr	r3, [pc, #652]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f003 030c 	and.w	r3, r3, #12
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d00c      	beq.n	8009d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d3a:	4ba0      	ldr	r3, [pc, #640]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d112      	bne.n	8009d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d46:	4b9d      	ldr	r3, [pc, #628]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d52:	d10b      	bne.n	8009d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d54:	4b99      	ldr	r3, [pc, #612]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d05b      	beq.n	8009e18 <HAL_RCC_OscConfig+0x108>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d157      	bne.n	8009e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e23f      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d74:	d106      	bne.n	8009d84 <HAL_RCC_OscConfig+0x74>
 8009d76:	4b91      	ldr	r3, [pc, #580]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a90      	ldr	r2, [pc, #576]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	e01d      	b.n	8009dc0 <HAL_RCC_OscConfig+0xb0>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d8c:	d10c      	bne.n	8009da8 <HAL_RCC_OscConfig+0x98>
 8009d8e:	4b8b      	ldr	r3, [pc, #556]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a8a      	ldr	r2, [pc, #552]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	4b88      	ldr	r3, [pc, #544]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a87      	ldr	r2, [pc, #540]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	e00b      	b.n	8009dc0 <HAL_RCC_OscConfig+0xb0>
 8009da8:	4b84      	ldr	r3, [pc, #528]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a83      	ldr	r2, [pc, #524]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	4b81      	ldr	r3, [pc, #516]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a80      	ldr	r2, [pc, #512]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d013      	beq.n	8009df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dc8:	f7fe fd80 	bl	80088cc <HAL_GetTick>
 8009dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009dd0:	f7fe fd7c 	bl	80088cc <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b64      	cmp	r3, #100	; 0x64
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e204      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009de2:	4b76      	ldr	r3, [pc, #472]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0f0      	beq.n	8009dd0 <HAL_RCC_OscConfig+0xc0>
 8009dee:	e014      	b.n	8009e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009df0:	f7fe fd6c 	bl	80088cc <HAL_GetTick>
 8009df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009df6:	e008      	b.n	8009e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009df8:	f7fe fd68 	bl	80088cc <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	2b64      	cmp	r3, #100	; 0x64
 8009e04:	d901      	bls.n	8009e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e1f0      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e0a:	4b6c      	ldr	r3, [pc, #432]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1f0      	bne.n	8009df8 <HAL_RCC_OscConfig+0xe8>
 8009e16:	e000      	b.n	8009e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d063      	beq.n	8009eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e26:	4b65      	ldr	r3, [pc, #404]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f003 030c 	and.w	r3, r3, #12
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e32:	4b62      	ldr	r3, [pc, #392]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d11c      	bne.n	8009e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e3e:	4b5f      	ldr	r3, [pc, #380]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d116      	bne.n	8009e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e4a:	4b5c      	ldr	r3, [pc, #368]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d005      	beq.n	8009e62 <HAL_RCC_OscConfig+0x152>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d001      	beq.n	8009e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e1c4      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e62:	4b56      	ldr	r3, [pc, #344]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	4952      	ldr	r1, [pc, #328]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e76:	e03a      	b.n	8009eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d020      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e80:	4b4f      	ldr	r3, [pc, #316]	; (8009fc0 <HAL_RCC_OscConfig+0x2b0>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e86:	f7fe fd21 	bl	80088cc <HAL_GetTick>
 8009e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e8c:	e008      	b.n	8009ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e8e:	f7fe fd1d 	bl	80088cc <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e1a5      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ea0:	4b46      	ldr	r3, [pc, #280]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0f0      	beq.n	8009e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eac:	4b43      	ldr	r3, [pc, #268]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	4940      	ldr	r1, [pc, #256]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	600b      	str	r3, [r1, #0]
 8009ec0:	e015      	b.n	8009eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ec2:	4b3f      	ldr	r3, [pc, #252]	; (8009fc0 <HAL_RCC_OscConfig+0x2b0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec8:	f7fe fd00 	bl	80088cc <HAL_GetTick>
 8009ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ece:	e008      	b.n	8009ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ed0:	f7fe fcfc 	bl	80088cc <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d901      	bls.n	8009ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e184      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ee2:	4b36      	ldr	r3, [pc, #216]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1f0      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0308 	and.w	r3, r3, #8
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d030      	beq.n	8009f5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d016      	beq.n	8009f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f02:	4b30      	ldr	r3, [pc, #192]	; (8009fc4 <HAL_RCC_OscConfig+0x2b4>)
 8009f04:	2201      	movs	r2, #1
 8009f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f08:	f7fe fce0 	bl	80088cc <HAL_GetTick>
 8009f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f0e:	e008      	b.n	8009f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f10:	f7fe fcdc 	bl	80088cc <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e164      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f22:	4b26      	ldr	r3, [pc, #152]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f26:	f003 0302 	and.w	r3, r3, #2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0f0      	beq.n	8009f10 <HAL_RCC_OscConfig+0x200>
 8009f2e:	e015      	b.n	8009f5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f30:	4b24      	ldr	r3, [pc, #144]	; (8009fc4 <HAL_RCC_OscConfig+0x2b4>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f36:	f7fe fcc9 	bl	80088cc <HAL_GetTick>
 8009f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f3c:	e008      	b.n	8009f50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f3e:	f7fe fcc5 	bl	80088cc <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d901      	bls.n	8009f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e14d      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f50:	4b1a      	ldr	r3, [pc, #104]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f0      	bne.n	8009f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80a0 	beq.w	800a0aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10f      	bne.n	8009f9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	4a0e      	ldr	r2, [pc, #56]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f88:	6413      	str	r3, [r2, #64]	; 0x40
 8009f8a:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <HAL_RCC_OscConfig+0x2ac>)
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f92:	60bb      	str	r3, [r7, #8]
 8009f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f96:	2301      	movs	r3, #1
 8009f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <HAL_RCC_OscConfig+0x2b8>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d121      	bne.n	8009fea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009fa6:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <HAL_RCC_OscConfig+0x2b8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a07      	ldr	r2, [pc, #28]	; (8009fc8 <HAL_RCC_OscConfig+0x2b8>)
 8009fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fb2:	f7fe fc8b 	bl	80088cc <HAL_GetTick>
 8009fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fb8:	e011      	b.n	8009fde <HAL_RCC_OscConfig+0x2ce>
 8009fba:	bf00      	nop
 8009fbc:	40023800 	.word	0x40023800
 8009fc0:	42470000 	.word	0x42470000
 8009fc4:	42470e80 	.word	0x42470e80
 8009fc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fcc:	f7fe fc7e 	bl	80088cc <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e106      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fde:	4b85      	ldr	r3, [pc, #532]	; (800a1f4 <HAL_RCC_OscConfig+0x4e4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f0      	beq.n	8009fcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d106      	bne.n	800a000 <HAL_RCC_OscConfig+0x2f0>
 8009ff2:	4b81      	ldr	r3, [pc, #516]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	4a80      	ldr	r2, [pc, #512]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 8009ff8:	f043 0301 	orr.w	r3, r3, #1
 8009ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8009ffe:	e01c      	b.n	800a03a <HAL_RCC_OscConfig+0x32a>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b05      	cmp	r3, #5
 800a006:	d10c      	bne.n	800a022 <HAL_RCC_OscConfig+0x312>
 800a008:	4b7b      	ldr	r3, [pc, #492]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00c:	4a7a      	ldr	r2, [pc, #488]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a00e:	f043 0304 	orr.w	r3, r3, #4
 800a012:	6713      	str	r3, [r2, #112]	; 0x70
 800a014:	4b78      	ldr	r3, [pc, #480]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a018:	4a77      	ldr	r2, [pc, #476]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	6713      	str	r3, [r2, #112]	; 0x70
 800a020:	e00b      	b.n	800a03a <HAL_RCC_OscConfig+0x32a>
 800a022:	4b75      	ldr	r3, [pc, #468]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a026:	4a74      	ldr	r2, [pc, #464]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	6713      	str	r3, [r2, #112]	; 0x70
 800a02e:	4b72      	ldr	r3, [pc, #456]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a032:	4a71      	ldr	r2, [pc, #452]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a034:	f023 0304 	bic.w	r3, r3, #4
 800a038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d015      	beq.n	800a06e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a042:	f7fe fc43 	bl	80088cc <HAL_GetTick>
 800a046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a048:	e00a      	b.n	800a060 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a04a:	f7fe fc3f 	bl	80088cc <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	f241 3288 	movw	r2, #5000	; 0x1388
 800a058:	4293      	cmp	r3, r2
 800a05a:	d901      	bls.n	800a060 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e0c5      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a060:	4b65      	ldr	r3, [pc, #404]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0ee      	beq.n	800a04a <HAL_RCC_OscConfig+0x33a>
 800a06c:	e014      	b.n	800a098 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a06e:	f7fe fc2d 	bl	80088cc <HAL_GetTick>
 800a072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a074:	e00a      	b.n	800a08c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a076:	f7fe fc29 	bl	80088cc <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	f241 3288 	movw	r2, #5000	; 0x1388
 800a084:	4293      	cmp	r3, r2
 800a086:	d901      	bls.n	800a08c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e0af      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a08c:	4b5a      	ldr	r3, [pc, #360]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1ee      	bne.n	800a076 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d105      	bne.n	800a0aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a09e:	4b56      	ldr	r3, [pc, #344]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	4a55      	ldr	r2, [pc, #340]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a0a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 809b 	beq.w	800a1ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a0b4:	4b50      	ldr	r3, [pc, #320]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 030c 	and.w	r3, r3, #12
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d05c      	beq.n	800a17a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d141      	bne.n	800a14c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0c8:	4b4c      	ldr	r3, [pc, #304]	; (800a1fc <HAL_RCC_OscConfig+0x4ec>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0ce:	f7fe fbfd 	bl	80088cc <HAL_GetTick>
 800a0d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0d4:	e008      	b.n	800a0e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0d6:	f7fe fbf9 	bl	80088cc <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d901      	bls.n	800a0e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e081      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0e8:	4b43      	ldr	r3, [pc, #268]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1f0      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	69da      	ldr	r2, [r3, #28]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	019b      	lsls	r3, r3, #6
 800a104:	431a      	orrs	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10a:	085b      	lsrs	r3, r3, #1
 800a10c:	3b01      	subs	r3, #1
 800a10e:	041b      	lsls	r3, r3, #16
 800a110:	431a      	orrs	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a116:	061b      	lsls	r3, r3, #24
 800a118:	4937      	ldr	r1, [pc, #220]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a11e:	4b37      	ldr	r3, [pc, #220]	; (800a1fc <HAL_RCC_OscConfig+0x4ec>)
 800a120:	2201      	movs	r2, #1
 800a122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a124:	f7fe fbd2 	bl	80088cc <HAL_GetTick>
 800a128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a12a:	e008      	b.n	800a13e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a12c:	f7fe fbce 	bl	80088cc <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	2b02      	cmp	r3, #2
 800a138:	d901      	bls.n	800a13e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e056      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a13e:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0f0      	beq.n	800a12c <HAL_RCC_OscConfig+0x41c>
 800a14a:	e04e      	b.n	800a1ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a14c:	4b2b      	ldr	r3, [pc, #172]	; (800a1fc <HAL_RCC_OscConfig+0x4ec>)
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a152:	f7fe fbbb 	bl	80088cc <HAL_GetTick>
 800a156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a158:	e008      	b.n	800a16c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a15a:	f7fe fbb7 	bl	80088cc <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	2b02      	cmp	r3, #2
 800a166:	d901      	bls.n	800a16c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a168:	2303      	movs	r3, #3
 800a16a:	e03f      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a16c:	4b22      	ldr	r3, [pc, #136]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1f0      	bne.n	800a15a <HAL_RCC_OscConfig+0x44a>
 800a178:	e037      	b.n	800a1ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d101      	bne.n	800a186 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e032      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a186:	4b1c      	ldr	r3, [pc, #112]	; (800a1f8 <HAL_RCC_OscConfig+0x4e8>)
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d028      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d121      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d11a      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d111      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	085b      	lsrs	r3, r3, #1
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d107      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d001      	beq.n	800a1ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e000      	b.n	800a1ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	40007000 	.word	0x40007000
 800a1f8:	40023800 	.word	0x40023800
 800a1fc:	42470060 	.word	0x42470060

0800a200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e0cc      	b.n	800a3ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a214:	4b68      	ldr	r3, [pc, #416]	; (800a3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0307 	and.w	r3, r3, #7
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d90c      	bls.n	800a23c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a222:	4b65      	ldr	r3, [pc, #404]	; (800a3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	b2d2      	uxtb	r2, r2
 800a228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a22a:	4b63      	ldr	r3, [pc, #396]	; (800a3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d001      	beq.n	800a23c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e0b8      	b.n	800a3ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d020      	beq.n	800a28a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0304 	and.w	r3, r3, #4
 800a250:	2b00      	cmp	r3, #0
 800a252:	d005      	beq.n	800a260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a254:	4b59      	ldr	r3, [pc, #356]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	4a58      	ldr	r2, [pc, #352]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a25a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a25e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d005      	beq.n	800a278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a26c:	4b53      	ldr	r3, [pc, #332]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	4a52      	ldr	r2, [pc, #328]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a278:	4b50      	ldr	r3, [pc, #320]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	494d      	ldr	r1, [pc, #308]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a286:	4313      	orrs	r3, r2
 800a288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d044      	beq.n	800a320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d107      	bne.n	800a2ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a29e:	4b47      	ldr	r3, [pc, #284]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d119      	bne.n	800a2de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e07f      	b.n	800a3ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d003      	beq.n	800a2be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d107      	bne.n	800a2ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2be:	4b3f      	ldr	r3, [pc, #252]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d109      	bne.n	800a2de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e06f      	b.n	800a3ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2ce:	4b3b      	ldr	r3, [pc, #236]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e067      	b.n	800a3ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a2de:	4b37      	ldr	r3, [pc, #220]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f023 0203 	bic.w	r2, r3, #3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	4934      	ldr	r1, [pc, #208]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a2f0:	f7fe faec 	bl	80088cc <HAL_GetTick>
 800a2f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2f6:	e00a      	b.n	800a30e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2f8:	f7fe fae8 	bl	80088cc <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	f241 3288 	movw	r2, #5000	; 0x1388
 800a306:	4293      	cmp	r3, r2
 800a308:	d901      	bls.n	800a30e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e04f      	b.n	800a3ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a30e:	4b2b      	ldr	r3, [pc, #172]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f003 020c 	and.w	r2, r3, #12
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d1eb      	bne.n	800a2f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a320:	4b25      	ldr	r3, [pc, #148]	; (800a3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0307 	and.w	r3, r3, #7
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d20c      	bcs.n	800a348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a32e:	4b22      	ldr	r3, [pc, #136]	; (800a3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	b2d2      	uxtb	r2, r2
 800a334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a336:	4b20      	ldr	r3, [pc, #128]	; (800a3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d001      	beq.n	800a348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e032      	b.n	800a3ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b00      	cmp	r3, #0
 800a352:	d008      	beq.n	800a366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a354:	4b19      	ldr	r3, [pc, #100]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	4916      	ldr	r1, [pc, #88]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a362:	4313      	orrs	r3, r2
 800a364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0308 	and.w	r3, r3, #8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d009      	beq.n	800a386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a372:	4b12      	ldr	r3, [pc, #72]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	490e      	ldr	r1, [pc, #56]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a382:	4313      	orrs	r3, r2
 800a384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a386:	f000 f821 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4b0b      	ldr	r3, [pc, #44]	; (800a3bc <HAL_RCC_ClockConfig+0x1bc>)
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	091b      	lsrs	r3, r3, #4
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	490a      	ldr	r1, [pc, #40]	; (800a3c0 <HAL_RCC_ClockConfig+0x1c0>)
 800a398:	5ccb      	ldrb	r3, [r1, r3]
 800a39a:	fa22 f303 	lsr.w	r3, r2, r3
 800a39e:	4a09      	ldr	r2, [pc, #36]	; (800a3c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a3a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a3a2:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe fa4c 	bl	8008844 <HAL_InitTick>

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	40023c00 	.word	0x40023c00
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	0800c9e8 	.word	0x0800c9e8
 800a3c4:	20000000 	.word	0x20000000
 800a3c8:	20000004 	.word	0x20000004

0800a3cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3cc:	b5b0      	push	{r4, r5, r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	6079      	str	r1, [r7, #4]
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	60f9      	str	r1, [r7, #12]
 800a3da:	2100      	movs	r1, #0
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a3de:	2100      	movs	r1, #0
 800a3e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3e2:	4952      	ldr	r1, [pc, #328]	; (800a52c <HAL_RCC_GetSysClockFreq+0x160>)
 800a3e4:	6889      	ldr	r1, [r1, #8]
 800a3e6:	f001 010c 	and.w	r1, r1, #12
 800a3ea:	2908      	cmp	r1, #8
 800a3ec:	d00d      	beq.n	800a40a <HAL_RCC_GetSysClockFreq+0x3e>
 800a3ee:	2908      	cmp	r1, #8
 800a3f0:	f200 8094 	bhi.w	800a51c <HAL_RCC_GetSysClockFreq+0x150>
 800a3f4:	2900      	cmp	r1, #0
 800a3f6:	d002      	beq.n	800a3fe <HAL_RCC_GetSysClockFreq+0x32>
 800a3f8:	2904      	cmp	r1, #4
 800a3fa:	d003      	beq.n	800a404 <HAL_RCC_GetSysClockFreq+0x38>
 800a3fc:	e08e      	b.n	800a51c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a3fe:	4b4c      	ldr	r3, [pc, #304]	; (800a530 <HAL_RCC_GetSysClockFreq+0x164>)
 800a400:	60bb      	str	r3, [r7, #8]
       break;
 800a402:	e08e      	b.n	800a522 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a404:	4b4b      	ldr	r3, [pc, #300]	; (800a534 <HAL_RCC_GetSysClockFreq+0x168>)
 800a406:	60bb      	str	r3, [r7, #8]
      break;
 800a408:	e08b      	b.n	800a522 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a40a:	4948      	ldr	r1, [pc, #288]	; (800a52c <HAL_RCC_GetSysClockFreq+0x160>)
 800a40c:	6849      	ldr	r1, [r1, #4]
 800a40e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a412:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a414:	4945      	ldr	r1, [pc, #276]	; (800a52c <HAL_RCC_GetSysClockFreq+0x160>)
 800a416:	6849      	ldr	r1, [r1, #4]
 800a418:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a41c:	2900      	cmp	r1, #0
 800a41e:	d024      	beq.n	800a46a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a420:	4942      	ldr	r1, [pc, #264]	; (800a52c <HAL_RCC_GetSysClockFreq+0x160>)
 800a422:	6849      	ldr	r1, [r1, #4]
 800a424:	0989      	lsrs	r1, r1, #6
 800a426:	4608      	mov	r0, r1
 800a428:	f04f 0100 	mov.w	r1, #0
 800a42c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a430:	f04f 0500 	mov.w	r5, #0
 800a434:	ea00 0204 	and.w	r2, r0, r4
 800a438:	ea01 0305 	and.w	r3, r1, r5
 800a43c:	493d      	ldr	r1, [pc, #244]	; (800a534 <HAL_RCC_GetSysClockFreq+0x168>)
 800a43e:	fb01 f003 	mul.w	r0, r1, r3
 800a442:	2100      	movs	r1, #0
 800a444:	fb01 f102 	mul.w	r1, r1, r2
 800a448:	1844      	adds	r4, r0, r1
 800a44a:	493a      	ldr	r1, [pc, #232]	; (800a534 <HAL_RCC_GetSysClockFreq+0x168>)
 800a44c:	fba2 0101 	umull	r0, r1, r2, r1
 800a450:	1863      	adds	r3, r4, r1
 800a452:	4619      	mov	r1, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	461a      	mov	r2, r3
 800a458:	f04f 0300 	mov.w	r3, #0
 800a45c:	f7fd febc 	bl	80081d8 <__aeabi_uldivmod>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4613      	mov	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e04a      	b.n	800a500 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a46a:	4b30      	ldr	r3, [pc, #192]	; (800a52c <HAL_RCC_GetSysClockFreq+0x160>)
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	099b      	lsrs	r3, r3, #6
 800a470:	461a      	mov	r2, r3
 800a472:	f04f 0300 	mov.w	r3, #0
 800a476:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a47a:	f04f 0100 	mov.w	r1, #0
 800a47e:	ea02 0400 	and.w	r4, r2, r0
 800a482:	ea03 0501 	and.w	r5, r3, r1
 800a486:	4620      	mov	r0, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	f04f 0200 	mov.w	r2, #0
 800a48e:	f04f 0300 	mov.w	r3, #0
 800a492:	014b      	lsls	r3, r1, #5
 800a494:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a498:	0142      	lsls	r2, r0, #5
 800a49a:	4610      	mov	r0, r2
 800a49c:	4619      	mov	r1, r3
 800a49e:	1b00      	subs	r0, r0, r4
 800a4a0:	eb61 0105 	sbc.w	r1, r1, r5
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	f04f 0300 	mov.w	r3, #0
 800a4ac:	018b      	lsls	r3, r1, #6
 800a4ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a4b2:	0182      	lsls	r2, r0, #6
 800a4b4:	1a12      	subs	r2, r2, r0
 800a4b6:	eb63 0301 	sbc.w	r3, r3, r1
 800a4ba:	f04f 0000 	mov.w	r0, #0
 800a4be:	f04f 0100 	mov.w	r1, #0
 800a4c2:	00d9      	lsls	r1, r3, #3
 800a4c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4c8:	00d0      	lsls	r0, r2, #3
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	1912      	adds	r2, r2, r4
 800a4d0:	eb45 0303 	adc.w	r3, r5, r3
 800a4d4:	f04f 0000 	mov.w	r0, #0
 800a4d8:	f04f 0100 	mov.w	r1, #0
 800a4dc:	0299      	lsls	r1, r3, #10
 800a4de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a4e2:	0290      	lsls	r0, r2, #10
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f04f 0300 	mov.w	r3, #0
 800a4f4:	f7fd fe70 	bl	80081d8 <__aeabi_uldivmod>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <HAL_RCC_GetSysClockFreq+0x160>)
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	0c1b      	lsrs	r3, r3, #16
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	3301      	adds	r3, #1
 800a50c:	005b      	lsls	r3, r3, #1
 800a50e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	fbb2 f3f3 	udiv	r3, r2, r3
 800a518:	60bb      	str	r3, [r7, #8]
      break;
 800a51a:	e002      	b.n	800a522 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a51c:	4b04      	ldr	r3, [pc, #16]	; (800a530 <HAL_RCC_GetSysClockFreq+0x164>)
 800a51e:	60bb      	str	r3, [r7, #8]
      break;
 800a520:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a522:	68bb      	ldr	r3, [r7, #8]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bdb0      	pop	{r4, r5, r7, pc}
 800a52c:	40023800 	.word	0x40023800
 800a530:	00f42400 	.word	0x00f42400
 800a534:	017d7840 	.word	0x017d7840

0800a538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a53c:	4b03      	ldr	r3, [pc, #12]	; (800a54c <HAL_RCC_GetHCLKFreq+0x14>)
 800a53e:	681b      	ldr	r3, [r3, #0]
}
 800a540:	4618      	mov	r0, r3
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	20000000 	.word	0x20000000

0800a550 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d165      	bne.n	800a630 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4a41      	ldr	r2, [pc, #260]	; (800a66c <USB_SetTurnaroundTime+0x11c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d906      	bls.n	800a57a <USB_SetTurnaroundTime+0x2a>
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4a40      	ldr	r2, [pc, #256]	; (800a670 <USB_SetTurnaroundTime+0x120>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d202      	bcs.n	800a57a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a574:	230f      	movs	r3, #15
 800a576:	617b      	str	r3, [r7, #20]
 800a578:	e062      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	4a3c      	ldr	r2, [pc, #240]	; (800a670 <USB_SetTurnaroundTime+0x120>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d306      	bcc.n	800a590 <USB_SetTurnaroundTime+0x40>
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	4a3b      	ldr	r2, [pc, #236]	; (800a674 <USB_SetTurnaroundTime+0x124>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d202      	bcs.n	800a590 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a58a:	230e      	movs	r3, #14
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	e057      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4a38      	ldr	r2, [pc, #224]	; (800a674 <USB_SetTurnaroundTime+0x124>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d306      	bcc.n	800a5a6 <USB_SetTurnaroundTime+0x56>
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4a37      	ldr	r2, [pc, #220]	; (800a678 <USB_SetTurnaroundTime+0x128>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d202      	bcs.n	800a5a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5a0:	230d      	movs	r3, #13
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e04c      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	4a33      	ldr	r2, [pc, #204]	; (800a678 <USB_SetTurnaroundTime+0x128>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d306      	bcc.n	800a5bc <USB_SetTurnaroundTime+0x6c>
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	4a32      	ldr	r2, [pc, #200]	; (800a67c <USB_SetTurnaroundTime+0x12c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d802      	bhi.n	800a5bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	e041      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	4a2f      	ldr	r2, [pc, #188]	; (800a67c <USB_SetTurnaroundTime+0x12c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d906      	bls.n	800a5d2 <USB_SetTurnaroundTime+0x82>
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	4a2e      	ldr	r2, [pc, #184]	; (800a680 <USB_SetTurnaroundTime+0x130>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d802      	bhi.n	800a5d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5cc:	230b      	movs	r3, #11
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	e036      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	4a2a      	ldr	r2, [pc, #168]	; (800a680 <USB_SetTurnaroundTime+0x130>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d906      	bls.n	800a5e8 <USB_SetTurnaroundTime+0x98>
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	4a29      	ldr	r2, [pc, #164]	; (800a684 <USB_SetTurnaroundTime+0x134>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d802      	bhi.n	800a5e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5e2:	230a      	movs	r3, #10
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e02b      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4a26      	ldr	r2, [pc, #152]	; (800a684 <USB_SetTurnaroundTime+0x134>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d906      	bls.n	800a5fe <USB_SetTurnaroundTime+0xae>
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	4a25      	ldr	r2, [pc, #148]	; (800a688 <USB_SetTurnaroundTime+0x138>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d202      	bcs.n	800a5fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a5f8:	2309      	movs	r3, #9
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	e020      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	4a21      	ldr	r2, [pc, #132]	; (800a688 <USB_SetTurnaroundTime+0x138>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d306      	bcc.n	800a614 <USB_SetTurnaroundTime+0xc4>
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	4a20      	ldr	r2, [pc, #128]	; (800a68c <USB_SetTurnaroundTime+0x13c>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d802      	bhi.n	800a614 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a60e:	2308      	movs	r3, #8
 800a610:	617b      	str	r3, [r7, #20]
 800a612:	e015      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4a1d      	ldr	r2, [pc, #116]	; (800a68c <USB_SetTurnaroundTime+0x13c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d906      	bls.n	800a62a <USB_SetTurnaroundTime+0xda>
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4a1c      	ldr	r2, [pc, #112]	; (800a690 <USB_SetTurnaroundTime+0x140>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d202      	bcs.n	800a62a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a624:	2307      	movs	r3, #7
 800a626:	617b      	str	r3, [r7, #20]
 800a628:	e00a      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a62a:	2306      	movs	r3, #6
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e007      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d102      	bne.n	800a63c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a636:	2309      	movs	r3, #9
 800a638:	617b      	str	r3, [r7, #20]
 800a63a:	e001      	b.n	800a640 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a63c:	2309      	movs	r3, #9
 800a63e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	029b      	lsls	r3, r3, #10
 800a654:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a658:	431a      	orrs	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	371c      	adds	r7, #28
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	00d8acbf 	.word	0x00d8acbf
 800a670:	00e4e1c0 	.word	0x00e4e1c0
 800a674:	00f42400 	.word	0x00f42400
 800a678:	01067380 	.word	0x01067380
 800a67c:	011a499f 	.word	0x011a499f
 800a680:	01312cff 	.word	0x01312cff
 800a684:	014ca43f 	.word	0x014ca43f
 800a688:	016e3600 	.word	0x016e3600
 800a68c:	01a6ab1f 	.word	0x01a6ab1f
 800a690:	01e84800 	.word	0x01e84800

0800a694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	019b      	lsls	r3, r3, #6
 800a6a6:	f043 0220 	orr.w	r2, r3, #32
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4a09      	ldr	r2, [pc, #36]	; (800a6dc <USB_FlushTxFifo+0x48>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d901      	bls.n	800a6c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e006      	b.n	800a6ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	f003 0320 	and.w	r3, r3, #32
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	d0f0      	beq.n	800a6ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	00030d40 	.word	0x00030d40

0800a6e0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f003 0306 	and.w	r3, r3, #6
 800a6f8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d102      	bne.n	800a706 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]
 800a704:	e00a      	b.n	800a71c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d002      	beq.n	800a712 <USB_GetDevSpeed+0x32>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b06      	cmp	r3, #6
 800a710:	d102      	bne.n	800a718 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a712:	2302      	movs	r3, #2
 800a714:	75fb      	strb	r3, [r7, #23]
 800a716:	e001      	b.n	800a71c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a718:	230f      	movs	r3, #15
 800a71a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	785b      	ldrb	r3, [r3, #1]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d13a      	bne.n	800a7bc <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74c:	69da      	ldr	r2, [r3, #28]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f003 030f 	and.w	r3, r3, #15
 800a756:	2101      	movs	r1, #1
 800a758:	fa01 f303 	lsl.w	r3, r1, r3
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a764:	4313      	orrs	r3, r2
 800a766:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d155      	bne.n	800a82a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	78db      	ldrb	r3, [r3, #3]
 800a798:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a79a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	059b      	lsls	r3, r3, #22
 800a7a0:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	0151      	lsls	r1, r2, #5
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	440a      	add	r2, r1
 800a7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	e036      	b.n	800a82a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	f003 030f 	and.w	r3, r3, #15
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d2:	041b      	lsls	r3, r3, #16
 800a7d4:	68f9      	ldr	r1, [r7, #12]
 800a7d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d11a      	bne.n	800a82a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	78db      	ldrb	r3, [r3, #3]
 800a80e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a810:	430b      	orrs	r3, r1
 800a812:	4313      	orrs	r3, r2
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	0151      	lsls	r1, r2, #5
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	440a      	add	r2, r1
 800a81c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a828:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	785b      	ldrb	r3, [r3, #1]
 800a854:	2b01      	cmp	r3, #1
 800a856:	f040 815c 	bne.w	800ab12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d132      	bne.n	800a8c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	0151      	lsls	r1, r2, #5
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	440a      	add	r2, r1
 800a878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a87c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a880:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	0151      	lsls	r1, r2, #5
 800a898:	69fa      	ldr	r2, [r7, #28]
 800a89a:	440a      	add	r2, r1
 800a89c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	69ba      	ldr	r2, [r7, #24]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	69fa      	ldr	r2, [r7, #28]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8c0:	0cdb      	lsrs	r3, r3, #19
 800a8c2:	04db      	lsls	r3, r3, #19
 800a8c4:	6113      	str	r3, [r2, #16]
 800a8c6:	e074      	b.n	800a9b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	69ba      	ldr	r2, [r7, #24]
 800a8d8:	0151      	lsls	r1, r2, #5
 800a8da:	69fa      	ldr	r2, [r7, #28]
 800a8dc:	440a      	add	r2, r1
 800a8de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8e2:	0cdb      	lsrs	r3, r3, #19
 800a8e4:	04db      	lsls	r3, r3, #19
 800a8e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	0151      	lsls	r1, r2, #5
 800a8fa:	69fa      	ldr	r2, [r7, #28]
 800a8fc:	440a      	add	r2, r1
 800a8fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a902:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a906:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a90a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a918:	691a      	ldr	r2, [r3, #16]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	6959      	ldr	r1, [r3, #20]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	440b      	add	r3, r1
 800a924:	1e59      	subs	r1, r3, #1
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a92e:	04d9      	lsls	r1, r3, #19
 800a930:	4b9d      	ldr	r3, [pc, #628]	; (800aba8 <USB_EPStartXfer+0x370>)
 800a932:	400b      	ands	r3, r1
 800a934:	69b9      	ldr	r1, [r7, #24]
 800a936:	0148      	lsls	r0, r1, #5
 800a938:	69f9      	ldr	r1, [r7, #28]
 800a93a:	4401      	add	r1, r0
 800a93c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a940:	4313      	orrs	r3, r2
 800a942:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a950:	691a      	ldr	r2, [r3, #16]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a95a:	69b9      	ldr	r1, [r7, #24]
 800a95c:	0148      	lsls	r0, r1, #5
 800a95e:	69f9      	ldr	r1, [r7, #28]
 800a960:	4401      	add	r1, r0
 800a962:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a966:	4313      	orrs	r3, r2
 800a968:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	78db      	ldrb	r3, [r3, #3]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d11f      	bne.n	800a9b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	0151      	lsls	r1, r2, #5
 800a984:	69fa      	ldr	r2, [r7, #28]
 800a986:	440a      	add	r2, r1
 800a988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a98c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a990:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	0151      	lsls	r1, r2, #5
 800a9a4:	69fa      	ldr	r2, [r7, #28]
 800a9a6:	440a      	add	r2, r1
 800a9a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d14b      	bne.n	800aa50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	78db      	ldrb	r3, [r3, #3]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d128      	bne.n	800aa2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d110      	bne.n	800aa0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	0151      	lsls	r1, r2, #5
 800a9fe:	69fa      	ldr	r2, [r7, #28]
 800aa00:	440a      	add	r2, r1
 800aa02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	e00f      	b.n	800aa2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69ba      	ldr	r2, [r7, #24]
 800aa1e:	0151      	lsls	r1, r2, #5
 800aa20:	69fa      	ldr	r2, [r7, #28]
 800aa22:	440a      	add	r2, r1
 800aa24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	0151      	lsls	r1, r2, #5
 800aa40:	69fa      	ldr	r2, [r7, #28]
 800aa42:	440a      	add	r2, r1
 800aa44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	e12f      	b.n	800acb0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	015a      	lsls	r2, r3, #5
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	69ba      	ldr	r2, [r7, #24]
 800aa60:	0151      	lsls	r1, r2, #5
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	440a      	add	r2, r1
 800aa66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	78db      	ldrb	r3, [r3, #3]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d015      	beq.n	800aaa4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8117 	beq.w	800acb0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	f003 030f 	and.w	r3, r3, #15
 800aa92:	2101      	movs	r1, #1
 800aa94:	fa01 f303 	lsl.w	r3, r1, r3
 800aa98:	69f9      	ldr	r1, [r7, #28]
 800aa9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	634b      	str	r3, [r1, #52]	; 0x34
 800aaa2:	e105      	b.n	800acb0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d110      	bne.n	800aad6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	0151      	lsls	r1, r2, #5
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	440a      	add	r2, r1
 800aaca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	e00f      	b.n	800aaf6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	0151      	lsls	r1, r2, #5
 800aae8:	69fa      	ldr	r2, [r7, #28]
 800aaea:	440a      	add	r2, r1
 800aaec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaf4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	68d9      	ldr	r1, [r3, #12]
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	781a      	ldrb	r2, [r3, #0]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	b298      	uxth	r0, r3
 800ab04:	79fb      	ldrb	r3, [r7, #7]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	4603      	mov	r3, r0
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f000 fa2b 	bl	800af66 <USB_WritePacket>
 800ab10:	e0ce      	b.n	800acb0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	015a      	lsls	r2, r3, #5
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	4413      	add	r3, r2
 800ab1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	0151      	lsls	r1, r2, #5
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	440a      	add	r2, r1
 800ab28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2c:	0cdb      	lsrs	r3, r3, #19
 800ab2e:	04db      	lsls	r3, r3, #19
 800ab30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	0151      	lsls	r1, r2, #5
 800ab44:	69fa      	ldr	r2, [r7, #28]
 800ab46:	440a      	add	r2, r1
 800ab48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d126      	bne.n	800abac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6a:	691a      	ldr	r2, [r3, #16]
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab74:	69b9      	ldr	r1, [r7, #24]
 800ab76:	0148      	lsls	r0, r1, #5
 800ab78:	69f9      	ldr	r1, [r7, #28]
 800ab7a:	4401      	add	r1, r0
 800ab7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ab80:	4313      	orrs	r3, r2
 800ab82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	0151      	lsls	r1, r2, #5
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	440a      	add	r2, r1
 800ab9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aba2:	6113      	str	r3, [r2, #16]
 800aba4:	e036      	b.n	800ac14 <USB_EPStartXfer+0x3dc>
 800aba6:	bf00      	nop
 800aba8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	695a      	ldr	r2, [r3, #20]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	4413      	add	r3, r2
 800abb6:	1e5a      	subs	r2, r3, #1
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abce:	691a      	ldr	r2, [r3, #16]
 800abd0:	8afb      	ldrh	r3, [r7, #22]
 800abd2:	04d9      	lsls	r1, r3, #19
 800abd4:	4b39      	ldr	r3, [pc, #228]	; (800acbc <USB_EPStartXfer+0x484>)
 800abd6:	400b      	ands	r3, r1
 800abd8:	69b9      	ldr	r1, [r7, #24]
 800abda:	0148      	lsls	r0, r1, #5
 800abdc:	69f9      	ldr	r1, [r7, #28]
 800abde:	4401      	add	r1, r0
 800abe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800abe4:	4313      	orrs	r3, r2
 800abe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	691a      	ldr	r2, [r3, #16]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	8af9      	ldrh	r1, [r7, #22]
 800abfc:	fb01 f303 	mul.w	r3, r1, r3
 800ac00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac04:	69b9      	ldr	r1, [r7, #24]
 800ac06:	0148      	lsls	r0, r1, #5
 800ac08:	69f9      	ldr	r1, [r7, #28]
 800ac0a:	4401      	add	r1, r0
 800ac0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac10:	4313      	orrs	r3, r2
 800ac12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d10d      	bne.n	800ac36 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d009      	beq.n	800ac36 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	68d9      	ldr	r1, [r3, #12]
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac32:	460a      	mov	r2, r1
 800ac34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	78db      	ldrb	r3, [r3, #3]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d128      	bne.n	800ac90 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d110      	bne.n	800ac70 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	0151      	lsls	r1, r2, #5
 800ac60:	69fa      	ldr	r2, [r7, #28]
 800ac62:	440a      	add	r2, r1
 800ac64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	e00f      	b.n	800ac90 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	0151      	lsls	r1, r2, #5
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	440a      	add	r2, r1
 800ac86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3720      	adds	r7, #32
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	1ff80000 	.word	0x1ff80000

0800acc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	4613      	mov	r3, r2
 800accc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	785b      	ldrb	r3, [r3, #1]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	f040 80cd 	bne.w	800ae7c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d132      	bne.n	800ad50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	0151      	lsls	r1, r2, #5
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	440a      	add	r2, r1
 800ad00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	0151      	lsls	r1, r2, #5
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	440a      	add	r2, r1
 800ad44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad48:	0cdb      	lsrs	r3, r3, #19
 800ad4a:	04db      	lsls	r3, r3, #19
 800ad4c:	6113      	str	r3, [r2, #16]
 800ad4e:	e04e      	b.n	800adee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	0151      	lsls	r1, r2, #5
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	440a      	add	r2, r1
 800ad66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad6a:	0cdb      	lsrs	r3, r3, #19
 800ad6c:	04db      	lsls	r3, r3, #19
 800ad6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	0151      	lsls	r1, r2, #5
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	440a      	add	r2, r1
 800ad86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	695a      	ldr	r2, [r3, #20]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d903      	bls.n	800ada8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	689a      	ldr	r2, [r3, #8]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	0151      	lsls	r1, r2, #5
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	440a      	add	r2, r1
 800adbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add4:	691a      	ldr	r2, [r3, #16]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adde:	6939      	ldr	r1, [r7, #16]
 800ade0:	0148      	lsls	r0, r1, #5
 800ade2:	6979      	ldr	r1, [r7, #20]
 800ade4:	4401      	add	r1, r0
 800ade6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800adea:	4313      	orrs	r3, r2
 800adec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d11e      	bne.n	800ae32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d009      	beq.n	800ae10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae08:	461a      	mov	r2, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	0151      	lsls	r1, r2, #5
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	440a      	add	r2, r1
 800ae26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	e092      	b.n	800af58 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	0151      	lsls	r1, r2, #5
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	440a      	add	r2, r1
 800ae48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d07e      	beq.n	800af58 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae70:	6979      	ldr	r1, [r7, #20]
 800ae72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae76:	4313      	orrs	r3, r2
 800ae78:	634b      	str	r3, [r1, #52]	; 0x34
 800ae7a:	e06d      	b.n	800af58 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	0151      	lsls	r1, r2, #5
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	440a      	add	r2, r1
 800ae92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae96:	0cdb      	lsrs	r3, r3, #19
 800ae98:	04db      	lsls	r3, r3, #19
 800ae9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	693a      	ldr	r2, [r7, #16]
 800aeac:	0151      	lsls	r1, r2, #5
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	440a      	add	r2, r1
 800aeb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aeba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aebe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aeee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aefc:	691a      	ldr	r2, [r3, #16]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af06:	6939      	ldr	r1, [r7, #16]
 800af08:	0148      	lsls	r0, r1, #5
 800af0a:	6979      	ldr	r1, [r7, #20]
 800af0c:	4401      	add	r1, r0
 800af0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af12:	4313      	orrs	r3, r2
 800af14:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800af16:	79fb      	ldrb	r3, [r7, #7]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d10d      	bne.n	800af38 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d009      	beq.n	800af38 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	68d9      	ldr	r1, [r3, #12]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af34:	460a      	mov	r2, r1
 800af36:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	0151      	lsls	r1, r2, #5
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	440a      	add	r2, r1
 800af4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800af66:	b480      	push	{r7}
 800af68:	b089      	sub	sp, #36	; 0x24
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	4611      	mov	r1, r2
 800af72:	461a      	mov	r2, r3
 800af74:	460b      	mov	r3, r1
 800af76:	71fb      	strb	r3, [r7, #7]
 800af78:	4613      	mov	r3, r2
 800af7a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800af84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d11a      	bne.n	800afc2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800af8c:	88bb      	ldrh	r3, [r7, #4]
 800af8e:	3303      	adds	r3, #3
 800af90:	089b      	lsrs	r3, r3, #2
 800af92:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800af94:	2300      	movs	r3, #0
 800af96:	61bb      	str	r3, [r7, #24]
 800af98:	e00f      	b.n	800afba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	031a      	lsls	r2, r3, #12
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa6:	461a      	mov	r2, r3
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6013      	str	r3, [r2, #0]
      pSrc++;
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	3304      	adds	r3, #4
 800afb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	3301      	adds	r3, #1
 800afb8:	61bb      	str	r3, [r7, #24]
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d3eb      	bcc.n	800af9a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3724      	adds	r7, #36	; 0x24
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b089      	sub	sp, #36	; 0x24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	4613      	mov	r3, r2
 800afdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800afe6:	88fb      	ldrh	r3, [r7, #6]
 800afe8:	3303      	adds	r3, #3
 800afea:	089b      	lsrs	r3, r3, #2
 800afec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800afee:	2300      	movs	r3, #0
 800aff0:	61bb      	str	r3, [r7, #24]
 800aff2:	e00b      	b.n	800b00c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	601a      	str	r2, [r3, #0]
    pDest++;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	3304      	adds	r3, #4
 800b004:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	3301      	adds	r3, #1
 800b00a:	61bb      	str	r3, [r7, #24]
 800b00c:	69ba      	ldr	r2, [r7, #24]
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	429a      	cmp	r2, r3
 800b012:	d3ef      	bcc.n	800aff4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b014:	69fb      	ldr	r3, [r7, #28]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3724      	adds	r7, #36	; 0x24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	785b      	ldrb	r3, [r3, #1]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d12c      	bne.n	800b098 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	db12      	blt.n	800b076 <USB_EPSetStall+0x54>
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00f      	beq.n	800b076 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	0151      	lsls	r1, r2, #5
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	440a      	add	r2, r1
 800b06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b070:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b074:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	0151      	lsls	r1, r2, #5
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	440a      	add	r2, r1
 800b08c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	e02b      	b.n	800b0f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	db12      	blt.n	800b0d0 <USB_EPSetStall+0xae>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00f      	beq.n	800b0d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	015a      	lsls	r2, r3, #5
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	0151      	lsls	r1, r2, #5
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	440a      	add	r2, r1
 800b0c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	0151      	lsls	r1, r2, #5
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b085      	sub	sp, #20
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d128      	bne.n	800b16c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	0151      	lsls	r1, r2, #5
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	440a      	add	r2, r1
 800b130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b134:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b138:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	78db      	ldrb	r3, [r3, #3]
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d003      	beq.n	800b14a <USB_EPClearStall+0x4c>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	78db      	ldrb	r3, [r3, #3]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d138      	bne.n	800b1bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	0151      	lsls	r1, r2, #5
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	440a      	add	r2, r1
 800b160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b168:	6013      	str	r3, [r2, #0]
 800b16a:	e027      	b.n	800b1bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	015a      	lsls	r2, r3, #5
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4413      	add	r3, r2
 800b174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	0151      	lsls	r1, r2, #5
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	440a      	add	r2, r1
 800b182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b18a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	78db      	ldrb	r3, [r3, #3]
 800b190:	2b03      	cmp	r3, #3
 800b192:	d003      	beq.n	800b19c <USB_EPClearStall+0x9e>
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	78db      	ldrb	r3, [r3, #3]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d10f      	bne.n	800b1bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	0151      	lsls	r1, r2, #5
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	440a      	add	r2, r1
 800b1b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b1ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	78fb      	ldrb	r3, [r7, #3]
 800b1f8:	011b      	lsls	r3, r3, #4
 800b1fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b1fe:	68f9      	ldr	r1, [r7, #12]
 800b200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b204:	4313      	orrs	r3, r2
 800b206:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b216:	b480      	push	{r7}
 800b218:	b085      	sub	sp, #20
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	4013      	ands	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b22e:	68fb      	ldr	r3, [r7, #12]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	4013      	ands	r3, r2
 800b25e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	0c1b      	lsrs	r3, r3, #16
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	4013      	ands	r3, r2
 800b292:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	b29b      	uxth	r3, r3
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b302:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	f003 030f 	and.w	r3, r3, #15
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	fa22 f303 	lsr.w	r3, r2, r3
 800b310:	01db      	lsls	r3, r3, #7
 800b312:	b2db      	uxtb	r3, r3
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	4313      	orrs	r3, r2
 800b318:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b31a:	78fb      	ldrb	r3, [r7, #3]
 800b31c:	015a      	lsls	r2, r3, #5
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	4413      	add	r3, r2
 800b322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	4013      	ands	r3, r2
 800b32c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b32e:	68bb      	ldr	r3, [r7, #8]
}
 800b330:	4618      	mov	r0, r3
 800b332:	371c      	adds	r7, #28
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	f003 0301 	and.w	r3, r3, #1
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b376:	f023 0307 	bic.w	r3, r3, #7
 800b37a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b38a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b38e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
	...

0800b3a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	333c      	adds	r3, #60	; 0x3c
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	4a26      	ldr	r2, [pc, #152]	; (800b458 <USB_EP0_OutStart+0xb8>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d90a      	bls.n	800b3da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3d4:	d101      	bne.n	800b3da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e037      	b.n	800b44a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b408:	f043 0318 	orr.w	r3, r3, #24
 800b40c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b41c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b420:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b422:	7afb      	ldrb	r3, [r7, #11]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d10f      	bne.n	800b448 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42e:	461a      	mov	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b442:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	4f54300a 	.word	0x4f54300a

0800b45c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b084      	sub	sp, #16
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	460b      	mov	r3, r1
 800b47c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b47e:	2303      	movs	r3, #3
 800b480:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d009      	beq.n	800b4a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	78fa      	ldrb	r2, [r7, #3]
 800b496:	4611      	mov	r1, r2
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	4798      	blx	r3
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	78fa      	ldrb	r2, [r7, #3]
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	4798      	blx	r3
  }

  return USBD_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 ff8f 	bl	800c410 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b500:	461a      	mov	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b50e:	f003 031f 	and.w	r3, r3, #31
 800b512:	2b02      	cmp	r3, #2
 800b514:	d01a      	beq.n	800b54c <USBD_LL_SetupStage+0x72>
 800b516:	2b02      	cmp	r3, #2
 800b518:	d822      	bhi.n	800b560 <USBD_LL_SetupStage+0x86>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <USBD_LL_SetupStage+0x4a>
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d00a      	beq.n	800b538 <USBD_LL_SetupStage+0x5e>
 800b522:	e01d      	b.n	800b560 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fa61 	bl	800b9f4 <USBD_StdDevReq>
 800b532:	4603      	mov	r3, r0
 800b534:	73fb      	strb	r3, [r7, #15]
      break;
 800b536:	e020      	b.n	800b57a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fac5 	bl	800bad0 <USBD_StdItfReq>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]
      break;
 800b54a:	e016      	b.n	800b57a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fb04 	bl	800bb62 <USBD_StdEPReq>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]
      break;
 800b55e:	e00c      	b.n	800b57a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f001 f90a 	bl	800c788 <USBD_LL_StallEP>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]
      break;
 800b578:	bf00      	nop
  }

  return ret;
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	460b      	mov	r3, r1
 800b58e:	607a      	str	r2, [r7, #4]
 800b590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b592:	7afb      	ldrb	r3, [r7, #11]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d138      	bne.n	800b60a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b59e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d14a      	bne.n	800b640 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	689a      	ldr	r2, [r3, #8]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d913      	bls.n	800b5de <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	689a      	ldr	r2, [r3, #8]
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	1ad2      	subs	r2, r2, r3
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	bf28      	it	cs
 800b5d0:	4613      	movcs	r3, r2
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f000 ff91 	bl	800c4fe <USBD_CtlContinueRx>
 800b5dc:	e030      	b.n	800b640 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d10b      	bne.n	800b602 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 ff8c 	bl	800c520 <USBD_CtlSendStatus>
 800b608:	e01a      	b.n	800b640 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b03      	cmp	r3, #3
 800b614:	d114      	bne.n	800b640 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b61c:	699b      	ldr	r3, [r3, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00e      	beq.n	800b640 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	7afa      	ldrb	r2, [r7, #11]
 800b62c:	4611      	mov	r1, r2
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	4798      	blx	r3
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
 800b63e:	e000      	b.n	800b642 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	460b      	mov	r3, r1
 800b654:	607a      	str	r2, [r7, #4]
 800b656:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b658:	7afb      	ldrb	r3, [r7, #11]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d16b      	bne.n	800b736 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3314      	adds	r3, #20
 800b662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d156      	bne.n	800b71c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	689a      	ldr	r2, [r3, #8]
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	429a      	cmp	r2, r3
 800b678:	d914      	bls.n	800b6a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	689a      	ldr	r2, [r3, #8]
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	1ad2      	subs	r2, r2, r3
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	461a      	mov	r2, r3
 800b68e:	6879      	ldr	r1, [r7, #4]
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f000 ff23 	bl	800c4dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b696:	2300      	movs	r3, #0
 800b698:	2200      	movs	r2, #0
 800b69a:	2100      	movs	r1, #0
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f001 f91d 	bl	800c8dc <USBD_LL_PrepareReceive>
 800b6a2:	e03b      	b.n	800b71c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d11c      	bne.n	800b6ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	685a      	ldr	r2, [r3, #4]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d316      	bcc.n	800b6ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d20f      	bcs.n	800b6ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f000 ff04 	bl	800c4dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6dc:	2300      	movs	r3, #0
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f001 f8fa 	bl	800c8dc <USBD_LL_PrepareReceive>
 800b6e8:	e018      	b.n	800b71c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d10b      	bne.n	800b70e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b70e:	2180      	movs	r1, #128	; 0x80
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f001 f839 	bl	800c788 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 ff15 	bl	800c546 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b722:	2b01      	cmp	r3, #1
 800b724:	d122      	bne.n	800b76c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff fe98 	bl	800b45c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b734:	e01a      	b.n	800b76c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b03      	cmp	r3, #3
 800b740:	d114      	bne.n	800b76c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00e      	beq.n	800b76c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	7afa      	ldrb	r2, [r7, #11]
 800b758:	4611      	mov	r1, r2
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	4798      	blx	r3
 800b75e:	4603      	mov	r3, r0
 800b760:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b768:	7dfb      	ldrb	r3, [r7, #23]
 800b76a:	e000      	b.n	800b76e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b082      	sub	sp, #8
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e02f      	b.n	800b80a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00f      	beq.n	800b7d4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d009      	beq.n	800b7d4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	6852      	ldr	r2, [r2, #4]
 800b7cc:	b2d2      	uxtb	r2, r2
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7d4:	2340      	movs	r3, #64	; 0x40
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2100      	movs	r1, #0
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 ffae 	bl	800c73c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2240      	movs	r2, #64	; 0x40
 800b7ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2180      	movs	r1, #128	; 0x80
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 ffa0 	bl	800c73c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2240      	movs	r2, #64	; 0x40
 800b806:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b812:	b480      	push	{r7}
 800b814:	b083      	sub	sp, #12
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	460b      	mov	r3, r1
 800b81c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	78fa      	ldrb	r2, [r7, #3]
 800b822:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b840:	b2da      	uxtb	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2204      	movs	r2, #4
 800b84c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b04      	cmp	r3, #4
 800b870:	d106      	bne.n	800b880 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b082      	sub	sp, #8
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e012      	b.n	800b8ca <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d10b      	bne.n	800b8c8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b6:	69db      	ldr	r3, [r3, #28]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d005      	beq.n	800b8c8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c2:	69db      	ldr	r3, [r3, #28]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e014      	b.n	800b916 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d10d      	bne.n	800b914 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fe:	6a1b      	ldr	r3, [r3, #32]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d007      	beq.n	800b914 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	78fa      	ldrb	r2, [r7, #3]
 800b90e:	4611      	mov	r1, r2
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	460b      	mov	r3, r1
 800b928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	e014      	b.n	800b962 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b03      	cmp	r3, #3
 800b942:	d10d      	bne.n	800b960 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d007      	beq.n	800b960 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	78fa      	ldrb	r2, [r7, #3]
 800b95a:	4611      	mov	r1, r2
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b96a:	b480      	push	{r7}
 800b96c:	b083      	sub	sp, #12
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b996:	2b00      	cmp	r3, #0
 800b998:	d009      	beq.n	800b9ae <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6852      	ldr	r2, [r2, #4]
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	4798      	blx	r3
  }

  return USBD_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b9d6:	8a3b      	ldrh	r3, [r7, #16]
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	b21a      	sxth	r2, r3
 800b9dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	b21b      	sxth	r3, r3
 800b9e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b9e6:	89fb      	ldrh	r3, [r7, #14]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	371c      	adds	r7, #28
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba0a:	2b40      	cmp	r3, #64	; 0x40
 800ba0c:	d005      	beq.n	800ba1a <USBD_StdDevReq+0x26>
 800ba0e:	2b40      	cmp	r3, #64	; 0x40
 800ba10:	d853      	bhi.n	800baba <USBD_StdDevReq+0xc6>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00b      	beq.n	800ba2e <USBD_StdDevReq+0x3a>
 800ba16:	2b20      	cmp	r3, #32
 800ba18:	d14f      	bne.n	800baba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	4798      	blx	r3
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2c:	e04a      	b.n	800bac4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	785b      	ldrb	r3, [r3, #1]
 800ba32:	2b09      	cmp	r3, #9
 800ba34:	d83b      	bhi.n	800baae <USBD_StdDevReq+0xba>
 800ba36:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <USBD_StdDevReq+0x48>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba91 	.word	0x0800ba91
 800ba40:	0800baa5 	.word	0x0800baa5
 800ba44:	0800baaf 	.word	0x0800baaf
 800ba48:	0800ba9b 	.word	0x0800ba9b
 800ba4c:	0800baaf 	.word	0x0800baaf
 800ba50:	0800ba6f 	.word	0x0800ba6f
 800ba54:	0800ba65 	.word	0x0800ba65
 800ba58:	0800baaf 	.word	0x0800baaf
 800ba5c:	0800ba87 	.word	0x0800ba87
 800ba60:	0800ba79 	.word	0x0800ba79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f9de 	bl	800be28 <USBD_GetDescriptor>
          break;
 800ba6c:	e024      	b.n	800bab8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fb43 	bl	800c0fc <USBD_SetAddress>
          break;
 800ba76:	e01f      	b.n	800bab8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fb82 	bl	800c184 <USBD_SetConfig>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]
          break;
 800ba84:	e018      	b.n	800bab8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fc21 	bl	800c2d0 <USBD_GetConfig>
          break;
 800ba8e:	e013      	b.n	800bab8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba90:	6839      	ldr	r1, [r7, #0]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fc52 	bl	800c33c <USBD_GetStatus>
          break;
 800ba98:	e00e      	b.n	800bab8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fc81 	bl	800c3a4 <USBD_SetFeature>
          break;
 800baa2:	e009      	b.n	800bab8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fc90 	bl	800c3cc <USBD_ClrFeature>
          break;
 800baac:	e004      	b.n	800bab8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fce7 	bl	800c484 <USBD_CtlError>
          break;
 800bab6:	bf00      	nop
      }
      break;
 800bab8:	e004      	b.n	800bac4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fce1 	bl	800c484 <USBD_CtlError>
      break;
 800bac2:	bf00      	nop
  }

  return ret;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop

0800bad0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bae6:	2b40      	cmp	r3, #64	; 0x40
 800bae8:	d005      	beq.n	800baf6 <USBD_StdItfReq+0x26>
 800baea:	2b40      	cmp	r3, #64	; 0x40
 800baec:	d82f      	bhi.n	800bb4e <USBD_StdItfReq+0x7e>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <USBD_StdItfReq+0x26>
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	d12b      	bne.n	800bb4e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	3b01      	subs	r3, #1
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d81d      	bhi.n	800bb40 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	889b      	ldrh	r3, [r3, #4]
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d813      	bhi.n	800bb36 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	4798      	blx	r3
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	88db      	ldrh	r3, [r3, #6]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d110      	bne.n	800bb4a <USBD_StdItfReq+0x7a>
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10d      	bne.n	800bb4a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fcf6 	bl	800c520 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb34:	e009      	b.n	800bb4a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fca3 	bl	800c484 <USBD_CtlError>
          break;
 800bb3e:	e004      	b.n	800bb4a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fc9e 	bl	800c484 <USBD_CtlError>
          break;
 800bb48:	e000      	b.n	800bb4c <USBD_StdItfReq+0x7c>
          break;
 800bb4a:	bf00      	nop
      }
      break;
 800bb4c:	e004      	b.n	800bb58 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fc97 	bl	800c484 <USBD_CtlError>
      break;
 800bb56:	bf00      	nop
  }

  return ret;
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	889b      	ldrh	r3, [r3, #4]
 800bb74:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb7e:	2b40      	cmp	r3, #64	; 0x40
 800bb80:	d007      	beq.n	800bb92 <USBD_StdEPReq+0x30>
 800bb82:	2b40      	cmp	r3, #64	; 0x40
 800bb84:	f200 8145 	bhi.w	800be12 <USBD_StdEPReq+0x2b0>
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00c      	beq.n	800bba6 <USBD_StdEPReq+0x44>
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	f040 8140 	bne.w	800be12 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	4798      	blx	r3
 800bba0:	4603      	mov	r3, r0
 800bba2:	73fb      	strb	r3, [r7, #15]
      break;
 800bba4:	e13a      	b.n	800be1c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	785b      	ldrb	r3, [r3, #1]
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d007      	beq.n	800bbbe <USBD_StdEPReq+0x5c>
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	f300 8129 	bgt.w	800be06 <USBD_StdEPReq+0x2a4>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d07f      	beq.n	800bcb8 <USBD_StdEPReq+0x156>
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d03c      	beq.n	800bc36 <USBD_StdEPReq+0xd4>
 800bbbc:	e123      	b.n	800be06 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d002      	beq.n	800bbd0 <USBD_StdEPReq+0x6e>
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d016      	beq.n	800bbfc <USBD_StdEPReq+0x9a>
 800bbce:	e02c      	b.n	800bc2a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00d      	beq.n	800bbf2 <USBD_StdEPReq+0x90>
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	2b80      	cmp	r3, #128	; 0x80
 800bbda:	d00a      	beq.n	800bbf2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fdd1 	bl	800c788 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbe6:	2180      	movs	r1, #128	; 0x80
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fdcd 	bl	800c788 <USBD_LL_StallEP>
 800bbee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbf0:	e020      	b.n	800bc34 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fc45 	bl	800c484 <USBD_CtlError>
              break;
 800bbfa:	e01b      	b.n	800bc34 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	885b      	ldrh	r3, [r3, #2]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10e      	bne.n	800bc22 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <USBD_StdEPReq+0xc0>
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	2b80      	cmp	r3, #128	; 0x80
 800bc0e:	d008      	beq.n	800bc22 <USBD_StdEPReq+0xc0>
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	88db      	ldrh	r3, [r3, #6]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d104      	bne.n	800bc22 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fdb3 	bl	800c788 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fc7c 	bl	800c520 <USBD_CtlSendStatus>

              break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fc29 	bl	800c484 <USBD_CtlError>
              break;
 800bc32:	bf00      	nop
          }
          break;
 800bc34:	e0ec      	b.n	800be10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d002      	beq.n	800bc48 <USBD_StdEPReq+0xe6>
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d016      	beq.n	800bc74 <USBD_StdEPReq+0x112>
 800bc46:	e030      	b.n	800bcaa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00d      	beq.n	800bc6a <USBD_StdEPReq+0x108>
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
 800bc50:	2b80      	cmp	r3, #128	; 0x80
 800bc52:	d00a      	beq.n	800bc6a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fd95 	bl	800c788 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc5e:	2180      	movs	r1, #128	; 0x80
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fd91 	bl	800c788 <USBD_LL_StallEP>
 800bc66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc68:	e025      	b.n	800bcb6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fc09 	bl	800c484 <USBD_CtlError>
              break;
 800bc72:	e020      	b.n	800bcb6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	885b      	ldrh	r3, [r3, #2]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d11b      	bne.n	800bcb4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc7c:	7bbb      	ldrb	r3, [r7, #14]
 800bc7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d004      	beq.n	800bc90 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fd9b 	bl	800c7c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fc45 	bl	800c520 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	4798      	blx	r3
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bca8:	e004      	b.n	800bcb4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bcaa:	6839      	ldr	r1, [r7, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fbe9 	bl	800c484 <USBD_CtlError>
              break;
 800bcb2:	e000      	b.n	800bcb6 <USBD_StdEPReq+0x154>
              break;
 800bcb4:	bf00      	nop
          }
          break;
 800bcb6:	e0ab      	b.n	800be10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d002      	beq.n	800bcca <USBD_StdEPReq+0x168>
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d032      	beq.n	800bd2e <USBD_StdEPReq+0x1cc>
 800bcc8:	e097      	b.n	800bdfa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d007      	beq.n	800bce0 <USBD_StdEPReq+0x17e>
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b80      	cmp	r3, #128	; 0x80
 800bcd4:	d004      	beq.n	800bce0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 fbd3 	bl	800c484 <USBD_CtlError>
                break;
 800bcde:	e091      	b.n	800be04 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	da0b      	bge.n	800bd00 <USBD_StdEPReq+0x19e>
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcee:	4613      	mov	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	3310      	adds	r3, #16
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	e00b      	b.n	800bd18 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd06:	4613      	mov	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	4413      	add	r3, r2
 800bd16:	3304      	adds	r3, #4
 800bd18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2202      	movs	r2, #2
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fbbd 	bl	800c4a6 <USBD_CtlSendData>
              break;
 800bd2c:	e06a      	b.n	800be04 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	da11      	bge.n	800bd5a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	f003 020f 	and.w	r2, r3, #15
 800bd3c:	6879      	ldr	r1, [r7, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	440b      	add	r3, r1
 800bd48:	3324      	adds	r3, #36	; 0x24
 800bd4a:	881b      	ldrh	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d117      	bne.n	800bd80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fb96 	bl	800c484 <USBD_CtlError>
                  break;
 800bd58:	e054      	b.n	800be04 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd5a:	7bbb      	ldrb	r3, [r7, #14]
 800bd5c:	f003 020f 	and.w	r2, r3, #15
 800bd60:	6879      	ldr	r1, [r7, #4]
 800bd62:	4613      	mov	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	440b      	add	r3, r1
 800bd6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d104      	bne.n	800bd80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fb83 	bl	800c484 <USBD_CtlError>
                  break;
 800bd7e:	e041      	b.n	800be04 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	da0b      	bge.n	800bda0 <USBD_StdEPReq+0x23e>
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	3310      	adds	r3, #16
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	e00b      	b.n	800bdb8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bda6:	4613      	mov	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdba:	7bbb      	ldrb	r3, [r7, #14]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d002      	beq.n	800bdc6 <USBD_StdEPReq+0x264>
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	2b80      	cmp	r3, #128	; 0x80
 800bdc4:	d103      	bne.n	800bdce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]
 800bdcc:	e00e      	b.n	800bdec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fd16 	bl	800c804 <USBD_LL_IsStallEP>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	2201      	movs	r2, #1
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	e002      	b.n	800bdec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fb57 	bl	800c4a6 <USBD_CtlSendData>
              break;
 800bdf8:	e004      	b.n	800be04 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fb41 	bl	800c484 <USBD_CtlError>
              break;
 800be02:	bf00      	nop
          }
          break;
 800be04:	e004      	b.n	800be10 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fb3b 	bl	800c484 <USBD_CtlError>
          break;
 800be0e:	bf00      	nop
      }
      break;
 800be10:	e004      	b.n	800be1c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fb35 	bl	800c484 <USBD_CtlError>
      break;
 800be1a:	bf00      	nop
  }

  return ret;
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be32:	2300      	movs	r3, #0
 800be34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	885b      	ldrh	r3, [r3, #2]
 800be42:	0a1b      	lsrs	r3, r3, #8
 800be44:	b29b      	uxth	r3, r3
 800be46:	3b01      	subs	r3, #1
 800be48:	2b06      	cmp	r3, #6
 800be4a:	f200 8128 	bhi.w	800c09e <USBD_GetDescriptor+0x276>
 800be4e:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <USBD_GetDescriptor+0x2c>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800be71 	.word	0x0800be71
 800be58:	0800be89 	.word	0x0800be89
 800be5c:	0800bec9 	.word	0x0800bec9
 800be60:	0800c09f 	.word	0x0800c09f
 800be64:	0800c09f 	.word	0x0800c09f
 800be68:	0800c03f 	.word	0x0800c03f
 800be6c:	0800c06b 	.word	0x0800c06b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	7c12      	ldrb	r2, [r2, #16]
 800be7c:	f107 0108 	add.w	r1, r7, #8
 800be80:	4610      	mov	r0, r2
 800be82:	4798      	blx	r3
 800be84:	60f8      	str	r0, [r7, #12]
      break;
 800be86:	e112      	b.n	800c0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7c1b      	ldrb	r3, [r3, #16]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10d      	bne.n	800beac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be98:	f107 0208 	add.w	r2, r7, #8
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3301      	adds	r3, #1
 800bea6:	2202      	movs	r2, #2
 800bea8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800beaa:	e100      	b.n	800c0ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	f107 0208 	add.w	r2, r7, #8
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
 800bebc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3301      	adds	r3, #1
 800bec2:	2202      	movs	r2, #2
 800bec4:	701a      	strb	r2, [r3, #0]
      break;
 800bec6:	e0f2      	b.n	800c0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	885b      	ldrh	r3, [r3, #2]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b05      	cmp	r3, #5
 800bed0:	f200 80ac 	bhi.w	800c02c <USBD_GetDescriptor+0x204>
 800bed4:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <USBD_GetDescriptor+0xb4>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800bef5 	.word	0x0800bef5
 800bee0:	0800bf29 	.word	0x0800bf29
 800bee4:	0800bf5d 	.word	0x0800bf5d
 800bee8:	0800bf91 	.word	0x0800bf91
 800beec:	0800bfc5 	.word	0x0800bfc5
 800bef0:	0800bff9 	.word	0x0800bff9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00b      	beq.n	800bf18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	7c12      	ldrb	r2, [r2, #16]
 800bf0c:	f107 0108 	add.w	r1, r7, #8
 800bf10:	4610      	mov	r0, r2
 800bf12:	4798      	blx	r3
 800bf14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf16:	e091      	b.n	800c03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fab2 	bl	800c484 <USBD_CtlError>
            err++;
 800bf20:	7afb      	ldrb	r3, [r7, #11]
 800bf22:	3301      	adds	r3, #1
 800bf24:	72fb      	strb	r3, [r7, #11]
          break;
 800bf26:	e089      	b.n	800c03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00b      	beq.n	800bf4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	7c12      	ldrb	r2, [r2, #16]
 800bf40:	f107 0108 	add.w	r1, r7, #8
 800bf44:	4610      	mov	r0, r2
 800bf46:	4798      	blx	r3
 800bf48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf4a:	e077      	b.n	800c03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fa98 	bl	800c484 <USBD_CtlError>
            err++;
 800bf54:	7afb      	ldrb	r3, [r7, #11]
 800bf56:	3301      	adds	r3, #1
 800bf58:	72fb      	strb	r3, [r7, #11]
          break;
 800bf5a:	e06f      	b.n	800c03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00b      	beq.n	800bf80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	7c12      	ldrb	r2, [r2, #16]
 800bf74:	f107 0108 	add.w	r1, r7, #8
 800bf78:	4610      	mov	r0, r2
 800bf7a:	4798      	blx	r3
 800bf7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf7e:	e05d      	b.n	800c03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fa7e 	bl	800c484 <USBD_CtlError>
            err++;
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf8e:	e055      	b.n	800c03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00b      	beq.n	800bfb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	7c12      	ldrb	r2, [r2, #16]
 800bfa8:	f107 0108 	add.w	r1, r7, #8
 800bfac:	4610      	mov	r0, r2
 800bfae:	4798      	blx	r3
 800bfb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfb2:	e043      	b.n	800c03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fa64 	bl	800c484 <USBD_CtlError>
            err++;
 800bfbc:	7afb      	ldrb	r3, [r7, #11]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfc2:	e03b      	b.n	800c03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfca:	695b      	ldr	r3, [r3, #20]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	7c12      	ldrb	r2, [r2, #16]
 800bfdc:	f107 0108 	add.w	r1, r7, #8
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4798      	blx	r3
 800bfe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfe6:	e029      	b.n	800c03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fa4a 	bl	800c484 <USBD_CtlError>
            err++;
 800bff0:	7afb      	ldrb	r3, [r7, #11]
 800bff2:	3301      	adds	r3, #1
 800bff4:	72fb      	strb	r3, [r7, #11]
          break;
 800bff6:	e021      	b.n	800c03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00b      	beq.n	800c01c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	7c12      	ldrb	r2, [r2, #16]
 800c010:	f107 0108 	add.w	r1, r7, #8
 800c014:	4610      	mov	r0, r2
 800c016:	4798      	blx	r3
 800c018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c01a:	e00f      	b.n	800c03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fa30 	bl	800c484 <USBD_CtlError>
            err++;
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	3301      	adds	r3, #1
 800c028:	72fb      	strb	r3, [r7, #11]
          break;
 800c02a:	e007      	b.n	800c03c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fa28 	bl	800c484 <USBD_CtlError>
          err++;
 800c034:	7afb      	ldrb	r3, [r7, #11]
 800c036:	3301      	adds	r3, #1
 800c038:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c03a:	bf00      	nop
      }
      break;
 800c03c:	e037      	b.n	800c0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	7c1b      	ldrb	r3, [r3, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d109      	bne.n	800c05a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c04e:	f107 0208 	add.w	r2, r7, #8
 800c052:	4610      	mov	r0, r2
 800c054:	4798      	blx	r3
 800c056:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c058:	e029      	b.n	800c0ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fa11 	bl	800c484 <USBD_CtlError>
        err++;
 800c062:	7afb      	ldrb	r3, [r7, #11]
 800c064:	3301      	adds	r3, #1
 800c066:	72fb      	strb	r3, [r7, #11]
      break;
 800c068:	e021      	b.n	800c0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	7c1b      	ldrb	r3, [r3, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10d      	bne.n	800c08e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07a:	f107 0208 	add.w	r2, r7, #8
 800c07e:	4610      	mov	r0, r2
 800c080:	4798      	blx	r3
 800c082:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	3301      	adds	r3, #1
 800c088:	2207      	movs	r2, #7
 800c08a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c08c:	e00f      	b.n	800c0ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f9f7 	bl	800c484 <USBD_CtlError>
        err++;
 800c096:	7afb      	ldrb	r3, [r7, #11]
 800c098:	3301      	adds	r3, #1
 800c09a:	72fb      	strb	r3, [r7, #11]
      break;
 800c09c:	e007      	b.n	800c0ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f9ef 	bl	800c484 <USBD_CtlError>
      err++;
 800c0a6:	7afb      	ldrb	r3, [r7, #11]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c0ac:	bf00      	nop
  }

  if (err != 0U)
 800c0ae:	7afb      	ldrb	r3, [r7, #11]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d11e      	bne.n	800c0f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	88db      	ldrh	r3, [r3, #6]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d016      	beq.n	800c0ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c0bc:	893b      	ldrh	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00e      	beq.n	800c0e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	88da      	ldrh	r2, [r3, #6]
 800c0c6:	893b      	ldrh	r3, [r7, #8]
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	bf28      	it	cs
 800c0cc:	4613      	movcs	r3, r2
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0d2:	893b      	ldrh	r3, [r7, #8]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	68f9      	ldr	r1, [r7, #12]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f9e4 	bl	800c4a6 <USBD_CtlSendData>
 800c0de:	e009      	b.n	800c0f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f9ce 	bl	800c484 <USBD_CtlError>
 800c0e8:	e004      	b.n	800c0f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fa18 	bl	800c520 <USBD_CtlSendStatus>
 800c0f0:	e000      	b.n	800c0f4 <USBD_GetDescriptor+0x2cc>
    return;
 800c0f2:	bf00      	nop
  }
}
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop

0800c0fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	889b      	ldrh	r3, [r3, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d131      	bne.n	800c172 <USBD_SetAddress+0x76>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	88db      	ldrh	r3, [r3, #6]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d12d      	bne.n	800c172 <USBD_SetAddress+0x76>
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	885b      	ldrh	r3, [r3, #2]
 800c11a:	2b7f      	cmp	r3, #127	; 0x7f
 800c11c:	d829      	bhi.n	800c172 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	885b      	ldrh	r3, [r3, #2]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c128:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b03      	cmp	r3, #3
 800c134:	d104      	bne.n	800c140 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f9a3 	bl	800c484 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c13e:	e01d      	b.n	800c17c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7bfa      	ldrb	r2, [r7, #15]
 800c144:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fb85 	bl	800c85c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f9e4 	bl	800c520 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c158:	7bfb      	ldrb	r3, [r7, #15]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d004      	beq.n	800c168 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2202      	movs	r2, #2
 800c162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c166:	e009      	b.n	800c17c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c170:	e004      	b.n	800c17c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f985 	bl	800c484 <USBD_CtlError>
  }
}
 800c17a:	bf00      	nop
 800c17c:	bf00      	nop
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	885b      	ldrh	r3, [r3, #2]
 800c196:	b2da      	uxtb	r2, r3
 800c198:	4b4c      	ldr	r3, [pc, #304]	; (800c2cc <USBD_SetConfig+0x148>)
 800c19a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c19c:	4b4b      	ldr	r3, [pc, #300]	; (800c2cc <USBD_SetConfig+0x148>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d905      	bls.n	800c1b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f96c 	bl	800c484 <USBD_CtlError>
    return USBD_FAIL;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e088      	b.n	800c2c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d002      	beq.n	800c1c2 <USBD_SetConfig+0x3e>
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d025      	beq.n	800c20c <USBD_SetConfig+0x88>
 800c1c0:	e071      	b.n	800c2a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c1c2:	4b42      	ldr	r3, [pc, #264]	; (800c2cc <USBD_SetConfig+0x148>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d01c      	beq.n	800c204 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c1ca:	4b40      	ldr	r3, [pc, #256]	; (800c2cc <USBD_SetConfig+0x148>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1d4:	4b3d      	ldr	r3, [pc, #244]	; (800c2cc <USBD_SetConfig+0x148>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff f949 	bl	800b472 <USBD_SetClassConfig>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f949 	bl	800c484 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1f2:	e065      	b.n	800c2c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f993 	bl	800c520 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c202:	e05d      	b.n	800c2c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f98b 	bl	800c520 <USBD_CtlSendStatus>
      break;
 800c20a:	e059      	b.n	800c2c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c20c:	4b2f      	ldr	r3, [pc, #188]	; (800c2cc <USBD_SetConfig+0x148>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d112      	bne.n	800c23a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c21c:	4b2b      	ldr	r3, [pc, #172]	; (800c2cc <USBD_SetConfig+0x148>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	461a      	mov	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c226:	4b29      	ldr	r3, [pc, #164]	; (800c2cc <USBD_SetConfig+0x148>)
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff f93c 	bl	800b4aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f974 	bl	800c520 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c238:	e042      	b.n	800c2c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c23a:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <USBD_SetConfig+0x148>)
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	429a      	cmp	r2, r3
 800c246:	d02a      	beq.n	800c29e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7ff f92a 	bl	800b4aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c256:	4b1d      	ldr	r3, [pc, #116]	; (800c2cc <USBD_SetConfig+0x148>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c260:	4b1a      	ldr	r3, [pc, #104]	; (800c2cc <USBD_SetConfig+0x148>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7ff f903 	bl	800b472 <USBD_SetClassConfig>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00f      	beq.n	800c296 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f903 	bl	800c484 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b2db      	uxtb	r3, r3
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff f90f 	bl	800b4aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c294:	e014      	b.n	800c2c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f942 	bl	800c520 <USBD_CtlSendStatus>
      break;
 800c29c:	e010      	b.n	800c2c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f93e 	bl	800c520 <USBD_CtlSendStatus>
      break;
 800c2a4:	e00c      	b.n	800c2c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 f8eb 	bl	800c484 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2ae:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <USBD_SetConfig+0x148>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff f8f8 	bl	800b4aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c2be:	bf00      	nop
  }

  return ret;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20000028 	.word	0x20000028

0800c2d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	88db      	ldrh	r3, [r3, #6]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d004      	beq.n	800c2ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f8cd 	bl	800c484 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2ea:	e023      	b.n	800c334 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	dc02      	bgt.n	800c2fe <USBD_GetConfig+0x2e>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dc03      	bgt.n	800c304 <USBD_GetConfig+0x34>
 800c2fc:	e015      	b.n	800c32a <USBD_GetConfig+0x5a>
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d00b      	beq.n	800c31a <USBD_GetConfig+0x4a>
 800c302:	e012      	b.n	800c32a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3308      	adds	r3, #8
 800c30e:	2201      	movs	r2, #1
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f8c7 	bl	800c4a6 <USBD_CtlSendData>
        break;
 800c318:	e00c      	b.n	800c334 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	3304      	adds	r3, #4
 800c31e:	2201      	movs	r2, #1
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f8bf 	bl	800c4a6 <USBD_CtlSendData>
        break;
 800c328:	e004      	b.n	800c334 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f8a9 	bl	800c484 <USBD_CtlError>
        break;
 800c332:	bf00      	nop
}
 800c334:	bf00      	nop
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	3b01      	subs	r3, #1
 800c350:	2b02      	cmp	r3, #2
 800c352:	d81e      	bhi.n	800c392 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	88db      	ldrh	r3, [r3, #6]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d004      	beq.n	800c366 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 f890 	bl	800c484 <USBD_CtlError>
        break;
 800c364:	e01a      	b.n	800c39c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c372:	2b00      	cmp	r3, #0
 800c374:	d005      	beq.n	800c382 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	f043 0202 	orr.w	r2, r3, #2
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	330c      	adds	r3, #12
 800c386:	2202      	movs	r2, #2
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f88b 	bl	800c4a6 <USBD_CtlSendData>
      break;
 800c390:	e004      	b.n	800c39c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f875 	bl	800c484 <USBD_CtlError>
      break;
 800c39a:	bf00      	nop
  }
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	885b      	ldrh	r3, [r3, #2]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d106      	bne.n	800c3c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f8ae 	bl	800c520 <USBD_CtlSendStatus>
  }
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d80b      	bhi.n	800c3fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	885b      	ldrh	r3, [r3, #2]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d10c      	bne.n	800c406 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f893 	bl	800c520 <USBD_CtlSendStatus>
      }
      break;
 800c3fa:	e004      	b.n	800c406 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f840 	bl	800c484 <USBD_CtlError>
      break;
 800c404:	e000      	b.n	800c408 <USBD_ClrFeature+0x3c>
      break;
 800c406:	bf00      	nop
  }
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	781a      	ldrb	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3301      	adds	r3, #1
 800c438:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f7ff fabc 	bl	800b9b8 <SWAPBYTE>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3301      	adds	r3, #1
 800c44c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f7ff faaf 	bl	800b9b8 <SWAPBYTE>
 800c45a:	4603      	mov	r3, r0
 800c45c:	461a      	mov	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3301      	adds	r3, #1
 800c466:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3301      	adds	r3, #1
 800c46c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7ff faa2 	bl	800b9b8 <SWAPBYTE>
 800c474:	4603      	mov	r3, r0
 800c476:	461a      	mov	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	80da      	strh	r2, [r3, #6]
}
 800c47c:	bf00      	nop
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c48e:	2180      	movs	r1, #128	; 0x80
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f979 	bl	800c788 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c496:	2100      	movs	r1, #0
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 f975 	bl	800c788 <USBD_LL_StallEP>
}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	60b9      	str	r1, [r7, #8]
 800c4b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 f9e4 	bl	800c89a <USBD_LL_Transmit>

  return USBD_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 f9d3 	bl	800c89a <USBD_LL_Transmit>

  return USBD_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	60b9      	str	r1, [r7, #8]
 800c508:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	2100      	movs	r1, #0
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 f9e3 	bl	800c8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2204      	movs	r2, #4
 800c52c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c530:	2300      	movs	r3, #0
 800c532:	2200      	movs	r2, #0
 800c534:	2100      	movs	r1, #0
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f9af 	bl	800c89a <USBD_LL_Transmit>

  return USBD_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2205      	movs	r2, #5
 800c552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c556:	2300      	movs	r3, #0
 800c558:	2200      	movs	r2, #0
 800c55a:	2100      	movs	r1, #0
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f9bd 	bl	800c8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c580:	4619      	mov	r1, r3
 800c582:	4610      	mov	r0, r2
 800c584:	f7fe ffa9 	bl	800b4da <USBD_LL_SetupStage>
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	460b      	mov	r3, r1
 800c59a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c5a2:	78fa      	ldrb	r2, [r7, #3]
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	1a9b      	subs	r3, r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	f7fe ffe3 	bl	800b584 <USBD_LL_DataOutStage>
}
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c5d8:	78fa      	ldrb	r2, [r7, #3]
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	1a9b      	subs	r3, r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	440b      	add	r3, r1
 800c5e6:	3348      	adds	r3, #72	; 0x48
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	78fb      	ldrb	r3, [r7, #3]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f7ff f82c 	bl	800b64a <USBD_LL_DataInStage>
}
 800c5f2:	bf00      	nop
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c608:	4618      	mov	r0, r3
 800c60a:	f7ff f940 	bl	800b88e <USBD_LL_SOF>
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b084      	sub	sp, #16
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c61e:	2301      	movs	r3, #1
 800c620:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	2b02      	cmp	r3, #2
 800c628:	d001      	beq.n	800c62e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c62a:	f7fc f847 	bl	80086bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c634:	7bfa      	ldrb	r2, [r7, #15]
 800c636:	4611      	mov	r1, r2
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff f8ea 	bl	800b812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c644:	4618      	mov	r0, r3
 800c646:	f7ff f896 	bl	800b776 <USBD_LL_Reset>
}
 800c64a:	bf00      	nop
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff f8e5 	bl	800b832 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	6812      	ldr	r2, [r2, #0]
 800c676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c67a:	f043 0301 	orr.w	r3, r3, #1
 800c67e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a1b      	ldr	r3, [r3, #32]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c688:	4b04      	ldr	r3, [pc, #16]	; (800c69c <HAL_PCD_SuspendCallback+0x48>)
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	4a03      	ldr	r2, [pc, #12]	; (800c69c <HAL_PCD_SuspendCallback+0x48>)
 800c68e:	f043 0306 	orr.w	r3, r3, #6
 800c692:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c694:	bf00      	nop
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	e000ed00 	.word	0xe000ed00

0800c6a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff f8d5 	bl	800b85e <USBD_LL_Resume>
}
 800c6b4:	bf00      	nop
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6ce:	78fa      	ldrb	r2, [r7, #3]
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff f923 	bl	800b91e <USBD_LL_IsoOUTIncomplete>
}
 800c6d8:	bf00      	nop
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6f2:	78fa      	ldrb	r2, [r7, #3]
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff f8eb 	bl	800b8d2 <USBD_LL_IsoINIncomplete>
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff f929 	bl	800b96a <USBD_LL_DevConnected>
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c72e:	4618      	mov	r0, r3
 800c730:	f7ff f926 	bl	800b980 <USBD_LL_DevDisconnected>
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	461a      	mov	r2, r3
 800c74a:	4603      	mov	r3, r0
 800c74c:	70fb      	strb	r3, [r7, #3]
 800c74e:	460b      	mov	r3, r1
 800c750:	70bb      	strb	r3, [r7, #2]
 800c752:	4613      	mov	r3, r2
 800c754:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c764:	78bb      	ldrb	r3, [r7, #2]
 800c766:	883a      	ldrh	r2, [r7, #0]
 800c768:	78f9      	ldrb	r1, [r7, #3]
 800c76a:	f7fc ff2f 	bl	80095cc <HAL_PCD_EP_Open>
 800c76e:	4603      	mov	r3, r0
 800c770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	4618      	mov	r0, r3
 800c776:	f000 f8d3 	bl	800c920 <USBD_Get_USB_Status>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7a2:	78fa      	ldrb	r2, [r7, #3]
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fd f80d 	bl	80097c6 <HAL_PCD_EP_SetStall>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 f8b4 	bl	800c920 <USBD_Get_USB_Status>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7e0:	78fa      	ldrb	r2, [r7, #3]
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fd f852 	bl	800988e <HAL_PCD_EP_ClrStall>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 f895 	bl	800c920 <USBD_Get_USB_Status>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c816:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	da0b      	bge.n	800c838 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c820:	78fb      	ldrb	r3, [r7, #3]
 800c822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	4613      	mov	r3, r2
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	440b      	add	r3, r1
 800c832:	333e      	adds	r3, #62	; 0x3e
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	e00b      	b.n	800c850 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c83e:	68f9      	ldr	r1, [r7, #12]
 800c840:	4613      	mov	r3, r2
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	1a9b      	subs	r3, r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	440b      	add	r3, r1
 800c84a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c84e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c86c:	2300      	movs	r3, #0
 800c86e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c876:	78fa      	ldrb	r2, [r7, #3]
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fc fe81 	bl	8009582 <HAL_PCD_SetAddress>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 f84a 	bl	800c920 <USBD_Get_USB_Status>
 800c88c:	4603      	mov	r3, r0
 800c88e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c890:	7bbb      	ldrb	r3, [r7, #14]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b086      	sub	sp, #24
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
 800c8a2:	607a      	str	r2, [r7, #4]
 800c8a4:	603b      	str	r3, [r7, #0]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8b8:	7af9      	ldrb	r1, [r7, #11]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	f7fc ff38 	bl	8009732 <HAL_PCD_EP_Transmit>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f829 	bl	800c920 <USBD_Get_USB_Status>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	607a      	str	r2, [r7, #4]
 800c8e6:	603b      	str	r3, [r7, #0]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8fa:	7af9      	ldrb	r1, [r7, #11]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	f7fc fecc 	bl	800969c <HAL_PCD_EP_Receive>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 f808 	bl	800c920 <USBD_Get_USB_Status>
 800c910:	4603      	mov	r3, r0
 800c912:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c914:	7dbb      	ldrb	r3, [r7, #22]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
	...

0800c920 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c92e:	79fb      	ldrb	r3, [r7, #7]
 800c930:	2b03      	cmp	r3, #3
 800c932:	d817      	bhi.n	800c964 <USBD_Get_USB_Status+0x44>
 800c934:	a201      	add	r2, pc, #4	; (adr r2, 800c93c <USBD_Get_USB_Status+0x1c>)
 800c936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93a:	bf00      	nop
 800c93c:	0800c94d 	.word	0x0800c94d
 800c940:	0800c953 	.word	0x0800c953
 800c944:	0800c959 	.word	0x0800c959
 800c948:	0800c95f 	.word	0x0800c95f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73fb      	strb	r3, [r7, #15]
    break;
 800c950:	e00b      	b.n	800c96a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c952:	2303      	movs	r3, #3
 800c954:	73fb      	strb	r3, [r7, #15]
    break;
 800c956:	e008      	b.n	800c96a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c958:	2301      	movs	r3, #1
 800c95a:	73fb      	strb	r3, [r7, #15]
    break;
 800c95c:	e005      	b.n	800c96a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c95e:	2303      	movs	r3, #3
 800c960:	73fb      	strb	r3, [r7, #15]
    break;
 800c962:	e002      	b.n	800c96a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c964:	2303      	movs	r3, #3
 800c966:	73fb      	strb	r3, [r7, #15]
    break;
 800c968:	bf00      	nop
  }
  return usb_status;
 800c96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <__libc_init_array>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	4d0d      	ldr	r5, [pc, #52]	; (800c9b0 <__libc_init_array+0x38>)
 800c97c:	4c0d      	ldr	r4, [pc, #52]	; (800c9b4 <__libc_init_array+0x3c>)
 800c97e:	1b64      	subs	r4, r4, r5
 800c980:	10a4      	asrs	r4, r4, #2
 800c982:	2600      	movs	r6, #0
 800c984:	42a6      	cmp	r6, r4
 800c986:	d109      	bne.n	800c99c <__libc_init_array+0x24>
 800c988:	4d0b      	ldr	r5, [pc, #44]	; (800c9b8 <__libc_init_array+0x40>)
 800c98a:	4c0c      	ldr	r4, [pc, #48]	; (800c9bc <__libc_init_array+0x44>)
 800c98c:	f000 f820 	bl	800c9d0 <_init>
 800c990:	1b64      	subs	r4, r4, r5
 800c992:	10a4      	asrs	r4, r4, #2
 800c994:	2600      	movs	r6, #0
 800c996:	42a6      	cmp	r6, r4
 800c998:	d105      	bne.n	800c9a6 <__libc_init_array+0x2e>
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a0:	4798      	blx	r3
 800c9a2:	3601      	adds	r6, #1
 800c9a4:	e7ee      	b.n	800c984 <__libc_init_array+0xc>
 800c9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9aa:	4798      	blx	r3
 800c9ac:	3601      	adds	r6, #1
 800c9ae:	e7f2      	b.n	800c996 <__libc_init_array+0x1e>
 800c9b0:	0800ca00 	.word	0x0800ca00
 800c9b4:	0800ca00 	.word	0x0800ca00
 800c9b8:	0800ca00 	.word	0x0800ca00
 800c9bc:	0800ca04 	.word	0x0800ca04

0800c9c0 <memset>:
 800c9c0:	4402      	add	r2, r0
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d100      	bne.n	800c9ca <memset+0xa>
 800c9c8:	4770      	bx	lr
 800c9ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ce:	e7f9      	b.n	800c9c4 <memset+0x4>

0800c9d0 <_init>:
 800c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d2:	bf00      	nop
 800c9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d6:	bc08      	pop	{r3}
 800c9d8:	469e      	mov	lr, r3
 800c9da:	4770      	bx	lr

0800c9dc <_fini>:
 800c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9de:	bf00      	nop
 800c9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e2:	bc08      	pop	{r3}
 800c9e4:	469e      	mov	lr, r3
 800c9e6:	4770      	bx	lr
