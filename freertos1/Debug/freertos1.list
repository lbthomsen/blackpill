
freertos1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a594  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a850  0800a850  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a858  0800a858  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a858  0800a858  0001a858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a85c  0800a85c  0001a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cc0  200001e0  0800aa40  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ea0  0800aa40  00025ea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab97  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004786  00000000  00000000  0003adea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001195  00000000  00000000  00040c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba6f  00000000  00000000  00041e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a87a  00000000  00000000  0005d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a1ad  00000000  00000000  00078116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006748  00000000  00000000  001122c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00118a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a71c 	.word	0x0800a71c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a71c 	.word	0x0800a71c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200001fc 	.word	0x200001fc
 80005ac:	2000029c 	.word	0x2000029c

080005b0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t *)ptr, len);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	68b8      	ldr	r0, [r7, #8]
 80005c4:	f008 fc80 	bl	8008ec8 <CDC_Transmit_FS>
    return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
        if (GPIO_Pin == BTN_Pin) // If the button
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d104      	bne.n	80005ee <HAL_GPIO_EXTI_Callback+0x1a>
        {
                osSemaphoreRelease(btnSemHandle); // Signal task to deal with button
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 f895 	bl	8006718 <osSemaphoreRelease>
        }
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200004ac 	.word	0x200004ac

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b09a      	sub	sp, #104	; 0x68
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fb31 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f865 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f8cb 	bl	80007a4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of serialMux */
  osMutexDef(serialMux);
 800060e:	2300      	movs	r3, #0
 8000610:	663b      	str	r3, [r7, #96]	; 0x60
 8000612:	2300      	movs	r3, #0
 8000614:	667b      	str	r3, [r7, #100]	; 0x64
  serialMuxHandle = osMutexCreate(osMutex(serialMux));
 8000616:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800061a:	4618      	mov	r0, r3
 800061c:	f005 ff60 	bl	80064e0 <osMutexCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <main+0xb8>)
 8000624:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of btnSem */
  osSemaphoreDef(btnSem);
 8000626:	2300      	movs	r3, #0
 8000628:	65bb      	str	r3, [r7, #88]	; 0x58
 800062a:	2300      	movs	r3, #0
 800062c:	65fb      	str	r3, [r7, #92]	; 0x5c
  btnSemHandle = osSemaphoreCreate(osSemaphore(btnSem), 1);
 800062e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000632:	2101      	movs	r1, #1
 8000634:	4618      	mov	r0, r3
 8000636:	f005 ffef 	bl	8006618 <osSemaphoreCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <main+0xbc>)
 800063e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <main+0xc0>)
 8000642:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000654:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fee0 	bl	8006420 <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <main+0xc4>)
 8000664:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledTask */
  osThreadDef(ledTask, startLedTask, osPriorityLow, 0, 128);
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0xc8>)
 8000668:	f107 0420 	add.w	r4, r7, #32
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f005 fecd 	bl	8006420 <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <main+0xcc>)
 800068a:	6013      	str	r3, [r2, #0]

  /* definition and creation of btnTask */
  osThreadDef(btnTask, startBtnTask, osPriorityLow, 0, 128);
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0xd0>)
 800068e:	1d3c      	adds	r4, r7, #4
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  btnTaskHandle = osThreadCreate(osThread(btnTask), NULL);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 febc 	bl	8006420 <osThreadCreate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <main+0xd4>)
 80006ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f005 fea0 	bl	80063f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0xb6>
 80006b4:	200004a8 	.word	0x200004a8
 80006b8:	200004ac 	.word	0x200004ac
 80006bc:	0800a740 	.word	0x0800a740
 80006c0:	2000049c 	.word	0x2000049c
 80006c4:	0800a764 	.word	0x0800a764
 80006c8:	200004a0 	.word	0x200004a0
 80006cc:	0800a788 	.word	0x0800a788
 80006d0:	200004a4 	.word	0x200004a4

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f009 f961 	bl	80099aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemClock_Config+0xc8>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <SystemClock_Config+0xc8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <SystemClock_Config+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemClock_Config+0xcc>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <SystemClock_Config+0xcc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000744:	2319      	movs	r3, #25
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000748:	23c0      	movs	r3, #192	; 0xc0
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f001 ff21 	bl	80025a0 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 f900 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2103      	movs	r1, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f002 f983 	bl	8002a90 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000790:	f000 f8ea 	bl	8000968 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_GPIO_Init+0xc8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2a      	ldr	r2, [pc, #168]	; (800086c <MX_GPIO_Init+0xc8>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_GPIO_Init+0xc8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_GPIO_Init+0xc8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a23      	ldr	r2, [pc, #140]	; (800086c <MX_GPIO_Init+0xc8>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_GPIO_Init+0xc8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_GPIO_Init+0xc8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_GPIO_Init+0xc8>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_GPIO_Init+0xc8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <MX_GPIO_Init+0xcc>)
 8000816:	f000 fcf3 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000820:	2311      	movs	r3, #17
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <MX_GPIO_Init+0xcc>)
 8000834:	f000 fb60 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000838:	2301      	movs	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_GPIO_Init+0xd0>)
 800084e:	f000 fb53 	bl	8000ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	2006      	movs	r0, #6
 8000858:	f000 fb24 	bl	8000ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800085c:	2006      	movs	r0, #6
 800085e:	f000 fb3d 	bl	8000edc <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000

08000878 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000880:	f008 fa64 	bl	8008d4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	DBG("Tick %lu", osKernelSysTick() / 1000);
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <startMainTask+0x54>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2164      	movs	r1, #100	; 0x64
 800088a:	4618      	mov	r0, r3
 800088c:	f005 fe40 	bl	8006510 <osMutexWait>
 8000890:	f005 fdb6 	bl	8006400 <osKernelSysTick>
 8000894:	4603      	mov	r3, r0
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <startMainTask+0x58>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	099b      	lsrs	r3, r3, #6
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <startMainTask+0x5c>)
 80008a2:	f009 f825 	bl	80098f0 <iprintf>
 80008a6:	200a      	movs	r0, #10
 80008a8:	f009 f834 	bl	8009914 <putchar>
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <startMainTask+0x54>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f005 fe7b 	bl	80065ac <osMutexRelease>
    osDelay(500);
 80008b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ba:	f005 fdfd 	bl	80064b8 <osDelay>
    cnt++;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <startMainTask+0x60>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <startMainTask+0x60>)
 80008c6:	6013      	str	r3, [r2, #0]
	DBG("Tick %lu", osKernelSysTick() / 1000);
 80008c8:	e7dc      	b.n	8000884 <startMainTask+0xc>
 80008ca:	bf00      	nop
 80008cc:	200004a8 	.word	0x200004a8
 80008d0:	10624dd3 	.word	0x10624dd3
 80008d4:	0800a7a4 	.word	0x0800a7a4
 80008d8:	200004b0 	.word	0x200004b0

080008dc <startLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLedTask */
void startLedTask(void const * argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLedTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <startLedTask+0x1c>)
 80008ea:	f000 fca2 	bl	8001232 <HAL_GPIO_TogglePin>
    osDelay(500);
 80008ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f2:	f005 fde1 	bl	80064b8 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008f6:	e7f5      	b.n	80008e4 <startLedTask+0x8>
 80008f8:	40020800 	.word	0x40020800

080008fc <startBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBtnTask */
void startBtnTask(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBtnTask */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreWait(btnSemHandle, osWaitForever);
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <startBtnTask+0x3c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800090c:	4618      	mov	r0, r3
 800090e:	f005 feb5 	bl	800667c <osSemaphoreWait>
    DBG("Button pressed");
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <startBtnTask+0x40>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2164      	movs	r1, #100	; 0x64
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fdf9 	bl	8006510 <osMutexWait>
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <startBtnTask+0x44>)
 8000920:	f008 ffe6 	bl	80098f0 <iprintf>
 8000924:	200a      	movs	r0, #10
 8000926:	f008 fff5 	bl	8009914 <putchar>
 800092a:	4b04      	ldr	r3, [pc, #16]	; (800093c <startBtnTask+0x40>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f005 fe3c 	bl	80065ac <osMutexRelease>
    osSemaphoreWait(btnSemHandle, osWaitForever);
 8000934:	e7e6      	b.n	8000904 <startBtnTask+0x8>
 8000936:	bf00      	nop
 8000938:	200004ac 	.word	0x200004ac
 800093c:	200004a8 	.word	0x200004a8
 8000940:	0800a7b0 	.word	0x0800a7b0

08000944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000956:	f000 f9a9 	bl	8000cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40014400 	.word	0x40014400

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_MspInit+0x54>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <HAL_MspInit+0x54>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x54>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_MspInit+0x54>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f000 fa73 	bl	8000ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2019      	movs	r0, #25
 80009e2:	f000 fa5f 	bl	8000ea4 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009e6:	2019      	movs	r0, #25
 80009e8:	f000 fa78 	bl	8000edc <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <HAL_InitTick+0xa0>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <HAL_InitTick+0xa0>)
 80009f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fa:	6453      	str	r3, [r2, #68]	; 0x44
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_InitTick+0xa0>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a08:	f107 0210 	add.w	r2, r7, #16
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fa08 	bl	8002e28 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a18:	f002 f9f2 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8000a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <HAL_InitTick+0xa4>)
 8000a22:	fba2 2303 	umull	r2, r3, r2, r3
 8000a26:	0c9b      	lsrs	r3, r3, #18
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_InitTick+0xac>)
 8000a30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a38:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a4e:	f002 fa1d 	bl	8002e8c <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a5a:	f002 fa71 	bl	8002f40 <HAL_TIM_Base_Start_IT>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	200004b4 	.word	0x200004b4
 8000a78:	40014400 	.word	0x40014400

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 fbdb 	bl	8001268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000abe:	f002 faa1 	bl	8003004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200004b4 	.word	0x200004b4

08000acc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <OTG_FS_IRQHandler+0x10>)
 8000ad2:	f000 fd31 	bl	8001538 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000572c 	.word	0x2000572c

08000ae0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00a      	b.n	8000b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000af2:	f3af 8000 	nop.w
 8000af6:	4601      	mov	r1, r0
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	b2ca      	uxtb	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf0      	blt.n	8000af2 <_read+0x12>
	}

return len;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	return -1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b42:	605a      	str	r2, [r3, #4]
	return 0;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_isatty>:

int _isatty(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	return 1;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
	return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f008 ff9e 	bl	8009af4 <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20020000 	.word	0x20020000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	200004fc 	.word	0x200004fc
 8000bec:	20005ea0 	.word	0x20005ea0

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c1a:	490e      	ldr	r1, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c1c:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c30:	4c0b      	ldr	r4, [pc, #44]	; (8000c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3e:	f7ff ffd7 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f008 ff5d 	bl	8009b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fcd9 	bl	80005fc <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000c58:	0800a860 	.word	0x0800a860
  ldr r2, =_sbss
 8000c5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000c60:	20005ea0 	.word	0x20005ea0

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <HAL_Init+0x40>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_Init+0x40>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x40>)
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f8fc 	bl	8000e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff fe98 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fe6a 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023c00 	.word	0x40023c00

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000500 	.word	0x20000500

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000500 	.word	0x20000500

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff4c 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff61 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ffb1 	bl	8000e28 <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff80 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff54 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e159      	b.n	80011c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8148 	bne.w	80011c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80a2 	beq.w	80011c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a56      	ldr	r2, [pc, #344]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <HAL_GPIO_Init+0x2e8>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a52      	ldr	r2, [pc, #328]	; (80011e4 <HAL_GPIO_Init+0x2ec>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a49      	ldr	r2, [pc, #292]	; (80011e8 <HAL_GPIO_Init+0x2f0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x202>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a48      	ldr	r2, [pc, #288]	; (80011ec <HAL_GPIO_Init+0x2f4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x1fe>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a47      	ldr	r2, [pc, #284]	; (80011f0 <HAL_GPIO_Init+0x2f8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x1fa>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <HAL_GPIO_Init+0x2fc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x1f6>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <HAL_GPIO_Init+0x300>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x1f2>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x204>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x2ec>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <HAL_GPIO_Init+0x304>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113e:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001168:	4a24      	ldr	r2, [pc, #144]	; (80011fc <HAL_GPIO_Init+0x304>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_GPIO_Init+0x304>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_GPIO_Init+0x304>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_GPIO_Init+0x304>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f aea2 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800121c:	e003      	b.n	8001226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	041a      	lsls	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	619a      	str	r2, [r3, #24]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001232:	b480      	push	{r7}
 8001234:	b085      	sub	sp, #20
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	041a      	lsls	r2, r3, #16
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43d9      	mvns	r1, r3
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	400b      	ands	r3, r1
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f9a4 	bl	80005d4 <HAL_GPIO_EXTI_Callback>
  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129a:	b08f      	sub	sp, #60	; 0x3c
 800129c:	af0a      	add	r7, sp, #40	; 0x28
 800129e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e10f      	b.n	80014ca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f007 ff47 	bl	8009158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 f964 	bl	80035b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	687e      	ldr	r6, [r7, #4]
 80012f6:	466d      	mov	r5, sp
 80012f8:	f106 0410 	add.w	r4, r6, #16
 80012fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001304:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001308:	e885 0003 	stmia.w	r5, {r0, r1}
 800130c:	1d33      	adds	r3, r6, #4
 800130e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f002 f83b 	bl	800338c <USB_CoreInit>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d0      	b.n	80014ca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f002 f952 	bl	80035d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e04a      	b.n	80013d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	333d      	adds	r3, #61	; 0x3d
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	333c      	adds	r3, #60	; 0x3c
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	b298      	uxth	r0, r3
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3342      	adds	r3, #66	; 0x42
 8001376:	4602      	mov	r2, r0
 8001378:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	333f      	adds	r3, #63	; 0x3f
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3344      	adds	r3, #68	; 0x44
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	3348      	adds	r3, #72	; 0x48
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	440b      	add	r3, r1
 80013c4:	3350      	adds	r3, #80	; 0x50
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3af      	bcc.n	800133a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e044      	b.n	800146a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	1a9b      	subs	r3, r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	3301      	adds	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3b5      	bcc.n	80013e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	687e      	ldr	r6, [r7, #4]
 800147c:	466d      	mov	r5, sp
 800147e:	f106 0410 	add.w	r4, r6, #16
 8001482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800148e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001492:	1d33      	adds	r3, r6, #4
 8001494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f002 f8ea 	bl	8003670 <USB_DevInit>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00d      	b.n	80014ca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 f966 	bl	8004794 <USB_DevDisconnect>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_PCD_Start+0x1c>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e020      	b.n	8001530 <HAL_PCD_Start+0x5e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d109      	bne.n	8001512 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001502:	2b01      	cmp	r3, #1
 8001504:	d005      	beq.n	8001512 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f002 f83c 	bl	8003594 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f003 f916 	bl	8004752 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b08d      	sub	sp, #52	; 0x34
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f9d4 	bl	80048fc <USB_GetMode>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 839d 	bne.w	8001c96 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 f938 	bl	80047d6 <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 8393 	beq.w	8001c94 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f92f 	bl	80047d6 <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b02      	cmp	r3, #2
 8001580:	d107      	bne.n	8001592 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f002 0202 	and.w	r2, r2, #2
 8001590:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 f91d 	bl	80047d6 <USB_ReadInterrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d161      	bne.n	800166a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0210 	bic.w	r2, r2, #16
 80015b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f003 020f 	and.w	r2, r3, #15
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	3304      	adds	r3, #4
 80015d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	0c5b      	lsrs	r3, r3, #17
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d124      	bne.n	800162c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d035      	beq.n	800165a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	6a38      	ldr	r0, [r7, #32]
 8001602:	f002 ff54 	bl	80044ae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001612:	441a      	add	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001624:	441a      	add	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	619a      	str	r2, [r3, #24]
 800162a:	e016      	b.n	800165a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	0c5b      	lsrs	r3, r3, #17
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	2b06      	cmp	r3, #6
 8001636:	d110      	bne.n	800165a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800163e:	2208      	movs	r2, #8
 8001640:	4619      	mov	r1, r3
 8001642:	6a38      	ldr	r0, [r7, #32]
 8001644:	f002 ff33 	bl	80044ae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001654:	441a      	add	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0210 	orr.w	r2, r2, #16
 8001668:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f8b1 	bl	80047d6 <USB_ReadInterrupts>
 8001674:	4603      	mov	r3, r0
 8001676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800167e:	d16e      	bne.n	800175e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f003 f8b7 	bl	80047fc <USB_ReadDevAllOutEpInterrupt>
 800168e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001690:	e062      	b.n	8001758 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d057      	beq.n	800174c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 f8dc 	bl	8004864 <USB_ReadDevOutEPInterrupt>
 80016ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00c      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c4:	461a      	mov	r2, r3
 80016c6:	2301      	movs	r3, #1
 80016c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fdb1 	bl	8002234 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00c      	beq.n	80016f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e8:	461a      	mov	r2, r3
 80016ea:	2308      	movs	r3, #8
 80016ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 feab 	bl	800244c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	015a      	lsls	r2, r3, #5
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170c:	461a      	mov	r2, r3
 800170e:	2310      	movs	r3, #16
 8001710:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001728:	461a      	mov	r2, r3
 800172a:	2320      	movs	r3, #32
 800172c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001744:	461a      	mov	r2, r3
 8001746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	3301      	adds	r3, #1
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d199      	bne.n	8001692 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f003 f837 	bl	80047d6 <USB_ReadInterrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001772:	f040 80c0 	bne.w	80018f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 f858 	bl	8004830 <USB_ReadDevAllInEpInterrupt>
 8001780:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001786:	e0b2      	b.n	80018ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80a7 	beq.w	80018e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 f87e 	bl	80048a0 <USB_ReadDevInEPInterrupt>
 80017a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d057      	beq.n	8001860 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	2201      	movs	r2, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69f9      	ldr	r1, [r7, #28]
 80017cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017d0:	4013      	ands	r3, r2
 80017d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e0:	461a      	mov	r2, r3
 80017e2:	2301      	movs	r3, #1
 80017e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d132      	bne.n	8001854 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	4613      	mov	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3348      	adds	r3, #72	; 0x48
 80017fe:	6819      	ldr	r1, [r3, #0]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4403      	add	r3, r0
 800180e:	3344      	adds	r3, #68	; 0x44
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4419      	add	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4403      	add	r3, r0
 8001822:	3348      	adds	r3, #72	; 0x48
 8001824:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	d113      	bne.n	8001854 <HAL_PCD_IRQHandler+0x31c>
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3350      	adds	r3, #80	; 0x50
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d108      	bne.n	8001854 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	f003 f886 	bl	8004960 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f007 fcfd 	bl	800925a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001876:	461a      	mov	r2, r3
 8001878:	2308      	movs	r3, #8
 800187a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001892:	461a      	mov	r2, r3
 8001894:	2310      	movs	r3, #16
 8001896:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d008      	beq.n	80018b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ae:	461a      	mov	r2, r3
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d008      	beq.n	80018d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ca:	461a      	mov	r2, r3
 80018cc:	2302      	movs	r3, #2
 80018ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fc1b 	bl	8002118 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	3301      	adds	r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f47f af49 	bne.w	8001788 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 ff6b 	bl	80047d6 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800190a:	d122      	bne.n	8001952 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001926:	2b01      	cmp	r3, #1
 8001928:	d108      	bne.n	800193c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001932:	2100      	movs	r1, #0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fe27 	bl	8002588 <HAL_PCDEx_LPM_Callback>
 800193a:	e002      	b.n	8001942 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f007 fcf9 	bl	8009334 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 ff3d 	bl	80047d6 <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001966:	d112      	bne.n	800198e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d102      	bne.n	800197e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f007 fcb5 	bl	80092e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800198c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 ff1f 	bl	80047d6 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a2:	f040 80c7 	bne.w	8001b34 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2110      	movs	r1, #16
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 ffb9 	bl	8003938 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ca:	e056      	b.n	8001a7a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d8:	461a      	mov	r2, r3
 80019da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f0:	0151      	lsls	r1, r2, #5
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	440a      	add	r2, r1
 80019f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a02:	015a      	lsls	r2, r3, #5
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a10:	0151      	lsls	r1, r2, #5
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	440a      	add	r2, r1
 8001a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a44:	0151      	lsls	r1, r2, #5
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	440a      	add	r2, r1
 8001a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a64:	0151      	lsls	r1, r2, #5
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	440a      	add	r2, r1
 8001a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	3301      	adds	r3, #1
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3a3      	bcc.n	80019cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d016      	beq.n	8001ace <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab0:	f043 030b 	orr.w	r3, r3, #11
 8001ab4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac6:	f043 030b 	orr.w	r3, r3, #11
 8001aca:	6453      	str	r3, [r2, #68]	; 0x44
 8001acc:	e015      	b.n	8001afa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ae4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af4:	f043 030b 	orr.w	r3, r3, #11
 8001af8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f002 ff1e 	bl	8004960 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fe4c 	bl	80047d6 <USB_ReadInterrupts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b48:	d124      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fee2 	bl	8004918 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 ff4a 	bl	80039f2 <USB_GetDevSpeed>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681c      	ldr	r4, [r3, #0]
 8001b6a:	f001 f93d 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8001b6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f001 fc69 	bl	8003450 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f007 fb93 	bl	80092aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fe1c 	bl	80047d6 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d10a      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f007 fb70 	bl	800928e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f002 0208 	and.w	r2, r2, #8
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fe07 	bl	80047d6 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f007 fbc8 	bl	8009374 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fdec 	bl	80047d6 <USB_ReadInterrupts>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c08:	d10f      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4619      	mov	r1, r3
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f007 fb9b 	bl	8009350 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fdd1 	bl	80047d6 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d10a      	bne.n	8001c56 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f007 fba9 	bl	8009398 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fdbb 	bl	80047d6 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d115      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f007 fb99 	bl	80093b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	e000      	b.n	8001c96 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001c94:	bf00      	nop
    }
  }
}
 8001c96:	3734      	adds	r7, #52	; 0x34
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}

08001c9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_SetAddress+0x1a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e013      	b.n	8001cde <HAL_PCD_SetAddress+0x42>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	78fa      	ldrb	r2, [r7, #3]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fd19 	bl	8004706 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	4608      	mov	r0, r1
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	70fb      	strb	r3, [r7, #3]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	803b      	strh	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0f      	bge.n	8001d2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3338      	adds	r3, #56	; 0x38
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	705a      	strb	r2, [r3, #1]
 8001d2a:	e00f      	b.n	8001d4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d58:	883a      	ldrh	r2, [r7, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	78ba      	ldrb	r2, [r7, #2]
 8001d62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d76:	78bb      	ldrb	r3, [r7, #2]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d102      	bne.n	8001d82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_EP_Open+0xaa>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e00e      	b.n	8001dae <HAL_PCD_EP_Open+0xc8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fe4c 	bl	8003a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001dac:	7afb      	ldrb	r3, [r7, #11]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da0f      	bge.n	8001dea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	e00f      	b.n	8001e0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3304      	adds	r3, #4
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_PCD_EP_Close+0x6e>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e00e      	b.n	8001e42 <HAL_PCD_EP_Close+0x8c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68f9      	ldr	r1, [r7, #12]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 fe8a 	bl	8003b4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	460b      	mov	r3, r1
 8001e58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	f003 020f 	and.w	r2, r3, #15
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f002 f965 	bl	800418c <USB_EP0StartXfer>
 8001ec2:	e008      	b.n	8001ed6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	f001 ff17 	bl	8003d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	3338      	adds	r3, #56	; 0x38
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6979      	ldr	r1, [r7, #20]
 8001f82:	f002 f903 	bl	800418c <USB_EP0StartXfer>
 8001f86:	e008      	b.n	8001f9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	6979      	ldr	r1, [r7, #20]
 8001f96:	f001 feb5 	bl	8003d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d901      	bls.n	8001fc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e050      	b.n	8002064 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da0f      	bge.n	8001fea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
 8001fe8:	e00d      	b.n	8002006 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_PCD_EP_SetStall+0x82>
 8002022:	2302      	movs	r3, #2
 8002024:	e01e      	b.n	8002064 <HAL_PCD_EP_SetStall+0xc0>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68f9      	ldr	r1, [r7, #12]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fa92 	bl	800455e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	b2d9      	uxtb	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002054:	461a      	mov	r2, r3
 8002056:	f002 fc83 	bl	8004960 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d901      	bls.n	800208a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e042      	b.n	8002110 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	da0f      	bge.n	80020b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	3338      	adds	r3, #56	; 0x38
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	3304      	adds	r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	705a      	strb	r2, [r3, #1]
 80020b0:	e00f      	b.n	80020d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 020f 	and.w	r2, r3, #15
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_EP_ClrStall+0x86>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e00e      	b.n	8002110 <HAL_PCD_EP_ClrStall+0xa4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fa9a 	bl	800463a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af02      	add	r7, sp, #8
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3338      	adds	r3, #56	; 0x38
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	d901      	bls.n	8002150 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e06c      	b.n	800222a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	429a      	cmp	r2, r3
 8002164:	d902      	bls.n	800216c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	3303      	adds	r3, #3
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002174:	e02b      	b.n	80021ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	429a      	cmp	r2, r3
 800218a:	d902      	bls.n	8002192 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3303      	adds	r3, #3
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4603      	mov	r3, r0
 80021b0:	6978      	ldr	r0, [r7, #20]
 80021b2:	f002 f93e 	bl	8004432 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	441a      	add	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	441a      	add	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d809      	bhi.n	80021f8 <PCD_WriteEmptyTxFifo+0xe0>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d203      	bcs.n	80021f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1be      	bne.n	8002176 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	429a      	cmp	r2, r3
 8002202:	d811      	bhi.n	8002228 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	2201      	movs	r2, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	43db      	mvns	r3, r3
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002224:	4013      	ands	r3, r2
 8002226:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	333c      	adds	r3, #60	; 0x3c
 800224c:	3304      	adds	r3, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	f040 80a0 	bne.w	80023ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d015      	beq.n	80022a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a72      	ldr	r2, [pc, #456]	; (8002444 <PCD_EP_OutXfrComplete_int+0x210>)
 800227a:	4293      	cmp	r3, r2
 800227c:	f240 80dd 	bls.w	800243a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80d7 	beq.w	800243a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229e:	6093      	str	r3, [r2, #8]
 80022a0:	e0cb      	b.n	800243a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b8:	461a      	mov	r2, r3
 80022ba:	2320      	movs	r3, #32
 80022bc:	6093      	str	r3, [r2, #8]
 80022be:	e0bc      	b.n	800243a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 80b7 	bne.w	800243a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a5d      	ldr	r2, [pc, #372]	; (8002444 <PCD_EP_OutXfrComplete_int+0x210>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d90f      	bls.n	80022f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	461a      	mov	r2, r3
 80022ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f0:	6093      	str	r3, [r2, #8]
 80022f2:	e0a2      	b.n	800243a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002306:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	0159      	lsls	r1, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	440b      	add	r3, r1
 8002310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800231a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4403      	add	r3, r0
 800232a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800232e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4403      	add	r3, r0
 8002352:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4419      	add	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4403      	add	r3, r0
 8002368:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800236c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d114      	bne.n	800239e <PCD_EP_OutXfrComplete_int+0x16a>
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d108      	bne.n	800239e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002396:	461a      	mov	r2, r3
 8002398:	2101      	movs	r1, #1
 800239a:	f002 fae1 	bl	8004960 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f006 ff3d 	bl	8009224 <HAL_PCD_DataOutStageCallback>
 80023aa:	e046      	b.n	800243a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a26      	ldr	r2, [pc, #152]	; (8002448 <PCD_EP_OutXfrComplete_int+0x214>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d124      	bne.n	80023fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ca:	461a      	mov	r2, r3
 80023cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d0:	6093      	str	r3, [r2, #8]
 80023d2:	e032      	b.n	800243a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	2320      	movs	r3, #32
 80023ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f006 ff14 	bl	8009224 <HAL_PCD_DataOutStageCallback>
 80023fc:	e01d      	b.n	800243a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d114      	bne.n	800242e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d108      	bne.n	800242e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002426:	461a      	mov	r2, r3
 8002428:	2100      	movs	r1, #0
 800242a:	f002 fa99 	bl	8004960 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f006 fef5 	bl	8009224 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	4f54300a 	.word	0x4f54300a
 8002448:	4f54310a 	.word	0x4f54310a

0800244c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	333c      	adds	r3, #60	; 0x3c
 8002464:	3304      	adds	r3, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d90e      	bls.n	80024a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f006 fead 	bl	8009200 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d90c      	bls.n	80024c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c0:	461a      	mov	r2, r3
 80024c2:	2101      	movs	r1, #1
 80024c4:	f002 fa4c 	bl	8004960 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	4f54300a 	.word	0x4f54300a

080024d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
 80024e4:	4613      	mov	r3, r2
 80024e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024f6:	883b      	ldrh	r3, [r7, #0]
 80024f8:	0419      	lsls	r1, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	430a      	orrs	r2, r1
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
 8002504:	e028      	b.n	8002558 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4413      	add	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e00d      	b.n	8002536 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	4413      	add	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	3301      	adds	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	3b01      	subs	r3, #1
 800253c:	429a      	cmp	r2, r3
 800253e:	d3ec      	bcc.n	800251a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002540:	883b      	ldrh	r3, [r7, #0]
 8002542:	0418      	lsls	r0, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	3b01      	subs	r3, #1
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	4302      	orrs	r2, r0
 8002550:	3340      	adds	r3, #64	; 0x40
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e267      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d075      	beq.n	80026aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d00c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ca:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d112      	bne.n	80025fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d6:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e2:	d10b      	bne.n	80025fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	4b7e      	ldr	r3, [pc, #504]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d05b      	beq.n	80026a8 <HAL_RCC_OscConfig+0x108>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d157      	bne.n	80026a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e242      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x74>
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a75      	ldr	r2, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e01d      	b.n	8002650 <HAL_RCC_OscConfig+0xb0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 800261e:	4b70      	ldr	r3, [pc, #448]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6f      	ldr	r2, [pc, #444]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6c      	ldr	r2, [pc, #432]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0xb0>
 8002638:	4b69      	ldr	r3, [pc, #420]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800263e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b66      	ldr	r3, [pc, #408]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a65      	ldr	r2, [pc, #404]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fb3c 	bl	8000cd4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fb38 	bl	8000cd4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e207      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0xc0>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fb28 	bl	8000cd4 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe fb24 	bl	8000cd4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1f3      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0xe8>
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d063      	beq.n	800277e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b6:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11c      	bne.n	8002708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d116      	bne.n	8002708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x152>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1c7      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4937      	ldr	r1, [pc, #220]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	e03a      	b.n	800277e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002710:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RCC_OscConfig+0x244>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe fadd 	bl	8000cd4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271e:	f7fe fad9 	bl	8000cd4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1a8      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4925      	ldr	r1, [pc, #148]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e015      	b.n	800277e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_OscConfig+0x244>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fabc 	bl	8000cd4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002760:	f7fe fab8 	bl	8000cd4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e187      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d036      	beq.n	80027f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x248>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fa9c 	bl	8000cd4 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe fa98 	bl	8000cd4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e167      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x200>
 80027be:	e01b      	b.n	80027f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_OscConfig+0x248>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fa85 	bl	8000cd4 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	e00e      	b.n	80027ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ce:	f7fe fa81 	bl	8000cd4 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d907      	bls.n	80027ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e150      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	42470000 	.word	0x42470000
 80027e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ea      	bne.n	80027ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8097 	beq.w	8002934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b7d      	ldr	r3, [pc, #500]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a7c      	ldr	r2, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b7a      	ldr	r3, [pc, #488]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b77      	ldr	r3, [pc, #476]	; (8002a14 <HAL_RCC_OscConfig+0x474>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b74      	ldr	r3, [pc, #464]	; (8002a14 <HAL_RCC_OscConfig+0x474>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a73      	ldr	r2, [pc, #460]	; (8002a14 <HAL_RCC_OscConfig+0x474>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7fe fa41 	bl	8000cd4 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7fe fa3d 	bl	8000cd4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e10c      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <HAL_RCC_OscConfig+0x474>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x2ea>
 800287c:	4b64      	ldr	r3, [pc, #400]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a63      	ldr	r2, [pc, #396]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	e01c      	b.n	80028c4 <HAL_RCC_OscConfig+0x324>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x30c>
 8002892:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a5e      	ldr	r2, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6713      	str	r3, [r2, #112]	; 0x70
 800289e:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a5b      	ldr	r2, [pc, #364]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0x324>
 80028ac:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a54      	ldr	r2, [pc, #336]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fa02 	bl	8000cd4 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe f9fe 	bl	8000cd4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0cb      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ee      	beq.n	80028d4 <HAL_RCC_OscConfig+0x334>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7fe f9ec 	bl	8000cd4 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe f9e8 	bl	8000cd4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0b5      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ee      	bne.n	8002900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a1 	beq.w	8002a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d05c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d141      	bne.n	80029d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <HAL_RCC_OscConfig+0x478>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe f9bc 	bl	8000cd4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe f9b8 	bl	8000cd4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e087      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	061b      	lsls	r3, r3, #24
 80029a2:	491b      	ldr	r1, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x478>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe f991 	bl	8000cd4 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe f98d 	bl	8000cd4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e05c      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x416>
 80029d4:	e054      	b.n	8002a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_RCC_OscConfig+0x478>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe f97a 	bl	8000cd4 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe f976 	bl	8000cd4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e045      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x470>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x444>
 8002a02:	e03d      	b.n	8002a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e038      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x4ec>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d028      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d121      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d11a      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0cc      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d90c      	bls.n	8002acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494d      	ldr	r1, [pc, #308]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d044      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d119      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e06f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e067      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4934      	ldr	r1, [pc, #208]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b80:	f7fe f8a8 	bl	8000cd4 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b88:	f7fe f8a4 	bl	8000cd4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 020c 	and.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1eb      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d20c      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e032      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4916      	ldr	r1, [pc, #88]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490e      	ldr	r1, [pc, #56]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f821 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	490a      	ldr	r1, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	5ccb      	ldrb	r3, [r1, r3]
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fec8 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	0800a804 	.word	0x0800a804
 8002c54:	20000000 	.word	0x20000000
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c60:	b090      	sub	sp, #64	; 0x40
 8002c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
 8002c68:	2300      	movs	r3, #0
 8002c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d00d      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x40>
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	f200 80a1 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8e:	e09b      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c94:	e09b      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c96:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c9a:	e098      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c9c:	4b4f      	ldr	r3, [pc, #316]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca6:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	2200      	movs	r2, #0
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	627a      	str	r2, [r7, #36]	; 0x24
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc8:	fb03 f201 	mul.w	r2, r3, r1
 8002ccc:	2300      	movs	r3, #0
 8002cce:	fb00 f303 	mul.w	r3, r0, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a43      	ldr	r2, [pc, #268]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd6:	fba0 1202 	umull	r1, r2, r0, r2
 8002cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cdc:	460a      	mov	r2, r1
 8002cde:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce8:	2200      	movs	r2, #0
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	61fa      	str	r2, [r7, #28]
 8002cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cf6:	f7fd fac3 	bl	8000280 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4613      	mov	r3, r2
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d02:	e053      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d04:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	617a      	str	r2, [r7, #20]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d16:	f04f 0b00 	mov.w	fp, #0
 8002d1a:	4652      	mov	r2, sl
 8002d1c:	465b      	mov	r3, fp
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2c:	0150      	lsls	r0, r2, #5
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	ebb2 080a 	subs.w	r8, r2, sl
 8002d36:	eb63 090b 	sbc.w	r9, r3, fp
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d4e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d52:	eb63 0509 	sbc.w	r5, r3, r9
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	00eb      	lsls	r3, r5, #3
 8002d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d64:	00e2      	lsls	r2, r4, #3
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
 8002d6a:	eb14 030a 	adds.w	r3, r4, sl
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	eb45 030b 	adc.w	r3, r5, fp
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d82:	4629      	mov	r1, r5
 8002d84:	028b      	lsls	r3, r1, #10
 8002d86:	4621      	mov	r1, r4
 8002d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	028a      	lsls	r2, r1, #10
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	2200      	movs	r2, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	60fa      	str	r2, [r7, #12]
 8002d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da0:	f7fd fa6e 	bl	8000280 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3740      	adds	r7, #64	; 0x40
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	017d7840 	.word	0x017d7840

08002de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000000 	.word	0x20000000

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	0800a814 	.word	0x0800a814

08002e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	220f      	movs	r2, #15
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <HAL_RCC_GetClockConfig+0x60>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0207 	and.w	r2, r3, #7
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	601a      	str	r2, [r3, #0]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40023c00 	.word	0x40023c00

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e041      	b.n	8002f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f839 	bl	8002f2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 f9ca 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d001      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e044      	b.n	8002fe2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d013      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_TIM_Base_Start_IT+0xbc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d010      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	e007      	b.n	8002fe0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40014000 	.word	0x40014000

08003004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0202 	mvn.w	r2, #2
 8003030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8ee 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f8e0 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f8f1 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d122      	bne.n	80030b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0204 	mvn.w	r2, #4
 8003084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8c4 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8b6 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8c7 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d122      	bne.n	8003108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d11b      	bne.n	8003108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0208 	mvn.w	r2, #8
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2204      	movs	r2, #4
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f89a 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f88c 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f89d 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d122      	bne.n	800315c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b10      	cmp	r3, #16
 8003122:	d11b      	bne.n	800315c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0210 	mvn.w	r2, #16
 800312c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2208      	movs	r2, #8
 8003132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f870 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8003148:	e005      	b.n	8003156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f862 	bl	8003214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f873 	bl	800323c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0201 	mvn.w	r2, #1
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fbde 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d107      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8e2 	bl	8003378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d10e      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f838 	bl	8003250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d10e      	bne.n	800320c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d107      	bne.n	800320c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0220 	mvn.w	r2, #32
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8ac 	bl	8003364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a34      	ldr	r2, [pc, #208]	; (8003348 <TIM_Base_SetConfig+0xe4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00f      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003282:	d00b      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a31      	ldr	r2, [pc, #196]	; (800334c <TIM_Base_SetConfig+0xe8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a30      	ldr	r2, [pc, #192]	; (8003350 <TIM_Base_SetConfig+0xec>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_Base_SetConfig+0x38>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a2f      	ldr	r2, [pc, #188]	; (8003354 <TIM_Base_SetConfig+0xf0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d108      	bne.n	80032ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a25      	ldr	r2, [pc, #148]	; (8003348 <TIM_Base_SetConfig+0xe4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01b      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d017      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a22      	ldr	r2, [pc, #136]	; (800334c <TIM_Base_SetConfig+0xe8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a21      	ldr	r2, [pc, #132]	; (8003350 <TIM_Base_SetConfig+0xec>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00f      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a20      	ldr	r2, [pc, #128]	; (8003354 <TIM_Base_SetConfig+0xf0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <TIM_Base_SetConfig+0xf4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1e      	ldr	r2, [pc, #120]	; (800335c <TIM_Base_SetConfig+0xf8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <TIM_Base_SetConfig+0xfc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <TIM_Base_SetConfig+0xe4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800

08003364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800338c:	b084      	sub	sp, #16
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	f107 001c 	add.w	r0, r7, #28
 800339a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d122      	bne.n	80033ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f001 fb1c 	bl	8004a1c <USB_CoreReset>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e01a      	b.n	8003420 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 fb10 	bl	8004a1c <USB_CoreReset>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
 8003412:	e005      	b.n	8003420 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	2b01      	cmp	r3, #1
 8003424:	d10b      	bne.n	800343e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f043 0206 	orr.w	r2, r3, #6
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800344a:	b004      	add	sp, #16
 800344c:	4770      	bx	lr
	...

08003450 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d165      	bne.n	8003530 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4a41      	ldr	r2, [pc, #260]	; (800356c <USB_SetTurnaroundTime+0x11c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d906      	bls.n	800347a <USB_SetTurnaroundTime+0x2a>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a40      	ldr	r2, [pc, #256]	; (8003570 <USB_SetTurnaroundTime+0x120>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d202      	bcs.n	800347a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003474:	230f      	movs	r3, #15
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e062      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <USB_SetTurnaroundTime+0x120>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d306      	bcc.n	8003490 <USB_SetTurnaroundTime+0x40>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <USB_SetTurnaroundTime+0x124>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d202      	bcs.n	8003490 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800348a:	230e      	movs	r3, #14
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e057      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <USB_SetTurnaroundTime+0x124>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d306      	bcc.n	80034a6 <USB_SetTurnaroundTime+0x56>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4a37      	ldr	r2, [pc, #220]	; (8003578 <USB_SetTurnaroundTime+0x128>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d202      	bcs.n	80034a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034a0:	230d      	movs	r3, #13
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	e04c      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4a33      	ldr	r2, [pc, #204]	; (8003578 <USB_SetTurnaroundTime+0x128>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d306      	bcc.n	80034bc <USB_SetTurnaroundTime+0x6c>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4a32      	ldr	r2, [pc, #200]	; (800357c <USB_SetTurnaroundTime+0x12c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d802      	bhi.n	80034bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034b6:	230c      	movs	r3, #12
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e041      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4a2f      	ldr	r2, [pc, #188]	; (800357c <USB_SetTurnaroundTime+0x12c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d906      	bls.n	80034d2 <USB_SetTurnaroundTime+0x82>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4a2e      	ldr	r2, [pc, #184]	; (8003580 <USB_SetTurnaroundTime+0x130>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d802      	bhi.n	80034d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034cc:	230b      	movs	r3, #11
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e036      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <USB_SetTurnaroundTime+0x130>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d906      	bls.n	80034e8 <USB_SetTurnaroundTime+0x98>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <USB_SetTurnaroundTime+0x134>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d802      	bhi.n	80034e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034e2:	230a      	movs	r3, #10
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e02b      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a26      	ldr	r2, [pc, #152]	; (8003584 <USB_SetTurnaroundTime+0x134>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d906      	bls.n	80034fe <USB_SetTurnaroundTime+0xae>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4a25      	ldr	r2, [pc, #148]	; (8003588 <USB_SetTurnaroundTime+0x138>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d202      	bcs.n	80034fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034f8:	2309      	movs	r3, #9
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e020      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4a21      	ldr	r2, [pc, #132]	; (8003588 <USB_SetTurnaroundTime+0x138>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d306      	bcc.n	8003514 <USB_SetTurnaroundTime+0xc4>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a20      	ldr	r2, [pc, #128]	; (800358c <USB_SetTurnaroundTime+0x13c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d802      	bhi.n	8003514 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800350e:	2308      	movs	r3, #8
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e015      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4a1d      	ldr	r2, [pc, #116]	; (800358c <USB_SetTurnaroundTime+0x13c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d906      	bls.n	800352a <USB_SetTurnaroundTime+0xda>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <USB_SetTurnaroundTime+0x140>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d202      	bcs.n	800352a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003524:	2307      	movs	r3, #7
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e00a      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800352a:	2306      	movs	r3, #6
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e007      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003536:	2309      	movs	r3, #9
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e001      	b.n	8003540 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800353c:	2309      	movs	r3, #9
 800353e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	029b      	lsls	r3, r3, #10
 8003554:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	00d8acbf 	.word	0x00d8acbf
 8003570:	00e4e1c0 	.word	0x00e4e1c0
 8003574:	00f42400 	.word	0x00f42400
 8003578:	01067380 	.word	0x01067380
 800357c:	011a499f 	.word	0x011a499f
 8003580:	01312cff 	.word	0x01312cff
 8003584:	014ca43f 	.word	0x014ca43f
 8003588:	016e3600 	.word	0x016e3600
 800358c:	01a6ab1f 	.word	0x01a6ab1f
 8003590:	01e84800 	.word	0x01e84800

08003594 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d115      	bne.n	8003626 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003606:	2001      	movs	r0, #1
 8003608:	f7fd fb70 	bl	8000cec <HAL_Delay>
      ms++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3301      	adds	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f001 f972 	bl	80048fc <USB_GetMode>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d01e      	beq.n	800365c <USB_SetCurrentMode+0x84>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b31      	cmp	r3, #49	; 0x31
 8003622:	d9f0      	bls.n	8003606 <USB_SetCurrentMode+0x2e>
 8003624:	e01a      	b.n	800365c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d115      	bne.n	8003658 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003638:	2001      	movs	r0, #1
 800363a:	f7fd fb57 	bl	8000cec <HAL_Delay>
      ms++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3301      	adds	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f001 f959 	bl	80048fc <USB_GetMode>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <USB_SetCurrentMode+0x84>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b31      	cmp	r3, #49	; 0x31
 8003654:	d9f0      	bls.n	8003638 <USB_SetCurrentMode+0x60>
 8003656:	e001      	b.n	800365c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e005      	b.n	8003668 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b32      	cmp	r3, #50	; 0x32
 8003660:	d101      	bne.n	8003666 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003670:	b084      	sub	sp, #16
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800367e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	e009      	b.n	80036a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	3340      	adds	r3, #64	; 0x40
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	2200      	movs	r2, #0
 800369c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	3301      	adds	r3, #1
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b0e      	cmp	r3, #14
 80036a8:	d9f2      	bls.n	8003690 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d11c      	bne.n	80036ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
 80036e8:	e00b      	b.n	8003702 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003708:	461a      	mov	r2, r3
 800370a:	2300      	movs	r3, #0
 800370c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003714:	4619      	mov	r1, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371c:	461a      	mov	r2, r3
 800371e:	680b      	ldr	r3, [r1, #0]
 8003720:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10c      	bne.n	8003742 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800372e:	2100      	movs	r1, #0
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f945 	bl	80039c0 <USB_SetDevSpeed>
 8003736:	e008      	b.n	800374a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003738:	2101      	movs	r1, #1
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f940 	bl	80039c0 <USB_SetDevSpeed>
 8003740:	e003      	b.n	800374a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003742:	2103      	movs	r1, #3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f93b 	bl	80039c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800374a:	2110      	movs	r1, #16
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8f3 	bl	8003938 <USB_FlushTxFifo>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f90f 	bl	8003980 <USB_FlushRxFifo>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003772:	461a      	mov	r2, r3
 8003774:	2300      	movs	r3, #0
 8003776:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	461a      	mov	r2, r3
 8003780:	2300      	movs	r3, #0
 8003782:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	e043      	b.n	800381e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ac:	d118      	bne.n	80037e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	461a      	mov	r2, r3
 80037c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e013      	b.n	80037f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d6:	461a      	mov	r2, r3
 80037d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e008      	b.n	80037f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	461a      	mov	r2, r3
 80037ee:	2300      	movs	r3, #0
 80037f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fe:	461a      	mov	r2, r3
 8003800:	2300      	movs	r3, #0
 8003802:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003810:	461a      	mov	r2, r3
 8003812:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003816:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	3301      	adds	r3, #1
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	429a      	cmp	r2, r3
 8003824:	d3b7      	bcc.n	8003796 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e043      	b.n	80038b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800383e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003842:	d118      	bne.n	8003876 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e013      	b.n	8003888 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e008      	b.n	8003888 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	461a      	mov	r2, r3
 8003884:	2300      	movs	r3, #0
 8003886:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	2300      	movs	r3, #0
 8003898:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	3301      	adds	r3, #1
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d3b7      	bcc.n	800382c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f043 0210 	orr.w	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <USB_DevInit+0x2c4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f043 0208 	orr.w	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800390e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003924:	7dfb      	ldrb	r3, [r7, #23]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003930:	b004      	add	sp, #16
 8003932:	4770      	bx	lr
 8003934:	803c3800 	.word	0x803c3800

08003938 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <USB_FlushTxFifo+0x44>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e006      	b.n	8003970 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d0f1      	beq.n	8003952 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	00030d40 	.word	0x00030d40

08003980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2210      	movs	r2, #16
 8003990:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	4a08      	ldr	r2, [pc, #32]	; (80039bc <USB_FlushRxFifo+0x3c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e006      	b.n	80039b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d0f1      	beq.n	8003992 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	00030d40 	.word	0x00030d40

080039c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b087      	sub	sp, #28
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0306 	and.w	r3, r3, #6
 8003a0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]
 8003a16:	e00a      	b.n	8003a2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d002      	beq.n	8003a24 <USB_GetDevSpeed+0x32>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b06      	cmp	r3, #6
 8003a22:	d102      	bne.n	8003a2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a24:	2302      	movs	r3, #2
 8003a26:	75fb      	strb	r3, [r7, #23]
 8003a28:	e001      	b.n	8003a2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a2a:	230f      	movs	r3, #15
 8003a2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d13a      	bne.n	8003ace <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d155      	bne.n	8003b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	78db      	ldrb	r3, [r3, #3]
 8003aaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003aac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	059b      	lsls	r3, r3, #22
 8003ab2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	0151      	lsls	r1, r2, #5
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	440a      	add	r2, r1
 8003abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e036      	b.n	8003b3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	68f9      	ldr	r1, [r7, #12]
 8003ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11a      	bne.n	8003b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	78db      	ldrb	r3, [r3, #3]
 8003b20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b22:	430b      	orrs	r3, r1
 8003b24:	4313      	orrs	r3, r2
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d161      	bne.n	8003c2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7e:	d11f      	bne.n	8003bc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be0:	4013      	ands	r3, r2
 8003be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c04:	4013      	ands	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	0159      	lsls	r1, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	4619      	mov	r1, r3
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <USB_DeactivateEndpoint+0x1b0>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
 8003c2a:	e060      	b.n	8003cee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c42:	d11f      	bne.n	8003c84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2101      	movs	r1, #1
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <USB_DeactivateEndpoint+0x1b4>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	ec337800 	.word	0xec337800
 8003d00:	eff37800 	.word	0xeff37800

08003d04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 815c 	bne.w	8003fde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d132      	bne.n	8003d94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	0151      	lsls	r1, r2, #5
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	440a      	add	r2, r1
 8003d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8c:	0cdb      	lsrs	r3, r3, #19
 8003d8e:	04db      	lsls	r3, r3, #19
 8003d90:	6113      	str	r3, [r2, #16]
 8003d92:	e074      	b.n	8003e7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dae:	0cdb      	lsrs	r3, r3, #19
 8003db0:	04db      	lsls	r3, r3, #19
 8003db2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6959      	ldr	r1, [r3, #20]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	440b      	add	r3, r1
 8003df0:	1e59      	subs	r1, r3, #1
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dfc:	4b9d      	ldr	r3, [pc, #628]	; (8004074 <USB_EPStartXfer+0x370>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	0148      	lsls	r0, r1, #5
 8003e04:	69f9      	ldr	r1, [r7, #28]
 8003e06:	4401      	add	r1, r0
 8003e08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	0148      	lsls	r0, r1, #5
 8003e2a:	69f9      	ldr	r1, [r7, #28]
 8003e2c:	4401      	add	r1, r0
 8003e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e32:	4313      	orrs	r3, r2
 8003e34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	78db      	ldrb	r3, [r3, #3]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d11f      	bne.n	8003e7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d14b      	bne.n	8003f1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d128      	bne.n	8003efa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d110      	bne.n	8003eda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e00f      	b.n	8003efa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	0151      	lsls	r1, r2, #5
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	440a      	add	r2, r1
 8003f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e12f      	b.n	800417c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	78db      	ldrb	r3, [r3, #3]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d015      	beq.n	8003f70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8117 	beq.w	800417c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	2101      	movs	r1, #1
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003f6e:	e105      	b.n	800417c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d110      	bne.n	8003fa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	0151      	lsls	r1, r2, #5
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	440a      	add	r2, r1
 8003f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e00f      	b.n	8003fc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	b298      	uxth	r0, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fa2b 	bl	8004432 <USB_WritePacket>
 8003fdc:	e0ce      	b.n	800417c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff8:	0cdb      	lsrs	r3, r3, #19
 8003ffa:	04db      	lsls	r3, r3, #19
 8003ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800401c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d126      	bne.n	8004078 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	0148      	lsls	r0, r1, #5
 8004044:	69f9      	ldr	r1, [r7, #28]
 8004046:	4401      	add	r1, r0
 8004048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800404c:	4313      	orrs	r3, r2
 800404e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800406e:	6113      	str	r3, [r2, #16]
 8004070:	e036      	b.n	80040e0 <USB_EPStartXfer+0x3dc>
 8004072:	bf00      	nop
 8004074:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4413      	add	r3, r2
 8004082:	1e5a      	subs	r2, r3, #1
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	8afb      	ldrh	r3, [r7, #22]
 800409e:	04d9      	lsls	r1, r3, #19
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <USB_EPStartXfer+0x484>)
 80040a2:	400b      	ands	r3, r1
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	0148      	lsls	r0, r1, #5
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	4401      	add	r1, r0
 80040ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	8af9      	ldrh	r1, [r7, #22]
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	0148      	lsls	r0, r1, #5
 80040d4:	69f9      	ldr	r1, [r7, #28]
 80040d6:	4401      	add	r1, r0
 80040d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040dc:	4313      	orrs	r3, r2
 80040de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10d      	bne.n	8004102 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	68d9      	ldr	r1, [r3, #12]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fe:	460a      	mov	r2, r1
 8004100:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	78db      	ldrb	r3, [r3, #3]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d128      	bne.n	800415c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d110      	bne.n	800413c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	440a      	add	r2, r1
 8004130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00f      	b.n	800415c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004176:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800417a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	1ff80000 	.word	0x1ff80000

0800418c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 80cd 	bne.w	8004348 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d132      	bne.n	800421c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004214:	0cdb      	lsrs	r3, r3, #19
 8004216:	04db      	lsls	r3, r3, #19
 8004218:	6113      	str	r3, [r2, #16]
 800421a:	e04e      	b.n	80042ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004236:	0cdb      	lsrs	r3, r3, #19
 8004238:	04db      	lsls	r3, r3, #19
 800423a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004256:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800425a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800425e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d903      	bls.n	8004274 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042aa:	6939      	ldr	r1, [r7, #16]
 80042ac:	0148      	lsls	r0, r1, #5
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	4401      	add	r1, r0
 80042b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042b6:	4313      	orrs	r3, r2
 80042b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d11e      	bne.n	80042fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	e092      	b.n	8004424 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	440a      	add	r2, r1
 8004314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800431c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d07e      	beq.n	8004424 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004342:	4313      	orrs	r3, r2
 8004344:	634b      	str	r3, [r1, #52]	; 0x34
 8004346:	e06d      	b.n	8004424 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	440a      	add	r2, r1
 800435e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004362:	0cdb      	lsrs	r3, r3, #19
 8004364:	04db      	lsls	r3, r3, #19
 8004366:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800438a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	6939      	ldr	r1, [r7, #16]
 80043d4:	0148      	lsls	r0, r1, #5
 80043d6:	6979      	ldr	r1, [r7, #20]
 80043d8:	4401      	add	r1, r0
 80043da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043de:	4313      	orrs	r3, r2
 80043e0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10d      	bne.n	8004404 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	68d9      	ldr	r1, [r3, #12]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	460a      	mov	r2, r1
 8004402:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004432:	b480      	push	{r7}
 8004434:	b089      	sub	sp, #36	; 0x24
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	4611      	mov	r1, r2
 800443e:	461a      	mov	r2, r3
 8004440:	460b      	mov	r3, r1
 8004442:	71fb      	strb	r3, [r7, #7]
 8004444:	4613      	mov	r3, r2
 8004446:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004450:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	d123      	bne.n	80044a0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004458:	88bb      	ldrh	r3, [r7, #4]
 800445a:	3303      	adds	r3, #3
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e018      	b.n	8004498 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	031a      	lsls	r2, r3, #12
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4413      	add	r3, r2
 800446e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004472:	461a      	mov	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6013      	str	r3, [r2, #0]
      pSrc++;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3301      	adds	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3301      	adds	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	3301      	adds	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	3301      	adds	r3, #1
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3e2      	bcc.n	8004466 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b08b      	sub	sp, #44	; 0x2c
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	e014      	b.n	8004504 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	3301      	adds	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	3301      	adds	r3, #1
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	3301      	adds	r3, #1
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	3301      	adds	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	3301      	adds	r3, #1
 8004502:	623b      	str	r3, [r7, #32]
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	429a      	cmp	r2, r3
 800450a:	d3e6      	bcc.n	80044da <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800450c:	8bfb      	ldrh	r3, [r7, #30]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01e      	beq.n	8004550 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451c:	461a      	mov	r2, r3
 800451e:	f107 0310 	add.w	r3, r7, #16
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	b2da      	uxtb	r2, r3
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	701a      	strb	r2, [r3, #0]
      i++;
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	3301      	adds	r3, #1
 800453c:	623b      	str	r3, [r7, #32]
      pDest++;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	3301      	adds	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004544:	8bfb      	ldrh	r3, [r7, #30]
 8004546:	3b01      	subs	r3, #1
 8004548:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800454a:	8bfb      	ldrh	r3, [r7, #30]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ea      	bne.n	8004526 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004552:	4618      	mov	r0, r3
 8004554:	372c      	adds	r7, #44	; 0x2c
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d12c      	bne.n	80045d4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db12      	blt.n	80045b2 <USB_EPSetStall+0x54>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00f      	beq.n	80045b2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045b0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e02b      	b.n	800462c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db12      	blt.n	800460c <USB_EPSetStall+0xae>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800460a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800462a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d128      	bne.n	80046a8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004670:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004674:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	78db      	ldrb	r3, [r3, #3]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d003      	beq.n	8004686 <USB_EPClearStall+0x4c>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	78db      	ldrb	r3, [r3, #3]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d138      	bne.n	80046f8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	0151      	lsls	r1, r2, #5
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	440a      	add	r2, r1
 800469c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e027      	b.n	80046f8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	78db      	ldrb	r3, [r3, #3]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d003      	beq.n	80046d8 <USB_EPClearStall+0x9e>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	78db      	ldrb	r3, [r3, #3]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d10f      	bne.n	80046f8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004724:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004728:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800476c:	f023 0303 	bic.w	r3, r3, #3
 8004770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004780:	f023 0302 	bic.w	r3, r3, #2
 8004784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c2:	f043 0302 	orr.w	r3, r3, #2
 80047c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	0c1b      	lsrs	r3, r3, #16
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	b29b      	uxth	r3, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4013      	ands	r3, r2
 8004890:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004892:	68bb      	ldr	r3, [r7, #8]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	01db      	lsls	r3, r3, #7
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048ee:	68bb      	ldr	r3, [r7, #8]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0301 	and.w	r3, r3, #1
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004932:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004936:	f023 0307 	bic.w	r3, r3, #7
 800493a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	460b      	mov	r3, r1
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	333c      	adds	r3, #60	; 0x3c
 8004976:	3304      	adds	r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <USB_EP0_OutStart+0xb8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d90a      	bls.n	800499a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004994:	d101      	bne.n	800499a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e037      	b.n	8004a0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	461a      	mov	r2, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	f043 0318 	orr.w	r3, r3, #24
 80049cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049e2:	7afb      	ldrb	r3, [r7, #11]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10f      	bne.n	8004a08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	4f54300a 	.word	0x4f54300a

08004a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <USB_CoreReset+0x60>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e01a      	b.n	8004a6e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	daf3      	bge.n	8004a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f043 0201 	orr.w	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <USB_CoreReset+0x60>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e006      	b.n	8004a6e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d0f1      	beq.n	8004a50 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	00030d40 	.word	0x00030d40

08004a80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a90:	f004 fe28 	bl	80096e4 <USBD_static_malloc>
 8004a94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e066      	b.n	8004b76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7c1b      	ldrb	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d119      	bne.n	8004aec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004abc:	2202      	movs	r2, #2
 8004abe:	2181      	movs	r1, #129	; 0x81
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f004 fcec 	bl	800949e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f004 fce2 	bl	800949e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004aea:	e016      	b.n	8004b1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004aec:	2340      	movs	r3, #64	; 0x40
 8004aee:	2202      	movs	r2, #2
 8004af0:	2181      	movs	r1, #129	; 0x81
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f004 fcd3 	bl	800949e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004afe:	2340      	movs	r3, #64	; 0x40
 8004b00:	2202      	movs	r2, #2
 8004b02:	2101      	movs	r1, #1
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f004 fcca 	bl	800949e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2210      	movs	r2, #16
 8004b16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	2182      	movs	r1, #130	; 0x82
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f004 fcbc 	bl	800949e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	7c1b      	ldrb	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f004 fd8d 	bl	800967c <USBD_LL_PrepareReceive>
 8004b62:	e007      	b.n	8004b74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b6a:	2340      	movs	r3, #64	; 0x40
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f004 fd84 	bl	800967c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b8a:	2181      	movs	r1, #129	; 0x81
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f004 fcac 	bl	80094ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b98:	2101      	movs	r1, #1
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f004 fca5 	bl	80094ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ba8:	2182      	movs	r1, #130	; 0x82
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f004 fc9d 	bl	80094ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00e      	beq.n	8004be8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f004 fd90 	bl	8009700 <USBD_static_free>
    pdev->pClassData = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0af      	b.n	8004d7c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d03f      	beq.n	8004ca8 <USBD_CDC_Setup+0xb4>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	f040 809f 	bne.w	8004d6c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	88db      	ldrh	r3, [r3, #6]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d02e      	beq.n	8004c94 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	b25b      	sxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da16      	bge.n	8004c6e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004c4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	88d2      	ldrh	r2, [r2, #6]
 8004c52:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	88db      	ldrh	r3, [r3, #6]
 8004c58:	2b07      	cmp	r3, #7
 8004c5a:	bf28      	it	cs
 8004c5c:	2307      	movcs	r3, #7
 8004c5e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	89fa      	ldrh	r2, [r7, #14]
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f001 fb19 	bl	800629e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004c6c:	e085      	b.n	8004d7a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	785a      	ldrb	r2, [r3, #1]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	88db      	ldrh	r3, [r3, #6]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c84:	6939      	ldr	r1, [r7, #16]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	88db      	ldrh	r3, [r3, #6]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 fb32 	bl	80062f6 <USBD_CtlPrepareRx>
      break;
 8004c92:	e072      	b.n	8004d7a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	7850      	ldrb	r0, [r2, #1]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	4798      	blx	r3
      break;
 8004ca6:	e068      	b.n	8004d7a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	2b0b      	cmp	r3, #11
 8004cae:	d852      	bhi.n	8004d56 <USBD_CDC_Setup+0x162>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <USBD_CDC_Setup+0xc4>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004ce9 	.word	0x08004ce9
 8004cbc:	08004d65 	.word	0x08004d65
 8004cc0:	08004d57 	.word	0x08004d57
 8004cc4:	08004d57 	.word	0x08004d57
 8004cc8:	08004d57 	.word	0x08004d57
 8004ccc:	08004d57 	.word	0x08004d57
 8004cd0:	08004d57 	.word	0x08004d57
 8004cd4:	08004d57 	.word	0x08004d57
 8004cd8:	08004d57 	.word	0x08004d57
 8004cdc:	08004d57 	.word	0x08004d57
 8004ce0:	08004d13 	.word	0x08004d13
 8004ce4:	08004d3d 	.word	0x08004d3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d107      	bne.n	8004d04 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004cf4:	f107 030a 	add.w	r3, r7, #10
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 face 	bl	800629e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d02:	e032      	b.n	8004d6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f001 fa58 	bl	80061bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	75fb      	strb	r3, [r7, #23]
          break;
 8004d10:	e02b      	b.n	8004d6a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d107      	bne.n	8004d2e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d1e:	f107 030d 	add.w	r3, r7, #13
 8004d22:	2201      	movs	r2, #1
 8004d24:	4619      	mov	r1, r3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 fab9 	bl	800629e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d2c:	e01d      	b.n	8004d6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 fa43 	bl	80061bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004d36:	2303      	movs	r3, #3
 8004d38:	75fb      	strb	r3, [r7, #23]
          break;
 8004d3a:	e016      	b.n	8004d6a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d00f      	beq.n	8004d68 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004d48:	6839      	ldr	r1, [r7, #0]
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 fa36 	bl	80061bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004d50:	2303      	movs	r3, #3
 8004d52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d54:	e008      	b.n	8004d68 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f001 fa2f 	bl	80061bc <USBD_CtlError>
          ret = USBD_FAIL;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	75fb      	strb	r3, [r7, #23]
          break;
 8004d62:	e002      	b.n	8004d6a <USBD_CDC_Setup+0x176>
          break;
 8004d64:	bf00      	nop
 8004d66:	e008      	b.n	8004d7a <USBD_CDC_Setup+0x186>
          break;
 8004d68:	bf00      	nop
      }
      break;
 8004d6a:	e006      	b.n	8004d7a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 fa24 	bl	80061bc <USBD_CtlError>
      ret = USBD_FAIL;
 8004d74:	2303      	movs	r3, #3
 8004d76:	75fb      	strb	r3, [r7, #23]
      break;
 8004d78:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004d96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04f      	b.n	8004e46 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3318      	adds	r3, #24
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d029      	beq.n	8004e18 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	78f9      	ldrb	r1, [r7, #3]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	1a5b      	subs	r3, r3, r1
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4403      	add	r3, r0
 8004de4:	3344      	adds	r3, #68	; 0x44
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d110      	bne.n	8004e18 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	3318      	adds	r3, #24
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e0a:	78f9      	ldrb	r1, [r7, #3]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f004 fc12 	bl	800963a <USBD_LL_Transmit>
 8004e16:	e015      	b.n	8004e44 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00b      	beq.n	8004e44 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e015      	b.n	8004e9c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f004 fc22 	bl	80096be <USBD_LL_GetRxDataSize>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e96:	4611      	mov	r1, r2
 8004e98:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e01b      	b.n	8004ef6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <USBD_CDC_EP0_RxReady+0x50>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ece:	2bff      	cmp	r3, #255	; 0xff
 8004ed0:	d010      	beq.n	8004ef4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004ee0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ee8:	b292      	uxth	r2, r2
 8004eea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	22ff      	movs	r2, #255	; 0xff
 8004ef0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2243      	movs	r2, #67	; 0x43
 8004f0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	20000094 	.word	0x20000094

08004f20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2243      	movs	r2, #67	; 0x43
 8004f2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004f2e:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000050 	.word	0x20000050

08004f40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2243      	movs	r2, #67	; 0x43
 8004f4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004f4e:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	200000d8 	.word	0x200000d8

08004f60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	220a      	movs	r2, #10
 8004f6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f6e:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	2000000c 	.word	0x2000000c

08004f80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e004      	b.n	8004f9e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fbc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e008      	b.n	8004fda <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005026:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005036:	2303      	movs	r3, #3
 8005038:	e01a      	b.n	8005070 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005040:	2b00      	cmp	r3, #0
 8005042:	d114      	bne.n	800506e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2201      	movs	r2, #1
 8005048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005062:	2181      	movs	r1, #129	; 0x81
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f004 fae8 	bl	800963a <USBD_LL_Transmit>

    ret = USBD_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005086:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005092:	2303      	movs	r3, #3
 8005094:	e016      	b.n	80050c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7c1b      	ldrb	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a8:	2101      	movs	r1, #1
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f004 fae6 	bl	800967c <USBD_LL_PrepareReceive>
 80050b0:	e007      	b.n	80050c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050b8:	2340      	movs	r3, #64	; 0x40
 80050ba:	2101      	movs	r1, #1
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f004 fadd 	bl	800967c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e01f      	b.n	8005124 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	79fa      	ldrb	r2, [r7, #7]
 8005116:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f004 f959 	bl	80093d0 <USBD_LL_Init>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005140:	2303      	movs	r3, #3
 8005142:	e016      	b.n	8005172 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00b      	beq.n	8005170 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f107 020e 	add.w	r2, r7, #14
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
 8005168:	4602      	mov	r2, r0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f004 f970 	bl	8009468 <USBD_LL_Start>
 8005188:	4603      	mov	r3, r0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80051b4:	2303      	movs	r3, #3
 80051b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	4611      	mov	r1, r2
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	4611      	mov	r1, r2
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
  }

  return USBD_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 ff90 	bl	8006148 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005236:	461a      	mov	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2b02      	cmp	r3, #2
 800524a:	d01a      	beq.n	8005282 <USBD_LL_SetupStage+0x72>
 800524c:	2b02      	cmp	r3, #2
 800524e:	d822      	bhi.n	8005296 <USBD_LL_SetupStage+0x86>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <USBD_LL_SetupStage+0x4a>
 8005254:	2b01      	cmp	r3, #1
 8005256:	d00a      	beq.n	800526e <USBD_LL_SetupStage+0x5e>
 8005258:	e01d      	b.n	8005296 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa62 	bl	800572c <USBD_StdDevReq>
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]
      break;
 800526c:	e020      	b.n	80052b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fac6 	bl	8005808 <USBD_StdItfReq>
 800527c:	4603      	mov	r3, r0
 800527e:	73fb      	strb	r3, [r7, #15]
      break;
 8005280:	e016      	b.n	80052b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb05 	bl	800589a <USBD_StdEPReq>
 8005290:	4603      	mov	r3, r0
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	e00c      	b.n	80052b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800529c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f004 f93f 	bl	8009528 <USBD_LL_StallEP>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
      break;
 80052ae:	bf00      	nop
  }

  return ret;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	460b      	mov	r3, r1
 80052c4:	607a      	str	r2, [r7, #4]
 80052c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80052c8:	7afb      	ldrb	r3, [r7, #11]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d138      	bne.n	8005340 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d14a      	bne.n	8005376 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d913      	bls.n	8005314 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	1ad2      	subs	r2, r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4293      	cmp	r3, r2
 8005304:	bf28      	it	cs
 8005306:	4613      	movcs	r3, r2
 8005308:	461a      	mov	r2, r3
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f001 f80f 	bl	8006330 <USBD_CtlContinueRx>
 8005312:	e030      	b.n	8005376 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b03      	cmp	r3, #3
 800531e:	d10b      	bne.n	8005338 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f001 f80a 	bl	8006352 <USBD_CtlSendStatus>
 800533e:	e01a      	b.n	8005376 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b03      	cmp	r3, #3
 800534a:	d114      	bne.n	8005376 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00e      	beq.n	8005376 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	7afa      	ldrb	r2, [r7, #11]
 8005362:	4611      	mov	r1, r2
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	4798      	blx	r3
 8005368:	4603      	mov	r3, r0
 800536a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	e000      	b.n	8005378 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	460b      	mov	r3, r1
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800538e:	7afb      	ldrb	r3, [r7, #11]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d16b      	bne.n	800546c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3314      	adds	r3, #20
 8005398:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d156      	bne.n	8005452 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d914      	bls.n	80053da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	1ad2      	subs	r2, r2, r3
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	461a      	mov	r2, r3
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 ff84 	bl	80062d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053cc:	2300      	movs	r3, #0
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f004 f952 	bl	800967c <USBD_LL_PrepareReceive>
 80053d8:	e03b      	b.n	8005452 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d11c      	bne.n	8005420 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d316      	bcc.n	8005420 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d20f      	bcs.n	8005420 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005400:	2200      	movs	r2, #0
 8005402:	2100      	movs	r1, #0
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 ff65 	bl	80062d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005412:	2300      	movs	r3, #0
 8005414:	2200      	movs	r2, #0
 8005416:	2100      	movs	r1, #0
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f004 f92f 	bl	800967c <USBD_LL_PrepareReceive>
 800541e:	e018      	b.n	8005452 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b03      	cmp	r3, #3
 800542a:	d10b      	bne.n	8005444 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f004 f86e 	bl	8009528 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 ff93 	bl	8006378 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d122      	bne.n	80054a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff fe98 	bl	8005192 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800546a:	e01a      	b.n	80054a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b03      	cmp	r3, #3
 8005476:	d114      	bne.n	80054a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00e      	beq.n	80054a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	7afa      	ldrb	r2, [r7, #11]
 800548e:	4611      	mov	r1, r2
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	4798      	blx	r3
 8005494:	4603      	mov	r3, r0
 8005496:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	e000      	b.n	80054a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80054dc:	2303      	movs	r3, #3
 80054de:	e02f      	b.n	8005540 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00f      	beq.n	800550a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6852      	ldr	r2, [r2, #4]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	4611      	mov	r1, r2
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	2200      	movs	r2, #0
 800550e:	2100      	movs	r1, #0
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f003 ffc4 	bl	800949e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2240      	movs	r2, #64	; 0x40
 8005522:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	2200      	movs	r2, #0
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f003 ffb6 	bl	800949e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2240      	movs	r2, #64	; 0x40
 800553c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005576:	b2da      	uxtb	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d106      	bne.n	80055b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e012      	b.n	8005600 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d10b      	bne.n	80055fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800561e:	2303      	movs	r3, #3
 8005620:	e014      	b.n	800564c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b03      	cmp	r3, #3
 800562c:	d10d      	bne.n	800564a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	78fa      	ldrb	r2, [r7, #3]
 8005644:	4611      	mov	r1, r2
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800566a:	2303      	movs	r3, #3
 800566c:	e014      	b.n	8005698 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d10d      	bne.n	8005696 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	4611      	mov	r1, r2
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6852      	ldr	r2, [r2, #4]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	4611      	mov	r1, r2
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
  }

  return USBD_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b087      	sub	sp, #28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	3301      	adds	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800570c:	8a3b      	ldrh	r3, [r7, #16]
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	b21a      	sxth	r2, r3
 8005712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005716:	4313      	orrs	r3, r2
 8005718:	b21b      	sxth	r3, r3
 800571a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800571c:	89fb      	ldrh	r3, [r7, #14]
}
 800571e:	4618      	mov	r0, r3
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005742:	2b40      	cmp	r3, #64	; 0x40
 8005744:	d005      	beq.n	8005752 <USBD_StdDevReq+0x26>
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d853      	bhi.n	80057f2 <USBD_StdDevReq+0xc6>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <USBD_StdDevReq+0x3a>
 800574e:	2b20      	cmp	r3, #32
 8005750:	d14f      	bne.n	80057f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e04a      	b.n	80057fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	2b09      	cmp	r3, #9
 800576c:	d83b      	bhi.n	80057e6 <USBD_StdDevReq+0xba>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <USBD_StdDevReq+0x48>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	080057c9 	.word	0x080057c9
 8005778:	080057dd 	.word	0x080057dd
 800577c:	080057e7 	.word	0x080057e7
 8005780:	080057d3 	.word	0x080057d3
 8005784:	080057e7 	.word	0x080057e7
 8005788:	080057a7 	.word	0x080057a7
 800578c:	0800579d 	.word	0x0800579d
 8005790:	080057e7 	.word	0x080057e7
 8005794:	080057bf 	.word	0x080057bf
 8005798:	080057b1 	.word	0x080057b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9de 	bl	8005b60 <USBD_GetDescriptor>
          break;
 80057a4:	e024      	b.n	80057f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fb43 	bl	8005e34 <USBD_SetAddress>
          break;
 80057ae:	e01f      	b.n	80057f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb82 	bl	8005ebc <USBD_SetConfig>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
          break;
 80057bc:	e018      	b.n	80057f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fc21 	bl	8006008 <USBD_GetConfig>
          break;
 80057c6:	e013      	b.n	80057f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fc52 	bl	8006074 <USBD_GetStatus>
          break;
 80057d0:	e00e      	b.n	80057f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fc81 	bl	80060dc <USBD_SetFeature>
          break;
 80057da:	e009      	b.n	80057f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fc90 	bl	8006104 <USBD_ClrFeature>
          break;
 80057e4:	e004      	b.n	80057f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fce7 	bl	80061bc <USBD_CtlError>
          break;
 80057ee:	bf00      	nop
      }
      break;
 80057f0:	e004      	b.n	80057fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fce1 	bl	80061bc <USBD_CtlError>
      break;
 80057fa:	bf00      	nop
  }

  return ret;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop

08005808 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d005      	beq.n	800582e <USBD_StdItfReq+0x26>
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d82f      	bhi.n	8005886 <USBD_StdItfReq+0x7e>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <USBD_StdItfReq+0x26>
 800582a:	2b20      	cmp	r3, #32
 800582c:	d12b      	bne.n	8005886 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005834:	b2db      	uxtb	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	2b02      	cmp	r3, #2
 800583a:	d81d      	bhi.n	8005878 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	889b      	ldrh	r3, [r3, #4]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d813      	bhi.n	800586e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	4798      	blx	r3
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	88db      	ldrh	r3, [r3, #6]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <USBD_StdItfReq+0x7a>
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10d      	bne.n	8005882 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fd73 	bl	8006352 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800586c:	e009      	b.n	8005882 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fca3 	bl	80061bc <USBD_CtlError>
          break;
 8005876:	e004      	b.n	8005882 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fc9e 	bl	80061bc <USBD_CtlError>
          break;
 8005880:	e000      	b.n	8005884 <USBD_StdItfReq+0x7c>
          break;
 8005882:	bf00      	nop
      }
      break;
 8005884:	e004      	b.n	8005890 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fc97 	bl	80061bc <USBD_CtlError>
      break;
 800588e:	bf00      	nop
  }

  return ret;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	889b      	ldrh	r3, [r3, #4]
 80058ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d007      	beq.n	80058ca <USBD_StdEPReq+0x30>
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	f200 8145 	bhi.w	8005b4a <USBD_StdEPReq+0x2b0>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <USBD_StdEPReq+0x44>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	f040 8140 	bne.w	8005b4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e13a      	b.n	8005b54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d007      	beq.n	80058f6 <USBD_StdEPReq+0x5c>
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	f300 8129 	bgt.w	8005b3e <USBD_StdEPReq+0x2a4>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d07f      	beq.n	80059f0 <USBD_StdEPReq+0x156>
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d03c      	beq.n	800596e <USBD_StdEPReq+0xd4>
 80058f4:	e123      	b.n	8005b3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d002      	beq.n	8005908 <USBD_StdEPReq+0x6e>
 8005902:	2b03      	cmp	r3, #3
 8005904:	d016      	beq.n	8005934 <USBD_StdEPReq+0x9a>
 8005906:	e02c      	b.n	8005962 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00d      	beq.n	800592a <USBD_StdEPReq+0x90>
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d00a      	beq.n	800592a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f003 fe05 	bl	8009528 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800591e:	2180      	movs	r1, #128	; 0x80
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f003 fe01 	bl	8009528 <USBD_LL_StallEP>
 8005926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005928:	e020      	b.n	800596c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fc45 	bl	80061bc <USBD_CtlError>
              break;
 8005932:	e01b      	b.n	800596c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	885b      	ldrh	r3, [r3, #2]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10e      	bne.n	800595a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <USBD_StdEPReq+0xc0>
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d008      	beq.n	800595a <USBD_StdEPReq+0xc0>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	88db      	ldrh	r3, [r3, #6]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d104      	bne.n	800595a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f003 fde7 	bl	8009528 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fcf9 	bl	8006352 <USBD_CtlSendStatus>

              break;
 8005960:	e004      	b.n	800596c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fc29 	bl	80061bc <USBD_CtlError>
              break;
 800596a:	bf00      	nop
          }
          break;
 800596c:	e0ec      	b.n	8005b48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d002      	beq.n	8005980 <USBD_StdEPReq+0xe6>
 800597a:	2b03      	cmp	r3, #3
 800597c:	d016      	beq.n	80059ac <USBD_StdEPReq+0x112>
 800597e:	e030      	b.n	80059e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <USBD_StdEPReq+0x108>
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d00a      	beq.n	80059a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f003 fdc9 	bl	8009528 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f003 fdc5 	bl	8009528 <USBD_LL_StallEP>
 800599e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059a0:	e025      	b.n	80059ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fc09 	bl	80061bc <USBD_CtlError>
              break;
 80059aa:	e020      	b.n	80059ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	885b      	ldrh	r3, [r3, #2]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11b      	bne.n	80059ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d004      	beq.n	80059c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80059be:	7bbb      	ldrb	r3, [r7, #14]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f003 fdcf 	bl	8009566 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fcc2 	bl	8006352 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80059e0:	e004      	b.n	80059ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fbe9 	bl	80061bc <USBD_CtlError>
              break;
 80059ea:	e000      	b.n	80059ee <USBD_StdEPReq+0x154>
              break;
 80059ec:	bf00      	nop
          }
          break;
 80059ee:	e0ab      	b.n	8005b48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d002      	beq.n	8005a02 <USBD_StdEPReq+0x168>
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d032      	beq.n	8005a66 <USBD_StdEPReq+0x1cc>
 8005a00:	e097      	b.n	8005b32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <USBD_StdEPReq+0x17e>
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d004      	beq.n	8005a18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fbd3 	bl	80061bc <USBD_CtlError>
                break;
 8005a16:	e091      	b.n	8005b3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	da0b      	bge.n	8005a38 <USBD_StdEPReq+0x19e>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	3310      	adds	r3, #16
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4413      	add	r3, r2
 8005a34:	3304      	adds	r3, #4
 8005a36:	e00b      	b.n	8005a50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fc1d 	bl	800629e <USBD_CtlSendData>
              break;
 8005a64:	e06a      	b.n	8005b3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da11      	bge.n	8005a92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	3324      	adds	r3, #36	; 0x24
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d117      	bne.n	8005ab8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fb96 	bl	80061bc <USBD_CtlError>
                  break;
 8005a90:	e054      	b.n	8005b3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	f003 020f 	and.w	r2, r3, #15
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fb83 	bl	80061bc <USBD_CtlError>
                  break;
 8005ab6:	e041      	b.n	8005b3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da0b      	bge.n	8005ad8 <USBD_StdEPReq+0x23e>
 8005ac0:	7bbb      	ldrb	r3, [r7, #14]
 8005ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	3310      	adds	r3, #16
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	e00b      	b.n	8005af0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	3304      	adds	r3, #4
 8005af0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <USBD_StdEPReq+0x264>
 8005af8:	7bbb      	ldrb	r3, [r7, #14]
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d103      	bne.n	8005b06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e00e      	b.n	8005b24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f003 fd4a 	bl	80095a4 <USBD_LL_IsStallEP>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e002      	b.n	8005b24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2202      	movs	r2, #2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fbb7 	bl	800629e <USBD_CtlSendData>
              break;
 8005b30:	e004      	b.n	8005b3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fb41 	bl	80061bc <USBD_CtlError>
              break;
 8005b3a:	bf00      	nop
          }
          break;
 8005b3c:	e004      	b.n	8005b48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fb3b 	bl	80061bc <USBD_CtlError>
          break;
 8005b46:	bf00      	nop
      }
      break;
 8005b48:	e004      	b.n	8005b54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb35 	bl	80061bc <USBD_CtlError>
      break;
 8005b52:	bf00      	nop
  }

  return ret;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	885b      	ldrh	r3, [r3, #2]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	f200 8128 	bhi.w	8005dd6 <USBD_GetDescriptor+0x276>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <USBD_GetDescriptor+0x2c>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005ba9 	.word	0x08005ba9
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005c01 	.word	0x08005c01
 8005b98:	08005dd7 	.word	0x08005dd7
 8005b9c:	08005dd7 	.word	0x08005dd7
 8005ba0:	08005d77 	.word	0x08005d77
 8005ba4:	08005da3 	.word	0x08005da3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	7c12      	ldrb	r2, [r2, #16]
 8005bb4:	f107 0108 	add.w	r1, r7, #8
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	60f8      	str	r0, [r7, #12]
      break;
 8005bbe:	e112      	b.n	8005de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	7c1b      	ldrb	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10d      	bne.n	8005be4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	2202      	movs	r2, #2
 8005be0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005be2:	e100      	b.n	8005de6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	f107 0208 	add.w	r2, r7, #8
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]
      break;
 8005bfe:	e0f2      	b.n	8005de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	885b      	ldrh	r3, [r3, #2]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	f200 80ac 	bhi.w	8005d64 <USBD_GetDescriptor+0x204>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <USBD_GetDescriptor+0xb4>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c2d 	.word	0x08005c2d
 8005c18:	08005c61 	.word	0x08005c61
 8005c1c:	08005c95 	.word	0x08005c95
 8005c20:	08005cc9 	.word	0x08005cc9
 8005c24:	08005cfd 	.word	0x08005cfd
 8005c28:	08005d31 	.word	0x08005d31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	7c12      	ldrb	r2, [r2, #16]
 8005c44:	f107 0108 	add.w	r1, r7, #8
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4798      	blx	r3
 8005c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c4e:	e091      	b.n	8005d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fab2 	bl	80061bc <USBD_CtlError>
            err++;
 8005c58:	7afb      	ldrb	r3, [r7, #11]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c5e:	e089      	b.n	8005d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	7c12      	ldrb	r2, [r2, #16]
 8005c78:	f107 0108 	add.w	r1, r7, #8
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4798      	blx	r3
 8005c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c82:	e077      	b.n	8005d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa98 	bl	80061bc <USBD_CtlError>
            err++;
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	72fb      	strb	r3, [r7, #11]
          break;
 8005c92:	e06f      	b.n	8005d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	7c12      	ldrb	r2, [r2, #16]
 8005cac:	f107 0108 	add.w	r1, r7, #8
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
 8005cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cb6:	e05d      	b.n	8005d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa7e 	bl	80061bc <USBD_CtlError>
            err++;
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005cc6:	e055      	b.n	8005d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	7c12      	ldrb	r2, [r2, #16]
 8005ce0:	f107 0108 	add.w	r1, r7, #8
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
 8005ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cea:	e043      	b.n	8005d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa64 	bl	80061bc <USBD_CtlError>
            err++;
 8005cf4:	7afb      	ldrb	r3, [r7, #11]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cfa:	e03b      	b.n	8005d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	7c12      	ldrb	r2, [r2, #16]
 8005d14:	f107 0108 	add.w	r1, r7, #8
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
 8005d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d1e:	e029      	b.n	8005d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa4a 	bl	80061bc <USBD_CtlError>
            err++;
 8005d28:	7afb      	ldrb	r3, [r7, #11]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d2e:	e021      	b.n	8005d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	7c12      	ldrb	r2, [r2, #16]
 8005d48:	f107 0108 	add.w	r1, r7, #8
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4798      	blx	r3
 8005d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d52:	e00f      	b.n	8005d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa30 	bl	80061bc <USBD_CtlError>
            err++;
 8005d5c:	7afb      	ldrb	r3, [r7, #11]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	72fb      	strb	r3, [r7, #11]
          break;
 8005d62:	e007      	b.n	8005d74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa28 	bl	80061bc <USBD_CtlError>
          err++;
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005d72:	bf00      	nop
      }
      break;
 8005d74:	e037      	b.n	8005de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7c1b      	ldrb	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	f107 0208 	add.w	r2, r7, #8
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4798      	blx	r3
 8005d8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d90:	e029      	b.n	8005de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fa11 	bl	80061bc <USBD_CtlError>
        err++;
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8005da0:	e021      	b.n	8005de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7c1b      	ldrb	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f107 0208 	add.w	r2, r7, #8
 8005db6:	4610      	mov	r0, r2
 8005db8:	4798      	blx	r3
 8005dba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dc4:	e00f      	b.n	8005de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9f7 	bl	80061bc <USBD_CtlError>
        err++;
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8005dd4:	e007      	b.n	8005de6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f9ef 	bl	80061bc <USBD_CtlError>
      err++;
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	3301      	adds	r3, #1
 8005de2:	72fb      	strb	r3, [r7, #11]
      break;
 8005de4:	bf00      	nop
  }

  if (err != 0U)
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11e      	bne.n	8005e2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	88db      	ldrh	r3, [r3, #6]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d016      	beq.n	8005e22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005df4:	893b      	ldrh	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00e      	beq.n	8005e18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	88da      	ldrh	r2, [r3, #6]
 8005dfe:	893b      	ldrh	r3, [r7, #8]
 8005e00:	4293      	cmp	r3, r2
 8005e02:	bf28      	it	cs
 8005e04:	4613      	movcs	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e0a:	893b      	ldrh	r3, [r7, #8]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fa44 	bl	800629e <USBD_CtlSendData>
 8005e16:	e009      	b.n	8005e2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f9ce 	bl	80061bc <USBD_CtlError>
 8005e20:	e004      	b.n	8005e2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa95 	bl	8006352 <USBD_CtlSendStatus>
 8005e28:	e000      	b.n	8005e2c <USBD_GetDescriptor+0x2cc>
    return;
 8005e2a:	bf00      	nop
  }
}
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	889b      	ldrh	r3, [r3, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d131      	bne.n	8005eaa <USBD_SetAddress+0x76>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	88db      	ldrh	r3, [r3, #6]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d12d      	bne.n	8005eaa <USBD_SetAddress+0x76>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	885b      	ldrh	r3, [r3, #2]
 8005e52:	2b7f      	cmp	r3, #127	; 0x7f
 8005e54:	d829      	bhi.n	8005eaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d104      	bne.n	8005e78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f9a3 	bl	80061bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e76:	e01d      	b.n	8005eb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7bfa      	ldrb	r2, [r7, #15]
 8005e7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f003 fbb9 	bl	80095fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa61 	bl	8006352 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9e:	e009      	b.n	8005eb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea8:	e004      	b.n	8005eb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f985 	bl	80061bc <USBD_CtlError>
  }
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	885b      	ldrh	r3, [r3, #2]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b4c      	ldr	r3, [pc, #304]	; (8006004 <USBD_SetConfig+0x148>)
 8005ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ed4:	4b4b      	ldr	r3, [pc, #300]	; (8006004 <USBD_SetConfig+0x148>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d905      	bls.n	8005ee8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f96c 	bl	80061bc <USBD_CtlError>
    return USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e088      	b.n	8005ffa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d002      	beq.n	8005efa <USBD_SetConfig+0x3e>
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d025      	beq.n	8005f44 <USBD_SetConfig+0x88>
 8005ef8:	e071      	b.n	8005fde <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005efa:	4b42      	ldr	r3, [pc, #264]	; (8006004 <USBD_SetConfig+0x148>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01c      	beq.n	8005f3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005f02:	4b40      	ldr	r3, [pc, #256]	; (8006004 <USBD_SetConfig+0x148>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f0c:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <USBD_SetConfig+0x148>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff f948 	bl	80051a8 <USBD_SetClassConfig>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f949 	bl	80061bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f2a:	e065      	b.n	8005ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fa10 	bl	8006352 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2203      	movs	r2, #3
 8005f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f3a:	e05d      	b.n	8005ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa08 	bl	8006352 <USBD_CtlSendStatus>
      break;
 8005f42:	e059      	b.n	8005ff8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f44:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <USBD_SetConfig+0x148>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d112      	bne.n	8005f72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <USBD_SetConfig+0x148>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f5e:	4b29      	ldr	r3, [pc, #164]	; (8006004 <USBD_SetConfig+0x148>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff f93b 	bl	80051e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f9f1 	bl	8006352 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f70:	e042      	b.n	8005ff8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005f72:	4b24      	ldr	r3, [pc, #144]	; (8006004 <USBD_SetConfig+0x148>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d02a      	beq.n	8005fd6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff f929 	bl	80051e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f8e:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <USBD_SetConfig+0x148>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f98:	4b1a      	ldr	r3, [pc, #104]	; (8006004 <USBD_SetConfig+0x148>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff f902 	bl	80051a8 <USBD_SetClassConfig>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00f      	beq.n	8005fce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f903 	bl	80061bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff f90e 	bl	80051e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005fcc:	e014      	b.n	8005ff8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f9bf 	bl	8006352 <USBD_CtlSendStatus>
      break;
 8005fd4:	e010      	b.n	8005ff8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9bb 	bl	8006352 <USBD_CtlSendStatus>
      break;
 8005fdc:	e00c      	b.n	8005ff8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f8eb 	bl	80061bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <USBD_SetConfig+0x148>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff f8f7 	bl	80051e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff6:	bf00      	nop
  }

  return ret;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000504 	.word	0x20000504

08006008 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	88db      	ldrh	r3, [r3, #6]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d004      	beq.n	8006024 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f8cd 	bl	80061bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006022:	e023      	b.n	800606c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	dc02      	bgt.n	8006036 <USBD_GetConfig+0x2e>
 8006030:	2b00      	cmp	r3, #0
 8006032:	dc03      	bgt.n	800603c <USBD_GetConfig+0x34>
 8006034:	e015      	b.n	8006062 <USBD_GetConfig+0x5a>
 8006036:	2b03      	cmp	r3, #3
 8006038:	d00b      	beq.n	8006052 <USBD_GetConfig+0x4a>
 800603a:	e012      	b.n	8006062 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3308      	adds	r3, #8
 8006046:	2201      	movs	r2, #1
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f927 	bl	800629e <USBD_CtlSendData>
        break;
 8006050:	e00c      	b.n	800606c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	2201      	movs	r2, #1
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f91f 	bl	800629e <USBD_CtlSendData>
        break;
 8006060:	e004      	b.n	800606c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f8a9 	bl	80061bc <USBD_CtlError>
        break;
 800606a:	bf00      	nop
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006084:	b2db      	uxtb	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	2b02      	cmp	r3, #2
 800608a:	d81e      	bhi.n	80060ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	88db      	ldrh	r3, [r3, #6]
 8006090:	2b02      	cmp	r3, #2
 8006092:	d004      	beq.n	800609e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f890 	bl	80061bc <USBD_CtlError>
        break;
 800609c:	e01a      	b.n	80060d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f043 0202 	orr.w	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	330c      	adds	r3, #12
 80060be:	2202      	movs	r2, #2
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f8eb 	bl	800629e <USBD_CtlSendData>
      break;
 80060c8:	e004      	b.n	80060d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f875 	bl	80061bc <USBD_CtlError>
      break;
 80060d2:	bf00      	nop
  }
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	885b      	ldrh	r3, [r3, #2]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d106      	bne.n	80060fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f92b 	bl	8006352 <USBD_CtlSendStatus>
  }
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006114:	b2db      	uxtb	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	2b02      	cmp	r3, #2
 800611a:	d80b      	bhi.n	8006134 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	885b      	ldrh	r3, [r3, #2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d10c      	bne.n	800613e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f910 	bl	8006352 <USBD_CtlSendStatus>
      }
      break;
 8006132:	e004      	b.n	800613e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f840 	bl	80061bc <USBD_CtlError>
      break;
 800613c:	e000      	b.n	8006140 <USBD_ClrFeature+0x3c>
      break;
 800613e:	bf00      	nop
  }
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	781a      	ldrb	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fabb 	bl	80056ee <SWAPBYTE>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff faae 	bl	80056ee <SWAPBYTE>
 8006192:	4603      	mov	r3, r0
 8006194:	461a      	mov	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7ff faa1 	bl	80056ee <SWAPBYTE>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	80da      	strh	r2, [r3, #6]
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f003 f9ad 	bl	8009528 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061ce:	2100      	movs	r1, #0
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f003 f9a9 	bl	8009528 <USBD_LL_StallEP>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b086      	sub	sp, #24
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d036      	beq.n	8006262 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061f8:	6938      	ldr	r0, [r7, #16]
 80061fa:	f000 f836 	bl	800626a <USBD_GetLen>
 80061fe:	4603      	mov	r3, r0
 8006200:	3301      	adds	r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	701a      	strb	r2, [r3, #0]
  idx++;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	3301      	adds	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	4413      	add	r3, r2
 8006224:	2203      	movs	r2, #3
 8006226:	701a      	strb	r2, [r3, #0]
  idx++;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	3301      	adds	r3, #1
 800622c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800622e:	e013      	b.n	8006258 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4413      	add	r3, r2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	3301      	adds	r3, #1
 8006240:	613b      	str	r3, [r7, #16]
    idx++;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	3301      	adds	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
    idx++;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	3301      	adds	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e7      	bne.n	8006230 <USBD_GetString+0x52>
 8006260:	e000      	b.n	8006264 <USBD_GetString+0x86>
    return;
 8006262:	bf00      	nop
  }
}
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800627a:	e005      	b.n	8006288 <USBD_GetLen+0x1e>
  {
    len++;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	3301      	adds	r3, #1
 8006280:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	3301      	adds	r3, #1
 8006286:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f5      	bne.n	800627c <USBD_GetLen+0x12>
  }

  return len;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	2100      	movs	r1, #0
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f003 f9b8 	bl	800963a <USBD_LL_Transmit>

  return USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	2100      	movs	r1, #0
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f003 f9a7 	bl	800963a <USBD_LL_Transmit>

  return USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2203      	movs	r2, #3
 8006306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	2100      	movs	r1, #0
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f003 f9ab 	bl	800967c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	2100      	movs	r1, #0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f003 f99a 	bl	800967c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2204      	movs	r2, #4
 800635e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f003 f966 	bl	800963a <USBD_LL_Transmit>

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2205      	movs	r2, #5
 8006384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006388:	2300      	movs	r3, #0
 800638a:	2200      	movs	r2, #0
 800638c:	2100      	movs	r1, #0
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f003 f974 	bl	800967c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	4603      	mov	r3, r0
 80063a6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80063ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063b0:	2b84      	cmp	r3, #132	; 0x84
 80063b2:	d005      	beq.n	80063c0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80063b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	3303      	adds	r3, #3
 80063be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80063c0:	68fb      	ldr	r3, [r7, #12]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d4:	f3ef 8305 	mrs	r3, IPSR
 80063d8:	607b      	str	r3, [r7, #4]
  return(result);
 80063da:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063f6:	f001 fa1d 	bl	8007834 <vTaskStartScheduler>
  
  return osOK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}

08006400 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006404:	f7ff ffe3 	bl	80063ce <inHandlerMode>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800640e:	f001 fb35 	bl	8007a7c <xTaskGetTickCountFromISR>
 8006412:	4603      	mov	r3, r0
 8006414:	e002      	b.n	800641c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006416:	f001 fb21 	bl	8007a5c <xTaskGetTickCount>
 800641a:	4603      	mov	r3, r0
  }
}
 800641c:	4618      	mov	r0, r3
 800641e:	bd80      	pop	{r7, pc}

08006420 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af04      	add	r7, sp, #16
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <osThreadCreate+0x54>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01c      	beq.n	8006474 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685c      	ldr	r4, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691e      	ldr	r6, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff ffa6 	bl	800639e <makeFreeRtosPriority>
 8006452:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800645c:	9202      	str	r2, [sp, #8]
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	9100      	str	r1, [sp, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	4632      	mov	r2, r6
 8006466:	4629      	mov	r1, r5
 8006468:	4620      	mov	r0, r4
 800646a:	f001 f805 	bl	8007478 <xTaskCreateStatic>
 800646e:	4603      	mov	r3, r0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e01c      	b.n	80064ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685c      	ldr	r4, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006480:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ff88 	bl	800639e <makeFreeRtosPriority>
 800648e:	4602      	mov	r2, r0
 8006490:	f107 030c 	add.w	r3, r7, #12
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	9200      	str	r2, [sp, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	4632      	mov	r2, r6
 800649c:	4629      	mov	r1, r5
 800649e:	4620      	mov	r0, r4
 80064a0:	f001 f847 	bl	8007532 <xTaskCreate>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d001      	beq.n	80064ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <osDelay+0x16>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	e000      	b.n	80064d0 <osDelay+0x18>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 f97b 	bl	80077cc <vTaskDelay>
  
  return osOK;
 80064d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4619      	mov	r1, r3
 80064f6:	2001      	movs	r0, #1
 80064f8:	f000 fb63 	bl	8006bc2 <xQueueCreateMutexStatic>
 80064fc:	4603      	mov	r3, r0
 80064fe:	e003      	b.n	8006508 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006500:	2001      	movs	r0, #1
 8006502:	f000 fb46 	bl	8006b92 <xQueueCreateMutex>
 8006506:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <osMutexWait+0x18>
    return osErrorParameter;
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	e03a      	b.n	800659e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006532:	d103      	bne.n	800653c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e009      	b.n	8006550 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <osMutexWait+0x40>
      ticks = 1;
 800654c:	2301      	movs	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006550:	f7ff ff3d 	bl	80063ce <inHandlerMode>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d017      	beq.n	800658a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800655a:	f107 0308 	add.w	r3, r7, #8
 800655e:	461a      	mov	r2, r3
 8006560:	2100      	movs	r1, #0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fde0 	bl	8007128 <xQueueReceiveFromISR>
 8006568:	4603      	mov	r3, r0
 800656a:	2b01      	cmp	r3, #1
 800656c:	d001      	beq.n	8006572 <osMutexWait+0x62>
      return osErrorOS;
 800656e:	23ff      	movs	r3, #255	; 0xff
 8006570:	e015      	b.n	800659e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d011      	beq.n	800659c <osMutexWait+0x8c>
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <osMutexWait+0x98>)
 800657a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	e008      	b.n	800659c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fcbf 	bl	8006f10 <xQueueSemaphoreTake>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d001      	beq.n	800659c <osMutexWait+0x8c>
    return osErrorOS;
 8006598:	23ff      	movs	r3, #255	; 0xff
 800659a:	e000      	b.n	800659e <osMutexWait+0x8e>
  }
  
  return osOK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80065bc:	f7ff ff07 	bl	80063ce <inHandlerMode>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80065c6:	f107 0308 	add.w	r3, r7, #8
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc11 	bl	8006df4 <xQueueGiveFromISR>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d001      	beq.n	80065dc <osMutexRelease+0x30>
      return osErrorOS;
 80065d8:	23ff      	movs	r3, #255	; 0xff
 80065da:	e017      	b.n	800660c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d013      	beq.n	800660a <osMutexRelease+0x5e>
 80065e2:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <osMutexRelease+0x68>)
 80065e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	e00a      	b.n	800660a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80065f4:	2300      	movs	r3, #0
 80065f6:	2200      	movs	r2, #0
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fafc 	bl	8006bf8 <xQueueGenericSend>
 8006600:	4603      	mov	r3, r0
 8006602:	2b01      	cmp	r3, #1
 8006604:	d001      	beq.n	800660a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006606:	23ff      	movs	r3, #255	; 0xff
 8006608:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00f      	beq.n	800664a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10a      	bne.n	8006646 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2203      	movs	r2, #3
 8006636:	9200      	str	r2, [sp, #0]
 8006638:	2200      	movs	r2, #0
 800663a:	2100      	movs	r1, #0
 800663c:	2001      	movs	r0, #1
 800663e:	f000 f9bd 	bl	80069bc <xQueueGenericCreateStatic>
 8006642:	4603      	mov	r3, r0
 8006644:	e016      	b.n	8006674 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	e014      	b.n	8006674 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d110      	bne.n	8006672 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006650:	2203      	movs	r2, #3
 8006652:	2100      	movs	r1, #0
 8006654:	2001      	movs	r0, #1
 8006656:	f000 fa29 	bl	8006aac <xQueueGenericCreate>
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <osSemaphoreCreate+0x56>
 8006662:	2300      	movs	r3, #0
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fac5 	bl	8006bf8 <xQueueGenericSend>
      return sema;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	e000      	b.n	8006674 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006672:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	e03a      	b.n	800670a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800669e:	d103      	bne.n	80066a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80066a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	e009      	b.n	80066bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <osSemaphoreWait+0x40>
      ticks = 1;
 80066b8:	2301      	movs	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80066bc:	f7ff fe87 	bl	80063ce <inHandlerMode>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80066c6:	f107 0308 	add.w	r3, r7, #8
 80066ca:	461a      	mov	r2, r3
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fd2a 	bl	8007128 <xQueueReceiveFromISR>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d001      	beq.n	80066de <osSemaphoreWait+0x62>
      return osErrorOS;
 80066da:	23ff      	movs	r3, #255	; 0xff
 80066dc:	e015      	b.n	800670a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <osSemaphoreWait+0x8c>
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <osSemaphoreWait+0x98>)
 80066e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	e008      	b.n	8006708 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fc09 	bl	8006f10 <xQueueSemaphoreTake>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b01      	cmp	r3, #1
 8006702:	d001      	beq.n	8006708 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006704:	23ff      	movs	r3, #255	; 0xff
 8006706:	e000      	b.n	800670a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006728:	f7ff fe51 	bl	80063ce <inHandlerMode>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d016      	beq.n	8006760 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006732:	f107 0308 	add.w	r3, r7, #8
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fb5b 	bl	8006df4 <xQueueGiveFromISR>
 800673e:	4603      	mov	r3, r0
 8006740:	2b01      	cmp	r3, #1
 8006742:	d001      	beq.n	8006748 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006744:	23ff      	movs	r3, #255	; 0xff
 8006746:	e017      	b.n	8006778 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d013      	beq.n	8006776 <osSemaphoreRelease+0x5e>
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <osSemaphoreRelease+0x68>)
 8006750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	e00a      	b.n	8006776 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006760:	2300      	movs	r3, #0
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa46 	bl	8006bf8 <xQueueGenericSend>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d001      	beq.n	8006776 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006772:	23ff      	movs	r3, #255	; 0xff
 8006774:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006776:	68fb      	ldr	r3, [r7, #12]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f103 0208 	add.w	r2, r3, #8
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800679c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f103 0208 	add.w	r2, r3, #8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f103 0208 	add.w	r2, r3, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	601a      	str	r2, [r3, #0]
}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800683c:	d103      	bne.n	8006846 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e00c      	b.n	8006860 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3308      	adds	r3, #8
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e002      	b.n	8006854 <vListInsert+0x2e>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	d2f6      	bcs.n	800684e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	601a      	str	r2, [r3, #0]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6892      	ldr	r2, [r2, #8]
 80068ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6852      	ldr	r2, [r2, #4]
 80068b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d103      	bne.n	80068cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	1e5a      	subs	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006916:	f001 ff0d 	bl	8008734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	441a      	add	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	3b01      	subs	r3, #1
 8006948:	68f9      	ldr	r1, [r7, #12]
 800694a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	441a      	add	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	22ff      	movs	r2, #255	; 0xff
 800695a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d114      	bne.n	8006996 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01a      	beq.n	80069aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3310      	adds	r3, #16
 8006978:	4618      	mov	r0, r3
 800697a:	f001 f9cf 	bl	8007d1c <xTaskRemoveFromEventList>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d012      	beq.n	80069aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <xQueueGenericReset+0xcc>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	e009      	b.n	80069aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3310      	adds	r3, #16
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fef2 	bl	8006784 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3324      	adds	r3, #36	; 0x24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff feed 	bl	8006784 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069aa:	f001 fef3 	bl	8008794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069ae:	2301      	movs	r3, #1
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	; 0x38
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <xQueueGenericCreateStatic+0x52>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <xQueueGenericCreateStatic+0x56>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <xQueueGenericCreateStatic+0x58>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	623b      	str	r3, [r7, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d102      	bne.n	8006a3a <xQueueGenericCreateStatic+0x7e>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <xQueueGenericCreateStatic+0x82>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <xQueueGenericCreateStatic+0x84>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	61fb      	str	r3, [r7, #28]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a5a:	2348      	movs	r3, #72	; 0x48
 8006a5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b48      	cmp	r3, #72	; 0x48
 8006a62:	d00a      	beq.n	8006a7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	61bb      	str	r3, [r7, #24]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	4613      	mov	r3, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f83f 	bl	8006b20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3730      	adds	r7, #48	; 0x30
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	; 0x28
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	613b      	str	r3, [r7, #16]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	3348      	adds	r3, #72	; 0x48
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 ff47 	bl	8008978 <pvPortMalloc>
 8006aea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d011      	beq.n	8006b16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	3348      	adds	r3, #72	; 0x48
 8006afa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b04:	79fa      	ldrb	r2, [r7, #7]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f805 	bl	8006b20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b16:	69bb      	ldr	r3, [r7, #24]
	}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b4e:	2101      	movs	r1, #1
 8006b50:	69b8      	ldr	r0, [r7, #24]
 8006b52:	f7ff fecb 	bl	80068ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00e      	beq.n	8006b8a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2200      	movs	r2, #0
 8006b82:	2100      	movs	r1, #0
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f837 	bl	8006bf8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	4603      	mov	r3, r0
 8006b9a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6939      	ldr	r1, [r7, #16]
 8006baa:	6978      	ldr	r0, [r7, #20]
 8006bac:	f7ff ff7e 	bl	8006aac <xQueueGenericCreate>
 8006bb0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff ffd3 	bl	8006b5e <prvInitialiseMutex>

		return xNewQueue;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
	}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b088      	sub	sp, #32
 8006bc6:	af02      	add	r7, sp, #8
 8006bc8:	4603      	mov	r3, r0
 8006bca:	6039      	str	r1, [r7, #0]
 8006bcc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	6939      	ldr	r1, [r7, #16]
 8006be0:	6978      	ldr	r0, [r7, #20]
 8006be2:	f7ff feeb 	bl	80069bc <xQueueGenericCreateStatic>
 8006be6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff ffb8 	bl	8006b5e <prvInitialiseMutex>

		return xNewQueue;
 8006bee:	68fb      	ldr	r3, [r7, #12]
	}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08e      	sub	sp, #56	; 0x38
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c06:	2300      	movs	r3, #0
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <xQueueGenericSend+0x32>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <xQueueGenericSend+0x40>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <xQueueGenericSend+0x44>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <xQueueGenericSend+0x46>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <xQueueGenericSend+0x60>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSend+0x6e>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericSend+0x72>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericSend+0x74>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xQueueGenericSend+0x8e>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	623b      	str	r3, [r7, #32]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c86:	f001 fa09 	bl	800809c <xTaskGetSchedulerState>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <xQueueGenericSend+0x9e>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <xQueueGenericSend+0xa2>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <xQueueGenericSend+0xa4>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	61fb      	str	r3, [r7, #28]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cb6:	f001 fd3d 	bl	8008734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d302      	bcc.n	8006ccc <xQueueGenericSend+0xd4>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d129      	bne.n	8006d20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd2:	f000 fac1 	bl	8007258 <prvCopyDataToQueue>
 8006cd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d010      	beq.n	8006d02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	3324      	adds	r3, #36	; 0x24
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 f819 	bl	8007d1c <xTaskRemoveFromEventList>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d013      	beq.n	8006d18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cf0:	4b3f      	ldr	r3, [pc, #252]	; (8006df0 <xQueueGenericSend+0x1f8>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	e00a      	b.n	8006d18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d007      	beq.n	8006d18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d08:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <xQueueGenericSend+0x1f8>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d18:	f001 fd3c 	bl	8008794 <vPortExitCritical>
				return pdPASS;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e063      	b.n	8006de8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d26:	f001 fd35 	bl	8008794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e05c      	b.n	8006de8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 f851 	bl	8007de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d42:	f001 fd27 	bl	8008794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d46:	f000 fddf 	bl	8007908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d4a:	f001 fcf3 	bl	8008734 <vPortEnterCritical>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d54:	b25b      	sxtb	r3, r3
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5a:	d103      	bne.n	8006d64 <xQueueGenericSend+0x16c>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d6a:	b25b      	sxtb	r3, r3
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d70:	d103      	bne.n	8006d7a <xQueueGenericSend+0x182>
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d7a:	f001 fd0b 	bl	8008794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d7e:	1d3a      	adds	r2, r7, #4
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	4611      	mov	r1, r2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 f840 	bl	8007e0c <xTaskCheckForTimeOut>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d124      	bne.n	8006ddc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d94:	f000 fb58 	bl	8007448 <prvIsQueueFull>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d018      	beq.n	8006dd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	3310      	adds	r3, #16
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 ff94 	bl	8007cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dae:	f000 fae3 	bl	8007378 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006db2:	f000 fdb7 	bl	8007924 <xTaskResumeAll>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f af7c 	bne.w	8006cb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <xQueueGenericSend+0x1f8>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	e772      	b.n	8006cb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dd2:	f000 fad1 	bl	8007378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd6:	f000 fda5 	bl	8007924 <xTaskResumeAll>
 8006dda:	e76c      	b.n	8006cb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dde:	f000 facb 	bl	8007378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006de2:	f000 fd9f 	bl	8007924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006de6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3738      	adds	r7, #56	; 0x38
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08e      	sub	sp, #56	; 0x38
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	623b      	str	r3, [r7, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	61fb      	str	r3, [r7, #28]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <xQueueGiveFromISR+0x58>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <xQueueGiveFromISR+0x5c>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <xQueueGiveFromISR+0x5e>
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	61bb      	str	r3, [r7, #24]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e6c:	f001 fd44 	bl	80088f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e70:	f3ef 8211 	mrs	r2, BASEPRI
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	617a      	str	r2, [r7, #20]
 8006e86:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e88:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d22b      	bcs.n	8006ef4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006eae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb6:	d112      	bne.n	8006ede <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d016      	beq.n	8006eee <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	3324      	adds	r3, #36	; 0x24
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 ff29 	bl	8007d1c <xTaskRemoveFromEventList>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e007      	b.n	8006eee <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	b25a      	sxtb	r2, r3
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef2:	e001      	b.n	8006ef8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3738      	adds	r7, #56	; 0x38
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08e      	sub	sp, #56	; 0x38
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	623b      	str	r3, [r7, #32]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	61fb      	str	r3, [r7, #28]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f60:	f001 f89c 	bl	800809c <xTaskGetSchedulerState>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <xQueueSemaphoreTake+0x60>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <xQueueSemaphoreTake+0x64>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <xQueueSemaphoreTake+0x66>
 8006f74:	2300      	movs	r3, #0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	61bb      	str	r3, [r7, #24]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f90:	f001 fbd0 	bl	8008734 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d024      	beq.n	8006fea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	1e5a      	subs	r2, r3, #1
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fb0:	f001 fa1c 	bl	80083ec <pvTaskIncrementMutexHeldCount>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00f      	beq.n	8006fe2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fea8 	bl	8007d1c <xTaskRemoveFromEventList>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fd2:	4b54      	ldr	r3, [pc, #336]	; (8007124 <xQueueSemaphoreTake+0x214>)
 8006fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fe2:	f001 fbd7 	bl	8008794 <vPortExitCritical>
				return pdPASS;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e097      	b.n	800711a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d111      	bne.n	8007014 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	617b      	str	r3, [r7, #20]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800700c:	f001 fbc2 	bl	8008794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007010:	2300      	movs	r3, #0
 8007012:	e082      	b.n	800711a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800701a:	f107 030c 	add.w	r3, r7, #12
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fede 	bl	8007de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007024:	2301      	movs	r3, #1
 8007026:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007028:	f001 fbb4 	bl	8008794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800702c:	f000 fc6c 	bl	8007908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007030:	f001 fb80 	bl	8008734 <vPortEnterCritical>
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800703a:	b25b      	sxtb	r3, r3
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007040:	d103      	bne.n	800704a <xQueueSemaphoreTake+0x13a>
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007050:	b25b      	sxtb	r3, r3
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007056:	d103      	bne.n	8007060 <xQueueSemaphoreTake+0x150>
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007060:	f001 fb98 	bl	8008794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007064:	463a      	mov	r2, r7
 8007066:	f107 030c 	add.w	r3, r7, #12
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fecd 	bl	8007e0c <xTaskCheckForTimeOut>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d132      	bne.n	80070de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800707a:	f000 f9cf 	bl	800741c <prvIsQueueEmpty>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d026      	beq.n	80070d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800708c:	f001 fb52 	bl	8008734 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f81f 	bl	80080d8 <xTaskPriorityInherit>
 800709a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800709c:	f001 fb7a 	bl	8008794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	3324      	adds	r3, #36	; 0x24
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fe13 	bl	8007cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b0:	f000 f962 	bl	8007378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070b4:	f000 fc36 	bl	8007924 <xTaskResumeAll>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f47f af68 	bne.w	8006f90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80070c0:	4b18      	ldr	r3, [pc, #96]	; (8007124 <xQueueSemaphoreTake+0x214>)
 80070c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	e75e      	b.n	8006f90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070d4:	f000 f950 	bl	8007378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070d8:	f000 fc24 	bl	8007924 <xTaskResumeAll>
 80070dc:	e758      	b.n	8006f90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070e0:	f000 f94a 	bl	8007378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070e4:	f000 fc1e 	bl	8007924 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ea:	f000 f997 	bl	800741c <prvIsQueueEmpty>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f43f af4d 	beq.w	8006f90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070fc:	f001 fb1a 	bl	8008734 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007102:	f000 f891 	bl	8007228 <prvGetDisinheritPriorityAfterTimeout>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f8de 	bl	80082d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007114:	f001 fb3e 	bl	8008794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800711a:	4618      	mov	r0, r3
 800711c:	3738      	adds	r7, #56	; 0x38
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08e      	sub	sp, #56	; 0x38
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	623b      	str	r3, [r7, #32]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d103      	bne.n	8007162 <xQueueReceiveFromISR+0x3a>
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <xQueueReceiveFromISR+0x3e>
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <xQueueReceiveFromISR+0x40>
 8007166:	2300      	movs	r3, #0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	61fb      	str	r3, [r7, #28]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007182:	f001 fbb9 	bl	80088f8 <vPortValidateInterruptPriority>
	__asm volatile
 8007186:	f3ef 8211 	mrs	r2, BASEPRI
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	61ba      	str	r2, [r7, #24]
 800719c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800719e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02f      	beq.n	800720e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071bc:	f000 f8b6 	bl	800732c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	1e5a      	subs	r2, r3, #1
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071d0:	d112      	bne.n	80071f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	3310      	adds	r3, #16
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fd9c 	bl	8007d1c <xTaskRemoveFromEventList>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00e      	beq.n	8007208 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e007      	b.n	8007208 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071fc:	3301      	adds	r3, #1
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	b25a      	sxtb	r2, r3
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007208:	2301      	movs	r3, #1
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
 800720c:	e001      	b.n	8007212 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800720e:	2300      	movs	r3, #0
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f383 8811 	msr	BASEPRI, r3
}
 800721c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800721e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007220:	4618      	mov	r0, r3
 8007222:	3738      	adds	r7, #56	; 0x38
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d006      	beq.n	8007246 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1c3 0307 	rsb	r3, r3, #7
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e001      	b.n	800724a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800724a:	68fb      	ldr	r3, [r7, #12]
	}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10d      	bne.n	8007292 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d14d      	bne.n	800731a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 ff9e 	bl	80081c4 <xTaskPriorityDisinherit>
 8007288:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	609a      	str	r2, [r3, #8]
 8007290:	e043      	b.n	800731a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d119      	bne.n	80072cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6858      	ldr	r0, [r3, #4]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	461a      	mov	r2, r3
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	f002 fc53 	bl	8009b4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	441a      	add	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d32b      	bcc.n	800731a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	e026      	b.n	800731a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	68d8      	ldr	r0, [r3, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	461a      	mov	r2, r3
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	f002 fc39 	bl	8009b4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	425b      	negs	r3, r3
 80072e6:	441a      	add	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d207      	bcs.n	8007308 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	425b      	negs	r3, r3
 8007302:	441a      	add	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d105      	bne.n	800731a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3b01      	subs	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007322:	697b      	ldr	r3, [r7, #20]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d018      	beq.n	8007370 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	441a      	add	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	429a      	cmp	r2, r3
 8007356:	d303      	bcc.n	8007360 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68d9      	ldr	r1, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	461a      	mov	r2, r3
 800736a:	6838      	ldr	r0, [r7, #0]
 800736c:	f002 fbef 	bl	8009b4e <memcpy>
	}
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007380:	f001 f9d8 	bl	8008734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800738a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800738c:	e011      	b.n	80073b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d012      	beq.n	80073bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3324      	adds	r3, #36	; 0x24
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fcbe 	bl	8007d1c <xTaskRemoveFromEventList>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073a6:	f000 fd93 	bl	8007ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dce9      	bgt.n	800738e <prvUnlockQueue+0x16>
 80073ba:	e000      	b.n	80073be <prvUnlockQueue+0x46>
					break;
 80073bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073c6:	f001 f9e5 	bl	8008794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073ca:	f001 f9b3 	bl	8008734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073d6:	e011      	b.n	80073fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d012      	beq.n	8007406 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3310      	adds	r3, #16
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fc99 	bl	8007d1c <xTaskRemoveFromEventList>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073f0:	f000 fd6e 	bl	8007ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007400:	2b00      	cmp	r3, #0
 8007402:	dce9      	bgt.n	80073d8 <prvUnlockQueue+0x60>
 8007404:	e000      	b.n	8007408 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007406:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	22ff      	movs	r2, #255	; 0xff
 800740c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007410:	f001 f9c0 	bl	8008794 <vPortExitCritical>
}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007424:	f001 f986 	bl	8008734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e001      	b.n	800743a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800743a:	f001 f9ab 	bl	8008794 <vPortExitCritical>

	return xReturn;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007450:	f001 f970 	bl	8008734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745c:	429a      	cmp	r2, r3
 800745e:	d102      	bne.n	8007466 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e001      	b.n	800746a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800746a:	f001 f993 	bl	8008794 <vPortExitCritical>

	return xReturn;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08e      	sub	sp, #56	; 0x38
 800747c:	af04      	add	r7, sp, #16
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	623b      	str	r3, [r7, #32]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <xTaskCreateStatic+0x46>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	61fb      	str	r3, [r7, #28]
}
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074be:	23a0      	movs	r3, #160	; 0xa0
 80074c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2ba0      	cmp	r3, #160	; 0xa0
 80074c6:	d00a      	beq.n	80074de <xTaskCreateStatic+0x66>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	61bb      	str	r3, [r7, #24]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01e      	beq.n	8007524 <xTaskCreateStatic+0xac>
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01b      	beq.n	8007524 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074fe:	2300      	movs	r3, #0
 8007500:	9303      	str	r3, [sp, #12]
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	f107 0314 	add.w	r3, r7, #20
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f850 	bl	80075bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800751c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800751e:	f000 f8eb 	bl	80076f8 <prvAddNewTaskToReadyList>
 8007522:	e001      	b.n	8007528 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007528:	697b      	ldr	r3, [r7, #20]
	}
 800752a:	4618      	mov	r0, r3
 800752c:	3728      	adds	r7, #40	; 0x28
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007532:	b580      	push	{r7, lr}
 8007534:	b08c      	sub	sp, #48	; 0x30
 8007536:	af04      	add	r7, sp, #16
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fa16 	bl	8008978 <pvPortMalloc>
 800754c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00e      	beq.n	8007572 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007554:	20a0      	movs	r0, #160	; 0xa0
 8007556:	f001 fa0f 	bl	8008978 <pvPortMalloc>
 800755a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
 8007568:	e005      	b.n	8007576 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800756a:	6978      	ldr	r0, [r7, #20]
 800756c:	f001 fad0 	bl	8008b10 <vPortFree>
 8007570:	e001      	b.n	8007576 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d017      	beq.n	80075ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007584:	88fa      	ldrh	r2, [r7, #6]
 8007586:	2300      	movs	r3, #0
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f80e 	bl	80075bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075a0:	69f8      	ldr	r0, [r7, #28]
 80075a2:	f000 f8a9 	bl	80076f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075a6:	2301      	movs	r3, #1
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	e002      	b.n	80075b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075b2:	69bb      	ldr	r3, [r7, #24]
	}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075d4:	3b01      	subs	r3, #1
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <prvInitialiseNewTask+0x48>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	617b      	str	r3, [r7, #20]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01f      	beq.n	800764a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800760a:	2300      	movs	r3, #0
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	e012      	b.n	8007636 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	7819      	ldrb	r1, [r3, #0]
 8007618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	3334      	adds	r3, #52	; 0x34
 8007620:	460a      	mov	r2, r1
 8007622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d006      	beq.n	800763e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	3301      	adds	r3, #1
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b0f      	cmp	r3, #15
 800763a:	d9e9      	bls.n	8007610 <prvInitialiseNewTask+0x54>
 800763c:	e000      	b.n	8007640 <prvInitialiseNewTask+0x84>
			{
				break;
 800763e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007648:	e003      	b.n	8007652 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	2b06      	cmp	r3, #6
 8007656:	d901      	bls.n	800765c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007658:	2306      	movs	r3, #6
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007666:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2200      	movs	r2, #0
 800766c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f8a6 	bl	80067c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	3318      	adds	r3, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff f8a1 	bl	80067c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	f1c3 0207 	rsb	r2, r3, #7
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	334c      	adds	r3, #76	; 0x4c
 80076ac:	224c      	movs	r2, #76	; 0x4c
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f002 f97a 	bl	80099aa <memset>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	4a0c      	ldr	r2, [pc, #48]	; (80076ec <prvInitialiseNewTask+0x130>)
 80076ba:	651a      	str	r2, [r3, #80]	; 0x50
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	4a0c      	ldr	r2, [pc, #48]	; (80076f0 <prvInitialiseNewTask+0x134>)
 80076c0:	655a      	str	r2, [r3, #84]	; 0x54
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	4a0b      	ldr	r2, [pc, #44]	; (80076f4 <prvInitialiseNewTask+0x138>)
 80076c6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	69b8      	ldr	r0, [r7, #24]
 80076ce:	f000 ff07 	bl	80084e0 <pxPortInitialiseStack>
 80076d2:	4602      	mov	r2, r0
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e4:	bf00      	nop
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20005d54 	.word	0x20005d54
 80076f0:	20005dbc 	.word	0x20005dbc
 80076f4:	20005e24 	.word	0x20005e24

080076f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007700:	f001 f818 	bl	8008734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007704:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a29      	ldr	r2, [pc, #164]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 800770c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800770e:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007716:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800771c:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d110      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007724:	f000 fbf8 	bl	8007f18 <prvInitialiseTaskLists>
 8007728:	e00d      	b.n	8007746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800772a:	4b23      	ldr	r3, [pc, #140]	; (80077b8 <prvAddNewTaskToReadyList+0xc0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	429a      	cmp	r2, r3
 800773e:	d802      	bhi.n	8007746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007740:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 800774e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	2201      	movs	r2, #1
 8007756:	409a      	lsls	r2, r3
 8007758:	4b19      	ldr	r3, [pc, #100]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4313      	orrs	r3, r2
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <prvAddNewTaskToReadyList+0xcc>)
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3304      	adds	r3, #4
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f7ff f830 	bl	80067de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800777e:	f001 f809 	bl	8008794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <prvAddNewTaskToReadyList+0xc0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	429a      	cmp	r2, r3
 8007796:	d207      	bcs.n	80077a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <prvAddNewTaskToReadyList+0xd0>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000608 	.word	0x20000608
 80077b4:	20000508 	.word	0x20000508
 80077b8:	20000614 	.word	0x20000614
 80077bc:	20000624 	.word	0x20000624
 80077c0:	20000610 	.word	0x20000610
 80077c4:	2000050c 	.word	0x2000050c
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <vTaskDelay+0x60>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <vTaskDelay+0x30>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60bb      	str	r3, [r7, #8]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077fc:	f000 f884 	bl	8007908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fe06 	bl	8008414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007808:	f000 f88c 	bl	8007924 <xTaskResumeAll>
 800780c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d107      	bne.n	8007824 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <vTaskDelay+0x64>)
 8007816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000630 	.word	0x20000630
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007842:	463a      	mov	r2, r7
 8007844:	1d39      	adds	r1, r7, #4
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	4618      	mov	r0, r3
 800784c:	f7f8 fe96 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	9202      	str	r2, [sp, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	2300      	movs	r3, #0
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2300      	movs	r3, #0
 8007860:	460a      	mov	r2, r1
 8007862:	4921      	ldr	r1, [pc, #132]	; (80078e8 <vTaskStartScheduler+0xb4>)
 8007864:	4821      	ldr	r0, [pc, #132]	; (80078ec <vTaskStartScheduler+0xb8>)
 8007866:	f7ff fe07 	bl	8007478 <xTaskCreateStatic>
 800786a:	4603      	mov	r3, r0
 800786c:	4a20      	ldr	r2, [pc, #128]	; (80078f0 <vTaskStartScheduler+0xbc>)
 800786e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007870:	4b1f      	ldr	r3, [pc, #124]	; (80078f0 <vTaskStartScheduler+0xbc>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e001      	b.n	8007882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d11b      	bne.n	80078c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	613b      	str	r3, [r7, #16]
}
 800789a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800789c:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <vTaskStartScheduler+0xc0>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	334c      	adds	r3, #76	; 0x4c
 80078a2:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <vTaskStartScheduler+0xc4>)
 80078a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078a6:	4b15      	ldr	r3, [pc, #84]	; (80078fc <vTaskStartScheduler+0xc8>)
 80078a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078ae:	4b14      	ldr	r3, [pc, #80]	; (8007900 <vTaskStartScheduler+0xcc>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078b4:	4b13      	ldr	r3, [pc, #76]	; (8007904 <vTaskStartScheduler+0xd0>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ba:	f000 fe99 	bl	80085f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078be:	e00e      	b.n	80078de <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c6:	d10a      	bne.n	80078de <vTaskStartScheduler+0xaa>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <vTaskStartScheduler+0xa8>
}
 80078de:	bf00      	nop
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	0800a7c0 	.word	0x0800a7c0
 80078ec:	08007ee9 	.word	0x08007ee9
 80078f0:	2000062c 	.word	0x2000062c
 80078f4:	20000508 	.word	0x20000508
 80078f8:	200001dc 	.word	0x200001dc
 80078fc:	20000628 	.word	0x20000628
 8007900:	20000614 	.word	0x20000614
 8007904:	2000060c 	.word	0x2000060c

08007908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800790c:	4b04      	ldr	r3, [pc, #16]	; (8007920 <vTaskSuspendAll+0x18>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	4a03      	ldr	r2, [pc, #12]	; (8007920 <vTaskSuspendAll+0x18>)
 8007914:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007916:	bf00      	nop
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	20000630 	.word	0x20000630

08007924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007932:	4b41      	ldr	r3, [pc, #260]	; (8007a38 <xTaskResumeAll+0x114>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <xTaskResumeAll+0x2c>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	603b      	str	r3, [r7, #0]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007950:	f000 fef0 	bl	8008734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007954:	4b38      	ldr	r3, [pc, #224]	; (8007a38 <xTaskResumeAll+0x114>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3b01      	subs	r3, #1
 800795a:	4a37      	ldr	r2, [pc, #220]	; (8007a38 <xTaskResumeAll+0x114>)
 800795c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800795e:	4b36      	ldr	r3, [pc, #216]	; (8007a38 <xTaskResumeAll+0x114>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d161      	bne.n	8007a2a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007966:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <xTaskResumeAll+0x118>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d05d      	beq.n	8007a2a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800796e:	e02e      	b.n	80079ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007970:	4b33      	ldr	r3, [pc, #204]	; (8007a40 <xTaskResumeAll+0x11c>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3318      	adds	r3, #24
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe ff8b 	bl	8006898 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3304      	adds	r3, #4
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe ff86 	bl	8006898 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	2201      	movs	r2, #1
 8007992:	409a      	lsls	r2, r3
 8007994:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <xTaskResumeAll+0x120>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4313      	orrs	r3, r2
 800799a:	4a2a      	ldr	r2, [pc, #168]	; (8007a44 <xTaskResumeAll+0x120>)
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4a27      	ldr	r2, [pc, #156]	; (8007a48 <xTaskResumeAll+0x124>)
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7fe ff12 	bl	80067de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079be:	4b23      	ldr	r3, [pc, #140]	; (8007a4c <xTaskResumeAll+0x128>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d302      	bcc.n	80079ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079c8:	4b21      	ldr	r3, [pc, #132]	; (8007a50 <xTaskResumeAll+0x12c>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ce:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <xTaskResumeAll+0x11c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1cc      	bne.n	8007970 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079dc:	f000 fb3e 	bl	800805c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079e0:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <xTaskResumeAll+0x130>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d010      	beq.n	8007a0e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079ec:	f000 f858 	bl	8007aa0 <xTaskIncrementTick>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079f6:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <xTaskResumeAll+0x12c>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f1      	bne.n	80079ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a08:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <xTaskResumeAll+0x130>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <xTaskResumeAll+0x12c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a1a:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <xTaskResumeAll+0x134>)
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a2a:	f000 feb3 	bl	8008794 <vPortExitCritical>

	return xAlreadyYielded;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000630 	.word	0x20000630
 8007a3c:	20000608 	.word	0x20000608
 8007a40:	200005c8 	.word	0x200005c8
 8007a44:	20000610 	.word	0x20000610
 8007a48:	2000050c 	.word	0x2000050c
 8007a4c:	20000508 	.word	0x20000508
 8007a50:	2000061c 	.word	0x2000061c
 8007a54:	20000618 	.word	0x20000618
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a62:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <xTaskGetTickCount+0x1c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a68:	687b      	ldr	r3, [r7, #4]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	2000060c 	.word	0x2000060c

08007a7c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a82:	f000 ff39 	bl	80088f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a86:	2300      	movs	r3, #0
 8007a88:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007a8a:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <xTaskGetTickCountFromISR+0x20>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a90:	683b      	ldr	r3, [r7, #0]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	2000060c 	.word	0x2000060c

08007aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aaa:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <xTaskIncrementTick+0x144>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 808e 	bne.w	8007bd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ab4:	4b4c      	ldr	r3, [pc, #304]	; (8007be8 <xTaskIncrementTick+0x148>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007abc:	4a4a      	ldr	r2, [pc, #296]	; (8007be8 <xTaskIncrementTick+0x148>)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d120      	bne.n	8007b0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ac8:	4b48      	ldr	r3, [pc, #288]	; (8007bec <xTaskIncrementTick+0x14c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	603b      	str	r3, [r7, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <xTaskIncrementTick+0x46>
 8007ae8:	4b40      	ldr	r3, [pc, #256]	; (8007bec <xTaskIncrementTick+0x14c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	4b40      	ldr	r3, [pc, #256]	; (8007bf0 <xTaskIncrementTick+0x150>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a3e      	ldr	r2, [pc, #248]	; (8007bec <xTaskIncrementTick+0x14c>)
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	4a3e      	ldr	r2, [pc, #248]	; (8007bf0 <xTaskIncrementTick+0x150>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4b3d      	ldr	r3, [pc, #244]	; (8007bf4 <xTaskIncrementTick+0x154>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3301      	adds	r3, #1
 8007b02:	4a3c      	ldr	r2, [pc, #240]	; (8007bf4 <xTaskIncrementTick+0x154>)
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	f000 faa9 	bl	800805c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b0a:	4b3b      	ldr	r3, [pc, #236]	; (8007bf8 <xTaskIncrementTick+0x158>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d348      	bcc.n	8007ba6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b14:	4b35      	ldr	r3, [pc, #212]	; (8007bec <xTaskIncrementTick+0x14c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <xTaskIncrementTick+0x158>)
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b24:	601a      	str	r2, [r3, #0]
					break;
 8007b26:	e03e      	b.n	8007ba6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b30      	ldr	r3, [pc, #192]	; (8007bec <xTaskIncrementTick+0x14c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d203      	bcs.n	8007b48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b40:	4a2d      	ldr	r2, [pc, #180]	; (8007bf8 <xTaskIncrementTick+0x158>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b46:	e02e      	b.n	8007ba6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fea3 	bl	8006898 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d004      	beq.n	8007b64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	3318      	adds	r3, #24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fe9a 	bl	8006898 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	2201      	movs	r2, #1
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	4b23      	ldr	r3, [pc, #140]	; (8007bfc <xTaskIncrementTick+0x15c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	4a22      	ldr	r2, [pc, #136]	; (8007bfc <xTaskIncrementTick+0x15c>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4a1f      	ldr	r2, [pc, #124]	; (8007c00 <xTaskIncrementTick+0x160>)
 8007b84:	441a      	add	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7fe fe26 	bl	80067de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b96:	4b1b      	ldr	r3, [pc, #108]	; (8007c04 <xTaskIncrementTick+0x164>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d3b9      	bcc.n	8007b14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba4:	e7b6      	b.n	8007b14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ba6:	4b17      	ldr	r3, [pc, #92]	; (8007c04 <xTaskIncrementTick+0x164>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4914      	ldr	r1, [pc, #80]	; (8007c00 <xTaskIncrementTick+0x160>)
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d901      	bls.n	8007bc2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bc2:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <xTaskIncrementTick+0x168>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	e004      	b.n	8007bda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bd0:	4b0e      	ldr	r3, [pc, #56]	; (8007c0c <xTaskIncrementTick+0x16c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	4a0d      	ldr	r2, [pc, #52]	; (8007c0c <xTaskIncrementTick+0x16c>)
 8007bd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bda:	697b      	ldr	r3, [r7, #20]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000630 	.word	0x20000630
 8007be8:	2000060c 	.word	0x2000060c
 8007bec:	200005c0 	.word	0x200005c0
 8007bf0:	200005c4 	.word	0x200005c4
 8007bf4:	20000620 	.word	0x20000620
 8007bf8:	20000628 	.word	0x20000628
 8007bfc:	20000610 	.word	0x20000610
 8007c00:	2000050c 	.word	0x2000050c
 8007c04:	20000508 	.word	0x20000508
 8007c08:	2000061c 	.word	0x2000061c
 8007c0c:	20000618 	.word	0x20000618

08007c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c16:	4b29      	ldr	r3, [pc, #164]	; (8007cbc <vTaskSwitchContext+0xac>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c1e:	4b28      	ldr	r3, [pc, #160]	; (8007cc0 <vTaskSwitchContext+0xb0>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c24:	e044      	b.n	8007cb0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007c26:	4b26      	ldr	r3, [pc, #152]	; (8007cc0 <vTaskSwitchContext+0xb0>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2c:	4b25      	ldr	r3, [pc, #148]	; (8007cc4 <vTaskSwitchContext+0xb4>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	fab3 f383 	clz	r3, r3
 8007c38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	f1c3 031f 	rsb	r3, r3, #31
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	4921      	ldr	r1, [pc, #132]	; (8007cc8 <vTaskSwitchContext+0xb8>)
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	440b      	add	r3, r1
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	607b      	str	r3, [r7, #4]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <vTaskSwitchContext+0x5a>
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4a14      	ldr	r2, [pc, #80]	; (8007cc8 <vTaskSwitchContext+0xb8>)
 8007c78:	4413      	add	r3, r2
 8007c7a:	613b      	str	r3, [r7, #16]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	605a      	str	r2, [r3, #4]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d104      	bne.n	8007c9c <vTaskSwitchContext+0x8c>
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	605a      	str	r2, [r3, #4]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <vTaskSwitchContext+0xbc>)
 8007ca4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <vTaskSwitchContext+0xbc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	334c      	adds	r3, #76	; 0x4c
 8007cac:	4a08      	ldr	r2, [pc, #32]	; (8007cd0 <vTaskSwitchContext+0xc0>)
 8007cae:	6013      	str	r3, [r2, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20000630 	.word	0x20000630
 8007cc0:	2000061c 	.word	0x2000061c
 8007cc4:	20000610 	.word	0x20000610
 8007cc8:	2000050c 	.word	0x2000050c
 8007ccc:	20000508 	.word	0x20000508
 8007cd0:	200001dc 	.word	0x200001dc

08007cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60fb      	str	r3, [r7, #12]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cfa:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <vTaskPlaceOnEventList+0x44>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3318      	adds	r3, #24
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fe fd8f 	bl	8006826 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d08:	2101      	movs	r1, #1
 8007d0a:	6838      	ldr	r0, [r7, #0]
 8007d0c:	f000 fb82 	bl	8008414 <prvAddCurrentTaskToDelayedList>
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000508 	.word	0x20000508

08007d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	60fb      	str	r3, [r7, #12]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	3318      	adds	r3, #24
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fda3 	bl	8006898 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d52:	4b1d      	ldr	r3, [pc, #116]	; (8007dc8 <xTaskRemoveFromEventList+0xac>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11c      	bne.n	8007d94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe fd9a 	bl	8006898 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	2201      	movs	r2, #1
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	4b17      	ldr	r3, [pc, #92]	; (8007dcc <xTaskRemoveFromEventList+0xb0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	4a16      	ldr	r2, [pc, #88]	; (8007dcc <xTaskRemoveFromEventList+0xb0>)
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4a13      	ldr	r2, [pc, #76]	; (8007dd0 <xTaskRemoveFromEventList+0xb4>)
 8007d84:	441a      	add	r2, r3
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f7fe fd26 	bl	80067de <vListInsertEnd>
 8007d92:	e005      	b.n	8007da0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3318      	adds	r3, #24
 8007d98:	4619      	mov	r1, r3
 8007d9a:	480e      	ldr	r0, [pc, #56]	; (8007dd4 <xTaskRemoveFromEventList+0xb8>)
 8007d9c:	f7fe fd1f 	bl	80067de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da4:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <xTaskRemoveFromEventList+0xbc>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d905      	bls.n	8007dba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dae:	2301      	movs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007db2:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <xTaskRemoveFromEventList+0xc0>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e001      	b.n	8007dbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dbe:	697b      	ldr	r3, [r7, #20]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20000630 	.word	0x20000630
 8007dcc:	20000610 	.word	0x20000610
 8007dd0:	2000050c 	.word	0x2000050c
 8007dd4:	200005c8 	.word	0x200005c8
 8007dd8:	20000508 	.word	0x20000508
 8007ddc:	2000061c 	.word	0x2000061c

08007de0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <vTaskInternalSetTimeOutState+0x24>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <vTaskInternalSetTimeOutState+0x28>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	605a      	str	r2, [r3, #4]
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	20000620 	.word	0x20000620
 8007e08:	2000060c 	.word	0x2000060c

08007e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	613b      	str	r3, [r7, #16]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	60fb      	str	r3, [r7, #12]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e4e:	f000 fc71 	bl	8008734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e52:	4b1d      	ldr	r3, [pc, #116]	; (8007ec8 <xTaskCheckForTimeOut+0xbc>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e6a:	d102      	bne.n	8007e72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	e023      	b.n	8007eba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <xTaskCheckForTimeOut+0xc0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d007      	beq.n	8007e8e <xTaskCheckForTimeOut+0x82>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	e015      	b.n	8007eba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d20b      	bcs.n	8007eb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff9b 	bl	8007de0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e004      	b.n	8007eba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eba:	f000 fc6b 	bl	8008794 <vPortExitCritical>

	return xReturn;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	2000060c 	.word	0x2000060c
 8007ecc:	20000620 	.word	0x20000620

08007ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ed4:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <vTaskMissedYield+0x14>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bf00      	nop
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	2000061c 	.word	0x2000061c

08007ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ef0:	f000 f852 	bl	8007f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <prvIdleTask+0x28>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d9f9      	bls.n	8007ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <prvIdleTask+0x2c>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f0c:	e7f0      	b.n	8007ef0 <prvIdleTask+0x8>
 8007f0e:	bf00      	nop
 8007f10:	2000050c 	.word	0x2000050c
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f1e:	2300      	movs	r3, #0
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	e00c      	b.n	8007f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4a12      	ldr	r2, [pc, #72]	; (8007f78 <prvInitialiseTaskLists+0x60>)
 8007f30:	4413      	add	r3, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fc26 	bl	8006784 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b06      	cmp	r3, #6
 8007f42:	d9ef      	bls.n	8007f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f44:	480d      	ldr	r0, [pc, #52]	; (8007f7c <prvInitialiseTaskLists+0x64>)
 8007f46:	f7fe fc1d 	bl	8006784 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f4a:	480d      	ldr	r0, [pc, #52]	; (8007f80 <prvInitialiseTaskLists+0x68>)
 8007f4c:	f7fe fc1a 	bl	8006784 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f50:	480c      	ldr	r0, [pc, #48]	; (8007f84 <prvInitialiseTaskLists+0x6c>)
 8007f52:	f7fe fc17 	bl	8006784 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f56:	480c      	ldr	r0, [pc, #48]	; (8007f88 <prvInitialiseTaskLists+0x70>)
 8007f58:	f7fe fc14 	bl	8006784 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f5c:	480b      	ldr	r0, [pc, #44]	; (8007f8c <prvInitialiseTaskLists+0x74>)
 8007f5e:	f7fe fc11 	bl	8006784 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f62:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <prvInitialiseTaskLists+0x78>)
 8007f64:	4a05      	ldr	r2, [pc, #20]	; (8007f7c <prvInitialiseTaskLists+0x64>)
 8007f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <prvInitialiseTaskLists+0x7c>)
 8007f6a:	4a05      	ldr	r2, [pc, #20]	; (8007f80 <prvInitialiseTaskLists+0x68>)
 8007f6c:	601a      	str	r2, [r3, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	2000050c 	.word	0x2000050c
 8007f7c:	20000598 	.word	0x20000598
 8007f80:	200005ac 	.word	0x200005ac
 8007f84:	200005c8 	.word	0x200005c8
 8007f88:	200005dc 	.word	0x200005dc
 8007f8c:	200005f4 	.word	0x200005f4
 8007f90:	200005c0 	.word	0x200005c0
 8007f94:	200005c4 	.word	0x200005c4

08007f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f9e:	e019      	b.n	8007fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fa0:	f000 fbc8 	bl	8008734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa4:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <prvCheckTasksWaitingTermination+0x50>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fc71 	bl	8006898 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <prvCheckTasksWaitingTermination+0x54>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a0b      	ldr	r2, [pc, #44]	; (8007fec <prvCheckTasksWaitingTermination+0x54>)
 8007fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fca:	f000 fbe3 	bl	8008794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f810 	bl	8007ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fd4:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e1      	bne.n	8007fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200005dc 	.word	0x200005dc
 8007fec:	20000608 	.word	0x20000608
 8007ff0:	200005f0 	.word	0x200005f0

08007ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	334c      	adds	r3, #76	; 0x4c
 8008000:	4618      	mov	r0, r3
 8008002:	f001 fceb 	bl	80099dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800800c:	2b00      	cmp	r3, #0
 800800e:	d108      	bne.n	8008022 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fd7b 	bl	8008b10 <vPortFree>
				vPortFree( pxTCB );
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fd78 	bl	8008b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008020:	e018      	b.n	8008054 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008028:	2b01      	cmp	r3, #1
 800802a:	d103      	bne.n	8008034 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fd6f 	bl	8008b10 <vPortFree>
	}
 8008032:	e00f      	b.n	8008054 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800803a:	2b02      	cmp	r3, #2
 800803c:	d00a      	beq.n	8008054 <prvDeleteTCB+0x60>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	60fb      	str	r3, [r7, #12]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <prvDeleteTCB+0x5e>
	}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008062:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <prvResetNextTaskUnblockTime+0x38>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800806c:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <prvResetNextTaskUnblockTime+0x3c>)
 800806e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008074:	e008      	b.n	8008088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008076:	4b07      	ldr	r3, [pc, #28]	; (8008094 <prvResetNextTaskUnblockTime+0x38>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	4a04      	ldr	r2, [pc, #16]	; (8008098 <prvResetNextTaskUnblockTime+0x3c>)
 8008086:	6013      	str	r3, [r2, #0]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	200005c0 	.word	0x200005c0
 8008098:	20000628 	.word	0x20000628

0800809c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <xTaskGetSchedulerState+0x34>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d102      	bne.n	80080b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080aa:	2301      	movs	r3, #1
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	e008      	b.n	80080c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b0:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <xTaskGetSchedulerState+0x38>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d102      	bne.n	80080be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080b8:	2302      	movs	r3, #2
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	e001      	b.n	80080c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080c2:	687b      	ldr	r3, [r7, #4]
	}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000614 	.word	0x20000614
 80080d4:	20000630 	.word	0x20000630

080080d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d05e      	beq.n	80081ac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f2:	4b31      	ldr	r3, [pc, #196]	; (80081b8 <xTaskPriorityInherit+0xe0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d24e      	bcs.n	800819a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db06      	blt.n	8008112 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008104:	4b2c      	ldr	r3, [pc, #176]	; (80081b8 <xTaskPriorityInherit+0xe0>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	f1c3 0207 	rsb	r2, r3, #7
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6959      	ldr	r1, [r3, #20]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4a26      	ldr	r2, [pc, #152]	; (80081bc <xTaskPriorityInherit+0xe4>)
 8008124:	4413      	add	r3, r2
 8008126:	4299      	cmp	r1, r3
 8008128:	d12f      	bne.n	800818a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3304      	adds	r3, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fbb2 	bl	8006898 <uxListRemove>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	2201      	movs	r2, #1
 8008140:	fa02 f303 	lsl.w	r3, r2, r3
 8008144:	43da      	mvns	r2, r3
 8008146:	4b1e      	ldr	r3, [pc, #120]	; (80081c0 <xTaskPriorityInherit+0xe8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4013      	ands	r3, r2
 800814c:	4a1c      	ldr	r2, [pc, #112]	; (80081c0 <xTaskPriorityInherit+0xe8>)
 800814e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008150:	4b19      	ldr	r3, [pc, #100]	; (80081b8 <xTaskPriorityInherit+0xe0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815e:	2201      	movs	r2, #1
 8008160:	409a      	lsls	r2, r3
 8008162:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <xTaskPriorityInherit+0xe8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4313      	orrs	r3, r2
 8008168:	4a15      	ldr	r2, [pc, #84]	; (80081c0 <xTaskPriorityInherit+0xe8>)
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4a10      	ldr	r2, [pc, #64]	; (80081bc <xTaskPriorityInherit+0xe4>)
 800817a:	441a      	add	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3304      	adds	r3, #4
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7fe fb2b 	bl	80067de <vListInsertEnd>
 8008188:	e004      	b.n	8008194 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800818a:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <xTaskPriorityInherit+0xe0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e008      	b.n	80081ac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819e:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <xTaskPriorityInherit+0xe0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d201      	bcs.n	80081ac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081a8:	2301      	movs	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081ac:	68fb      	ldr	r3, [r7, #12]
	}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000508 	.word	0x20000508
 80081bc:	2000050c 	.word	0x2000050c
 80081c0:	20000610 	.word	0x20000610

080081c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d06e      	beq.n	80082b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081da:	4b3a      	ldr	r3, [pc, #232]	; (80082c4 <xTaskPriorityDisinherit+0x100>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d00a      	beq.n	80081fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	60fb      	str	r3, [r7, #12]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822a:	429a      	cmp	r2, r3
 800822c:	d044      	beq.n	80082b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008232:	2b00      	cmp	r3, #0
 8008234:	d140      	bne.n	80082b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fb2c 	bl	8006898 <uxListRemove>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d115      	bne.n	8008272 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	491f      	ldr	r1, [pc, #124]	; (80082c8 <xTaskPriorityDisinherit+0x104>)
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <xTaskPriorityDisinherit+0xae>
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	2201      	movs	r2, #1
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	43da      	mvns	r2, r3
 8008268:	4b18      	ldr	r3, [pc, #96]	; (80082cc <xTaskPriorityDisinherit+0x108>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4013      	ands	r3, r2
 800826e:	4a17      	ldr	r2, [pc, #92]	; (80082cc <xTaskPriorityDisinherit+0x108>)
 8008270:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	f1c3 0207 	rsb	r2, r3, #7
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828a:	2201      	movs	r2, #1
 800828c:	409a      	lsls	r2, r3
 800828e:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <xTaskPriorityDisinherit+0x108>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4313      	orrs	r3, r2
 8008294:	4a0d      	ldr	r2, [pc, #52]	; (80082cc <xTaskPriorityDisinherit+0x108>)
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <xTaskPriorityDisinherit+0x104>)
 80082a6:	441a      	add	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4610      	mov	r0, r2
 80082b0:	f7fe fa95 	bl	80067de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082b4:	2301      	movs	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082b8:	697b      	ldr	r3, [r7, #20]
	}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000508 	.word	0x20000508
 80082c8:	2000050c 	.word	0x2000050c
 80082cc:	20000610 	.word	0x20000610

080082d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d077      	beq.n	80083d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d902      	bls.n	8008316 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	e002      	b.n	800831c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	69fa      	ldr	r2, [r7, #28]
 8008322:	429a      	cmp	r2, r3
 8008324:	d058      	beq.n	80083d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	429a      	cmp	r2, r3
 800832e:	d153      	bne.n	80083d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008330:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	429a      	cmp	r2, r3
 8008338:	d10a      	bne.n	8008350 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	60bb      	str	r3, [r7, #8]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	db04      	blt.n	800836e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f1c3 0207 	rsb	r2, r3, #7
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	6959      	ldr	r1, [r3, #20]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4a19      	ldr	r2, [pc, #100]	; (80083e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800837e:	4413      	add	r3, r2
 8008380:	4299      	cmp	r1, r3
 8008382:	d129      	bne.n	80083d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fa85 	bl	8006898 <uxListRemove>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	2201      	movs	r2, #1
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	43da      	mvns	r2, r3
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4013      	ands	r3, r2
 80083a6:	4a10      	ldr	r2, [pc, #64]	; (80083e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80083a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	2201      	movs	r2, #1
 80083b0:	409a      	lsls	r2, r3
 80083b2:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	4a0b      	ldr	r2, [pc, #44]	; (80083e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4a06      	ldr	r2, [pc, #24]	; (80083e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80083ca:	441a      	add	r2, r3
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7fe fa03 	bl	80067de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083d8:	bf00      	nop
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000508 	.word	0x20000508
 80083e4:	2000050c 	.word	0x2000050c
 80083e8:	20000610 	.word	0x20000610

080083ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <pvTaskIncrementMutexHeldCount+0x24>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <pvTaskIncrementMutexHeldCount+0x24>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083fe:	3201      	adds	r2, #1
 8008400:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008402:	4b03      	ldr	r3, [pc, #12]	; (8008410 <pvTaskIncrementMutexHeldCount+0x24>)
 8008404:	681b      	ldr	r3, [r3, #0]
	}
 8008406:	4618      	mov	r0, r3
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	20000508 	.word	0x20000508

08008414 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800841e:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008424:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fa34 	bl	8006898 <uxListRemove>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008436:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	2201      	movs	r2, #1
 800843e:	fa02 f303 	lsl.w	r3, r2, r3
 8008442:	43da      	mvns	r2, r3
 8008444:	4b21      	ldr	r3, [pc, #132]	; (80084cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4013      	ands	r3, r2
 800844a:	4a20      	ldr	r2, [pc, #128]	; (80084cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800844c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008454:	d10a      	bne.n	800846c <prvAddCurrentTaskToDelayedList+0x58>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800845c:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	481a      	ldr	r0, [pc, #104]	; (80084d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008466:	f7fe f9ba 	bl	80067de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800846a:	e026      	b.n	80084ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008474:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	429a      	cmp	r2, r3
 8008482:	d209      	bcs.n	8008498 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3304      	adds	r3, #4
 800848e:	4619      	mov	r1, r3
 8008490:	4610      	mov	r0, r2
 8008492:	f7fe f9c8 	bl	8006826 <vListInsert>
}
 8008496:	e010      	b.n	80084ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008498:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4b0a      	ldr	r3, [pc, #40]	; (80084c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f7fe f9be 	bl	8006826 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d202      	bcs.n	80084ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084b4:	4a09      	ldr	r2, [pc, #36]	; (80084dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6013      	str	r3, [r2, #0]
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	2000060c 	.word	0x2000060c
 80084c8:	20000508 	.word	0x20000508
 80084cc:	20000610 	.word	0x20000610
 80084d0:	200005f4 	.word	0x200005f4
 80084d4:	200005c4 	.word	0x200005c4
 80084d8:	200005c0 	.word	0x200005c0
 80084dc:	20000628 	.word	0x20000628

080084e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3b04      	subs	r3, #4
 80084f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3b04      	subs	r3, #4
 80084fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f023 0201 	bic.w	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3b04      	subs	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008510:	4a0c      	ldr	r2, [pc, #48]	; (8008544 <pxPortInitialiseStack+0x64>)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3b14      	subs	r3, #20
 800851a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3b04      	subs	r3, #4
 8008526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f06f 0202 	mvn.w	r2, #2
 800852e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3b20      	subs	r3, #32
 8008534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008536:	68fb      	ldr	r3, [r7, #12]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	08008549 	.word	0x08008549

08008548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008552:	4b12      	ldr	r3, [pc, #72]	; (800859c <prvTaskExitError+0x54>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800855a:	d00a      	beq.n	8008572 <prvTaskExitError+0x2a>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	60fb      	str	r3, [r7, #12]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <prvTaskExitError+0x28>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	60bb      	str	r3, [r7, #8]
}
 8008584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008586:	bf00      	nop
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0fc      	beq.n	8008588 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	2000011c 	.word	0x2000011c

080085a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <pxCurrentTCBConst2>)
 80085a2:	6819      	ldr	r1, [r3, #0]
 80085a4:	6808      	ldr	r0, [r1, #0]
 80085a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	f380 8809 	msr	PSP, r0
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	4770      	bx	lr
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst2>:
 80085c0:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085c8:	4808      	ldr	r0, [pc, #32]	; (80085ec <prvPortStartFirstTask+0x24>)
 80085ca:	6800      	ldr	r0, [r0, #0]
 80085cc:	6800      	ldr	r0, [r0, #0]
 80085ce:	f380 8808 	msr	MSP, r0
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8814 	msr	CONTROL, r0
 80085da:	b662      	cpsie	i
 80085dc:	b661      	cpsie	f
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	df00      	svc	0
 80085e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ea:	bf00      	nop
 80085ec:	e000ed08 	.word	0xe000ed08

080085f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085f6:	4b46      	ldr	r3, [pc, #280]	; (8008710 <xPortStartScheduler+0x120>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a46      	ldr	r2, [pc, #280]	; (8008714 <xPortStartScheduler+0x124>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d10a      	bne.n	8008616 <xPortStartScheduler+0x26>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008616:	4b3e      	ldr	r3, [pc, #248]	; (8008710 <xPortStartScheduler+0x120>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a3f      	ldr	r2, [pc, #252]	; (8008718 <xPortStartScheduler+0x128>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10a      	bne.n	8008636 <xPortStartScheduler+0x46>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	60fb      	str	r3, [r7, #12]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008636:	4b39      	ldr	r3, [pc, #228]	; (800871c <xPortStartScheduler+0x12c>)
 8008638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	22ff      	movs	r2, #255	; 0xff
 8008646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008658:	b2da      	uxtb	r2, r3
 800865a:	4b31      	ldr	r3, [pc, #196]	; (8008720 <xPortStartScheduler+0x130>)
 800865c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800865e:	4b31      	ldr	r3, [pc, #196]	; (8008724 <xPortStartScheduler+0x134>)
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008664:	e009      	b.n	800867a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008666:	4b2f      	ldr	r3, [pc, #188]	; (8008724 <xPortStartScheduler+0x134>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3b01      	subs	r3, #1
 800866c:	4a2d      	ldr	r2, [pc, #180]	; (8008724 <xPortStartScheduler+0x134>)
 800866e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	b2db      	uxtb	r3, r3
 8008678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008682:	2b80      	cmp	r3, #128	; 0x80
 8008684:	d0ef      	beq.n	8008666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008686:	4b27      	ldr	r3, [pc, #156]	; (8008724 <xPortStartScheduler+0x134>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f1c3 0307 	rsb	r3, r3, #7
 800868e:	2b04      	cmp	r3, #4
 8008690:	d00a      	beq.n	80086a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60bb      	str	r3, [r7, #8]
}
 80086a4:	bf00      	nop
 80086a6:	e7fe      	b.n	80086a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086a8:	4b1e      	ldr	r3, [pc, #120]	; (8008724 <xPortStartScheduler+0x134>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	021b      	lsls	r3, r3, #8
 80086ae:	4a1d      	ldr	r2, [pc, #116]	; (8008724 <xPortStartScheduler+0x134>)
 80086b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086b2:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <xPortStartScheduler+0x134>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086ba:	4a1a      	ldr	r2, [pc, #104]	; (8008724 <xPortStartScheduler+0x134>)
 80086bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086c6:	4b18      	ldr	r3, [pc, #96]	; (8008728 <xPortStartScheduler+0x138>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a17      	ldr	r2, [pc, #92]	; (8008728 <xPortStartScheduler+0x138>)
 80086cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086d2:	4b15      	ldr	r3, [pc, #84]	; (8008728 <xPortStartScheduler+0x138>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a14      	ldr	r2, [pc, #80]	; (8008728 <xPortStartScheduler+0x138>)
 80086d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086de:	f000 f8dd 	bl	800889c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086e2:	4b12      	ldr	r3, [pc, #72]	; (800872c <xPortStartScheduler+0x13c>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086e8:	f000 f8fc 	bl	80088e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086ec:	4b10      	ldr	r3, [pc, #64]	; (8008730 <xPortStartScheduler+0x140>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a0f      	ldr	r2, [pc, #60]	; (8008730 <xPortStartScheduler+0x140>)
 80086f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086f8:	f7ff ff66 	bl	80085c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086fc:	f7ff fa88 	bl	8007c10 <vTaskSwitchContext>
	prvTaskExitError();
 8008700:	f7ff ff22 	bl	8008548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	e000ed00 	.word	0xe000ed00
 8008714:	410fc271 	.word	0x410fc271
 8008718:	410fc270 	.word	0x410fc270
 800871c:	e000e400 	.word	0xe000e400
 8008720:	20000634 	.word	0x20000634
 8008724:	20000638 	.word	0x20000638
 8008728:	e000ed20 	.word	0xe000ed20
 800872c:	2000011c 	.word	0x2000011c
 8008730:	e000ef34 	.word	0xe000ef34

08008734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	607b      	str	r3, [r7, #4]
}
 800874c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800874e:	4b0f      	ldr	r3, [pc, #60]	; (800878c <vPortEnterCritical+0x58>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3301      	adds	r3, #1
 8008754:	4a0d      	ldr	r2, [pc, #52]	; (800878c <vPortEnterCritical+0x58>)
 8008756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008758:	4b0c      	ldr	r3, [pc, #48]	; (800878c <vPortEnterCritical+0x58>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d10f      	bne.n	8008780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008760:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <vPortEnterCritical+0x5c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <vPortEnterCritical+0x4c>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	603b      	str	r3, [r7, #0]
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <vPortEnterCritical+0x4a>
	}
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	2000011c 	.word	0x2000011c
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800879a:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <vPortExitCritical+0x50>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <vPortExitCritical+0x24>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	607b      	str	r3, [r7, #4]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087b8:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <vPortExitCritical+0x50>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3b01      	subs	r3, #1
 80087be:	4a09      	ldr	r2, [pc, #36]	; (80087e4 <vPortExitCritical+0x50>)
 80087c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087c2:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <vPortExitCritical+0x50>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d105      	bne.n	80087d6 <vPortExitCritical+0x42>
 80087ca:	2300      	movs	r3, #0
 80087cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	f383 8811 	msr	BASEPRI, r3
}
 80087d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	2000011c 	.word	0x2000011c
	...

080087f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087f0:	f3ef 8009 	mrs	r0, PSP
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <pxCurrentTCBConst>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	f01e 0f10 	tst.w	lr, #16
 8008800:	bf08      	it	eq
 8008802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880a:	6010      	str	r0, [r2, #0]
 800880c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008814:	f380 8811 	msr	BASEPRI, r0
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f7ff f9f6 	bl	8007c10 <vTaskSwitchContext>
 8008824:	f04f 0000 	mov.w	r0, #0
 8008828:	f380 8811 	msr	BASEPRI, r0
 800882c:	bc09      	pop	{r0, r3}
 800882e:	6819      	ldr	r1, [r3, #0]
 8008830:	6808      	ldr	r0, [r1, #0]
 8008832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008836:	f01e 0f10 	tst.w	lr, #16
 800883a:	bf08      	it	eq
 800883c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008840:	f380 8809 	msr	PSP, r0
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w

08008850 <pxCurrentTCBConst>:
 8008850:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008872:	f7ff f915 	bl	8007aa0 <xTaskIncrementTick>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <SysTick_Handler+0x40>)
 800887e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f383 8811 	msr	BASEPRI, r3
}
 800888e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <vPortSetupTimerInterrupt+0x38>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <vPortSetupTimerInterrupt+0x3c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <vPortSetupTimerInterrupt+0x40>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	099b      	lsrs	r3, r3, #6
 80088b8:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <vPortSetupTimerInterrupt+0x44>)
 80088ba:	3b01      	subs	r3, #1
 80088bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088be:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088c0:	2207      	movs	r2, #7
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	e000e010 	.word	0xe000e010
 80088d4:	e000e018 	.word	0xe000e018
 80088d8:	20000000 	.word	0x20000000
 80088dc:	10624dd3 	.word	0x10624dd3
 80088e0:	e000e014 	.word	0xe000e014

080088e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088f4 <vPortEnableVFP+0x10>
 80088e8:	6801      	ldr	r1, [r0, #0]
 80088ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088ee:	6001      	str	r1, [r0, #0]
 80088f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088f2:	bf00      	nop
 80088f4:	e000ed88 	.word	0xe000ed88

080088f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088fe:	f3ef 8305 	mrs	r3, IPSR
 8008902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d914      	bls.n	8008934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800890a:	4a17      	ldr	r2, [pc, #92]	; (8008968 <vPortValidateInterruptPriority+0x70>)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008914:	4b15      	ldr	r3, [pc, #84]	; (800896c <vPortValidateInterruptPriority+0x74>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	7afa      	ldrb	r2, [r7, #11]
 800891a:	429a      	cmp	r2, r3
 800891c:	d20a      	bcs.n	8008934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008934:	4b0e      	ldr	r3, [pc, #56]	; (8008970 <vPortValidateInterruptPriority+0x78>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800893c:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <vPortValidateInterruptPriority+0x7c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	429a      	cmp	r2, r3
 8008942:	d90a      	bls.n	800895a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	603b      	str	r3, [r7, #0]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <vPortValidateInterruptPriority+0x60>
	}
 800895a:	bf00      	nop
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	e000e3f0 	.word	0xe000e3f0
 800896c:	20000634 	.word	0x20000634
 8008970:	e000ed0c 	.word	0xe000ed0c
 8008974:	20000638 	.word	0x20000638

08008978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008980:	2300      	movs	r3, #0
 8008982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008984:	f7fe ffc0 	bl	8007908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008988:	4b5b      	ldr	r3, [pc, #364]	; (8008af8 <pvPortMalloc+0x180>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008990:	f000 f920 	bl	8008bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008994:	4b59      	ldr	r3, [pc, #356]	; (8008afc <pvPortMalloc+0x184>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 8093 	bne.w	8008ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01d      	beq.n	80089e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80089a8:	2208      	movs	r2, #8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4413      	add	r3, r2
 80089ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d014      	beq.n	80089e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f023 0307 	bic.w	r3, r3, #7
 80089c0:	3308      	adds	r3, #8
 80089c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <pvPortMalloc+0x6c>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	617b      	str	r3, [r7, #20]
}
 80089e0:	bf00      	nop
 80089e2:	e7fe      	b.n	80089e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d06e      	beq.n	8008ac8 <pvPortMalloc+0x150>
 80089ea:	4b45      	ldr	r3, [pc, #276]	; (8008b00 <pvPortMalloc+0x188>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d869      	bhi.n	8008ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089f4:	4b43      	ldr	r3, [pc, #268]	; (8008b04 <pvPortMalloc+0x18c>)
 80089f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089f8:	4b42      	ldr	r3, [pc, #264]	; (8008b04 <pvPortMalloc+0x18c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089fe:	e004      	b.n	8008a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d903      	bls.n	8008a1c <pvPortMalloc+0xa4>
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f1      	bne.n	8008a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <pvPortMalloc+0x180>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d050      	beq.n	8008ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2208      	movs	r2, #8
 8008a2c:	4413      	add	r3, r2
 8008a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	1ad2      	subs	r2, r2, r3
 8008a40:	2308      	movs	r3, #8
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d91f      	bls.n	8008a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <pvPortMalloc+0xf8>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	613b      	str	r3, [r7, #16]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	1ad2      	subs	r2, r2, r3
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a82:	69b8      	ldr	r0, [r7, #24]
 8008a84:	f000 f908 	bl	8008c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a88:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <pvPortMalloc+0x188>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	4a1b      	ldr	r2, [pc, #108]	; (8008b00 <pvPortMalloc+0x188>)
 8008a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <pvPortMalloc+0x188>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b1b      	ldr	r3, [pc, #108]	; (8008b08 <pvPortMalloc+0x190>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d203      	bcs.n	8008aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <pvPortMalloc+0x188>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a18      	ldr	r2, [pc, #96]	; (8008b08 <pvPortMalloc+0x190>)
 8008aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	4b13      	ldr	r3, [pc, #76]	; (8008afc <pvPortMalloc+0x184>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	2200      	movs	r2, #0
 8008abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008abe:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <pvPortMalloc+0x194>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	4a11      	ldr	r2, [pc, #68]	; (8008b0c <pvPortMalloc+0x194>)
 8008ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ac8:	f7fe ff2c 	bl	8007924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <pvPortMalloc+0x174>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	60fb      	str	r3, [r7, #12]
}
 8008ae8:	bf00      	nop
 8008aea:	e7fe      	b.n	8008aea <pvPortMalloc+0x172>
	return pvReturn;
 8008aec:	69fb      	ldr	r3, [r7, #28]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3728      	adds	r7, #40	; 0x28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20004244 	.word	0x20004244
 8008afc:	20004258 	.word	0x20004258
 8008b00:	20004248 	.word	0x20004248
 8008b04:	2000423c 	.word	0x2000423c
 8008b08:	2000424c 	.word	0x2000424c
 8008b0c:	20004250 	.word	0x20004250

08008b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d04d      	beq.n	8008bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b22:	2308      	movs	r3, #8
 8008b24:	425b      	negs	r3, r3
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4413      	add	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <vPortFree+0xb8>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10a      	bne.n	8008b54 <vPortFree+0x44>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	60fb      	str	r3, [r7, #12]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <vPortFree+0x62>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60bb      	str	r3, [r7, #8]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <vPortFree+0xb8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01e      	beq.n	8008bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d11a      	bne.n	8008bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	4b0e      	ldr	r3, [pc, #56]	; (8008bc8 <vPortFree+0xb8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	43db      	mvns	r3, r3
 8008b92:	401a      	ands	r2, r3
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b98:	f7fe feb6 	bl	8007908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <vPortFree+0xbc>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	4a09      	ldr	r2, [pc, #36]	; (8008bcc <vPortFree+0xbc>)
 8008ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008baa:	6938      	ldr	r0, [r7, #16]
 8008bac:	f000 f874 	bl	8008c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <vPortFree+0xc0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	4a06      	ldr	r2, [pc, #24]	; (8008bd0 <vPortFree+0xc0>)
 8008bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008bba:	f7fe feb3 	bl	8007924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008bbe:	bf00      	nop
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20004258 	.word	0x20004258
 8008bcc:	20004248 	.word	0x20004248
 8008bd0:	20004254 	.word	0x20004254

08008bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008be0:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <prvHeapInit+0xac>)
 8008be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00c      	beq.n	8008c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3307      	adds	r3, #7
 8008bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0307 	bic.w	r3, r3, #7
 8008bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	4a1f      	ldr	r2, [pc, #124]	; (8008c80 <prvHeapInit+0xac>)
 8008c04:	4413      	add	r3, r2
 8008c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c0c:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <prvHeapInit+0xb0>)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c12:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <prvHeapInit+0xb0>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c20:	2208      	movs	r2, #8
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0307 	bic.w	r3, r3, #7
 8008c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <prvHeapInit+0xb4>)
 8008c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <prvHeapInit+0xb4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c3e:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <prvHeapInit+0xb4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c54:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <prvHeapInit+0xb4>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <prvHeapInit+0xb8>)
 8008c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <prvHeapInit+0xbc>)
 8008c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <prvHeapInit+0xc0>)
 8008c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	2000063c 	.word	0x2000063c
 8008c84:	2000423c 	.word	0x2000423c
 8008c88:	20004244 	.word	0x20004244
 8008c8c:	2000424c 	.word	0x2000424c
 8008c90:	20004248 	.word	0x20004248
 8008c94:	20004258 	.word	0x20004258

08008c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ca0:	4b28      	ldr	r3, [pc, #160]	; (8008d44 <prvInsertBlockIntoFreeList+0xac>)
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	e002      	b.n	8008cac <prvInsertBlockIntoFreeList+0x14>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d8f7      	bhi.n	8008ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d108      	bne.n	8008cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	441a      	add	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d118      	bne.n	8008d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <prvInsertBlockIntoFreeList+0xb0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d00d      	beq.n	8008d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	441a      	add	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	e008      	b.n	8008d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d16:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <prvInsertBlockIntoFreeList+0xb0>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	e003      	b.n	8008d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d002      	beq.n	8008d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d36:	bf00      	nop
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	2000423c 	.word	0x2000423c
 8008d48:	20004244 	.word	0x20004244

08008d4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d50:	2200      	movs	r2, #0
 8008d52:	4912      	ldr	r1, [pc, #72]	; (8008d9c <MX_USB_DEVICE_Init+0x50>)
 8008d54:	4812      	ldr	r0, [pc, #72]	; (8008da0 <MX_USB_DEVICE_Init+0x54>)
 8008d56:	f7fc f9b9 	bl	80050cc <USBD_Init>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d60:	f7f7 fe02 	bl	8000968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d64:	490f      	ldr	r1, [pc, #60]	; (8008da4 <MX_USB_DEVICE_Init+0x58>)
 8008d66:	480e      	ldr	r0, [pc, #56]	; (8008da0 <MX_USB_DEVICE_Init+0x54>)
 8008d68:	f7fc f9e0 	bl	800512c <USBD_RegisterClass>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d72:	f7f7 fdf9 	bl	8000968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d76:	490c      	ldr	r1, [pc, #48]	; (8008da8 <MX_USB_DEVICE_Init+0x5c>)
 8008d78:	4809      	ldr	r0, [pc, #36]	; (8008da0 <MX_USB_DEVICE_Init+0x54>)
 8008d7a:	f7fc f901 	bl	8004f80 <USBD_CDC_RegisterInterface>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d84:	f7f7 fdf0 	bl	8000968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d88:	4805      	ldr	r0, [pc, #20]	; (8008da0 <MX_USB_DEVICE_Init+0x54>)
 8008d8a:	f7fc f9f6 	bl	800517a <USBD_Start>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d94:	f7f7 fde8 	bl	8000968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d98:	bf00      	nop
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000134 	.word	0x20000134
 8008da0:	2000425c 	.word	0x2000425c
 8008da4:	20000018 	.word	0x20000018
 8008da8:	20000120 	.word	0x20000120

08008dac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008db0:	2200      	movs	r2, #0
 8008db2:	4905      	ldr	r1, [pc, #20]	; (8008dc8 <CDC_Init_FS+0x1c>)
 8008db4:	4805      	ldr	r0, [pc, #20]	; (8008dcc <CDC_Init_FS+0x20>)
 8008db6:	f7fc f8f8 	bl	8004faa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dba:	4905      	ldr	r1, [pc, #20]	; (8008dd0 <CDC_Init_FS+0x24>)
 8008dbc:	4803      	ldr	r0, [pc, #12]	; (8008dcc <CDC_Init_FS+0x20>)
 8008dbe:	f7fc f912 	bl	8004fe6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20004d2c 	.word	0x20004d2c
 8008dcc:	2000425c 	.word	0x2000425c
 8008dd0:	2000452c 	.word	0x2000452c

08008dd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	6039      	str	r1, [r7, #0]
 8008dee:	71fb      	strb	r3, [r7, #7]
 8008df0:	4613      	mov	r3, r2
 8008df2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	2b23      	cmp	r3, #35	; 0x23
 8008df8:	d84a      	bhi.n	8008e90 <CDC_Control_FS+0xac>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <CDC_Control_FS+0x1c>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e91 	.word	0x08008e91
 8008e04:	08008e91 	.word	0x08008e91
 8008e08:	08008e91 	.word	0x08008e91
 8008e0c:	08008e91 	.word	0x08008e91
 8008e10:	08008e91 	.word	0x08008e91
 8008e14:	08008e91 	.word	0x08008e91
 8008e18:	08008e91 	.word	0x08008e91
 8008e1c:	08008e91 	.word	0x08008e91
 8008e20:	08008e91 	.word	0x08008e91
 8008e24:	08008e91 	.word	0x08008e91
 8008e28:	08008e91 	.word	0x08008e91
 8008e2c:	08008e91 	.word	0x08008e91
 8008e30:	08008e91 	.word	0x08008e91
 8008e34:	08008e91 	.word	0x08008e91
 8008e38:	08008e91 	.word	0x08008e91
 8008e3c:	08008e91 	.word	0x08008e91
 8008e40:	08008e91 	.word	0x08008e91
 8008e44:	08008e91 	.word	0x08008e91
 8008e48:	08008e91 	.word	0x08008e91
 8008e4c:	08008e91 	.word	0x08008e91
 8008e50:	08008e91 	.word	0x08008e91
 8008e54:	08008e91 	.word	0x08008e91
 8008e58:	08008e91 	.word	0x08008e91
 8008e5c:	08008e91 	.word	0x08008e91
 8008e60:	08008e91 	.word	0x08008e91
 8008e64:	08008e91 	.word	0x08008e91
 8008e68:	08008e91 	.word	0x08008e91
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008e91 	.word	0x08008e91
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008e91 	.word	0x08008e91
 8008e7c:	08008e91 	.word	0x08008e91
 8008e80:	08008e91 	.word	0x08008e91
 8008e84:	08008e91 	.word	0x08008e91
 8008e88:	08008e91 	.word	0x08008e91
 8008e8c:	08008e91 	.word	0x08008e91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e90:	bf00      	nop
  }

  return (USBD_OK);
 8008e92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008eaa:	6879      	ldr	r1, [r7, #4]
 8008eac:	4805      	ldr	r0, [pc, #20]	; (8008ec4 <CDC_Receive_FS+0x24>)
 8008eae:	f7fc f89a 	bl	8004fe6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008eb2:	4804      	ldr	r0, [pc, #16]	; (8008ec4 <CDC_Receive_FS+0x24>)
 8008eb4:	f7fc f8e0 	bl	8005078 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008eb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	2000425c 	.word	0x2000425c

08008ec8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <CDC_Transmit_FS+0x48>)
 8008eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ede:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e00b      	b.n	8008f06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008eee:	887b      	ldrh	r3, [r7, #2]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4806      	ldr	r0, [pc, #24]	; (8008f10 <CDC_Transmit_FS+0x48>)
 8008ef6:	f7fc f858 	bl	8004faa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008efa:	4805      	ldr	r0, [pc, #20]	; (8008f10 <CDC_Transmit_FS+0x48>)
 8008efc:	f7fc f88c 	bl	8005018 <USBD_CDC_TransmitPacket>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000425c 	.word	0x2000425c

08008f14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2212      	movs	r2, #18
 8008f48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f4a:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	20000150 	.word	0x20000150

08008f5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2204      	movs	r2, #4
 8008f6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f6e:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20000164 	.word	0x20000164

08008f80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	6039      	str	r1, [r7, #0]
 8008f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d105      	bne.n	8008f9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4907      	ldr	r1, [pc, #28]	; (8008fb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f96:	4808      	ldr	r0, [pc, #32]	; (8008fb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f98:	f7fd f921 	bl	80061de <USBD_GetString>
 8008f9c:	e004      	b.n	8008fa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4904      	ldr	r1, [pc, #16]	; (8008fb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fa2:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fa4:	f7fd f91b 	bl	80061de <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2000552c 	.word	0x2000552c
 8008fb8:	0800a7c8 	.word	0x0800a7c8

08008fbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	4904      	ldr	r1, [pc, #16]	; (8008fdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fcc:	4804      	ldr	r0, [pc, #16]	; (8008fe0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fce:	f7fd f906 	bl	80061de <USBD_GetString>
  return USBD_StrDesc;
 8008fd2:	4b02      	ldr	r3, [pc, #8]	; (8008fdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	2000552c 	.word	0x2000552c
 8008fe0:	0800a7dc 	.word	0x0800a7dc

08008fe4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	221a      	movs	r2, #26
 8008ff4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ff6:	f000 f843 	bl	8009080 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ffa:	4b02      	ldr	r3, [pc, #8]	; (8009004 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20000168 	.word	0x20000168

08009008 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d105      	bne.n	8009026 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	4907      	ldr	r1, [pc, #28]	; (800903c <USBD_FS_ConfigStrDescriptor+0x34>)
 800901e:	4808      	ldr	r0, [pc, #32]	; (8009040 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009020:	f7fd f8dd 	bl	80061de <USBD_GetString>
 8009024:	e004      	b.n	8009030 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4904      	ldr	r1, [pc, #16]	; (800903c <USBD_FS_ConfigStrDescriptor+0x34>)
 800902a:	4805      	ldr	r0, [pc, #20]	; (8009040 <USBD_FS_ConfigStrDescriptor+0x38>)
 800902c:	f7fd f8d7 	bl	80061de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009030:	4b02      	ldr	r3, [pc, #8]	; (800903c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	2000552c 	.word	0x2000552c
 8009040:	0800a7e8 	.word	0x0800a7e8

08009044 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d105      	bne.n	8009062 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	4907      	ldr	r1, [pc, #28]	; (8009078 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800905a:	4808      	ldr	r0, [pc, #32]	; (800907c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800905c:	f7fd f8bf 	bl	80061de <USBD_GetString>
 8009060:	e004      	b.n	800906c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	4904      	ldr	r1, [pc, #16]	; (8009078 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009066:	4805      	ldr	r0, [pc, #20]	; (800907c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009068:	f7fd f8b9 	bl	80061de <USBD_GetString>
  }
  return USBD_StrDesc;
 800906c:	4b02      	ldr	r3, [pc, #8]	; (8009078 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	2000552c 	.word	0x2000552c
 800907c:	0800a7f4 	.word	0x0800a7f4

08009080 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009086:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <Get_SerialNum+0x44>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800908c:	4b0e      	ldr	r3, [pc, #56]	; (80090c8 <Get_SerialNum+0x48>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009092:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <Get_SerialNum+0x4c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090a6:	2208      	movs	r2, #8
 80090a8:	4909      	ldr	r1, [pc, #36]	; (80090d0 <Get_SerialNum+0x50>)
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 f814 	bl	80090d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090b0:	2204      	movs	r2, #4
 80090b2:	4908      	ldr	r1, [pc, #32]	; (80090d4 <Get_SerialNum+0x54>)
 80090b4:	68b8      	ldr	r0, [r7, #8]
 80090b6:	f000 f80f 	bl	80090d8 <IntToUnicode>
  }
}
 80090ba:	bf00      	nop
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	1fff7a10 	.word	0x1fff7a10
 80090c8:	1fff7a14 	.word	0x1fff7a14
 80090cc:	1fff7a18 	.word	0x1fff7a18
 80090d0:	2000016a 	.word	0x2000016a
 80090d4:	2000017a 	.word	0x2000017a

080090d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	4613      	mov	r3, r2
 80090e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	75fb      	strb	r3, [r7, #23]
 80090ee:	e027      	b.n	8009140 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	0f1b      	lsrs	r3, r3, #28
 80090f4:	2b09      	cmp	r3, #9
 80090f6:	d80b      	bhi.n	8009110 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	0f1b      	lsrs	r3, r3, #28
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	4619      	mov	r1, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	440b      	add	r3, r1
 8009108:	3230      	adds	r2, #48	; 0x30
 800910a:	b2d2      	uxtb	r2, r2
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	e00a      	b.n	8009126 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	0f1b      	lsrs	r3, r3, #28
 8009114:	b2da      	uxtb	r2, r3
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	4619      	mov	r1, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	440b      	add	r3, r1
 8009120:	3237      	adds	r2, #55	; 0x37
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	3301      	adds	r3, #1
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	4413      	add	r3, r2
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	3301      	adds	r3, #1
 800913e:	75fb      	strb	r3, [r7, #23]
 8009140:	7dfa      	ldrb	r2, [r7, #23]
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	429a      	cmp	r2, r3
 8009146:	d3d3      	bcc.n	80090f0 <IntToUnicode+0x18>
  }
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
	...

08009158 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08a      	sub	sp, #40	; 0x28
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	605a      	str	r2, [r3, #4]
 800916a:	609a      	str	r2, [r3, #8]
 800916c:	60da      	str	r2, [r3, #12]
 800916e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009178:	d13a      	bne.n	80091f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800917a:	2300      	movs	r3, #0
 800917c:	613b      	str	r3, [r7, #16]
 800917e:	4b1e      	ldr	r3, [pc, #120]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009182:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	6313      	str	r3, [r2, #48]	; 0x30
 800918a:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	613b      	str	r3, [r7, #16]
 8009194:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009196:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800919a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800919c:	2302      	movs	r3, #2
 800919e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091a4:	2303      	movs	r3, #3
 80091a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091a8:	230a      	movs	r3, #10
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4619      	mov	r1, r3
 80091b2:	4812      	ldr	r0, [pc, #72]	; (80091fc <HAL_PCD_MspInit+0xa4>)
 80091b4:	f7f7 fea0 	bl	8000ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091b8:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 80091ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091bc:	4a0e      	ldr	r2, [pc, #56]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 80091be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c2:	6353      	str	r3, [r2, #52]	; 0x34
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 80091ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091cc:	4a0a      	ldr	r2, [pc, #40]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 80091ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091d2:	6453      	str	r3, [r2, #68]	; 0x44
 80091d4:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <HAL_PCD_MspInit+0xa0>)
 80091d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80091e0:	2200      	movs	r2, #0
 80091e2:	2105      	movs	r1, #5
 80091e4:	2043      	movs	r0, #67	; 0x43
 80091e6:	f7f7 fe5d 	bl	8000ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091ea:	2043      	movs	r0, #67	; 0x43
 80091ec:	f7f7 fe76 	bl	8000edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091f0:	bf00      	nop
 80091f2:	3728      	adds	r7, #40	; 0x28
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	40023800 	.word	0x40023800
 80091fc:	40020000 	.word	0x40020000

08009200 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fb fffa 	bl	8005210 <USBD_LL_SetupStage>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009236:	78fa      	ldrb	r2, [r7, #3]
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	1a9b      	subs	r3, r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	440b      	add	r3, r1
 8009244:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	4619      	mov	r1, r3
 800924e:	f7fc f834 	bl	80052ba <USBD_LL_DataOutStage>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	3348      	adds	r3, #72	; 0x48
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	78fb      	ldrb	r3, [r7, #3]
 8009280:	4619      	mov	r1, r3
 8009282:	f7fc f87d 	bl	8005380 <USBD_LL_DataInStage>
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800929c:	4618      	mov	r0, r3
 800929e:	f7fc f991 	bl	80055c4 <USBD_LL_SOF>
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d001      	beq.n	80092c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092be:	f7f7 fb53 	bl	8000968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092c8:	7bfa      	ldrb	r2, [r7, #15]
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fc f93b 	bl	8005548 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fc f8e7 	bl	80054ac <USBD_LL_Reset>
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fc f936 	bl	8005568 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6812      	ldr	r2, [r2, #0]
 800930a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800930e:	f043 0301 	orr.w	r3, r3, #1
 8009312:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800931c:	4b04      	ldr	r3, [pc, #16]	; (8009330 <HAL_PCD_SuspendCallback+0x48>)
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	4a03      	ldr	r2, [pc, #12]	; (8009330 <HAL_PCD_SuspendCallback+0x48>)
 8009322:	f043 0306 	orr.w	r3, r3, #6
 8009326:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	e000ed00 	.word	0xe000ed00

08009334 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009342:	4618      	mov	r0, r3
 8009344:	f7fc f926 	bl	8005594 <USBD_LL_Resume>
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7fc f974 	bl	8005654 <USBD_LL_IsoOUTIncomplete>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f7fc f93c 	bl	8005608 <USBD_LL_IsoINIncomplete>
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fc f97a 	bl	80056a0 <USBD_LL_DevConnected>
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fc f977 	bl	80056b6 <USBD_LL_DevDisconnected>
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d13c      	bne.n	800945a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093e0:	4a20      	ldr	r2, [pc, #128]	; (8009464 <USBD_LL_Init+0x94>)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a1e      	ldr	r2, [pc, #120]	; (8009464 <USBD_LL_Init+0x94>)
 80093ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093f0:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <USBD_LL_Init+0x94>)
 80093f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093f8:	4b1a      	ldr	r3, [pc, #104]	; (8009464 <USBD_LL_Init+0x94>)
 80093fa:	2204      	movs	r2, #4
 80093fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093fe:	4b19      	ldr	r3, [pc, #100]	; (8009464 <USBD_LL_Init+0x94>)
 8009400:	2202      	movs	r2, #2
 8009402:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009404:	4b17      	ldr	r3, [pc, #92]	; (8009464 <USBD_LL_Init+0x94>)
 8009406:	2200      	movs	r2, #0
 8009408:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800940a:	4b16      	ldr	r3, [pc, #88]	; (8009464 <USBD_LL_Init+0x94>)
 800940c:	2202      	movs	r2, #2
 800940e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009410:	4b14      	ldr	r3, [pc, #80]	; (8009464 <USBD_LL_Init+0x94>)
 8009412:	2200      	movs	r2, #0
 8009414:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <USBD_LL_Init+0x94>)
 8009418:	2200      	movs	r2, #0
 800941a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800941c:	4b11      	ldr	r3, [pc, #68]	; (8009464 <USBD_LL_Init+0x94>)
 800941e:	2200      	movs	r2, #0
 8009420:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <USBD_LL_Init+0x94>)
 8009424:	2200      	movs	r2, #0
 8009426:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009428:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <USBD_LL_Init+0x94>)
 800942a:	2200      	movs	r2, #0
 800942c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800942e:	480d      	ldr	r0, [pc, #52]	; (8009464 <USBD_LL_Init+0x94>)
 8009430:	f7f7 ff32 	bl	8001298 <HAL_PCD_Init>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800943a:	f7f7 fa95 	bl	8000968 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800943e:	2180      	movs	r1, #128	; 0x80
 8009440:	4808      	ldr	r0, [pc, #32]	; (8009464 <USBD_LL_Init+0x94>)
 8009442:	f7f9 f890 	bl	8002566 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009446:	2240      	movs	r2, #64	; 0x40
 8009448:	2100      	movs	r1, #0
 800944a:	4806      	ldr	r0, [pc, #24]	; (8009464 <USBD_LL_Init+0x94>)
 800944c:	f7f9 f844 	bl	80024d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009450:	2280      	movs	r2, #128	; 0x80
 8009452:	2101      	movs	r1, #1
 8009454:	4803      	ldr	r0, [pc, #12]	; (8009464 <USBD_LL_Init+0x94>)
 8009456:	f7f9 f83f 	bl	80024d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	2000572c 	.word	0x2000572c

08009468 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800947e:	4618      	mov	r0, r3
 8009480:	f7f8 f827 	bl	80014d2 <HAL_PCD_Start>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 f942 	bl	8009714 <USBD_Get_USB_Status>
 8009490:	4603      	mov	r3, r0
 8009492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009494:	7bbb      	ldrb	r3, [r7, #14]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	4608      	mov	r0, r1
 80094a8:	4611      	mov	r1, r2
 80094aa:	461a      	mov	r2, r3
 80094ac:	4603      	mov	r3, r0
 80094ae:	70fb      	strb	r3, [r7, #3]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70bb      	strb	r3, [r7, #2]
 80094b4:	4613      	mov	r3, r2
 80094b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094c6:	78bb      	ldrb	r3, [r7, #2]
 80094c8:	883a      	ldrh	r2, [r7, #0]
 80094ca:	78f9      	ldrb	r1, [r7, #3]
 80094cc:	f7f8 fc0b 	bl	8001ce6 <HAL_PCD_EP_Open>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f91c 	bl	8009714 <USBD_Get_USB_Status>
 80094dc:	4603      	mov	r3, r0
 80094de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009504:	78fa      	ldrb	r2, [r7, #3]
 8009506:	4611      	mov	r1, r2
 8009508:	4618      	mov	r0, r3
 800950a:	f7f8 fc54 	bl	8001db6 <HAL_PCD_EP_Close>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	4618      	mov	r0, r3
 8009516:	f000 f8fd 	bl	8009714 <USBD_Get_USB_Status>
 800951a:	4603      	mov	r3, r0
 800951c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800951e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009542:	78fa      	ldrb	r2, [r7, #3]
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f7f8 fd2c 	bl	8001fa4 <HAL_PCD_EP_SetStall>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 f8de 	bl	8009714 <USBD_Get_USB_Status>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955c:	7bbb      	ldrb	r3, [r7, #14]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f7f8 fd71 	bl	800206c <HAL_PCD_EP_ClrStall>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f8bf 	bl	8009714 <USBD_Get_USB_Status>
 8009596:	4603      	mov	r3, r0
 8009598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959a:	7bbb      	ldrb	r3, [r7, #14]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	da0b      	bge.n	80095d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095c6:	68f9      	ldr	r1, [r7, #12]
 80095c8:	4613      	mov	r3, r2
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	333e      	adds	r3, #62	; 0x3e
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	e00b      	b.n	80095f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095de:	68f9      	ldr	r1, [r7, #12]
 80095e0:	4613      	mov	r3, r2
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f7f8 fb3e 	bl	8001c9c <HAL_PCD_SetAddress>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f874 	bl	8009714 <USBD_Get_USB_Status>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009630:	7bbb      	ldrb	r3, [r7, #14]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
 8009646:	460b      	mov	r3, r1
 8009648:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009658:	7af9      	ldrb	r1, [r7, #11]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	f7f8 fc57 	bl	8001f10 <HAL_PCD_EP_Transmit>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	4618      	mov	r0, r3
 800966a:	f000 f853 	bl	8009714 <USBD_Get_USB_Status>
 800966e:	4603      	mov	r3, r0
 8009670:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009672:	7dbb      	ldrb	r3, [r7, #22]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	460b      	mov	r3, r1
 800968a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800969a:	7af9      	ldrb	r1, [r7, #11]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	f7f8 fbd3 	bl	8001e4a <HAL_PCD_EP_Receive>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 f832 	bl	8009714 <USBD_Get_USB_Status>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096d0:	78fa      	ldrb	r2, [r7, #3]
 80096d2:	4611      	mov	r1, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7f8 fc03 	bl	8001ee0 <HAL_PCD_EP_GetRxCount>
 80096da:	4603      	mov	r3, r0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096ec:	4b03      	ldr	r3, [pc, #12]	; (80096fc <USBD_static_malloc+0x18>)
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	20005b34 	.word	0x20005b34

08009700 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]

}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	2b03      	cmp	r3, #3
 8009726:	d817      	bhi.n	8009758 <USBD_Get_USB_Status+0x44>
 8009728:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <USBD_Get_USB_Status+0x1c>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	08009741 	.word	0x08009741
 8009734:	08009747 	.word	0x08009747
 8009738:	0800974d 	.word	0x0800974d
 800973c:	08009753 	.word	0x08009753
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
    break;
 8009744:	e00b      	b.n	800975e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009746:	2303      	movs	r3, #3
 8009748:	73fb      	strb	r3, [r7, #15]
    break;
 800974a:	e008      	b.n	800975e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	e005      	b.n	800975e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009752:	2303      	movs	r3, #3
 8009754:	73fb      	strb	r3, [r7, #15]
    break;
 8009756:	e002      	b.n	800975e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009758:	2303      	movs	r3, #3
 800975a:	73fb      	strb	r3, [r7, #15]
    break;
 800975c:	bf00      	nop
  }
  return usb_status;
 800975e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <std>:
 800976c:	2300      	movs	r3, #0
 800976e:	b510      	push	{r4, lr}
 8009770:	4604      	mov	r4, r0
 8009772:	e9c0 3300 	strd	r3, r3, [r0]
 8009776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800977a:	6083      	str	r3, [r0, #8]
 800977c:	8181      	strh	r1, [r0, #12]
 800977e:	6643      	str	r3, [r0, #100]	; 0x64
 8009780:	81c2      	strh	r2, [r0, #14]
 8009782:	6183      	str	r3, [r0, #24]
 8009784:	4619      	mov	r1, r3
 8009786:	2208      	movs	r2, #8
 8009788:	305c      	adds	r0, #92	; 0x5c
 800978a:	f000 f90e 	bl	80099aa <memset>
 800978e:	4b0d      	ldr	r3, [pc, #52]	; (80097c4 <std+0x58>)
 8009790:	6263      	str	r3, [r4, #36]	; 0x24
 8009792:	4b0d      	ldr	r3, [pc, #52]	; (80097c8 <std+0x5c>)
 8009794:	62a3      	str	r3, [r4, #40]	; 0x28
 8009796:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <std+0x60>)
 8009798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800979a:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <std+0x64>)
 800979c:	6323      	str	r3, [r4, #48]	; 0x30
 800979e:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <std+0x68>)
 80097a0:	6224      	str	r4, [r4, #32]
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d006      	beq.n	80097b4 <std+0x48>
 80097a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097aa:	4294      	cmp	r4, r2
 80097ac:	d002      	beq.n	80097b4 <std+0x48>
 80097ae:	33d0      	adds	r3, #208	; 0xd0
 80097b0:	429c      	cmp	r4, r3
 80097b2:	d105      	bne.n	80097c0 <std+0x54>
 80097b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097bc:	f000 b9c4 	b.w	8009b48 <__retarget_lock_init_recursive>
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	bf00      	nop
 80097c4:	08009925 	.word	0x08009925
 80097c8:	08009947 	.word	0x08009947
 80097cc:	0800997f 	.word	0x0800997f
 80097d0:	080099a3 	.word	0x080099a3
 80097d4:	20005d54 	.word	0x20005d54

080097d8 <stdio_exit_handler>:
 80097d8:	4a02      	ldr	r2, [pc, #8]	; (80097e4 <stdio_exit_handler+0xc>)
 80097da:	4903      	ldr	r1, [pc, #12]	; (80097e8 <stdio_exit_handler+0x10>)
 80097dc:	4803      	ldr	r0, [pc, #12]	; (80097ec <stdio_exit_handler+0x14>)
 80097de:	f000 b869 	b.w	80098b4 <_fwalk_sglue>
 80097e2:	bf00      	nop
 80097e4:	20000184 	.word	0x20000184
 80097e8:	0800a411 	.word	0x0800a411
 80097ec:	20000190 	.word	0x20000190

080097f0 <cleanup_stdio>:
 80097f0:	6841      	ldr	r1, [r0, #4]
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <cleanup_stdio+0x34>)
 80097f4:	4299      	cmp	r1, r3
 80097f6:	b510      	push	{r4, lr}
 80097f8:	4604      	mov	r4, r0
 80097fa:	d001      	beq.n	8009800 <cleanup_stdio+0x10>
 80097fc:	f000 fe08 	bl	800a410 <_fflush_r>
 8009800:	68a1      	ldr	r1, [r4, #8]
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <cleanup_stdio+0x38>)
 8009804:	4299      	cmp	r1, r3
 8009806:	d002      	beq.n	800980e <cleanup_stdio+0x1e>
 8009808:	4620      	mov	r0, r4
 800980a:	f000 fe01 	bl	800a410 <_fflush_r>
 800980e:	68e1      	ldr	r1, [r4, #12]
 8009810:	4b06      	ldr	r3, [pc, #24]	; (800982c <cleanup_stdio+0x3c>)
 8009812:	4299      	cmp	r1, r3
 8009814:	d004      	beq.n	8009820 <cleanup_stdio+0x30>
 8009816:	4620      	mov	r0, r4
 8009818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800981c:	f000 bdf8 	b.w	800a410 <_fflush_r>
 8009820:	bd10      	pop	{r4, pc}
 8009822:	bf00      	nop
 8009824:	20005d54 	.word	0x20005d54
 8009828:	20005dbc 	.word	0x20005dbc
 800982c:	20005e24 	.word	0x20005e24

08009830 <global_stdio_init.part.0>:
 8009830:	b510      	push	{r4, lr}
 8009832:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <global_stdio_init.part.0+0x30>)
 8009834:	4c0b      	ldr	r4, [pc, #44]	; (8009864 <global_stdio_init.part.0+0x34>)
 8009836:	4a0c      	ldr	r2, [pc, #48]	; (8009868 <global_stdio_init.part.0+0x38>)
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	4620      	mov	r0, r4
 800983c:	2200      	movs	r2, #0
 800983e:	2104      	movs	r1, #4
 8009840:	f7ff ff94 	bl	800976c <std>
 8009844:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009848:	2201      	movs	r2, #1
 800984a:	2109      	movs	r1, #9
 800984c:	f7ff ff8e 	bl	800976c <std>
 8009850:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009854:	2202      	movs	r2, #2
 8009856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800985a:	2112      	movs	r1, #18
 800985c:	f7ff bf86 	b.w	800976c <std>
 8009860:	20005e8c 	.word	0x20005e8c
 8009864:	20005d54 	.word	0x20005d54
 8009868:	080097d9 	.word	0x080097d9

0800986c <__sfp_lock_acquire>:
 800986c:	4801      	ldr	r0, [pc, #4]	; (8009874 <__sfp_lock_acquire+0x8>)
 800986e:	f000 b96c 	b.w	8009b4a <__retarget_lock_acquire_recursive>
 8009872:	bf00      	nop
 8009874:	20005e95 	.word	0x20005e95

08009878 <__sfp_lock_release>:
 8009878:	4801      	ldr	r0, [pc, #4]	; (8009880 <__sfp_lock_release+0x8>)
 800987a:	f000 b967 	b.w	8009b4c <__retarget_lock_release_recursive>
 800987e:	bf00      	nop
 8009880:	20005e95 	.word	0x20005e95

08009884 <__sinit>:
 8009884:	b510      	push	{r4, lr}
 8009886:	4604      	mov	r4, r0
 8009888:	f7ff fff0 	bl	800986c <__sfp_lock_acquire>
 800988c:	6a23      	ldr	r3, [r4, #32]
 800988e:	b11b      	cbz	r3, 8009898 <__sinit+0x14>
 8009890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009894:	f7ff bff0 	b.w	8009878 <__sfp_lock_release>
 8009898:	4b04      	ldr	r3, [pc, #16]	; (80098ac <__sinit+0x28>)
 800989a:	6223      	str	r3, [r4, #32]
 800989c:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <__sinit+0x2c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1f5      	bne.n	8009890 <__sinit+0xc>
 80098a4:	f7ff ffc4 	bl	8009830 <global_stdio_init.part.0>
 80098a8:	e7f2      	b.n	8009890 <__sinit+0xc>
 80098aa:	bf00      	nop
 80098ac:	080097f1 	.word	0x080097f1
 80098b0:	20005e8c 	.word	0x20005e8c

080098b4 <_fwalk_sglue>:
 80098b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b8:	4607      	mov	r7, r0
 80098ba:	4688      	mov	r8, r1
 80098bc:	4614      	mov	r4, r2
 80098be:	2600      	movs	r6, #0
 80098c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098c4:	f1b9 0901 	subs.w	r9, r9, #1
 80098c8:	d505      	bpl.n	80098d6 <_fwalk_sglue+0x22>
 80098ca:	6824      	ldr	r4, [r4, #0]
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	d1f7      	bne.n	80098c0 <_fwalk_sglue+0xc>
 80098d0:	4630      	mov	r0, r6
 80098d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d907      	bls.n	80098ec <_fwalk_sglue+0x38>
 80098dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098e0:	3301      	adds	r3, #1
 80098e2:	d003      	beq.n	80098ec <_fwalk_sglue+0x38>
 80098e4:	4629      	mov	r1, r5
 80098e6:	4638      	mov	r0, r7
 80098e8:	47c0      	blx	r8
 80098ea:	4306      	orrs	r6, r0
 80098ec:	3568      	adds	r5, #104	; 0x68
 80098ee:	e7e9      	b.n	80098c4 <_fwalk_sglue+0x10>

080098f0 <iprintf>:
 80098f0:	b40f      	push	{r0, r1, r2, r3}
 80098f2:	b507      	push	{r0, r1, r2, lr}
 80098f4:	4906      	ldr	r1, [pc, #24]	; (8009910 <iprintf+0x20>)
 80098f6:	ab04      	add	r3, sp, #16
 80098f8:	6808      	ldr	r0, [r1, #0]
 80098fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fe:	6881      	ldr	r1, [r0, #8]
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	f000 fa55 	bl	8009db0 <_vfiprintf_r>
 8009906:	b003      	add	sp, #12
 8009908:	f85d eb04 	ldr.w	lr, [sp], #4
 800990c:	b004      	add	sp, #16
 800990e:	4770      	bx	lr
 8009910:	200001dc 	.word	0x200001dc

08009914 <putchar>:
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <putchar+0xc>)
 8009916:	4601      	mov	r1, r0
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	6882      	ldr	r2, [r0, #8]
 800991c:	f000 bda0 	b.w	800a460 <_putc_r>
 8009920:	200001dc 	.word	0x200001dc

08009924 <__sread>:
 8009924:	b510      	push	{r4, lr}
 8009926:	460c      	mov	r4, r1
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	f000 f8be 	bl	8009aac <_read_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	bfab      	itete	ge
 8009934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009936:	89a3      	ldrhlt	r3, [r4, #12]
 8009938:	181b      	addge	r3, r3, r0
 800993a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800993e:	bfac      	ite	ge
 8009940:	6563      	strge	r3, [r4, #84]	; 0x54
 8009942:	81a3      	strhlt	r3, [r4, #12]
 8009944:	bd10      	pop	{r4, pc}

08009946 <__swrite>:
 8009946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	461f      	mov	r7, r3
 800994c:	898b      	ldrh	r3, [r1, #12]
 800994e:	05db      	lsls	r3, r3, #23
 8009950:	4605      	mov	r5, r0
 8009952:	460c      	mov	r4, r1
 8009954:	4616      	mov	r6, r2
 8009956:	d505      	bpl.n	8009964 <__swrite+0x1e>
 8009958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995c:	2302      	movs	r3, #2
 800995e:	2200      	movs	r2, #0
 8009960:	f000 f892 	bl	8009a88 <_lseek_r>
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800996a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	4628      	mov	r0, r5
 8009976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800997a:	f000 b8a9 	b.w	8009ad0 <_write_r>

0800997e <__sseek>:
 800997e:	b510      	push	{r4, lr}
 8009980:	460c      	mov	r4, r1
 8009982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009986:	f000 f87f 	bl	8009a88 <_lseek_r>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	bf15      	itete	ne
 8009990:	6560      	strne	r0, [r4, #84]	; 0x54
 8009992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800999a:	81a3      	strheq	r3, [r4, #12]
 800999c:	bf18      	it	ne
 800999e:	81a3      	strhne	r3, [r4, #12]
 80099a0:	bd10      	pop	{r4, pc}

080099a2 <__sclose>:
 80099a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a6:	f000 b809 	b.w	80099bc <_close_r>

080099aa <memset>:
 80099aa:	4402      	add	r2, r0
 80099ac:	4603      	mov	r3, r0
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d100      	bne.n	80099b4 <memset+0xa>
 80099b2:	4770      	bx	lr
 80099b4:	f803 1b01 	strb.w	r1, [r3], #1
 80099b8:	e7f9      	b.n	80099ae <memset+0x4>
	...

080099bc <_close_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d06      	ldr	r5, [pc, #24]	; (80099d8 <_close_r+0x1c>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	f7f7 f8a7 	bl	8000b1a <_close>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_close_r+0x1a>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_close_r+0x1a>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20005e90 	.word	0x20005e90

080099dc <_reclaim_reent>:
 80099dc:	4b29      	ldr	r3, [pc, #164]	; (8009a84 <_reclaim_reent+0xa8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4283      	cmp	r3, r0
 80099e2:	b570      	push	{r4, r5, r6, lr}
 80099e4:	4604      	mov	r4, r0
 80099e6:	d04b      	beq.n	8009a80 <_reclaim_reent+0xa4>
 80099e8:	69c3      	ldr	r3, [r0, #28]
 80099ea:	b143      	cbz	r3, 80099fe <_reclaim_reent+0x22>
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d144      	bne.n	8009a7c <_reclaim_reent+0xa0>
 80099f2:	69e3      	ldr	r3, [r4, #28]
 80099f4:	6819      	ldr	r1, [r3, #0]
 80099f6:	b111      	cbz	r1, 80099fe <_reclaim_reent+0x22>
 80099f8:	4620      	mov	r0, r4
 80099fa:	f000 f8b7 	bl	8009b6c <_free_r>
 80099fe:	6961      	ldr	r1, [r4, #20]
 8009a00:	b111      	cbz	r1, 8009a08 <_reclaim_reent+0x2c>
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f8b2 	bl	8009b6c <_free_r>
 8009a08:	69e1      	ldr	r1, [r4, #28]
 8009a0a:	b111      	cbz	r1, 8009a12 <_reclaim_reent+0x36>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 f8ad 	bl	8009b6c <_free_r>
 8009a12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009a14:	b111      	cbz	r1, 8009a1c <_reclaim_reent+0x40>
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 f8a8 	bl	8009b6c <_free_r>
 8009a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a1e:	b111      	cbz	r1, 8009a26 <_reclaim_reent+0x4a>
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 f8a3 	bl	8009b6c <_free_r>
 8009a26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009a28:	b111      	cbz	r1, 8009a30 <_reclaim_reent+0x54>
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 f89e 	bl	8009b6c <_free_r>
 8009a30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a32:	b111      	cbz	r1, 8009a3a <_reclaim_reent+0x5e>
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 f899 	bl	8009b6c <_free_r>
 8009a3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a3c:	b111      	cbz	r1, 8009a44 <_reclaim_reent+0x68>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 f894 	bl	8009b6c <_free_r>
 8009a44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009a46:	b111      	cbz	r1, 8009a4e <_reclaim_reent+0x72>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 f88f 	bl	8009b6c <_free_r>
 8009a4e:	6a23      	ldr	r3, [r4, #32]
 8009a50:	b1b3      	cbz	r3, 8009a80 <_reclaim_reent+0xa4>
 8009a52:	4620      	mov	r0, r4
 8009a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a58:	4718      	bx	r3
 8009a5a:	5949      	ldr	r1, [r1, r5]
 8009a5c:	b941      	cbnz	r1, 8009a70 <_reclaim_reent+0x94>
 8009a5e:	3504      	adds	r5, #4
 8009a60:	69e3      	ldr	r3, [r4, #28]
 8009a62:	2d80      	cmp	r5, #128	; 0x80
 8009a64:	68d9      	ldr	r1, [r3, #12]
 8009a66:	d1f8      	bne.n	8009a5a <_reclaim_reent+0x7e>
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 f87f 	bl	8009b6c <_free_r>
 8009a6e:	e7c0      	b.n	80099f2 <_reclaim_reent+0x16>
 8009a70:	680e      	ldr	r6, [r1, #0]
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 f87a 	bl	8009b6c <_free_r>
 8009a78:	4631      	mov	r1, r6
 8009a7a:	e7ef      	b.n	8009a5c <_reclaim_reent+0x80>
 8009a7c:	2500      	movs	r5, #0
 8009a7e:	e7ef      	b.n	8009a60 <_reclaim_reent+0x84>
 8009a80:	bd70      	pop	{r4, r5, r6, pc}
 8009a82:	bf00      	nop
 8009a84:	200001dc 	.word	0x200001dc

08009a88 <_lseek_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d07      	ldr	r5, [pc, #28]	; (8009aa8 <_lseek_r+0x20>)
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	4608      	mov	r0, r1
 8009a90:	4611      	mov	r1, r2
 8009a92:	2200      	movs	r2, #0
 8009a94:	602a      	str	r2, [r5, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	f7f7 f866 	bl	8000b68 <_lseek>
 8009a9c:	1c43      	adds	r3, r0, #1
 8009a9e:	d102      	bne.n	8009aa6 <_lseek_r+0x1e>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	b103      	cbz	r3, 8009aa6 <_lseek_r+0x1e>
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	bd38      	pop	{r3, r4, r5, pc}
 8009aa8:	20005e90 	.word	0x20005e90

08009aac <_read_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_read_r+0x20>)
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7f7 f810 	bl	8000ae0 <_read>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_read_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_read_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20005e90 	.word	0x20005e90

08009ad0 <_write_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d07      	ldr	r5, [pc, #28]	; (8009af0 <_write_r+0x20>)
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	4608      	mov	r0, r1
 8009ad8:	4611      	mov	r1, r2
 8009ada:	2200      	movs	r2, #0
 8009adc:	602a      	str	r2, [r5, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f7f6 fd66 	bl	80005b0 <_write>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_write_r+0x1e>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_write_r+0x1e>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	20005e90 	.word	0x20005e90

08009af4 <__errno>:
 8009af4:	4b01      	ldr	r3, [pc, #4]	; (8009afc <__errno+0x8>)
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	200001dc 	.word	0x200001dc

08009b00 <__libc_init_array>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4d0d      	ldr	r5, [pc, #52]	; (8009b38 <__libc_init_array+0x38>)
 8009b04:	4c0d      	ldr	r4, [pc, #52]	; (8009b3c <__libc_init_array+0x3c>)
 8009b06:	1b64      	subs	r4, r4, r5
 8009b08:	10a4      	asrs	r4, r4, #2
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	42a6      	cmp	r6, r4
 8009b0e:	d109      	bne.n	8009b24 <__libc_init_array+0x24>
 8009b10:	4d0b      	ldr	r5, [pc, #44]	; (8009b40 <__libc_init_array+0x40>)
 8009b12:	4c0c      	ldr	r4, [pc, #48]	; (8009b44 <__libc_init_array+0x44>)
 8009b14:	f000 fe02 	bl	800a71c <_init>
 8009b18:	1b64      	subs	r4, r4, r5
 8009b1a:	10a4      	asrs	r4, r4, #2
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	42a6      	cmp	r6, r4
 8009b20:	d105      	bne.n	8009b2e <__libc_init_array+0x2e>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b28:	4798      	blx	r3
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7ee      	b.n	8009b0c <__libc_init_array+0xc>
 8009b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b32:	4798      	blx	r3
 8009b34:	3601      	adds	r6, #1
 8009b36:	e7f2      	b.n	8009b1e <__libc_init_array+0x1e>
 8009b38:	0800a858 	.word	0x0800a858
 8009b3c:	0800a858 	.word	0x0800a858
 8009b40:	0800a858 	.word	0x0800a858
 8009b44:	0800a85c 	.word	0x0800a85c

08009b48 <__retarget_lock_init_recursive>:
 8009b48:	4770      	bx	lr

08009b4a <__retarget_lock_acquire_recursive>:
 8009b4a:	4770      	bx	lr

08009b4c <__retarget_lock_release_recursive>:
 8009b4c:	4770      	bx	lr

08009b4e <memcpy>:
 8009b4e:	440a      	add	r2, r1
 8009b50:	4291      	cmp	r1, r2
 8009b52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b56:	d100      	bne.n	8009b5a <memcpy+0xc>
 8009b58:	4770      	bx	lr
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b64:	4291      	cmp	r1, r2
 8009b66:	d1f9      	bne.n	8009b5c <memcpy+0xe>
 8009b68:	bd10      	pop	{r4, pc}
	...

08009b6c <_free_r>:
 8009b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	d044      	beq.n	8009bfc <_free_r+0x90>
 8009b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b76:	9001      	str	r0, [sp, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b7e:	bfb8      	it	lt
 8009b80:	18e4      	addlt	r4, r4, r3
 8009b82:	f000 f8df 	bl	8009d44 <__malloc_lock>
 8009b86:	4a1e      	ldr	r2, [pc, #120]	; (8009c00 <_free_r+0x94>)
 8009b88:	9801      	ldr	r0, [sp, #4]
 8009b8a:	6813      	ldr	r3, [r2, #0]
 8009b8c:	b933      	cbnz	r3, 8009b9c <_free_r+0x30>
 8009b8e:	6063      	str	r3, [r4, #4]
 8009b90:	6014      	str	r4, [r2, #0]
 8009b92:	b003      	add	sp, #12
 8009b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b98:	f000 b8da 	b.w	8009d50 <__malloc_unlock>
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	d908      	bls.n	8009bb2 <_free_r+0x46>
 8009ba0:	6825      	ldr	r5, [r4, #0]
 8009ba2:	1961      	adds	r1, r4, r5
 8009ba4:	428b      	cmp	r3, r1
 8009ba6:	bf01      	itttt	eq
 8009ba8:	6819      	ldreq	r1, [r3, #0]
 8009baa:	685b      	ldreq	r3, [r3, #4]
 8009bac:	1949      	addeq	r1, r1, r5
 8009bae:	6021      	streq	r1, [r4, #0]
 8009bb0:	e7ed      	b.n	8009b8e <_free_r+0x22>
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	b10b      	cbz	r3, 8009bbc <_free_r+0x50>
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	d9fa      	bls.n	8009bb2 <_free_r+0x46>
 8009bbc:	6811      	ldr	r1, [r2, #0]
 8009bbe:	1855      	adds	r5, r2, r1
 8009bc0:	42a5      	cmp	r5, r4
 8009bc2:	d10b      	bne.n	8009bdc <_free_r+0x70>
 8009bc4:	6824      	ldr	r4, [r4, #0]
 8009bc6:	4421      	add	r1, r4
 8009bc8:	1854      	adds	r4, r2, r1
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	6011      	str	r1, [r2, #0]
 8009bce:	d1e0      	bne.n	8009b92 <_free_r+0x26>
 8009bd0:	681c      	ldr	r4, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	6053      	str	r3, [r2, #4]
 8009bd6:	440c      	add	r4, r1
 8009bd8:	6014      	str	r4, [r2, #0]
 8009bda:	e7da      	b.n	8009b92 <_free_r+0x26>
 8009bdc:	d902      	bls.n	8009be4 <_free_r+0x78>
 8009bde:	230c      	movs	r3, #12
 8009be0:	6003      	str	r3, [r0, #0]
 8009be2:	e7d6      	b.n	8009b92 <_free_r+0x26>
 8009be4:	6825      	ldr	r5, [r4, #0]
 8009be6:	1961      	adds	r1, r4, r5
 8009be8:	428b      	cmp	r3, r1
 8009bea:	bf04      	itt	eq
 8009bec:	6819      	ldreq	r1, [r3, #0]
 8009bee:	685b      	ldreq	r3, [r3, #4]
 8009bf0:	6063      	str	r3, [r4, #4]
 8009bf2:	bf04      	itt	eq
 8009bf4:	1949      	addeq	r1, r1, r5
 8009bf6:	6021      	streq	r1, [r4, #0]
 8009bf8:	6054      	str	r4, [r2, #4]
 8009bfa:	e7ca      	b.n	8009b92 <_free_r+0x26>
 8009bfc:	b003      	add	sp, #12
 8009bfe:	bd30      	pop	{r4, r5, pc}
 8009c00:	20005e98 	.word	0x20005e98

08009c04 <sbrk_aligned>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	4e0e      	ldr	r6, [pc, #56]	; (8009c40 <sbrk_aligned+0x3c>)
 8009c08:	460c      	mov	r4, r1
 8009c0a:	6831      	ldr	r1, [r6, #0]
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	b911      	cbnz	r1, 8009c16 <sbrk_aligned+0x12>
 8009c10:	f000 fcf0 	bl	800a5f4 <_sbrk_r>
 8009c14:	6030      	str	r0, [r6, #0]
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f000 fceb 	bl	800a5f4 <_sbrk_r>
 8009c1e:	1c43      	adds	r3, r0, #1
 8009c20:	d00a      	beq.n	8009c38 <sbrk_aligned+0x34>
 8009c22:	1cc4      	adds	r4, r0, #3
 8009c24:	f024 0403 	bic.w	r4, r4, #3
 8009c28:	42a0      	cmp	r0, r4
 8009c2a:	d007      	beq.n	8009c3c <sbrk_aligned+0x38>
 8009c2c:	1a21      	subs	r1, r4, r0
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 fce0 	bl	800a5f4 <_sbrk_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d101      	bne.n	8009c3c <sbrk_aligned+0x38>
 8009c38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	20005e9c 	.word	0x20005e9c

08009c44 <_malloc_r>:
 8009c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c48:	1ccd      	adds	r5, r1, #3
 8009c4a:	f025 0503 	bic.w	r5, r5, #3
 8009c4e:	3508      	adds	r5, #8
 8009c50:	2d0c      	cmp	r5, #12
 8009c52:	bf38      	it	cc
 8009c54:	250c      	movcc	r5, #12
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	4607      	mov	r7, r0
 8009c5a:	db01      	blt.n	8009c60 <_malloc_r+0x1c>
 8009c5c:	42a9      	cmp	r1, r5
 8009c5e:	d905      	bls.n	8009c6c <_malloc_r+0x28>
 8009c60:	230c      	movs	r3, #12
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	2600      	movs	r6, #0
 8009c66:	4630      	mov	r0, r6
 8009c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d40 <_malloc_r+0xfc>
 8009c70:	f000 f868 	bl	8009d44 <__malloc_lock>
 8009c74:	f8d8 3000 	ldr.w	r3, [r8]
 8009c78:	461c      	mov	r4, r3
 8009c7a:	bb5c      	cbnz	r4, 8009cd4 <_malloc_r+0x90>
 8009c7c:	4629      	mov	r1, r5
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7ff ffc0 	bl	8009c04 <sbrk_aligned>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	4604      	mov	r4, r0
 8009c88:	d155      	bne.n	8009d36 <_malloc_r+0xf2>
 8009c8a:	f8d8 4000 	ldr.w	r4, [r8]
 8009c8e:	4626      	mov	r6, r4
 8009c90:	2e00      	cmp	r6, #0
 8009c92:	d145      	bne.n	8009d20 <_malloc_r+0xdc>
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d048      	beq.n	8009d2a <_malloc_r+0xe6>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	eb04 0903 	add.w	r9, r4, r3
 8009ca2:	f000 fca7 	bl	800a5f4 <_sbrk_r>
 8009ca6:	4581      	cmp	r9, r0
 8009ca8:	d13f      	bne.n	8009d2a <_malloc_r+0xe6>
 8009caa:	6821      	ldr	r1, [r4, #0]
 8009cac:	1a6d      	subs	r5, r5, r1
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f7ff ffa7 	bl	8009c04 <sbrk_aligned>
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d037      	beq.n	8009d2a <_malloc_r+0xe6>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	442b      	add	r3, r5
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d038      	beq.n	8009d3a <_malloc_r+0xf6>
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	42a2      	cmp	r2, r4
 8009ccc:	d12b      	bne.n	8009d26 <_malloc_r+0xe2>
 8009cce:	2200      	movs	r2, #0
 8009cd0:	605a      	str	r2, [r3, #4]
 8009cd2:	e00f      	b.n	8009cf4 <_malloc_r+0xb0>
 8009cd4:	6822      	ldr	r2, [r4, #0]
 8009cd6:	1b52      	subs	r2, r2, r5
 8009cd8:	d41f      	bmi.n	8009d1a <_malloc_r+0xd6>
 8009cda:	2a0b      	cmp	r2, #11
 8009cdc:	d917      	bls.n	8009d0e <_malloc_r+0xca>
 8009cde:	1961      	adds	r1, r4, r5
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	6025      	str	r5, [r4, #0]
 8009ce4:	bf18      	it	ne
 8009ce6:	6059      	strne	r1, [r3, #4]
 8009ce8:	6863      	ldr	r3, [r4, #4]
 8009cea:	bf08      	it	eq
 8009cec:	f8c8 1000 	streq.w	r1, [r8]
 8009cf0:	5162      	str	r2, [r4, r5]
 8009cf2:	604b      	str	r3, [r1, #4]
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	f104 060b 	add.w	r6, r4, #11
 8009cfa:	f000 f829 	bl	8009d50 <__malloc_unlock>
 8009cfe:	f026 0607 	bic.w	r6, r6, #7
 8009d02:	1d23      	adds	r3, r4, #4
 8009d04:	1af2      	subs	r2, r6, r3
 8009d06:	d0ae      	beq.n	8009c66 <_malloc_r+0x22>
 8009d08:	1b9b      	subs	r3, r3, r6
 8009d0a:	50a3      	str	r3, [r4, r2]
 8009d0c:	e7ab      	b.n	8009c66 <_malloc_r+0x22>
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	6862      	ldr	r2, [r4, #4]
 8009d12:	d1dd      	bne.n	8009cd0 <_malloc_r+0x8c>
 8009d14:	f8c8 2000 	str.w	r2, [r8]
 8009d18:	e7ec      	b.n	8009cf4 <_malloc_r+0xb0>
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	6864      	ldr	r4, [r4, #4]
 8009d1e:	e7ac      	b.n	8009c7a <_malloc_r+0x36>
 8009d20:	4634      	mov	r4, r6
 8009d22:	6876      	ldr	r6, [r6, #4]
 8009d24:	e7b4      	b.n	8009c90 <_malloc_r+0x4c>
 8009d26:	4613      	mov	r3, r2
 8009d28:	e7cc      	b.n	8009cc4 <_malloc_r+0x80>
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	603b      	str	r3, [r7, #0]
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f000 f80e 	bl	8009d50 <__malloc_unlock>
 8009d34:	e797      	b.n	8009c66 <_malloc_r+0x22>
 8009d36:	6025      	str	r5, [r4, #0]
 8009d38:	e7dc      	b.n	8009cf4 <_malloc_r+0xb0>
 8009d3a:	605b      	str	r3, [r3, #4]
 8009d3c:	deff      	udf	#255	; 0xff
 8009d3e:	bf00      	nop
 8009d40:	20005e98 	.word	0x20005e98

08009d44 <__malloc_lock>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__malloc_lock+0x8>)
 8009d46:	f7ff bf00 	b.w	8009b4a <__retarget_lock_acquire_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	20005e94 	.word	0x20005e94

08009d50 <__malloc_unlock>:
 8009d50:	4801      	ldr	r0, [pc, #4]	; (8009d58 <__malloc_unlock+0x8>)
 8009d52:	f7ff befb 	b.w	8009b4c <__retarget_lock_release_recursive>
 8009d56:	bf00      	nop
 8009d58:	20005e94 	.word	0x20005e94

08009d5c <__sfputc_r>:
 8009d5c:	6893      	ldr	r3, [r2, #8]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	b410      	push	{r4}
 8009d64:	6093      	str	r3, [r2, #8]
 8009d66:	da08      	bge.n	8009d7a <__sfputc_r+0x1e>
 8009d68:	6994      	ldr	r4, [r2, #24]
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	db01      	blt.n	8009d72 <__sfputc_r+0x16>
 8009d6e:	290a      	cmp	r1, #10
 8009d70:	d103      	bne.n	8009d7a <__sfputc_r+0x1e>
 8009d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d76:	f000 bba7 	b.w	800a4c8 <__swbuf_r>
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	1c58      	adds	r0, r3, #1
 8009d7e:	6010      	str	r0, [r2, #0]
 8009d80:	7019      	strb	r1, [r3, #0]
 8009d82:	4608      	mov	r0, r1
 8009d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <__sfputs_r>:
 8009d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	4614      	mov	r4, r2
 8009d92:	18d5      	adds	r5, r2, r3
 8009d94:	42ac      	cmp	r4, r5
 8009d96:	d101      	bne.n	8009d9c <__sfputs_r+0x12>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e007      	b.n	8009dac <__sfputs_r+0x22>
 8009d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da0:	463a      	mov	r2, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ffda 	bl	8009d5c <__sfputc_r>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d1f3      	bne.n	8009d94 <__sfputs_r+0xa>
 8009dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009db0 <_vfiprintf_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	460d      	mov	r5, r1
 8009db6:	b09d      	sub	sp, #116	; 0x74
 8009db8:	4614      	mov	r4, r2
 8009dba:	4698      	mov	r8, r3
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	b118      	cbz	r0, 8009dc8 <_vfiprintf_r+0x18>
 8009dc0:	6a03      	ldr	r3, [r0, #32]
 8009dc2:	b90b      	cbnz	r3, 8009dc8 <_vfiprintf_r+0x18>
 8009dc4:	f7ff fd5e 	bl	8009884 <__sinit>
 8009dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dca:	07d9      	lsls	r1, r3, #31
 8009dcc:	d405      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dce:	89ab      	ldrh	r3, [r5, #12]
 8009dd0:	059a      	lsls	r2, r3, #22
 8009dd2:	d402      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dd6:	f7ff feb8 	bl	8009b4a <__retarget_lock_acquire_recursive>
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	071b      	lsls	r3, r3, #28
 8009dde:	d501      	bpl.n	8009de4 <_vfiprintf_r+0x34>
 8009de0:	692b      	ldr	r3, [r5, #16]
 8009de2:	b99b      	cbnz	r3, 8009e0c <_vfiprintf_r+0x5c>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4630      	mov	r0, r6
 8009de8:	f000 fbac 	bl	800a544 <__swsetup_r>
 8009dec:	b170      	cbz	r0, 8009e0c <_vfiprintf_r+0x5c>
 8009dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009df0:	07dc      	lsls	r4, r3, #31
 8009df2:	d504      	bpl.n	8009dfe <_vfiprintf_r+0x4e>
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df8:	b01d      	add	sp, #116	; 0x74
 8009dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	0598      	lsls	r0, r3, #22
 8009e02:	d4f7      	bmi.n	8009df4 <_vfiprintf_r+0x44>
 8009e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e06:	f7ff fea1 	bl	8009b4c <__retarget_lock_release_recursive>
 8009e0a:	e7f3      	b.n	8009df4 <_vfiprintf_r+0x44>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e10:	2320      	movs	r3, #32
 8009e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e1a:	2330      	movs	r3, #48	; 0x30
 8009e1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009fd0 <_vfiprintf_r+0x220>
 8009e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e24:	f04f 0901 	mov.w	r9, #1
 8009e28:	4623      	mov	r3, r4
 8009e2a:	469a      	mov	sl, r3
 8009e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e30:	b10a      	cbz	r2, 8009e36 <_vfiprintf_r+0x86>
 8009e32:	2a25      	cmp	r2, #37	; 0x25
 8009e34:	d1f9      	bne.n	8009e2a <_vfiprintf_r+0x7a>
 8009e36:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3a:	d00b      	beq.n	8009e54 <_vfiprintf_r+0xa4>
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4629      	mov	r1, r5
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7ff ffa1 	bl	8009d8a <__sfputs_r>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	f000 80a9 	beq.w	8009fa0 <_vfiprintf_r+0x1f0>
 8009e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e50:	445a      	add	r2, fp
 8009e52:	9209      	str	r2, [sp, #36]	; 0x24
 8009e54:	f89a 3000 	ldrb.w	r3, [sl]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 80a1 	beq.w	8009fa0 <_vfiprintf_r+0x1f0>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e68:	f10a 0a01 	add.w	sl, sl, #1
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	9307      	str	r3, [sp, #28]
 8009e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e74:	931a      	str	r3, [sp, #104]	; 0x68
 8009e76:	4654      	mov	r4, sl
 8009e78:	2205      	movs	r2, #5
 8009e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7e:	4854      	ldr	r0, [pc, #336]	; (8009fd0 <_vfiprintf_r+0x220>)
 8009e80:	f7f6 f9ae 	bl	80001e0 <memchr>
 8009e84:	9a04      	ldr	r2, [sp, #16]
 8009e86:	b9d8      	cbnz	r0, 8009ec0 <_vfiprintf_r+0x110>
 8009e88:	06d1      	lsls	r1, r2, #27
 8009e8a:	bf44      	itt	mi
 8009e8c:	2320      	movmi	r3, #32
 8009e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e92:	0713      	lsls	r3, r2, #28
 8009e94:	bf44      	itt	mi
 8009e96:	232b      	movmi	r3, #43	; 0x2b
 8009e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea2:	d015      	beq.n	8009ed0 <_vfiprintf_r+0x120>
 8009ea4:	9a07      	ldr	r2, [sp, #28]
 8009ea6:	4654      	mov	r4, sl
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f04f 0c0a 	mov.w	ip, #10
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb4:	3b30      	subs	r3, #48	; 0x30
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d94d      	bls.n	8009f56 <_vfiprintf_r+0x1a6>
 8009eba:	b1b0      	cbz	r0, 8009eea <_vfiprintf_r+0x13a>
 8009ebc:	9207      	str	r2, [sp, #28]
 8009ebe:	e014      	b.n	8009eea <_vfiprintf_r+0x13a>
 8009ec0:	eba0 0308 	sub.w	r3, r0, r8
 8009ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	46a2      	mov	sl, r4
 8009ece:	e7d2      	b.n	8009e76 <_vfiprintf_r+0xc6>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	1d19      	adds	r1, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	9103      	str	r1, [sp, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bfbb      	ittet	lt
 8009edc:	425b      	neglt	r3, r3
 8009ede:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee2:	9307      	strge	r3, [sp, #28]
 8009ee4:	9307      	strlt	r3, [sp, #28]
 8009ee6:	bfb8      	it	lt
 8009ee8:	9204      	strlt	r2, [sp, #16]
 8009eea:	7823      	ldrb	r3, [r4, #0]
 8009eec:	2b2e      	cmp	r3, #46	; 0x2e
 8009eee:	d10c      	bne.n	8009f0a <_vfiprintf_r+0x15a>
 8009ef0:	7863      	ldrb	r3, [r4, #1]
 8009ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef4:	d134      	bne.n	8009f60 <_vfiprintf_r+0x1b0>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	9203      	str	r2, [sp, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	bfb8      	it	lt
 8009f02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f06:	3402      	adds	r4, #2
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009fe0 <_vfiprintf_r+0x230>
 8009f0e:	7821      	ldrb	r1, [r4, #0]
 8009f10:	2203      	movs	r2, #3
 8009f12:	4650      	mov	r0, sl
 8009f14:	f7f6 f964 	bl	80001e0 <memchr>
 8009f18:	b138      	cbz	r0, 8009f2a <_vfiprintf_r+0x17a>
 8009f1a:	9b04      	ldr	r3, [sp, #16]
 8009f1c:	eba0 000a 	sub.w	r0, r0, sl
 8009f20:	2240      	movs	r2, #64	; 0x40
 8009f22:	4082      	lsls	r2, r0
 8009f24:	4313      	orrs	r3, r2
 8009f26:	3401      	adds	r4, #1
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2e:	4829      	ldr	r0, [pc, #164]	; (8009fd4 <_vfiprintf_r+0x224>)
 8009f30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f34:	2206      	movs	r2, #6
 8009f36:	f7f6 f953 	bl	80001e0 <memchr>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d03f      	beq.n	8009fbe <_vfiprintf_r+0x20e>
 8009f3e:	4b26      	ldr	r3, [pc, #152]	; (8009fd8 <_vfiprintf_r+0x228>)
 8009f40:	bb1b      	cbnz	r3, 8009f8a <_vfiprintf_r+0x1da>
 8009f42:	9b03      	ldr	r3, [sp, #12]
 8009f44:	3307      	adds	r3, #7
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	9303      	str	r3, [sp, #12]
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	443b      	add	r3, r7
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	e768      	b.n	8009e28 <_vfiprintf_r+0x78>
 8009f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	e7a6      	b.n	8009eae <_vfiprintf_r+0xfe>
 8009f60:	2300      	movs	r3, #0
 8009f62:	3401      	adds	r4, #1
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	4619      	mov	r1, r3
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f72:	3a30      	subs	r2, #48	; 0x30
 8009f74:	2a09      	cmp	r2, #9
 8009f76:	d903      	bls.n	8009f80 <_vfiprintf_r+0x1d0>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d0c6      	beq.n	8009f0a <_vfiprintf_r+0x15a>
 8009f7c:	9105      	str	r1, [sp, #20]
 8009f7e:	e7c4      	b.n	8009f0a <_vfiprintf_r+0x15a>
 8009f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f84:	4604      	mov	r4, r0
 8009f86:	2301      	movs	r3, #1
 8009f88:	e7f0      	b.n	8009f6c <_vfiprintf_r+0x1bc>
 8009f8a:	ab03      	add	r3, sp, #12
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	462a      	mov	r2, r5
 8009f90:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <_vfiprintf_r+0x22c>)
 8009f92:	a904      	add	r1, sp, #16
 8009f94:	4630      	mov	r0, r6
 8009f96:	f3af 8000 	nop.w
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	1c78      	adds	r0, r7, #1
 8009f9e:	d1d6      	bne.n	8009f4e <_vfiprintf_r+0x19e>
 8009fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa2:	07d9      	lsls	r1, r3, #31
 8009fa4:	d405      	bmi.n	8009fb2 <_vfiprintf_r+0x202>
 8009fa6:	89ab      	ldrh	r3, [r5, #12]
 8009fa8:	059a      	lsls	r2, r3, #22
 8009faa:	d402      	bmi.n	8009fb2 <_vfiprintf_r+0x202>
 8009fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fae:	f7ff fdcd 	bl	8009b4c <__retarget_lock_release_recursive>
 8009fb2:	89ab      	ldrh	r3, [r5, #12]
 8009fb4:	065b      	lsls	r3, r3, #25
 8009fb6:	f53f af1d 	bmi.w	8009df4 <_vfiprintf_r+0x44>
 8009fba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fbc:	e71c      	b.n	8009df8 <_vfiprintf_r+0x48>
 8009fbe:	ab03      	add	r3, sp, #12
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	462a      	mov	r2, r5
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <_vfiprintf_r+0x22c>)
 8009fc6:	a904      	add	r1, sp, #16
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f000 f879 	bl	800a0c0 <_printf_i>
 8009fce:	e7e4      	b.n	8009f9a <_vfiprintf_r+0x1ea>
 8009fd0:	0800a81c 	.word	0x0800a81c
 8009fd4:	0800a826 	.word	0x0800a826
 8009fd8:	00000000 	.word	0x00000000
 8009fdc:	08009d8b 	.word	0x08009d8b
 8009fe0:	0800a822 	.word	0x0800a822

08009fe4 <_printf_common>:
 8009fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe8:	4616      	mov	r6, r2
 8009fea:	4699      	mov	r9, r3
 8009fec:	688a      	ldr	r2, [r1, #8]
 8009fee:	690b      	ldr	r3, [r1, #16]
 8009ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	bfb8      	it	lt
 8009ff8:	4613      	movlt	r3, r2
 8009ffa:	6033      	str	r3, [r6, #0]
 8009ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a000:	4607      	mov	r7, r0
 800a002:	460c      	mov	r4, r1
 800a004:	b10a      	cbz	r2, 800a00a <_printf_common+0x26>
 800a006:	3301      	adds	r3, #1
 800a008:	6033      	str	r3, [r6, #0]
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	0699      	lsls	r1, r3, #26
 800a00e:	bf42      	ittt	mi
 800a010:	6833      	ldrmi	r3, [r6, #0]
 800a012:	3302      	addmi	r3, #2
 800a014:	6033      	strmi	r3, [r6, #0]
 800a016:	6825      	ldr	r5, [r4, #0]
 800a018:	f015 0506 	ands.w	r5, r5, #6
 800a01c:	d106      	bne.n	800a02c <_printf_common+0x48>
 800a01e:	f104 0a19 	add.w	sl, r4, #25
 800a022:	68e3      	ldr	r3, [r4, #12]
 800a024:	6832      	ldr	r2, [r6, #0]
 800a026:	1a9b      	subs	r3, r3, r2
 800a028:	42ab      	cmp	r3, r5
 800a02a:	dc26      	bgt.n	800a07a <_printf_common+0x96>
 800a02c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a030:	1e13      	subs	r3, r2, #0
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	bf18      	it	ne
 800a036:	2301      	movne	r3, #1
 800a038:	0692      	lsls	r2, r2, #26
 800a03a:	d42b      	bmi.n	800a094 <_printf_common+0xb0>
 800a03c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a040:	4649      	mov	r1, r9
 800a042:	4638      	mov	r0, r7
 800a044:	47c0      	blx	r8
 800a046:	3001      	adds	r0, #1
 800a048:	d01e      	beq.n	800a088 <_printf_common+0xa4>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	6922      	ldr	r2, [r4, #16]
 800a04e:	f003 0306 	and.w	r3, r3, #6
 800a052:	2b04      	cmp	r3, #4
 800a054:	bf02      	ittt	eq
 800a056:	68e5      	ldreq	r5, [r4, #12]
 800a058:	6833      	ldreq	r3, [r6, #0]
 800a05a:	1aed      	subeq	r5, r5, r3
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	bf0c      	ite	eq
 800a060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a064:	2500      	movne	r5, #0
 800a066:	4293      	cmp	r3, r2
 800a068:	bfc4      	itt	gt
 800a06a:	1a9b      	subgt	r3, r3, r2
 800a06c:	18ed      	addgt	r5, r5, r3
 800a06e:	2600      	movs	r6, #0
 800a070:	341a      	adds	r4, #26
 800a072:	42b5      	cmp	r5, r6
 800a074:	d11a      	bne.n	800a0ac <_printf_common+0xc8>
 800a076:	2000      	movs	r0, #0
 800a078:	e008      	b.n	800a08c <_printf_common+0xa8>
 800a07a:	2301      	movs	r3, #1
 800a07c:	4652      	mov	r2, sl
 800a07e:	4649      	mov	r1, r9
 800a080:	4638      	mov	r0, r7
 800a082:	47c0      	blx	r8
 800a084:	3001      	adds	r0, #1
 800a086:	d103      	bne.n	800a090 <_printf_common+0xac>
 800a088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a090:	3501      	adds	r5, #1
 800a092:	e7c6      	b.n	800a022 <_printf_common+0x3e>
 800a094:	18e1      	adds	r1, r4, r3
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	2030      	movs	r0, #48	; 0x30
 800a09a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a09e:	4422      	add	r2, r4
 800a0a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0a8:	3302      	adds	r3, #2
 800a0aa:	e7c7      	b.n	800a03c <_printf_common+0x58>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	47c0      	blx	r8
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	d0e6      	beq.n	800a088 <_printf_common+0xa4>
 800a0ba:	3601      	adds	r6, #1
 800a0bc:	e7d9      	b.n	800a072 <_printf_common+0x8e>
	...

0800a0c0 <_printf_i>:
 800a0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c4:	7e0f      	ldrb	r7, [r1, #24]
 800a0c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0c8:	2f78      	cmp	r7, #120	; 0x78
 800a0ca:	4691      	mov	r9, r2
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	469a      	mov	sl, r3
 800a0d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0d6:	d807      	bhi.n	800a0e8 <_printf_i+0x28>
 800a0d8:	2f62      	cmp	r7, #98	; 0x62
 800a0da:	d80a      	bhi.n	800a0f2 <_printf_i+0x32>
 800a0dc:	2f00      	cmp	r7, #0
 800a0de:	f000 80d4 	beq.w	800a28a <_printf_i+0x1ca>
 800a0e2:	2f58      	cmp	r7, #88	; 0x58
 800a0e4:	f000 80c0 	beq.w	800a268 <_printf_i+0x1a8>
 800a0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0f0:	e03a      	b.n	800a168 <_printf_i+0xa8>
 800a0f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0f6:	2b15      	cmp	r3, #21
 800a0f8:	d8f6      	bhi.n	800a0e8 <_printf_i+0x28>
 800a0fa:	a101      	add	r1, pc, #4	; (adr r1, 800a100 <_printf_i+0x40>)
 800a0fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a100:	0800a159 	.word	0x0800a159
 800a104:	0800a16d 	.word	0x0800a16d
 800a108:	0800a0e9 	.word	0x0800a0e9
 800a10c:	0800a0e9 	.word	0x0800a0e9
 800a110:	0800a0e9 	.word	0x0800a0e9
 800a114:	0800a0e9 	.word	0x0800a0e9
 800a118:	0800a16d 	.word	0x0800a16d
 800a11c:	0800a0e9 	.word	0x0800a0e9
 800a120:	0800a0e9 	.word	0x0800a0e9
 800a124:	0800a0e9 	.word	0x0800a0e9
 800a128:	0800a0e9 	.word	0x0800a0e9
 800a12c:	0800a271 	.word	0x0800a271
 800a130:	0800a199 	.word	0x0800a199
 800a134:	0800a22b 	.word	0x0800a22b
 800a138:	0800a0e9 	.word	0x0800a0e9
 800a13c:	0800a0e9 	.word	0x0800a0e9
 800a140:	0800a293 	.word	0x0800a293
 800a144:	0800a0e9 	.word	0x0800a0e9
 800a148:	0800a199 	.word	0x0800a199
 800a14c:	0800a0e9 	.word	0x0800a0e9
 800a150:	0800a0e9 	.word	0x0800a0e9
 800a154:	0800a233 	.word	0x0800a233
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	1d1a      	adds	r2, r3, #4
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	602a      	str	r2, [r5, #0]
 800a160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a168:	2301      	movs	r3, #1
 800a16a:	e09f      	b.n	800a2ac <_printf_i+0x1ec>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	682b      	ldr	r3, [r5, #0]
 800a170:	0607      	lsls	r7, r0, #24
 800a172:	f103 0104 	add.w	r1, r3, #4
 800a176:	6029      	str	r1, [r5, #0]
 800a178:	d501      	bpl.n	800a17e <_printf_i+0xbe>
 800a17a:	681e      	ldr	r6, [r3, #0]
 800a17c:	e003      	b.n	800a186 <_printf_i+0xc6>
 800a17e:	0646      	lsls	r6, r0, #25
 800a180:	d5fb      	bpl.n	800a17a <_printf_i+0xba>
 800a182:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a186:	2e00      	cmp	r6, #0
 800a188:	da03      	bge.n	800a192 <_printf_i+0xd2>
 800a18a:	232d      	movs	r3, #45	; 0x2d
 800a18c:	4276      	negs	r6, r6
 800a18e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a192:	485a      	ldr	r0, [pc, #360]	; (800a2fc <_printf_i+0x23c>)
 800a194:	230a      	movs	r3, #10
 800a196:	e012      	b.n	800a1be <_printf_i+0xfe>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	1d19      	adds	r1, r3, #4
 800a19e:	6029      	str	r1, [r5, #0]
 800a1a0:	0605      	lsls	r5, r0, #24
 800a1a2:	d501      	bpl.n	800a1a8 <_printf_i+0xe8>
 800a1a4:	681e      	ldr	r6, [r3, #0]
 800a1a6:	e002      	b.n	800a1ae <_printf_i+0xee>
 800a1a8:	0641      	lsls	r1, r0, #25
 800a1aa:	d5fb      	bpl.n	800a1a4 <_printf_i+0xe4>
 800a1ac:	881e      	ldrh	r6, [r3, #0]
 800a1ae:	4853      	ldr	r0, [pc, #332]	; (800a2fc <_printf_i+0x23c>)
 800a1b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a1b2:	bf0c      	ite	eq
 800a1b4:	2308      	moveq	r3, #8
 800a1b6:	230a      	movne	r3, #10
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1be:	6865      	ldr	r5, [r4, #4]
 800a1c0:	60a5      	str	r5, [r4, #8]
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	bfa2      	ittt	ge
 800a1c6:	6821      	ldrge	r1, [r4, #0]
 800a1c8:	f021 0104 	bicge.w	r1, r1, #4
 800a1cc:	6021      	strge	r1, [r4, #0]
 800a1ce:	b90e      	cbnz	r6, 800a1d4 <_printf_i+0x114>
 800a1d0:	2d00      	cmp	r5, #0
 800a1d2:	d04b      	beq.n	800a26c <_printf_i+0x1ac>
 800a1d4:	4615      	mov	r5, r2
 800a1d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1da:	fb03 6711 	mls	r7, r3, r1, r6
 800a1de:	5dc7      	ldrb	r7, [r0, r7]
 800a1e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1e4:	4637      	mov	r7, r6
 800a1e6:	42bb      	cmp	r3, r7
 800a1e8:	460e      	mov	r6, r1
 800a1ea:	d9f4      	bls.n	800a1d6 <_printf_i+0x116>
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d10b      	bne.n	800a208 <_printf_i+0x148>
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	07de      	lsls	r6, r3, #31
 800a1f4:	d508      	bpl.n	800a208 <_printf_i+0x148>
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	4299      	cmp	r1, r3
 800a1fc:	bfde      	ittt	le
 800a1fe:	2330      	movle	r3, #48	; 0x30
 800a200:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a204:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a208:	1b52      	subs	r2, r2, r5
 800a20a:	6122      	str	r2, [r4, #16]
 800a20c:	f8cd a000 	str.w	sl, [sp]
 800a210:	464b      	mov	r3, r9
 800a212:	aa03      	add	r2, sp, #12
 800a214:	4621      	mov	r1, r4
 800a216:	4640      	mov	r0, r8
 800a218:	f7ff fee4 	bl	8009fe4 <_printf_common>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d14a      	bne.n	800a2b6 <_printf_i+0x1f6>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a224:	b004      	add	sp, #16
 800a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	f043 0320 	orr.w	r3, r3, #32
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	4833      	ldr	r0, [pc, #204]	; (800a300 <_printf_i+0x240>)
 800a234:	2778      	movs	r7, #120	; 0x78
 800a236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	6829      	ldr	r1, [r5, #0]
 800a23e:	061f      	lsls	r7, r3, #24
 800a240:	f851 6b04 	ldr.w	r6, [r1], #4
 800a244:	d402      	bmi.n	800a24c <_printf_i+0x18c>
 800a246:	065f      	lsls	r7, r3, #25
 800a248:	bf48      	it	mi
 800a24a:	b2b6      	uxthmi	r6, r6
 800a24c:	07df      	lsls	r7, r3, #31
 800a24e:	bf48      	it	mi
 800a250:	f043 0320 	orrmi.w	r3, r3, #32
 800a254:	6029      	str	r1, [r5, #0]
 800a256:	bf48      	it	mi
 800a258:	6023      	strmi	r3, [r4, #0]
 800a25a:	b91e      	cbnz	r6, 800a264 <_printf_i+0x1a4>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	f023 0320 	bic.w	r3, r3, #32
 800a262:	6023      	str	r3, [r4, #0]
 800a264:	2310      	movs	r3, #16
 800a266:	e7a7      	b.n	800a1b8 <_printf_i+0xf8>
 800a268:	4824      	ldr	r0, [pc, #144]	; (800a2fc <_printf_i+0x23c>)
 800a26a:	e7e4      	b.n	800a236 <_printf_i+0x176>
 800a26c:	4615      	mov	r5, r2
 800a26e:	e7bd      	b.n	800a1ec <_printf_i+0x12c>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	6826      	ldr	r6, [r4, #0]
 800a274:	6961      	ldr	r1, [r4, #20]
 800a276:	1d18      	adds	r0, r3, #4
 800a278:	6028      	str	r0, [r5, #0]
 800a27a:	0635      	lsls	r5, r6, #24
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	d501      	bpl.n	800a284 <_printf_i+0x1c4>
 800a280:	6019      	str	r1, [r3, #0]
 800a282:	e002      	b.n	800a28a <_printf_i+0x1ca>
 800a284:	0670      	lsls	r0, r6, #25
 800a286:	d5fb      	bpl.n	800a280 <_printf_i+0x1c0>
 800a288:	8019      	strh	r1, [r3, #0]
 800a28a:	2300      	movs	r3, #0
 800a28c:	6123      	str	r3, [r4, #16]
 800a28e:	4615      	mov	r5, r2
 800a290:	e7bc      	b.n	800a20c <_printf_i+0x14c>
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	1d1a      	adds	r2, r3, #4
 800a296:	602a      	str	r2, [r5, #0]
 800a298:	681d      	ldr	r5, [r3, #0]
 800a29a:	6862      	ldr	r2, [r4, #4]
 800a29c:	2100      	movs	r1, #0
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f7f5 ff9e 	bl	80001e0 <memchr>
 800a2a4:	b108      	cbz	r0, 800a2aa <_printf_i+0x1ea>
 800a2a6:	1b40      	subs	r0, r0, r5
 800a2a8:	6060      	str	r0, [r4, #4]
 800a2aa:	6863      	ldr	r3, [r4, #4]
 800a2ac:	6123      	str	r3, [r4, #16]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b4:	e7aa      	b.n	800a20c <_printf_i+0x14c>
 800a2b6:	6923      	ldr	r3, [r4, #16]
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	4640      	mov	r0, r8
 800a2be:	47d0      	blx	sl
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d0ad      	beq.n	800a220 <_printf_i+0x160>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	079b      	lsls	r3, r3, #30
 800a2c8:	d413      	bmi.n	800a2f2 <_printf_i+0x232>
 800a2ca:	68e0      	ldr	r0, [r4, #12]
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	4298      	cmp	r0, r3
 800a2d0:	bfb8      	it	lt
 800a2d2:	4618      	movlt	r0, r3
 800a2d4:	e7a6      	b.n	800a224 <_printf_i+0x164>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	4632      	mov	r2, r6
 800a2da:	4649      	mov	r1, r9
 800a2dc:	4640      	mov	r0, r8
 800a2de:	47d0      	blx	sl
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d09d      	beq.n	800a220 <_printf_i+0x160>
 800a2e4:	3501      	adds	r5, #1
 800a2e6:	68e3      	ldr	r3, [r4, #12]
 800a2e8:	9903      	ldr	r1, [sp, #12]
 800a2ea:	1a5b      	subs	r3, r3, r1
 800a2ec:	42ab      	cmp	r3, r5
 800a2ee:	dcf2      	bgt.n	800a2d6 <_printf_i+0x216>
 800a2f0:	e7eb      	b.n	800a2ca <_printf_i+0x20a>
 800a2f2:	2500      	movs	r5, #0
 800a2f4:	f104 0619 	add.w	r6, r4, #25
 800a2f8:	e7f5      	b.n	800a2e6 <_printf_i+0x226>
 800a2fa:	bf00      	nop
 800a2fc:	0800a82d 	.word	0x0800a82d
 800a300:	0800a83e 	.word	0x0800a83e

0800a304 <__sflush_r>:
 800a304:	898a      	ldrh	r2, [r1, #12]
 800a306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30a:	4605      	mov	r5, r0
 800a30c:	0710      	lsls	r0, r2, #28
 800a30e:	460c      	mov	r4, r1
 800a310:	d458      	bmi.n	800a3c4 <__sflush_r+0xc0>
 800a312:	684b      	ldr	r3, [r1, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc05      	bgt.n	800a324 <__sflush_r+0x20>
 800a318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	dc02      	bgt.n	800a324 <__sflush_r+0x20>
 800a31e:	2000      	movs	r0, #0
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a326:	2e00      	cmp	r6, #0
 800a328:	d0f9      	beq.n	800a31e <__sflush_r+0x1a>
 800a32a:	2300      	movs	r3, #0
 800a32c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a330:	682f      	ldr	r7, [r5, #0]
 800a332:	6a21      	ldr	r1, [r4, #32]
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	d032      	beq.n	800a39e <__sflush_r+0x9a>
 800a338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	075a      	lsls	r2, r3, #29
 800a33e:	d505      	bpl.n	800a34c <__sflush_r+0x48>
 800a340:	6863      	ldr	r3, [r4, #4]
 800a342:	1ac0      	subs	r0, r0, r3
 800a344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a346:	b10b      	cbz	r3, 800a34c <__sflush_r+0x48>
 800a348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a34a:	1ac0      	subs	r0, r0, r3
 800a34c:	2300      	movs	r3, #0
 800a34e:	4602      	mov	r2, r0
 800a350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a352:	6a21      	ldr	r1, [r4, #32]
 800a354:	4628      	mov	r0, r5
 800a356:	47b0      	blx	r6
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	d106      	bne.n	800a36c <__sflush_r+0x68>
 800a35e:	6829      	ldr	r1, [r5, #0]
 800a360:	291d      	cmp	r1, #29
 800a362:	d82b      	bhi.n	800a3bc <__sflush_r+0xb8>
 800a364:	4a29      	ldr	r2, [pc, #164]	; (800a40c <__sflush_r+0x108>)
 800a366:	410a      	asrs	r2, r1
 800a368:	07d6      	lsls	r6, r2, #31
 800a36a:	d427      	bmi.n	800a3bc <__sflush_r+0xb8>
 800a36c:	2200      	movs	r2, #0
 800a36e:	6062      	str	r2, [r4, #4]
 800a370:	04d9      	lsls	r1, r3, #19
 800a372:	6922      	ldr	r2, [r4, #16]
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	d504      	bpl.n	800a382 <__sflush_r+0x7e>
 800a378:	1c42      	adds	r2, r0, #1
 800a37a:	d101      	bne.n	800a380 <__sflush_r+0x7c>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b903      	cbnz	r3, 800a382 <__sflush_r+0x7e>
 800a380:	6560      	str	r0, [r4, #84]	; 0x54
 800a382:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a384:	602f      	str	r7, [r5, #0]
 800a386:	2900      	cmp	r1, #0
 800a388:	d0c9      	beq.n	800a31e <__sflush_r+0x1a>
 800a38a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a38e:	4299      	cmp	r1, r3
 800a390:	d002      	beq.n	800a398 <__sflush_r+0x94>
 800a392:	4628      	mov	r0, r5
 800a394:	f7ff fbea 	bl	8009b6c <_free_r>
 800a398:	2000      	movs	r0, #0
 800a39a:	6360      	str	r0, [r4, #52]	; 0x34
 800a39c:	e7c0      	b.n	800a320 <__sflush_r+0x1c>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b0      	blx	r6
 800a3a4:	1c41      	adds	r1, r0, #1
 800a3a6:	d1c8      	bne.n	800a33a <__sflush_r+0x36>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0c5      	beq.n	800a33a <__sflush_r+0x36>
 800a3ae:	2b1d      	cmp	r3, #29
 800a3b0:	d001      	beq.n	800a3b6 <__sflush_r+0xb2>
 800a3b2:	2b16      	cmp	r3, #22
 800a3b4:	d101      	bne.n	800a3ba <__sflush_r+0xb6>
 800a3b6:	602f      	str	r7, [r5, #0]
 800a3b8:	e7b1      	b.n	800a31e <__sflush_r+0x1a>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	e7ad      	b.n	800a320 <__sflush_r+0x1c>
 800a3c4:	690f      	ldr	r7, [r1, #16]
 800a3c6:	2f00      	cmp	r7, #0
 800a3c8:	d0a9      	beq.n	800a31e <__sflush_r+0x1a>
 800a3ca:	0793      	lsls	r3, r2, #30
 800a3cc:	680e      	ldr	r6, [r1, #0]
 800a3ce:	bf08      	it	eq
 800a3d0:	694b      	ldreq	r3, [r1, #20]
 800a3d2:	600f      	str	r7, [r1, #0]
 800a3d4:	bf18      	it	ne
 800a3d6:	2300      	movne	r3, #0
 800a3d8:	eba6 0807 	sub.w	r8, r6, r7
 800a3dc:	608b      	str	r3, [r1, #8]
 800a3de:	f1b8 0f00 	cmp.w	r8, #0
 800a3e2:	dd9c      	ble.n	800a31e <__sflush_r+0x1a>
 800a3e4:	6a21      	ldr	r1, [r4, #32]
 800a3e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3e8:	4643      	mov	r3, r8
 800a3ea:	463a      	mov	r2, r7
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b0      	blx	r6
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dc06      	bgt.n	800a402 <__sflush_r+0xfe>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a400:	e78e      	b.n	800a320 <__sflush_r+0x1c>
 800a402:	4407      	add	r7, r0
 800a404:	eba8 0800 	sub.w	r8, r8, r0
 800a408:	e7e9      	b.n	800a3de <__sflush_r+0xda>
 800a40a:	bf00      	nop
 800a40c:	dfbffffe 	.word	0xdfbffffe

0800a410 <_fflush_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	690b      	ldr	r3, [r1, #16]
 800a414:	4605      	mov	r5, r0
 800a416:	460c      	mov	r4, r1
 800a418:	b913      	cbnz	r3, 800a420 <_fflush_r+0x10>
 800a41a:	2500      	movs	r5, #0
 800a41c:	4628      	mov	r0, r5
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	b118      	cbz	r0, 800a42a <_fflush_r+0x1a>
 800a422:	6a03      	ldr	r3, [r0, #32]
 800a424:	b90b      	cbnz	r3, 800a42a <_fflush_r+0x1a>
 800a426:	f7ff fa2d 	bl	8009884 <__sinit>
 800a42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0f3      	beq.n	800a41a <_fflush_r+0xa>
 800a432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a434:	07d0      	lsls	r0, r2, #31
 800a436:	d404      	bmi.n	800a442 <_fflush_r+0x32>
 800a438:	0599      	lsls	r1, r3, #22
 800a43a:	d402      	bmi.n	800a442 <_fflush_r+0x32>
 800a43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a43e:	f7ff fb84 	bl	8009b4a <__retarget_lock_acquire_recursive>
 800a442:	4628      	mov	r0, r5
 800a444:	4621      	mov	r1, r4
 800a446:	f7ff ff5d 	bl	800a304 <__sflush_r>
 800a44a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a44c:	07da      	lsls	r2, r3, #31
 800a44e:	4605      	mov	r5, r0
 800a450:	d4e4      	bmi.n	800a41c <_fflush_r+0xc>
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	059b      	lsls	r3, r3, #22
 800a456:	d4e1      	bmi.n	800a41c <_fflush_r+0xc>
 800a458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45a:	f7ff fb77 	bl	8009b4c <__retarget_lock_release_recursive>
 800a45e:	e7dd      	b.n	800a41c <_fflush_r+0xc>

0800a460 <_putc_r>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	460d      	mov	r5, r1
 800a464:	4614      	mov	r4, r2
 800a466:	4606      	mov	r6, r0
 800a468:	b118      	cbz	r0, 800a472 <_putc_r+0x12>
 800a46a:	6a03      	ldr	r3, [r0, #32]
 800a46c:	b90b      	cbnz	r3, 800a472 <_putc_r+0x12>
 800a46e:	f7ff fa09 	bl	8009884 <__sinit>
 800a472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a474:	07d8      	lsls	r0, r3, #31
 800a476:	d405      	bmi.n	800a484 <_putc_r+0x24>
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	0599      	lsls	r1, r3, #22
 800a47c:	d402      	bmi.n	800a484 <_putc_r+0x24>
 800a47e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a480:	f7ff fb63 	bl	8009b4a <__retarget_lock_acquire_recursive>
 800a484:	68a3      	ldr	r3, [r4, #8]
 800a486:	3b01      	subs	r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	60a3      	str	r3, [r4, #8]
 800a48c:	da05      	bge.n	800a49a <_putc_r+0x3a>
 800a48e:	69a2      	ldr	r2, [r4, #24]
 800a490:	4293      	cmp	r3, r2
 800a492:	db12      	blt.n	800a4ba <_putc_r+0x5a>
 800a494:	b2eb      	uxtb	r3, r5
 800a496:	2b0a      	cmp	r3, #10
 800a498:	d00f      	beq.n	800a4ba <_putc_r+0x5a>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	6022      	str	r2, [r4, #0]
 800a4a0:	701d      	strb	r5, [r3, #0]
 800a4a2:	b2ed      	uxtb	r5, r5
 800a4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4a6:	07da      	lsls	r2, r3, #31
 800a4a8:	d405      	bmi.n	800a4b6 <_putc_r+0x56>
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	059b      	lsls	r3, r3, #22
 800a4ae:	d402      	bmi.n	800a4b6 <_putc_r+0x56>
 800a4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4b2:	f7ff fb4b 	bl	8009b4c <__retarget_lock_release_recursive>
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f000 f802 	bl	800a4c8 <__swbuf_r>
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	e7ed      	b.n	800a4a4 <_putc_r+0x44>

0800a4c8 <__swbuf_r>:
 800a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ca:	460e      	mov	r6, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	b118      	cbz	r0, 800a4da <__swbuf_r+0x12>
 800a4d2:	6a03      	ldr	r3, [r0, #32]
 800a4d4:	b90b      	cbnz	r3, 800a4da <__swbuf_r+0x12>
 800a4d6:	f7ff f9d5 	bl	8009884 <__sinit>
 800a4da:	69a3      	ldr	r3, [r4, #24]
 800a4dc:	60a3      	str	r3, [r4, #8]
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	071a      	lsls	r2, r3, #28
 800a4e2:	d525      	bpl.n	800a530 <__swbuf_r+0x68>
 800a4e4:	6923      	ldr	r3, [r4, #16]
 800a4e6:	b31b      	cbz	r3, 800a530 <__swbuf_r+0x68>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	6922      	ldr	r2, [r4, #16]
 800a4ec:	1a98      	subs	r0, r3, r2
 800a4ee:	6963      	ldr	r3, [r4, #20]
 800a4f0:	b2f6      	uxtb	r6, r6
 800a4f2:	4283      	cmp	r3, r0
 800a4f4:	4637      	mov	r7, r6
 800a4f6:	dc04      	bgt.n	800a502 <__swbuf_r+0x3a>
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f7ff ff88 	bl	800a410 <_fflush_r>
 800a500:	b9e0      	cbnz	r0, 800a53c <__swbuf_r+0x74>
 800a502:	68a3      	ldr	r3, [r4, #8]
 800a504:	3b01      	subs	r3, #1
 800a506:	60a3      	str	r3, [r4, #8]
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	701e      	strb	r6, [r3, #0]
 800a510:	6962      	ldr	r2, [r4, #20]
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	429a      	cmp	r2, r3
 800a516:	d004      	beq.n	800a522 <__swbuf_r+0x5a>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	07db      	lsls	r3, r3, #31
 800a51c:	d506      	bpl.n	800a52c <__swbuf_r+0x64>
 800a51e:	2e0a      	cmp	r6, #10
 800a520:	d104      	bne.n	800a52c <__swbuf_r+0x64>
 800a522:	4621      	mov	r1, r4
 800a524:	4628      	mov	r0, r5
 800a526:	f7ff ff73 	bl	800a410 <_fflush_r>
 800a52a:	b938      	cbnz	r0, 800a53c <__swbuf_r+0x74>
 800a52c:	4638      	mov	r0, r7
 800a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a530:	4621      	mov	r1, r4
 800a532:	4628      	mov	r0, r5
 800a534:	f000 f806 	bl	800a544 <__swsetup_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d0d5      	beq.n	800a4e8 <__swbuf_r+0x20>
 800a53c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a540:	e7f4      	b.n	800a52c <__swbuf_r+0x64>
	...

0800a544 <__swsetup_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4b2a      	ldr	r3, [pc, #168]	; (800a5f0 <__swsetup_r+0xac>)
 800a548:	4605      	mov	r5, r0
 800a54a:	6818      	ldr	r0, [r3, #0]
 800a54c:	460c      	mov	r4, r1
 800a54e:	b118      	cbz	r0, 800a558 <__swsetup_r+0x14>
 800a550:	6a03      	ldr	r3, [r0, #32]
 800a552:	b90b      	cbnz	r3, 800a558 <__swsetup_r+0x14>
 800a554:	f7ff f996 	bl	8009884 <__sinit>
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a55e:	0718      	lsls	r0, r3, #28
 800a560:	d422      	bmi.n	800a5a8 <__swsetup_r+0x64>
 800a562:	06d9      	lsls	r1, r3, #27
 800a564:	d407      	bmi.n	800a576 <__swsetup_r+0x32>
 800a566:	2309      	movs	r3, #9
 800a568:	602b      	str	r3, [r5, #0]
 800a56a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a56e:	81a3      	strh	r3, [r4, #12]
 800a570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a574:	e034      	b.n	800a5e0 <__swsetup_r+0x9c>
 800a576:	0758      	lsls	r0, r3, #29
 800a578:	d512      	bpl.n	800a5a0 <__swsetup_r+0x5c>
 800a57a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a57c:	b141      	cbz	r1, 800a590 <__swsetup_r+0x4c>
 800a57e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a582:	4299      	cmp	r1, r3
 800a584:	d002      	beq.n	800a58c <__swsetup_r+0x48>
 800a586:	4628      	mov	r0, r5
 800a588:	f7ff faf0 	bl	8009b6c <_free_r>
 800a58c:	2300      	movs	r3, #0
 800a58e:	6363      	str	r3, [r4, #52]	; 0x34
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	2300      	movs	r3, #0
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f043 0308 	orr.w	r3, r3, #8
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	b94b      	cbnz	r3, 800a5c0 <__swsetup_r+0x7c>
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b6:	d003      	beq.n	800a5c0 <__swsetup_r+0x7c>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f000 f850 	bl	800a660 <__smakebuf_r>
 800a5c0:	89a0      	ldrh	r0, [r4, #12]
 800a5c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c6:	f010 0301 	ands.w	r3, r0, #1
 800a5ca:	d00a      	beq.n	800a5e2 <__swsetup_r+0x9e>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60a3      	str	r3, [r4, #8]
 800a5d0:	6963      	ldr	r3, [r4, #20]
 800a5d2:	425b      	negs	r3, r3
 800a5d4:	61a3      	str	r3, [r4, #24]
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	b943      	cbnz	r3, 800a5ec <__swsetup_r+0xa8>
 800a5da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5de:	d1c4      	bne.n	800a56a <__swsetup_r+0x26>
 800a5e0:	bd38      	pop	{r3, r4, r5, pc}
 800a5e2:	0781      	lsls	r1, r0, #30
 800a5e4:	bf58      	it	pl
 800a5e6:	6963      	ldrpl	r3, [r4, #20]
 800a5e8:	60a3      	str	r3, [r4, #8]
 800a5ea:	e7f4      	b.n	800a5d6 <__swsetup_r+0x92>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e7f7      	b.n	800a5e0 <__swsetup_r+0x9c>
 800a5f0:	200001dc 	.word	0x200001dc

0800a5f4 <_sbrk_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d06      	ldr	r5, [pc, #24]	; (800a610 <_sbrk_r+0x1c>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	602b      	str	r3, [r5, #0]
 800a600:	f7f6 fac0 	bl	8000b84 <_sbrk>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_sbrk_r+0x1a>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_sbrk_r+0x1a>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	20005e90 	.word	0x20005e90

0800a614 <__swhatbuf_r>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	460c      	mov	r4, r1
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	2900      	cmp	r1, #0
 800a61e:	b096      	sub	sp, #88	; 0x58
 800a620:	4615      	mov	r5, r2
 800a622:	461e      	mov	r6, r3
 800a624:	da0d      	bge.n	800a642 <__swhatbuf_r+0x2e>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a62c:	f04f 0100 	mov.w	r1, #0
 800a630:	bf0c      	ite	eq
 800a632:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a636:	2340      	movne	r3, #64	; 0x40
 800a638:	2000      	movs	r0, #0
 800a63a:	6031      	str	r1, [r6, #0]
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	b016      	add	sp, #88	; 0x58
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	466a      	mov	r2, sp
 800a644:	f000 f848 	bl	800a6d8 <_fstat_r>
 800a648:	2800      	cmp	r0, #0
 800a64a:	dbec      	blt.n	800a626 <__swhatbuf_r+0x12>
 800a64c:	9901      	ldr	r1, [sp, #4]
 800a64e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a652:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a656:	4259      	negs	r1, r3
 800a658:	4159      	adcs	r1, r3
 800a65a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a65e:	e7eb      	b.n	800a638 <__swhatbuf_r+0x24>

0800a660 <__smakebuf_r>:
 800a660:	898b      	ldrh	r3, [r1, #12]
 800a662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a664:	079d      	lsls	r5, r3, #30
 800a666:	4606      	mov	r6, r0
 800a668:	460c      	mov	r4, r1
 800a66a:	d507      	bpl.n	800a67c <__smakebuf_r+0x1c>
 800a66c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	6123      	str	r3, [r4, #16]
 800a674:	2301      	movs	r3, #1
 800a676:	6163      	str	r3, [r4, #20]
 800a678:	b002      	add	sp, #8
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	ab01      	add	r3, sp, #4
 800a67e:	466a      	mov	r2, sp
 800a680:	f7ff ffc8 	bl	800a614 <__swhatbuf_r>
 800a684:	9900      	ldr	r1, [sp, #0]
 800a686:	4605      	mov	r5, r0
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff fadb 	bl	8009c44 <_malloc_r>
 800a68e:	b948      	cbnz	r0, 800a6a4 <__smakebuf_r+0x44>
 800a690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a694:	059a      	lsls	r2, r3, #22
 800a696:	d4ef      	bmi.n	800a678 <__smakebuf_r+0x18>
 800a698:	f023 0303 	bic.w	r3, r3, #3
 800a69c:	f043 0302 	orr.w	r3, r3, #2
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	e7e3      	b.n	800a66c <__smakebuf_r+0xc>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	6020      	str	r0, [r4, #0]
 800a6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	6163      	str	r3, [r4, #20]
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	6120      	str	r0, [r4, #16]
 800a6b6:	b15b      	cbz	r3, 800a6d0 <__smakebuf_r+0x70>
 800a6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f000 f81d 	bl	800a6fc <_isatty_r>
 800a6c2:	b128      	cbz	r0, 800a6d0 <__smakebuf_r+0x70>
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	f023 0303 	bic.w	r3, r3, #3
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	431d      	orrs	r5, r3
 800a6d4:	81a5      	strh	r5, [r4, #12]
 800a6d6:	e7cf      	b.n	800a678 <__smakebuf_r+0x18>

0800a6d8 <_fstat_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d07      	ldr	r5, [pc, #28]	; (800a6f8 <_fstat_r+0x20>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	602b      	str	r3, [r5, #0]
 800a6e6:	f7f6 fa24 	bl	8000b32 <_fstat>
 800a6ea:	1c43      	adds	r3, r0, #1
 800a6ec:	d102      	bne.n	800a6f4 <_fstat_r+0x1c>
 800a6ee:	682b      	ldr	r3, [r5, #0]
 800a6f0:	b103      	cbz	r3, 800a6f4 <_fstat_r+0x1c>
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	bd38      	pop	{r3, r4, r5, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20005e90 	.word	0x20005e90

0800a6fc <_isatty_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4d06      	ldr	r5, [pc, #24]	; (800a718 <_isatty_r+0x1c>)
 800a700:	2300      	movs	r3, #0
 800a702:	4604      	mov	r4, r0
 800a704:	4608      	mov	r0, r1
 800a706:	602b      	str	r3, [r5, #0]
 800a708:	f7f6 fa23 	bl	8000b52 <_isatty>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <_isatty_r+0x1a>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b103      	cbz	r3, 800a716 <_isatty_r+0x1a>
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	20005e90 	.word	0x20005e90

0800a71c <_init>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr

0800a728 <_fini>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	bf00      	nop
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr
