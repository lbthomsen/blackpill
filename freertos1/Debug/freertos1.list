
freertos1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800a814  0800a814  0001a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a994  0800a994  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a994  0800a994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a99c  0800a99c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a99c  0800a99c  0001a99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9a0  0800a9a0  0001a9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b9c  200001e8  0800ab8c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d84  0800ab8c  00025d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d59  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dcb  00000000  00000000  00043f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00048d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  0004a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c20a  00000000  00000000  0004b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af5b  00000000  00000000  00067ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099e56  00000000  00000000  00082afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006798  00000000  00000000  0011c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7fc 	.word	0x0800a7fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a7fc 	.word	0x0800a7fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000204 	.word	0x20000204
 80005a8:	200002b8 	.word	0x200002b8

080005ac <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t *)ptr, len);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	68b8      	ldr	r0, [r7, #8]
 80005c0:	f008 fc6a 	bl	8008e98 <CDC_Transmit_FS>
    return len;
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
        if (GPIO_Pin == BTN_Pin) // If the button
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d104      	bne.n	80005ea <HAL_GPIO_EXTI_Callback+0x1a>
        {
                osSemaphoreRelease(btnSemHandle); // Signal task to deal with button
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 f87d 	bl	80066e4 <osSemaphoreRelease>
        }
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20004448 	.word	0x20004448

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b09a      	sub	sp, #104	; 0x68
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fb29 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f865 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8cb 	bl	80007a0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of serialMux */
  osMutexDef(serialMux);
 800060a:	2300      	movs	r3, #0
 800060c:	663b      	str	r3, [r7, #96]	; 0x60
 800060e:	2300      	movs	r3, #0
 8000610:	667b      	str	r3, [r7, #100]	; 0x64
  serialMuxHandle = osMutexCreate(osMutex(serialMux));
 8000612:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000616:	4618      	mov	r0, r3
 8000618:	f005 ff48 	bl	80064ac <osMutexCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <main+0xb8>)
 8000620:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of btnSem */
  osSemaphoreDef(btnSem);
 8000622:	2300      	movs	r3, #0
 8000624:	65bb      	str	r3, [r7, #88]	; 0x58
 8000626:	2300      	movs	r3, #0
 8000628:	65fb      	str	r3, [r7, #92]	; 0x5c
  btnSemHandle = osSemaphoreCreate(osSemaphore(btnSem), 1);
 800062a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800062e:	2101      	movs	r1, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f005 ffd7 	bl	80065e4 <osSemaphoreCreate>
 8000636:	4603      	mov	r3, r0
 8000638:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <main+0xbc>)
 800063a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <main+0xc0>)
 800063e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000650:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fec8 	bl	80063ec <osThreadCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a17      	ldr	r2, [pc, #92]	; (80006bc <main+0xc4>)
 8000660:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledTask */
  osThreadDef(ledTask, startLedTask, osPriorityLow, 0, 128);
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <main+0xc8>)
 8000664:	f107 0420 	add.w	r4, r7, #32
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f005 feb5 	bl	80063ec <osThreadCreate>
 8000682:	4603      	mov	r3, r0
 8000684:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <main+0xcc>)
 8000686:	6013      	str	r3, [r2, #0]

  /* definition and creation of btnTask */
  osThreadDef(btnTask, startBtnTask, osPriorityLow, 0, 128);
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <main+0xd0>)
 800068a:	1d3c      	adds	r4, r7, #4
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  btnTaskHandle = osThreadCreate(osThread(btnTask), NULL);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fea4 	bl	80063ec <osThreadCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a09      	ldr	r2, [pc, #36]	; (80006cc <main+0xd4>)
 80006a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006aa:	f005 fe88 	bl	80063be <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0xb6>
 80006b0:	20004444 	.word	0x20004444
 80006b4:	20004448 	.word	0x20004448
 80006b8:	0800a830 	.word	0x0800a830
 80006bc:	2000443c 	.word	0x2000443c
 80006c0:	0800a84c 	.word	0x0800a84c
 80006c4:	20004440 	.word	0x20004440
 80006c8:	0800a868 	.word	0x0800a868
 80006cc:	2000444c 	.word	0x2000444c

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f009 f95d 	bl	800999e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <SystemClock_Config+0xc8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a26      	ldr	r2, [pc, #152]	; (8000798 <SystemClock_Config+0xc8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <SystemClock_Config+0xc8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <SystemClock_Config+0xcc>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <SystemClock_Config+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000740:	2319      	movs	r3, #25
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000744:	23c0      	movs	r3, #192	; 0xc0
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff19 	bl	800258c <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000760:	f000 f8f8 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2103      	movs	r1, #3
 8000780:	4618      	mov	r0, r3
 8000782:	f002 f97b 	bl	8002a7c <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800078c:	f000 f8e2 	bl	8000954 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_GPIO_Init+0xc8>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_GPIO_Init+0xc8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <MX_GPIO_Init+0xcc>)
 8000812:	f000 fceb 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800081c:	2311      	movs	r3, #17
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	480f      	ldr	r0, [pc, #60]	; (800086c <MX_GPIO_Init+0xcc>)
 8000830:	f000 fb58 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000834:	2301      	movs	r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083e:	2301      	movs	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <MX_GPIO_Init+0xd0>)
 800084a:	f000 fb4b 	bl	8000ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2006      	movs	r0, #6
 8000854:	f000 fb1c 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000858:	2006      	movs	r0, #6
 800085a:	f000 fb35 	bl	8000ec8 <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020800 	.word	0x40020800
 8000870:	40020000 	.word	0x40020000

08000874 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800087c:	f008 fa4e 	bl	8008d1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	DBG("Tick %lu", osKernelSysTick() / 1000);
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <startMainTask+0x48>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2164      	movs	r1, #100	; 0x64
 8000886:	4618      	mov	r0, r3
 8000888:	f005 fe28 	bl	80064dc <osMutexWait>
 800088c:	f005 fd9e 	bl	80063cc <osKernelSysTick>
 8000890:	4603      	mov	r3, r0
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <startMainTask+0x4c>)
 8000894:	fba2 2303 	umull	r2, r3, r2, r3
 8000898:	099b      	lsrs	r3, r3, #6
 800089a:	4619      	mov	r1, r3
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <startMainTask+0x50>)
 800089e:	f009 f8e1 	bl	8009a64 <iprintf>
 80008a2:	200a      	movs	r0, #10
 80008a4:	f009 f8f6 	bl	8009a94 <putchar>
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <startMainTask+0x48>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 fe63 	bl	8006578 <osMutexRelease>
    osDelay(500);
 80008b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b6:	f005 fde5 	bl	8006484 <osDelay>
	DBG("Tick %lu", osKernelSysTick() / 1000);
 80008ba:	e7e1      	b.n	8000880 <startMainTask+0xc>
 80008bc:	20004444 	.word	0x20004444
 80008c0:	10624dd3 	.word	0x10624dd3
 80008c4:	0800a884 	.word	0x0800a884

080008c8 <startLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLedTask */
void startLedTask(void const * argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLedTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <startLedTask+0x1c>)
 80008d6:	f000 fca2 	bl	800121e <HAL_GPIO_TogglePin>
    osDelay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f005 fdd1 	bl	8006484 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008e2:	e7f5      	b.n	80008d0 <startLedTask+0x8>
 80008e4:	40020800 	.word	0x40020800

080008e8 <startBtnTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBtnTask */
void startBtnTask(void const * argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBtnTask */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreWait(btnSemHandle, osWaitForever);
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <startBtnTask+0x3c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008f8:	4618      	mov	r0, r3
 80008fa:	f005 fea5 	bl	8006648 <osSemaphoreWait>
    DBG("Button pressed");
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <startBtnTask+0x40>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2164      	movs	r1, #100	; 0x64
 8000904:	4618      	mov	r0, r3
 8000906:	f005 fde9 	bl	80064dc <osMutexWait>
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <startBtnTask+0x44>)
 800090c:	f009 f8aa 	bl	8009a64 <iprintf>
 8000910:	200a      	movs	r0, #10
 8000912:	f009 f8bf 	bl	8009a94 <putchar>
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <startBtnTask+0x40>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f005 fe2c 	bl	8006578 <osMutexRelease>
    osSemaphoreWait(btnSemHandle, osWaitForever);
 8000920:	e7e6      	b.n	80008f0 <startBtnTask+0x8>
 8000922:	bf00      	nop
 8000924:	20004448 	.word	0x20004448
 8000928:	20004444 	.word	0x20004444
 800092c:	0800a890 	.word	0x0800a890

08000930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d101      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000942:	f000 f9a9 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40014400 	.word	0x40014400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_MspInit+0x54>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x54>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_MspInit+0x54>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_MspInit+0x54>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
 80009a6:	f000 fa73 	bl	8000e90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2019      	movs	r0, #25
 80009ce:	f000 fa5f 	bl	8000e90 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009d2:	2019      	movs	r0, #25
 80009d4:	f000 fa78 	bl	8000ec8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <HAL_InitTick+0xa0>)
 80009de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <HAL_InitTick+0xa0>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e6:	6453      	str	r3, [r2, #68]	; 0x44
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_InitTick+0xa0>)
 80009ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 0210 	add.w	r2, r7, #16
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 f9f8 	bl	8002df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a04:	f002 f9e2 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8000a08:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3b01      	subs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <HAL_InitTick+0xac>)
 8000a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a3a:	f002 fa0d 	bl	8002e58 <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d104      	bne.n	8000a4e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a46:	f002 fa61 	bl	8002f0c <HAL_TIM_Base_Start_IT>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	20004450 	.word	0x20004450
 8000a64:	40014400 	.word	0x40014400

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 fbdb 	bl	8001254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000aaa:	f002 fa91 	bl	8002fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20004450 	.word	0x20004450

08000ab8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <OTG_FS_IRQHandler+0x10>)
 8000abe:	f000 fd31 	bl	8001524 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000596c 	.word	0x2000596c

08000acc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
	}

return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f008 fdcc 	bl	800973c <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	200004b8 	.word	0x200004b8
 8000bd8:	20005d88 	.word	0x20005d88

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f008 fe81 	bl	8009934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fce1 	bl	80005f8 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000c44:	0800a9a4 	.word	0x0800a9a4
  ldr r2, =_sbss
 8000c48:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000c4c:	20005d84 	.word	0x20005d84

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8fc 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fe98 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe6a 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20004498 	.word	0x20004498

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20004498 	.word	0x20004498

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea2:	f7ff ff61 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff ffb1 	bl	8000e14 <NVIC_EncodePriority>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff80 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff54 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e159      	b.n	80011b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8148 	bne.w	80011ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b57      	ldr	r3, [pc, #348]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a56      	ldr	r2, [pc, #344]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b54      	ldr	r3, [pc, #336]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x202>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1fe>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x2f8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1f6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a45      	ldr	r2, [pc, #276]	; (80011e4 <HAL_GPIO_Init+0x300>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1f2>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_Init+0x304>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_GPIO_Init+0x304>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_GPIO_Init+0x304>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f aea2 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40013c00 	.word	0x40013c00

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	619a      	str	r2, [r3, #24]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001230:	887a      	ldrh	r2, [r7, #2]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	041a      	lsls	r2, r3, #16
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43d9      	mvns	r1, r3
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	400b      	ands	r3, r1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f9ac 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b08f      	sub	sp, #60	; 0x3c
 8001288:	af0a      	add	r7, sp, #40	; 0x28
 800128a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e10f      	b.n	80014b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d106      	bne.n	80012b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f007 ff39 	bl	8009128 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f954 	bl	8003582 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	687e      	ldr	r6, [r7, #4]
 80012e2:	466d      	mov	r5, sp
 80012e4:	f106 0410 	add.w	r4, r6, #16
 80012e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012f8:	1d33      	adds	r3, r6, #4
 80012fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f002 f82b 	bl	8003358 <USB_CoreInit>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e0d0      	b.n	80014b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f002 f942 	bl	80035a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e04a      	b.n	80013bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	333d      	adds	r3, #61	; 0x3d
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	333c      	adds	r3, #60	; 0x3c
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	b298      	uxth	r0, r3
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3342      	adds	r3, #66	; 0x42
 8001362:	4602      	mov	r2, r0
 8001364:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	333f      	adds	r3, #63	; 0x3f
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	3344      	adds	r3, #68	; 0x44
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3348      	adds	r3, #72	; 0x48
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	3350      	adds	r3, #80	; 0x50
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3af      	bcc.n	8001326 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e044      	b.n	8001456 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3b5      	bcc.n	80013cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	687e      	ldr	r6, [r7, #4]
 8001468:	466d      	mov	r5, sp
 800146a:	f106 0410 	add.w	r4, r6, #16
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147a:	e885 0003 	stmia.w	r5, {r0, r1}
 800147e:	1d33      	adds	r3, r6, #4
 8001480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f002 f8da 	bl	800363c <USB_DevInit>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00d      	b.n	80014b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f956 	bl	8004760 <USB_DevDisconnect>

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_PCD_Start+0x1c>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e020      	b.n	800151c <HAL_PCD_Start+0x5e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d109      	bne.n	80014fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d005      	beq.n	80014fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 f82c 	bl	8003560 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f003 f906 	bl	800471e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b08d      	sub	sp, #52	; 0x34
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 f9c4 	bl	80048c8 <USB_GetMode>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 839d 	bne.w	8001c82 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f928 	bl	80047a2 <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8393 	beq.w	8001c80 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f91f 	bl	80047a2 <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b02      	cmp	r3, #2
 800156c:	d107      	bne.n	800157e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f002 0202 	and.w	r2, r2, #2
 800157c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 f90d 	bl	80047a2 <USB_ReadInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b10      	cmp	r3, #16
 8001590:	d161      	bne.n	8001656 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0210 	bic.w	r2, r2, #16
 80015a0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f003 020f 	and.w	r2, r3, #15
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	3304      	adds	r3, #4
 80015c0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	0c5b      	lsrs	r3, r3, #17
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d124      	bne.n	8001618 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d035      	beq.n	8001646 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	6a38      	ldr	r0, [r7, #32]
 80015ee:	f002 ff44 	bl	800447a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	441a      	add	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001610:	441a      	add	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	619a      	str	r2, [r3, #24]
 8001616:	e016      	b.n	8001646 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	0c5b      	lsrs	r3, r3, #17
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	2b06      	cmp	r3, #6
 8001622:	d110      	bne.n	8001646 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800162a:	2208      	movs	r2, #8
 800162c:	4619      	mov	r1, r3
 800162e:	6a38      	ldr	r0, [r7, #32]
 8001630:	f002 ff23 	bl	800447a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001640:	441a      	add	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0210 	orr.w	r2, r2, #16
 8001654:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f8a1 	bl	80047a2 <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001666:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800166a:	d16e      	bne.n	800174a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 f8a7 	bl	80047c8 <USB_ReadDevAllOutEpInterrupt>
 800167a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800167c:	e062      	b.n	8001744 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d057      	beq.n	8001738 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f003 f8cc 	bl	8004830 <USB_ReadDevOutEPInterrupt>
 8001698:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00c      	beq.n	80016be <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	015a      	lsls	r2, r3, #5
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016b0:	461a      	mov	r2, r3
 80016b2:	2301      	movs	r3, #1
 80016b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fdb1 	bl	8002220 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00c      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d4:	461a      	mov	r2, r3
 80016d6:	2308      	movs	r3, #8
 80016d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 feab 	bl	8002438 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f8:	461a      	mov	r2, r3
 80016fa:	2310      	movs	r3, #16
 80016fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001714:	461a      	mov	r2, r3
 8001716:	2320      	movs	r3, #32
 8001718:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001730:	461a      	mov	r2, r3
 8001732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001736:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3301      	adds	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001746:	2b00      	cmp	r3, #0
 8001748:	d199      	bne.n	800167e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f827 	bl	80047a2 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800175e:	f040 80c0 	bne.w	80018e2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 f848 	bl	80047fc <USB_ReadDevAllInEpInterrupt>
 800176c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001772:	e0b2      	b.n	80018da <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80a7 	beq.w	80018ce <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f003 f86e 	bl	800486c <USB_ReadDevInEPInterrupt>
 8001790:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d057      	beq.n	800184c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	2201      	movs	r2, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69f9      	ldr	r1, [r7, #28]
 80017b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017bc:	4013      	ands	r3, r2
 80017be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017cc:	461a      	mov	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d132      	bne.n	8001840 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3348      	adds	r3, #72	; 0x48
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4403      	add	r3, r0
 80017fa:	3344      	adds	r3, #68	; 0x44
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4419      	add	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4403      	add	r3, r0
 800180e:	3348      	adds	r3, #72	; 0x48
 8001810:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	2b00      	cmp	r3, #0
 8001816:	d113      	bne.n	8001840 <HAL_PCD_IRQHandler+0x31c>
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	3350      	adds	r3, #80	; 0x50
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d108      	bne.n	8001840 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001838:	461a      	mov	r2, r3
 800183a:	2101      	movs	r1, #1
 800183c:	f003 f876 	bl	800492c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f007 fcef 	bl	800922a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001862:	461a      	mov	r2, r3
 8001864:	2308      	movs	r3, #8
 8001866:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800187e:	461a      	mov	r2, r3
 8001880:	2310      	movs	r3, #16
 8001882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189a:	461a      	mov	r2, r3
 800189c:	2340      	movs	r3, #64	; 0x40
 800189e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b6:	461a      	mov	r2, r3
 80018b8:	2302      	movs	r3, #2
 80018ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fc1b 	bl	8002104 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	3301      	adds	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f af49 	bne.w	8001774 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 ff5b 	bl	80047a2 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018f6:	d122      	bne.n	800193e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fe27 	bl	8002574 <HAL_PCDEx_LPM_Callback>
 8001926:	e002      	b.n	800192e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f007 fceb 	bl	8009304 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800193c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f002 ff2d 	bl	80047a2 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001952:	d112      	bne.n	800197a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f007 fca7 	bl	80092b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001978:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f002 ff0f 	bl	80047a2 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198e:	f040 80c7 	bne.w	8001b20 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2110      	movs	r1, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 ffa9 	bl	8003904 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b6:	e056      	b.n	8001a66 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c4:	461a      	mov	r2, r3
 80019c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019dc:	0151      	lsls	r1, r2, #5
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	440a      	add	r2, r1
 80019e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019ea:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fc:	0151      	lsls	r1, r2, #5
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	440a      	add	r2, r1
 8001a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a30:	0151      	lsls	r1, r2, #5
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	440a      	add	r2, r1
 8001a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a50:	0151      	lsls	r1, r2, #5
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	440a      	add	r2, r1
 8001a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	3301      	adds	r3, #1
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3a3      	bcc.n	80019b8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d016      	beq.n	8001aba <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a9c:	f043 030b 	orr.w	r3, r3, #11
 8001aa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab2:	f043 030b 	orr.w	r3, r3, #11
 8001ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab8:	e015      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001acc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ad0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae0:	f043 030b 	orr.w	r3, r3, #11
 8001ae4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001af8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f002 ff0e 	bl	800492c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fe3c 	bl	80047a2 <USB_ReadInterrupts>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b34:	d124      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fed2 	bl	80048e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 ff3a 	bl	80039be <USB_GetDevSpeed>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681c      	ldr	r4, [r3, #0]
 8001b56:	f001 f92d 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8001b5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	4620      	mov	r0, r4
 8001b66:	f001 fc59 	bl	800341c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f007 fb85 	bl	800927a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f002 fe0c 	bl	80047a2 <USB_ReadInterrupts>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d10a      	bne.n	8001baa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f007 fb62 	bl	800925e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f002 0208 	and.w	r2, r2, #8
 8001ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fdf7 	bl	80047a2 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bbe:	d10f      	bne.n	8001be0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f007 fbba 	bl	8009344 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fddc 	bl	80047a2 <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bf4:	d10f      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f007 fb8d 	bl	8009320 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fdc1 	bl	80047a2 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2a:	d10a      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f007 fb9b 	bl	8009368 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fdab 	bl	80047a2 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d115      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f007 fb8b 	bl	8009384 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	e000      	b.n	8001c82 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001c80:	bf00      	nop
    }
  }
}
 8001c82:	3734      	adds	r7, #52	; 0x34
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}

08001c88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_PCD_SetAddress+0x1a>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e013      	b.n	8001cca <HAL_PCD_SetAddress+0x42>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 fd09 	bl	80046d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	4608      	mov	r0, r1
 8001cdc:	4611      	mov	r1, r2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	70fb      	strb	r3, [r7, #3]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	803b      	strh	r3, [r7, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	da0f      	bge.n	8001d18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 020f 	and.w	r2, r3, #15
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3338      	adds	r3, #56	; 0x38
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	705a      	strb	r2, [r3, #1]
 8001d16:	e00f      	b.n	8001d38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3304      	adds	r3, #4
 8001d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d44:	883a      	ldrh	r2, [r7, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	78ba      	ldrb	r2, [r7, #2]
 8001d4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d62:	78bb      	ldrb	r3, [r7, #2]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d102      	bne.n	8001d6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_PCD_EP_Open+0xaa>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e00e      	b.n	8001d9a <HAL_PCD_EP_Open+0xc8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 fe3c 	bl	8003a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d98:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da0f      	bge.n	8001dd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	3338      	adds	r3, #56	; 0x38
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	705a      	strb	r2, [r3, #1]
 8001dd4:	e00f      	b.n	8001df6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 020f 	and.w	r2, r3, #15
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_EP_Close+0x6e>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e00e      	b.n	8001e2e <HAL_PCD_EP_Close+0x8c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fe7a 	bl	8003b18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	f003 020f 	and.w	r2, r3, #15
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6979      	ldr	r1, [r7, #20]
 8001eaa:	f002 f955 	bl	8004158 <USB_EP0StartXfer>
 8001eae:	e008      	b.n	8001ec2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f001 ff07 	bl	8003cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	f003 020f 	and.w	r2, r3, #15
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	3338      	adds	r3, #56	; 0x38
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6979      	ldr	r1, [r7, #20]
 8001f6e:	f002 f8f3 	bl	8004158 <USB_EP0StartXfer>
 8001f72:	e008      	b.n	8001f86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6979      	ldr	r1, [r7, #20]
 8001f82:	f001 fea5 	bl	8003cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d901      	bls.n	8001fae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e050      	b.n	8002050 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da0f      	bge.n	8001fd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	705a      	strb	r2, [r3, #1]
 8001fd4:	e00d      	b.n	8001ff2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_PCD_EP_SetStall+0x82>
 800200e:	2302      	movs	r3, #2
 8002010:	e01e      	b.n	8002050 <HAL_PCD_EP_SetStall+0xc0>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fa82 	bl	800452a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	b2d9      	uxtb	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002040:	461a      	mov	r2, r3
 8002042:	f002 fc73 	bl	800492c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d901      	bls.n	8002076 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e042      	b.n	80020fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207a:	2b00      	cmp	r3, #0
 800207c:	da0f      	bge.n	800209e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	3338      	adds	r3, #56	; 0x38
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	705a      	strb	r2, [r3, #1]
 800209c:	e00f      	b.n	80020be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_PCD_EP_ClrStall+0x86>
 80020da:	2302      	movs	r3, #2
 80020dc:	e00e      	b.n	80020fc <HAL_PCD_EP_ClrStall+0xa4>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fa8a 	bl	8004606 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af02      	add	r7, sp, #8
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	3338      	adds	r3, #56	; 0x38
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	d901      	bls.n	800213c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e06c      	b.n	8002216 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	429a      	cmp	r2, r3
 8002150:	d902      	bls.n	8002158 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3303      	adds	r3, #3
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002160:	e02b      	b.n	80021ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	d902      	bls.n	800217e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3303      	adds	r3, #3
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68d9      	ldr	r1, [r3, #12]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002196:	b2db      	uxtb	r3, r3
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4603      	mov	r3, r0
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f002 f92e 	bl	80043fe <USB_WritePacket>

    ep->xfer_buff  += len;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	441a      	add	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	441a      	add	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d809      	bhi.n	80021e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d8:	429a      	cmp	r2, r3
 80021da:	d203      	bcs.n	80021e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1be      	bne.n	8002162 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d811      	bhi.n	8002214 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	43db      	mvns	r3, r3
 800220a:	6939      	ldr	r1, [r7, #16]
 800220c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002210:	4013      	ands	r3, r2
 8002212:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	333c      	adds	r3, #60	; 0x3c
 8002238:	3304      	adds	r3, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 80a0 	bne.w	8002398 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d015      	beq.n	800228e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a72      	ldr	r2, [pc, #456]	; (8002430 <PCD_EP_OutXfrComplete_int+0x210>)
 8002266:	4293      	cmp	r3, r2
 8002268:	f240 80dd 	bls.w	8002426 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80d7 	beq.w	8002426 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	6093      	str	r3, [r2, #8]
 800228c:	e0cb      	b.n	8002426 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a4:	461a      	mov	r2, r3
 80022a6:	2320      	movs	r3, #32
 80022a8:	6093      	str	r3, [r2, #8]
 80022aa:	e0bc      	b.n	8002426 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 80b7 	bne.w	8002426 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <PCD_EP_OutXfrComplete_int+0x210>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d90f      	bls.n	80022e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	461a      	mov	r2, r3
 80022d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022dc:	6093      	str	r3, [r2, #8]
 80022de:	e0a2      	b.n	8002426 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	0159      	lsls	r1, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	440b      	add	r3, r1
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002306:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4403      	add	r3, r0
 8002316:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800231a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4403      	add	r3, r0
 800233e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4419      	add	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4403      	add	r3, r0
 8002354:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002358:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d114      	bne.n	800238a <PCD_EP_OutXfrComplete_int+0x16a>
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d108      	bne.n	800238a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002382:	461a      	mov	r2, r3
 8002384:	2101      	movs	r1, #1
 8002386:	f002 fad1 	bl	800492c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f006 ff2f 	bl	80091f4 <HAL_PCD_DataOutStageCallback>
 8002396:	e046      	b.n	8002426 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a26      	ldr	r2, [pc, #152]	; (8002434 <PCD_EP_OutXfrComplete_int+0x214>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d124      	bne.n	80023ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	461a      	mov	r2, r3
 80023b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023bc:	6093      	str	r3, [r2, #8]
 80023be:	e032      	b.n	8002426 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d6:	461a      	mov	r2, r3
 80023d8:	2320      	movs	r3, #32
 80023da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f006 ff06 	bl	80091f4 <HAL_PCD_DataOutStageCallback>
 80023e8:	e01d      	b.n	8002426 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d114      	bne.n	800241a <PCD_EP_OutXfrComplete_int+0x1fa>
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d108      	bne.n	800241a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002412:	461a      	mov	r2, r3
 8002414:	2100      	movs	r1, #0
 8002416:	f002 fa89 	bl	800492c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f006 fee7 	bl	80091f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	4f54300a 	.word	0x4f54300a
 8002434:	4f54310a 	.word	0x4f54310a

08002438 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	333c      	adds	r3, #60	; 0x3c
 8002450:	3304      	adds	r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d90e      	bls.n	800248c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f006 fe9f 	bl	80091d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d90c      	bls.n	80024b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d108      	bne.n	80024b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024ac:	461a      	mov	r2, r3
 80024ae:	2101      	movs	r1, #1
 80024b0:	f002 fa3c 	bl	800492c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	4f54300a 	.word	0x4f54300a

080024c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
 80024d0:	4613      	mov	r3, r2
 80024d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024e2:	883b      	ldrh	r3, [r7, #0]
 80024e4:	0419      	lsls	r1, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
 80024f0:	e028      	b.n	8002544 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4413      	add	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e00d      	b.n	8002522 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	3340      	adds	r3, #64	; 0x40
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	3301      	adds	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	3b01      	subs	r3, #1
 8002528:	429a      	cmp	r2, r3
 800252a:	d3ec      	bcc.n	8002506 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800252c:	883b      	ldrh	r3, [r7, #0]
 800252e:	0418      	lsls	r0, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	3b01      	subs	r3, #1
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	4302      	orrs	r2, r0
 800253c:	3340      	adds	r3, #64	; 0x40
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e264      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d075      	beq.n	8002696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025aa:	4ba3      	ldr	r3, [pc, #652]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d00c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b6:	4ba0      	ldr	r3, [pc, #640]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b9d      	ldr	r3, [pc, #628]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ce:	d10b      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	4b99      	ldr	r3, [pc, #612]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05b      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d157      	bne.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e23f      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x74>
 80025f2:	4b91      	ldr	r3, [pc, #580]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a90      	ldr	r2, [pc, #576]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x98>
 800260a:	4b8b      	ldr	r3, [pc, #556]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a8a      	ldr	r2, [pc, #552]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a87      	ldr	r2, [pc, #540]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002624:	4b84      	ldr	r3, [pc, #528]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a83      	ldr	r2, [pc, #524]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b81      	ldr	r3, [pc, #516]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a80      	ldr	r2, [pc, #512]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fb3c 	bl	8000cc0 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fb38 	bl	8000cc0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e204      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xc0>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fb28 	bl	8000cc0 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fb24 	bl	8000cc0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1f0      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d063      	beq.n	800276a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a2:	4b65      	ldr	r3, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	4b62      	ldr	r3, [pc, #392]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d11c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b5f      	ldr	r3, [pc, #380]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e1c4      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b56      	ldr	r3, [pc, #344]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4952      	ldr	r1, [pc, #328]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	e03a      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_OscConfig+0x2b0>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fadd 	bl	8000cc0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe fad9 	bl	8000cc0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1a5      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	4b46      	ldr	r3, [pc, #280]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4940      	ldr	r1, [pc, #256]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x2b0>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fabc 	bl	8000cc0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe fab8 	bl	8000cc0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e184      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d030      	beq.n	80027d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277e:	4b30      	ldr	r3, [pc, #192]	; (8002840 <HAL_RCC_OscConfig+0x2b4>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe fa9c 	bl	8000cc0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fa98 	bl	8000cc0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e164      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	4b26      	ldr	r3, [pc, #152]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x200>
 80027aa:	e015      	b.n	80027d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCC_OscConfig+0x2b4>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fa85 	bl	8000cc0 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7fe fa81 	bl	8000cc0 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e14d      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a0 	beq.w	8002926 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x2b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d121      	bne.n	8002866 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_RCC_OscConfig+0x2b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_RCC_OscConfig+0x2b8>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7fe fa47 	bl	8000cc0 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e011      	b.n	800285a <HAL_RCC_OscConfig+0x2ce>
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
 8002844:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe fa3a 	bl	8000cc0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e106      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <HAL_RCC_OscConfig+0x4e4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x2f0>
 800286e:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	4a80      	ldr	r2, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	; 0x70
 800287a:	e01c      	b.n	80028b6 <HAL_RCC_OscConfig+0x32a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x312>
 8002884:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	4a7a      	ldr	r2, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6713      	str	r3, [r2, #112]	; 0x70
 8002890:	4b78      	ldr	r3, [pc, #480]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	4a77      	ldr	r2, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	; 0x70
 800289c:	e00b      	b.n	80028b6 <HAL_RCC_OscConfig+0x32a>
 800289e:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a74      	ldr	r2, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe f9ff 	bl	8000cc0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe f9fb 	bl	8000cc0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0c5      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ee      	beq.n	80028c6 <HAL_RCC_OscConfig+0x33a>
 80028e8:	e014      	b.n	8002914 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe f9e9 	bl	8000cc0 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe f9e5 	bl	8000cc0 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0af      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	4b5a      	ldr	r3, [pc, #360]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291a:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 809b 	beq.w	8002a66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d05c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d141      	bne.n	80029c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_RCC_OscConfig+0x4ec>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe f9b9 	bl	8000cc0 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe f9b5 	bl	8000cc0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e081      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	019b      	lsls	r3, r3, #6
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	3b01      	subs	r3, #1
 800298a:	041b      	lsls	r3, r3, #16
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	061b      	lsls	r3, r3, #24
 8002994:	4937      	ldr	r1, [pc, #220]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_RCC_OscConfig+0x4ec>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe f98e 	bl	8000cc0 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe f98a 	bl	8000cc0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e056      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x41c>
 80029c6:	e04e      	b.n	8002a66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe f977 	bl	8000cc0 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe f973 	bl	8000cc0 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e03f      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x44a>
 80029f4:	e037      	b.n	8002a66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e032      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d028      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d121      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d11a      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a32:	4013      	ands	r3, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40007000 	.word	0x40007000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	42470060 	.word	0x42470060

08002a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cc      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d90c      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b8      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	494d      	ldr	r1, [pc, #308]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d044      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d119      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e067      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4934      	ldr	r1, [pc, #208]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f8a8 	bl	8000cc0 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe f8a4 	bl	8000cc0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d20c      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	490e      	ldr	r1, [pc, #56]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c02:	f000 f821 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	490a      	ldr	r1, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
 8002c16:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fec8 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	0800a8e4 	.word	0x0800a8e4
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6079      	str	r1, [r7, #4]
 8002c52:	2100      	movs	r1, #0
 8002c54:	60f9      	str	r1, [r7, #12]
 8002c56:	2100      	movs	r1, #0
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5e:	4952      	ldr	r1, [pc, #328]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c60:	6889      	ldr	r1, [r1, #8]
 8002c62:	f001 010c 	and.w	r1, r1, #12
 8002c66:	2908      	cmp	r1, #8
 8002c68:	d00d      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x3e>
 8002c6a:	2908      	cmp	r1, #8
 8002c6c:	f200 8094 	bhi.w	8002d98 <HAL_RCC_GetSysClockFreq+0x150>
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x32>
 8002c74:	2904      	cmp	r1, #4
 8002c76:	d003      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x38>
 8002c78:	e08e      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7a:	4b4c      	ldr	r3, [pc, #304]	; (8002dac <HAL_RCC_GetSysClockFreq+0x164>)
 8002c7c:	60bb      	str	r3, [r7, #8]
       break;
 8002c7e:	e08e      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c80:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c82:	60bb      	str	r3, [r7, #8]
      break;
 8002c84:	e08b      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c86:	4948      	ldr	r1, [pc, #288]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c88:	6849      	ldr	r1, [r1, #4]
 8002c8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c8e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c90:	4945      	ldr	r1, [pc, #276]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c92:	6849      	ldr	r1, [r1, #4]
 8002c94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d024      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4942      	ldr	r1, [pc, #264]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c9e:	6849      	ldr	r1, [r1, #4]
 8002ca0:	0989      	lsrs	r1, r1, #6
 8002ca2:	4608      	mov	r0, r1
 8002ca4:	f04f 0100 	mov.w	r1, #0
 8002ca8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cac:	f04f 0500 	mov.w	r5, #0
 8002cb0:	ea00 0204 	and.w	r2, r0, r4
 8002cb4:	ea01 0305 	and.w	r3, r1, r5
 8002cb8:	493d      	ldr	r1, [pc, #244]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cba:	fb01 f003 	mul.w	r0, r1, r3
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	fb01 f102 	mul.w	r1, r1, r2
 8002cc4:	1844      	adds	r4, r0, r1
 8002cc6:	493a      	ldr	r1, [pc, #232]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cc8:	fba2 0101 	umull	r0, r1, r2, r1
 8002ccc:	1863      	adds	r3, r4, r1
 8002cce:	4619      	mov	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	f7fd fad2 	bl	8000280 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e04a      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	099b      	lsrs	r3, r3, #6
 8002cec:	461a      	mov	r2, r3
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	ea02 0400 	and.w	r4, r2, r0
 8002cfe:	ea03 0501 	and.w	r5, r3, r1
 8002d02:	4620      	mov	r0, r4
 8002d04:	4629      	mov	r1, r5
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	014b      	lsls	r3, r1, #5
 8002d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d14:	0142      	lsls	r2, r0, #5
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	1b00      	subs	r0, r0, r4
 8002d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	018b      	lsls	r3, r1, #6
 8002d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d2e:	0182      	lsls	r2, r0, #6
 8002d30:	1a12      	subs	r2, r2, r0
 8002d32:	eb63 0301 	sbc.w	r3, r3, r1
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	00d9      	lsls	r1, r3, #3
 8002d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d44:	00d0      	lsls	r0, r2, #3
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	1912      	adds	r2, r2, r4
 8002d4c:	eb45 0303 	adc.w	r3, r5, r3
 8002d50:	f04f 0000 	mov.w	r0, #0
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	0299      	lsls	r1, r3, #10
 8002d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d5e:	0290      	lsls	r0, r2, #10
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	f7fd fa86 	bl	8000280 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	60bb      	str	r3, [r7, #8]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_RCC_GetSysClockFreq+0x164>)
 8002d9a:	60bb      	str	r3, [r7, #8]
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	017d7840 	.word	0x017d7840

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0b5b      	lsrs	r3, r3, #13
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	0800a8f4 	.word	0x0800a8f4

08002df4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	220f      	movs	r2, #15
 8002e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_RCC_GetClockConfig+0x60>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0207 	and.w	r2, r3, #7
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	601a      	str	r2, [r3, #0]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40023c00 	.word	0x40023c00

08002e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e041      	b.n	8002eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f839 	bl	8002ef6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 f9ca 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d001      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e044      	b.n	8002fae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_TIM_Base_Start_IT+0xb0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d018      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x6c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d013      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x6c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x6c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x6c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x6c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_TIM_Base_Start_IT+0xc0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d010      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40000c00 	.word	0x40000c00
 8002fcc:	40014000 	.word	0x40014000

08002fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0202 	mvn.w	r2, #2
 8002ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8ee 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8e0 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8f1 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0204 	mvn.w	r2, #4
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8c4 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8b6 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8c7 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b08      	cmp	r3, #8
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0208 	mvn.w	r2, #8
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2204      	movs	r2, #4
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f89a 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f88c 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f89d 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d122      	bne.n	8003128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d11b      	bne.n	8003128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0210 	mvn.w	r2, #16
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2208      	movs	r2, #8
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f870 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f862 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f873 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0201 	mvn.w	r2, #1
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fbee 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d107      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8e2 	bl	8003344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d107      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f838 	bl	800321c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d10e      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0220 	mvn.w	r2, #32
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8ac 	bl	8003330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a34      	ldr	r2, [pc, #208]	; (8003314 <TIM_Base_SetConfig+0xe4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a31      	ldr	r2, [pc, #196]	; (8003318 <TIM_Base_SetConfig+0xe8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a30      	ldr	r2, [pc, #192]	; (800331c <TIM_Base_SetConfig+0xec>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <TIM_Base_SetConfig+0xf0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <TIM_Base_SetConfig+0xe4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d017      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <TIM_Base_SetConfig+0xe8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a21      	ldr	r2, [pc, #132]	; (800331c <TIM_Base_SetConfig+0xec>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <TIM_Base_SetConfig+0xf0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <TIM_Base_SetConfig+0xf4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <TIM_Base_SetConfig+0xf8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <TIM_Base_SetConfig+0xfc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <TIM_Base_SetConfig+0xe4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d103      	bne.n	8003300 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	615a      	str	r2, [r3, #20]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800

08003330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003358:	b084      	sub	sp, #16
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	f107 001c 	add.w	r0, r7, #28
 8003366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	2b01      	cmp	r3, #1
 800336e:	d122      	bne.n	80033b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 fb1c 	bl	80049e8 <USB_CoreReset>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e01a      	b.n	80033ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f001 fb10 	bl	80049e8 <USB_CoreReset>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38
 80033de:	e005      	b.n	80033ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10b      	bne.n	800340a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f043 0206 	orr.w	r2, r3, #6
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003416:	b004      	add	sp, #16
 8003418:	4770      	bx	lr
	...

0800341c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d165      	bne.n	80034fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a41      	ldr	r2, [pc, #260]	; (8003538 <USB_SetTurnaroundTime+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d906      	bls.n	8003446 <USB_SetTurnaroundTime+0x2a>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <USB_SetTurnaroundTime+0x120>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d202      	bcs.n	8003446 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003440:	230f      	movs	r3, #15
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e062      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4a3c      	ldr	r2, [pc, #240]	; (800353c <USB_SetTurnaroundTime+0x120>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d306      	bcc.n	800345c <USB_SetTurnaroundTime+0x40>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4a3b      	ldr	r2, [pc, #236]	; (8003540 <USB_SetTurnaroundTime+0x124>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d202      	bcs.n	800345c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003456:	230e      	movs	r3, #14
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e057      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a38      	ldr	r2, [pc, #224]	; (8003540 <USB_SetTurnaroundTime+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d306      	bcc.n	8003472 <USB_SetTurnaroundTime+0x56>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4a37      	ldr	r2, [pc, #220]	; (8003544 <USB_SetTurnaroundTime+0x128>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d202      	bcs.n	8003472 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800346c:	230d      	movs	r3, #13
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e04c      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4a33      	ldr	r2, [pc, #204]	; (8003544 <USB_SetTurnaroundTime+0x128>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d306      	bcc.n	8003488 <USB_SetTurnaroundTime+0x6c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a32      	ldr	r2, [pc, #200]	; (8003548 <USB_SetTurnaroundTime+0x12c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d802      	bhi.n	8003488 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003482:	230c      	movs	r3, #12
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e041      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4a2f      	ldr	r2, [pc, #188]	; (8003548 <USB_SetTurnaroundTime+0x12c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d906      	bls.n	800349e <USB_SetTurnaroundTime+0x82>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a2e      	ldr	r2, [pc, #184]	; (800354c <USB_SetTurnaroundTime+0x130>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d802      	bhi.n	800349e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003498:	230b      	movs	r3, #11
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e036      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4a2a      	ldr	r2, [pc, #168]	; (800354c <USB_SetTurnaroundTime+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d906      	bls.n	80034b4 <USB_SetTurnaroundTime+0x98>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <USB_SetTurnaroundTime+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d802      	bhi.n	80034b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034ae:	230a      	movs	r3, #10
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e02b      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <USB_SetTurnaroundTime+0x134>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d906      	bls.n	80034ca <USB_SetTurnaroundTime+0xae>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <USB_SetTurnaroundTime+0x138>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d202      	bcs.n	80034ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034c4:	2309      	movs	r3, #9
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e020      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <USB_SetTurnaroundTime+0x138>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d306      	bcc.n	80034e0 <USB_SetTurnaroundTime+0xc4>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <USB_SetTurnaroundTime+0x13c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d802      	bhi.n	80034e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034da:	2308      	movs	r3, #8
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e015      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <USB_SetTurnaroundTime+0x13c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d906      	bls.n	80034f6 <USB_SetTurnaroundTime+0xda>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <USB_SetTurnaroundTime+0x140>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d202      	bcs.n	80034f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034f0:	2307      	movs	r3, #7
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e00a      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034f6:	2306      	movs	r3, #6
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e007      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003502:	2309      	movs	r3, #9
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e001      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003508:	2309      	movs	r3, #9
 800350a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	029b      	lsls	r3, r3, #10
 8003520:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	00d8acbf 	.word	0x00d8acbf
 800353c:	00e4e1c0 	.word	0x00e4e1c0
 8003540:	00f42400 	.word	0x00f42400
 8003544:	01067380 	.word	0x01067380
 8003548:	011a499f 	.word	0x011a499f
 800354c:	01312cff 	.word	0x01312cff
 8003550:	014ca43f 	.word	0x014ca43f
 8003554:	016e3600 	.word	0x016e3600
 8003558:	01a6ab1f 	.word	0x01a6ab1f
 800355c:	01e84800 	.word	0x01e84800

08003560 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d115      	bne.n	80035f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7fd fb80 	bl	8000cd8 <HAL_Delay>
      ms++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 f972 	bl	80048c8 <USB_GetMode>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d01e      	beq.n	8003628 <USB_SetCurrentMode+0x84>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b31      	cmp	r3, #49	; 0x31
 80035ee:	d9f0      	bls.n	80035d2 <USB_SetCurrentMode+0x2e>
 80035f0:	e01a      	b.n	8003628 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d115      	bne.n	8003624 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003604:	2001      	movs	r0, #1
 8003606:	f7fd fb67 	bl	8000cd8 <HAL_Delay>
      ms++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 f959 	bl	80048c8 <USB_GetMode>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <USB_SetCurrentMode+0x84>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b31      	cmp	r3, #49	; 0x31
 8003620:	d9f0      	bls.n	8003604 <USB_SetCurrentMode+0x60>
 8003622:	e001      	b.n	8003628 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e005      	b.n	8003634 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b32      	cmp	r3, #50	; 0x32
 800362c:	d101      	bne.n	8003632 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800363c:	b084      	sub	sp, #16
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800364a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e009      	b.n	8003670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3340      	adds	r3, #64	; 0x40
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	2200      	movs	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3301      	adds	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b0e      	cmp	r3, #14
 8003674:	d9f2      	bls.n	800365c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11c      	bne.n	80036b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
 80036b4:	e00b      	b.n	80036ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036d4:	461a      	mov	r2, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	4619      	mov	r1, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	461a      	mov	r2, r3
 80036ea:	680b      	ldr	r3, [r1, #0]
 80036ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10c      	bne.n	800370e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036fa:	2100      	movs	r1, #0
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f945 	bl	800398c <USB_SetDevSpeed>
 8003702:	e008      	b.n	8003716 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003704:	2101      	movs	r1, #1
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f940 	bl	800398c <USB_SetDevSpeed>
 800370c:	e003      	b.n	8003716 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800370e:	2103      	movs	r1, #3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f93b 	bl	800398c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003716:	2110      	movs	r1, #16
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8f3 	bl	8003904 <USB_FlushTxFifo>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f90f 	bl	800394c <USB_FlushRxFifo>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003756:	461a      	mov	r2, r3
 8003758:	2300      	movs	r3, #0
 800375a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e043      	b.n	80037ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003778:	d118      	bne.n	80037ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	461a      	mov	r2, r3
 800378e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e013      	b.n	80037be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	461a      	mov	r2, r3
 80037a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e008      	b.n	80037be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	461a      	mov	r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	3301      	adds	r3, #1
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3b7      	bcc.n	8003762 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	e043      	b.n	8003880 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800380a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380e:	d118      	bne.n	8003842 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003822:	461a      	mov	r2, r3
 8003824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e013      	b.n	8003854 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e008      	b.n	8003854 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	2300      	movs	r3, #0
 8003864:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3301      	adds	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3b7      	bcc.n	80037f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f043 0210 	orr.w	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <USB_DevInit+0x2c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f043 0208 	orr.w	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038fc:	b004      	add	sp, #16
 80038fe:	4770      	bx	lr
 8003900:	803c3800 	.word	0x803c3800

08003904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3301      	adds	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <USB_FlushTxFifo+0x44>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e006      	b.n	800393c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d0f1      	beq.n	800391e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	00030d40 	.word	0x00030d40

0800394c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2210      	movs	r2, #16
 800395c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	4a08      	ldr	r2, [pc, #32]	; (8003988 <USB_FlushRxFifo+0x3c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e006      	b.n	800397c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b10      	cmp	r3, #16
 8003978:	d0f1      	beq.n	800395e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	00030d40 	.word	0x00030d40

0800398c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039be:	b480      	push	{r7}
 80039c0:	b087      	sub	sp, #28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0306 	and.w	r3, r3, #6
 80039d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]
 80039e2:	e00a      	b.n	80039fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d002      	beq.n	80039f0 <USB_GetDevSpeed+0x32>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d102      	bne.n	80039f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039f0:	2302      	movs	r3, #2
 80039f2:	75fb      	strb	r3, [r7, #23]
 80039f4:	e001      	b.n	80039fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039f6:	230f      	movs	r3, #15
 80039f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d13a      	bne.n	8003a9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	2101      	movs	r1, #1
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	68f9      	ldr	r1, [r7, #12]
 8003a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d155      	bne.n	8003b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	78db      	ldrb	r3, [r3, #3]
 8003a76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	059b      	lsls	r3, r3, #22
 8003a7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a80:	4313      	orrs	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e036      	b.n	8003b08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	68f9      	ldr	r1, [r7, #12]
 8003ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11a      	bne.n	8003b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aee:	430b      	orrs	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d161      	bne.n	8003bf8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4a:	d11f      	bne.n	8003b8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	0151      	lsls	r1, r2, #5
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	440a      	add	r2, r1
 8003b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	68f9      	ldr	r1, [r7, #12]
 8003ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bac:	4013      	ands	r3, r2
 8003bae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	0159      	lsls	r1, r3, #5
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <USB_DeactivateEndpoint+0x1b0>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]
 8003bf6:	e060      	b.n	8003cba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0e:	d11f      	bne.n	8003c50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	2101      	movs	r1, #1
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c70:	4013      	ands	r3, r2
 8003c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c94:	4013      	ands	r3, r2
 8003c96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0159      	lsls	r1, r3, #5
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <USB_DeactivateEndpoint+0x1b4>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	ec337800 	.word	0xec337800
 8003ccc:	eff37800 	.word	0xeff37800

08003cd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	f040 815c 	bne.w	8003faa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d132      	bne.n	8003d60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	0151      	lsls	r1, r2, #5
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	440a      	add	r2, r1
 8003d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d58:	0cdb      	lsrs	r3, r3, #19
 8003d5a:	04db      	lsls	r3, r3, #19
 8003d5c:	6113      	str	r3, [r2, #16]
 8003d5e:	e074      	b.n	8003e4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7a:	0cdb      	lsrs	r3, r3, #19
 8003d7c:	04db      	lsls	r3, r3, #19
 8003d7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003da2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6959      	ldr	r1, [r3, #20]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	440b      	add	r3, r1
 8003dbc:	1e59      	subs	r1, r3, #1
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003dc8:	4b9d      	ldr	r3, [pc, #628]	; (8004040 <USB_EPStartXfer+0x370>)
 8003dca:	400b      	ands	r3, r1
 8003dcc:	69b9      	ldr	r1, [r7, #24]
 8003dce:	0148      	lsls	r0, r1, #5
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	4401      	add	r1, r0
 8003dd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df2:	69b9      	ldr	r1, [r7, #24]
 8003df4:	0148      	lsls	r0, r1, #5
 8003df6:	69f9      	ldr	r1, [r7, #28]
 8003df8:	4401      	add	r1, r0
 8003dfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	78db      	ldrb	r3, [r3, #3]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d11f      	bne.n	8003e4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d14b      	bne.n	8003ee8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	78db      	ldrb	r3, [r3, #3]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d128      	bne.n	8003ec6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d110      	bne.n	8003ea6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e00f      	b.n	8003ec6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e12f      	b.n	8004148 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	78db      	ldrb	r3, [r3, #3]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d015      	beq.n	8003f3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8117 	beq.w	8004148 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	69f9      	ldr	r1, [r7, #28]
 8003f32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f36:	4313      	orrs	r3, r2
 8003f38:	634b      	str	r3, [r1, #52]	; 0x34
 8003f3a:	e105      	b.n	8004148 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d110      	bne.n	8003f6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	e00f      	b.n	8003f8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68d9      	ldr	r1, [r3, #12]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	b298      	uxth	r0, r3
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fa2b 	bl	80043fe <USB_WritePacket>
 8003fa8:	e0ce      	b.n	8004148 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	0151      	lsls	r1, r2, #5
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc4:	0cdb      	lsrs	r3, r3, #19
 8003fc6:	04db      	lsls	r3, r3, #19
 8003fc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d126      	bne.n	8004044 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400c:	69b9      	ldr	r1, [r7, #24]
 800400e:	0148      	lsls	r0, r1, #5
 8004010:	69f9      	ldr	r1, [r7, #28]
 8004012:	4401      	add	r1, r0
 8004014:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004018:	4313      	orrs	r3, r2
 800401a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800403a:	6113      	str	r3, [r2, #16]
 800403c:	e036      	b.n	80040ac <USB_EPStartXfer+0x3dc>
 800403e:	bf00      	nop
 8004040:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4413      	add	r3, r2
 800404e:	1e5a      	subs	r2, r3, #1
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	8afb      	ldrh	r3, [r7, #22]
 800406a:	04d9      	lsls	r1, r3, #19
 800406c:	4b39      	ldr	r3, [pc, #228]	; (8004154 <USB_EPStartXfer+0x484>)
 800406e:	400b      	ands	r3, r1
 8004070:	69b9      	ldr	r1, [r7, #24]
 8004072:	0148      	lsls	r0, r1, #5
 8004074:	69f9      	ldr	r1, [r7, #28]
 8004076:	4401      	add	r1, r0
 8004078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800407c:	4313      	orrs	r3, r2
 800407e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	8af9      	ldrh	r1, [r7, #22]
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	0148      	lsls	r0, r1, #5
 80040a0:	69f9      	ldr	r1, [r7, #28]
 80040a2:	4401      	add	r1, r0
 80040a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10d      	bne.n	80040ce <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	68d9      	ldr	r1, [r3, #12]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	460a      	mov	r2, r1
 80040cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	78db      	ldrb	r3, [r3, #3]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d128      	bne.n	8004128 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d110      	bne.n	8004108 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e00f      	b.n	8004128 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	1ff80000 	.word	0x1ff80000

08004158 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80cd 	bne.w	8004314 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d132      	bne.n	80041e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e0:	0cdb      	lsrs	r3, r3, #19
 80041e2:	04db      	lsls	r3, r3, #19
 80041e4:	6113      	str	r3, [r2, #16]
 80041e6:	e04e      	b.n	8004286 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004202:	0cdb      	lsrs	r3, r3, #19
 8004204:	04db      	lsls	r3, r3, #19
 8004206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004222:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004226:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800422a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d903      	bls.n	8004240 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800425e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	6939      	ldr	r1, [r7, #16]
 8004278:	0148      	lsls	r0, r1, #5
 800427a:	6979      	ldr	r1, [r7, #20]
 800427c:	4401      	add	r1, r0
 800427e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d11e      	bne.n	80042ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	461a      	mov	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	e092      	b.n	80043f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d07e      	beq.n	80043f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	2101      	movs	r1, #1
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	6979      	ldr	r1, [r7, #20]
 800430a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430e:	4313      	orrs	r3, r2
 8004310:	634b      	str	r3, [r1, #52]	; 0x34
 8004312:	e06d      	b.n	80043f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	440a      	add	r2, r1
 800432a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800432e:	0cdb      	lsrs	r3, r3, #19
 8004330:	04db      	lsls	r3, r3, #19
 8004332:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004352:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004356:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	6939      	ldr	r1, [r7, #16]
 80043a0:	0148      	lsls	r0, r1, #5
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	4401      	add	r1, r0
 80043a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d10d      	bne.n	80043d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	68d9      	ldr	r1, [r3, #12]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043cc:	460a      	mov	r2, r1
 80043ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043fe:	b480      	push	{r7}
 8004400:	b089      	sub	sp, #36	; 0x24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	4611      	mov	r1, r2
 800440a:	461a      	mov	r2, r3
 800440c:	460b      	mov	r3, r1
 800440e:	71fb      	strb	r3, [r7, #7]
 8004410:	4613      	mov	r3, r2
 8004412:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800441c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d123      	bne.n	800446c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004424:	88bb      	ldrh	r3, [r7, #4]
 8004426:	3303      	adds	r3, #3
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e018      	b.n	8004464 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	031a      	lsls	r2, r3, #12
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	4413      	add	r3, r2
 800443a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443e:	461a      	mov	r2, r3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3301      	adds	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	3301      	adds	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3301      	adds	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3301      	adds	r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d3e2      	bcc.n	8004432 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	; 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800447a:	b480      	push	{r7}
 800447c:	b08b      	sub	sp, #44	; 0x2c
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	4613      	mov	r3, r2
 8004486:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	b29b      	uxth	r3, r3
 8004496:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80044a0:	2300      	movs	r3, #0
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	e014      	b.n	80044d0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	3301      	adds	r3, #1
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	3301      	adds	r3, #1
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	3301      	adds	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	3301      	adds	r3, #1
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	3301      	adds	r3, #1
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d3e6      	bcc.n	80044a6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80044d8:	8bfb      	ldrh	r3, [r7, #30]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01e      	beq.n	800451c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e8:	461a      	mov	r2, r3
 80044ea:	f107 0310 	add.w	r3, r7, #16
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	701a      	strb	r2, [r3, #0]
      i++;
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	3301      	adds	r3, #1
 8004508:	623b      	str	r3, [r7, #32]
      pDest++;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	3301      	adds	r3, #1
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004510:	8bfb      	ldrh	r3, [r7, #30]
 8004512:	3b01      	subs	r3, #1
 8004514:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004516:	8bfb      	ldrh	r3, [r7, #30]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ea      	bne.n	80044f2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800451e:	4618      	mov	r0, r3
 8004520:	372c      	adds	r7, #44	; 0x2c
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d12c      	bne.n	80045a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db12      	blt.n	800457e <USB_EPSetStall+0x54>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00f      	beq.n	800457e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800457c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	440a      	add	r2, r1
 8004594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e02b      	b.n	80045f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	db12      	blt.n	80045d8 <USB_EPSetStall+0xae>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00f      	beq.n	80045d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	0151      	lsls	r1, r2, #5
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	440a      	add	r2, r1
 80045ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d128      	bne.n	8004674 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004640:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	78db      	ldrb	r3, [r3, #3]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d003      	beq.n	8004652 <USB_EPClearStall+0x4c>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	78db      	ldrb	r3, [r3, #3]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d138      	bne.n	80046c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e027      	b.n	80046c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004692:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	78db      	ldrb	r3, [r3, #3]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d003      	beq.n	80046a4 <USB_EPClearStall+0x9e>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	78db      	ldrb	r3, [r3, #3]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d10f      	bne.n	80046c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004738:	f023 0303 	bic.w	r3, r3, #3
 800473c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800474c:	f023 0302 	bic.w	r3, r3, #2
 8004750:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4013      	ands	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047ba:	68fb      	ldr	r3, [r7, #12]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	0c1b      	lsrs	r3, r3, #16
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	b29b      	uxth	r3, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800485e:	68bb      	ldr	r3, [r7, #8]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	01db      	lsls	r3, r3, #7
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048ba:	68bb      	ldr	r3, [r7, #8]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0301 	and.w	r3, r3, #1
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	460b      	mov	r3, r1
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	333c      	adds	r3, #60	; 0x3c
 8004942:	3304      	adds	r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <USB_EP0_OutStart+0xb8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d90a      	bls.n	8004966 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800495c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004960:	d101      	bne.n	8004966 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	e037      	b.n	80049d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	2300      	movs	r3, #0
 8004970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	f043 0318 	orr.w	r3, r3, #24
 8004998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10f      	bne.n	80049d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80049d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	4f54300a 	.word	0x4f54300a

080049e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3301      	adds	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <USB_CoreReset+0x60>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e01a      	b.n	8004a3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	daf3      	bge.n	80049f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f043 0201 	orr.w	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <USB_CoreReset+0x60>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e006      	b.n	8004a3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d0f1      	beq.n	8004a1c <USB_CoreReset+0x34>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	00030d40 	.word	0x00030d40

08004a4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a5c:	f004 fe2a 	bl	80096b4 <USBD_static_malloc>
 8004a60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004a70:	2302      	movs	r3, #2
 8004a72:	e066      	b.n	8004b42 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7c1b      	ldrb	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d119      	bne.n	8004ab8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a88:	2202      	movs	r2, #2
 8004a8a:	2181      	movs	r1, #129	; 0x81
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f004 fcee 	bl	800946e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f004 fce4 	bl	800946e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004ab6:	e016      	b.n	8004ae6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	2202      	movs	r2, #2
 8004abc:	2181      	movs	r1, #129	; 0x81
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f004 fcd5 	bl	800946e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004aca:	2340      	movs	r3, #64	; 0x40
 8004acc:	2202      	movs	r2, #2
 8004ace:	2101      	movs	r1, #1
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f004 fccc 	bl	800946e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	2203      	movs	r2, #3
 8004aea:	2182      	movs	r1, #130	; 0x82
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f004 fcbe 	bl	800946e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7c1b      	ldrb	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b26:	2101      	movs	r1, #1
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f004 fd8f 	bl	800964c <USBD_LL_PrepareReceive>
 8004b2e:	e007      	b.n	8004b40 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	2101      	movs	r1, #1
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f004 fd86 	bl	800964c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b56:	2181      	movs	r1, #129	; 0x81
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f004 fcae 	bl	80094ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b64:	2101      	movs	r1, #1
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f004 fca7 	bl	80094ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b74:	2182      	movs	r1, #130	; 0x82
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f004 fc9f 	bl	80094ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00e      	beq.n	8004bb4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fd92 	bl	80096d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0af      	b.n	8004d48 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03f      	beq.n	8004c74 <USBD_CDC_Setup+0xb4>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	f040 809f 	bne.w	8004d38 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	88db      	ldrh	r3, [r3, #6]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02e      	beq.n	8004c60 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	da16      	bge.n	8004c3a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004c18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	88d2      	ldrh	r2, [r2, #6]
 8004c1e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	88db      	ldrh	r3, [r3, #6]
 8004c24:	2b07      	cmp	r3, #7
 8004c26:	bf28      	it	cs
 8004c28:	2307      	movcs	r3, #7
 8004c2a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	89fa      	ldrh	r2, [r7, #14]
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f001 fb19 	bl	800626a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004c38:	e085      	b.n	8004d46 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	785a      	ldrb	r2, [r3, #1]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	88db      	ldrh	r3, [r3, #6]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c50:	6939      	ldr	r1, [r7, #16]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	88db      	ldrh	r3, [r3, #6]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 fb32 	bl	80062c2 <USBD_CtlPrepareRx>
      break;
 8004c5e:	e072      	b.n	8004d46 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	7850      	ldrb	r0, [r2, #1]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4798      	blx	r3
      break;
 8004c72:	e068      	b.n	8004d46 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b0b      	cmp	r3, #11
 8004c7a:	d852      	bhi.n	8004d22 <USBD_CDC_Setup+0x162>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <USBD_CDC_Setup+0xc4>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004cb5 	.word	0x08004cb5
 8004c88:	08004d31 	.word	0x08004d31
 8004c8c:	08004d23 	.word	0x08004d23
 8004c90:	08004d23 	.word	0x08004d23
 8004c94:	08004d23 	.word	0x08004d23
 8004c98:	08004d23 	.word	0x08004d23
 8004c9c:	08004d23 	.word	0x08004d23
 8004ca0:	08004d23 	.word	0x08004d23
 8004ca4:	08004d23 	.word	0x08004d23
 8004ca8:	08004d23 	.word	0x08004d23
 8004cac:	08004cdf 	.word	0x08004cdf
 8004cb0:	08004d09 	.word	0x08004d09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d107      	bne.n	8004cd0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004cc0:	f107 030a 	add.w	r3, r7, #10
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 face 	bl	800626a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cce:	e032      	b.n	8004d36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 fa58 	bl	8006188 <USBD_CtlError>
            ret = USBD_FAIL;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	75fb      	strb	r3, [r7, #23]
          break;
 8004cdc:	e02b      	b.n	8004d36 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d107      	bne.n	8004cfa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004cea:	f107 030d 	add.w	r3, r7, #13
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f001 fab9 	bl	800626a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cf8:	e01d      	b.n	8004d36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 fa43 	bl	8006188 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d02:	2303      	movs	r3, #3
 8004d04:	75fb      	strb	r3, [r7, #23]
          break;
 8004d06:	e016      	b.n	8004d36 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d00f      	beq.n	8004d34 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 fa36 	bl	8006188 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d20:	e008      	b.n	8004d34 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 fa2f 	bl	8006188 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d2e:	e002      	b.n	8004d36 <USBD_CDC_Setup+0x176>
          break;
 8004d30:	bf00      	nop
 8004d32:	e008      	b.n	8004d46 <USBD_CDC_Setup+0x186>
          break;
 8004d34:	bf00      	nop
      }
      break;
 8004d36:	e006      	b.n	8004d46 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 fa24 	bl	8006188 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d40:	2303      	movs	r3, #3
 8004d42:	75fb      	strb	r3, [r7, #23]
      break;
 8004d44:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004d62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e04f      	b.n	8004e12 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3318      	adds	r3, #24
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d029      	beq.n	8004de4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3318      	adds	r3, #24
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	78f9      	ldrb	r1, [r7, #3]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	460b      	mov	r3, r1
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	1a5b      	subs	r3, r3, r1
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4403      	add	r3, r0
 8004db0:	3344      	adds	r3, #68	; 0x44
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004db8:	fb03 f301 	mul.w	r3, r3, r1
 8004dbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d110      	bne.n	8004de4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	3318      	adds	r3, #24
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004dd6:	78f9      	ldrb	r1, [r7, #3]
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2200      	movs	r2, #0
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f004 fc14 	bl	800960a <USBD_LL_Transmit>
 8004de2:	e015      	b.n	8004e10 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e015      	b.n	8004e68 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f004 fc24 	bl	800968e <USBD_LL_GetRxDataSize>
 8004e46:	4602      	mov	r2, r0
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e62:	4611      	mov	r1, r2
 8004e64:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e01b      	b.n	8004ec2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <USBD_CDC_EP0_RxReady+0x50>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e9a:	2bff      	cmp	r3, #255	; 0xff
 8004e9c:	d010      	beq.n	8004ec0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004eac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2243      	movs	r2, #67	; 0x43
 8004ed8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004eda:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	20000094 	.word	0x20000094

08004eec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2243      	movs	r2, #67	; 0x43
 8004ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004efa:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	20000050 	.word	0x20000050

08004f0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2243      	movs	r2, #67	; 0x43
 8004f18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	200000d8 	.word	0x200000d8

08004f2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	220a      	movs	r2, #10
 8004f38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f3a:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	2000000c 	.word	0x2000000c

08004f4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e004      	b.n	8004f6a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f88:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e008      	b.n	8004fa6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e004      	b.n	8004fd8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005002:	2303      	movs	r3, #3
 8005004:	e01a      	b.n	800503c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800500c:	2b00      	cmp	r3, #0
 800500e:	d114      	bne.n	800503a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2201      	movs	r2, #1
 8005014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800502e:	2181      	movs	r1, #129	; 0x81
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f004 faea 	bl	800960a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005052:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800505e:	2303      	movs	r3, #3
 8005060:	e016      	b.n	8005090 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7c1b      	ldrb	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005074:	2101      	movs	r1, #1
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f004 fae8 	bl	800964c <USBD_LL_PrepareReceive>
 800507c:	e007      	b.n	800508e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005084:	2340      	movs	r3, #64	; 0x40
 8005086:	2101      	movs	r1, #1
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f004 fadf 	bl	800964c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e01f      	b.n	80050f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	79fa      	ldrb	r2, [r7, #7]
 80050e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f004 f95b 	bl	80093a0 <USBD_LL_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800510c:	2303      	movs	r3, #3
 800510e:	e016      	b.n	800513e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	f107 020e 	add.w	r2, r7, #14
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
 8005134:	4602      	mov	r2, r0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f004 f972 	bl	8009438 <USBD_LL_Start>
 8005154:	4603      	mov	r3, r0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005180:	2303      	movs	r3, #3
 8005182:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	4611      	mov	r1, r2
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
 800519e:	4603      	mov	r3, r0
 80051a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	4611      	mov	r1, r2
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
  }

  return USBD_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 ff90 	bl	8006114 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005202:	461a      	mov	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2b02      	cmp	r3, #2
 8005216:	d01a      	beq.n	800524e <USBD_LL_SetupStage+0x72>
 8005218:	2b02      	cmp	r3, #2
 800521a:	d822      	bhi.n	8005262 <USBD_LL_SetupStage+0x86>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <USBD_LL_SetupStage+0x4a>
 8005220:	2b01      	cmp	r3, #1
 8005222:	d00a      	beq.n	800523a <USBD_LL_SetupStage+0x5e>
 8005224:	e01d      	b.n	8005262 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa62 	bl	80056f8 <USBD_StdDevReq>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e020      	b.n	800527c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fac6 	bl	80057d4 <USBD_StdItfReq>
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
      break;
 800524c:	e016      	b.n	800527c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fb05 	bl	8005866 <USBD_StdEPReq>
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]
      break;
 8005260:	e00c      	b.n	800527c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005268:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800526c:	b2db      	uxtb	r3, r3
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f004 f941 	bl	80094f8 <USBD_LL_StallEP>
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
      break;
 800527a:	bf00      	nop
  }

  return ret;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	460b      	mov	r3, r1
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d138      	bne.n	800530c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d14a      	bne.n	8005342 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d913      	bls.n	80052e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bf28      	it	cs
 80052d2:	4613      	movcs	r3, r2
 80052d4:	461a      	mov	r2, r3
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f001 f80f 	bl	80062fc <USBD_CtlContinueRx>
 80052de:	e030      	b.n	8005342 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d10b      	bne.n	8005304 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f001 f80a 	bl	800631e <USBD_CtlSendStatus>
 800530a:	e01a      	b.n	8005342 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b03      	cmp	r3, #3
 8005316:	d114      	bne.n	8005342 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	7afa      	ldrb	r2, [r7, #11]
 800532e:	4611      	mov	r1, r2
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	4798      	blx	r3
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
 8005340:	e000      	b.n	8005344 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	460b      	mov	r3, r1
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800535a:	7afb      	ldrb	r3, [r7, #11]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d16b      	bne.n	8005438 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3314      	adds	r3, #20
 8005364:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800536c:	2b02      	cmp	r3, #2
 800536e:	d156      	bne.n	800541e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	429a      	cmp	r2, r3
 800537a:	d914      	bls.n	80053a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	461a      	mov	r2, r3
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 ff84 	bl	80062a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005398:	2300      	movs	r3, #0
 800539a:	2200      	movs	r2, #0
 800539c:	2100      	movs	r1, #0
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f004 f954 	bl	800964c <USBD_LL_PrepareReceive>
 80053a4:	e03b      	b.n	800541e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d11c      	bne.n	80053ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d316      	bcc.n	80053ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d20f      	bcs.n	80053ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2100      	movs	r1, #0
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 ff65 	bl	80062a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053de:	2300      	movs	r3, #0
 80053e0:	2200      	movs	r2, #0
 80053e2:	2100      	movs	r1, #0
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f004 f931 	bl	800964c <USBD_LL_PrepareReceive>
 80053ea:	e018      	b.n	800541e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d10b      	bne.n	8005410 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f004 f870 	bl	80094f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 ff93 	bl	8006344 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005424:	2b01      	cmp	r3, #1
 8005426:	d122      	bne.n	800546e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f7ff fe98 	bl	800515e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005436:	e01a      	b.n	800546e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b03      	cmp	r3, #3
 8005442:	d114      	bne.n	800546e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	7afa      	ldrb	r2, [r7, #11]
 800545a:	4611      	mov	r1, r2
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	4798      	blx	r3
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	e000      	b.n	8005470 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e02f      	b.n	800550c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00f      	beq.n	80054d6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6852      	ldr	r2, [r2, #4]
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	4611      	mov	r1, r2
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054d6:	2340      	movs	r3, #64	; 0x40
 80054d8:	2200      	movs	r2, #0
 80054da:	2100      	movs	r1, #0
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f003 ffc6 	bl	800946e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2240      	movs	r2, #64	; 0x40
 80054ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f003 ffb8 	bl	800946e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2240      	movs	r2, #64	; 0x40
 8005508:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005542:	b2da      	uxtb	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2204      	movs	r2, #4
 800554e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b04      	cmp	r3, #4
 8005572:	d106      	bne.n	8005582 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800557a:	b2da      	uxtb	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e012      	b.n	80055cc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d10b      	bne.n	80055ca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e014      	b.n	8005618 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d10d      	bne.n	8005616 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	4611      	mov	r1, r2
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005636:	2303      	movs	r3, #3
 8005638:	e014      	b.n	8005664 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b03      	cmp	r3, #3
 8005644:	d10d      	bne.n	8005662 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	4611      	mov	r1, r2
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6852      	ldr	r2, [r2, #4]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	4611      	mov	r1, r2
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
  }

  return USBD_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3301      	adds	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80056d8:	8a3b      	ldrh	r3, [r7, #16]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	b21a      	sxth	r2, r3
 80056de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	b21b      	sxth	r3, r3
 80056e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80056e8:	89fb      	ldrh	r3, [r7, #14]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d005      	beq.n	800571e <USBD_StdDevReq+0x26>
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d853      	bhi.n	80057be <USBD_StdDevReq+0xc6>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <USBD_StdDevReq+0x3a>
 800571a:	2b20      	cmp	r3, #32
 800571c:	d14f      	bne.n	80057be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
      break;
 8005730:	e04a      	b.n	80057c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b09      	cmp	r3, #9
 8005738:	d83b      	bhi.n	80057b2 <USBD_StdDevReq+0xba>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <USBD_StdDevReq+0x48>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005795 	.word	0x08005795
 8005744:	080057a9 	.word	0x080057a9
 8005748:	080057b3 	.word	0x080057b3
 800574c:	0800579f 	.word	0x0800579f
 8005750:	080057b3 	.word	0x080057b3
 8005754:	08005773 	.word	0x08005773
 8005758:	08005769 	.word	0x08005769
 800575c:	080057b3 	.word	0x080057b3
 8005760:	0800578b 	.word	0x0800578b
 8005764:	0800577d 	.word	0x0800577d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f9de 	bl	8005b2c <USBD_GetDescriptor>
          break;
 8005770:	e024      	b.n	80057bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb43 	bl	8005e00 <USBD_SetAddress>
          break;
 800577a:	e01f      	b.n	80057bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fb82 	bl	8005e88 <USBD_SetConfig>
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
          break;
 8005788:	e018      	b.n	80057bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fc21 	bl	8005fd4 <USBD_GetConfig>
          break;
 8005792:	e013      	b.n	80057bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fc52 	bl	8006040 <USBD_GetStatus>
          break;
 800579c:	e00e      	b.n	80057bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fc81 	bl	80060a8 <USBD_SetFeature>
          break;
 80057a6:	e009      	b.n	80057bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fc90 	bl	80060d0 <USBD_ClrFeature>
          break;
 80057b0:	e004      	b.n	80057bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fce7 	bl	8006188 <USBD_CtlError>
          break;
 80057ba:	bf00      	nop
      }
      break;
 80057bc:	e004      	b.n	80057c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fce1 	bl	8006188 <USBD_CtlError>
      break;
 80057c6:	bf00      	nop
  }

  return ret;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop

080057d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	d005      	beq.n	80057fa <USBD_StdItfReq+0x26>
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d82f      	bhi.n	8005852 <USBD_StdItfReq+0x7e>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <USBD_StdItfReq+0x26>
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d12b      	bne.n	8005852 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005800:	b2db      	uxtb	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	2b02      	cmp	r3, #2
 8005806:	d81d      	bhi.n	8005844 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	889b      	ldrh	r3, [r3, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d813      	bhi.n	800583a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	88db      	ldrh	r3, [r3, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d110      	bne.n	800584e <USBD_StdItfReq+0x7a>
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fd73 	bl	800631e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005838:	e009      	b.n	800584e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fca3 	bl	8006188 <USBD_CtlError>
          break;
 8005842:	e004      	b.n	800584e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fc9e 	bl	8006188 <USBD_CtlError>
          break;
 800584c:	e000      	b.n	8005850 <USBD_StdItfReq+0x7c>
          break;
 800584e:	bf00      	nop
      }
      break;
 8005850:	e004      	b.n	800585c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fc97 	bl	8006188 <USBD_CtlError>
      break;
 800585a:	bf00      	nop
  }

  return ret;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	889b      	ldrh	r3, [r3, #4]
 8005878:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d007      	beq.n	8005896 <USBD_StdEPReq+0x30>
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	f200 8145 	bhi.w	8005b16 <USBD_StdEPReq+0x2b0>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <USBD_StdEPReq+0x44>
 8005890:	2b20      	cmp	r3, #32
 8005892:	f040 8140 	bne.w	8005b16 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]
      break;
 80058a8:	e13a      	b.n	8005b20 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d007      	beq.n	80058c2 <USBD_StdEPReq+0x5c>
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	f300 8129 	bgt.w	8005b0a <USBD_StdEPReq+0x2a4>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d07f      	beq.n	80059bc <USBD_StdEPReq+0x156>
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d03c      	beq.n	800593a <USBD_StdEPReq+0xd4>
 80058c0:	e123      	b.n	8005b0a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d002      	beq.n	80058d4 <USBD_StdEPReq+0x6e>
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d016      	beq.n	8005900 <USBD_StdEPReq+0x9a>
 80058d2:	e02c      	b.n	800592e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <USBD_StdEPReq+0x90>
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d00a      	beq.n	80058f6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f003 fe07 	bl	80094f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ea:	2180      	movs	r1, #128	; 0x80
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f003 fe03 	bl	80094f8 <USBD_LL_StallEP>
 80058f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058f4:	e020      	b.n	8005938 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fc45 	bl	8006188 <USBD_CtlError>
              break;
 80058fe:	e01b      	b.n	8005938 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	885b      	ldrh	r3, [r3, #2]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10e      	bne.n	8005926 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <USBD_StdEPReq+0xc0>
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d008      	beq.n	8005926 <USBD_StdEPReq+0xc0>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	88db      	ldrh	r3, [r3, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f003 fde9 	bl	80094f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fcf9 	bl	800631e <USBD_CtlSendStatus>

              break;
 800592c:	e004      	b.n	8005938 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fc29 	bl	8006188 <USBD_CtlError>
              break;
 8005936:	bf00      	nop
          }
          break;
 8005938:	e0ec      	b.n	8005b14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d002      	beq.n	800594c <USBD_StdEPReq+0xe6>
 8005946:	2b03      	cmp	r3, #3
 8005948:	d016      	beq.n	8005978 <USBD_StdEPReq+0x112>
 800594a:	e030      	b.n	80059ae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00d      	beq.n	800596e <USBD_StdEPReq+0x108>
 8005952:	7bbb      	ldrb	r3, [r7, #14]
 8005954:	2b80      	cmp	r3, #128	; 0x80
 8005956:	d00a      	beq.n	800596e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005958:	7bbb      	ldrb	r3, [r7, #14]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f003 fdcb 	bl	80094f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f003 fdc7 	bl	80094f8 <USBD_LL_StallEP>
 800596a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800596c:	e025      	b.n	80059ba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fc09 	bl	8006188 <USBD_CtlError>
              break;
 8005976:	e020      	b.n	80059ba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	885b      	ldrh	r3, [r3, #2]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11b      	bne.n	80059b8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800598a:	7bbb      	ldrb	r3, [r7, #14]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f003 fdd1 	bl	8009536 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fcc2 	bl	800631e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80059ac:	e004      	b.n	80059b8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fbe9 	bl	8006188 <USBD_CtlError>
              break;
 80059b6:	e000      	b.n	80059ba <USBD_StdEPReq+0x154>
              break;
 80059b8:	bf00      	nop
          }
          break;
 80059ba:	e0ab      	b.n	8005b14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d002      	beq.n	80059ce <USBD_StdEPReq+0x168>
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d032      	beq.n	8005a32 <USBD_StdEPReq+0x1cc>
 80059cc:	e097      	b.n	8005afe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <USBD_StdEPReq+0x17e>
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d004      	beq.n	80059e4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fbd3 	bl	8006188 <USBD_CtlError>
                break;
 80059e2:	e091      	b.n	8005b08 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da0b      	bge.n	8005a04 <USBD_StdEPReq+0x19e>
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	3310      	adds	r3, #16
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	4413      	add	r3, r2
 8005a00:	3304      	adds	r3, #4
 8005a02:	e00b      	b.n	8005a1c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	4413      	add	r3, r2
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2202      	movs	r2, #2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fc1d 	bl	800626a <USBD_CtlSendData>
              break;
 8005a30:	e06a      	b.n	8005b08 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da11      	bge.n	8005a5e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	f003 020f 	and.w	r2, r3, #15
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3324      	adds	r3, #36	; 0x24
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d117      	bne.n	8005a84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb96 	bl	8006188 <USBD_CtlError>
                  break;
 8005a5c:	e054      	b.n	8005b08 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	f003 020f 	and.w	r2, r3, #15
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fb83 	bl	8006188 <USBD_CtlError>
                  break;
 8005a82:	e041      	b.n	8005b08 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da0b      	bge.n	8005aa4 <USBD_StdEPReq+0x23e>
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	3310      	adds	r3, #16
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	e00b      	b.n	8005abc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4413      	add	r3, r2
 8005aba:	3304      	adds	r3, #4
 8005abc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <USBD_StdEPReq+0x264>
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d103      	bne.n	8005ad2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	e00e      	b.n	8005af0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f003 fd4c 	bl	8009574 <USBD_LL_IsStallEP>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e002      	b.n	8005af0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2202      	movs	r2, #2
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fbb7 	bl	800626a <USBD_CtlSendData>
              break;
 8005afc:	e004      	b.n	8005b08 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fb41 	bl	8006188 <USBD_CtlError>
              break;
 8005b06:	bf00      	nop
          }
          break;
 8005b08:	e004      	b.n	8005b14 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fb3b 	bl	8006188 <USBD_CtlError>
          break;
 8005b12:	bf00      	nop
      }
      break;
 8005b14:	e004      	b.n	8005b20 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fb35 	bl	8006188 <USBD_CtlError>
      break;
 8005b1e:	bf00      	nop
  }

  return ret;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	885b      	ldrh	r3, [r3, #2]
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	2b06      	cmp	r3, #6
 8005b4e:	f200 8128 	bhi.w	8005da2 <USBD_GetDescriptor+0x276>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <USBD_GetDescriptor+0x2c>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b75 	.word	0x08005b75
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005bcd 	.word	0x08005bcd
 8005b64:	08005da3 	.word	0x08005da3
 8005b68:	08005da3 	.word	0x08005da3
 8005b6c:	08005d43 	.word	0x08005d43
 8005b70:	08005d6f 	.word	0x08005d6f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	7c12      	ldrb	r2, [r2, #16]
 8005b80:	f107 0108 	add.w	r1, r7, #8
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
 8005b88:	60f8      	str	r0, [r7, #12]
      break;
 8005b8a:	e112      	b.n	8005db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	7c1b      	ldrb	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10d      	bne.n	8005bb0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	f107 0208 	add.w	r2, r7, #8
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4798      	blx	r3
 8005ba4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	2202      	movs	r2, #2
 8005bac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005bae:	e100      	b.n	8005db2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	f107 0208 	add.w	r2, r7, #8
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4798      	blx	r3
 8005bc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	701a      	strb	r2, [r3, #0]
      break;
 8005bca:	e0f2      	b.n	8005db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	885b      	ldrh	r3, [r3, #2]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	f200 80ac 	bhi.w	8005d30 <USBD_GetDescriptor+0x204>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <USBD_GetDescriptor+0xb4>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005bf9 	.word	0x08005bf9
 8005be4:	08005c2d 	.word	0x08005c2d
 8005be8:	08005c61 	.word	0x08005c61
 8005bec:	08005c95 	.word	0x08005c95
 8005bf0:	08005cc9 	.word	0x08005cc9
 8005bf4:	08005cfd 	.word	0x08005cfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	7c12      	ldrb	r2, [r2, #16]
 8005c10:	f107 0108 	add.w	r1, r7, #8
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c1a:	e091      	b.n	8005d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fab2 	bl	8006188 <USBD_CtlError>
            err++;
 8005c24:	7afb      	ldrb	r3, [r7, #11]
 8005c26:	3301      	adds	r3, #1
 8005c28:	72fb      	strb	r3, [r7, #11]
          break;
 8005c2a:	e089      	b.n	8005d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	7c12      	ldrb	r2, [r2, #16]
 8005c44:	f107 0108 	add.w	r1, r7, #8
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4798      	blx	r3
 8005c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c4e:	e077      	b.n	8005d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa98 	bl	8006188 <USBD_CtlError>
            err++;
 8005c58:	7afb      	ldrb	r3, [r7, #11]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c5e:	e06f      	b.n	8005d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	7c12      	ldrb	r2, [r2, #16]
 8005c78:	f107 0108 	add.w	r1, r7, #8
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4798      	blx	r3
 8005c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c82:	e05d      	b.n	8005d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa7e 	bl	8006188 <USBD_CtlError>
            err++;
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	72fb      	strb	r3, [r7, #11]
          break;
 8005c92:	e055      	b.n	8005d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	7c12      	ldrb	r2, [r2, #16]
 8005cac:	f107 0108 	add.w	r1, r7, #8
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
 8005cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cb6:	e043      	b.n	8005d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa64 	bl	8006188 <USBD_CtlError>
            err++;
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005cc6:	e03b      	b.n	8005d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	7c12      	ldrb	r2, [r2, #16]
 8005ce0:	f107 0108 	add.w	r1, r7, #8
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
 8005ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cea:	e029      	b.n	8005d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa4a 	bl	8006188 <USBD_CtlError>
            err++;
 8005cf4:	7afb      	ldrb	r3, [r7, #11]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cfa:	e021      	b.n	8005d40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	7c12      	ldrb	r2, [r2, #16]
 8005d14:	f107 0108 	add.w	r1, r7, #8
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
 8005d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d1e:	e00f      	b.n	8005d40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa30 	bl	8006188 <USBD_CtlError>
            err++;
 8005d28:	7afb      	ldrb	r3, [r7, #11]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d2e:	e007      	b.n	8005d40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa28 	bl	8006188 <USBD_CtlError>
          err++;
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005d3e:	bf00      	nop
      }
      break;
 8005d40:	e037      	b.n	8005db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7c1b      	ldrb	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	f107 0208 	add.w	r2, r7, #8
 8005d56:	4610      	mov	r0, r2
 8005d58:	4798      	blx	r3
 8005d5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d5c:	e029      	b.n	8005db2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fa11 	bl	8006188 <USBD_CtlError>
        err++;
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8005d6c:	e021      	b.n	8005db2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	7c1b      	ldrb	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10d      	bne.n	8005d92 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	f107 0208 	add.w	r2, r7, #8
 8005d82:	4610      	mov	r0, r2
 8005d84:	4798      	blx	r3
 8005d86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	2207      	movs	r2, #7
 8005d8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d90:	e00f      	b.n	8005db2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f9f7 	bl	8006188 <USBD_CtlError>
        err++;
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8005da0:	e007      	b.n	8005db2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f9ef 	bl	8006188 <USBD_CtlError>
      err++;
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	3301      	adds	r3, #1
 8005dae:	72fb      	strb	r3, [r7, #11]
      break;
 8005db0:	bf00      	nop
  }

  if (err != 0U)
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11e      	bne.n	8005df6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	88db      	ldrh	r3, [r3, #6]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d016      	beq.n	8005dee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005dc0:	893b      	ldrh	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00e      	beq.n	8005de4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	88da      	ldrh	r2, [r3, #6]
 8005dca:	893b      	ldrh	r3, [r7, #8]
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	bf28      	it	cs
 8005dd0:	4613      	movcs	r3, r2
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dd6:	893b      	ldrh	r3, [r7, #8]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fa44 	bl	800626a <USBD_CtlSendData>
 8005de2:	e009      	b.n	8005df8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f9ce 	bl	8006188 <USBD_CtlError>
 8005dec:	e004      	b.n	8005df8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa95 	bl	800631e <USBD_CtlSendStatus>
 8005df4:	e000      	b.n	8005df8 <USBD_GetDescriptor+0x2cc>
    return;
 8005df6:	bf00      	nop
  }
}
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop

08005e00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	889b      	ldrh	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d131      	bne.n	8005e76 <USBD_SetAddress+0x76>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	88db      	ldrh	r3, [r3, #6]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d12d      	bne.n	8005e76 <USBD_SetAddress+0x76>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	885b      	ldrh	r3, [r3, #2]
 8005e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e20:	d829      	bhi.n	8005e76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	885b      	ldrh	r3, [r3, #2]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d104      	bne.n	8005e44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f9a3 	bl	8006188 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e42:	e01d      	b.n	8005e80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7bfa      	ldrb	r2, [r7, #15]
 8005e48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f003 fbbb 	bl	80095cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa61 	bl	800631e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6a:	e009      	b.n	8005e80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e74:	e004      	b.n	8005e80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f985 	bl	8006188 <USBD_CtlError>
  }
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	885b      	ldrh	r3, [r3, #2]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005e9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ea0:	4b4b      	ldr	r3, [pc, #300]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d905      	bls.n	8005eb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f96c 	bl	8006188 <USBD_CtlError>
    return USBD_FAIL;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e088      	b.n	8005fc6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d002      	beq.n	8005ec6 <USBD_SetConfig+0x3e>
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d025      	beq.n	8005f10 <USBD_SetConfig+0x88>
 8005ec4:	e071      	b.n	8005faa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005ec6:	4b42      	ldr	r3, [pc, #264]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01c      	beq.n	8005f08 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005ece:	4b40      	ldr	r3, [pc, #256]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005ed8:	4b3d      	ldr	r3, [pc, #244]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff f948 	bl	8005174 <USBD_SetClassConfig>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f949 	bl	8006188 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ef6:	e065      	b.n	8005fc4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa10 	bl	800631e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2203      	movs	r2, #3
 8005f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f06:	e05d      	b.n	8005fc4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa08 	bl	800631e <USBD_CtlSendStatus>
      break;
 8005f0e:	e059      	b.n	8005fc4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005f10:	4b2f      	ldr	r3, [pc, #188]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d112      	bne.n	8005f3e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005f20:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f2a:	4b29      	ldr	r3, [pc, #164]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff f93b 	bl	80051ac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f9f1 	bl	800631e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005f3c:	e042      	b.n	8005fc4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005f3e:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d02a      	beq.n	8005fa2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff f929 	bl	80051ac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f64:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff f902 	bl	8005174 <USBD_SetClassConfig>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00f      	beq.n	8005f9a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f903 	bl	8006188 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff f90e 	bl	80051ac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f98:	e014      	b.n	8005fc4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9bf 	bl	800631e <USBD_CtlSendStatus>
      break;
 8005fa0:	e010      	b.n	8005fc4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9bb 	bl	800631e <USBD_CtlSendStatus>
      break;
 8005fa8:	e00c      	b.n	8005fc4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f8eb 	bl	8006188 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <USBD_SetConfig+0x148>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff f8f7 	bl	80051ac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc2:	bf00      	nop
  }

  return ret;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	200004bc 	.word	0x200004bc

08005fd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	88db      	ldrh	r3, [r3, #6]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d004      	beq.n	8005ff0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f8cd 	bl	8006188 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005fee:	e023      	b.n	8006038 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	dc02      	bgt.n	8006002 <USBD_GetConfig+0x2e>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	dc03      	bgt.n	8006008 <USBD_GetConfig+0x34>
 8006000:	e015      	b.n	800602e <USBD_GetConfig+0x5a>
 8006002:	2b03      	cmp	r3, #3
 8006004:	d00b      	beq.n	800601e <USBD_GetConfig+0x4a>
 8006006:	e012      	b.n	800602e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3308      	adds	r3, #8
 8006012:	2201      	movs	r2, #1
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f927 	bl	800626a <USBD_CtlSendData>
        break;
 800601c:	e00c      	b.n	8006038 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	2201      	movs	r2, #1
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f91f 	bl	800626a <USBD_CtlSendData>
        break;
 800602c:	e004      	b.n	8006038 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f8a9 	bl	8006188 <USBD_CtlError>
        break;
 8006036:	bf00      	nop
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006050:	b2db      	uxtb	r3, r3
 8006052:	3b01      	subs	r3, #1
 8006054:	2b02      	cmp	r3, #2
 8006056:	d81e      	bhi.n	8006096 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	88db      	ldrh	r3, [r3, #6]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d004      	beq.n	800606a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f890 	bl	8006188 <USBD_CtlError>
        break;
 8006068:	e01a      	b.n	80060a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	330c      	adds	r3, #12
 800608a:	2202      	movs	r2, #2
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8eb 	bl	800626a <USBD_CtlSendData>
      break;
 8006094:	e004      	b.n	80060a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f875 	bl	8006188 <USBD_CtlError>
      break;
 800609e:	bf00      	nop
  }
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	885b      	ldrh	r3, [r3, #2]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d106      	bne.n	80060c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f92b 	bl	800631e <USBD_CtlSendStatus>
  }
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d80b      	bhi.n	8006100 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	885b      	ldrh	r3, [r3, #2]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10c      	bne.n	800610a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f910 	bl	800631e <USBD_CtlSendStatus>
      }
      break;
 80060fe:	e004      	b.n	800610a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f840 	bl	8006188 <USBD_CtlError>
      break;
 8006108:	e000      	b.n	800610c <USBD_ClrFeature+0x3c>
      break;
 800610a:	bf00      	nop
  }
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3301      	adds	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff fabb 	bl	80056ba <SWAPBYTE>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7ff faae 	bl	80056ba <SWAPBYTE>
 800615e:	4603      	mov	r3, r0
 8006160:	461a      	mov	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3301      	adds	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff faa1 	bl	80056ba <SWAPBYTE>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	80da      	strh	r2, [r3, #6]
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006192:	2180      	movs	r1, #128	; 0x80
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f003 f9af 	bl	80094f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800619a:	2100      	movs	r1, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f003 f9ab 	bl	80094f8 <USBD_LL_StallEP>
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d036      	beq.n	800622e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80061c4:	6938      	ldr	r0, [r7, #16]
 80061c6:	f000 f836 	bl	8006236 <USBD_GetLen>
 80061ca:	4603      	mov	r3, r0
 80061cc:	3301      	adds	r3, #1
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	4413      	add	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	3301      	adds	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	4413      	add	r3, r2
 80061f0:	2203      	movs	r2, #3
 80061f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	3301      	adds	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061fa:	e013      	b.n	8006224 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4413      	add	r3, r2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	3301      	adds	r3, #1
 800620c:	613b      	str	r3, [r7, #16]
    idx++;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
 8006210:	3301      	adds	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
    idx++;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	3301      	adds	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e7      	bne.n	80061fc <USBD_GetString+0x52>
 800622c:	e000      	b.n	8006230 <USBD_GetString+0x86>
    return;
 800622e:	bf00      	nop
  }
}
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006246:	e005      	b.n	8006254 <USBD_GetLen+0x1e>
  {
    len++;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	3301      	adds	r3, #1
 800624c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3301      	adds	r3, #1
 8006252:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f5      	bne.n	8006248 <USBD_GetLen+0x12>
  }

  return len;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2202      	movs	r2, #2
 800627a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	2100      	movs	r1, #0
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f003 f9ba 	bl	800960a <USBD_LL_Transmit>

  return USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	2100      	movs	r1, #0
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f003 f9a9 	bl	800960a <USBD_LL_Transmit>

  return USBD_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2203      	movs	r2, #3
 80062d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	2100      	movs	r1, #0
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f003 f9ad 	bl	800964c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	2100      	movs	r1, #0
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f003 f99c 	bl	800964c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2204      	movs	r2, #4
 800632a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800632e:	2300      	movs	r3, #0
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f003 f968 	bl	800960a <USBD_LL_Transmit>

  return USBD_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2205      	movs	r2, #5
 8006350:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006354:	2300      	movs	r3, #0
 8006356:	2200      	movs	r2, #0
 8006358:	2100      	movs	r1, #0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f003 f976 	bl	800964c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	4603      	mov	r3, r0
 8006372:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800637c:	2b84      	cmp	r3, #132	; 0x84
 800637e:	d005      	beq.n	800638c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006380:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	3303      	adds	r3, #3
 800638a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800638c:	68fb      	ldr	r3, [r7, #12]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a0:	f3ef 8305 	mrs	r3, IPSR
 80063a4:	607b      	str	r3, [r7, #4]
  return(result);
 80063a6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063c2:	f001 fa1d 	bl	8007800 <vTaskStartScheduler>
  
  return osOK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}

080063cc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80063d0:	f7ff ffe3 	bl	800639a <inHandlerMode>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80063da:	f001 fb35 	bl	8007a48 <xTaskGetTickCountFromISR>
 80063de:	4603      	mov	r3, r0
 80063e0:	e002      	b.n	80063e8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80063e2:	f001 fb21 	bl	8007a28 <xTaskGetTickCount>
 80063e6:	4603      	mov	r3, r0
  }
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}

080063ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ee:	b089      	sub	sp, #36	; 0x24
 80063f0:	af04      	add	r7, sp, #16
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d020      	beq.n	8006440 <osThreadCreate+0x54>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01c      	beq.n	8006440 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685c      	ldr	r4, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681d      	ldr	r5, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691e      	ldr	r6, [r3, #16]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff ffa6 	bl	800636a <makeFreeRtosPriority>
 800641e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006428:	9202      	str	r2, [sp, #8]
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	9100      	str	r1, [sp, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	4632      	mov	r2, r6
 8006432:	4629      	mov	r1, r5
 8006434:	4620      	mov	r0, r4
 8006436:	f001 f805 	bl	8007444 <xTaskCreateStatic>
 800643a:	4603      	mov	r3, r0
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	e01c      	b.n	800647a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685c      	ldr	r4, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800644c:	b29e      	uxth	r6, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff ff88 	bl	800636a <makeFreeRtosPriority>
 800645a:	4602      	mov	r2, r0
 800645c:	f107 030c 	add.w	r3, r7, #12
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	9200      	str	r2, [sp, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	4632      	mov	r2, r6
 8006468:	4629      	mov	r1, r5
 800646a:	4620      	mov	r0, r4
 800646c:	f001 f847 	bl	80074fe <xTaskCreate>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d001      	beq.n	800647a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	e000      	b.n	800647c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800647a:	68fb      	ldr	r3, [r7, #12]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006484 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <osDelay+0x16>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	e000      	b.n	800649c <osDelay+0x18>
 800649a:	2301      	movs	r3, #1
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f97b 	bl	8007798 <vTaskDelay>
  
  return osOK;
 80064a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	2001      	movs	r0, #1
 80064c4:	f000 fb63 	bl	8006b8e <xQueueCreateMutexStatic>
 80064c8:	4603      	mov	r3, r0
 80064ca:	e003      	b.n	80064d4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80064cc:	2001      	movs	r0, #1
 80064ce:	f000 fb46 	bl	8006b5e <xQueueCreateMutex>
 80064d2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <osMutexWait+0x18>
    return osErrorParameter;
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	e03a      	b.n	800656a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064fe:	d103      	bne.n	8006508 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e009      	b.n	800651c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <osMutexWait+0x40>
      ticks = 1;
 8006518:	2301      	movs	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800651c:	f7ff ff3d 	bl	800639a <inHandlerMode>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d017      	beq.n	8006556 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006526:	f107 0308 	add.w	r3, r7, #8
 800652a:	461a      	mov	r2, r3
 800652c:	2100      	movs	r1, #0
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fde0 	bl	80070f4 <xQueueReceiveFromISR>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d001      	beq.n	800653e <osMutexWait+0x62>
      return osErrorOS;
 800653a:	23ff      	movs	r3, #255	; 0xff
 800653c:	e015      	b.n	800656a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d011      	beq.n	8006568 <osMutexWait+0x8c>
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <osMutexWait+0x98>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	e008      	b.n	8006568 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fcbf 	bl	8006edc <xQueueSemaphoreTake>
 800655e:	4603      	mov	r3, r0
 8006560:	2b01      	cmp	r3, #1
 8006562:	d001      	beq.n	8006568 <osMutexWait+0x8c>
    return osErrorOS;
 8006564:	23ff      	movs	r3, #255	; 0xff
 8006566:	e000      	b.n	800656a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006588:	f7ff ff07 	bl	800639a <inHandlerMode>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d016      	beq.n	80065c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fc11 	bl	8006dc0 <xQueueGiveFromISR>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d001      	beq.n	80065a8 <osMutexRelease+0x30>
      return osErrorOS;
 80065a4:	23ff      	movs	r3, #255	; 0xff
 80065a6:	e017      	b.n	80065d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d013      	beq.n	80065d6 <osMutexRelease+0x5e>
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <osMutexRelease+0x68>)
 80065b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	e00a      	b.n	80065d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80065c0:	2300      	movs	r3, #0
 80065c2:	2200      	movs	r2, #0
 80065c4:	2100      	movs	r1, #0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fafc 	bl	8006bc4 <xQueueGenericSend>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d001      	beq.n	80065d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80065d2:	23ff      	movs	r3, #255	; 0xff
 80065d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80065d6:	68fb      	ldr	r3, [r7, #12]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00f      	beq.n	8006616 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d10a      	bne.n	8006612 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2203      	movs	r2, #3
 8006602:	9200      	str	r2, [sp, #0]
 8006604:	2200      	movs	r2, #0
 8006606:	2100      	movs	r1, #0
 8006608:	2001      	movs	r0, #1
 800660a:	f000 f9bd 	bl	8006988 <xQueueGenericCreateStatic>
 800660e:	4603      	mov	r3, r0
 8006610:	e016      	b.n	8006640 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	e014      	b.n	8006640 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d110      	bne.n	800663e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800661c:	2203      	movs	r2, #3
 800661e:	2100      	movs	r1, #0
 8006620:	2001      	movs	r0, #1
 8006622:	f000 fa29 	bl	8006a78 <xQueueGenericCreate>
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <osSemaphoreCreate+0x56>
 800662e:	2300      	movs	r3, #0
 8006630:	2200      	movs	r2, #0
 8006632:	2100      	movs	r1, #0
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fac5 	bl	8006bc4 <xQueueGenericSend>
      return sema;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	e000      	b.n	8006640 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800663e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	e03a      	b.n	80066d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800666a:	d103      	bne.n	8006674 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800666c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e009      	b.n	8006688 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <osSemaphoreWait+0x40>
      ticks = 1;
 8006684:	2301      	movs	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006688:	f7ff fe87 	bl	800639a <inHandlerMode>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d017      	beq.n	80066c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	461a      	mov	r2, r3
 8006698:	2100      	movs	r1, #0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fd2a 	bl	80070f4 <xQueueReceiveFromISR>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d001      	beq.n	80066aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80066a6:	23ff      	movs	r3, #255	; 0xff
 80066a8:	e015      	b.n	80066d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d011      	beq.n	80066d4 <osSemaphoreWait+0x8c>
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <osSemaphoreWait+0x98>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	e008      	b.n	80066d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fc09 	bl	8006edc <xQueueSemaphoreTake>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d001      	beq.n	80066d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80066d0:	23ff      	movs	r3, #255	; 0xff
 80066d2:	e000      	b.n	80066d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80066f4:	f7ff fe51 	bl	800639a <inHandlerMode>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb5b 	bl	8006dc0 <xQueueGiveFromISR>
 800670a:	4603      	mov	r3, r0
 800670c:	2b01      	cmp	r3, #1
 800670e:	d001      	beq.n	8006714 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006710:	23ff      	movs	r3, #255	; 0xff
 8006712:	e017      	b.n	8006744 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d013      	beq.n	8006742 <osSemaphoreRelease+0x5e>
 800671a:	4b0c      	ldr	r3, [pc, #48]	; (800674c <osSemaphoreRelease+0x68>)
 800671c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	e00a      	b.n	8006742 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800672c:	2300      	movs	r3, #0
 800672e:	2200      	movs	r2, #0
 8006730:	2100      	movs	r1, #0
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa46 	bl	8006bc4 <xQueueGenericSend>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d001      	beq.n	8006742 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800673e:	23ff      	movs	r3, #255	; 0xff
 8006740:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f103 0208 	add.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f103 0208 	add.w	r2, r3, #8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f103 0208 	add.w	r2, r3, #8
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006808:	d103      	bne.n	8006812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e00c      	b.n	800682c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3308      	adds	r3, #8
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e002      	b.n	8006820 <vListInsert+0x2e>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d2f6      	bcs.n	800681a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6892      	ldr	r2, [r2, #8]
 800687a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6852      	ldr	r2, [r2, #4]
 8006884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d103      	bne.n	8006898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1e5a      	subs	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068e2:	f001 ff0f 	bl	8008704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	3b01      	subs	r3, #1
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	22ff      	movs	r2, #255	; 0xff
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	22ff      	movs	r2, #255	; 0xff
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d114      	bne.n	8006962 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01a      	beq.n	8006976 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3310      	adds	r3, #16
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f9cf 	bl	8007ce8 <xTaskRemoveFromEventList>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d012      	beq.n	8006976 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <xQueueGenericReset+0xcc>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	e009      	b.n	8006976 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3310      	adds	r3, #16
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fef2 	bl	8006750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3324      	adds	r3, #36	; 0x24
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff feed 	bl	8006750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006976:	f001 fef5 	bl	8008764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800697a:	2301      	movs	r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	e000ed04 	.word	0xe000ed04

08006988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08e      	sub	sp, #56	; 0x38
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <xQueueGenericCreateStatic+0x52>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <xQueueGenericCreateStatic+0x56>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueGenericCreateStatic+0x58>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	623b      	str	r3, [r7, #32]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <xQueueGenericCreateStatic+0x7e>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <xQueueGenericCreateStatic+0x82>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericCreateStatic+0x84>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	61fb      	str	r3, [r7, #28]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a26:	2348      	movs	r3, #72	; 0x48
 8006a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b48      	cmp	r3, #72	; 0x48
 8006a2e:	d00a      	beq.n	8006a46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61bb      	str	r3, [r7, #24]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00d      	beq.n	8006a6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f83f 	bl	8006aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3730      	adds	r7, #48	; 0x30
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	; 0x28
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	613b      	str	r3, [r7, #16]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	fb02 f303 	mul.w	r3, r2, r3
 8006aaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3348      	adds	r3, #72	; 0x48
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 ff49 	bl	8008948 <pvPortMalloc>
 8006ab6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d011      	beq.n	8006ae2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	3348      	adds	r3, #72	; 0x48
 8006ac6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ad0:	79fa      	ldrb	r2, [r7, #7]
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f805 	bl	8006aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	69b8      	ldr	r0, [r7, #24]
 8006b1e:	f7ff fecb 	bl	80068b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2100      	movs	r1, #0
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f837 	bl	8006bc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	4603      	mov	r3, r0
 8006b66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	461a      	mov	r2, r3
 8006b74:	6939      	ldr	r1, [r7, #16]
 8006b76:	6978      	ldr	r0, [r7, #20]
 8006b78:	f7ff ff7e 	bl	8006a78 <xQueueGenericCreate>
 8006b7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff ffd3 	bl	8006b2a <prvInitialiseMutex>

		return xNewQueue;
 8006b84:	68fb      	ldr	r3, [r7, #12]
	}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b088      	sub	sp, #32
 8006b92:	af02      	add	r7, sp, #8
 8006b94:	4603      	mov	r3, r0
 8006b96:	6039      	str	r1, [r7, #0]
 8006b98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	6939      	ldr	r1, [r7, #16]
 8006bac:	6978      	ldr	r0, [r7, #20]
 8006bae:	f7ff feeb 	bl	8006988 <xQueueGenericCreateStatic>
 8006bb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff ffb8 	bl	8006b2a <prvInitialiseMutex>

		return xNewQueue;
 8006bba:	68fb      	ldr	r3, [r7, #12]
	}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08e      	sub	sp, #56	; 0x38
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <xQueueGenericSend+0x32>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <xQueueGenericSend+0x40>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <xQueueGenericSend+0x44>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <xQueueGenericSend+0x46>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <xQueueGenericSend+0x60>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d103      	bne.n	8006c32 <xQueueGenericSend+0x6e>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <xQueueGenericSend+0x72>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <xQueueGenericSend+0x74>
 8006c36:	2300      	movs	r3, #0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <xQueueGenericSend+0x8e>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	623b      	str	r3, [r7, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c52:	f001 fa09 	bl	8008068 <xTaskGetSchedulerState>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <xQueueGenericSend+0x9e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <xQueueGenericSend+0xa2>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <xQueueGenericSend+0xa4>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <xQueueGenericSend+0xbe>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	61fb      	str	r3, [r7, #28]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c82:	f001 fd3f 	bl	8008704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d302      	bcc.n	8006c98 <xQueueGenericSend+0xd4>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d129      	bne.n	8006cec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c9e:	f000 fac1 	bl	8007224 <prvCopyDataToQueue>
 8006ca2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d010      	beq.n	8006cce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f819 	bl	8007ce8 <xTaskRemoveFromEventList>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d013      	beq.n	8006ce4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cbc:	4b3f      	ldr	r3, [pc, #252]	; (8006dbc <xQueueGenericSend+0x1f8>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	e00a      	b.n	8006ce4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cd4:	4b39      	ldr	r3, [pc, #228]	; (8006dbc <xQueueGenericSend+0x1f8>)
 8006cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ce4:	f001 fd3e 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e063      	b.n	8006db4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d103      	bne.n	8006cfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cf2:	f001 fd37 	bl	8008764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e05c      	b.n	8006db4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 f851 	bl	8007dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d0e:	f001 fd29 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d12:	f000 fddf 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d16:	f001 fcf5 	bl	8008704 <vPortEnterCritical>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d20:	b25b      	sxtb	r3, r3
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d26:	d103      	bne.n	8006d30 <xQueueGenericSend+0x16c>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3c:	d103      	bne.n	8006d46 <xQueueGenericSend+0x182>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d46:	f001 fd0d 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d4a:	1d3a      	adds	r2, r7, #4
 8006d4c:	f107 0314 	add.w	r3, r7, #20
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f840 	bl	8007dd8 <xTaskCheckForTimeOut>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d124      	bne.n	8006da8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d60:	f000 fb58 	bl	8007414 <prvIsQueueFull>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	3310      	adds	r3, #16
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 ff94 	bl	8007ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d7a:	f000 fae3 	bl	8007344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d7e:	f000 fdb7 	bl	80078f0 <xTaskResumeAll>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f47f af7c 	bne.w	8006c82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <xQueueGenericSend+0x1f8>)
 8006d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	e772      	b.n	8006c82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9e:	f000 fad1 	bl	8007344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006da2:	f000 fda5 	bl	80078f0 <xTaskResumeAll>
 8006da6:	e76c      	b.n	8006c82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006daa:	f000 facb 	bl	8007344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dae:	f000 fd9f 	bl	80078f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006db2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3738      	adds	r7, #56	; 0x38
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08e      	sub	sp, #56	; 0x38
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	623b      	str	r3, [r7, #32]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	61fb      	str	r3, [r7, #28]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d103      	bne.n	8006e18 <xQueueGiveFromISR+0x58>
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <xQueueGiveFromISR+0x5c>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <xQueueGiveFromISR+0x5e>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	61bb      	str	r3, [r7, #24]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e38:	f001 fd46 	bl	80088c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	617a      	str	r2, [r7, #20]
 8006e52:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e54:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d22b      	bcs.n	8006ec0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e82:	d112      	bne.n	8006eaa <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	3324      	adds	r3, #36	; 0x24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 ff29 	bl	8007ce8 <xTaskRemoveFromEventList>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00e      	beq.n	8006eba <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e007      	b.n	8006eba <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eae:	3301      	adds	r3, #1
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	b25a      	sxtb	r2, r3
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebe:	e001      	b.n	8006ec4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ece:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3738      	adds	r7, #56	; 0x38
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08e      	sub	sp, #56	; 0x38
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	623b      	str	r3, [r7, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	61fb      	str	r3, [r7, #28]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f2c:	f001 f89c 	bl	8008068 <xTaskGetSchedulerState>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <xQueueSemaphoreTake+0x60>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <xQueueSemaphoreTake+0x64>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <xQueueSemaphoreTake+0x66>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	61bb      	str	r3, [r7, #24]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f5c:	f001 fbd2 	bl	8008704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d024      	beq.n	8006fb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f7c:	f001 fa1c 	bl	80083b8 <pvTaskIncrementMutexHeldCount>
 8006f80:	4602      	mov	r2, r0
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00f      	beq.n	8006fae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	3310      	adds	r3, #16
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fea8 	bl	8007ce8 <xTaskRemoveFromEventList>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f9e:	4b54      	ldr	r3, [pc, #336]	; (80070f0 <xQueueSemaphoreTake+0x214>)
 8006fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fae:	f001 fbd9 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e097      	b.n	80070e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d111      	bne.n	8006fe0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	617b      	str	r3, [r7, #20]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fd8:	f001 fbc4 	bl	8008764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e082      	b.n	80070e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fe6:	f107 030c 	add.w	r3, r7, #12
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fede 	bl	8007dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff4:	f001 fbb6 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ff8:	f000 fc6c 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ffc:	f001 fb82 	bl	8008704 <vPortEnterCritical>
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007006:	b25b      	sxtb	r3, r3
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800700c:	d103      	bne.n	8007016 <xQueueSemaphoreTake+0x13a>
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800701c:	b25b      	sxtb	r3, r3
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007022:	d103      	bne.n	800702c <xQueueSemaphoreTake+0x150>
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800702c:	f001 fb9a 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007030:	463a      	mov	r2, r7
 8007032:	f107 030c 	add.w	r3, r7, #12
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fecd 	bl	8007dd8 <xTaskCheckForTimeOut>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d132      	bne.n	80070aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007046:	f000 f9cf 	bl	80073e8 <prvIsQueueEmpty>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d026      	beq.n	800709e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d109      	bne.n	800706c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007058:	f001 fb54 	bl	8008704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f81f 	bl	80080a4 <xTaskPriorityInherit>
 8007066:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007068:	f001 fb7c 	bl	8008764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fe13 	bl	8007ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800707a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800707c:	f000 f962 	bl	8007344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007080:	f000 fc36 	bl	80078f0 <xTaskResumeAll>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	f47f af68 	bne.w	8006f5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800708c:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <xQueueSemaphoreTake+0x214>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	e75e      	b.n	8006f5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800709e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a0:	f000 f950 	bl	8007344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070a4:	f000 fc24 	bl	80078f0 <xTaskResumeAll>
 80070a8:	e758      	b.n	8006f5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ac:	f000 f94a 	bl	8007344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070b0:	f000 fc1e 	bl	80078f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b6:	f000 f997 	bl	80073e8 <prvIsQueueEmpty>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f43f af4d 	beq.w	8006f5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00d      	beq.n	80070e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070c8:	f001 fb1c 	bl	8008704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ce:	f000 f891 	bl	80071f4 <prvGetDisinheritPriorityAfterTimeout>
 80070d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 f8de 	bl	800829c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070e0:	f001 fb40 	bl	8008764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3738      	adds	r7, #56	; 0x38
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08e      	sub	sp, #56	; 0x38
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	623b      	str	r3, [r7, #32]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <xQueueReceiveFromISR+0x3a>
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <xQueueReceiveFromISR+0x3e>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <xQueueReceiveFromISR+0x40>
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	61fb      	str	r3, [r7, #28]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800714e:	f001 fbbb 	bl	80088c8 <vPortValidateInterruptPriority>
	__asm volatile
 8007152:	f3ef 8211 	mrs	r2, BASEPRI
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	61ba      	str	r2, [r7, #24]
 8007168:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800716a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02f      	beq.n	80071da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007188:	f000 f8b6 	bl	80072f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	1e5a      	subs	r2, r3, #1
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719c:	d112      	bne.n	80071c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d016      	beq.n	80071d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	3310      	adds	r3, #16
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fd9c 	bl	8007ce8 <xTaskRemoveFromEventList>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00e      	beq.n	80071d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e007      	b.n	80071d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c8:	3301      	adds	r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	b25a      	sxtb	r2, r3
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071d4:	2301      	movs	r3, #1
 80071d6:	637b      	str	r3, [r7, #52]	; 0x34
 80071d8:	e001      	b.n	80071de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80071da:	2300      	movs	r3, #0
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f383 8811 	msr	BASEPRI, r3
}
 80071e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3738      	adds	r7, #56	; 0x38
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d006      	beq.n	8007212 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1c3 0307 	rsb	r3, r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e001      	b.n	8007216 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007216:	68fb      	ldr	r3, [r7, #12]
	}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10d      	bne.n	800725e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d14d      	bne.n	80072e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 ff9e 	bl	8008190 <xTaskPriorityDisinherit>
 8007254:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	e043      	b.n	80072e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d119      	bne.n	8007298 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6858      	ldr	r0, [r3, #4]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	461a      	mov	r2, r3
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	f002 fb87 	bl	8009982 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727c:	441a      	add	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	429a      	cmp	r2, r3
 800728c:	d32b      	bcc.n	80072e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	e026      	b.n	80072e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	68d8      	ldr	r0, [r3, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	461a      	mov	r2, r3
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	f002 fb6d 	bl	8009982 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	425b      	negs	r3, r3
 80072b2:	441a      	add	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d207      	bcs.n	80072d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	425b      	negs	r3, r3
 80072ce:	441a      	add	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d105      	bne.n	80072e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072ee:	697b      	ldr	r3, [r7, #20]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	d018      	beq.n	800733c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	441a      	add	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	429a      	cmp	r2, r3
 8007322:	d303      	bcc.n	800732c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68d9      	ldr	r1, [r3, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	461a      	mov	r2, r3
 8007336:	6838      	ldr	r0, [r7, #0]
 8007338:	f002 fb23 	bl	8009982 <memcpy>
	}
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800734c:	f001 f9da 	bl	8008704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007356:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007358:	e011      	b.n	800737e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d012      	beq.n	8007388 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3324      	adds	r3, #36	; 0x24
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fcbe 	bl	8007ce8 <xTaskRemoveFromEventList>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007372:	f000 fd93 	bl	8007e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	3b01      	subs	r3, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800737e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007382:	2b00      	cmp	r3, #0
 8007384:	dce9      	bgt.n	800735a <prvUnlockQueue+0x16>
 8007386:	e000      	b.n	800738a <prvUnlockQueue+0x46>
					break;
 8007388:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007392:	f001 f9e7 	bl	8008764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007396:	f001 f9b5 	bl	8008704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073a2:	e011      	b.n	80073c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d012      	beq.n	80073d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3310      	adds	r3, #16
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fc99 	bl	8007ce8 <xTaskRemoveFromEventList>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073bc:	f000 fd6e 	bl	8007e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dce9      	bgt.n	80073a4 <prvUnlockQueue+0x60>
 80073d0:	e000      	b.n	80073d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	22ff      	movs	r2, #255	; 0xff
 80073d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073dc:	f001 f9c2 	bl	8008764 <vPortExitCritical>
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073f0:	f001 f988 	bl	8008704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e001      	b.n	8007406 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007406:	f001 f9ad 	bl	8008764 <vPortExitCritical>

	return xReturn;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800741c:	f001 f972 	bl	8008704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	429a      	cmp	r2, r3
 800742a:	d102      	bne.n	8007432 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	e001      	b.n	8007436 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007436:	f001 f995 	bl	8008764 <vPortExitCritical>

	return xReturn;
 800743a:	68fb      	ldr	r3, [r7, #12]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08e      	sub	sp, #56	; 0x38
 8007448:	af04      	add	r7, sp, #16
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	623b      	str	r3, [r7, #32]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xTaskCreateStatic+0x46>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	61fb      	str	r3, [r7, #28]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800748a:	23b4      	movs	r3, #180	; 0xb4
 800748c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2bb4      	cmp	r3, #180	; 0xb4
 8007492:	d00a      	beq.n	80074aa <xTaskCreateStatic+0x66>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	61bb      	str	r3, [r7, #24]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01e      	beq.n	80074f0 <xTaskCreateStatic+0xac>
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074ca:	2300      	movs	r3, #0
 80074cc:	9303      	str	r3, [sp, #12]
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	9302      	str	r3, [sp, #8]
 80074d2:	f107 0314 	add.w	r3, r7, #20
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f850 	bl	8007588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ea:	f000 f8eb 	bl	80076c4 <prvAddNewTaskToReadyList>
 80074ee:	e001      	b.n	80074f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074f4:	697b      	ldr	r3, [r7, #20]
	}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3728      	adds	r7, #40	; 0x28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b08c      	sub	sp, #48	; 0x30
 8007502:	af04      	add	r7, sp, #16
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	4613      	mov	r3, r2
 800750c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4618      	mov	r0, r3
 8007514:	f001 fa18 	bl	8008948 <pvPortMalloc>
 8007518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00e      	beq.n	800753e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007520:	20b4      	movs	r0, #180	; 0xb4
 8007522:	f001 fa11 	bl	8008948 <pvPortMalloc>
 8007526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
 8007534:	e005      	b.n	8007542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007536:	6978      	ldr	r0, [r7, #20]
 8007538:	f001 fad2 	bl	8008ae0 <vPortFree>
 800753c:	e001      	b.n	8007542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d017      	beq.n	8007578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007550:	88fa      	ldrh	r2, [r7, #6]
 8007552:	2300      	movs	r3, #0
 8007554:	9303      	str	r3, [sp, #12]
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	9302      	str	r3, [sp, #8]
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 f80e 	bl	8007588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800756c:	69f8      	ldr	r0, [r7, #28]
 800756e:	f000 f8a9 	bl	80076c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007572:	2301      	movs	r3, #1
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	e002      	b.n	800757e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800757c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800757e:	69bb      	ldr	r3, [r7, #24]
	}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075a0:	3b01      	subs	r3, #1
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	f023 0307 	bic.w	r3, r3, #7
 80075ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	617b      	str	r3, [r7, #20]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01f      	beq.n	8007616 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	e012      	b.n	8007602 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	7819      	ldrb	r1, [r3, #0]
 80075e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	3334      	adds	r3, #52	; 0x34
 80075ec:	460a      	mov	r2, r1
 80075ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	3301      	adds	r3, #1
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d9e9      	bls.n	80075dc <prvInitialiseNewTask+0x54>
 8007608:	e000      	b.n	800760c <prvInitialiseNewTask+0x84>
			{
				break;
 800760a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007614:	e003      	b.n	800761e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	2b06      	cmp	r3, #6
 8007622:	d901      	bls.n	8007628 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007624:	2306      	movs	r3, #6
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800762c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007632:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	2200      	movs	r2, #0
 8007638:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	3304      	adds	r3, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff f8a6 	bl	8006790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	3318      	adds	r3, #24
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff f8a1 	bl	8006790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	f1c3 0207 	rsb	r2, r3, #7
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	2200      	movs	r2, #0
 8007670:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	334c      	adds	r3, #76	; 0x4c
 8007678:	2260      	movs	r2, #96	; 0x60
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f002 f98e 	bl	800999e <memset>
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <prvInitialiseNewTask+0x130>)
 8007686:	651a      	str	r2, [r3, #80]	; 0x50
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <prvInitialiseNewTask+0x134>)
 800768c:	655a      	str	r2, [r3, #84]	; 0x54
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	4a0b      	ldr	r2, [pc, #44]	; (80076c0 <prvInitialiseNewTask+0x138>)
 8007692:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	69b8      	ldr	r0, [r7, #24]
 800769a:	f000 ff07 	bl	80084ac <pxPortInitialiseStack>
 800769e:	4602      	mov	r2, r0
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b0:	bf00      	nop
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	0800a91c 	.word	0x0800a91c
 80076bc:	0800a93c 	.word	0x0800a93c
 80076c0:	0800a8fc 	.word	0x0800a8fc

080076c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076cc:	f001 f81a 	bl	8008704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076d0:	4b2a      	ldr	r3, [pc, #168]	; (800777c <prvAddNewTaskToReadyList+0xb8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	4a29      	ldr	r2, [pc, #164]	; (800777c <prvAddNewTaskToReadyList+0xb8>)
 80076d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076da:	4b29      	ldr	r3, [pc, #164]	; (8007780 <prvAddNewTaskToReadyList+0xbc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076e2:	4a27      	ldr	r2, [pc, #156]	; (8007780 <prvAddNewTaskToReadyList+0xbc>)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076e8:	4b24      	ldr	r3, [pc, #144]	; (800777c <prvAddNewTaskToReadyList+0xb8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d110      	bne.n	8007712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076f0:	f000 fbf8 	bl	8007ee4 <prvInitialiseTaskLists>
 80076f4:	e00d      	b.n	8007712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076f6:	4b23      	ldr	r3, [pc, #140]	; (8007784 <prvAddNewTaskToReadyList+0xc0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076fe:	4b20      	ldr	r3, [pc, #128]	; (8007780 <prvAddNewTaskToReadyList+0xbc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	429a      	cmp	r2, r3
 800770a:	d802      	bhi.n	8007712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800770c:	4a1c      	ldr	r2, [pc, #112]	; (8007780 <prvAddNewTaskToReadyList+0xbc>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <prvAddNewTaskToReadyList+0xc4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3301      	adds	r3, #1
 8007718:	4a1b      	ldr	r2, [pc, #108]	; (8007788 <prvAddNewTaskToReadyList+0xc4>)
 800771a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	2201      	movs	r2, #1
 8007722:	409a      	lsls	r2, r3
 8007724:	4b19      	ldr	r3, [pc, #100]	; (800778c <prvAddNewTaskToReadyList+0xc8>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4313      	orrs	r3, r2
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <prvAddNewTaskToReadyList+0xc8>)
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4a15      	ldr	r2, [pc, #84]	; (8007790 <prvAddNewTaskToReadyList+0xcc>)
 800773c:	441a      	add	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3304      	adds	r3, #4
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f7ff f830 	bl	80067aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800774a:	f001 f80b 	bl	8008764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800774e:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <prvAddNewTaskToReadyList+0xc0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007756:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <prvAddNewTaskToReadyList+0xbc>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d207      	bcs.n	8007774 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007764:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <prvAddNewTaskToReadyList+0xd0>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200005c0 	.word	0x200005c0
 8007780:	200004c0 	.word	0x200004c0
 8007784:	200005cc 	.word	0x200005cc
 8007788:	200005dc 	.word	0x200005dc
 800778c:	200005c8 	.word	0x200005c8
 8007790:	200004c4 	.word	0x200004c4
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d017      	beq.n	80077da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077aa:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <vTaskDelay+0x60>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <vTaskDelay+0x30>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60bb      	str	r3, [r7, #8]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077c8:	f000 f884 	bl	80078d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077cc:	2100      	movs	r1, #0
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fe06 	bl	80083e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077d4:	f000 f88c 	bl	80078f0 <xTaskResumeAll>
 80077d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d107      	bne.n	80077f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <vTaskDelay+0x64>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077f0:	bf00      	nop
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	200005e8 	.word	0x200005e8
 80077fc:	e000ed04 	.word	0xe000ed04

08007800 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800780e:	463a      	mov	r2, r7
 8007810:	1d39      	adds	r1, r7, #4
 8007812:	f107 0308 	add.w	r3, r7, #8
 8007816:	4618      	mov	r0, r3
 8007818:	f7f8 feae 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	9202      	str	r2, [sp, #8]
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	2300      	movs	r3, #0
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	2300      	movs	r3, #0
 800782c:	460a      	mov	r2, r1
 800782e:	4921      	ldr	r1, [pc, #132]	; (80078b4 <vTaskStartScheduler+0xb4>)
 8007830:	4821      	ldr	r0, [pc, #132]	; (80078b8 <vTaskStartScheduler+0xb8>)
 8007832:	f7ff fe07 	bl	8007444 <xTaskCreateStatic>
 8007836:	4603      	mov	r3, r0
 8007838:	4a20      	ldr	r2, [pc, #128]	; (80078bc <vTaskStartScheduler+0xbc>)
 800783a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800783c:	4b1f      	ldr	r3, [pc, #124]	; (80078bc <vTaskStartScheduler+0xbc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007844:	2301      	movs	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	e001      	b.n	800784e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d11b      	bne.n	800788c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	613b      	str	r3, [r7, #16]
}
 8007866:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007868:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <vTaskStartScheduler+0xc0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	334c      	adds	r3, #76	; 0x4c
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <vTaskStartScheduler+0xc4>)
 8007870:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <vTaskStartScheduler+0xc8>)
 8007874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800787a:	4b14      	ldr	r3, [pc, #80]	; (80078cc <vTaskStartScheduler+0xcc>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007880:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <vTaskStartScheduler+0xd0>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007886:	f000 fe9b 	bl	80085c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800788a:	e00e      	b.n	80078aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007892:	d10a      	bne.n	80078aa <vTaskStartScheduler+0xaa>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	60fb      	str	r3, [r7, #12]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <vTaskStartScheduler+0xa8>
}
 80078aa:	bf00      	nop
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	0800a8a0 	.word	0x0800a8a0
 80078b8:	08007eb5 	.word	0x08007eb5
 80078bc:	200005e4 	.word	0x200005e4
 80078c0:	200004c0 	.word	0x200004c0
 80078c4:	20000184 	.word	0x20000184
 80078c8:	200005e0 	.word	0x200005e0
 80078cc:	200005cc 	.word	0x200005cc
 80078d0:	200005c4 	.word	0x200005c4

080078d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <vTaskSuspendAll+0x18>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a03      	ldr	r2, [pc, #12]	; (80078ec <vTaskSuspendAll+0x18>)
 80078e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078e2:	bf00      	nop
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	200005e8 	.word	0x200005e8

080078f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078fe:	4b41      	ldr	r3, [pc, #260]	; (8007a04 <xTaskResumeAll+0x114>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <xTaskResumeAll+0x2c>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	603b      	str	r3, [r7, #0]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800791c:	f000 fef2 	bl	8008704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007920:	4b38      	ldr	r3, [pc, #224]	; (8007a04 <xTaskResumeAll+0x114>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	4a37      	ldr	r2, [pc, #220]	; (8007a04 <xTaskResumeAll+0x114>)
 8007928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <xTaskResumeAll+0x114>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d161      	bne.n	80079f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007932:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <xTaskResumeAll+0x118>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d05d      	beq.n	80079f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800793a:	e02e      	b.n	800799a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793c:	4b33      	ldr	r3, [pc, #204]	; (8007a0c <xTaskResumeAll+0x11c>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3318      	adds	r3, #24
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe ff8b 	bl	8006864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe ff86 	bl	8006864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	2201      	movs	r2, #1
 800795e:	409a      	lsls	r2, r3
 8007960:	4b2b      	ldr	r3, [pc, #172]	; (8007a10 <xTaskResumeAll+0x120>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4313      	orrs	r3, r2
 8007966:	4a2a      	ldr	r2, [pc, #168]	; (8007a10 <xTaskResumeAll+0x120>)
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4a27      	ldr	r2, [pc, #156]	; (8007a14 <xTaskResumeAll+0x124>)
 8007978:	441a      	add	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3304      	adds	r3, #4
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f7fe ff12 	bl	80067aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <xTaskResumeAll+0x128>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007994:	4b21      	ldr	r3, [pc, #132]	; (8007a1c <xTaskResumeAll+0x12c>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799a:	4b1c      	ldr	r3, [pc, #112]	; (8007a0c <xTaskResumeAll+0x11c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1cc      	bne.n	800793c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079a8:	f000 fb3e 	bl	8008028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079ac:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <xTaskResumeAll+0x130>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d010      	beq.n	80079da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079b8:	f000 f858 	bl	8007a6c <xTaskIncrementTick>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079c2:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <xTaskResumeAll+0x12c>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f1      	bne.n	80079b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80079d4:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <xTaskResumeAll+0x130>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079da:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <xTaskResumeAll+0x12c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079e6:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <xTaskResumeAll+0x134>)
 80079e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079f6:	f000 feb5 	bl	8008764 <vPortExitCritical>

	return xAlreadyYielded;
 80079fa:	68bb      	ldr	r3, [r7, #8]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	200005e8 	.word	0x200005e8
 8007a08:	200005c0 	.word	0x200005c0
 8007a0c:	20000580 	.word	0x20000580
 8007a10:	200005c8 	.word	0x200005c8
 8007a14:	200004c4 	.word	0x200004c4
 8007a18:	200004c0 	.word	0x200004c0
 8007a1c:	200005d4 	.word	0x200005d4
 8007a20:	200005d0 	.word	0x200005d0
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <xTaskGetTickCount+0x1c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a34:	687b      	ldr	r3, [r7, #4]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	200005c4 	.word	0x200005c4

08007a48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a4e:	f000 ff3b 	bl	80088c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a52:	2300      	movs	r3, #0
 8007a54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007a56:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <xTaskGetTickCountFromISR+0x20>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a5c:	683b      	ldr	r3, [r7, #0]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	200005c4 	.word	0x200005c4

08007a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a76:	4b4e      	ldr	r3, [pc, #312]	; (8007bb0 <xTaskIncrementTick+0x144>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f040 808e 	bne.w	8007b9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a80:	4b4c      	ldr	r3, [pc, #304]	; (8007bb4 <xTaskIncrementTick+0x148>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a88:	4a4a      	ldr	r2, [pc, #296]	; (8007bb4 <xTaskIncrementTick+0x148>)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d120      	bne.n	8007ad6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a94:	4b48      	ldr	r3, [pc, #288]	; (8007bb8 <xTaskIncrementTick+0x14c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	603b      	str	r3, [r7, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <xTaskIncrementTick+0x46>
 8007ab4:	4b40      	ldr	r3, [pc, #256]	; (8007bb8 <xTaskIncrementTick+0x14c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <xTaskIncrementTick+0x150>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a3e      	ldr	r2, [pc, #248]	; (8007bb8 <xTaskIncrementTick+0x14c>)
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	4a3e      	ldr	r2, [pc, #248]	; (8007bbc <xTaskIncrementTick+0x150>)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4b3d      	ldr	r3, [pc, #244]	; (8007bc0 <xTaskIncrementTick+0x154>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	4a3c      	ldr	r2, [pc, #240]	; (8007bc0 <xTaskIncrementTick+0x154>)
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	f000 faa9 	bl	8008028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ad6:	4b3b      	ldr	r3, [pc, #236]	; (8007bc4 <xTaskIncrementTick+0x158>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d348      	bcc.n	8007b72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae0:	4b35      	ldr	r3, [pc, #212]	; (8007bb8 <xTaskIncrementTick+0x14c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d104      	bne.n	8007af4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aea:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <xTaskIncrementTick+0x158>)
 8007aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af0:	601a      	str	r2, [r3, #0]
					break;
 8007af2:	e03e      	b.n	8007b72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af4:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <xTaskIncrementTick+0x14c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d203      	bcs.n	8007b14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b0c:	4a2d      	ldr	r2, [pc, #180]	; (8007bc4 <xTaskIncrementTick+0x158>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b12:	e02e      	b.n	8007b72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fea3 	bl	8006864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d004      	beq.n	8007b30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3318      	adds	r3, #24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fe9a 	bl	8006864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	2201      	movs	r2, #1
 8007b36:	409a      	lsls	r2, r3
 8007b38:	4b23      	ldr	r3, [pc, #140]	; (8007bc8 <xTaskIncrementTick+0x15c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <xTaskIncrementTick+0x15c>)
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <xTaskIncrementTick+0x160>)
 8007b50:	441a      	add	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4619      	mov	r1, r3
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f7fe fe26 	bl	80067aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <xTaskIncrementTick+0x164>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d3b9      	bcc.n	8007ae0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b70:	e7b6      	b.n	8007ae0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b72:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <xTaskIncrementTick+0x164>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4914      	ldr	r1, [pc, #80]	; (8007bcc <xTaskIncrementTick+0x160>)
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	440b      	add	r3, r1
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d901      	bls.n	8007b8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <xTaskIncrementTick+0x168>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b96:	2301      	movs	r3, #1
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	e004      	b.n	8007ba6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <xTaskIncrementTick+0x16c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <xTaskIncrementTick+0x16c>)
 8007ba4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ba6:	697b      	ldr	r3, [r7, #20]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200005e8 	.word	0x200005e8
 8007bb4:	200005c4 	.word	0x200005c4
 8007bb8:	20000578 	.word	0x20000578
 8007bbc:	2000057c 	.word	0x2000057c
 8007bc0:	200005d8 	.word	0x200005d8
 8007bc4:	200005e0 	.word	0x200005e0
 8007bc8:	200005c8 	.word	0x200005c8
 8007bcc:	200004c4 	.word	0x200004c4
 8007bd0:	200004c0 	.word	0x200004c0
 8007bd4:	200005d4 	.word	0x200005d4
 8007bd8:	200005d0 	.word	0x200005d0

08007bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007be2:	4b29      	ldr	r3, [pc, #164]	; (8007c88 <vTaskSwitchContext+0xac>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bea:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf0:	e044      	b.n	8007c7c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007bf2:	4b26      	ldr	r3, [pc, #152]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf8:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <vTaskSwitchContext+0xb4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	fab3 f383 	clz	r3, r3
 8007c04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	f1c3 031f 	rsb	r3, r3, #31
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	4921      	ldr	r1, [pc, #132]	; (8007c94 <vTaskSwitchContext+0xb8>)
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	607b      	str	r3, [r7, #4]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <vTaskSwitchContext+0x5a>
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <vTaskSwitchContext+0xb8>)
 8007c44:	4413      	add	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d104      	bne.n	8007c68 <vTaskSwitchContext+0x8c>
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	4a0a      	ldr	r2, [pc, #40]	; (8007c98 <vTaskSwitchContext+0xbc>)
 8007c70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <vTaskSwitchContext+0xbc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	334c      	adds	r3, #76	; 0x4c
 8007c78:	4a08      	ldr	r2, [pc, #32]	; (8007c9c <vTaskSwitchContext+0xc0>)
 8007c7a:	6013      	str	r3, [r2, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	200005e8 	.word	0x200005e8
 8007c8c:	200005d4 	.word	0x200005d4
 8007c90:	200005c8 	.word	0x200005c8
 8007c94:	200004c4 	.word	0x200004c4
 8007c98:	200004c0 	.word	0x200004c0
 8007c9c:	20000184 	.word	0x20000184

08007ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <vTaskPlaceOnEventList+0x44>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3318      	adds	r3, #24
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fe fd8f 	bl	80067f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	6838      	ldr	r0, [r7, #0]
 8007cd8:	f000 fb82 	bl	80083e0 <prvAddCurrentTaskToDelayedList>
}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	200004c0 	.word	0x200004c0

08007ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	3318      	adds	r3, #24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe fda3 	bl	8006864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1e:	4b1d      	ldr	r3, [pc, #116]	; (8007d94 <xTaskRemoveFromEventList+0xac>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d11c      	bne.n	8007d60 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fd9a 	bl	8006864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	2201      	movs	r2, #1
 8007d36:	409a      	lsls	r2, r3
 8007d38:	4b17      	ldr	r3, [pc, #92]	; (8007d98 <xTaskRemoveFromEventList+0xb0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <xTaskRemoveFromEventList+0xb0>)
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4a13      	ldr	r2, [pc, #76]	; (8007d9c <xTaskRemoveFromEventList+0xb4>)
 8007d50:	441a      	add	r2, r3
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f7fe fd26 	bl	80067aa <vListInsertEnd>
 8007d5e:	e005      	b.n	8007d6c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	3318      	adds	r3, #24
 8007d64:	4619      	mov	r1, r3
 8007d66:	480e      	ldr	r0, [pc, #56]	; (8007da0 <xTaskRemoveFromEventList+0xb8>)
 8007d68:	f7fe fd1f 	bl	80067aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <xTaskRemoveFromEventList+0xbc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d905      	bls.n	8007d86 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <xTaskRemoveFromEventList+0xc0>)
 8007d80:	2201      	movs	r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e001      	b.n	8007d8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d8a:	697b      	ldr	r3, [r7, #20]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	200005e8 	.word	0x200005e8
 8007d98:	200005c8 	.word	0x200005c8
 8007d9c:	200004c4 	.word	0x200004c4
 8007da0:	20000580 	.word	0x20000580
 8007da4:	200004c0 	.word	0x200004c0
 8007da8:	200005d4 	.word	0x200005d4

08007dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <vTaskInternalSetTimeOutState+0x24>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <vTaskInternalSetTimeOutState+0x28>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	605a      	str	r2, [r3, #4]
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	200005d8 	.word	0x200005d8
 8007dd4:	200005c4 	.word	0x200005c4

08007dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	613b      	str	r3, [r7, #16]
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	60fb      	str	r3, [r7, #12]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e1a:	f000 fc73 	bl	8008704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e1e:	4b1d      	ldr	r3, [pc, #116]	; (8007e94 <xTaskCheckForTimeOut+0xbc>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e36:	d102      	bne.n	8007e3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61fb      	str	r3, [r7, #28]
 8007e3c:	e023      	b.n	8007e86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <xTaskCheckForTimeOut+0xc0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d007      	beq.n	8007e5a <xTaskCheckForTimeOut+0x82>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d302      	bcc.n	8007e5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	e015      	b.n	8007e86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d20b      	bcs.n	8007e7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	1ad2      	subs	r2, r2, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff ff9b 	bl	8007dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61fb      	str	r3, [r7, #28]
 8007e7a:	e004      	b.n	8007e86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e86:	f000 fc6d 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	200005c4 	.word	0x200005c4
 8007e98:	200005d8 	.word	0x200005d8

08007e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ea0:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <vTaskMissedYield+0x14>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
}
 8007ea6:	bf00      	nop
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	200005d4 	.word	0x200005d4

08007eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ebc:	f000 f852 	bl	8007f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <prvIdleTask+0x28>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d9f9      	bls.n	8007ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <prvIdleTask+0x2c>)
 8007eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ed8:	e7f0      	b.n	8007ebc <prvIdleTask+0x8>
 8007eda:	bf00      	nop
 8007edc:	200004c4 	.word	0x200004c4
 8007ee0:	e000ed04 	.word	0xe000ed04

08007ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eea:	2300      	movs	r3, #0
 8007eec:	607b      	str	r3, [r7, #4]
 8007eee:	e00c      	b.n	8007f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <prvInitialiseTaskLists+0x60>)
 8007efc:	4413      	add	r3, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe fc26 	bl	8006750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3301      	adds	r3, #1
 8007f08:	607b      	str	r3, [r7, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b06      	cmp	r3, #6
 8007f0e:	d9ef      	bls.n	8007ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f10:	480d      	ldr	r0, [pc, #52]	; (8007f48 <prvInitialiseTaskLists+0x64>)
 8007f12:	f7fe fc1d 	bl	8006750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f16:	480d      	ldr	r0, [pc, #52]	; (8007f4c <prvInitialiseTaskLists+0x68>)
 8007f18:	f7fe fc1a 	bl	8006750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f1c:	480c      	ldr	r0, [pc, #48]	; (8007f50 <prvInitialiseTaskLists+0x6c>)
 8007f1e:	f7fe fc17 	bl	8006750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f22:	480c      	ldr	r0, [pc, #48]	; (8007f54 <prvInitialiseTaskLists+0x70>)
 8007f24:	f7fe fc14 	bl	8006750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f28:	480b      	ldr	r0, [pc, #44]	; (8007f58 <prvInitialiseTaskLists+0x74>)
 8007f2a:	f7fe fc11 	bl	8006750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <prvInitialiseTaskLists+0x78>)
 8007f30:	4a05      	ldr	r2, [pc, #20]	; (8007f48 <prvInitialiseTaskLists+0x64>)
 8007f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f34:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <prvInitialiseTaskLists+0x7c>)
 8007f36:	4a05      	ldr	r2, [pc, #20]	; (8007f4c <prvInitialiseTaskLists+0x68>)
 8007f38:	601a      	str	r2, [r3, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200004c4 	.word	0x200004c4
 8007f48:	20000550 	.word	0x20000550
 8007f4c:	20000564 	.word	0x20000564
 8007f50:	20000580 	.word	0x20000580
 8007f54:	20000594 	.word	0x20000594
 8007f58:	200005ac 	.word	0x200005ac
 8007f5c:	20000578 	.word	0x20000578
 8007f60:	2000057c 	.word	0x2000057c

08007f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f6a:	e019      	b.n	8007fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f6c:	f000 fbca 	bl	8008704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f70:	4b10      	ldr	r3, [pc, #64]	; (8007fb4 <prvCheckTasksWaitingTermination+0x50>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe fc71 	bl	8006864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f82:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <prvCheckTasksWaitingTermination+0x54>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	4a0b      	ldr	r2, [pc, #44]	; (8007fb8 <prvCheckTasksWaitingTermination+0x54>)
 8007f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f8c:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <prvCheckTasksWaitingTermination+0x58>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	4a0a      	ldr	r2, [pc, #40]	; (8007fbc <prvCheckTasksWaitingTermination+0x58>)
 8007f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f96:	f000 fbe5 	bl	8008764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f810 	bl	8007fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <prvCheckTasksWaitingTermination+0x58>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e1      	bne.n	8007f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000594 	.word	0x20000594
 8007fb8:	200005c0 	.word	0x200005c0
 8007fbc:	200005a8 	.word	0x200005a8

08007fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	334c      	adds	r3, #76	; 0x4c
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fd85 	bl	8009adc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d108      	bne.n	8007fee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fd7d 	bl	8008ae0 <vPortFree>
				vPortFree( pxTCB );
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fd7a 	bl	8008ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fec:	e018      	b.n	8008020 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d103      	bne.n	8008000 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fd71 	bl	8008ae0 <vPortFree>
	}
 8007ffe:	e00f      	b.n	8008020 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008006:	2b02      	cmp	r3, #2
 8008008:	d00a      	beq.n	8008020 <prvDeleteTCB+0x60>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	60fb      	str	r3, [r7, #12]
}
 800801c:	bf00      	nop
 800801e:	e7fe      	b.n	800801e <prvDeleteTCB+0x5e>
	}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <prvResetNextTaskUnblockTime+0x38>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d104      	bne.n	8008042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <prvResetNextTaskUnblockTime+0x3c>)
 800803a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800803e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008040:	e008      	b.n	8008054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <prvResetNextTaskUnblockTime+0x38>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	4a04      	ldr	r2, [pc, #16]	; (8008064 <prvResetNextTaskUnblockTime+0x3c>)
 8008052:	6013      	str	r3, [r2, #0]
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	20000578 	.word	0x20000578
 8008064:	200005e0 	.word	0x200005e0

08008068 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800806e:	4b0b      	ldr	r3, [pc, #44]	; (800809c <xTaskGetSchedulerState+0x34>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008076:	2301      	movs	r3, #1
 8008078:	607b      	str	r3, [r7, #4]
 800807a:	e008      	b.n	800808e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800807c:	4b08      	ldr	r3, [pc, #32]	; (80080a0 <xTaskGetSchedulerState+0x38>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008084:	2302      	movs	r3, #2
 8008086:	607b      	str	r3, [r7, #4]
 8008088:	e001      	b.n	800808e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800808a:	2300      	movs	r3, #0
 800808c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800808e:	687b      	ldr	r3, [r7, #4]
	}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	200005cc 	.word	0x200005cc
 80080a0:	200005e8 	.word	0x200005e8

080080a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d05e      	beq.n	8008178 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	4b31      	ldr	r3, [pc, #196]	; (8008184 <xTaskPriorityInherit+0xe0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d24e      	bcs.n	8008166 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	db06      	blt.n	80080de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	4b2c      	ldr	r3, [pc, #176]	; (8008184 <xTaskPriorityInherit+0xe0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	f1c3 0207 	rsb	r2, r3, #7
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6959      	ldr	r1, [r3, #20]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4a26      	ldr	r2, [pc, #152]	; (8008188 <xTaskPriorityInherit+0xe4>)
 80080f0:	4413      	add	r3, r2
 80080f2:	4299      	cmp	r1, r3
 80080f4:	d12f      	bne.n	8008156 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fbb2 	bl	8006864 <uxListRemove>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	2201      	movs	r2, #1
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	43da      	mvns	r2, r3
 8008112:	4b1e      	ldr	r3, [pc, #120]	; (800818c <xTaskPriorityInherit+0xe8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4013      	ands	r3, r2
 8008118:	4a1c      	ldr	r2, [pc, #112]	; (800818c <xTaskPriorityInherit+0xe8>)
 800811a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800811c:	4b19      	ldr	r3, [pc, #100]	; (8008184 <xTaskPriorityInherit+0xe0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	2201      	movs	r2, #1
 800812c:	409a      	lsls	r2, r3
 800812e:	4b17      	ldr	r3, [pc, #92]	; (800818c <xTaskPriorityInherit+0xe8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4313      	orrs	r3, r2
 8008134:	4a15      	ldr	r2, [pc, #84]	; (800818c <xTaskPriorityInherit+0xe8>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4a10      	ldr	r2, [pc, #64]	; (8008188 <xTaskPriorityInherit+0xe4>)
 8008146:	441a      	add	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	3304      	adds	r3, #4
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f7fe fb2b 	bl	80067aa <vListInsertEnd>
 8008154:	e004      	b.n	8008160 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <xTaskPriorityInherit+0xe0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008160:	2301      	movs	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e008      	b.n	8008178 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816a:	4b06      	ldr	r3, [pc, #24]	; (8008184 <xTaskPriorityInherit+0xe0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	429a      	cmp	r2, r3
 8008172:	d201      	bcs.n	8008178 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008174:	2301      	movs	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008178:	68fb      	ldr	r3, [r7, #12]
	}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200004c0 	.word	0x200004c0
 8008188:	200004c4 	.word	0x200004c4
 800818c:	200005c8 	.word	0x200005c8

08008190 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d06e      	beq.n	8008284 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081a6:	4b3a      	ldr	r3, [pc, #232]	; (8008290 <xTaskPriorityDisinherit+0x100>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d00a      	beq.n	80081c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	60fb      	str	r3, [r7, #12]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60bb      	str	r3, [r7, #8]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e8:	1e5a      	subs	r2, r3, #1
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d044      	beq.n	8008284 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d140      	bne.n	8008284 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	3304      	adds	r3, #4
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fb2c 	bl	8006864 <uxListRemove>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d115      	bne.n	800823e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008216:	491f      	ldr	r1, [pc, #124]	; (8008294 <xTaskPriorityDisinherit+0x104>)
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	440b      	add	r3, r1
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10a      	bne.n	800823e <xTaskPriorityDisinherit+0xae>
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	2201      	movs	r2, #1
 800822e:	fa02 f303 	lsl.w	r3, r2, r3
 8008232:	43da      	mvns	r2, r3
 8008234:	4b18      	ldr	r3, [pc, #96]	; (8008298 <xTaskPriorityDisinherit+0x108>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4013      	ands	r3, r2
 800823a:	4a17      	ldr	r2, [pc, #92]	; (8008298 <xTaskPriorityDisinherit+0x108>)
 800823c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	f1c3 0207 	rsb	r2, r3, #7
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	2201      	movs	r2, #1
 8008258:	409a      	lsls	r2, r3
 800825a:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <xTaskPriorityDisinherit+0x108>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4313      	orrs	r3, r2
 8008260:	4a0d      	ldr	r2, [pc, #52]	; (8008298 <xTaskPriorityDisinherit+0x108>)
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4a08      	ldr	r2, [pc, #32]	; (8008294 <xTaskPriorityDisinherit+0x104>)
 8008272:	441a      	add	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4610      	mov	r0, r2
 800827c:	f7fe fa95 	bl	80067aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008284:	697b      	ldr	r3, [r7, #20]
	}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	200004c0 	.word	0x200004c0
 8008294:	200004c4 	.word	0x200004c4
 8008298:	200005c8 	.word	0x200005c8

0800829c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082aa:	2301      	movs	r3, #1
 80082ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d077      	beq.n	80083a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60fb      	str	r3, [r7, #12]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d902      	bls.n	80082e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	e002      	b.n	80082e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	69fa      	ldr	r2, [r7, #28]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d058      	beq.n	80083a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d153      	bne.n	80083a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082fc:	4b2b      	ldr	r3, [pc, #172]	; (80083ac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	429a      	cmp	r2, r3
 8008304:	d10a      	bne.n	800831c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60bb      	str	r3, [r7, #8]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	db04      	blt.n	800833a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f1c3 0207 	rsb	r2, r3, #7
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	6959      	ldr	r1, [r3, #20]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4a19      	ldr	r2, [pc, #100]	; (80083b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800834a:	4413      	add	r3, r2
 800834c:	4299      	cmp	r1, r3
 800834e:	d129      	bne.n	80083a4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	3304      	adds	r3, #4
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe fa85 	bl	8006864 <uxListRemove>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	2201      	movs	r2, #1
 8008366:	fa02 f303 	lsl.w	r3, r2, r3
 800836a:	43da      	mvns	r2, r3
 800836c:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4013      	ands	r3, r2
 8008372:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008374:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	2201      	movs	r2, #1
 800837c:	409a      	lsls	r2, r3
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	4a0b      	ldr	r2, [pc, #44]	; (80083b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4a06      	ldr	r2, [pc, #24]	; (80083b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008396:	441a      	add	r2, r3
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	3304      	adds	r3, #4
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7fe fa03 	bl	80067aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083a4:	bf00      	nop
 80083a6:	3720      	adds	r7, #32
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	200004c0 	.word	0x200004c0
 80083b0:	200004c4 	.word	0x200004c4
 80083b4:	200005c8 	.word	0x200005c8

080083b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083bc:	4b07      	ldr	r3, [pc, #28]	; (80083dc <pvTaskIncrementMutexHeldCount+0x24>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <pvTaskIncrementMutexHeldCount+0x24>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083ca:	3201      	adds	r2, #1
 80083cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80083ce:	4b03      	ldr	r3, [pc, #12]	; (80083dc <pvTaskIncrementMutexHeldCount+0x24>)
 80083d0:	681b      	ldr	r3, [r3, #0]
	}
 80083d2:	4618      	mov	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	200004c0 	.word	0x200004c0

080083e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ea:	4b29      	ldr	r3, [pc, #164]	; (8008490 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f0:	4b28      	ldr	r3, [pc, #160]	; (8008494 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fa34 	bl	8006864 <uxListRemove>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10b      	bne.n	800841a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008402:	4b24      	ldr	r3, [pc, #144]	; (8008494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	2201      	movs	r2, #1
 800840a:	fa02 f303 	lsl.w	r3, r2, r3
 800840e:	43da      	mvns	r2, r3
 8008410:	4b21      	ldr	r3, [pc, #132]	; (8008498 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4013      	ands	r3, r2
 8008416:	4a20      	ldr	r2, [pc, #128]	; (8008498 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008418:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008420:	d10a      	bne.n	8008438 <prvAddCurrentTaskToDelayedList+0x58>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d007      	beq.n	8008438 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008428:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <prvAddCurrentTaskToDelayedList+0xb4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3304      	adds	r3, #4
 800842e:	4619      	mov	r1, r3
 8008430:	481a      	ldr	r0, [pc, #104]	; (800849c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008432:	f7fe f9ba 	bl	80067aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008436:	e026      	b.n	8008486 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008440:	4b14      	ldr	r3, [pc, #80]	; (8008494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	429a      	cmp	r2, r3
 800844e:	d209      	bcs.n	8008464 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008450:	4b13      	ldr	r3, [pc, #76]	; (80084a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3304      	adds	r3, #4
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f7fe f9c8 	bl	80067f2 <vListInsert>
}
 8008462:	e010      	b.n	8008486 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008464:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <prvAddCurrentTaskToDelayedList+0xb4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fe f9be 	bl	80067f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	429a      	cmp	r2, r3
 800847e:	d202      	bcs.n	8008486 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008480:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	6013      	str	r3, [r2, #0]
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	200005c4 	.word	0x200005c4
 8008494:	200004c0 	.word	0x200004c0
 8008498:	200005c8 	.word	0x200005c8
 800849c:	200005ac 	.word	0x200005ac
 80084a0:	2000057c 	.word	0x2000057c
 80084a4:	20000578 	.word	0x20000578
 80084a8:	200005e0 	.word	0x200005e0

080084ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3b04      	subs	r3, #4
 80084bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3b04      	subs	r3, #4
 80084ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084dc:	4a0c      	ldr	r2, [pc, #48]	; (8008510 <pxPortInitialiseStack+0x64>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3b14      	subs	r3, #20
 80084e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3b04      	subs	r3, #4
 80084f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f06f 0202 	mvn.w	r2, #2
 80084fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3b20      	subs	r3, #32
 8008500:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008502:	68fb      	ldr	r3, [r7, #12]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	08008515 	.word	0x08008515

08008514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800851e:	4b12      	ldr	r3, [pc, #72]	; (8008568 <prvTaskExitError+0x54>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008526:	d00a      	beq.n	800853e <prvTaskExitError+0x2a>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	60fb      	str	r3, [r7, #12]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <prvTaskExitError+0x28>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60bb      	str	r3, [r7, #8]
}
 8008550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008552:	bf00      	nop
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0fc      	beq.n	8008554 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	2000011c 	.word	0x2000011c
 800856c:	00000000 	.word	0x00000000

08008570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <pxCurrentTCBConst2>)
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	6808      	ldr	r0, [r1, #0]
 8008576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f380 8809 	msr	PSP, r0
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8811 	msr	BASEPRI, r0
 800858a:	4770      	bx	lr
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst2>:
 8008590:	200004c0 	.word	0x200004c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008598:	4808      	ldr	r0, [pc, #32]	; (80085bc <prvPortStartFirstTask+0x24>)
 800859a:	6800      	ldr	r0, [r0, #0]
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	f380 8808 	msr	MSP, r0
 80085a2:	f04f 0000 	mov.w	r0, #0
 80085a6:	f380 8814 	msr	CONTROL, r0
 80085aa:	b662      	cpsie	i
 80085ac:	b661      	cpsie	f
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	df00      	svc	0
 80085b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ba:	bf00      	nop
 80085bc:	e000ed08 	.word	0xe000ed08

080085c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085c6:	4b46      	ldr	r3, [pc, #280]	; (80086e0 <xPortStartScheduler+0x120>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a46      	ldr	r2, [pc, #280]	; (80086e4 <xPortStartScheduler+0x124>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10a      	bne.n	80085e6 <xPortStartScheduler+0x26>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085e6:	4b3e      	ldr	r3, [pc, #248]	; (80086e0 <xPortStartScheduler+0x120>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3f      	ldr	r2, [pc, #252]	; (80086e8 <xPortStartScheduler+0x128>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10a      	bne.n	8008606 <xPortStartScheduler+0x46>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008606:	4b39      	ldr	r3, [pc, #228]	; (80086ec <xPortStartScheduler+0x12c>)
 8008608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4b31      	ldr	r3, [pc, #196]	; (80086f0 <xPortStartScheduler+0x130>)
 800862c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800862e:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <xPortStartScheduler+0x134>)
 8008630:	2207      	movs	r2, #7
 8008632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008634:	e009      	b.n	800864a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008636:	4b2f      	ldr	r3, [pc, #188]	; (80086f4 <xPortStartScheduler+0x134>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3b01      	subs	r3, #1
 800863c:	4a2d      	ldr	r2, [pc, #180]	; (80086f4 <xPortStartScheduler+0x134>)
 800863e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d0ef      	beq.n	8008636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008656:	4b27      	ldr	r3, [pc, #156]	; (80086f4 <xPortStartScheduler+0x134>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1c3 0307 	rsb	r3, r3, #7
 800865e:	2b04      	cmp	r3, #4
 8008660:	d00a      	beq.n	8008678 <xPortStartScheduler+0xb8>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60bb      	str	r3, [r7, #8]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <xPortStartScheduler+0x134>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <xPortStartScheduler+0x134>)
 8008680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008682:	4b1c      	ldr	r3, [pc, #112]	; (80086f4 <xPortStartScheduler+0x134>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800868a:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <xPortStartScheduler+0x134>)
 800868c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008696:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <xPortStartScheduler+0x138>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <xPortStartScheduler+0x138>)
 800869c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <xPortStartScheduler+0x138>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <xPortStartScheduler+0x138>)
 80086a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086ae:	f000 f8dd 	bl	800886c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <xPortStartScheduler+0x13c>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086b8:	f000 f8fc 	bl	80088b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086bc:	4b10      	ldr	r3, [pc, #64]	; (8008700 <xPortStartScheduler+0x140>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <xPortStartScheduler+0x140>)
 80086c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086c8:	f7ff ff66 	bl	8008598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086cc:	f7ff fa86 	bl	8007bdc <vTaskSwitchContext>
	prvTaskExitError();
 80086d0:	f7ff ff20 	bl	8008514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	e000ed00 	.word	0xe000ed00
 80086e4:	410fc271 	.word	0x410fc271
 80086e8:	410fc270 	.word	0x410fc270
 80086ec:	e000e400 	.word	0xe000e400
 80086f0:	200005ec 	.word	0x200005ec
 80086f4:	200005f0 	.word	0x200005f0
 80086f8:	e000ed20 	.word	0xe000ed20
 80086fc:	2000011c 	.word	0x2000011c
 8008700:	e000ef34 	.word	0xe000ef34

08008704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	607b      	str	r3, [r7, #4]
}
 800871c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800871e:	4b0f      	ldr	r3, [pc, #60]	; (800875c <vPortEnterCritical+0x58>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <vPortEnterCritical+0x58>)
 8008726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <vPortEnterCritical+0x58>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d10f      	bne.n	8008750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <vPortEnterCritical+0x5c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <vPortEnterCritical+0x4c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	603b      	str	r3, [r7, #0]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <vPortEnterCritical+0x4a>
	}
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	2000011c 	.word	0x2000011c
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800876a:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <vPortExitCritical+0x50>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <vPortExitCritical+0x24>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <vPortExitCritical+0x50>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3b01      	subs	r3, #1
 800878e:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <vPortExitCritical+0x50>)
 8008790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008792:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <vPortExitCritical+0x50>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d105      	bne.n	80087a6 <vPortExitCritical+0x42>
 800879a:	2300      	movs	r3, #0
 800879c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f383 8811 	msr	BASEPRI, r3
}
 80087a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	2000011c 	.word	0x2000011c
	...

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b15      	ldr	r3, [pc, #84]	; (8008820 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f01e 0f10 	tst.w	lr, #16
 80087d0:	bf08      	it	eq
 80087d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	6010      	str	r0, [r2, #0]
 80087dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087e4:	f380 8811 	msr	BASEPRI, r0
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f7ff f9f4 	bl	8007bdc <vTaskSwitchContext>
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f380 8811 	msr	BASEPRI, r0
 80087fc:	bc09      	pop	{r0, r3}
 80087fe:	6819      	ldr	r1, [r3, #0]
 8008800:	6808      	ldr	r0, [r1, #0]
 8008802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008806:	f01e 0f10 	tst.w	lr, #16
 800880a:	bf08      	it	eq
 800880c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008810:	f380 8809 	msr	PSP, r0
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w

08008820 <pxCurrentTCBConst>:
 8008820:	200004c0 	.word	0x200004c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008842:	f7ff f913 	bl	8007a6c <xTaskIncrementTick>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <SysTick_Handler+0x40>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f383 8811 	msr	BASEPRI, r3
}
 800885e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008876:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <vPortSetupTimerInterrupt+0x38>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <vPortSetupTimerInterrupt+0x3c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <vPortSetupTimerInterrupt+0x40>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	099b      	lsrs	r3, r3, #6
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <vPortSetupTimerInterrupt+0x44>)
 800888a:	3b01      	subs	r3, #1
 800888c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800888e:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <vPortSetupTimerInterrupt+0x34>)
 8008890:	2207      	movs	r2, #7
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	e000e010 	.word	0xe000e010
 80088a4:	e000e018 	.word	0xe000e018
 80088a8:	20000000 	.word	0x20000000
 80088ac:	10624dd3 	.word	0x10624dd3
 80088b0:	e000e014 	.word	0xe000e014

080088b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088c4 <vPortEnableVFP+0x10>
 80088b8:	6801      	ldr	r1, [r0, #0]
 80088ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088c2:	bf00      	nop
 80088c4:	e000ed88 	.word	0xe000ed88

080088c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ce:	f3ef 8305 	mrs	r3, IPSR
 80088d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b0f      	cmp	r3, #15
 80088d8:	d914      	bls.n	8008904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088da:	4a17      	ldr	r2, [pc, #92]	; (8008938 <vPortValidateInterruptPriority+0x70>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088e4:	4b15      	ldr	r3, [pc, #84]	; (800893c <vPortValidateInterruptPriority+0x74>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	7afa      	ldrb	r2, [r7, #11]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d20a      	bcs.n	8008904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <vPortValidateInterruptPriority+0x78>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800890c:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <vPortValidateInterruptPriority+0x7c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d90a      	bls.n	800892a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	603b      	str	r3, [r7, #0]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <vPortValidateInterruptPriority+0x60>
	}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	e000e3f0 	.word	0xe000e3f0
 800893c:	200005ec 	.word	0x200005ec
 8008940:	e000ed0c 	.word	0xe000ed0c
 8008944:	200005f0 	.word	0x200005f0

08008948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	; 0x28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008950:	2300      	movs	r3, #0
 8008952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008954:	f7fe ffbe 	bl	80078d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008958:	4b5b      	ldr	r3, [pc, #364]	; (8008ac8 <pvPortMalloc+0x180>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008960:	f000 f920 	bl	8008ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008964:	4b59      	ldr	r3, [pc, #356]	; (8008acc <pvPortMalloc+0x184>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4013      	ands	r3, r2
 800896c:	2b00      	cmp	r3, #0
 800896e:	f040 8093 	bne.w	8008a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01d      	beq.n	80089b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008978:	2208      	movs	r2, #8
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b00      	cmp	r3, #0
 8008988:	d014      	beq.n	80089b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f023 0307 	bic.w	r3, r3, #7
 8008990:	3308      	adds	r3, #8
 8008992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <pvPortMalloc+0x6c>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	617b      	str	r3, [r7, #20]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d06e      	beq.n	8008a98 <pvPortMalloc+0x150>
 80089ba:	4b45      	ldr	r3, [pc, #276]	; (8008ad0 <pvPortMalloc+0x188>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d869      	bhi.n	8008a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089c4:	4b43      	ldr	r3, [pc, #268]	; (8008ad4 <pvPortMalloc+0x18c>)
 80089c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <pvPortMalloc+0x18c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ce:	e004      	b.n	80089da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d903      	bls.n	80089ec <pvPortMalloc+0xa4>
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f1      	bne.n	80089d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ec:	4b36      	ldr	r3, [pc, #216]	; (8008ac8 <pvPortMalloc+0x180>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d050      	beq.n	8008a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2208      	movs	r2, #8
 80089fc:	4413      	add	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	2308      	movs	r3, #8
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d91f      	bls.n	8008a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <pvPortMalloc+0xf8>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	613b      	str	r3, [r7, #16]
}
 8008a3c:	bf00      	nop
 8008a3e:	e7fe      	b.n	8008a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a52:	69b8      	ldr	r0, [r7, #24]
 8008a54:	f000 f908 	bl	8008c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a58:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	4a1b      	ldr	r2, [pc, #108]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a66:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <pvPortMalloc+0x190>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d203      	bcs.n	8008a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <pvPortMalloc+0x188>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <pvPortMalloc+0x190>)
 8008a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <pvPortMalloc+0x184>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <pvPortMalloc+0x194>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	4a11      	ldr	r2, [pc, #68]	; (8008adc <pvPortMalloc+0x194>)
 8008a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a98:	f7fe ff2a 	bl	80078f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <pvPortMalloc+0x174>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <pvPortMalloc+0x172>
	return pvReturn;
 8008abc:	69fb      	ldr	r3, [r7, #28]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3728      	adds	r7, #40	; 0x28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200041fc 	.word	0x200041fc
 8008acc:	20004210 	.word	0x20004210
 8008ad0:	20004200 	.word	0x20004200
 8008ad4:	200041f4 	.word	0x200041f4
 8008ad8:	20004204 	.word	0x20004204
 8008adc:	20004208 	.word	0x20004208

08008ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d04d      	beq.n	8008b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008af2:	2308      	movs	r3, #8
 8008af4:	425b      	negs	r3, r3
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4413      	add	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <vPortFree+0xb8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <vPortFree+0x44>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60fb      	str	r3, [r7, #12]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <vPortFree+0x62>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	60bb      	str	r3, [r7, #8]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <vPortFree+0xb8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01e      	beq.n	8008b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d11a      	bne.n	8008b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <vPortFree+0xb8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b68:	f7fe feb4 	bl	80078d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <vPortFree+0xbc>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <vPortFree+0xbc>)
 8008b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f000 f874 	bl	8008c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <vPortFree+0xc0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a06      	ldr	r2, [pc, #24]	; (8008ba0 <vPortFree+0xc0>)
 8008b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b8a:	f7fe feb1 	bl	80078f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b8e:	bf00      	nop
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20004210 	.word	0x20004210
 8008b9c:	20004200 	.word	0x20004200
 8008ba0:	2000420c 	.word	0x2000420c

08008ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bb0:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <prvHeapInit+0xac>)
 8008bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3307      	adds	r3, #7
 8008bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0307 	bic.w	r3, r3, #7
 8008bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	4a1f      	ldr	r2, [pc, #124]	; (8008c50 <prvHeapInit+0xac>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bdc:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <prvHeapInit+0xb0>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008be2:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <prvHeapInit+0xb0>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	4413      	add	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0307 	bic.w	r3, r3, #7
 8008bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4a15      	ldr	r2, [pc, #84]	; (8008c58 <prvHeapInit+0xb4>)
 8008c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <prvHeapInit+0xb4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c0e:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <prvHeapInit+0xb4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <prvHeapInit+0xb4>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	4a0a      	ldr	r2, [pc, #40]	; (8008c5c <prvHeapInit+0xb8>)
 8008c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <prvHeapInit+0xbc>)
 8008c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c3c:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <prvHeapInit+0xc0>)
 8008c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c42:	601a      	str	r2, [r3, #0]
}
 8008c44:	bf00      	nop
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	200005f4 	.word	0x200005f4
 8008c54:	200041f4 	.word	0x200041f4
 8008c58:	200041fc 	.word	0x200041fc
 8008c5c:	20004204 	.word	0x20004204
 8008c60:	20004200 	.word	0x20004200
 8008c64:	20004210 	.word	0x20004210

08008c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c70:	4b28      	ldr	r3, [pc, #160]	; (8008d14 <prvInsertBlockIntoFreeList+0xac>)
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e002      	b.n	8008c7c <prvInsertBlockIntoFreeList+0x14>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d8f7      	bhi.n	8008c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	4413      	add	r3, r2
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d108      	bne.n	8008caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	441a      	add	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	441a      	add	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d118      	bne.n	8008cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <prvInsertBlockIntoFreeList+0xb0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d00d      	beq.n	8008ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	441a      	add	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e008      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvInsertBlockIntoFreeList+0xb0>)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	e003      	b.n	8008cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d002      	beq.n	8008d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d06:	bf00      	nop
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	200041f4 	.word	0x200041f4
 8008d18:	200041fc 	.word	0x200041fc

08008d1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d20:	2200      	movs	r2, #0
 8008d22:	4912      	ldr	r1, [pc, #72]	; (8008d6c <MX_USB_DEVICE_Init+0x50>)
 8008d24:	4812      	ldr	r0, [pc, #72]	; (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d26:	f7fc f9b7 	bl	8005098 <USBD_Init>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d30:	f7f7 fe10 	bl	8000954 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d34:	490f      	ldr	r1, [pc, #60]	; (8008d74 <MX_USB_DEVICE_Init+0x58>)
 8008d36:	480e      	ldr	r0, [pc, #56]	; (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d38:	f7fc f9de 	bl	80050f8 <USBD_RegisterClass>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d42:	f7f7 fe07 	bl	8000954 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d46:	490c      	ldr	r1, [pc, #48]	; (8008d78 <MX_USB_DEVICE_Init+0x5c>)
 8008d48:	4809      	ldr	r0, [pc, #36]	; (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d4a:	f7fc f8ff 	bl	8004f4c <USBD_CDC_RegisterInterface>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d54:	f7f7 fdfe 	bl	8000954 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d58:	4805      	ldr	r0, [pc, #20]	; (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d5a:	f7fc f9f4 	bl	8005146 <USBD_Start>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d64:	f7f7 fdf6 	bl	8000954 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d68:	bf00      	nop
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000134 	.word	0x20000134
 8008d70:	2000449c 	.word	0x2000449c
 8008d74:	20000018 	.word	0x20000018
 8008d78:	20000120 	.word	0x20000120

08008d7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d80:	2200      	movs	r2, #0
 8008d82:	4905      	ldr	r1, [pc, #20]	; (8008d98 <CDC_Init_FS+0x1c>)
 8008d84:	4805      	ldr	r0, [pc, #20]	; (8008d9c <CDC_Init_FS+0x20>)
 8008d86:	f7fc f8f6 	bl	8004f76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d8a:	4905      	ldr	r1, [pc, #20]	; (8008da0 <CDC_Init_FS+0x24>)
 8008d8c:	4803      	ldr	r0, [pc, #12]	; (8008d9c <CDC_Init_FS+0x20>)
 8008d8e:	f7fc f910 	bl	8004fb2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20004f6c 	.word	0x20004f6c
 8008d9c:	2000449c 	.word	0x2000449c
 8008da0:	2000476c 	.word	0x2000476c

08008da4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008da8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b23      	cmp	r3, #35	; 0x23
 8008dc8:	d84a      	bhi.n	8008e60 <CDC_Control_FS+0xac>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <CDC_Control_FS+0x1c>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e61 	.word	0x08008e61
 8008dd4:	08008e61 	.word	0x08008e61
 8008dd8:	08008e61 	.word	0x08008e61
 8008ddc:	08008e61 	.word	0x08008e61
 8008de0:	08008e61 	.word	0x08008e61
 8008de4:	08008e61 	.word	0x08008e61
 8008de8:	08008e61 	.word	0x08008e61
 8008dec:	08008e61 	.word	0x08008e61
 8008df0:	08008e61 	.word	0x08008e61
 8008df4:	08008e61 	.word	0x08008e61
 8008df8:	08008e61 	.word	0x08008e61
 8008dfc:	08008e61 	.word	0x08008e61
 8008e00:	08008e61 	.word	0x08008e61
 8008e04:	08008e61 	.word	0x08008e61
 8008e08:	08008e61 	.word	0x08008e61
 8008e0c:	08008e61 	.word	0x08008e61
 8008e10:	08008e61 	.word	0x08008e61
 8008e14:	08008e61 	.word	0x08008e61
 8008e18:	08008e61 	.word	0x08008e61
 8008e1c:	08008e61 	.word	0x08008e61
 8008e20:	08008e61 	.word	0x08008e61
 8008e24:	08008e61 	.word	0x08008e61
 8008e28:	08008e61 	.word	0x08008e61
 8008e2c:	08008e61 	.word	0x08008e61
 8008e30:	08008e61 	.word	0x08008e61
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	08008e61 	.word	0x08008e61
 8008e3c:	08008e61 	.word	0x08008e61
 8008e40:	08008e61 	.word	0x08008e61
 8008e44:	08008e61 	.word	0x08008e61
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e61 	.word	0x08008e61
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008e61 	.word	0x08008e61
 8008e58:	08008e61 	.word	0x08008e61
 8008e5c:	08008e61 	.word	0x08008e61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e60:	bf00      	nop
  }

  return (USBD_OK);
 8008e62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4805      	ldr	r0, [pc, #20]	; (8008e94 <CDC_Receive_FS+0x24>)
 8008e7e:	f7fc f898 	bl	8004fb2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e82:	4804      	ldr	r0, [pc, #16]	; (8008e94 <CDC_Receive_FS+0x24>)
 8008e84:	f7fc f8de 	bl	8005044 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	2000449c 	.word	0x2000449c

08008e98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ea8:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <CDC_Transmit_FS+0x48>)
 8008eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e00b      	b.n	8008ed6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ebe:	887b      	ldrh	r3, [r7, #2]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	4806      	ldr	r0, [pc, #24]	; (8008ee0 <CDC_Transmit_FS+0x48>)
 8008ec6:	f7fc f856 	bl	8004f76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008eca:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <CDC_Transmit_FS+0x48>)
 8008ecc:	f7fc f88a 	bl	8004fe4 <USBD_CDC_TransmitPacket>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	2000449c 	.word	0x2000449c

08008ee4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2212      	movs	r2, #18
 8008f18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f1a:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	20000150 	.word	0x20000150

08008f2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f3e:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	20000164 	.word	0x20000164

08008f50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d105      	bne.n	8008f6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4907      	ldr	r1, [pc, #28]	; (8008f84 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f66:	4808      	ldr	r0, [pc, #32]	; (8008f88 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f68:	f7fd f91f 	bl	80061aa <USBD_GetString>
 8008f6c:	e004      	b.n	8008f78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4904      	ldr	r1, [pc, #16]	; (8008f84 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f72:	4805      	ldr	r0, [pc, #20]	; (8008f88 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f74:	f7fd f919 	bl	80061aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	2000576c 	.word	0x2000576c
 8008f88:	0800a8a8 	.word	0x0800a8a8

08008f8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	4904      	ldr	r1, [pc, #16]	; (8008fac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f9c:	4804      	ldr	r0, [pc, #16]	; (8008fb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f9e:	f7fd f904 	bl	80061aa <USBD_GetString>
  return USBD_StrDesc;
 8008fa2:	4b02      	ldr	r3, [pc, #8]	; (8008fac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	2000576c 	.word	0x2000576c
 8008fb0:	0800a8bc 	.word	0x0800a8bc

08008fb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	221a      	movs	r2, #26
 8008fc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fc6:	f000 f843 	bl	8009050 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fca:	4b02      	ldr	r3, [pc, #8]	; (8008fd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20000168 	.word	0x20000168

08008fd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d105      	bne.n	8008ff6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	4907      	ldr	r1, [pc, #28]	; (800900c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fee:	4808      	ldr	r0, [pc, #32]	; (8009010 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ff0:	f7fd f8db 	bl	80061aa <USBD_GetString>
 8008ff4:	e004      	b.n	8009000 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	4904      	ldr	r1, [pc, #16]	; (800900c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ffa:	4805      	ldr	r0, [pc, #20]	; (8009010 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ffc:	f7fd f8d5 	bl	80061aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	2000576c 	.word	0x2000576c
 8009010:	0800a8c8 	.word	0x0800a8c8

08009014 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d105      	bne.n	8009032 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4907      	ldr	r1, [pc, #28]	; (8009048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800902a:	4808      	ldr	r0, [pc, #32]	; (800904c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800902c:	f7fd f8bd 	bl	80061aa <USBD_GetString>
 8009030:	e004      	b.n	800903c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	4904      	ldr	r1, [pc, #16]	; (8009048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009036:	4805      	ldr	r0, [pc, #20]	; (800904c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009038:	f7fd f8b7 	bl	80061aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800903c:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	2000576c 	.word	0x2000576c
 800904c:	0800a8d4 	.word	0x0800a8d4

08009050 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009056:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <Get_SerialNum+0x44>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800905c:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <Get_SerialNum+0x48>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009062:	4b0e      	ldr	r3, [pc, #56]	; (800909c <Get_SerialNum+0x4c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d009      	beq.n	800908a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009076:	2208      	movs	r2, #8
 8009078:	4909      	ldr	r1, [pc, #36]	; (80090a0 <Get_SerialNum+0x50>)
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f814 	bl	80090a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009080:	2204      	movs	r2, #4
 8009082:	4908      	ldr	r1, [pc, #32]	; (80090a4 <Get_SerialNum+0x54>)
 8009084:	68b8      	ldr	r0, [r7, #8]
 8009086:	f000 f80f 	bl	80090a8 <IntToUnicode>
  }
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	1fff7a10 	.word	0x1fff7a10
 8009098:	1fff7a14 	.word	0x1fff7a14
 800909c:	1fff7a18 	.word	0x1fff7a18
 80090a0:	2000016a 	.word	0x2000016a
 80090a4:	2000017a 	.word	0x2000017a

080090a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090ba:	2300      	movs	r3, #0
 80090bc:	75fb      	strb	r3, [r7, #23]
 80090be:	e027      	b.n	8009110 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	0f1b      	lsrs	r3, r3, #28
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d80b      	bhi.n	80090e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	0f1b      	lsrs	r3, r3, #28
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	4619      	mov	r1, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	440b      	add	r3, r1
 80090d8:	3230      	adds	r2, #48	; 0x30
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	e00a      	b.n	80090f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	0f1b      	lsrs	r3, r3, #28
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	440b      	add	r3, r1
 80090f0:	3237      	adds	r2, #55	; 0x37
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	011b      	lsls	r3, r3, #4
 80090fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	3301      	adds	r3, #1
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	4413      	add	r3, r2
 8009106:	2200      	movs	r2, #0
 8009108:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	3301      	adds	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
 8009110:	7dfa      	ldrb	r2, [r7, #23]
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	429a      	cmp	r2, r3
 8009116:	d3d3      	bcc.n	80090c0 <IntToUnicode+0x18>
  }
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
	...

08009128 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	; 0x28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009130:	f107 0314 	add.w	r3, r7, #20
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	605a      	str	r2, [r3, #4]
 800913a:	609a      	str	r2, [r3, #8]
 800913c:	60da      	str	r2, [r3, #12]
 800913e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009148:	d13a      	bne.n	80091c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800914a:	2300      	movs	r3, #0
 800914c:	613b      	str	r3, [r7, #16]
 800914e:	4b1e      	ldr	r3, [pc, #120]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	4a1d      	ldr	r2, [pc, #116]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 8009154:	f043 0301 	orr.w	r3, r3, #1
 8009158:	6313      	str	r3, [r2, #48]	; 0x30
 800915a:	4b1b      	ldr	r3, [pc, #108]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009166:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800916a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800916c:	2302      	movs	r3, #2
 800916e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009174:	2303      	movs	r3, #3
 8009176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009178:	230a      	movs	r3, #10
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800917c:	f107 0314 	add.w	r3, r7, #20
 8009180:	4619      	mov	r1, r3
 8009182:	4812      	ldr	r0, [pc, #72]	; (80091cc <HAL_PCD_MspInit+0xa4>)
 8009184:	f7f7 feae 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009188:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 800918a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918c:	4a0e      	ldr	r2, [pc, #56]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 800918e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009192:	6353      	str	r3, [r2, #52]	; 0x34
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 800919a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800919c:	4a0a      	ldr	r2, [pc, #40]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 800919e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091a2:	6453      	str	r3, [r2, #68]	; 0x44
 80091a4:	4b08      	ldr	r3, [pc, #32]	; (80091c8 <HAL_PCD_MspInit+0xa0>)
 80091a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80091b0:	2200      	movs	r2, #0
 80091b2:	2105      	movs	r1, #5
 80091b4:	2043      	movs	r0, #67	; 0x43
 80091b6:	f7f7 fe6b 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091ba:	2043      	movs	r0, #67	; 0x43
 80091bc:	f7f7 fe84 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091c0:	bf00      	nop
 80091c2:	3728      	adds	r7, #40	; 0x28
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	40023800 	.word	0x40023800
 80091cc:	40020000 	.word	0x40020000

080091d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091e4:	4619      	mov	r1, r3
 80091e6:	4610      	mov	r0, r2
 80091e8:	f7fb fff8 	bl	80051dc <USBD_LL_SetupStage>
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	4613      	mov	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	1a9b      	subs	r3, r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	4619      	mov	r1, r3
 800921e:	f7fc f832 	bl	8005286 <USBD_LL_DataOutStage>
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	4613      	mov	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	3348      	adds	r3, #72	; 0x48
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	4619      	mov	r1, r3
 8009252:	f7fc f87b 	bl	800534c <USBD_LL_DataInStage>
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800926c:	4618      	mov	r0, r3
 800926e:	f7fc f98f 	bl	8005590 <USBD_LL_SOF>
}
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009282:	2301      	movs	r3, #1
 8009284:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d001      	beq.n	8009292 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800928e:	f7f7 fb61 	bl	8000954 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009298:	7bfa      	ldrb	r2, [r7, #15]
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7fc f939 	bl	8005514 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fc f8e5 	bl	8005478 <USBD_LL_Reset>
}
 80092ae:	bf00      	nop
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fc f934 	bl	8005534 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6812      	ldr	r2, [r2, #0]
 80092da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092ec:	4b04      	ldr	r3, [pc, #16]	; (8009300 <HAL_PCD_SuspendCallback+0x48>)
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	4a03      	ldr	r2, [pc, #12]	; (8009300 <HAL_PCD_SuspendCallback+0x48>)
 80092f2:	f043 0306 	orr.w	r3, r3, #6
 80092f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	e000ed00 	.word	0xe000ed00

08009304 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009312:	4618      	mov	r0, r3
 8009314:	f7fc f924 	bl	8005560 <USBD_LL_Resume>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f7fc f972 	bl	8005620 <USBD_LL_IsoOUTIncomplete>
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	4611      	mov	r1, r2
 800935a:	4618      	mov	r0, r3
 800935c:	f7fc f93a 	bl	80055d4 <USBD_LL_IsoINIncomplete>
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009376:	4618      	mov	r0, r3
 8009378:	f7fc f978 	bl	800566c <USBD_LL_DevConnected>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009392:	4618      	mov	r0, r3
 8009394:	f7fc f975 	bl	8005682 <USBD_LL_DevDisconnected>
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d13c      	bne.n	800942a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093b0:	4a20      	ldr	r2, [pc, #128]	; (8009434 <USBD_LL_Init+0x94>)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <USBD_LL_Init+0x94>)
 80093bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093c0:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <USBD_LL_Init+0x94>)
 80093c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093c8:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <USBD_LL_Init+0x94>)
 80093ca:	2204      	movs	r2, #4
 80093cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093ce:	4b19      	ldr	r3, [pc, #100]	; (8009434 <USBD_LL_Init+0x94>)
 80093d0:	2202      	movs	r2, #2
 80093d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093d4:	4b17      	ldr	r3, [pc, #92]	; (8009434 <USBD_LL_Init+0x94>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093da:	4b16      	ldr	r3, [pc, #88]	; (8009434 <USBD_LL_Init+0x94>)
 80093dc:	2202      	movs	r2, #2
 80093de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093e0:	4b14      	ldr	r3, [pc, #80]	; (8009434 <USBD_LL_Init+0x94>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093e6:	4b13      	ldr	r3, [pc, #76]	; (8009434 <USBD_LL_Init+0x94>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <USBD_LL_Init+0x94>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093f2:	4b10      	ldr	r3, [pc, #64]	; (8009434 <USBD_LL_Init+0x94>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093f8:	4b0e      	ldr	r3, [pc, #56]	; (8009434 <USBD_LL_Init+0x94>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093fe:	480d      	ldr	r0, [pc, #52]	; (8009434 <USBD_LL_Init+0x94>)
 8009400:	f7f7 ff40 	bl	8001284 <HAL_PCD_Init>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800940a:	f7f7 faa3 	bl	8000954 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800940e:	2180      	movs	r1, #128	; 0x80
 8009410:	4808      	ldr	r0, [pc, #32]	; (8009434 <USBD_LL_Init+0x94>)
 8009412:	f7f9 f89e 	bl	8002552 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009416:	2240      	movs	r2, #64	; 0x40
 8009418:	2100      	movs	r1, #0
 800941a:	4806      	ldr	r0, [pc, #24]	; (8009434 <USBD_LL_Init+0x94>)
 800941c:	f7f9 f852 	bl	80024c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009420:	2280      	movs	r2, #128	; 0x80
 8009422:	2101      	movs	r1, #1
 8009424:	4803      	ldr	r0, [pc, #12]	; (8009434 <USBD_LL_Init+0x94>)
 8009426:	f7f9 f84d 	bl	80024c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	2000596c 	.word	0x2000596c

08009438 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800944e:	4618      	mov	r0, r3
 8009450:	f7f8 f835 	bl	80014be <HAL_PCD_Start>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f942 	bl	80096e4 <USBD_Get_USB_Status>
 8009460:	4603      	mov	r3, r0
 8009462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009464:	7bbb      	ldrb	r3, [r7, #14]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	4608      	mov	r0, r1
 8009478:	4611      	mov	r1, r2
 800947a:	461a      	mov	r2, r3
 800947c:	4603      	mov	r3, r0
 800947e:	70fb      	strb	r3, [r7, #3]
 8009480:	460b      	mov	r3, r1
 8009482:	70bb      	strb	r3, [r7, #2]
 8009484:	4613      	mov	r3, r2
 8009486:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009496:	78bb      	ldrb	r3, [r7, #2]
 8009498:	883a      	ldrh	r2, [r7, #0]
 800949a:	78f9      	ldrb	r1, [r7, #3]
 800949c:	f7f8 fc19 	bl	8001cd2 <HAL_PCD_EP_Open>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f91c 	bl	80096e4 <USBD_Get_USB_Status>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	4611      	mov	r1, r2
 80094d8:	4618      	mov	r0, r3
 80094da:	f7f8 fc62 	bl	8001da2 <HAL_PCD_EP_Close>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 f8fd 	bl	80096e4 <USBD_Get_USB_Status>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009512:	78fa      	ldrb	r2, [r7, #3]
 8009514:	4611      	mov	r1, r2
 8009516:	4618      	mov	r0, r3
 8009518:	f7f8 fd3a 	bl	8001f90 <HAL_PCD_EP_SetStall>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f8de 	bl	80096e4 <USBD_Get_USB_Status>
 8009528:	4603      	mov	r3, r0
 800952a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952c:	7bbb      	ldrb	r3, [r7, #14]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009550:	78fa      	ldrb	r2, [r7, #3]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7f8 fd7f 	bl	8002058 <HAL_PCD_EP_ClrStall>
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f8bf 	bl	80096e4 <USBD_Get_USB_Status>
 8009566:	4603      	mov	r3, r0
 8009568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956a:	7bbb      	ldrb	r3, [r7, #14]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009586:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800958c:	2b00      	cmp	r3, #0
 800958e:	da0b      	bge.n	80095a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009596:	68f9      	ldr	r1, [r7, #12]
 8009598:	4613      	mov	r3, r2
 800959a:	00db      	lsls	r3, r3, #3
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	333e      	adds	r3, #62	; 0x3e
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	e00b      	b.n	80095c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	4613      	mov	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7f8 fb4c 	bl	8001c88 <HAL_PCD_SetAddress>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 f874 	bl	80096e4 <USBD_Get_USB_Status>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009600:	7bbb      	ldrb	r3, [r7, #14]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b086      	sub	sp, #24
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
 8009616:	460b      	mov	r3, r1
 8009618:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009628:	7af9      	ldrb	r1, [r7, #11]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	f7f8 fc65 	bl	8001efc <HAL_PCD_EP_Transmit>
 8009632:	4603      	mov	r3, r0
 8009634:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 f853 	bl	80096e4 <USBD_Get_USB_Status>
 800963e:	4603      	mov	r3, r0
 8009640:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009642:	7dbb      	ldrb	r3, [r7, #22]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	607a      	str	r2, [r7, #4]
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	460b      	mov	r3, r1
 800965a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800966a:	7af9      	ldrb	r1, [r7, #11]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	f7f8 fbe1 	bl	8001e36 <HAL_PCD_EP_Receive>
 8009674:	4603      	mov	r3, r0
 8009676:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f832 	bl	80096e4 <USBD_Get_USB_Status>
 8009680:	4603      	mov	r3, r0
 8009682:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009684:	7dbb      	ldrb	r3, [r7, #22]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	4611      	mov	r1, r2
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f8 fc11 	bl	8001ecc <HAL_PCD_EP_GetRxCount>
 80096aa:	4603      	mov	r3, r0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096bc:	4b03      	ldr	r3, [pc, #12]	; (80096cc <USBD_static_malloc+0x18>)
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20004214 	.word	0x20004214

080096d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]

}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d817      	bhi.n	8009728 <USBD_Get_USB_Status+0x44>
 80096f8:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <USBD_Get_USB_Status+0x1c>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	08009711 	.word	0x08009711
 8009704:	08009717 	.word	0x08009717
 8009708:	0800971d 	.word	0x0800971d
 800970c:	08009723 	.word	0x08009723
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
    break;
 8009714:	e00b      	b.n	800972e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009716:	2303      	movs	r3, #3
 8009718:	73fb      	strb	r3, [r7, #15]
    break;
 800971a:	e008      	b.n	800972e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800971c:	2301      	movs	r3, #1
 800971e:	73fb      	strb	r3, [r7, #15]
    break;
 8009720:	e005      	b.n	800972e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009722:	2303      	movs	r3, #3
 8009724:	73fb      	strb	r3, [r7, #15]
    break;
 8009726:	e002      	b.n	800972e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009728:	2303      	movs	r3, #3
 800972a:	73fb      	strb	r3, [r7, #15]
    break;
 800972c:	bf00      	nop
  }
  return usb_status;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <__errno>:
 800973c:	4b01      	ldr	r3, [pc, #4]	; (8009744 <__errno+0x8>)
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000184 	.word	0x20000184

08009748 <std>:
 8009748:	2300      	movs	r3, #0
 800974a:	b510      	push	{r4, lr}
 800974c:	4604      	mov	r4, r0
 800974e:	e9c0 3300 	strd	r3, r3, [r0]
 8009752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009756:	6083      	str	r3, [r0, #8]
 8009758:	8181      	strh	r1, [r0, #12]
 800975a:	6643      	str	r3, [r0, #100]	; 0x64
 800975c:	81c2      	strh	r2, [r0, #14]
 800975e:	6183      	str	r3, [r0, #24]
 8009760:	4619      	mov	r1, r3
 8009762:	2208      	movs	r2, #8
 8009764:	305c      	adds	r0, #92	; 0x5c
 8009766:	f000 f91a 	bl	800999e <memset>
 800976a:	4b05      	ldr	r3, [pc, #20]	; (8009780 <std+0x38>)
 800976c:	6263      	str	r3, [r4, #36]	; 0x24
 800976e:	4b05      	ldr	r3, [pc, #20]	; (8009784 <std+0x3c>)
 8009770:	62a3      	str	r3, [r4, #40]	; 0x28
 8009772:	4b05      	ldr	r3, [pc, #20]	; (8009788 <std+0x40>)
 8009774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <std+0x44>)
 8009778:	6224      	str	r4, [r4, #32]
 800977a:	6323      	str	r3, [r4, #48]	; 0x30
 800977c:	bd10      	pop	{r4, pc}
 800977e:	bf00      	nop
 8009780:	08009bb5 	.word	0x08009bb5
 8009784:	08009bd7 	.word	0x08009bd7
 8009788:	08009c0f 	.word	0x08009c0f
 800978c:	08009c33 	.word	0x08009c33

08009790 <_cleanup_r>:
 8009790:	4901      	ldr	r1, [pc, #4]	; (8009798 <_cleanup_r+0x8>)
 8009792:	f000 b8af 	b.w	80098f4 <_fwalk_reent>
 8009796:	bf00      	nop
 8009798:	08009d8d 	.word	0x08009d8d

0800979c <__sfmoreglue>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	1e4a      	subs	r2, r1, #1
 80097a0:	2568      	movs	r5, #104	; 0x68
 80097a2:	4355      	muls	r5, r2
 80097a4:	460e      	mov	r6, r1
 80097a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097aa:	f000 f901 	bl	80099b0 <_malloc_r>
 80097ae:	4604      	mov	r4, r0
 80097b0:	b140      	cbz	r0, 80097c4 <__sfmoreglue+0x28>
 80097b2:	2100      	movs	r1, #0
 80097b4:	e9c0 1600 	strd	r1, r6, [r0]
 80097b8:	300c      	adds	r0, #12
 80097ba:	60a0      	str	r0, [r4, #8]
 80097bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097c0:	f000 f8ed 	bl	800999e <memset>
 80097c4:	4620      	mov	r0, r4
 80097c6:	bd70      	pop	{r4, r5, r6, pc}

080097c8 <__sfp_lock_acquire>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__sfp_lock_acquire+0x8>)
 80097ca:	f000 b8d8 	b.w	800997e <__retarget_lock_acquire_recursive>
 80097ce:	bf00      	nop
 80097d0:	20005d7c 	.word	0x20005d7c

080097d4 <__sfp_lock_release>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__sfp_lock_release+0x8>)
 80097d6:	f000 b8d3 	b.w	8009980 <__retarget_lock_release_recursive>
 80097da:	bf00      	nop
 80097dc:	20005d7c 	.word	0x20005d7c

080097e0 <__sinit_lock_acquire>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__sinit_lock_acquire+0x8>)
 80097e2:	f000 b8cc 	b.w	800997e <__retarget_lock_acquire_recursive>
 80097e6:	bf00      	nop
 80097e8:	20005d77 	.word	0x20005d77

080097ec <__sinit_lock_release>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__sinit_lock_release+0x8>)
 80097ee:	f000 b8c7 	b.w	8009980 <__retarget_lock_release_recursive>
 80097f2:	bf00      	nop
 80097f4:	20005d77 	.word	0x20005d77

080097f8 <__sinit>:
 80097f8:	b510      	push	{r4, lr}
 80097fa:	4604      	mov	r4, r0
 80097fc:	f7ff fff0 	bl	80097e0 <__sinit_lock_acquire>
 8009800:	69a3      	ldr	r3, [r4, #24]
 8009802:	b11b      	cbz	r3, 800980c <__sinit+0x14>
 8009804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009808:	f7ff bff0 	b.w	80097ec <__sinit_lock_release>
 800980c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009810:	6523      	str	r3, [r4, #80]	; 0x50
 8009812:	4b13      	ldr	r3, [pc, #76]	; (8009860 <__sinit+0x68>)
 8009814:	4a13      	ldr	r2, [pc, #76]	; (8009864 <__sinit+0x6c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	62a2      	str	r2, [r4, #40]	; 0x28
 800981a:	42a3      	cmp	r3, r4
 800981c:	bf04      	itt	eq
 800981e:	2301      	moveq	r3, #1
 8009820:	61a3      	streq	r3, [r4, #24]
 8009822:	4620      	mov	r0, r4
 8009824:	f000 f820 	bl	8009868 <__sfp>
 8009828:	6060      	str	r0, [r4, #4]
 800982a:	4620      	mov	r0, r4
 800982c:	f000 f81c 	bl	8009868 <__sfp>
 8009830:	60a0      	str	r0, [r4, #8]
 8009832:	4620      	mov	r0, r4
 8009834:	f000 f818 	bl	8009868 <__sfp>
 8009838:	2200      	movs	r2, #0
 800983a:	60e0      	str	r0, [r4, #12]
 800983c:	2104      	movs	r1, #4
 800983e:	6860      	ldr	r0, [r4, #4]
 8009840:	f7ff ff82 	bl	8009748 <std>
 8009844:	68a0      	ldr	r0, [r4, #8]
 8009846:	2201      	movs	r2, #1
 8009848:	2109      	movs	r1, #9
 800984a:	f7ff ff7d 	bl	8009748 <std>
 800984e:	68e0      	ldr	r0, [r4, #12]
 8009850:	2202      	movs	r2, #2
 8009852:	2112      	movs	r1, #18
 8009854:	f7ff ff78 	bl	8009748 <std>
 8009858:	2301      	movs	r3, #1
 800985a:	61a3      	str	r3, [r4, #24]
 800985c:	e7d2      	b.n	8009804 <__sinit+0xc>
 800985e:	bf00      	nop
 8009860:	0800a95c 	.word	0x0800a95c
 8009864:	08009791 	.word	0x08009791

08009868 <__sfp>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	4607      	mov	r7, r0
 800986c:	f7ff ffac 	bl	80097c8 <__sfp_lock_acquire>
 8009870:	4b1e      	ldr	r3, [pc, #120]	; (80098ec <__sfp+0x84>)
 8009872:	681e      	ldr	r6, [r3, #0]
 8009874:	69b3      	ldr	r3, [r6, #24]
 8009876:	b913      	cbnz	r3, 800987e <__sfp+0x16>
 8009878:	4630      	mov	r0, r6
 800987a:	f7ff ffbd 	bl	80097f8 <__sinit>
 800987e:	3648      	adds	r6, #72	; 0x48
 8009880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009884:	3b01      	subs	r3, #1
 8009886:	d503      	bpl.n	8009890 <__sfp+0x28>
 8009888:	6833      	ldr	r3, [r6, #0]
 800988a:	b30b      	cbz	r3, 80098d0 <__sfp+0x68>
 800988c:	6836      	ldr	r6, [r6, #0]
 800988e:	e7f7      	b.n	8009880 <__sfp+0x18>
 8009890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009894:	b9d5      	cbnz	r5, 80098cc <__sfp+0x64>
 8009896:	4b16      	ldr	r3, [pc, #88]	; (80098f0 <__sfp+0x88>)
 8009898:	60e3      	str	r3, [r4, #12]
 800989a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800989e:	6665      	str	r5, [r4, #100]	; 0x64
 80098a0:	f000 f86c 	bl	800997c <__retarget_lock_init_recursive>
 80098a4:	f7ff ff96 	bl	80097d4 <__sfp_lock_release>
 80098a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098b0:	6025      	str	r5, [r4, #0]
 80098b2:	61a5      	str	r5, [r4, #24]
 80098b4:	2208      	movs	r2, #8
 80098b6:	4629      	mov	r1, r5
 80098b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098bc:	f000 f86f 	bl	800999e <memset>
 80098c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098c8:	4620      	mov	r0, r4
 80098ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098cc:	3468      	adds	r4, #104	; 0x68
 80098ce:	e7d9      	b.n	8009884 <__sfp+0x1c>
 80098d0:	2104      	movs	r1, #4
 80098d2:	4638      	mov	r0, r7
 80098d4:	f7ff ff62 	bl	800979c <__sfmoreglue>
 80098d8:	4604      	mov	r4, r0
 80098da:	6030      	str	r0, [r6, #0]
 80098dc:	2800      	cmp	r0, #0
 80098de:	d1d5      	bne.n	800988c <__sfp+0x24>
 80098e0:	f7ff ff78 	bl	80097d4 <__sfp_lock_release>
 80098e4:	230c      	movs	r3, #12
 80098e6:	603b      	str	r3, [r7, #0]
 80098e8:	e7ee      	b.n	80098c8 <__sfp+0x60>
 80098ea:	bf00      	nop
 80098ec:	0800a95c 	.word	0x0800a95c
 80098f0:	ffff0001 	.word	0xffff0001

080098f4 <_fwalk_reent>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	4606      	mov	r6, r0
 80098fa:	4688      	mov	r8, r1
 80098fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009900:	2700      	movs	r7, #0
 8009902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009906:	f1b9 0901 	subs.w	r9, r9, #1
 800990a:	d505      	bpl.n	8009918 <_fwalk_reent+0x24>
 800990c:	6824      	ldr	r4, [r4, #0]
 800990e:	2c00      	cmp	r4, #0
 8009910:	d1f7      	bne.n	8009902 <_fwalk_reent+0xe>
 8009912:	4638      	mov	r0, r7
 8009914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009918:	89ab      	ldrh	r3, [r5, #12]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d907      	bls.n	800992e <_fwalk_reent+0x3a>
 800991e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009922:	3301      	adds	r3, #1
 8009924:	d003      	beq.n	800992e <_fwalk_reent+0x3a>
 8009926:	4629      	mov	r1, r5
 8009928:	4630      	mov	r0, r6
 800992a:	47c0      	blx	r8
 800992c:	4307      	orrs	r7, r0
 800992e:	3568      	adds	r5, #104	; 0x68
 8009930:	e7e9      	b.n	8009906 <_fwalk_reent+0x12>
	...

08009934 <__libc_init_array>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	4d0d      	ldr	r5, [pc, #52]	; (800996c <__libc_init_array+0x38>)
 8009938:	4c0d      	ldr	r4, [pc, #52]	; (8009970 <__libc_init_array+0x3c>)
 800993a:	1b64      	subs	r4, r4, r5
 800993c:	10a4      	asrs	r4, r4, #2
 800993e:	2600      	movs	r6, #0
 8009940:	42a6      	cmp	r6, r4
 8009942:	d109      	bne.n	8009958 <__libc_init_array+0x24>
 8009944:	4d0b      	ldr	r5, [pc, #44]	; (8009974 <__libc_init_array+0x40>)
 8009946:	4c0c      	ldr	r4, [pc, #48]	; (8009978 <__libc_init_array+0x44>)
 8009948:	f000 ff58 	bl	800a7fc <_init>
 800994c:	1b64      	subs	r4, r4, r5
 800994e:	10a4      	asrs	r4, r4, #2
 8009950:	2600      	movs	r6, #0
 8009952:	42a6      	cmp	r6, r4
 8009954:	d105      	bne.n	8009962 <__libc_init_array+0x2e>
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	f855 3b04 	ldr.w	r3, [r5], #4
 800995c:	4798      	blx	r3
 800995e:	3601      	adds	r6, #1
 8009960:	e7ee      	b.n	8009940 <__libc_init_array+0xc>
 8009962:	f855 3b04 	ldr.w	r3, [r5], #4
 8009966:	4798      	blx	r3
 8009968:	3601      	adds	r6, #1
 800996a:	e7f2      	b.n	8009952 <__libc_init_array+0x1e>
 800996c:	0800a99c 	.word	0x0800a99c
 8009970:	0800a99c 	.word	0x0800a99c
 8009974:	0800a99c 	.word	0x0800a99c
 8009978:	0800a9a0 	.word	0x0800a9a0

0800997c <__retarget_lock_init_recursive>:
 800997c:	4770      	bx	lr

0800997e <__retarget_lock_acquire_recursive>:
 800997e:	4770      	bx	lr

08009980 <__retarget_lock_release_recursive>:
 8009980:	4770      	bx	lr

08009982 <memcpy>:
 8009982:	440a      	add	r2, r1
 8009984:	4291      	cmp	r1, r2
 8009986:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800998a:	d100      	bne.n	800998e <memcpy+0xc>
 800998c:	4770      	bx	lr
 800998e:	b510      	push	{r4, lr}
 8009990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009998:	4291      	cmp	r1, r2
 800999a:	d1f9      	bne.n	8009990 <memcpy+0xe>
 800999c:	bd10      	pop	{r4, pc}

0800999e <memset>:
 800999e:	4402      	add	r2, r0
 80099a0:	4603      	mov	r3, r0
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d100      	bne.n	80099a8 <memset+0xa>
 80099a6:	4770      	bx	lr
 80099a8:	f803 1b01 	strb.w	r1, [r3], #1
 80099ac:	e7f9      	b.n	80099a2 <memset+0x4>
	...

080099b0 <_malloc_r>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	1ccd      	adds	r5, r1, #3
 80099b4:	f025 0503 	bic.w	r5, r5, #3
 80099b8:	3508      	adds	r5, #8
 80099ba:	2d0c      	cmp	r5, #12
 80099bc:	bf38      	it	cc
 80099be:	250c      	movcc	r5, #12
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	4606      	mov	r6, r0
 80099c4:	db01      	blt.n	80099ca <_malloc_r+0x1a>
 80099c6:	42a9      	cmp	r1, r5
 80099c8:	d903      	bls.n	80099d2 <_malloc_r+0x22>
 80099ca:	230c      	movs	r3, #12
 80099cc:	6033      	str	r3, [r6, #0]
 80099ce:	2000      	movs	r0, #0
 80099d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d2:	f000 fa29 	bl	8009e28 <__malloc_lock>
 80099d6:	4921      	ldr	r1, [pc, #132]	; (8009a5c <_malloc_r+0xac>)
 80099d8:	680a      	ldr	r2, [r1, #0]
 80099da:	4614      	mov	r4, r2
 80099dc:	b99c      	cbnz	r4, 8009a06 <_malloc_r+0x56>
 80099de:	4f20      	ldr	r7, [pc, #128]	; (8009a60 <_malloc_r+0xb0>)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	b923      	cbnz	r3, 80099ee <_malloc_r+0x3e>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f8d4 	bl	8009b94 <_sbrk_r>
 80099ec:	6038      	str	r0, [r7, #0]
 80099ee:	4629      	mov	r1, r5
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 f8cf 	bl	8009b94 <_sbrk_r>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d123      	bne.n	8009a42 <_malloc_r+0x92>
 80099fa:	230c      	movs	r3, #12
 80099fc:	6033      	str	r3, [r6, #0]
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 fa18 	bl	8009e34 <__malloc_unlock>
 8009a04:	e7e3      	b.n	80099ce <_malloc_r+0x1e>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	1b5b      	subs	r3, r3, r5
 8009a0a:	d417      	bmi.n	8009a3c <_malloc_r+0x8c>
 8009a0c:	2b0b      	cmp	r3, #11
 8009a0e:	d903      	bls.n	8009a18 <_malloc_r+0x68>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	441c      	add	r4, r3
 8009a14:	6025      	str	r5, [r4, #0]
 8009a16:	e004      	b.n	8009a22 <_malloc_r+0x72>
 8009a18:	6863      	ldr	r3, [r4, #4]
 8009a1a:	42a2      	cmp	r2, r4
 8009a1c:	bf0c      	ite	eq
 8009a1e:	600b      	streq	r3, [r1, #0]
 8009a20:	6053      	strne	r3, [r2, #4]
 8009a22:	4630      	mov	r0, r6
 8009a24:	f000 fa06 	bl	8009e34 <__malloc_unlock>
 8009a28:	f104 000b 	add.w	r0, r4, #11
 8009a2c:	1d23      	adds	r3, r4, #4
 8009a2e:	f020 0007 	bic.w	r0, r0, #7
 8009a32:	1ac2      	subs	r2, r0, r3
 8009a34:	d0cc      	beq.n	80099d0 <_malloc_r+0x20>
 8009a36:	1a1b      	subs	r3, r3, r0
 8009a38:	50a3      	str	r3, [r4, r2]
 8009a3a:	e7c9      	b.n	80099d0 <_malloc_r+0x20>
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	6864      	ldr	r4, [r4, #4]
 8009a40:	e7cc      	b.n	80099dc <_malloc_r+0x2c>
 8009a42:	1cc4      	adds	r4, r0, #3
 8009a44:	f024 0403 	bic.w	r4, r4, #3
 8009a48:	42a0      	cmp	r0, r4
 8009a4a:	d0e3      	beq.n	8009a14 <_malloc_r+0x64>
 8009a4c:	1a21      	subs	r1, r4, r0
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f000 f8a0 	bl	8009b94 <_sbrk_r>
 8009a54:	3001      	adds	r0, #1
 8009a56:	d1dd      	bne.n	8009a14 <_malloc_r+0x64>
 8009a58:	e7cf      	b.n	80099fa <_malloc_r+0x4a>
 8009a5a:	bf00      	nop
 8009a5c:	20004434 	.word	0x20004434
 8009a60:	20004438 	.word	0x20004438

08009a64 <iprintf>:
 8009a64:	b40f      	push	{r0, r1, r2, r3}
 8009a66:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <iprintf+0x2c>)
 8009a68:	b513      	push	{r0, r1, r4, lr}
 8009a6a:	681c      	ldr	r4, [r3, #0]
 8009a6c:	b124      	cbz	r4, 8009a78 <iprintf+0x14>
 8009a6e:	69a3      	ldr	r3, [r4, #24]
 8009a70:	b913      	cbnz	r3, 8009a78 <iprintf+0x14>
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7ff fec0 	bl	80097f8 <__sinit>
 8009a78:	ab05      	add	r3, sp, #20
 8009a7a:	9a04      	ldr	r2, [sp, #16]
 8009a7c:	68a1      	ldr	r1, [r4, #8]
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 fa57 	bl	8009f34 <_vfiprintf_r>
 8009a86:	b002      	add	sp, #8
 8009a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a8c:	b004      	add	sp, #16
 8009a8e:	4770      	bx	lr
 8009a90:	20000184 	.word	0x20000184

08009a94 <putchar>:
 8009a94:	4b09      	ldr	r3, [pc, #36]	; (8009abc <putchar+0x28>)
 8009a96:	b513      	push	{r0, r1, r4, lr}
 8009a98:	681c      	ldr	r4, [r3, #0]
 8009a9a:	4601      	mov	r1, r0
 8009a9c:	b134      	cbz	r4, 8009aac <putchar+0x18>
 8009a9e:	69a3      	ldr	r3, [r4, #24]
 8009aa0:	b923      	cbnz	r3, 8009aac <putchar+0x18>
 8009aa2:	9001      	str	r0, [sp, #4]
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7ff fea7 	bl	80097f8 <__sinit>
 8009aaa:	9901      	ldr	r1, [sp, #4]
 8009aac:	68a2      	ldr	r2, [r4, #8]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	b002      	add	sp, #8
 8009ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab6:	f000 bd01 	b.w	800a4bc <_putc_r>
 8009aba:	bf00      	nop
 8009abc:	20000184 	.word	0x20000184

08009ac0 <cleanup_glue>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	6809      	ldr	r1, [r1, #0]
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b109      	cbz	r1, 8009ace <cleanup_glue+0xe>
 8009aca:	f7ff fff9 	bl	8009ac0 <cleanup_glue>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad6:	f000 b9b3 	b.w	8009e40 <_free_r>
	...

08009adc <_reclaim_reent>:
 8009adc:	4b2c      	ldr	r3, [pc, #176]	; (8009b90 <_reclaim_reent+0xb4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4283      	cmp	r3, r0
 8009ae2:	b570      	push	{r4, r5, r6, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	d051      	beq.n	8009b8c <_reclaim_reent+0xb0>
 8009ae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009aea:	b143      	cbz	r3, 8009afe <_reclaim_reent+0x22>
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d14a      	bne.n	8009b88 <_reclaim_reent+0xac>
 8009af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009af4:	6819      	ldr	r1, [r3, #0]
 8009af6:	b111      	cbz	r1, 8009afe <_reclaim_reent+0x22>
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 f9a1 	bl	8009e40 <_free_r>
 8009afe:	6961      	ldr	r1, [r4, #20]
 8009b00:	b111      	cbz	r1, 8009b08 <_reclaim_reent+0x2c>
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 f99c 	bl	8009e40 <_free_r>
 8009b08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b0a:	b111      	cbz	r1, 8009b12 <_reclaim_reent+0x36>
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 f997 	bl	8009e40 <_free_r>
 8009b12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b14:	b111      	cbz	r1, 8009b1c <_reclaim_reent+0x40>
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 f992 	bl	8009e40 <_free_r>
 8009b1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009b1e:	b111      	cbz	r1, 8009b26 <_reclaim_reent+0x4a>
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 f98d 	bl	8009e40 <_free_r>
 8009b26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009b28:	b111      	cbz	r1, 8009b30 <_reclaim_reent+0x54>
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 f988 	bl	8009e40 <_free_r>
 8009b30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009b32:	b111      	cbz	r1, 8009b3a <_reclaim_reent+0x5e>
 8009b34:	4620      	mov	r0, r4
 8009b36:	f000 f983 	bl	8009e40 <_free_r>
 8009b3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009b3c:	b111      	cbz	r1, 8009b44 <_reclaim_reent+0x68>
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 f97e 	bl	8009e40 <_free_r>
 8009b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b46:	b111      	cbz	r1, 8009b4e <_reclaim_reent+0x72>
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f000 f979 	bl	8009e40 <_free_r>
 8009b4e:	69a3      	ldr	r3, [r4, #24]
 8009b50:	b1e3      	cbz	r3, 8009b8c <_reclaim_reent+0xb0>
 8009b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b54:	4620      	mov	r0, r4
 8009b56:	4798      	blx	r3
 8009b58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b5a:	b1b9      	cbz	r1, 8009b8c <_reclaim_reent+0xb0>
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b62:	f7ff bfad 	b.w	8009ac0 <cleanup_glue>
 8009b66:	5949      	ldr	r1, [r1, r5]
 8009b68:	b941      	cbnz	r1, 8009b7c <_reclaim_reent+0xa0>
 8009b6a:	3504      	adds	r5, #4
 8009b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6e:	2d80      	cmp	r5, #128	; 0x80
 8009b70:	68d9      	ldr	r1, [r3, #12]
 8009b72:	d1f8      	bne.n	8009b66 <_reclaim_reent+0x8a>
 8009b74:	4620      	mov	r0, r4
 8009b76:	f000 f963 	bl	8009e40 <_free_r>
 8009b7a:	e7ba      	b.n	8009af2 <_reclaim_reent+0x16>
 8009b7c:	680e      	ldr	r6, [r1, #0]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f000 f95e 	bl	8009e40 <_free_r>
 8009b84:	4631      	mov	r1, r6
 8009b86:	e7ef      	b.n	8009b68 <_reclaim_reent+0x8c>
 8009b88:	2500      	movs	r5, #0
 8009b8a:	e7ef      	b.n	8009b6c <_reclaim_reent+0x90>
 8009b8c:	bd70      	pop	{r4, r5, r6, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000184 	.word	0x20000184

08009b94 <_sbrk_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d06      	ldr	r5, [pc, #24]	; (8009bb0 <_sbrk_r+0x1c>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	f7f6 ffe6 	bl	8000b70 <_sbrk>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_sbrk_r+0x1a>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_sbrk_r+0x1a>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20005d80 	.word	0x20005d80

08009bb4 <__sread>:
 8009bb4:	b510      	push	{r4, lr}
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bbc:	f000 fcc6 	bl	800a54c <_read_r>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	bfab      	itete	ge
 8009bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009bc8:	181b      	addge	r3, r3, r0
 8009bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bce:	bfac      	ite	ge
 8009bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bd2:	81a3      	strhlt	r3, [r4, #12]
 8009bd4:	bd10      	pop	{r4, pc}

08009bd6 <__swrite>:
 8009bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bda:	461f      	mov	r7, r3
 8009bdc:	898b      	ldrh	r3, [r1, #12]
 8009bde:	05db      	lsls	r3, r3, #23
 8009be0:	4605      	mov	r5, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	4616      	mov	r6, r2
 8009be6:	d505      	bpl.n	8009bf4 <__swrite+0x1e>
 8009be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bec:	2302      	movs	r3, #2
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f000 f908 	bl	8009e04 <_lseek_r>
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bfe:	81a3      	strh	r3, [r4, #12]
 8009c00:	4632      	mov	r2, r6
 8009c02:	463b      	mov	r3, r7
 8009c04:	4628      	mov	r0, r5
 8009c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0a:	f000 b817 	b.w	8009c3c <_write_r>

08009c0e <__sseek>:
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	460c      	mov	r4, r1
 8009c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c16:	f000 f8f5 	bl	8009e04 <_lseek_r>
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	bf15      	itete	ne
 8009c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c2a:	81a3      	strheq	r3, [r4, #12]
 8009c2c:	bf18      	it	ne
 8009c2e:	81a3      	strhne	r3, [r4, #12]
 8009c30:	bd10      	pop	{r4, pc}

08009c32 <__sclose>:
 8009c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c36:	f000 b813 	b.w	8009c60 <_close_r>
	...

08009c3c <_write_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	; (8009c5c <_write_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f7f6 fcae 	bl	80005ac <_write>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_write_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_write_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20005d80 	.word	0x20005d80

08009c60 <_close_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	; (8009c7c <_close_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f6 ff4b 	bl	8000b06 <_close>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_close_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_close_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20005d80 	.word	0x20005d80

08009c80 <__sflush_r>:
 8009c80:	898a      	ldrh	r2, [r1, #12]
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	4605      	mov	r5, r0
 8009c88:	0710      	lsls	r0, r2, #28
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	d458      	bmi.n	8009d40 <__sflush_r+0xc0>
 8009c8e:	684b      	ldr	r3, [r1, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dc05      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dc02      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d0f9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cac:	682f      	ldr	r7, [r5, #0]
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	d032      	beq.n	8009d18 <__sflush_r+0x98>
 8009cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	075a      	lsls	r2, r3, #29
 8009cb8:	d505      	bpl.n	8009cc6 <__sflush_r+0x46>
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc0:	b10b      	cbz	r3, 8009cc6 <__sflush_r+0x46>
 8009cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc4:	1ac0      	subs	r0, r0, r3
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ccc:	6a21      	ldr	r1, [r4, #32]
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b0      	blx	r6
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	d106      	bne.n	8009ce6 <__sflush_r+0x66>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	291d      	cmp	r1, #29
 8009cdc:	d82c      	bhi.n	8009d38 <__sflush_r+0xb8>
 8009cde:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <__sflush_r+0x108>)
 8009ce0:	40ca      	lsrs	r2, r1
 8009ce2:	07d6      	lsls	r6, r2, #31
 8009ce4:	d528      	bpl.n	8009d38 <__sflush_r+0xb8>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	6062      	str	r2, [r4, #4]
 8009cea:	04d9      	lsls	r1, r3, #19
 8009cec:	6922      	ldr	r2, [r4, #16]
 8009cee:	6022      	str	r2, [r4, #0]
 8009cf0:	d504      	bpl.n	8009cfc <__sflush_r+0x7c>
 8009cf2:	1c42      	adds	r2, r0, #1
 8009cf4:	d101      	bne.n	8009cfa <__sflush_r+0x7a>
 8009cf6:	682b      	ldr	r3, [r5, #0]
 8009cf8:	b903      	cbnz	r3, 8009cfc <__sflush_r+0x7c>
 8009cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8009cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfe:	602f      	str	r7, [r5, #0]
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d0ca      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d002      	beq.n	8009d12 <__sflush_r+0x92>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 f897 	bl	8009e40 <_free_r>
 8009d12:	2000      	movs	r0, #0
 8009d14:	6360      	str	r0, [r4, #52]	; 0x34
 8009d16:	e7c1      	b.n	8009c9c <__sflush_r+0x1c>
 8009d18:	6a21      	ldr	r1, [r4, #32]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b0      	blx	r6
 8009d20:	1c41      	adds	r1, r0, #1
 8009d22:	d1c7      	bne.n	8009cb4 <__sflush_r+0x34>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0c4      	beq.n	8009cb4 <__sflush_r+0x34>
 8009d2a:	2b1d      	cmp	r3, #29
 8009d2c:	d001      	beq.n	8009d32 <__sflush_r+0xb2>
 8009d2e:	2b16      	cmp	r3, #22
 8009d30:	d101      	bne.n	8009d36 <__sflush_r+0xb6>
 8009d32:	602f      	str	r7, [r5, #0]
 8009d34:	e7b1      	b.n	8009c9a <__sflush_r+0x1a>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e7ad      	b.n	8009c9c <__sflush_r+0x1c>
 8009d40:	690f      	ldr	r7, [r1, #16]
 8009d42:	2f00      	cmp	r7, #0
 8009d44:	d0a9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d46:	0793      	lsls	r3, r2, #30
 8009d48:	680e      	ldr	r6, [r1, #0]
 8009d4a:	bf08      	it	eq
 8009d4c:	694b      	ldreq	r3, [r1, #20]
 8009d4e:	600f      	str	r7, [r1, #0]
 8009d50:	bf18      	it	ne
 8009d52:	2300      	movne	r3, #0
 8009d54:	eba6 0807 	sub.w	r8, r6, r7
 8009d58:	608b      	str	r3, [r1, #8]
 8009d5a:	f1b8 0f00 	cmp.w	r8, #0
 8009d5e:	dd9c      	ble.n	8009c9a <__sflush_r+0x1a>
 8009d60:	6a21      	ldr	r1, [r4, #32]
 8009d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d64:	4643      	mov	r3, r8
 8009d66:	463a      	mov	r2, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b0      	blx	r6
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	dc06      	bgt.n	8009d7e <__sflush_r+0xfe>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d7c:	e78e      	b.n	8009c9c <__sflush_r+0x1c>
 8009d7e:	4407      	add	r7, r0
 8009d80:	eba8 0800 	sub.w	r8, r8, r0
 8009d84:	e7e9      	b.n	8009d5a <__sflush_r+0xda>
 8009d86:	bf00      	nop
 8009d88:	20400001 	.word	0x20400001

08009d8c <_fflush_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	690b      	ldr	r3, [r1, #16]
 8009d90:	4605      	mov	r5, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	b913      	cbnz	r3, 8009d9c <_fflush_r+0x10>
 8009d96:	2500      	movs	r5, #0
 8009d98:	4628      	mov	r0, r5
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	b118      	cbz	r0, 8009da6 <_fflush_r+0x1a>
 8009d9e:	6983      	ldr	r3, [r0, #24]
 8009da0:	b90b      	cbnz	r3, 8009da6 <_fflush_r+0x1a>
 8009da2:	f7ff fd29 	bl	80097f8 <__sinit>
 8009da6:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <_fflush_r+0x6c>)
 8009da8:	429c      	cmp	r4, r3
 8009daa:	d11b      	bne.n	8009de4 <_fflush_r+0x58>
 8009dac:	686c      	ldr	r4, [r5, #4]
 8009dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0ef      	beq.n	8009d96 <_fflush_r+0xa>
 8009db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009db8:	07d0      	lsls	r0, r2, #31
 8009dba:	d404      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dbc:	0599      	lsls	r1, r3, #22
 8009dbe:	d402      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc2:	f7ff fddc 	bl	800997e <__retarget_lock_acquire_recursive>
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f7ff ff59 	bl	8009c80 <__sflush_r>
 8009dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd0:	07da      	lsls	r2, r3, #31
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	d4e0      	bmi.n	8009d98 <_fflush_r+0xc>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	059b      	lsls	r3, r3, #22
 8009dda:	d4dd      	bmi.n	8009d98 <_fflush_r+0xc>
 8009ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dde:	f7ff fdcf 	bl	8009980 <__retarget_lock_release_recursive>
 8009de2:	e7d9      	b.n	8009d98 <_fflush_r+0xc>
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <_fflush_r+0x70>)
 8009de6:	429c      	cmp	r4, r3
 8009de8:	d101      	bne.n	8009dee <_fflush_r+0x62>
 8009dea:	68ac      	ldr	r4, [r5, #8]
 8009dec:	e7df      	b.n	8009dae <_fflush_r+0x22>
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <_fflush_r+0x74>)
 8009df0:	429c      	cmp	r4, r3
 8009df2:	bf08      	it	eq
 8009df4:	68ec      	ldreq	r4, [r5, #12]
 8009df6:	e7da      	b.n	8009dae <_fflush_r+0x22>
 8009df8:	0800a91c 	.word	0x0800a91c
 8009dfc:	0800a93c 	.word	0x0800a93c
 8009e00:	0800a8fc 	.word	0x0800a8fc

08009e04 <_lseek_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d07      	ldr	r5, [pc, #28]	; (8009e24 <_lseek_r+0x20>)
 8009e08:	4604      	mov	r4, r0
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	602a      	str	r2, [r5, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f7f6 fe9e 	bl	8000b54 <_lseek>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_lseek_r+0x1e>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_lseek_r+0x1e>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	20005d80 	.word	0x20005d80

08009e28 <__malloc_lock>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__malloc_lock+0x8>)
 8009e2a:	f7ff bda8 	b.w	800997e <__retarget_lock_acquire_recursive>
 8009e2e:	bf00      	nop
 8009e30:	20005d78 	.word	0x20005d78

08009e34 <__malloc_unlock>:
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__malloc_unlock+0x8>)
 8009e36:	f7ff bda3 	b.w	8009980 <__retarget_lock_release_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	20005d78 	.word	0x20005d78

08009e40 <_free_r>:
 8009e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e42:	2900      	cmp	r1, #0
 8009e44:	d048      	beq.n	8009ed8 <_free_r+0x98>
 8009e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4a:	9001      	str	r0, [sp, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e52:	bfb8      	it	lt
 8009e54:	18e4      	addlt	r4, r4, r3
 8009e56:	f7ff ffe7 	bl	8009e28 <__malloc_lock>
 8009e5a:	4a20      	ldr	r2, [pc, #128]	; (8009edc <_free_r+0x9c>)
 8009e5c:	9801      	ldr	r0, [sp, #4]
 8009e5e:	6813      	ldr	r3, [r2, #0]
 8009e60:	4615      	mov	r5, r2
 8009e62:	b933      	cbnz	r3, 8009e72 <_free_r+0x32>
 8009e64:	6063      	str	r3, [r4, #4]
 8009e66:	6014      	str	r4, [r2, #0]
 8009e68:	b003      	add	sp, #12
 8009e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e6e:	f7ff bfe1 	b.w	8009e34 <__malloc_unlock>
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	d90b      	bls.n	8009e8e <_free_r+0x4e>
 8009e76:	6821      	ldr	r1, [r4, #0]
 8009e78:	1862      	adds	r2, r4, r1
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	bf04      	itt	eq
 8009e7e:	681a      	ldreq	r2, [r3, #0]
 8009e80:	685b      	ldreq	r3, [r3, #4]
 8009e82:	6063      	str	r3, [r4, #4]
 8009e84:	bf04      	itt	eq
 8009e86:	1852      	addeq	r2, r2, r1
 8009e88:	6022      	streq	r2, [r4, #0]
 8009e8a:	602c      	str	r4, [r5, #0]
 8009e8c:	e7ec      	b.n	8009e68 <_free_r+0x28>
 8009e8e:	461a      	mov	r2, r3
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b10b      	cbz	r3, 8009e98 <_free_r+0x58>
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	d9fa      	bls.n	8009e8e <_free_r+0x4e>
 8009e98:	6811      	ldr	r1, [r2, #0]
 8009e9a:	1855      	adds	r5, r2, r1
 8009e9c:	42a5      	cmp	r5, r4
 8009e9e:	d10b      	bne.n	8009eb8 <_free_r+0x78>
 8009ea0:	6824      	ldr	r4, [r4, #0]
 8009ea2:	4421      	add	r1, r4
 8009ea4:	1854      	adds	r4, r2, r1
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	6011      	str	r1, [r2, #0]
 8009eaa:	d1dd      	bne.n	8009e68 <_free_r+0x28>
 8009eac:	681c      	ldr	r4, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	6053      	str	r3, [r2, #4]
 8009eb2:	4421      	add	r1, r4
 8009eb4:	6011      	str	r1, [r2, #0]
 8009eb6:	e7d7      	b.n	8009e68 <_free_r+0x28>
 8009eb8:	d902      	bls.n	8009ec0 <_free_r+0x80>
 8009eba:	230c      	movs	r3, #12
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	e7d3      	b.n	8009e68 <_free_r+0x28>
 8009ec0:	6825      	ldr	r5, [r4, #0]
 8009ec2:	1961      	adds	r1, r4, r5
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	bf04      	itt	eq
 8009ec8:	6819      	ldreq	r1, [r3, #0]
 8009eca:	685b      	ldreq	r3, [r3, #4]
 8009ecc:	6063      	str	r3, [r4, #4]
 8009ece:	bf04      	itt	eq
 8009ed0:	1949      	addeq	r1, r1, r5
 8009ed2:	6021      	streq	r1, [r4, #0]
 8009ed4:	6054      	str	r4, [r2, #4]
 8009ed6:	e7c7      	b.n	8009e68 <_free_r+0x28>
 8009ed8:	b003      	add	sp, #12
 8009eda:	bd30      	pop	{r4, r5, pc}
 8009edc:	20004434 	.word	0x20004434

08009ee0 <__sfputc_r>:
 8009ee0:	6893      	ldr	r3, [r2, #8]
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	b410      	push	{r4}
 8009ee8:	6093      	str	r3, [r2, #8]
 8009eea:	da08      	bge.n	8009efe <__sfputc_r+0x1e>
 8009eec:	6994      	ldr	r4, [r2, #24]
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	db01      	blt.n	8009ef6 <__sfputc_r+0x16>
 8009ef2:	290a      	cmp	r1, #10
 8009ef4:	d103      	bne.n	8009efe <__sfputc_r+0x1e>
 8009ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009efa:	f000 bb39 	b.w	800a570 <__swbuf_r>
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	1c58      	adds	r0, r3, #1
 8009f02:	6010      	str	r0, [r2, #0]
 8009f04:	7019      	strb	r1, [r3, #0]
 8009f06:	4608      	mov	r0, r1
 8009f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <__sfputs_r>:
 8009f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f10:	4606      	mov	r6, r0
 8009f12:	460f      	mov	r7, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	18d5      	adds	r5, r2, r3
 8009f18:	42ac      	cmp	r4, r5
 8009f1a:	d101      	bne.n	8009f20 <__sfputs_r+0x12>
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e007      	b.n	8009f30 <__sfputs_r+0x22>
 8009f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f24:	463a      	mov	r2, r7
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7ff ffda 	bl	8009ee0 <__sfputc_r>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d1f3      	bne.n	8009f18 <__sfputs_r+0xa>
 8009f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f34 <_vfiprintf_r>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	460d      	mov	r5, r1
 8009f3a:	b09d      	sub	sp, #116	; 0x74
 8009f3c:	4614      	mov	r4, r2
 8009f3e:	4698      	mov	r8, r3
 8009f40:	4606      	mov	r6, r0
 8009f42:	b118      	cbz	r0, 8009f4c <_vfiprintf_r+0x18>
 8009f44:	6983      	ldr	r3, [r0, #24]
 8009f46:	b90b      	cbnz	r3, 8009f4c <_vfiprintf_r+0x18>
 8009f48:	f7ff fc56 	bl	80097f8 <__sinit>
 8009f4c:	4b89      	ldr	r3, [pc, #548]	; (800a174 <_vfiprintf_r+0x240>)
 8009f4e:	429d      	cmp	r5, r3
 8009f50:	d11b      	bne.n	8009f8a <_vfiprintf_r+0x56>
 8009f52:	6875      	ldr	r5, [r6, #4]
 8009f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f56:	07d9      	lsls	r1, r3, #31
 8009f58:	d405      	bmi.n	8009f66 <_vfiprintf_r+0x32>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	059a      	lsls	r2, r3, #22
 8009f5e:	d402      	bmi.n	8009f66 <_vfiprintf_r+0x32>
 8009f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f62:	f7ff fd0c 	bl	800997e <__retarget_lock_acquire_recursive>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	071b      	lsls	r3, r3, #28
 8009f6a:	d501      	bpl.n	8009f70 <_vfiprintf_r+0x3c>
 8009f6c:	692b      	ldr	r3, [r5, #16]
 8009f6e:	b9eb      	cbnz	r3, 8009fac <_vfiprintf_r+0x78>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f000 fb4e 	bl	800a614 <__swsetup_r>
 8009f78:	b1c0      	cbz	r0, 8009fac <_vfiprintf_r+0x78>
 8009f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f7c:	07dc      	lsls	r4, r3, #31
 8009f7e:	d50e      	bpl.n	8009f9e <_vfiprintf_r+0x6a>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f84:	b01d      	add	sp, #116	; 0x74
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	4b7b      	ldr	r3, [pc, #492]	; (800a178 <_vfiprintf_r+0x244>)
 8009f8c:	429d      	cmp	r5, r3
 8009f8e:	d101      	bne.n	8009f94 <_vfiprintf_r+0x60>
 8009f90:	68b5      	ldr	r5, [r6, #8]
 8009f92:	e7df      	b.n	8009f54 <_vfiprintf_r+0x20>
 8009f94:	4b79      	ldr	r3, [pc, #484]	; (800a17c <_vfiprintf_r+0x248>)
 8009f96:	429d      	cmp	r5, r3
 8009f98:	bf08      	it	eq
 8009f9a:	68f5      	ldreq	r5, [r6, #12]
 8009f9c:	e7da      	b.n	8009f54 <_vfiprintf_r+0x20>
 8009f9e:	89ab      	ldrh	r3, [r5, #12]
 8009fa0:	0598      	lsls	r0, r3, #22
 8009fa2:	d4ed      	bmi.n	8009f80 <_vfiprintf_r+0x4c>
 8009fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa6:	f7ff fceb 	bl	8009980 <__retarget_lock_release_recursive>
 8009faa:	e7e9      	b.n	8009f80 <_vfiprintf_r+0x4c>
 8009fac:	2300      	movs	r3, #0
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fba:	2330      	movs	r3, #48	; 0x30
 8009fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a180 <_vfiprintf_r+0x24c>
 8009fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc4:	f04f 0901 	mov.w	r9, #1
 8009fc8:	4623      	mov	r3, r4
 8009fca:	469a      	mov	sl, r3
 8009fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd0:	b10a      	cbz	r2, 8009fd6 <_vfiprintf_r+0xa2>
 8009fd2:	2a25      	cmp	r2, #37	; 0x25
 8009fd4:	d1f9      	bne.n	8009fca <_vfiprintf_r+0x96>
 8009fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009fda:	d00b      	beq.n	8009ff4 <_vfiprintf_r+0xc0>
 8009fdc:	465b      	mov	r3, fp
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ff93 	bl	8009f0e <__sfputs_r>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f000 80aa 	beq.w	800a142 <_vfiprintf_r+0x20e>
 8009fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ff0:	445a      	add	r2, fp
 8009ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 80a2 	beq.w	800a142 <_vfiprintf_r+0x20e>
 8009ffe:	2300      	movs	r3, #0
 800a000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a008:	f10a 0a01 	add.w	sl, sl, #1
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a014:	931a      	str	r3, [sp, #104]	; 0x68
 800a016:	4654      	mov	r4, sl
 800a018:	2205      	movs	r2, #5
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4858      	ldr	r0, [pc, #352]	; (800a180 <_vfiprintf_r+0x24c>)
 800a020:	f7f6 f8de 	bl	80001e0 <memchr>
 800a024:	9a04      	ldr	r2, [sp, #16]
 800a026:	b9d8      	cbnz	r0, 800a060 <_vfiprintf_r+0x12c>
 800a028:	06d1      	lsls	r1, r2, #27
 800a02a:	bf44      	itt	mi
 800a02c:	2320      	movmi	r3, #32
 800a02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a032:	0713      	lsls	r3, r2, #28
 800a034:	bf44      	itt	mi
 800a036:	232b      	movmi	r3, #43	; 0x2b
 800a038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03c:	f89a 3000 	ldrb.w	r3, [sl]
 800a040:	2b2a      	cmp	r3, #42	; 0x2a
 800a042:	d015      	beq.n	800a070 <_vfiprintf_r+0x13c>
 800a044:	9a07      	ldr	r2, [sp, #28]
 800a046:	4654      	mov	r4, sl
 800a048:	2000      	movs	r0, #0
 800a04a:	f04f 0c0a 	mov.w	ip, #10
 800a04e:	4621      	mov	r1, r4
 800a050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a054:	3b30      	subs	r3, #48	; 0x30
 800a056:	2b09      	cmp	r3, #9
 800a058:	d94e      	bls.n	800a0f8 <_vfiprintf_r+0x1c4>
 800a05a:	b1b0      	cbz	r0, 800a08a <_vfiprintf_r+0x156>
 800a05c:	9207      	str	r2, [sp, #28]
 800a05e:	e014      	b.n	800a08a <_vfiprintf_r+0x156>
 800a060:	eba0 0308 	sub.w	r3, r0, r8
 800a064:	fa09 f303 	lsl.w	r3, r9, r3
 800a068:	4313      	orrs	r3, r2
 800a06a:	9304      	str	r3, [sp, #16]
 800a06c:	46a2      	mov	sl, r4
 800a06e:	e7d2      	b.n	800a016 <_vfiprintf_r+0xe2>
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	1d19      	adds	r1, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	9103      	str	r1, [sp, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bfbb      	ittet	lt
 800a07c:	425b      	neglt	r3, r3
 800a07e:	f042 0202 	orrlt.w	r2, r2, #2
 800a082:	9307      	strge	r3, [sp, #28]
 800a084:	9307      	strlt	r3, [sp, #28]
 800a086:	bfb8      	it	lt
 800a088:	9204      	strlt	r2, [sp, #16]
 800a08a:	7823      	ldrb	r3, [r4, #0]
 800a08c:	2b2e      	cmp	r3, #46	; 0x2e
 800a08e:	d10c      	bne.n	800a0aa <_vfiprintf_r+0x176>
 800a090:	7863      	ldrb	r3, [r4, #1]
 800a092:	2b2a      	cmp	r3, #42	; 0x2a
 800a094:	d135      	bne.n	800a102 <_vfiprintf_r+0x1ce>
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	9203      	str	r2, [sp, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bfb8      	it	lt
 800a0a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a0a6:	3402      	adds	r4, #2
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a190 <_vfiprintf_r+0x25c>
 800a0ae:	7821      	ldrb	r1, [r4, #0]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	f7f6 f894 	bl	80001e0 <memchr>
 800a0b8:	b140      	cbz	r0, 800a0cc <_vfiprintf_r+0x198>
 800a0ba:	2340      	movs	r3, #64	; 0x40
 800a0bc:	eba0 000a 	sub.w	r0, r0, sl
 800a0c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c4:	9b04      	ldr	r3, [sp, #16]
 800a0c6:	4303      	orrs	r3, r0
 800a0c8:	3401      	adds	r4, #1
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d0:	482c      	ldr	r0, [pc, #176]	; (800a184 <_vfiprintf_r+0x250>)
 800a0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d6:	2206      	movs	r2, #6
 800a0d8:	f7f6 f882 	bl	80001e0 <memchr>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d03f      	beq.n	800a160 <_vfiprintf_r+0x22c>
 800a0e0:	4b29      	ldr	r3, [pc, #164]	; (800a188 <_vfiprintf_r+0x254>)
 800a0e2:	bb1b      	cbnz	r3, 800a12c <_vfiprintf_r+0x1f8>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	3307      	adds	r3, #7
 800a0e8:	f023 0307 	bic.w	r3, r3, #7
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	9303      	str	r3, [sp, #12]
 800a0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f2:	443b      	add	r3, r7
 800a0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f6:	e767      	b.n	8009fc8 <_vfiprintf_r+0x94>
 800a0f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	2001      	movs	r0, #1
 800a100:	e7a5      	b.n	800a04e <_vfiprintf_r+0x11a>
 800a102:	2300      	movs	r3, #0
 800a104:	3401      	adds	r4, #1
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	4619      	mov	r1, r3
 800a10a:	f04f 0c0a 	mov.w	ip, #10
 800a10e:	4620      	mov	r0, r4
 800a110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a114:	3a30      	subs	r2, #48	; 0x30
 800a116:	2a09      	cmp	r2, #9
 800a118:	d903      	bls.n	800a122 <_vfiprintf_r+0x1ee>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0c5      	beq.n	800a0aa <_vfiprintf_r+0x176>
 800a11e:	9105      	str	r1, [sp, #20]
 800a120:	e7c3      	b.n	800a0aa <_vfiprintf_r+0x176>
 800a122:	fb0c 2101 	mla	r1, ip, r1, r2
 800a126:	4604      	mov	r4, r0
 800a128:	2301      	movs	r3, #1
 800a12a:	e7f0      	b.n	800a10e <_vfiprintf_r+0x1da>
 800a12c:	ab03      	add	r3, sp, #12
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	462a      	mov	r2, r5
 800a132:	4b16      	ldr	r3, [pc, #88]	; (800a18c <_vfiprintf_r+0x258>)
 800a134:	a904      	add	r1, sp, #16
 800a136:	4630      	mov	r0, r6
 800a138:	f3af 8000 	nop.w
 800a13c:	4607      	mov	r7, r0
 800a13e:	1c78      	adds	r0, r7, #1
 800a140:	d1d6      	bne.n	800a0f0 <_vfiprintf_r+0x1bc>
 800a142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a144:	07d9      	lsls	r1, r3, #31
 800a146:	d405      	bmi.n	800a154 <_vfiprintf_r+0x220>
 800a148:	89ab      	ldrh	r3, [r5, #12]
 800a14a:	059a      	lsls	r2, r3, #22
 800a14c:	d402      	bmi.n	800a154 <_vfiprintf_r+0x220>
 800a14e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a150:	f7ff fc16 	bl	8009980 <__retarget_lock_release_recursive>
 800a154:	89ab      	ldrh	r3, [r5, #12]
 800a156:	065b      	lsls	r3, r3, #25
 800a158:	f53f af12 	bmi.w	8009f80 <_vfiprintf_r+0x4c>
 800a15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a15e:	e711      	b.n	8009f84 <_vfiprintf_r+0x50>
 800a160:	ab03      	add	r3, sp, #12
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	462a      	mov	r2, r5
 800a166:	4b09      	ldr	r3, [pc, #36]	; (800a18c <_vfiprintf_r+0x258>)
 800a168:	a904      	add	r1, sp, #16
 800a16a:	4630      	mov	r0, r6
 800a16c:	f000 f880 	bl	800a270 <_printf_i>
 800a170:	e7e4      	b.n	800a13c <_vfiprintf_r+0x208>
 800a172:	bf00      	nop
 800a174:	0800a91c 	.word	0x0800a91c
 800a178:	0800a93c 	.word	0x0800a93c
 800a17c:	0800a8fc 	.word	0x0800a8fc
 800a180:	0800a960 	.word	0x0800a960
 800a184:	0800a96a 	.word	0x0800a96a
 800a188:	00000000 	.word	0x00000000
 800a18c:	08009f0f 	.word	0x08009f0f
 800a190:	0800a966 	.word	0x0800a966

0800a194 <_printf_common>:
 800a194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a198:	4616      	mov	r6, r2
 800a19a:	4699      	mov	r9, r3
 800a19c:	688a      	ldr	r2, [r1, #8]
 800a19e:	690b      	ldr	r3, [r1, #16]
 800a1a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	bfb8      	it	lt
 800a1a8:	4613      	movlt	r3, r2
 800a1aa:	6033      	str	r3, [r6, #0]
 800a1ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	b10a      	cbz	r2, 800a1ba <_printf_common+0x26>
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	6033      	str	r3, [r6, #0]
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	0699      	lsls	r1, r3, #26
 800a1be:	bf42      	ittt	mi
 800a1c0:	6833      	ldrmi	r3, [r6, #0]
 800a1c2:	3302      	addmi	r3, #2
 800a1c4:	6033      	strmi	r3, [r6, #0]
 800a1c6:	6825      	ldr	r5, [r4, #0]
 800a1c8:	f015 0506 	ands.w	r5, r5, #6
 800a1cc:	d106      	bne.n	800a1dc <_printf_common+0x48>
 800a1ce:	f104 0a19 	add.w	sl, r4, #25
 800a1d2:	68e3      	ldr	r3, [r4, #12]
 800a1d4:	6832      	ldr	r2, [r6, #0]
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	42ab      	cmp	r3, r5
 800a1da:	dc26      	bgt.n	800a22a <_printf_common+0x96>
 800a1dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1e0:	1e13      	subs	r3, r2, #0
 800a1e2:	6822      	ldr	r2, [r4, #0]
 800a1e4:	bf18      	it	ne
 800a1e6:	2301      	movne	r3, #1
 800a1e8:	0692      	lsls	r2, r2, #26
 800a1ea:	d42b      	bmi.n	800a244 <_printf_common+0xb0>
 800a1ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	47c0      	blx	r8
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d01e      	beq.n	800a238 <_printf_common+0xa4>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	68e5      	ldr	r5, [r4, #12]
 800a1fe:	6832      	ldr	r2, [r6, #0]
 800a200:	f003 0306 	and.w	r3, r3, #6
 800a204:	2b04      	cmp	r3, #4
 800a206:	bf08      	it	eq
 800a208:	1aad      	subeq	r5, r5, r2
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	6922      	ldr	r2, [r4, #16]
 800a20e:	bf0c      	ite	eq
 800a210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a214:	2500      	movne	r5, #0
 800a216:	4293      	cmp	r3, r2
 800a218:	bfc4      	itt	gt
 800a21a:	1a9b      	subgt	r3, r3, r2
 800a21c:	18ed      	addgt	r5, r5, r3
 800a21e:	2600      	movs	r6, #0
 800a220:	341a      	adds	r4, #26
 800a222:	42b5      	cmp	r5, r6
 800a224:	d11a      	bne.n	800a25c <_printf_common+0xc8>
 800a226:	2000      	movs	r0, #0
 800a228:	e008      	b.n	800a23c <_printf_common+0xa8>
 800a22a:	2301      	movs	r3, #1
 800a22c:	4652      	mov	r2, sl
 800a22e:	4649      	mov	r1, r9
 800a230:	4638      	mov	r0, r7
 800a232:	47c0      	blx	r8
 800a234:	3001      	adds	r0, #1
 800a236:	d103      	bne.n	800a240 <_printf_common+0xac>
 800a238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a240:	3501      	adds	r5, #1
 800a242:	e7c6      	b.n	800a1d2 <_printf_common+0x3e>
 800a244:	18e1      	adds	r1, r4, r3
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	2030      	movs	r0, #48	; 0x30
 800a24a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a24e:	4422      	add	r2, r4
 800a250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a258:	3302      	adds	r3, #2
 800a25a:	e7c7      	b.n	800a1ec <_printf_common+0x58>
 800a25c:	2301      	movs	r3, #1
 800a25e:	4622      	mov	r2, r4
 800a260:	4649      	mov	r1, r9
 800a262:	4638      	mov	r0, r7
 800a264:	47c0      	blx	r8
 800a266:	3001      	adds	r0, #1
 800a268:	d0e6      	beq.n	800a238 <_printf_common+0xa4>
 800a26a:	3601      	adds	r6, #1
 800a26c:	e7d9      	b.n	800a222 <_printf_common+0x8e>
	...

0800a270 <_printf_i>:
 800a270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	460c      	mov	r4, r1
 800a276:	4691      	mov	r9, r2
 800a278:	7e27      	ldrb	r7, [r4, #24]
 800a27a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a27c:	2f78      	cmp	r7, #120	; 0x78
 800a27e:	4680      	mov	r8, r0
 800a280:	469a      	mov	sl, r3
 800a282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a286:	d807      	bhi.n	800a298 <_printf_i+0x28>
 800a288:	2f62      	cmp	r7, #98	; 0x62
 800a28a:	d80a      	bhi.n	800a2a2 <_printf_i+0x32>
 800a28c:	2f00      	cmp	r7, #0
 800a28e:	f000 80d8 	beq.w	800a442 <_printf_i+0x1d2>
 800a292:	2f58      	cmp	r7, #88	; 0x58
 800a294:	f000 80a3 	beq.w	800a3de <_printf_i+0x16e>
 800a298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a29c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2a0:	e03a      	b.n	800a318 <_printf_i+0xa8>
 800a2a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2a6:	2b15      	cmp	r3, #21
 800a2a8:	d8f6      	bhi.n	800a298 <_printf_i+0x28>
 800a2aa:	a001      	add	r0, pc, #4	; (adr r0, 800a2b0 <_printf_i+0x40>)
 800a2ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a2b0:	0800a309 	.word	0x0800a309
 800a2b4:	0800a31d 	.word	0x0800a31d
 800a2b8:	0800a299 	.word	0x0800a299
 800a2bc:	0800a299 	.word	0x0800a299
 800a2c0:	0800a299 	.word	0x0800a299
 800a2c4:	0800a299 	.word	0x0800a299
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a299 	.word	0x0800a299
 800a2d0:	0800a299 	.word	0x0800a299
 800a2d4:	0800a299 	.word	0x0800a299
 800a2d8:	0800a299 	.word	0x0800a299
 800a2dc:	0800a429 	.word	0x0800a429
 800a2e0:	0800a34d 	.word	0x0800a34d
 800a2e4:	0800a40b 	.word	0x0800a40b
 800a2e8:	0800a299 	.word	0x0800a299
 800a2ec:	0800a299 	.word	0x0800a299
 800a2f0:	0800a44b 	.word	0x0800a44b
 800a2f4:	0800a299 	.word	0x0800a299
 800a2f8:	0800a34d 	.word	0x0800a34d
 800a2fc:	0800a299 	.word	0x0800a299
 800a300:	0800a299 	.word	0x0800a299
 800a304:	0800a413 	.word	0x0800a413
 800a308:	680b      	ldr	r3, [r1, #0]
 800a30a:	1d1a      	adds	r2, r3, #4
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	600a      	str	r2, [r1, #0]
 800a310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a318:	2301      	movs	r3, #1
 800a31a:	e0a3      	b.n	800a464 <_printf_i+0x1f4>
 800a31c:	6825      	ldr	r5, [r4, #0]
 800a31e:	6808      	ldr	r0, [r1, #0]
 800a320:	062e      	lsls	r6, r5, #24
 800a322:	f100 0304 	add.w	r3, r0, #4
 800a326:	d50a      	bpl.n	800a33e <_printf_i+0xce>
 800a328:	6805      	ldr	r5, [r0, #0]
 800a32a:	600b      	str	r3, [r1, #0]
 800a32c:	2d00      	cmp	r5, #0
 800a32e:	da03      	bge.n	800a338 <_printf_i+0xc8>
 800a330:	232d      	movs	r3, #45	; 0x2d
 800a332:	426d      	negs	r5, r5
 800a334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a338:	485e      	ldr	r0, [pc, #376]	; (800a4b4 <_printf_i+0x244>)
 800a33a:	230a      	movs	r3, #10
 800a33c:	e019      	b.n	800a372 <_printf_i+0x102>
 800a33e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a342:	6805      	ldr	r5, [r0, #0]
 800a344:	600b      	str	r3, [r1, #0]
 800a346:	bf18      	it	ne
 800a348:	b22d      	sxthne	r5, r5
 800a34a:	e7ef      	b.n	800a32c <_printf_i+0xbc>
 800a34c:	680b      	ldr	r3, [r1, #0]
 800a34e:	6825      	ldr	r5, [r4, #0]
 800a350:	1d18      	adds	r0, r3, #4
 800a352:	6008      	str	r0, [r1, #0]
 800a354:	0628      	lsls	r0, r5, #24
 800a356:	d501      	bpl.n	800a35c <_printf_i+0xec>
 800a358:	681d      	ldr	r5, [r3, #0]
 800a35a:	e002      	b.n	800a362 <_printf_i+0xf2>
 800a35c:	0669      	lsls	r1, r5, #25
 800a35e:	d5fb      	bpl.n	800a358 <_printf_i+0xe8>
 800a360:	881d      	ldrh	r5, [r3, #0]
 800a362:	4854      	ldr	r0, [pc, #336]	; (800a4b4 <_printf_i+0x244>)
 800a364:	2f6f      	cmp	r7, #111	; 0x6f
 800a366:	bf0c      	ite	eq
 800a368:	2308      	moveq	r3, #8
 800a36a:	230a      	movne	r3, #10
 800a36c:	2100      	movs	r1, #0
 800a36e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a372:	6866      	ldr	r6, [r4, #4]
 800a374:	60a6      	str	r6, [r4, #8]
 800a376:	2e00      	cmp	r6, #0
 800a378:	bfa2      	ittt	ge
 800a37a:	6821      	ldrge	r1, [r4, #0]
 800a37c:	f021 0104 	bicge.w	r1, r1, #4
 800a380:	6021      	strge	r1, [r4, #0]
 800a382:	b90d      	cbnz	r5, 800a388 <_printf_i+0x118>
 800a384:	2e00      	cmp	r6, #0
 800a386:	d04d      	beq.n	800a424 <_printf_i+0x1b4>
 800a388:	4616      	mov	r6, r2
 800a38a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a38e:	fb03 5711 	mls	r7, r3, r1, r5
 800a392:	5dc7      	ldrb	r7, [r0, r7]
 800a394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a398:	462f      	mov	r7, r5
 800a39a:	42bb      	cmp	r3, r7
 800a39c:	460d      	mov	r5, r1
 800a39e:	d9f4      	bls.n	800a38a <_printf_i+0x11a>
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d10b      	bne.n	800a3bc <_printf_i+0x14c>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	07df      	lsls	r7, r3, #31
 800a3a8:	d508      	bpl.n	800a3bc <_printf_i+0x14c>
 800a3aa:	6923      	ldr	r3, [r4, #16]
 800a3ac:	6861      	ldr	r1, [r4, #4]
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	bfde      	ittt	le
 800a3b2:	2330      	movle	r3, #48	; 0x30
 800a3b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3b8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a3bc:	1b92      	subs	r2, r2, r6
 800a3be:	6122      	str	r2, [r4, #16]
 800a3c0:	f8cd a000 	str.w	sl, [sp]
 800a3c4:	464b      	mov	r3, r9
 800a3c6:	aa03      	add	r2, sp, #12
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	f7ff fee2 	bl	800a194 <_printf_common>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d14c      	bne.n	800a46e <_printf_i+0x1fe>
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3d8:	b004      	add	sp, #16
 800a3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3de:	4835      	ldr	r0, [pc, #212]	; (800a4b4 <_printf_i+0x244>)
 800a3e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	680e      	ldr	r6, [r1, #0]
 800a3e8:	061f      	lsls	r7, r3, #24
 800a3ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3ee:	600e      	str	r6, [r1, #0]
 800a3f0:	d514      	bpl.n	800a41c <_printf_i+0x1ac>
 800a3f2:	07d9      	lsls	r1, r3, #31
 800a3f4:	bf44      	itt	mi
 800a3f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a3fa:	6023      	strmi	r3, [r4, #0]
 800a3fc:	b91d      	cbnz	r5, 800a406 <_printf_i+0x196>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	f023 0320 	bic.w	r3, r3, #32
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	2310      	movs	r3, #16
 800a408:	e7b0      	b.n	800a36c <_printf_i+0xfc>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	f043 0320 	orr.w	r3, r3, #32
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	2378      	movs	r3, #120	; 0x78
 800a414:	4828      	ldr	r0, [pc, #160]	; (800a4b8 <_printf_i+0x248>)
 800a416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a41a:	e7e3      	b.n	800a3e4 <_printf_i+0x174>
 800a41c:	065e      	lsls	r6, r3, #25
 800a41e:	bf48      	it	mi
 800a420:	b2ad      	uxthmi	r5, r5
 800a422:	e7e6      	b.n	800a3f2 <_printf_i+0x182>
 800a424:	4616      	mov	r6, r2
 800a426:	e7bb      	b.n	800a3a0 <_printf_i+0x130>
 800a428:	680b      	ldr	r3, [r1, #0]
 800a42a:	6826      	ldr	r6, [r4, #0]
 800a42c:	6960      	ldr	r0, [r4, #20]
 800a42e:	1d1d      	adds	r5, r3, #4
 800a430:	600d      	str	r5, [r1, #0]
 800a432:	0635      	lsls	r5, r6, #24
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	d501      	bpl.n	800a43c <_printf_i+0x1cc>
 800a438:	6018      	str	r0, [r3, #0]
 800a43a:	e002      	b.n	800a442 <_printf_i+0x1d2>
 800a43c:	0671      	lsls	r1, r6, #25
 800a43e:	d5fb      	bpl.n	800a438 <_printf_i+0x1c8>
 800a440:	8018      	strh	r0, [r3, #0]
 800a442:	2300      	movs	r3, #0
 800a444:	6123      	str	r3, [r4, #16]
 800a446:	4616      	mov	r6, r2
 800a448:	e7ba      	b.n	800a3c0 <_printf_i+0x150>
 800a44a:	680b      	ldr	r3, [r1, #0]
 800a44c:	1d1a      	adds	r2, r3, #4
 800a44e:	600a      	str	r2, [r1, #0]
 800a450:	681e      	ldr	r6, [r3, #0]
 800a452:	6862      	ldr	r2, [r4, #4]
 800a454:	2100      	movs	r1, #0
 800a456:	4630      	mov	r0, r6
 800a458:	f7f5 fec2 	bl	80001e0 <memchr>
 800a45c:	b108      	cbz	r0, 800a462 <_printf_i+0x1f2>
 800a45e:	1b80      	subs	r0, r0, r6
 800a460:	6060      	str	r0, [r4, #4]
 800a462:	6863      	ldr	r3, [r4, #4]
 800a464:	6123      	str	r3, [r4, #16]
 800a466:	2300      	movs	r3, #0
 800a468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a46c:	e7a8      	b.n	800a3c0 <_printf_i+0x150>
 800a46e:	6923      	ldr	r3, [r4, #16]
 800a470:	4632      	mov	r2, r6
 800a472:	4649      	mov	r1, r9
 800a474:	4640      	mov	r0, r8
 800a476:	47d0      	blx	sl
 800a478:	3001      	adds	r0, #1
 800a47a:	d0ab      	beq.n	800a3d4 <_printf_i+0x164>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	079b      	lsls	r3, r3, #30
 800a480:	d413      	bmi.n	800a4aa <_printf_i+0x23a>
 800a482:	68e0      	ldr	r0, [r4, #12]
 800a484:	9b03      	ldr	r3, [sp, #12]
 800a486:	4298      	cmp	r0, r3
 800a488:	bfb8      	it	lt
 800a48a:	4618      	movlt	r0, r3
 800a48c:	e7a4      	b.n	800a3d8 <_printf_i+0x168>
 800a48e:	2301      	movs	r3, #1
 800a490:	4632      	mov	r2, r6
 800a492:	4649      	mov	r1, r9
 800a494:	4640      	mov	r0, r8
 800a496:	47d0      	blx	sl
 800a498:	3001      	adds	r0, #1
 800a49a:	d09b      	beq.n	800a3d4 <_printf_i+0x164>
 800a49c:	3501      	adds	r5, #1
 800a49e:	68e3      	ldr	r3, [r4, #12]
 800a4a0:	9903      	ldr	r1, [sp, #12]
 800a4a2:	1a5b      	subs	r3, r3, r1
 800a4a4:	42ab      	cmp	r3, r5
 800a4a6:	dcf2      	bgt.n	800a48e <_printf_i+0x21e>
 800a4a8:	e7eb      	b.n	800a482 <_printf_i+0x212>
 800a4aa:	2500      	movs	r5, #0
 800a4ac:	f104 0619 	add.w	r6, r4, #25
 800a4b0:	e7f5      	b.n	800a49e <_printf_i+0x22e>
 800a4b2:	bf00      	nop
 800a4b4:	0800a971 	.word	0x0800a971
 800a4b8:	0800a982 	.word	0x0800a982

0800a4bc <_putc_r>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	460d      	mov	r5, r1
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	b118      	cbz	r0, 800a4ce <_putc_r+0x12>
 800a4c6:	6983      	ldr	r3, [r0, #24]
 800a4c8:	b90b      	cbnz	r3, 800a4ce <_putc_r+0x12>
 800a4ca:	f7ff f995 	bl	80097f8 <__sinit>
 800a4ce:	4b1c      	ldr	r3, [pc, #112]	; (800a540 <_putc_r+0x84>)
 800a4d0:	429c      	cmp	r4, r3
 800a4d2:	d124      	bne.n	800a51e <_putc_r+0x62>
 800a4d4:	6874      	ldr	r4, [r6, #4]
 800a4d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4d8:	07d8      	lsls	r0, r3, #31
 800a4da:	d405      	bmi.n	800a4e8 <_putc_r+0x2c>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	0599      	lsls	r1, r3, #22
 800a4e0:	d402      	bmi.n	800a4e8 <_putc_r+0x2c>
 800a4e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e4:	f7ff fa4b 	bl	800997e <__retarget_lock_acquire_recursive>
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	da05      	bge.n	800a4fe <_putc_r+0x42>
 800a4f2:	69a2      	ldr	r2, [r4, #24]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	db1c      	blt.n	800a532 <_putc_r+0x76>
 800a4f8:	b2eb      	uxtb	r3, r5
 800a4fa:	2b0a      	cmp	r3, #10
 800a4fc:	d019      	beq.n	800a532 <_putc_r+0x76>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	6022      	str	r2, [r4, #0]
 800a504:	701d      	strb	r5, [r3, #0]
 800a506:	b2ed      	uxtb	r5, r5
 800a508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a50a:	07da      	lsls	r2, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_putc_r+0x5e>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	059b      	lsls	r3, r3, #22
 800a512:	d402      	bmi.n	800a51a <_putc_r+0x5e>
 800a514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a516:	f7ff fa33 	bl	8009980 <__retarget_lock_release_recursive>
 800a51a:	4628      	mov	r0, r5
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	4b09      	ldr	r3, [pc, #36]	; (800a544 <_putc_r+0x88>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d101      	bne.n	800a528 <_putc_r+0x6c>
 800a524:	68b4      	ldr	r4, [r6, #8]
 800a526:	e7d6      	b.n	800a4d6 <_putc_r+0x1a>
 800a528:	4b07      	ldr	r3, [pc, #28]	; (800a548 <_putc_r+0x8c>)
 800a52a:	429c      	cmp	r4, r3
 800a52c:	bf08      	it	eq
 800a52e:	68f4      	ldreq	r4, [r6, #12]
 800a530:	e7d1      	b.n	800a4d6 <_putc_r+0x1a>
 800a532:	4629      	mov	r1, r5
 800a534:	4622      	mov	r2, r4
 800a536:	4630      	mov	r0, r6
 800a538:	f000 f81a 	bl	800a570 <__swbuf_r>
 800a53c:	4605      	mov	r5, r0
 800a53e:	e7e3      	b.n	800a508 <_putc_r+0x4c>
 800a540:	0800a91c 	.word	0x0800a91c
 800a544:	0800a93c 	.word	0x0800a93c
 800a548:	0800a8fc 	.word	0x0800a8fc

0800a54c <_read_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4d07      	ldr	r5, [pc, #28]	; (800a56c <_read_r+0x20>)
 800a550:	4604      	mov	r4, r0
 800a552:	4608      	mov	r0, r1
 800a554:	4611      	mov	r1, r2
 800a556:	2200      	movs	r2, #0
 800a558:	602a      	str	r2, [r5, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	f7f6 fab6 	bl	8000acc <_read>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_read_r+0x1e>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_read_r+0x1e>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20005d80 	.word	0x20005d80

0800a570 <__swbuf_r>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	460e      	mov	r6, r1
 800a574:	4614      	mov	r4, r2
 800a576:	4605      	mov	r5, r0
 800a578:	b118      	cbz	r0, 800a582 <__swbuf_r+0x12>
 800a57a:	6983      	ldr	r3, [r0, #24]
 800a57c:	b90b      	cbnz	r3, 800a582 <__swbuf_r+0x12>
 800a57e:	f7ff f93b 	bl	80097f8 <__sinit>
 800a582:	4b21      	ldr	r3, [pc, #132]	; (800a608 <__swbuf_r+0x98>)
 800a584:	429c      	cmp	r4, r3
 800a586:	d12b      	bne.n	800a5e0 <__swbuf_r+0x70>
 800a588:	686c      	ldr	r4, [r5, #4]
 800a58a:	69a3      	ldr	r3, [r4, #24]
 800a58c:	60a3      	str	r3, [r4, #8]
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	071a      	lsls	r2, r3, #28
 800a592:	d52f      	bpl.n	800a5f4 <__swbuf_r+0x84>
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	b36b      	cbz	r3, 800a5f4 <__swbuf_r+0x84>
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	1ac0      	subs	r0, r0, r3
 800a59e:	6963      	ldr	r3, [r4, #20]
 800a5a0:	b2f6      	uxtb	r6, r6
 800a5a2:	4283      	cmp	r3, r0
 800a5a4:	4637      	mov	r7, r6
 800a5a6:	dc04      	bgt.n	800a5b2 <__swbuf_r+0x42>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f7ff fbee 	bl	8009d8c <_fflush_r>
 800a5b0:	bb30      	cbnz	r0, 800a600 <__swbuf_r+0x90>
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	60a3      	str	r3, [r4, #8]
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	6022      	str	r2, [r4, #0]
 800a5be:	701e      	strb	r6, [r3, #0]
 800a5c0:	6963      	ldr	r3, [r4, #20]
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	4283      	cmp	r3, r0
 800a5c6:	d004      	beq.n	800a5d2 <__swbuf_r+0x62>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	07db      	lsls	r3, r3, #31
 800a5cc:	d506      	bpl.n	800a5dc <__swbuf_r+0x6c>
 800a5ce:	2e0a      	cmp	r6, #10
 800a5d0:	d104      	bne.n	800a5dc <__swbuf_r+0x6c>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f7ff fbd9 	bl	8009d8c <_fflush_r>
 800a5da:	b988      	cbnz	r0, 800a600 <__swbuf_r+0x90>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <__swbuf_r+0x9c>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d101      	bne.n	800a5ea <__swbuf_r+0x7a>
 800a5e6:	68ac      	ldr	r4, [r5, #8]
 800a5e8:	e7cf      	b.n	800a58a <__swbuf_r+0x1a>
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <__swbuf_r+0xa0>)
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	bf08      	it	eq
 800a5f0:	68ec      	ldreq	r4, [r5, #12]
 800a5f2:	e7ca      	b.n	800a58a <__swbuf_r+0x1a>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 f80c 	bl	800a614 <__swsetup_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0cb      	beq.n	800a598 <__swbuf_r+0x28>
 800a600:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a604:	e7ea      	b.n	800a5dc <__swbuf_r+0x6c>
 800a606:	bf00      	nop
 800a608:	0800a91c 	.word	0x0800a91c
 800a60c:	0800a93c 	.word	0x0800a93c
 800a610:	0800a8fc 	.word	0x0800a8fc

0800a614 <__swsetup_r>:
 800a614:	4b32      	ldr	r3, [pc, #200]	; (800a6e0 <__swsetup_r+0xcc>)
 800a616:	b570      	push	{r4, r5, r6, lr}
 800a618:	681d      	ldr	r5, [r3, #0]
 800a61a:	4606      	mov	r6, r0
 800a61c:	460c      	mov	r4, r1
 800a61e:	b125      	cbz	r5, 800a62a <__swsetup_r+0x16>
 800a620:	69ab      	ldr	r3, [r5, #24]
 800a622:	b913      	cbnz	r3, 800a62a <__swsetup_r+0x16>
 800a624:	4628      	mov	r0, r5
 800a626:	f7ff f8e7 	bl	80097f8 <__sinit>
 800a62a:	4b2e      	ldr	r3, [pc, #184]	; (800a6e4 <__swsetup_r+0xd0>)
 800a62c:	429c      	cmp	r4, r3
 800a62e:	d10f      	bne.n	800a650 <__swsetup_r+0x3c>
 800a630:	686c      	ldr	r4, [r5, #4]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a638:	0719      	lsls	r1, r3, #28
 800a63a:	d42c      	bmi.n	800a696 <__swsetup_r+0x82>
 800a63c:	06dd      	lsls	r5, r3, #27
 800a63e:	d411      	bmi.n	800a664 <__swsetup_r+0x50>
 800a640:	2309      	movs	r3, #9
 800a642:	6033      	str	r3, [r6, #0]
 800a644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a64e:	e03e      	b.n	800a6ce <__swsetup_r+0xba>
 800a650:	4b25      	ldr	r3, [pc, #148]	; (800a6e8 <__swsetup_r+0xd4>)
 800a652:	429c      	cmp	r4, r3
 800a654:	d101      	bne.n	800a65a <__swsetup_r+0x46>
 800a656:	68ac      	ldr	r4, [r5, #8]
 800a658:	e7eb      	b.n	800a632 <__swsetup_r+0x1e>
 800a65a:	4b24      	ldr	r3, [pc, #144]	; (800a6ec <__swsetup_r+0xd8>)
 800a65c:	429c      	cmp	r4, r3
 800a65e:	bf08      	it	eq
 800a660:	68ec      	ldreq	r4, [r5, #12]
 800a662:	e7e6      	b.n	800a632 <__swsetup_r+0x1e>
 800a664:	0758      	lsls	r0, r3, #29
 800a666:	d512      	bpl.n	800a68e <__swsetup_r+0x7a>
 800a668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a66a:	b141      	cbz	r1, 800a67e <__swsetup_r+0x6a>
 800a66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a670:	4299      	cmp	r1, r3
 800a672:	d002      	beq.n	800a67a <__swsetup_r+0x66>
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff fbe3 	bl	8009e40 <_free_r>
 800a67a:	2300      	movs	r3, #0
 800a67c:	6363      	str	r3, [r4, #52]	; 0x34
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	2300      	movs	r3, #0
 800a688:	6063      	str	r3, [r4, #4]
 800a68a:	6923      	ldr	r3, [r4, #16]
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	f043 0308 	orr.w	r3, r3, #8
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	b94b      	cbnz	r3, 800a6ae <__swsetup_r+0x9a>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a4:	d003      	beq.n	800a6ae <__swsetup_r+0x9a>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f000 f845 	bl	800a738 <__smakebuf_r>
 800a6ae:	89a0      	ldrh	r0, [r4, #12]
 800a6b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6b4:	f010 0301 	ands.w	r3, r0, #1
 800a6b8:	d00a      	beq.n	800a6d0 <__swsetup_r+0xbc>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60a3      	str	r3, [r4, #8]
 800a6be:	6963      	ldr	r3, [r4, #20]
 800a6c0:	425b      	negs	r3, r3
 800a6c2:	61a3      	str	r3, [r4, #24]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	b943      	cbnz	r3, 800a6da <__swsetup_r+0xc6>
 800a6c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6cc:	d1ba      	bne.n	800a644 <__swsetup_r+0x30>
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}
 800a6d0:	0781      	lsls	r1, r0, #30
 800a6d2:	bf58      	it	pl
 800a6d4:	6963      	ldrpl	r3, [r4, #20]
 800a6d6:	60a3      	str	r3, [r4, #8]
 800a6d8:	e7f4      	b.n	800a6c4 <__swsetup_r+0xb0>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e7f7      	b.n	800a6ce <__swsetup_r+0xba>
 800a6de:	bf00      	nop
 800a6e0:	20000184 	.word	0x20000184
 800a6e4:	0800a91c 	.word	0x0800a91c
 800a6e8:	0800a93c 	.word	0x0800a93c
 800a6ec:	0800a8fc 	.word	0x0800a8fc

0800a6f0 <__swhatbuf_r>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	460e      	mov	r6, r1
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	b096      	sub	sp, #88	; 0x58
 800a6fc:	4614      	mov	r4, r2
 800a6fe:	461d      	mov	r5, r3
 800a700:	da07      	bge.n	800a712 <__swhatbuf_r+0x22>
 800a702:	2300      	movs	r3, #0
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	89b3      	ldrh	r3, [r6, #12]
 800a708:	061a      	lsls	r2, r3, #24
 800a70a:	d410      	bmi.n	800a72e <__swhatbuf_r+0x3e>
 800a70c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a710:	e00e      	b.n	800a730 <__swhatbuf_r+0x40>
 800a712:	466a      	mov	r2, sp
 800a714:	f000 f850 	bl	800a7b8 <_fstat_r>
 800a718:	2800      	cmp	r0, #0
 800a71a:	dbf2      	blt.n	800a702 <__swhatbuf_r+0x12>
 800a71c:	9a01      	ldr	r2, [sp, #4]
 800a71e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a722:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a726:	425a      	negs	r2, r3
 800a728:	415a      	adcs	r2, r3
 800a72a:	602a      	str	r2, [r5, #0]
 800a72c:	e7ee      	b.n	800a70c <__swhatbuf_r+0x1c>
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	2000      	movs	r0, #0
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	b016      	add	sp, #88	; 0x58
 800a736:	bd70      	pop	{r4, r5, r6, pc}

0800a738 <__smakebuf_r>:
 800a738:	898b      	ldrh	r3, [r1, #12]
 800a73a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a73c:	079d      	lsls	r5, r3, #30
 800a73e:	4606      	mov	r6, r0
 800a740:	460c      	mov	r4, r1
 800a742:	d507      	bpl.n	800a754 <__smakebuf_r+0x1c>
 800a744:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	6123      	str	r3, [r4, #16]
 800a74c:	2301      	movs	r3, #1
 800a74e:	6163      	str	r3, [r4, #20]
 800a750:	b002      	add	sp, #8
 800a752:	bd70      	pop	{r4, r5, r6, pc}
 800a754:	ab01      	add	r3, sp, #4
 800a756:	466a      	mov	r2, sp
 800a758:	f7ff ffca 	bl	800a6f0 <__swhatbuf_r>
 800a75c:	9900      	ldr	r1, [sp, #0]
 800a75e:	4605      	mov	r5, r0
 800a760:	4630      	mov	r0, r6
 800a762:	f7ff f925 	bl	80099b0 <_malloc_r>
 800a766:	b948      	cbnz	r0, 800a77c <__smakebuf_r+0x44>
 800a768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a76c:	059a      	lsls	r2, r3, #22
 800a76e:	d4ef      	bmi.n	800a750 <__smakebuf_r+0x18>
 800a770:	f023 0303 	bic.w	r3, r3, #3
 800a774:	f043 0302 	orr.w	r3, r3, #2
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	e7e3      	b.n	800a744 <__smakebuf_r+0xc>
 800a77c:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <__smakebuf_r+0x7c>)
 800a77e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	6020      	str	r0, [r4, #0]
 800a784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	6163      	str	r3, [r4, #20]
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	6120      	str	r0, [r4, #16]
 800a792:	b15b      	cbz	r3, 800a7ac <__smakebuf_r+0x74>
 800a794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a798:	4630      	mov	r0, r6
 800a79a:	f000 f81f 	bl	800a7dc <_isatty_r>
 800a79e:	b128      	cbz	r0, 800a7ac <__smakebuf_r+0x74>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	f023 0303 	bic.w	r3, r3, #3
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	81a3      	strh	r3, [r4, #12]
 800a7ac:	89a0      	ldrh	r0, [r4, #12]
 800a7ae:	4305      	orrs	r5, r0
 800a7b0:	81a5      	strh	r5, [r4, #12]
 800a7b2:	e7cd      	b.n	800a750 <__smakebuf_r+0x18>
 800a7b4:	08009791 	.word	0x08009791

0800a7b8 <_fstat_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	; (800a7d8 <_fstat_r+0x20>)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	f7f6 f9aa 	bl	8000b1e <_fstat>
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	d102      	bne.n	800a7d4 <_fstat_r+0x1c>
 800a7ce:	682b      	ldr	r3, [r5, #0]
 800a7d0:	b103      	cbz	r3, 800a7d4 <_fstat_r+0x1c>
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	bd38      	pop	{r3, r4, r5, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20005d80 	.word	0x20005d80

0800a7dc <_isatty_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d06      	ldr	r5, [pc, #24]	; (800a7f8 <_isatty_r+0x1c>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	602b      	str	r3, [r5, #0]
 800a7e8:	f7f6 f9a9 	bl	8000b3e <_isatty>
 800a7ec:	1c43      	adds	r3, r0, #1
 800a7ee:	d102      	bne.n	800a7f6 <_isatty_r+0x1a>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	b103      	cbz	r3, 800a7f6 <_isatty_r+0x1a>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	bd38      	pop	{r3, r4, r5, pc}
 800a7f8:	20005d80 	.word	0x20005d80

0800a7fc <_init>:
 800a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fe:	bf00      	nop
 800a800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a802:	bc08      	pop	{r3}
 800a804:	469e      	mov	lr, r3
 800a806:	4770      	bx	lr

0800a808 <_fini>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	bf00      	nop
 800a80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80e:	bc08      	pop	{r3}
 800a810:	469e      	mov	lr, r3
 800a812:	4770      	bx	lr
