
dfu2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08078000  08078000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  08078198  08078198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0807ef84  0807ef84  0000ef84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807f028  0807f028  000100dc  2**0
                  CONTENTS
  4 .ARM          00000008  0807f028  0807f028  0000f028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807f030  0807f030  000100dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807f030  0807f030  0000f030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807f034  0807f034  0000f034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0807f038  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  200000dc  0807f114  000100dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0807f114  00010f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013810  00000000  00000000  0001010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328b  00000000  00000000  0002391c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00026ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00027848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d8  00000000  00000000  00028390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff97  00000000  00000000  00040a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876d6  00000000  00000000  000509ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d80d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000d8128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08078198 <__do_global_dtors_aux>:
 8078198:	b510      	push	{r4, lr}
 807819a:	4c05      	ldr	r4, [pc, #20]	; (80781b0 <__do_global_dtors_aux+0x18>)
 807819c:	7823      	ldrb	r3, [r4, #0]
 807819e:	b933      	cbnz	r3, 80781ae <__do_global_dtors_aux+0x16>
 80781a0:	4b04      	ldr	r3, [pc, #16]	; (80781b4 <__do_global_dtors_aux+0x1c>)
 80781a2:	b113      	cbz	r3, 80781aa <__do_global_dtors_aux+0x12>
 80781a4:	4804      	ldr	r0, [pc, #16]	; (80781b8 <__do_global_dtors_aux+0x20>)
 80781a6:	f3af 8000 	nop.w
 80781aa:	2301      	movs	r3, #1
 80781ac:	7023      	strb	r3, [r4, #0]
 80781ae:	bd10      	pop	{r4, pc}
 80781b0:	200000dc 	.word	0x200000dc
 80781b4:	00000000 	.word	0x00000000
 80781b8:	0807ef6c 	.word	0x0807ef6c

080781bc <frame_dummy>:
 80781bc:	b508      	push	{r3, lr}
 80781be:	4b03      	ldr	r3, [pc, #12]	; (80781cc <frame_dummy+0x10>)
 80781c0:	b11b      	cbz	r3, 80781ca <frame_dummy+0xe>
 80781c2:	4903      	ldr	r1, [pc, #12]	; (80781d0 <frame_dummy+0x14>)
 80781c4:	4803      	ldr	r0, [pc, #12]	; (80781d4 <frame_dummy+0x18>)
 80781c6:	f3af 8000 	nop.w
 80781ca:	bd08      	pop	{r3, pc}
 80781cc:	00000000 	.word	0x00000000
 80781d0:	200000e0 	.word	0x200000e0
 80781d4:	0807ef6c 	.word	0x0807ef6c

080781d8 <__aeabi_uldivmod>:
 80781d8:	b953      	cbnz	r3, 80781f0 <__aeabi_uldivmod+0x18>
 80781da:	b94a      	cbnz	r2, 80781f0 <__aeabi_uldivmod+0x18>
 80781dc:	2900      	cmp	r1, #0
 80781de:	bf08      	it	eq
 80781e0:	2800      	cmpeq	r0, #0
 80781e2:	bf1c      	itt	ne
 80781e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80781e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80781ec:	f000 b96e 	b.w	80784cc <__aeabi_idiv0>
 80781f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80781f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80781f8:	f000 f806 	bl	8078208 <__udivmoddi4>
 80781fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8078200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8078204:	b004      	add	sp, #16
 8078206:	4770      	bx	lr

08078208 <__udivmoddi4>:
 8078208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 807820c:	9d08      	ldr	r5, [sp, #32]
 807820e:	4604      	mov	r4, r0
 8078210:	468c      	mov	ip, r1
 8078212:	2b00      	cmp	r3, #0
 8078214:	f040 8083 	bne.w	807831e <__udivmoddi4+0x116>
 8078218:	428a      	cmp	r2, r1
 807821a:	4617      	mov	r7, r2
 807821c:	d947      	bls.n	80782ae <__udivmoddi4+0xa6>
 807821e:	fab2 f282 	clz	r2, r2
 8078222:	b142      	cbz	r2, 8078236 <__udivmoddi4+0x2e>
 8078224:	f1c2 0020 	rsb	r0, r2, #32
 8078228:	fa24 f000 	lsr.w	r0, r4, r0
 807822c:	4091      	lsls	r1, r2
 807822e:	4097      	lsls	r7, r2
 8078230:	ea40 0c01 	orr.w	ip, r0, r1
 8078234:	4094      	lsls	r4, r2
 8078236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 807823a:	0c23      	lsrs	r3, r4, #16
 807823c:	fbbc f6f8 	udiv	r6, ip, r8
 8078240:	fa1f fe87 	uxth.w	lr, r7
 8078244:	fb08 c116 	mls	r1, r8, r6, ip
 8078248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 807824c:	fb06 f10e 	mul.w	r1, r6, lr
 8078250:	4299      	cmp	r1, r3
 8078252:	d909      	bls.n	8078268 <__udivmoddi4+0x60>
 8078254:	18fb      	adds	r3, r7, r3
 8078256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 807825a:	f080 8119 	bcs.w	8078490 <__udivmoddi4+0x288>
 807825e:	4299      	cmp	r1, r3
 8078260:	f240 8116 	bls.w	8078490 <__udivmoddi4+0x288>
 8078264:	3e02      	subs	r6, #2
 8078266:	443b      	add	r3, r7
 8078268:	1a5b      	subs	r3, r3, r1
 807826a:	b2a4      	uxth	r4, r4
 807826c:	fbb3 f0f8 	udiv	r0, r3, r8
 8078270:	fb08 3310 	mls	r3, r8, r0, r3
 8078274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8078278:	fb00 fe0e 	mul.w	lr, r0, lr
 807827c:	45a6      	cmp	lr, r4
 807827e:	d909      	bls.n	8078294 <__udivmoddi4+0x8c>
 8078280:	193c      	adds	r4, r7, r4
 8078282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8078286:	f080 8105 	bcs.w	8078494 <__udivmoddi4+0x28c>
 807828a:	45a6      	cmp	lr, r4
 807828c:	f240 8102 	bls.w	8078494 <__udivmoddi4+0x28c>
 8078290:	3802      	subs	r0, #2
 8078292:	443c      	add	r4, r7
 8078294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8078298:	eba4 040e 	sub.w	r4, r4, lr
 807829c:	2600      	movs	r6, #0
 807829e:	b11d      	cbz	r5, 80782a8 <__udivmoddi4+0xa0>
 80782a0:	40d4      	lsrs	r4, r2
 80782a2:	2300      	movs	r3, #0
 80782a4:	e9c5 4300 	strd	r4, r3, [r5]
 80782a8:	4631      	mov	r1, r6
 80782aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80782ae:	b902      	cbnz	r2, 80782b2 <__udivmoddi4+0xaa>
 80782b0:	deff      	udf	#255	; 0xff
 80782b2:	fab2 f282 	clz	r2, r2
 80782b6:	2a00      	cmp	r2, #0
 80782b8:	d150      	bne.n	807835c <__udivmoddi4+0x154>
 80782ba:	1bcb      	subs	r3, r1, r7
 80782bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80782c0:	fa1f f887 	uxth.w	r8, r7
 80782c4:	2601      	movs	r6, #1
 80782c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80782ca:	0c21      	lsrs	r1, r4, #16
 80782cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80782d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80782d4:	fb08 f30c 	mul.w	r3, r8, ip
 80782d8:	428b      	cmp	r3, r1
 80782da:	d907      	bls.n	80782ec <__udivmoddi4+0xe4>
 80782dc:	1879      	adds	r1, r7, r1
 80782de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80782e2:	d202      	bcs.n	80782ea <__udivmoddi4+0xe2>
 80782e4:	428b      	cmp	r3, r1
 80782e6:	f200 80e9 	bhi.w	80784bc <__udivmoddi4+0x2b4>
 80782ea:	4684      	mov	ip, r0
 80782ec:	1ac9      	subs	r1, r1, r3
 80782ee:	b2a3      	uxth	r3, r4
 80782f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80782f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80782f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80782fc:	fb08 f800 	mul.w	r8, r8, r0
 8078300:	45a0      	cmp	r8, r4
 8078302:	d907      	bls.n	8078314 <__udivmoddi4+0x10c>
 8078304:	193c      	adds	r4, r7, r4
 8078306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 807830a:	d202      	bcs.n	8078312 <__udivmoddi4+0x10a>
 807830c:	45a0      	cmp	r8, r4
 807830e:	f200 80d9 	bhi.w	80784c4 <__udivmoddi4+0x2bc>
 8078312:	4618      	mov	r0, r3
 8078314:	eba4 0408 	sub.w	r4, r4, r8
 8078318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 807831c:	e7bf      	b.n	807829e <__udivmoddi4+0x96>
 807831e:	428b      	cmp	r3, r1
 8078320:	d909      	bls.n	8078336 <__udivmoddi4+0x12e>
 8078322:	2d00      	cmp	r5, #0
 8078324:	f000 80b1 	beq.w	807848a <__udivmoddi4+0x282>
 8078328:	2600      	movs	r6, #0
 807832a:	e9c5 0100 	strd	r0, r1, [r5]
 807832e:	4630      	mov	r0, r6
 8078330:	4631      	mov	r1, r6
 8078332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8078336:	fab3 f683 	clz	r6, r3
 807833a:	2e00      	cmp	r6, #0
 807833c:	d14a      	bne.n	80783d4 <__udivmoddi4+0x1cc>
 807833e:	428b      	cmp	r3, r1
 8078340:	d302      	bcc.n	8078348 <__udivmoddi4+0x140>
 8078342:	4282      	cmp	r2, r0
 8078344:	f200 80b8 	bhi.w	80784b8 <__udivmoddi4+0x2b0>
 8078348:	1a84      	subs	r4, r0, r2
 807834a:	eb61 0103 	sbc.w	r1, r1, r3
 807834e:	2001      	movs	r0, #1
 8078350:	468c      	mov	ip, r1
 8078352:	2d00      	cmp	r5, #0
 8078354:	d0a8      	beq.n	80782a8 <__udivmoddi4+0xa0>
 8078356:	e9c5 4c00 	strd	r4, ip, [r5]
 807835a:	e7a5      	b.n	80782a8 <__udivmoddi4+0xa0>
 807835c:	f1c2 0320 	rsb	r3, r2, #32
 8078360:	fa20 f603 	lsr.w	r6, r0, r3
 8078364:	4097      	lsls	r7, r2
 8078366:	fa01 f002 	lsl.w	r0, r1, r2
 807836a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 807836e:	40d9      	lsrs	r1, r3
 8078370:	4330      	orrs	r0, r6
 8078372:	0c03      	lsrs	r3, r0, #16
 8078374:	fbb1 f6fe 	udiv	r6, r1, lr
 8078378:	fa1f f887 	uxth.w	r8, r7
 807837c:	fb0e 1116 	mls	r1, lr, r6, r1
 8078380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8078384:	fb06 f108 	mul.w	r1, r6, r8
 8078388:	4299      	cmp	r1, r3
 807838a:	fa04 f402 	lsl.w	r4, r4, r2
 807838e:	d909      	bls.n	80783a4 <__udivmoddi4+0x19c>
 8078390:	18fb      	adds	r3, r7, r3
 8078392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8078396:	f080 808d 	bcs.w	80784b4 <__udivmoddi4+0x2ac>
 807839a:	4299      	cmp	r1, r3
 807839c:	f240 808a 	bls.w	80784b4 <__udivmoddi4+0x2ac>
 80783a0:	3e02      	subs	r6, #2
 80783a2:	443b      	add	r3, r7
 80783a4:	1a5b      	subs	r3, r3, r1
 80783a6:	b281      	uxth	r1, r0
 80783a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80783ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80783b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80783b4:	fb00 f308 	mul.w	r3, r0, r8
 80783b8:	428b      	cmp	r3, r1
 80783ba:	d907      	bls.n	80783cc <__udivmoddi4+0x1c4>
 80783bc:	1879      	adds	r1, r7, r1
 80783be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80783c2:	d273      	bcs.n	80784ac <__udivmoddi4+0x2a4>
 80783c4:	428b      	cmp	r3, r1
 80783c6:	d971      	bls.n	80784ac <__udivmoddi4+0x2a4>
 80783c8:	3802      	subs	r0, #2
 80783ca:	4439      	add	r1, r7
 80783cc:	1acb      	subs	r3, r1, r3
 80783ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80783d2:	e778      	b.n	80782c6 <__udivmoddi4+0xbe>
 80783d4:	f1c6 0c20 	rsb	ip, r6, #32
 80783d8:	fa03 f406 	lsl.w	r4, r3, r6
 80783dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80783e0:	431c      	orrs	r4, r3
 80783e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80783e6:	fa01 f306 	lsl.w	r3, r1, r6
 80783ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80783ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80783f2:	431f      	orrs	r7, r3
 80783f4:	0c3b      	lsrs	r3, r7, #16
 80783f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80783fa:	fa1f f884 	uxth.w	r8, r4
 80783fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8078402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8078406:	fb09 fa08 	mul.w	sl, r9, r8
 807840a:	458a      	cmp	sl, r1
 807840c:	fa02 f206 	lsl.w	r2, r2, r6
 8078410:	fa00 f306 	lsl.w	r3, r0, r6
 8078414:	d908      	bls.n	8078428 <__udivmoddi4+0x220>
 8078416:	1861      	adds	r1, r4, r1
 8078418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 807841c:	d248      	bcs.n	80784b0 <__udivmoddi4+0x2a8>
 807841e:	458a      	cmp	sl, r1
 8078420:	d946      	bls.n	80784b0 <__udivmoddi4+0x2a8>
 8078422:	f1a9 0902 	sub.w	r9, r9, #2
 8078426:	4421      	add	r1, r4
 8078428:	eba1 010a 	sub.w	r1, r1, sl
 807842c:	b2bf      	uxth	r7, r7
 807842e:	fbb1 f0fe 	udiv	r0, r1, lr
 8078432:	fb0e 1110 	mls	r1, lr, r0, r1
 8078436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 807843a:	fb00 f808 	mul.w	r8, r0, r8
 807843e:	45b8      	cmp	r8, r7
 8078440:	d907      	bls.n	8078452 <__udivmoddi4+0x24a>
 8078442:	19e7      	adds	r7, r4, r7
 8078444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8078448:	d22e      	bcs.n	80784a8 <__udivmoddi4+0x2a0>
 807844a:	45b8      	cmp	r8, r7
 807844c:	d92c      	bls.n	80784a8 <__udivmoddi4+0x2a0>
 807844e:	3802      	subs	r0, #2
 8078450:	4427      	add	r7, r4
 8078452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8078456:	eba7 0708 	sub.w	r7, r7, r8
 807845a:	fba0 8902 	umull	r8, r9, r0, r2
 807845e:	454f      	cmp	r7, r9
 8078460:	46c6      	mov	lr, r8
 8078462:	4649      	mov	r1, r9
 8078464:	d31a      	bcc.n	807849c <__udivmoddi4+0x294>
 8078466:	d017      	beq.n	8078498 <__udivmoddi4+0x290>
 8078468:	b15d      	cbz	r5, 8078482 <__udivmoddi4+0x27a>
 807846a:	ebb3 020e 	subs.w	r2, r3, lr
 807846e:	eb67 0701 	sbc.w	r7, r7, r1
 8078472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8078476:	40f2      	lsrs	r2, r6
 8078478:	ea4c 0202 	orr.w	r2, ip, r2
 807847c:	40f7      	lsrs	r7, r6
 807847e:	e9c5 2700 	strd	r2, r7, [r5]
 8078482:	2600      	movs	r6, #0
 8078484:	4631      	mov	r1, r6
 8078486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807848a:	462e      	mov	r6, r5
 807848c:	4628      	mov	r0, r5
 807848e:	e70b      	b.n	80782a8 <__udivmoddi4+0xa0>
 8078490:	4606      	mov	r6, r0
 8078492:	e6e9      	b.n	8078268 <__udivmoddi4+0x60>
 8078494:	4618      	mov	r0, r3
 8078496:	e6fd      	b.n	8078294 <__udivmoddi4+0x8c>
 8078498:	4543      	cmp	r3, r8
 807849a:	d2e5      	bcs.n	8078468 <__udivmoddi4+0x260>
 807849c:	ebb8 0e02 	subs.w	lr, r8, r2
 80784a0:	eb69 0104 	sbc.w	r1, r9, r4
 80784a4:	3801      	subs	r0, #1
 80784a6:	e7df      	b.n	8078468 <__udivmoddi4+0x260>
 80784a8:	4608      	mov	r0, r1
 80784aa:	e7d2      	b.n	8078452 <__udivmoddi4+0x24a>
 80784ac:	4660      	mov	r0, ip
 80784ae:	e78d      	b.n	80783cc <__udivmoddi4+0x1c4>
 80784b0:	4681      	mov	r9, r0
 80784b2:	e7b9      	b.n	8078428 <__udivmoddi4+0x220>
 80784b4:	4666      	mov	r6, ip
 80784b6:	e775      	b.n	80783a4 <__udivmoddi4+0x19c>
 80784b8:	4630      	mov	r0, r6
 80784ba:	e74a      	b.n	8078352 <__udivmoddi4+0x14a>
 80784bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80784c0:	4439      	add	r1, r7
 80784c2:	e713      	b.n	80782ec <__udivmoddi4+0xe4>
 80784c4:	3802      	subs	r0, #2
 80784c6:	443c      	add	r4, r7
 80784c8:	e724      	b.n	8078314 <__udivmoddi4+0x10c>
 80784ca:	bf00      	nop

080784cc <__aeabi_idiv0>:
 80784cc:	4770      	bx	lr
 80784ce:	bf00      	nop

080784d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80784d0:	b580      	push	{r7, lr}
 80784d2:	b082      	sub	sp, #8
 80784d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80784d6:	f000 f98d 	bl	80787f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80784da:	f000 f82b 	bl	8078534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80784de:	f000 f893 	bl	8078608 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80784e2:	f005 ffa9 	bl	807e438 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MX_USB_DEVICE_Init();
 80784e6:	f005 ffa7 	bl	807e438 <MX_USB_DEVICE_Init>

  dfu_test();
 80784ea:	f005 ff9e 	bl	807e42a <dfu_test>

  uint32_t now = 0, then = 0;
 80784ee:	2300      	movs	r3, #0
 80784f0:	603b      	str	r3, [r7, #0]
 80784f2:	2300      	movs	r3, #0
 80784f4:	607b      	str	r3, [r7, #4]

  while (1)
  {

	now = HAL_GetTick();
 80784f6:	f000 f9e3 	bl	80788c0 <HAL_GetTick>
 80784fa:	6038      	str	r0, [r7, #0]
	if (now % 50 == 0 && now != then)
 80784fc:	683a      	ldr	r2, [r7, #0]
 80784fe:	4b0b      	ldr	r3, [pc, #44]	; (807852c <main+0x5c>)
 8078500:	fba3 1302 	umull	r1, r3, r3, r2
 8078504:	091b      	lsrs	r3, r3, #4
 8078506:	2132      	movs	r1, #50	; 0x32
 8078508:	fb01 f303 	mul.w	r3, r1, r3
 807850c:	1ad3      	subs	r3, r2, r3
 807850e:	2b00      	cmp	r3, #0
 8078510:	d1f1      	bne.n	80784f6 <main+0x26>
 8078512:	683a      	ldr	r2, [r7, #0]
 8078514:	687b      	ldr	r3, [r7, #4]
 8078516:	429a      	cmp	r2, r3
 8078518:	d0ed      	beq.n	80784f6 <main+0x26>
	{

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 807851a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 807851e:	4804      	ldr	r0, [pc, #16]	; (8078530 <main+0x60>)
 8078520:	f000 ff95 	bl	807944e <HAL_GPIO_TogglePin>

		then = now;
 8078524:	683b      	ldr	r3, [r7, #0]
 8078526:	607b      	str	r3, [r7, #4]
	now = HAL_GetTick();
 8078528:	e7e5      	b.n	80784f6 <main+0x26>
 807852a:	bf00      	nop
 807852c:	51eb851f 	.word	0x51eb851f
 8078530:	40020800 	.word	0x40020800

08078534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8078534:	b580      	push	{r7, lr}
 8078536:	b094      	sub	sp, #80	; 0x50
 8078538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 807853a:	f107 0320 	add.w	r3, r7, #32
 807853e:	2230      	movs	r2, #48	; 0x30
 8078540:	2100      	movs	r1, #0
 8078542:	4618      	mov	r0, r3
 8078544:	f006 fd0a 	bl	807ef5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8078548:	f107 030c 	add.w	r3, r7, #12
 807854c:	2200      	movs	r2, #0
 807854e:	601a      	str	r2, [r3, #0]
 8078550:	605a      	str	r2, [r3, #4]
 8078552:	609a      	str	r2, [r3, #8]
 8078554:	60da      	str	r2, [r3, #12]
 8078556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8078558:	2300      	movs	r3, #0
 807855a:	60bb      	str	r3, [r7, #8]
 807855c:	4b28      	ldr	r3, [pc, #160]	; (8078600 <SystemClock_Config+0xcc>)
 807855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8078560:	4a27      	ldr	r2, [pc, #156]	; (8078600 <SystemClock_Config+0xcc>)
 8078562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8078566:	6413      	str	r3, [r2, #64]	; 0x40
 8078568:	4b25      	ldr	r3, [pc, #148]	; (8078600 <SystemClock_Config+0xcc>)
 807856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807856c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8078570:	60bb      	str	r3, [r7, #8]
 8078572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8078574:	2300      	movs	r3, #0
 8078576:	607b      	str	r3, [r7, #4]
 8078578:	4b22      	ldr	r3, [pc, #136]	; (8078604 <SystemClock_Config+0xd0>)
 807857a:	681b      	ldr	r3, [r3, #0]
 807857c:	4a21      	ldr	r2, [pc, #132]	; (8078604 <SystemClock_Config+0xd0>)
 807857e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8078582:	6013      	str	r3, [r2, #0]
 8078584:	4b1f      	ldr	r3, [pc, #124]	; (8078604 <SystemClock_Config+0xd0>)
 8078586:	681b      	ldr	r3, [r3, #0]
 8078588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 807858c:	607b      	str	r3, [r7, #4]
 807858e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8078590:	2301      	movs	r3, #1
 8078592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8078594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8078598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 807859a:	2302      	movs	r3, #2
 807859c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 807859e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80785a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80785a4:	2319      	movs	r3, #25
 80785a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80785a8:	23c0      	movs	r3, #192	; 0xc0
 80785aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80785ac:	2302      	movs	r3, #2
 80785ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80785b0:	2304      	movs	r3, #4
 80785b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80785b4:	f107 0320 	add.w	r3, r7, #32
 80785b8:	4618      	mov	r0, r3
 80785ba:	f002 f8bd 	bl	807a738 <HAL_RCC_OscConfig>
 80785be:	4603      	mov	r3, r0
 80785c0:	2b00      	cmp	r3, #0
 80785c2:	d001      	beq.n	80785c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80785c4:	f000 f872 	bl	80786ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80785c8:	230f      	movs	r3, #15
 80785ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80785cc:	2302      	movs	r3, #2
 80785ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80785d0:	2300      	movs	r3, #0
 80785d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80785d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80785d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80785da:	2300      	movs	r3, #0
 80785dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80785de:	f107 030c 	add.w	r3, r7, #12
 80785e2:	2103      	movs	r1, #3
 80785e4:	4618      	mov	r0, r3
 80785e6:	f002 fb1f 	bl	807ac28 <HAL_RCC_ClockConfig>
 80785ea:	4603      	mov	r3, r0
 80785ec:	2b00      	cmp	r3, #0
 80785ee:	d001      	beq.n	80785f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80785f0:	f000 f85c 	bl	80786ac <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80785f4:	f002 fbfe 	bl	807adf4 <HAL_RCC_EnableCSS>
}
 80785f8:	bf00      	nop
 80785fa:	3750      	adds	r7, #80	; 0x50
 80785fc:	46bd      	mov	sp, r7
 80785fe:	bd80      	pop	{r7, pc}
 8078600:	40023800 	.word	0x40023800
 8078604:	40007000 	.word	0x40007000

08078608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8078608:	b580      	push	{r7, lr}
 807860a:	b088      	sub	sp, #32
 807860c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 807860e:	f107 030c 	add.w	r3, r7, #12
 8078612:	2200      	movs	r2, #0
 8078614:	601a      	str	r2, [r3, #0]
 8078616:	605a      	str	r2, [r3, #4]
 8078618:	609a      	str	r2, [r3, #8]
 807861a:	60da      	str	r2, [r3, #12]
 807861c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 807861e:	2300      	movs	r3, #0
 8078620:	60bb      	str	r3, [r7, #8]
 8078622:	4b20      	ldr	r3, [pc, #128]	; (80786a4 <MX_GPIO_Init+0x9c>)
 8078624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8078626:	4a1f      	ldr	r2, [pc, #124]	; (80786a4 <MX_GPIO_Init+0x9c>)
 8078628:	f043 0304 	orr.w	r3, r3, #4
 807862c:	6313      	str	r3, [r2, #48]	; 0x30
 807862e:	4b1d      	ldr	r3, [pc, #116]	; (80786a4 <MX_GPIO_Init+0x9c>)
 8078630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8078632:	f003 0304 	and.w	r3, r3, #4
 8078636:	60bb      	str	r3, [r7, #8]
 8078638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 807863a:	2300      	movs	r3, #0
 807863c:	607b      	str	r3, [r7, #4]
 807863e:	4b19      	ldr	r3, [pc, #100]	; (80786a4 <MX_GPIO_Init+0x9c>)
 8078640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8078642:	4a18      	ldr	r2, [pc, #96]	; (80786a4 <MX_GPIO_Init+0x9c>)
 8078644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8078648:	6313      	str	r3, [r2, #48]	; 0x30
 807864a:	4b16      	ldr	r3, [pc, #88]	; (80786a4 <MX_GPIO_Init+0x9c>)
 807864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8078652:	607b      	str	r3, [r7, #4]
 8078654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8078656:	2300      	movs	r3, #0
 8078658:	603b      	str	r3, [r7, #0]
 807865a:	4b12      	ldr	r3, [pc, #72]	; (80786a4 <MX_GPIO_Init+0x9c>)
 807865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807865e:	4a11      	ldr	r2, [pc, #68]	; (80786a4 <MX_GPIO_Init+0x9c>)
 8078660:	f043 0301 	orr.w	r3, r3, #1
 8078664:	6313      	str	r3, [r2, #48]	; 0x30
 8078666:	4b0f      	ldr	r3, [pc, #60]	; (80786a4 <MX_GPIO_Init+0x9c>)
 8078668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807866a:	f003 0301 	and.w	r3, r3, #1
 807866e:	603b      	str	r3, [r7, #0]
 8078670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8078672:	2201      	movs	r2, #1
 8078674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8078678:	480b      	ldr	r0, [pc, #44]	; (80786a8 <MX_GPIO_Init+0xa0>)
 807867a:	f000 fecf 	bl	807941c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 807867e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8078682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8078684:	2311      	movs	r3, #17
 8078686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8078688:	2300      	movs	r3, #0
 807868a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 807868c:	2300      	movs	r3, #0
 807868e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8078690:	f107 030c 	add.w	r3, r7, #12
 8078694:	4619      	mov	r1, r3
 8078696:	4804      	ldr	r0, [pc, #16]	; (80786a8 <MX_GPIO_Init+0xa0>)
 8078698:	f000 fd3c 	bl	8079114 <HAL_GPIO_Init>

}
 807869c:	bf00      	nop
 807869e:	3720      	adds	r7, #32
 80786a0:	46bd      	mov	sp, r7
 80786a2:	bd80      	pop	{r7, pc}
 80786a4:	40023800 	.word	0x40023800
 80786a8:	40020800 	.word	0x40020800

080786ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80786ac:	b480      	push	{r7}
 80786ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80786b0:	b672      	cpsid	i
}
 80786b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80786b4:	e7fe      	b.n	80786b4 <Error_Handler+0x8>
	...

080786b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80786b8:	b480      	push	{r7}
 80786ba:	b083      	sub	sp, #12
 80786bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80786be:	2300      	movs	r3, #0
 80786c0:	607b      	str	r3, [r7, #4]
 80786c2:	4b10      	ldr	r3, [pc, #64]	; (8078704 <HAL_MspInit+0x4c>)
 80786c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80786c6:	4a0f      	ldr	r2, [pc, #60]	; (8078704 <HAL_MspInit+0x4c>)
 80786c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80786cc:	6453      	str	r3, [r2, #68]	; 0x44
 80786ce:	4b0d      	ldr	r3, [pc, #52]	; (8078704 <HAL_MspInit+0x4c>)
 80786d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80786d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80786d6:	607b      	str	r3, [r7, #4]
 80786d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80786da:	2300      	movs	r3, #0
 80786dc:	603b      	str	r3, [r7, #0]
 80786de:	4b09      	ldr	r3, [pc, #36]	; (8078704 <HAL_MspInit+0x4c>)
 80786e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80786e2:	4a08      	ldr	r2, [pc, #32]	; (8078704 <HAL_MspInit+0x4c>)
 80786e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80786e8:	6413      	str	r3, [r2, #64]	; 0x40
 80786ea:	4b06      	ldr	r3, [pc, #24]	; (8078704 <HAL_MspInit+0x4c>)
 80786ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80786ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80786f2:	603b      	str	r3, [r7, #0]
 80786f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80786f6:	bf00      	nop
 80786f8:	370c      	adds	r7, #12
 80786fa:	46bd      	mov	sp, r7
 80786fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078700:	4770      	bx	lr
 8078702:	bf00      	nop
 8078704:	40023800 	.word	0x40023800

08078708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8078708:	b580      	push	{r7, lr}
 807870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 807870c:	f002 fc40 	bl	807af90 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8078710:	e7fe      	b.n	8078710 <NMI_Handler+0x8>

08078712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8078712:	b480      	push	{r7}
 8078714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8078716:	e7fe      	b.n	8078716 <HardFault_Handler+0x4>

08078718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8078718:	b480      	push	{r7}
 807871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 807871c:	e7fe      	b.n	807871c <MemManage_Handler+0x4>

0807871e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 807871e:	b480      	push	{r7}
 8078720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8078722:	e7fe      	b.n	8078722 <BusFault_Handler+0x4>

08078724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8078724:	b480      	push	{r7}
 8078726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8078728:	e7fe      	b.n	8078728 <UsageFault_Handler+0x4>

0807872a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 807872a:	b480      	push	{r7}
 807872c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 807872e:	bf00      	nop
 8078730:	46bd      	mov	sp, r7
 8078732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078736:	4770      	bx	lr

08078738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8078738:	b480      	push	{r7}
 807873a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 807873c:	bf00      	nop
 807873e:	46bd      	mov	sp, r7
 8078740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078744:	4770      	bx	lr

08078746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8078746:	b480      	push	{r7}
 8078748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 807874a:	bf00      	nop
 807874c:	46bd      	mov	sp, r7
 807874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078752:	4770      	bx	lr

08078754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8078754:	b580      	push	{r7, lr}
 8078756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8078758:	f000 f89e 	bl	8078898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 807875c:	bf00      	nop
 807875e:	bd80      	pop	{r7, pc}

08078760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8078760:	b580      	push	{r7, lr}
 8078762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8078764:	4802      	ldr	r0, [pc, #8]	; (8078770 <OTG_FS_IRQHandler+0x10>)
 8078766:	f001 f815 	bl	8079794 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 807876a:	bf00      	nop
 807876c:	bd80      	pop	{r7, pc}
 807876e:	bf00      	nop
 8078770:	20000b0c 	.word	0x20000b0c

08078774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8078774:	b480      	push	{r7}
 8078776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8078778:	4b07      	ldr	r3, [pc, #28]	; (8078798 <SystemInit+0x24>)
 807877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807877e:	4a06      	ldr	r2, [pc, #24]	; (8078798 <SystemInit+0x24>)
 8078780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8078784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8078788:	4b03      	ldr	r3, [pc, #12]	; (8078798 <SystemInit+0x24>)
 807878a:	4a04      	ldr	r2, [pc, #16]	; (807879c <SystemInit+0x28>)
 807878c:	609a      	str	r2, [r3, #8]
#endif
}
 807878e:	bf00      	nop
 8078790:	46bd      	mov	sp, r7
 8078792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078796:	4770      	bx	lr
 8078798:	e000ed00 	.word	0xe000ed00
 807879c:	08078000 	.word	0x08078000

080787a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80787a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80787d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80787a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80787a6:	e003      	b.n	80787b0 <LoopCopyDataInit>

080787a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80787a8:	4b0c      	ldr	r3, [pc, #48]	; (80787dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80787aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80787ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80787ae:	3104      	adds	r1, #4

080787b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80787b0:	480b      	ldr	r0, [pc, #44]	; (80787e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80787b2:	4b0c      	ldr	r3, [pc, #48]	; (80787e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80787b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80787b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80787b8:	d3f6      	bcc.n	80787a8 <CopyDataInit>
  ldr  r2, =_sbss
 80787ba:	4a0b      	ldr	r2, [pc, #44]	; (80787e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80787bc:	e002      	b.n	80787c4 <LoopFillZerobss>

080787be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80787be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80787c0:	f842 3b04 	str.w	r3, [r2], #4

080787c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80787c4:	4b09      	ldr	r3, [pc, #36]	; (80787ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80787c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80787c8:	d3f9      	bcc.n	80787be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80787ca:	f7ff ffd3 	bl	8078774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80787ce:	f006 fba1 	bl	807ef14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80787d2:	f7ff fe7d 	bl	80784d0 <main>
  bx  lr    
 80787d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80787d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80787dc:	0807f038 	.word	0x0807f038
  ldr  r0, =_sdata
 80787e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80787e4:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 80787e8:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 80787ec:	20000f14 	.word	0x20000f14

080787f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80787f0:	e7fe      	b.n	80787f0 <ADC_IRQHandler>
	...

080787f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80787f4:	b580      	push	{r7, lr}
 80787f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80787f8:	4b0e      	ldr	r3, [pc, #56]	; (8078834 <HAL_Init+0x40>)
 80787fa:	681b      	ldr	r3, [r3, #0]
 80787fc:	4a0d      	ldr	r2, [pc, #52]	; (8078834 <HAL_Init+0x40>)
 80787fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8078802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8078804:	4b0b      	ldr	r3, [pc, #44]	; (8078834 <HAL_Init+0x40>)
 8078806:	681b      	ldr	r3, [r3, #0]
 8078808:	4a0a      	ldr	r2, [pc, #40]	; (8078834 <HAL_Init+0x40>)
 807880a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 807880e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8078810:	4b08      	ldr	r3, [pc, #32]	; (8078834 <HAL_Init+0x40>)
 8078812:	681b      	ldr	r3, [r3, #0]
 8078814:	4a07      	ldr	r2, [pc, #28]	; (8078834 <HAL_Init+0x40>)
 8078816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 807881a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 807881c:	2003      	movs	r0, #3
 807881e:	f000 f94f 	bl	8078ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8078822:	2000      	movs	r0, #0
 8078824:	f000 f808 	bl	8078838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8078828:	f7ff ff46 	bl	80786b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 807882c:	2300      	movs	r3, #0
}
 807882e:	4618      	mov	r0, r3
 8078830:	bd80      	pop	{r7, pc}
 8078832:	bf00      	nop
 8078834:	40023c00 	.word	0x40023c00

08078838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8078838:	b580      	push	{r7, lr}
 807883a:	b082      	sub	sp, #8
 807883c:	af00      	add	r7, sp, #0
 807883e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8078840:	4b12      	ldr	r3, [pc, #72]	; (807888c <HAL_InitTick+0x54>)
 8078842:	681a      	ldr	r2, [r3, #0]
 8078844:	4b12      	ldr	r3, [pc, #72]	; (8078890 <HAL_InitTick+0x58>)
 8078846:	781b      	ldrb	r3, [r3, #0]
 8078848:	4619      	mov	r1, r3
 807884a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 807884e:	fbb3 f3f1 	udiv	r3, r3, r1
 8078852:	fbb2 f3f3 	udiv	r3, r2, r3
 8078856:	4618      	mov	r0, r3
 8078858:	f000 f967 	bl	8078b2a <HAL_SYSTICK_Config>
 807885c:	4603      	mov	r3, r0
 807885e:	2b00      	cmp	r3, #0
 8078860:	d001      	beq.n	8078866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8078862:	2301      	movs	r3, #1
 8078864:	e00e      	b.n	8078884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8078866:	687b      	ldr	r3, [r7, #4]
 8078868:	2b0f      	cmp	r3, #15
 807886a:	d80a      	bhi.n	8078882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 807886c:	2200      	movs	r2, #0
 807886e:	6879      	ldr	r1, [r7, #4]
 8078870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8078874:	f000 f92f 	bl	8078ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8078878:	4a06      	ldr	r2, [pc, #24]	; (8078894 <HAL_InitTick+0x5c>)
 807887a:	687b      	ldr	r3, [r7, #4]
 807887c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 807887e:	2300      	movs	r3, #0
 8078880:	e000      	b.n	8078884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8078882:	2301      	movs	r3, #1
}
 8078884:	4618      	mov	r0, r3
 8078886:	3708      	adds	r7, #8
 8078888:	46bd      	mov	sp, r7
 807888a:	bd80      	pop	{r7, pc}
 807888c:	20000000 	.word	0x20000000
 8078890:	20000008 	.word	0x20000008
 8078894:	20000004 	.word	0x20000004

08078898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8078898:	b480      	push	{r7}
 807889a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 807889c:	4b06      	ldr	r3, [pc, #24]	; (80788b8 <HAL_IncTick+0x20>)
 807889e:	781b      	ldrb	r3, [r3, #0]
 80788a0:	461a      	mov	r2, r3
 80788a2:	4b06      	ldr	r3, [pc, #24]	; (80788bc <HAL_IncTick+0x24>)
 80788a4:	681b      	ldr	r3, [r3, #0]
 80788a6:	4413      	add	r3, r2
 80788a8:	4a04      	ldr	r2, [pc, #16]	; (80788bc <HAL_IncTick+0x24>)
 80788aa:	6013      	str	r3, [r2, #0]
}
 80788ac:	bf00      	nop
 80788ae:	46bd      	mov	sp, r7
 80788b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80788b4:	4770      	bx	lr
 80788b6:	bf00      	nop
 80788b8:	20000008 	.word	0x20000008
 80788bc:	20000618 	.word	0x20000618

080788c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80788c0:	b480      	push	{r7}
 80788c2:	af00      	add	r7, sp, #0
  return uwTick;
 80788c4:	4b03      	ldr	r3, [pc, #12]	; (80788d4 <HAL_GetTick+0x14>)
 80788c6:	681b      	ldr	r3, [r3, #0]
}
 80788c8:	4618      	mov	r0, r3
 80788ca:	46bd      	mov	sp, r7
 80788cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80788d0:	4770      	bx	lr
 80788d2:	bf00      	nop
 80788d4:	20000618 	.word	0x20000618

080788d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80788d8:	b580      	push	{r7, lr}
 80788da:	b084      	sub	sp, #16
 80788dc:	af00      	add	r7, sp, #0
 80788de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80788e0:	f7ff ffee 	bl	80788c0 <HAL_GetTick>
 80788e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80788e6:	687b      	ldr	r3, [r7, #4]
 80788e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80788ea:	68fb      	ldr	r3, [r7, #12]
 80788ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80788f0:	d005      	beq.n	80788fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80788f2:	4b0a      	ldr	r3, [pc, #40]	; (807891c <HAL_Delay+0x44>)
 80788f4:	781b      	ldrb	r3, [r3, #0]
 80788f6:	461a      	mov	r2, r3
 80788f8:	68fb      	ldr	r3, [r7, #12]
 80788fa:	4413      	add	r3, r2
 80788fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80788fe:	bf00      	nop
 8078900:	f7ff ffde 	bl	80788c0 <HAL_GetTick>
 8078904:	4602      	mov	r2, r0
 8078906:	68bb      	ldr	r3, [r7, #8]
 8078908:	1ad3      	subs	r3, r2, r3
 807890a:	68fa      	ldr	r2, [r7, #12]
 807890c:	429a      	cmp	r2, r3
 807890e:	d8f7      	bhi.n	8078900 <HAL_Delay+0x28>
  {
  }
}
 8078910:	bf00      	nop
 8078912:	bf00      	nop
 8078914:	3710      	adds	r7, #16
 8078916:	46bd      	mov	sp, r7
 8078918:	bd80      	pop	{r7, pc}
 807891a:	bf00      	nop
 807891c:	20000008 	.word	0x20000008

08078920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8078920:	b480      	push	{r7}
 8078922:	b085      	sub	sp, #20
 8078924:	af00      	add	r7, sp, #0
 8078926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8078928:	687b      	ldr	r3, [r7, #4]
 807892a:	f003 0307 	and.w	r3, r3, #7
 807892e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8078930:	4b0c      	ldr	r3, [pc, #48]	; (8078964 <__NVIC_SetPriorityGrouping+0x44>)
 8078932:	68db      	ldr	r3, [r3, #12]
 8078934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8078936:	68ba      	ldr	r2, [r7, #8]
 8078938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 807893c:	4013      	ands	r3, r2
 807893e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8078940:	68fb      	ldr	r3, [r7, #12]
 8078942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8078944:	68bb      	ldr	r3, [r7, #8]
 8078946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8078948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 807894c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8078950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8078952:	4a04      	ldr	r2, [pc, #16]	; (8078964 <__NVIC_SetPriorityGrouping+0x44>)
 8078954:	68bb      	ldr	r3, [r7, #8]
 8078956:	60d3      	str	r3, [r2, #12]
}
 8078958:	bf00      	nop
 807895a:	3714      	adds	r7, #20
 807895c:	46bd      	mov	sp, r7
 807895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078962:	4770      	bx	lr
 8078964:	e000ed00 	.word	0xe000ed00

08078968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8078968:	b480      	push	{r7}
 807896a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 807896c:	4b04      	ldr	r3, [pc, #16]	; (8078980 <__NVIC_GetPriorityGrouping+0x18>)
 807896e:	68db      	ldr	r3, [r3, #12]
 8078970:	0a1b      	lsrs	r3, r3, #8
 8078972:	f003 0307 	and.w	r3, r3, #7
}
 8078976:	4618      	mov	r0, r3
 8078978:	46bd      	mov	sp, r7
 807897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807897e:	4770      	bx	lr
 8078980:	e000ed00 	.word	0xe000ed00

08078984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8078984:	b480      	push	{r7}
 8078986:	b083      	sub	sp, #12
 8078988:	af00      	add	r7, sp, #0
 807898a:	4603      	mov	r3, r0
 807898c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 807898e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8078992:	2b00      	cmp	r3, #0
 8078994:	db0b      	blt.n	80789ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8078996:	79fb      	ldrb	r3, [r7, #7]
 8078998:	f003 021f 	and.w	r2, r3, #31
 807899c:	4907      	ldr	r1, [pc, #28]	; (80789bc <__NVIC_EnableIRQ+0x38>)
 807899e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789a2:	095b      	lsrs	r3, r3, #5
 80789a4:	2001      	movs	r0, #1
 80789a6:	fa00 f202 	lsl.w	r2, r0, r2
 80789aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80789ae:	bf00      	nop
 80789b0:	370c      	adds	r7, #12
 80789b2:	46bd      	mov	sp, r7
 80789b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80789b8:	4770      	bx	lr
 80789ba:	bf00      	nop
 80789bc:	e000e100 	.word	0xe000e100

080789c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80789c0:	b480      	push	{r7}
 80789c2:	b083      	sub	sp, #12
 80789c4:	af00      	add	r7, sp, #0
 80789c6:	4603      	mov	r3, r0
 80789c8:	6039      	str	r1, [r7, #0]
 80789ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80789cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789d0:	2b00      	cmp	r3, #0
 80789d2:	db0a      	blt.n	80789ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80789d4:	683b      	ldr	r3, [r7, #0]
 80789d6:	b2da      	uxtb	r2, r3
 80789d8:	490c      	ldr	r1, [pc, #48]	; (8078a0c <__NVIC_SetPriority+0x4c>)
 80789da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789de:	0112      	lsls	r2, r2, #4
 80789e0:	b2d2      	uxtb	r2, r2
 80789e2:	440b      	add	r3, r1
 80789e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80789e8:	e00a      	b.n	8078a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80789ea:	683b      	ldr	r3, [r7, #0]
 80789ec:	b2da      	uxtb	r2, r3
 80789ee:	4908      	ldr	r1, [pc, #32]	; (8078a10 <__NVIC_SetPriority+0x50>)
 80789f0:	79fb      	ldrb	r3, [r7, #7]
 80789f2:	f003 030f 	and.w	r3, r3, #15
 80789f6:	3b04      	subs	r3, #4
 80789f8:	0112      	lsls	r2, r2, #4
 80789fa:	b2d2      	uxtb	r2, r2
 80789fc:	440b      	add	r3, r1
 80789fe:	761a      	strb	r2, [r3, #24]
}
 8078a00:	bf00      	nop
 8078a02:	370c      	adds	r7, #12
 8078a04:	46bd      	mov	sp, r7
 8078a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078a0a:	4770      	bx	lr
 8078a0c:	e000e100 	.word	0xe000e100
 8078a10:	e000ed00 	.word	0xe000ed00

08078a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8078a14:	b480      	push	{r7}
 8078a16:	b089      	sub	sp, #36	; 0x24
 8078a18:	af00      	add	r7, sp, #0
 8078a1a:	60f8      	str	r0, [r7, #12]
 8078a1c:	60b9      	str	r1, [r7, #8]
 8078a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8078a20:	68fb      	ldr	r3, [r7, #12]
 8078a22:	f003 0307 	and.w	r3, r3, #7
 8078a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8078a28:	69fb      	ldr	r3, [r7, #28]
 8078a2a:	f1c3 0307 	rsb	r3, r3, #7
 8078a2e:	2b04      	cmp	r3, #4
 8078a30:	bf28      	it	cs
 8078a32:	2304      	movcs	r3, #4
 8078a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8078a36:	69fb      	ldr	r3, [r7, #28]
 8078a38:	3304      	adds	r3, #4
 8078a3a:	2b06      	cmp	r3, #6
 8078a3c:	d902      	bls.n	8078a44 <NVIC_EncodePriority+0x30>
 8078a3e:	69fb      	ldr	r3, [r7, #28]
 8078a40:	3b03      	subs	r3, #3
 8078a42:	e000      	b.n	8078a46 <NVIC_EncodePriority+0x32>
 8078a44:	2300      	movs	r3, #0
 8078a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8078a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8078a4c:	69bb      	ldr	r3, [r7, #24]
 8078a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8078a52:	43da      	mvns	r2, r3
 8078a54:	68bb      	ldr	r3, [r7, #8]
 8078a56:	401a      	ands	r2, r3
 8078a58:	697b      	ldr	r3, [r7, #20]
 8078a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8078a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8078a60:	697b      	ldr	r3, [r7, #20]
 8078a62:	fa01 f303 	lsl.w	r3, r1, r3
 8078a66:	43d9      	mvns	r1, r3
 8078a68:	687b      	ldr	r3, [r7, #4]
 8078a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8078a6c:	4313      	orrs	r3, r2
         );
}
 8078a6e:	4618      	mov	r0, r3
 8078a70:	3724      	adds	r7, #36	; 0x24
 8078a72:	46bd      	mov	sp, r7
 8078a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078a78:	4770      	bx	lr
	...

08078a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8078a7c:	b580      	push	{r7, lr}
 8078a7e:	b082      	sub	sp, #8
 8078a80:	af00      	add	r7, sp, #0
 8078a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8078a84:	687b      	ldr	r3, [r7, #4]
 8078a86:	3b01      	subs	r3, #1
 8078a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8078a8c:	d301      	bcc.n	8078a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8078a8e:	2301      	movs	r3, #1
 8078a90:	e00f      	b.n	8078ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8078a92:	4a0a      	ldr	r2, [pc, #40]	; (8078abc <SysTick_Config+0x40>)
 8078a94:	687b      	ldr	r3, [r7, #4]
 8078a96:	3b01      	subs	r3, #1
 8078a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8078a9a:	210f      	movs	r1, #15
 8078a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8078aa0:	f7ff ff8e 	bl	80789c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8078aa4:	4b05      	ldr	r3, [pc, #20]	; (8078abc <SysTick_Config+0x40>)
 8078aa6:	2200      	movs	r2, #0
 8078aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8078aaa:	4b04      	ldr	r3, [pc, #16]	; (8078abc <SysTick_Config+0x40>)
 8078aac:	2207      	movs	r2, #7
 8078aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8078ab0:	2300      	movs	r3, #0
}
 8078ab2:	4618      	mov	r0, r3
 8078ab4:	3708      	adds	r7, #8
 8078ab6:	46bd      	mov	sp, r7
 8078ab8:	bd80      	pop	{r7, pc}
 8078aba:	bf00      	nop
 8078abc:	e000e010 	.word	0xe000e010

08078ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8078ac0:	b580      	push	{r7, lr}
 8078ac2:	b082      	sub	sp, #8
 8078ac4:	af00      	add	r7, sp, #0
 8078ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8078ac8:	6878      	ldr	r0, [r7, #4]
 8078aca:	f7ff ff29 	bl	8078920 <__NVIC_SetPriorityGrouping>
}
 8078ace:	bf00      	nop
 8078ad0:	3708      	adds	r7, #8
 8078ad2:	46bd      	mov	sp, r7
 8078ad4:	bd80      	pop	{r7, pc}

08078ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8078ad6:	b580      	push	{r7, lr}
 8078ad8:	b086      	sub	sp, #24
 8078ada:	af00      	add	r7, sp, #0
 8078adc:	4603      	mov	r3, r0
 8078ade:	60b9      	str	r1, [r7, #8]
 8078ae0:	607a      	str	r2, [r7, #4]
 8078ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8078ae4:	2300      	movs	r3, #0
 8078ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8078ae8:	f7ff ff3e 	bl	8078968 <__NVIC_GetPriorityGrouping>
 8078aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8078aee:	687a      	ldr	r2, [r7, #4]
 8078af0:	68b9      	ldr	r1, [r7, #8]
 8078af2:	6978      	ldr	r0, [r7, #20]
 8078af4:	f7ff ff8e 	bl	8078a14 <NVIC_EncodePriority>
 8078af8:	4602      	mov	r2, r0
 8078afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8078afe:	4611      	mov	r1, r2
 8078b00:	4618      	mov	r0, r3
 8078b02:	f7ff ff5d 	bl	80789c0 <__NVIC_SetPriority>
}
 8078b06:	bf00      	nop
 8078b08:	3718      	adds	r7, #24
 8078b0a:	46bd      	mov	sp, r7
 8078b0c:	bd80      	pop	{r7, pc}

08078b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8078b0e:	b580      	push	{r7, lr}
 8078b10:	b082      	sub	sp, #8
 8078b12:	af00      	add	r7, sp, #0
 8078b14:	4603      	mov	r3, r0
 8078b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8078b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8078b1c:	4618      	mov	r0, r3
 8078b1e:	f7ff ff31 	bl	8078984 <__NVIC_EnableIRQ>
}
 8078b22:	bf00      	nop
 8078b24:	3708      	adds	r7, #8
 8078b26:	46bd      	mov	sp, r7
 8078b28:	bd80      	pop	{r7, pc}

08078b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8078b2a:	b580      	push	{r7, lr}
 8078b2c:	b082      	sub	sp, #8
 8078b2e:	af00      	add	r7, sp, #0
 8078b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8078b32:	6878      	ldr	r0, [r7, #4]
 8078b34:	f7ff ffa2 	bl	8078a7c <SysTick_Config>
 8078b38:	4603      	mov	r3, r0
}
 8078b3a:	4618      	mov	r0, r3
 8078b3c:	3708      	adds	r7, #8
 8078b3e:	46bd      	mov	sp, r7
 8078b40:	bd80      	pop	{r7, pc}
	...

08078b44 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8078b44:	b580      	push	{r7, lr}
 8078b46:	b086      	sub	sp, #24
 8078b48:	af00      	add	r7, sp, #0
 8078b4a:	60f8      	str	r0, [r7, #12]
 8078b4c:	60b9      	str	r1, [r7, #8]
 8078b4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8078b52:	2301      	movs	r3, #1
 8078b54:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8078b56:	4b23      	ldr	r3, [pc, #140]	; (8078be4 <HAL_FLASH_Program+0xa0>)
 8078b58:	7e1b      	ldrb	r3, [r3, #24]
 8078b5a:	2b01      	cmp	r3, #1
 8078b5c:	d101      	bne.n	8078b62 <HAL_FLASH_Program+0x1e>
 8078b5e:	2302      	movs	r3, #2
 8078b60:	e03b      	b.n	8078bda <HAL_FLASH_Program+0x96>
 8078b62:	4b20      	ldr	r3, [pc, #128]	; (8078be4 <HAL_FLASH_Program+0xa0>)
 8078b64:	2201      	movs	r2, #1
 8078b66:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078b68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078b6c:	f000 f870 	bl	8078c50 <FLASH_WaitForLastOperation>
 8078b70:	4603      	mov	r3, r0
 8078b72:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8078b74:	7dfb      	ldrb	r3, [r7, #23]
 8078b76:	2b00      	cmp	r3, #0
 8078b78:	d12b      	bne.n	8078bd2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8078b7a:	68fb      	ldr	r3, [r7, #12]
 8078b7c:	2b00      	cmp	r3, #0
 8078b7e:	d105      	bne.n	8078b8c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8078b80:	783b      	ldrb	r3, [r7, #0]
 8078b82:	4619      	mov	r1, r3
 8078b84:	68b8      	ldr	r0, [r7, #8]
 8078b86:	f000 f91b 	bl	8078dc0 <FLASH_Program_Byte>
 8078b8a:	e016      	b.n	8078bba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8078b8c:	68fb      	ldr	r3, [r7, #12]
 8078b8e:	2b01      	cmp	r3, #1
 8078b90:	d105      	bne.n	8078b9e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8078b92:	883b      	ldrh	r3, [r7, #0]
 8078b94:	4619      	mov	r1, r3
 8078b96:	68b8      	ldr	r0, [r7, #8]
 8078b98:	f000 f8ee 	bl	8078d78 <FLASH_Program_HalfWord>
 8078b9c:	e00d      	b.n	8078bba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8078b9e:	68fb      	ldr	r3, [r7, #12]
 8078ba0:	2b02      	cmp	r3, #2
 8078ba2:	d105      	bne.n	8078bb0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8078ba4:	683b      	ldr	r3, [r7, #0]
 8078ba6:	4619      	mov	r1, r3
 8078ba8:	68b8      	ldr	r0, [r7, #8]
 8078baa:	f000 f8c3 	bl	8078d34 <FLASH_Program_Word>
 8078bae:	e004      	b.n	8078bba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8078bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8078bb4:	68b8      	ldr	r0, [r7, #8]
 8078bb6:	f000 f88b 	bl	8078cd0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078bba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078bbe:	f000 f847 	bl	8078c50 <FLASH_WaitForLastOperation>
 8078bc2:	4603      	mov	r3, r0
 8078bc4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8078bc6:	4b08      	ldr	r3, [pc, #32]	; (8078be8 <HAL_FLASH_Program+0xa4>)
 8078bc8:	691b      	ldr	r3, [r3, #16]
 8078bca:	4a07      	ldr	r2, [pc, #28]	; (8078be8 <HAL_FLASH_Program+0xa4>)
 8078bcc:	f023 0301 	bic.w	r3, r3, #1
 8078bd0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8078bd2:	4b04      	ldr	r3, [pc, #16]	; (8078be4 <HAL_FLASH_Program+0xa0>)
 8078bd4:	2200      	movs	r2, #0
 8078bd6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8078bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8078bda:	4618      	mov	r0, r3
 8078bdc:	3718      	adds	r7, #24
 8078bde:	46bd      	mov	sp, r7
 8078be0:	bd80      	pop	{r7, pc}
 8078be2:	bf00      	nop
 8078be4:	2000061c 	.word	0x2000061c
 8078be8:	40023c00 	.word	0x40023c00

08078bec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8078bec:	b480      	push	{r7}
 8078bee:	b083      	sub	sp, #12
 8078bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8078bf2:	2300      	movs	r3, #0
 8078bf4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8078bf6:	4b0b      	ldr	r3, [pc, #44]	; (8078c24 <HAL_FLASH_Unlock+0x38>)
 8078bf8:	691b      	ldr	r3, [r3, #16]
 8078bfa:	2b00      	cmp	r3, #0
 8078bfc:	da0b      	bge.n	8078c16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8078bfe:	4b09      	ldr	r3, [pc, #36]	; (8078c24 <HAL_FLASH_Unlock+0x38>)
 8078c00:	4a09      	ldr	r2, [pc, #36]	; (8078c28 <HAL_FLASH_Unlock+0x3c>)
 8078c02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8078c04:	4b07      	ldr	r3, [pc, #28]	; (8078c24 <HAL_FLASH_Unlock+0x38>)
 8078c06:	4a09      	ldr	r2, [pc, #36]	; (8078c2c <HAL_FLASH_Unlock+0x40>)
 8078c08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8078c0a:	4b06      	ldr	r3, [pc, #24]	; (8078c24 <HAL_FLASH_Unlock+0x38>)
 8078c0c:	691b      	ldr	r3, [r3, #16]
 8078c0e:	2b00      	cmp	r3, #0
 8078c10:	da01      	bge.n	8078c16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8078c12:	2301      	movs	r3, #1
 8078c14:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8078c16:	79fb      	ldrb	r3, [r7, #7]
}
 8078c18:	4618      	mov	r0, r3
 8078c1a:	370c      	adds	r7, #12
 8078c1c:	46bd      	mov	sp, r7
 8078c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078c22:	4770      	bx	lr
 8078c24:	40023c00 	.word	0x40023c00
 8078c28:	45670123 	.word	0x45670123
 8078c2c:	cdef89ab 	.word	0xcdef89ab

08078c30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8078c30:	b480      	push	{r7}
 8078c32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8078c34:	4b05      	ldr	r3, [pc, #20]	; (8078c4c <HAL_FLASH_Lock+0x1c>)
 8078c36:	691b      	ldr	r3, [r3, #16]
 8078c38:	4a04      	ldr	r2, [pc, #16]	; (8078c4c <HAL_FLASH_Lock+0x1c>)
 8078c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8078c3e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8078c40:	2300      	movs	r3, #0
}
 8078c42:	4618      	mov	r0, r3
 8078c44:	46bd      	mov	sp, r7
 8078c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078c4a:	4770      	bx	lr
 8078c4c:	40023c00 	.word	0x40023c00

08078c50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8078c50:	b580      	push	{r7, lr}
 8078c52:	b084      	sub	sp, #16
 8078c54:	af00      	add	r7, sp, #0
 8078c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8078c58:	2300      	movs	r3, #0
 8078c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8078c5c:	4b1a      	ldr	r3, [pc, #104]	; (8078cc8 <FLASH_WaitForLastOperation+0x78>)
 8078c5e:	2200      	movs	r2, #0
 8078c60:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8078c62:	f7ff fe2d 	bl	80788c0 <HAL_GetTick>
 8078c66:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8078c68:	e010      	b.n	8078c8c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8078c6a:	687b      	ldr	r3, [r7, #4]
 8078c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8078c70:	d00c      	beq.n	8078c8c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8078c72:	687b      	ldr	r3, [r7, #4]
 8078c74:	2b00      	cmp	r3, #0
 8078c76:	d007      	beq.n	8078c88 <FLASH_WaitForLastOperation+0x38>
 8078c78:	f7ff fe22 	bl	80788c0 <HAL_GetTick>
 8078c7c:	4602      	mov	r2, r0
 8078c7e:	68fb      	ldr	r3, [r7, #12]
 8078c80:	1ad3      	subs	r3, r2, r3
 8078c82:	687a      	ldr	r2, [r7, #4]
 8078c84:	429a      	cmp	r2, r3
 8078c86:	d201      	bcs.n	8078c8c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8078c88:	2303      	movs	r3, #3
 8078c8a:	e019      	b.n	8078cc0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8078c8c:	4b0f      	ldr	r3, [pc, #60]	; (8078ccc <FLASH_WaitForLastOperation+0x7c>)
 8078c8e:	68db      	ldr	r3, [r3, #12]
 8078c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8078c94:	2b00      	cmp	r3, #0
 8078c96:	d1e8      	bne.n	8078c6a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8078c98:	4b0c      	ldr	r3, [pc, #48]	; (8078ccc <FLASH_WaitForLastOperation+0x7c>)
 8078c9a:	68db      	ldr	r3, [r3, #12]
 8078c9c:	f003 0301 	and.w	r3, r3, #1
 8078ca0:	2b00      	cmp	r3, #0
 8078ca2:	d002      	beq.n	8078caa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8078ca4:	4b09      	ldr	r3, [pc, #36]	; (8078ccc <FLASH_WaitForLastOperation+0x7c>)
 8078ca6:	2201      	movs	r2, #1
 8078ca8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8078caa:	4b08      	ldr	r3, [pc, #32]	; (8078ccc <FLASH_WaitForLastOperation+0x7c>)
 8078cac:	68db      	ldr	r3, [r3, #12]
 8078cae:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8078cb2:	2b00      	cmp	r3, #0
 8078cb4:	d003      	beq.n	8078cbe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8078cb6:	f000 f8a5 	bl	8078e04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8078cba:	2301      	movs	r3, #1
 8078cbc:	e000      	b.n	8078cc0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8078cbe:	2300      	movs	r3, #0
  
}  
 8078cc0:	4618      	mov	r0, r3
 8078cc2:	3710      	adds	r7, #16
 8078cc4:	46bd      	mov	sp, r7
 8078cc6:	bd80      	pop	{r7, pc}
 8078cc8:	2000061c 	.word	0x2000061c
 8078ccc:	40023c00 	.word	0x40023c00

08078cd0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8078cd0:	b480      	push	{r7}
 8078cd2:	b085      	sub	sp, #20
 8078cd4:	af00      	add	r7, sp, #0
 8078cd6:	60f8      	str	r0, [r7, #12]
 8078cd8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078cdc:	4b14      	ldr	r3, [pc, #80]	; (8078d30 <FLASH_Program_DoubleWord+0x60>)
 8078cde:	691b      	ldr	r3, [r3, #16]
 8078ce0:	4a13      	ldr	r2, [pc, #76]	; (8078d30 <FLASH_Program_DoubleWord+0x60>)
 8078ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078ce6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8078ce8:	4b11      	ldr	r3, [pc, #68]	; (8078d30 <FLASH_Program_DoubleWord+0x60>)
 8078cea:	691b      	ldr	r3, [r3, #16]
 8078cec:	4a10      	ldr	r2, [pc, #64]	; (8078d30 <FLASH_Program_DoubleWord+0x60>)
 8078cee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8078cf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078cf4:	4b0e      	ldr	r3, [pc, #56]	; (8078d30 <FLASH_Program_DoubleWord+0x60>)
 8078cf6:	691b      	ldr	r3, [r3, #16]
 8078cf8:	4a0d      	ldr	r2, [pc, #52]	; (8078d30 <FLASH_Program_DoubleWord+0x60>)
 8078cfa:	f043 0301 	orr.w	r3, r3, #1
 8078cfe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8078d00:	68fb      	ldr	r3, [r7, #12]
 8078d02:	683a      	ldr	r2, [r7, #0]
 8078d04:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8078d06:	f3bf 8f6f 	isb	sy
}
 8078d0a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8078d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8078d10:	f04f 0200 	mov.w	r2, #0
 8078d14:	f04f 0300 	mov.w	r3, #0
 8078d18:	000a      	movs	r2, r1
 8078d1a:	2300      	movs	r3, #0
 8078d1c:	68f9      	ldr	r1, [r7, #12]
 8078d1e:	3104      	adds	r1, #4
 8078d20:	4613      	mov	r3, r2
 8078d22:	600b      	str	r3, [r1, #0]
}
 8078d24:	bf00      	nop
 8078d26:	3714      	adds	r7, #20
 8078d28:	46bd      	mov	sp, r7
 8078d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078d2e:	4770      	bx	lr
 8078d30:	40023c00 	.word	0x40023c00

08078d34 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8078d34:	b480      	push	{r7}
 8078d36:	b083      	sub	sp, #12
 8078d38:	af00      	add	r7, sp, #0
 8078d3a:	6078      	str	r0, [r7, #4]
 8078d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078d3e:	4b0d      	ldr	r3, [pc, #52]	; (8078d74 <FLASH_Program_Word+0x40>)
 8078d40:	691b      	ldr	r3, [r3, #16]
 8078d42:	4a0c      	ldr	r2, [pc, #48]	; (8078d74 <FLASH_Program_Word+0x40>)
 8078d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078d48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8078d4a:	4b0a      	ldr	r3, [pc, #40]	; (8078d74 <FLASH_Program_Word+0x40>)
 8078d4c:	691b      	ldr	r3, [r3, #16]
 8078d4e:	4a09      	ldr	r2, [pc, #36]	; (8078d74 <FLASH_Program_Word+0x40>)
 8078d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8078d54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078d56:	4b07      	ldr	r3, [pc, #28]	; (8078d74 <FLASH_Program_Word+0x40>)
 8078d58:	691b      	ldr	r3, [r3, #16]
 8078d5a:	4a06      	ldr	r2, [pc, #24]	; (8078d74 <FLASH_Program_Word+0x40>)
 8078d5c:	f043 0301 	orr.w	r3, r3, #1
 8078d60:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8078d62:	687b      	ldr	r3, [r7, #4]
 8078d64:	683a      	ldr	r2, [r7, #0]
 8078d66:	601a      	str	r2, [r3, #0]
}
 8078d68:	bf00      	nop
 8078d6a:	370c      	adds	r7, #12
 8078d6c:	46bd      	mov	sp, r7
 8078d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078d72:	4770      	bx	lr
 8078d74:	40023c00 	.word	0x40023c00

08078d78 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8078d78:	b480      	push	{r7}
 8078d7a:	b083      	sub	sp, #12
 8078d7c:	af00      	add	r7, sp, #0
 8078d7e:	6078      	str	r0, [r7, #4]
 8078d80:	460b      	mov	r3, r1
 8078d82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078d84:	4b0d      	ldr	r3, [pc, #52]	; (8078dbc <FLASH_Program_HalfWord+0x44>)
 8078d86:	691b      	ldr	r3, [r3, #16]
 8078d88:	4a0c      	ldr	r2, [pc, #48]	; (8078dbc <FLASH_Program_HalfWord+0x44>)
 8078d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8078d90:	4b0a      	ldr	r3, [pc, #40]	; (8078dbc <FLASH_Program_HalfWord+0x44>)
 8078d92:	691b      	ldr	r3, [r3, #16]
 8078d94:	4a09      	ldr	r2, [pc, #36]	; (8078dbc <FLASH_Program_HalfWord+0x44>)
 8078d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8078d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078d9c:	4b07      	ldr	r3, [pc, #28]	; (8078dbc <FLASH_Program_HalfWord+0x44>)
 8078d9e:	691b      	ldr	r3, [r3, #16]
 8078da0:	4a06      	ldr	r2, [pc, #24]	; (8078dbc <FLASH_Program_HalfWord+0x44>)
 8078da2:	f043 0301 	orr.w	r3, r3, #1
 8078da6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8078da8:	687b      	ldr	r3, [r7, #4]
 8078daa:	887a      	ldrh	r2, [r7, #2]
 8078dac:	801a      	strh	r2, [r3, #0]
}
 8078dae:	bf00      	nop
 8078db0:	370c      	adds	r7, #12
 8078db2:	46bd      	mov	sp, r7
 8078db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078db8:	4770      	bx	lr
 8078dba:	bf00      	nop
 8078dbc:	40023c00 	.word	0x40023c00

08078dc0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8078dc0:	b480      	push	{r7}
 8078dc2:	b083      	sub	sp, #12
 8078dc4:	af00      	add	r7, sp, #0
 8078dc6:	6078      	str	r0, [r7, #4]
 8078dc8:	460b      	mov	r3, r1
 8078dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078dcc:	4b0c      	ldr	r3, [pc, #48]	; (8078e00 <FLASH_Program_Byte+0x40>)
 8078dce:	691b      	ldr	r3, [r3, #16]
 8078dd0:	4a0b      	ldr	r2, [pc, #44]	; (8078e00 <FLASH_Program_Byte+0x40>)
 8078dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8078dd8:	4b09      	ldr	r3, [pc, #36]	; (8078e00 <FLASH_Program_Byte+0x40>)
 8078dda:	4a09      	ldr	r2, [pc, #36]	; (8078e00 <FLASH_Program_Byte+0x40>)
 8078ddc:	691b      	ldr	r3, [r3, #16]
 8078dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078de0:	4b07      	ldr	r3, [pc, #28]	; (8078e00 <FLASH_Program_Byte+0x40>)
 8078de2:	691b      	ldr	r3, [r3, #16]
 8078de4:	4a06      	ldr	r2, [pc, #24]	; (8078e00 <FLASH_Program_Byte+0x40>)
 8078de6:	f043 0301 	orr.w	r3, r3, #1
 8078dea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8078dec:	687b      	ldr	r3, [r7, #4]
 8078dee:	78fa      	ldrb	r2, [r7, #3]
 8078df0:	701a      	strb	r2, [r3, #0]
}
 8078df2:	bf00      	nop
 8078df4:	370c      	adds	r7, #12
 8078df6:	46bd      	mov	sp, r7
 8078df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078dfc:	4770      	bx	lr
 8078dfe:	bf00      	nop
 8078e00:	40023c00 	.word	0x40023c00

08078e04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8078e04:	b480      	push	{r7}
 8078e06:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8078e08:	4b2f      	ldr	r3, [pc, #188]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e0a:	68db      	ldr	r3, [r3, #12]
 8078e0c:	f003 0310 	and.w	r3, r3, #16
 8078e10:	2b00      	cmp	r3, #0
 8078e12:	d008      	beq.n	8078e26 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8078e14:	4b2d      	ldr	r3, [pc, #180]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e16:	69db      	ldr	r3, [r3, #28]
 8078e18:	f043 0310 	orr.w	r3, r3, #16
 8078e1c:	4a2b      	ldr	r2, [pc, #172]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e1e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8078e20:	4b29      	ldr	r3, [pc, #164]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e22:	2210      	movs	r2, #16
 8078e24:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8078e26:	4b28      	ldr	r3, [pc, #160]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e28:	68db      	ldr	r3, [r3, #12]
 8078e2a:	f003 0320 	and.w	r3, r3, #32
 8078e2e:	2b00      	cmp	r3, #0
 8078e30:	d008      	beq.n	8078e44 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8078e32:	4b26      	ldr	r3, [pc, #152]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e34:	69db      	ldr	r3, [r3, #28]
 8078e36:	f043 0308 	orr.w	r3, r3, #8
 8078e3a:	4a24      	ldr	r2, [pc, #144]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e3c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8078e3e:	4b22      	ldr	r3, [pc, #136]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e40:	2220      	movs	r2, #32
 8078e42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8078e44:	4b20      	ldr	r3, [pc, #128]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e46:	68db      	ldr	r3, [r3, #12]
 8078e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8078e4c:	2b00      	cmp	r3, #0
 8078e4e:	d008      	beq.n	8078e62 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8078e50:	4b1e      	ldr	r3, [pc, #120]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e52:	69db      	ldr	r3, [r3, #28]
 8078e54:	f043 0304 	orr.w	r3, r3, #4
 8078e58:	4a1c      	ldr	r2, [pc, #112]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e5a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8078e5c:	4b1a      	ldr	r3, [pc, #104]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e5e:	2240      	movs	r2, #64	; 0x40
 8078e60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8078e62:	4b19      	ldr	r3, [pc, #100]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e64:	68db      	ldr	r3, [r3, #12]
 8078e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8078e6a:	2b00      	cmp	r3, #0
 8078e6c:	d008      	beq.n	8078e80 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8078e6e:	4b17      	ldr	r3, [pc, #92]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e70:	69db      	ldr	r3, [r3, #28]
 8078e72:	f043 0302 	orr.w	r3, r3, #2
 8078e76:	4a15      	ldr	r2, [pc, #84]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e78:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8078e7a:	4b13      	ldr	r3, [pc, #76]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e7c:	2280      	movs	r2, #128	; 0x80
 8078e7e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8078e80:	4b11      	ldr	r3, [pc, #68]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e82:	68db      	ldr	r3, [r3, #12]
 8078e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8078e88:	2b00      	cmp	r3, #0
 8078e8a:	d009      	beq.n	8078ea0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8078e8c:	4b0f      	ldr	r3, [pc, #60]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e8e:	69db      	ldr	r3, [r3, #28]
 8078e90:	f043 0301 	orr.w	r3, r3, #1
 8078e94:	4a0d      	ldr	r2, [pc, #52]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078e96:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8078e98:	4b0b      	ldr	r3, [pc, #44]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8078e9e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8078ea0:	4b09      	ldr	r3, [pc, #36]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078ea2:	68db      	ldr	r3, [r3, #12]
 8078ea4:	f003 0302 	and.w	r3, r3, #2
 8078ea8:	2b00      	cmp	r3, #0
 8078eaa:	d008      	beq.n	8078ebe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8078eac:	4b07      	ldr	r3, [pc, #28]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078eae:	69db      	ldr	r3, [r3, #28]
 8078eb0:	f043 0320 	orr.w	r3, r3, #32
 8078eb4:	4a05      	ldr	r2, [pc, #20]	; (8078ecc <FLASH_SetErrorCode+0xc8>)
 8078eb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8078eb8:	4b03      	ldr	r3, [pc, #12]	; (8078ec8 <FLASH_SetErrorCode+0xc4>)
 8078eba:	2202      	movs	r2, #2
 8078ebc:	60da      	str	r2, [r3, #12]
  }
}
 8078ebe:	bf00      	nop
 8078ec0:	46bd      	mov	sp, r7
 8078ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078ec6:	4770      	bx	lr
 8078ec8:	40023c00 	.word	0x40023c00
 8078ecc:	2000061c 	.word	0x2000061c

08078ed0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8078ed0:	b580      	push	{r7, lr}
 8078ed2:	b084      	sub	sp, #16
 8078ed4:	af00      	add	r7, sp, #0
 8078ed6:	6078      	str	r0, [r7, #4]
 8078ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8078eda:	2301      	movs	r3, #1
 8078edc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8078ede:	2300      	movs	r3, #0
 8078ee0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8078ee2:	4b31      	ldr	r3, [pc, #196]	; (8078fa8 <HAL_FLASHEx_Erase+0xd8>)
 8078ee4:	7e1b      	ldrb	r3, [r3, #24]
 8078ee6:	2b01      	cmp	r3, #1
 8078ee8:	d101      	bne.n	8078eee <HAL_FLASHEx_Erase+0x1e>
 8078eea:	2302      	movs	r3, #2
 8078eec:	e058      	b.n	8078fa0 <HAL_FLASHEx_Erase+0xd0>
 8078eee:	4b2e      	ldr	r3, [pc, #184]	; (8078fa8 <HAL_FLASHEx_Erase+0xd8>)
 8078ef0:	2201      	movs	r2, #1
 8078ef2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078ef4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078ef8:	f7ff feaa 	bl	8078c50 <FLASH_WaitForLastOperation>
 8078efc:	4603      	mov	r3, r0
 8078efe:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8078f00:	7bfb      	ldrb	r3, [r7, #15]
 8078f02:	2b00      	cmp	r3, #0
 8078f04:	d148      	bne.n	8078f98 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8078f06:	683b      	ldr	r3, [r7, #0]
 8078f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8078f0c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8078f0e:	687b      	ldr	r3, [r7, #4]
 8078f10:	681b      	ldr	r3, [r3, #0]
 8078f12:	2b01      	cmp	r3, #1
 8078f14:	d115      	bne.n	8078f42 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8078f16:	687b      	ldr	r3, [r7, #4]
 8078f18:	691b      	ldr	r3, [r3, #16]
 8078f1a:	b2da      	uxtb	r2, r3
 8078f1c:	687b      	ldr	r3, [r7, #4]
 8078f1e:	685b      	ldr	r3, [r3, #4]
 8078f20:	4619      	mov	r1, r3
 8078f22:	4610      	mov	r0, r2
 8078f24:	f000 f844 	bl	8078fb0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078f2c:	f7ff fe90 	bl	8078c50 <FLASH_WaitForLastOperation>
 8078f30:	4603      	mov	r3, r0
 8078f32:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8078f34:	4b1d      	ldr	r3, [pc, #116]	; (8078fac <HAL_FLASHEx_Erase+0xdc>)
 8078f36:	691b      	ldr	r3, [r3, #16]
 8078f38:	4a1c      	ldr	r2, [pc, #112]	; (8078fac <HAL_FLASHEx_Erase+0xdc>)
 8078f3a:	f023 0304 	bic.w	r3, r3, #4
 8078f3e:	6113      	str	r3, [r2, #16]
 8078f40:	e028      	b.n	8078f94 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8078f42:	687b      	ldr	r3, [r7, #4]
 8078f44:	689b      	ldr	r3, [r3, #8]
 8078f46:	60bb      	str	r3, [r7, #8]
 8078f48:	e01c      	b.n	8078f84 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8078f4a:	687b      	ldr	r3, [r7, #4]
 8078f4c:	691b      	ldr	r3, [r3, #16]
 8078f4e:	b2db      	uxtb	r3, r3
 8078f50:	4619      	mov	r1, r3
 8078f52:	68b8      	ldr	r0, [r7, #8]
 8078f54:	f000 f850 	bl	8078ff8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078f5c:	f7ff fe78 	bl	8078c50 <FLASH_WaitForLastOperation>
 8078f60:	4603      	mov	r3, r0
 8078f62:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8078f64:	4b11      	ldr	r3, [pc, #68]	; (8078fac <HAL_FLASHEx_Erase+0xdc>)
 8078f66:	691b      	ldr	r3, [r3, #16]
 8078f68:	4a10      	ldr	r2, [pc, #64]	; (8078fac <HAL_FLASHEx_Erase+0xdc>)
 8078f6a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8078f6e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8078f70:	7bfb      	ldrb	r3, [r7, #15]
 8078f72:	2b00      	cmp	r3, #0
 8078f74:	d003      	beq.n	8078f7e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8078f76:	683b      	ldr	r3, [r7, #0]
 8078f78:	68ba      	ldr	r2, [r7, #8]
 8078f7a:	601a      	str	r2, [r3, #0]
          break;
 8078f7c:	e00a      	b.n	8078f94 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8078f7e:	68bb      	ldr	r3, [r7, #8]
 8078f80:	3301      	adds	r3, #1
 8078f82:	60bb      	str	r3, [r7, #8]
 8078f84:	687b      	ldr	r3, [r7, #4]
 8078f86:	68da      	ldr	r2, [r3, #12]
 8078f88:	687b      	ldr	r3, [r7, #4]
 8078f8a:	689b      	ldr	r3, [r3, #8]
 8078f8c:	4413      	add	r3, r2
 8078f8e:	68ba      	ldr	r2, [r7, #8]
 8078f90:	429a      	cmp	r2, r3
 8078f92:	d3da      	bcc.n	8078f4a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8078f94:	f000 f878 	bl	8079088 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8078f98:	4b03      	ldr	r3, [pc, #12]	; (8078fa8 <HAL_FLASHEx_Erase+0xd8>)
 8078f9a:	2200      	movs	r2, #0
 8078f9c:	761a      	strb	r2, [r3, #24]

  return status;
 8078f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8078fa0:	4618      	mov	r0, r3
 8078fa2:	3710      	adds	r7, #16
 8078fa4:	46bd      	mov	sp, r7
 8078fa6:	bd80      	pop	{r7, pc}
 8078fa8:	2000061c 	.word	0x2000061c
 8078fac:	40023c00 	.word	0x40023c00

08078fb0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8078fb0:	b480      	push	{r7}
 8078fb2:	b083      	sub	sp, #12
 8078fb4:	af00      	add	r7, sp, #0
 8078fb6:	4603      	mov	r3, r0
 8078fb8:	6039      	str	r1, [r7, #0]
 8078fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078fbc:	4b0d      	ldr	r3, [pc, #52]	; (8078ff4 <FLASH_MassErase+0x44>)
 8078fbe:	691b      	ldr	r3, [r3, #16]
 8078fc0:	4a0c      	ldr	r2, [pc, #48]	; (8078ff4 <FLASH_MassErase+0x44>)
 8078fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078fc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8078fc8:	4b0a      	ldr	r3, [pc, #40]	; (8078ff4 <FLASH_MassErase+0x44>)
 8078fca:	691b      	ldr	r3, [r3, #16]
 8078fcc:	4a09      	ldr	r2, [pc, #36]	; (8078ff4 <FLASH_MassErase+0x44>)
 8078fce:	f043 0304 	orr.w	r3, r3, #4
 8078fd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8078fd4:	4b07      	ldr	r3, [pc, #28]	; (8078ff4 <FLASH_MassErase+0x44>)
 8078fd6:	691a      	ldr	r2, [r3, #16]
 8078fd8:	79fb      	ldrb	r3, [r7, #7]
 8078fda:	021b      	lsls	r3, r3, #8
 8078fdc:	4313      	orrs	r3, r2
 8078fde:	4a05      	ldr	r2, [pc, #20]	; (8078ff4 <FLASH_MassErase+0x44>)
 8078fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8078fe4:	6113      	str	r3, [r2, #16]
}
 8078fe6:	bf00      	nop
 8078fe8:	370c      	adds	r7, #12
 8078fea:	46bd      	mov	sp, r7
 8078fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078ff0:	4770      	bx	lr
 8078ff2:	bf00      	nop
 8078ff4:	40023c00 	.word	0x40023c00

08078ff8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8078ff8:	b480      	push	{r7}
 8078ffa:	b085      	sub	sp, #20
 8078ffc:	af00      	add	r7, sp, #0
 8078ffe:	6078      	str	r0, [r7, #4]
 8079000:	460b      	mov	r3, r1
 8079002:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8079004:	2300      	movs	r3, #0
 8079006:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8079008:	78fb      	ldrb	r3, [r7, #3]
 807900a:	2b00      	cmp	r3, #0
 807900c:	d102      	bne.n	8079014 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 807900e:	2300      	movs	r3, #0
 8079010:	60fb      	str	r3, [r7, #12]
 8079012:	e010      	b.n	8079036 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8079014:	78fb      	ldrb	r3, [r7, #3]
 8079016:	2b01      	cmp	r3, #1
 8079018:	d103      	bne.n	8079022 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 807901a:	f44f 7380 	mov.w	r3, #256	; 0x100
 807901e:	60fb      	str	r3, [r7, #12]
 8079020:	e009      	b.n	8079036 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8079022:	78fb      	ldrb	r3, [r7, #3]
 8079024:	2b02      	cmp	r3, #2
 8079026:	d103      	bne.n	8079030 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8079028:	f44f 7300 	mov.w	r3, #512	; 0x200
 807902c:	60fb      	str	r3, [r7, #12]
 807902e:	e002      	b.n	8079036 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8079030:	f44f 7340 	mov.w	r3, #768	; 0x300
 8079034:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8079036:	4b13      	ldr	r3, [pc, #76]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 8079038:	691b      	ldr	r3, [r3, #16]
 807903a:	4a12      	ldr	r2, [pc, #72]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 807903c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8079040:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8079042:	4b10      	ldr	r3, [pc, #64]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 8079044:	691a      	ldr	r2, [r3, #16]
 8079046:	490f      	ldr	r1, [pc, #60]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 8079048:	68fb      	ldr	r3, [r7, #12]
 807904a:	4313      	orrs	r3, r2
 807904c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 807904e:	4b0d      	ldr	r3, [pc, #52]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 8079050:	691b      	ldr	r3, [r3, #16]
 8079052:	4a0c      	ldr	r2, [pc, #48]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 8079054:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8079058:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 807905a:	4b0a      	ldr	r3, [pc, #40]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 807905c:	691a      	ldr	r2, [r3, #16]
 807905e:	687b      	ldr	r3, [r7, #4]
 8079060:	00db      	lsls	r3, r3, #3
 8079062:	4313      	orrs	r3, r2
 8079064:	4a07      	ldr	r2, [pc, #28]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 8079066:	f043 0302 	orr.w	r3, r3, #2
 807906a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 807906c:	4b05      	ldr	r3, [pc, #20]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 807906e:	691b      	ldr	r3, [r3, #16]
 8079070:	4a04      	ldr	r2, [pc, #16]	; (8079084 <FLASH_Erase_Sector+0x8c>)
 8079072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8079076:	6113      	str	r3, [r2, #16]
}
 8079078:	bf00      	nop
 807907a:	3714      	adds	r7, #20
 807907c:	46bd      	mov	sp, r7
 807907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8079082:	4770      	bx	lr
 8079084:	40023c00 	.word	0x40023c00

08079088 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8079088:	b480      	push	{r7}
 807908a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 807908c:	4b20      	ldr	r3, [pc, #128]	; (8079110 <FLASH_FlushCaches+0x88>)
 807908e:	681b      	ldr	r3, [r3, #0]
 8079090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8079094:	2b00      	cmp	r3, #0
 8079096:	d017      	beq.n	80790c8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8079098:	4b1d      	ldr	r3, [pc, #116]	; (8079110 <FLASH_FlushCaches+0x88>)
 807909a:	681b      	ldr	r3, [r3, #0]
 807909c:	4a1c      	ldr	r2, [pc, #112]	; (8079110 <FLASH_FlushCaches+0x88>)
 807909e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80790a2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80790a4:	4b1a      	ldr	r3, [pc, #104]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790a6:	681b      	ldr	r3, [r3, #0]
 80790a8:	4a19      	ldr	r2, [pc, #100]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80790ae:	6013      	str	r3, [r2, #0]
 80790b0:	4b17      	ldr	r3, [pc, #92]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790b2:	681b      	ldr	r3, [r3, #0]
 80790b4:	4a16      	ldr	r2, [pc, #88]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80790ba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80790bc:	4b14      	ldr	r3, [pc, #80]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790be:	681b      	ldr	r3, [r3, #0]
 80790c0:	4a13      	ldr	r2, [pc, #76]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80790c6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80790c8:	4b11      	ldr	r3, [pc, #68]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790ca:	681b      	ldr	r3, [r3, #0]
 80790cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80790d0:	2b00      	cmp	r3, #0
 80790d2:	d017      	beq.n	8079104 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80790d4:	4b0e      	ldr	r3, [pc, #56]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790d6:	681b      	ldr	r3, [r3, #0]
 80790d8:	4a0d      	ldr	r2, [pc, #52]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80790de:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80790e0:	4b0b      	ldr	r3, [pc, #44]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790e2:	681b      	ldr	r3, [r3, #0]
 80790e4:	4a0a      	ldr	r2, [pc, #40]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80790ea:	6013      	str	r3, [r2, #0]
 80790ec:	4b08      	ldr	r3, [pc, #32]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790ee:	681b      	ldr	r3, [r3, #0]
 80790f0:	4a07      	ldr	r2, [pc, #28]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80790f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80790f8:	4b05      	ldr	r3, [pc, #20]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790fa:	681b      	ldr	r3, [r3, #0]
 80790fc:	4a04      	ldr	r2, [pc, #16]	; (8079110 <FLASH_FlushCaches+0x88>)
 80790fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8079102:	6013      	str	r3, [r2, #0]
  }
}
 8079104:	bf00      	nop
 8079106:	46bd      	mov	sp, r7
 8079108:	f85d 7b04 	ldr.w	r7, [sp], #4
 807910c:	4770      	bx	lr
 807910e:	bf00      	nop
 8079110:	40023c00 	.word	0x40023c00

08079114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8079114:	b480      	push	{r7}
 8079116:	b089      	sub	sp, #36	; 0x24
 8079118:	af00      	add	r7, sp, #0
 807911a:	6078      	str	r0, [r7, #4]
 807911c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 807911e:	2300      	movs	r3, #0
 8079120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8079122:	2300      	movs	r3, #0
 8079124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8079126:	2300      	movs	r3, #0
 8079128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 807912a:	2300      	movs	r3, #0
 807912c:	61fb      	str	r3, [r7, #28]
 807912e:	e159      	b.n	80793e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8079130:	2201      	movs	r2, #1
 8079132:	69fb      	ldr	r3, [r7, #28]
 8079134:	fa02 f303 	lsl.w	r3, r2, r3
 8079138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 807913a:	683b      	ldr	r3, [r7, #0]
 807913c:	681b      	ldr	r3, [r3, #0]
 807913e:	697a      	ldr	r2, [r7, #20]
 8079140:	4013      	ands	r3, r2
 8079142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8079144:	693a      	ldr	r2, [r7, #16]
 8079146:	697b      	ldr	r3, [r7, #20]
 8079148:	429a      	cmp	r2, r3
 807914a:	f040 8148 	bne.w	80793de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 807914e:	683b      	ldr	r3, [r7, #0]
 8079150:	685b      	ldr	r3, [r3, #4]
 8079152:	f003 0303 	and.w	r3, r3, #3
 8079156:	2b01      	cmp	r3, #1
 8079158:	d005      	beq.n	8079166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 807915a:	683b      	ldr	r3, [r7, #0]
 807915c:	685b      	ldr	r3, [r3, #4]
 807915e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8079162:	2b02      	cmp	r3, #2
 8079164:	d130      	bne.n	80791c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8079166:	687b      	ldr	r3, [r7, #4]
 8079168:	689b      	ldr	r3, [r3, #8]
 807916a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 807916c:	69fb      	ldr	r3, [r7, #28]
 807916e:	005b      	lsls	r3, r3, #1
 8079170:	2203      	movs	r2, #3
 8079172:	fa02 f303 	lsl.w	r3, r2, r3
 8079176:	43db      	mvns	r3, r3
 8079178:	69ba      	ldr	r2, [r7, #24]
 807917a:	4013      	ands	r3, r2
 807917c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 807917e:	683b      	ldr	r3, [r7, #0]
 8079180:	68da      	ldr	r2, [r3, #12]
 8079182:	69fb      	ldr	r3, [r7, #28]
 8079184:	005b      	lsls	r3, r3, #1
 8079186:	fa02 f303 	lsl.w	r3, r2, r3
 807918a:	69ba      	ldr	r2, [r7, #24]
 807918c:	4313      	orrs	r3, r2
 807918e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8079190:	687b      	ldr	r3, [r7, #4]
 8079192:	69ba      	ldr	r2, [r7, #24]
 8079194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8079196:	687b      	ldr	r3, [r7, #4]
 8079198:	685b      	ldr	r3, [r3, #4]
 807919a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 807919c:	2201      	movs	r2, #1
 807919e:	69fb      	ldr	r3, [r7, #28]
 80791a0:	fa02 f303 	lsl.w	r3, r2, r3
 80791a4:	43db      	mvns	r3, r3
 80791a6:	69ba      	ldr	r2, [r7, #24]
 80791a8:	4013      	ands	r3, r2
 80791aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80791ac:	683b      	ldr	r3, [r7, #0]
 80791ae:	685b      	ldr	r3, [r3, #4]
 80791b0:	091b      	lsrs	r3, r3, #4
 80791b2:	f003 0201 	and.w	r2, r3, #1
 80791b6:	69fb      	ldr	r3, [r7, #28]
 80791b8:	fa02 f303 	lsl.w	r3, r2, r3
 80791bc:	69ba      	ldr	r2, [r7, #24]
 80791be:	4313      	orrs	r3, r2
 80791c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80791c2:	687b      	ldr	r3, [r7, #4]
 80791c4:	69ba      	ldr	r2, [r7, #24]
 80791c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80791c8:	683b      	ldr	r3, [r7, #0]
 80791ca:	685b      	ldr	r3, [r3, #4]
 80791cc:	f003 0303 	and.w	r3, r3, #3
 80791d0:	2b03      	cmp	r3, #3
 80791d2:	d017      	beq.n	8079204 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80791d4:	687b      	ldr	r3, [r7, #4]
 80791d6:	68db      	ldr	r3, [r3, #12]
 80791d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80791da:	69fb      	ldr	r3, [r7, #28]
 80791dc:	005b      	lsls	r3, r3, #1
 80791de:	2203      	movs	r2, #3
 80791e0:	fa02 f303 	lsl.w	r3, r2, r3
 80791e4:	43db      	mvns	r3, r3
 80791e6:	69ba      	ldr	r2, [r7, #24]
 80791e8:	4013      	ands	r3, r2
 80791ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80791ec:	683b      	ldr	r3, [r7, #0]
 80791ee:	689a      	ldr	r2, [r3, #8]
 80791f0:	69fb      	ldr	r3, [r7, #28]
 80791f2:	005b      	lsls	r3, r3, #1
 80791f4:	fa02 f303 	lsl.w	r3, r2, r3
 80791f8:	69ba      	ldr	r2, [r7, #24]
 80791fa:	4313      	orrs	r3, r2
 80791fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80791fe:	687b      	ldr	r3, [r7, #4]
 8079200:	69ba      	ldr	r2, [r7, #24]
 8079202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8079204:	683b      	ldr	r3, [r7, #0]
 8079206:	685b      	ldr	r3, [r3, #4]
 8079208:	f003 0303 	and.w	r3, r3, #3
 807920c:	2b02      	cmp	r3, #2
 807920e:	d123      	bne.n	8079258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8079210:	69fb      	ldr	r3, [r7, #28]
 8079212:	08da      	lsrs	r2, r3, #3
 8079214:	687b      	ldr	r3, [r7, #4]
 8079216:	3208      	adds	r2, #8
 8079218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 807921c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 807921e:	69fb      	ldr	r3, [r7, #28]
 8079220:	f003 0307 	and.w	r3, r3, #7
 8079224:	009b      	lsls	r3, r3, #2
 8079226:	220f      	movs	r2, #15
 8079228:	fa02 f303 	lsl.w	r3, r2, r3
 807922c:	43db      	mvns	r3, r3
 807922e:	69ba      	ldr	r2, [r7, #24]
 8079230:	4013      	ands	r3, r2
 8079232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8079234:	683b      	ldr	r3, [r7, #0]
 8079236:	691a      	ldr	r2, [r3, #16]
 8079238:	69fb      	ldr	r3, [r7, #28]
 807923a:	f003 0307 	and.w	r3, r3, #7
 807923e:	009b      	lsls	r3, r3, #2
 8079240:	fa02 f303 	lsl.w	r3, r2, r3
 8079244:	69ba      	ldr	r2, [r7, #24]
 8079246:	4313      	orrs	r3, r2
 8079248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 807924a:	69fb      	ldr	r3, [r7, #28]
 807924c:	08da      	lsrs	r2, r3, #3
 807924e:	687b      	ldr	r3, [r7, #4]
 8079250:	3208      	adds	r2, #8
 8079252:	69b9      	ldr	r1, [r7, #24]
 8079254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8079258:	687b      	ldr	r3, [r7, #4]
 807925a:	681b      	ldr	r3, [r3, #0]
 807925c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 807925e:	69fb      	ldr	r3, [r7, #28]
 8079260:	005b      	lsls	r3, r3, #1
 8079262:	2203      	movs	r2, #3
 8079264:	fa02 f303 	lsl.w	r3, r2, r3
 8079268:	43db      	mvns	r3, r3
 807926a:	69ba      	ldr	r2, [r7, #24]
 807926c:	4013      	ands	r3, r2
 807926e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8079270:	683b      	ldr	r3, [r7, #0]
 8079272:	685b      	ldr	r3, [r3, #4]
 8079274:	f003 0203 	and.w	r2, r3, #3
 8079278:	69fb      	ldr	r3, [r7, #28]
 807927a:	005b      	lsls	r3, r3, #1
 807927c:	fa02 f303 	lsl.w	r3, r2, r3
 8079280:	69ba      	ldr	r2, [r7, #24]
 8079282:	4313      	orrs	r3, r2
 8079284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8079286:	687b      	ldr	r3, [r7, #4]
 8079288:	69ba      	ldr	r2, [r7, #24]
 807928a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 807928c:	683b      	ldr	r3, [r7, #0]
 807928e:	685b      	ldr	r3, [r3, #4]
 8079290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8079294:	2b00      	cmp	r3, #0
 8079296:	f000 80a2 	beq.w	80793de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 807929a:	2300      	movs	r3, #0
 807929c:	60fb      	str	r3, [r7, #12]
 807929e:	4b57      	ldr	r3, [pc, #348]	; (80793fc <HAL_GPIO_Init+0x2e8>)
 80792a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80792a2:	4a56      	ldr	r2, [pc, #344]	; (80793fc <HAL_GPIO_Init+0x2e8>)
 80792a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80792a8:	6453      	str	r3, [r2, #68]	; 0x44
 80792aa:	4b54      	ldr	r3, [pc, #336]	; (80793fc <HAL_GPIO_Init+0x2e8>)
 80792ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80792ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80792b2:	60fb      	str	r3, [r7, #12]
 80792b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80792b6:	4a52      	ldr	r2, [pc, #328]	; (8079400 <HAL_GPIO_Init+0x2ec>)
 80792b8:	69fb      	ldr	r3, [r7, #28]
 80792ba:	089b      	lsrs	r3, r3, #2
 80792bc:	3302      	adds	r3, #2
 80792be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80792c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80792c4:	69fb      	ldr	r3, [r7, #28]
 80792c6:	f003 0303 	and.w	r3, r3, #3
 80792ca:	009b      	lsls	r3, r3, #2
 80792cc:	220f      	movs	r2, #15
 80792ce:	fa02 f303 	lsl.w	r3, r2, r3
 80792d2:	43db      	mvns	r3, r3
 80792d4:	69ba      	ldr	r2, [r7, #24]
 80792d6:	4013      	ands	r3, r2
 80792d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80792da:	687b      	ldr	r3, [r7, #4]
 80792dc:	4a49      	ldr	r2, [pc, #292]	; (8079404 <HAL_GPIO_Init+0x2f0>)
 80792de:	4293      	cmp	r3, r2
 80792e0:	d019      	beq.n	8079316 <HAL_GPIO_Init+0x202>
 80792e2:	687b      	ldr	r3, [r7, #4]
 80792e4:	4a48      	ldr	r2, [pc, #288]	; (8079408 <HAL_GPIO_Init+0x2f4>)
 80792e6:	4293      	cmp	r3, r2
 80792e8:	d013      	beq.n	8079312 <HAL_GPIO_Init+0x1fe>
 80792ea:	687b      	ldr	r3, [r7, #4]
 80792ec:	4a47      	ldr	r2, [pc, #284]	; (807940c <HAL_GPIO_Init+0x2f8>)
 80792ee:	4293      	cmp	r3, r2
 80792f0:	d00d      	beq.n	807930e <HAL_GPIO_Init+0x1fa>
 80792f2:	687b      	ldr	r3, [r7, #4]
 80792f4:	4a46      	ldr	r2, [pc, #280]	; (8079410 <HAL_GPIO_Init+0x2fc>)
 80792f6:	4293      	cmp	r3, r2
 80792f8:	d007      	beq.n	807930a <HAL_GPIO_Init+0x1f6>
 80792fa:	687b      	ldr	r3, [r7, #4]
 80792fc:	4a45      	ldr	r2, [pc, #276]	; (8079414 <HAL_GPIO_Init+0x300>)
 80792fe:	4293      	cmp	r3, r2
 8079300:	d101      	bne.n	8079306 <HAL_GPIO_Init+0x1f2>
 8079302:	2304      	movs	r3, #4
 8079304:	e008      	b.n	8079318 <HAL_GPIO_Init+0x204>
 8079306:	2307      	movs	r3, #7
 8079308:	e006      	b.n	8079318 <HAL_GPIO_Init+0x204>
 807930a:	2303      	movs	r3, #3
 807930c:	e004      	b.n	8079318 <HAL_GPIO_Init+0x204>
 807930e:	2302      	movs	r3, #2
 8079310:	e002      	b.n	8079318 <HAL_GPIO_Init+0x204>
 8079312:	2301      	movs	r3, #1
 8079314:	e000      	b.n	8079318 <HAL_GPIO_Init+0x204>
 8079316:	2300      	movs	r3, #0
 8079318:	69fa      	ldr	r2, [r7, #28]
 807931a:	f002 0203 	and.w	r2, r2, #3
 807931e:	0092      	lsls	r2, r2, #2
 8079320:	4093      	lsls	r3, r2
 8079322:	69ba      	ldr	r2, [r7, #24]
 8079324:	4313      	orrs	r3, r2
 8079326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8079328:	4935      	ldr	r1, [pc, #212]	; (8079400 <HAL_GPIO_Init+0x2ec>)
 807932a:	69fb      	ldr	r3, [r7, #28]
 807932c:	089b      	lsrs	r3, r3, #2
 807932e:	3302      	adds	r3, #2
 8079330:	69ba      	ldr	r2, [r7, #24]
 8079332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8079336:	4b38      	ldr	r3, [pc, #224]	; (8079418 <HAL_GPIO_Init+0x304>)
 8079338:	681b      	ldr	r3, [r3, #0]
 807933a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 807933c:	693b      	ldr	r3, [r7, #16]
 807933e:	43db      	mvns	r3, r3
 8079340:	69ba      	ldr	r2, [r7, #24]
 8079342:	4013      	ands	r3, r2
 8079344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8079346:	683b      	ldr	r3, [r7, #0]
 8079348:	685b      	ldr	r3, [r3, #4]
 807934a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 807934e:	2b00      	cmp	r3, #0
 8079350:	d003      	beq.n	807935a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8079352:	69ba      	ldr	r2, [r7, #24]
 8079354:	693b      	ldr	r3, [r7, #16]
 8079356:	4313      	orrs	r3, r2
 8079358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 807935a:	4a2f      	ldr	r2, [pc, #188]	; (8079418 <HAL_GPIO_Init+0x304>)
 807935c:	69bb      	ldr	r3, [r7, #24]
 807935e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8079360:	4b2d      	ldr	r3, [pc, #180]	; (8079418 <HAL_GPIO_Init+0x304>)
 8079362:	685b      	ldr	r3, [r3, #4]
 8079364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8079366:	693b      	ldr	r3, [r7, #16]
 8079368:	43db      	mvns	r3, r3
 807936a:	69ba      	ldr	r2, [r7, #24]
 807936c:	4013      	ands	r3, r2
 807936e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8079370:	683b      	ldr	r3, [r7, #0]
 8079372:	685b      	ldr	r3, [r3, #4]
 8079374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8079378:	2b00      	cmp	r3, #0
 807937a:	d003      	beq.n	8079384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 807937c:	69ba      	ldr	r2, [r7, #24]
 807937e:	693b      	ldr	r3, [r7, #16]
 8079380:	4313      	orrs	r3, r2
 8079382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8079384:	4a24      	ldr	r2, [pc, #144]	; (8079418 <HAL_GPIO_Init+0x304>)
 8079386:	69bb      	ldr	r3, [r7, #24]
 8079388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 807938a:	4b23      	ldr	r3, [pc, #140]	; (8079418 <HAL_GPIO_Init+0x304>)
 807938c:	689b      	ldr	r3, [r3, #8]
 807938e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8079390:	693b      	ldr	r3, [r7, #16]
 8079392:	43db      	mvns	r3, r3
 8079394:	69ba      	ldr	r2, [r7, #24]
 8079396:	4013      	ands	r3, r2
 8079398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 807939a:	683b      	ldr	r3, [r7, #0]
 807939c:	685b      	ldr	r3, [r3, #4]
 807939e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80793a2:	2b00      	cmp	r3, #0
 80793a4:	d003      	beq.n	80793ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80793a6:	69ba      	ldr	r2, [r7, #24]
 80793a8:	693b      	ldr	r3, [r7, #16]
 80793aa:	4313      	orrs	r3, r2
 80793ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80793ae:	4a1a      	ldr	r2, [pc, #104]	; (8079418 <HAL_GPIO_Init+0x304>)
 80793b0:	69bb      	ldr	r3, [r7, #24]
 80793b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80793b4:	4b18      	ldr	r3, [pc, #96]	; (8079418 <HAL_GPIO_Init+0x304>)
 80793b6:	68db      	ldr	r3, [r3, #12]
 80793b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80793ba:	693b      	ldr	r3, [r7, #16]
 80793bc:	43db      	mvns	r3, r3
 80793be:	69ba      	ldr	r2, [r7, #24]
 80793c0:	4013      	ands	r3, r2
 80793c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80793c4:	683b      	ldr	r3, [r7, #0]
 80793c6:	685b      	ldr	r3, [r3, #4]
 80793c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80793cc:	2b00      	cmp	r3, #0
 80793ce:	d003      	beq.n	80793d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80793d0:	69ba      	ldr	r2, [r7, #24]
 80793d2:	693b      	ldr	r3, [r7, #16]
 80793d4:	4313      	orrs	r3, r2
 80793d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80793d8:	4a0f      	ldr	r2, [pc, #60]	; (8079418 <HAL_GPIO_Init+0x304>)
 80793da:	69bb      	ldr	r3, [r7, #24]
 80793dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80793de:	69fb      	ldr	r3, [r7, #28]
 80793e0:	3301      	adds	r3, #1
 80793e2:	61fb      	str	r3, [r7, #28]
 80793e4:	69fb      	ldr	r3, [r7, #28]
 80793e6:	2b0f      	cmp	r3, #15
 80793e8:	f67f aea2 	bls.w	8079130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80793ec:	bf00      	nop
 80793ee:	bf00      	nop
 80793f0:	3724      	adds	r7, #36	; 0x24
 80793f2:	46bd      	mov	sp, r7
 80793f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80793f8:	4770      	bx	lr
 80793fa:	bf00      	nop
 80793fc:	40023800 	.word	0x40023800
 8079400:	40013800 	.word	0x40013800
 8079404:	40020000 	.word	0x40020000
 8079408:	40020400 	.word	0x40020400
 807940c:	40020800 	.word	0x40020800
 8079410:	40020c00 	.word	0x40020c00
 8079414:	40021000 	.word	0x40021000
 8079418:	40013c00 	.word	0x40013c00

0807941c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 807941c:	b480      	push	{r7}
 807941e:	b083      	sub	sp, #12
 8079420:	af00      	add	r7, sp, #0
 8079422:	6078      	str	r0, [r7, #4]
 8079424:	460b      	mov	r3, r1
 8079426:	807b      	strh	r3, [r7, #2]
 8079428:	4613      	mov	r3, r2
 807942a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 807942c:	787b      	ldrb	r3, [r7, #1]
 807942e:	2b00      	cmp	r3, #0
 8079430:	d003      	beq.n	807943a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8079432:	887a      	ldrh	r2, [r7, #2]
 8079434:	687b      	ldr	r3, [r7, #4]
 8079436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8079438:	e003      	b.n	8079442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 807943a:	887b      	ldrh	r3, [r7, #2]
 807943c:	041a      	lsls	r2, r3, #16
 807943e:	687b      	ldr	r3, [r7, #4]
 8079440:	619a      	str	r2, [r3, #24]
}
 8079442:	bf00      	nop
 8079444:	370c      	adds	r7, #12
 8079446:	46bd      	mov	sp, r7
 8079448:	f85d 7b04 	ldr.w	r7, [sp], #4
 807944c:	4770      	bx	lr

0807944e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 807944e:	b480      	push	{r7}
 8079450:	b085      	sub	sp, #20
 8079452:	af00      	add	r7, sp, #0
 8079454:	6078      	str	r0, [r7, #4]
 8079456:	460b      	mov	r3, r1
 8079458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 807945a:	687b      	ldr	r3, [r7, #4]
 807945c:	695b      	ldr	r3, [r3, #20]
 807945e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8079460:	887a      	ldrh	r2, [r7, #2]
 8079462:	68fb      	ldr	r3, [r7, #12]
 8079464:	4013      	ands	r3, r2
 8079466:	041a      	lsls	r2, r3, #16
 8079468:	68fb      	ldr	r3, [r7, #12]
 807946a:	43d9      	mvns	r1, r3
 807946c:	887b      	ldrh	r3, [r7, #2]
 807946e:	400b      	ands	r3, r1
 8079470:	431a      	orrs	r2, r3
 8079472:	687b      	ldr	r3, [r7, #4]
 8079474:	619a      	str	r2, [r3, #24]
}
 8079476:	bf00      	nop
 8079478:	3714      	adds	r7, #20
 807947a:	46bd      	mov	sp, r7
 807947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8079480:	4770      	bx	lr

08079482 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8079482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8079484:	b08f      	sub	sp, #60	; 0x3c
 8079486:	af0a      	add	r7, sp, #40	; 0x28
 8079488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 807948a:	687b      	ldr	r3, [r7, #4]
 807948c:	2b00      	cmp	r3, #0
 807948e:	d101      	bne.n	8079494 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8079490:	2301      	movs	r3, #1
 8079492:	e10f      	b.n	80796b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8079494:	687b      	ldr	r3, [r7, #4]
 8079496:	681b      	ldr	r3, [r3, #0]
 8079498:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 807949a:	687b      	ldr	r3, [r7, #4]
 807949c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80794a0:	b2db      	uxtb	r3, r3
 80794a2:	2b00      	cmp	r3, #0
 80794a4:	d106      	bne.n	80794b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80794a6:	687b      	ldr	r3, [r7, #4]
 80794a8:	2200      	movs	r2, #0
 80794aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80794ae:	6878      	ldr	r0, [r7, #4]
 80794b0:	f005 fa3c 	bl	807e92c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80794b4:	687b      	ldr	r3, [r7, #4]
 80794b6:	2203      	movs	r2, #3
 80794b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80794bc:	68bb      	ldr	r3, [r7, #8]
 80794be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80794c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80794c4:	2b00      	cmp	r3, #0
 80794c6:	d102      	bne.n	80794ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80794c8:	687b      	ldr	r3, [r7, #4]
 80794ca:	2200      	movs	r2, #0
 80794cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80794ce:	687b      	ldr	r3, [r7, #4]
 80794d0:	681b      	ldr	r3, [r3, #0]
 80794d2:	4618      	mov	r0, r3
 80794d4:	f001 fe8b 	bl	807b1ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80794d8:	687b      	ldr	r3, [r7, #4]
 80794da:	681b      	ldr	r3, [r3, #0]
 80794dc:	603b      	str	r3, [r7, #0]
 80794de:	687e      	ldr	r6, [r7, #4]
 80794e0:	466d      	mov	r5, sp
 80794e2:	f106 0410 	add.w	r4, r6, #16
 80794e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80794e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80794ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80794ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80794ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80794f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80794f6:	1d33      	adds	r3, r6, #4
 80794f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80794fa:	6838      	ldr	r0, [r7, #0]
 80794fc:	f001 fd63 	bl	807afc6 <USB_CoreInit>
 8079500:	4603      	mov	r3, r0
 8079502:	2b00      	cmp	r3, #0
 8079504:	d005      	beq.n	8079512 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8079506:	687b      	ldr	r3, [r7, #4]
 8079508:	2202      	movs	r2, #2
 807950a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 807950e:	2301      	movs	r3, #1
 8079510:	e0d0      	b.n	80796b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8079512:	687b      	ldr	r3, [r7, #4]
 8079514:	681b      	ldr	r3, [r3, #0]
 8079516:	2100      	movs	r1, #0
 8079518:	4618      	mov	r0, r3
 807951a:	f001 fe79 	bl	807b210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807951e:	2300      	movs	r3, #0
 8079520:	73fb      	strb	r3, [r7, #15]
 8079522:	e04a      	b.n	80795ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8079524:	7bfa      	ldrb	r2, [r7, #15]
 8079526:	6879      	ldr	r1, [r7, #4]
 8079528:	4613      	mov	r3, r2
 807952a:	00db      	lsls	r3, r3, #3
 807952c:	1a9b      	subs	r3, r3, r2
 807952e:	009b      	lsls	r3, r3, #2
 8079530:	440b      	add	r3, r1
 8079532:	333d      	adds	r3, #61	; 0x3d
 8079534:	2201      	movs	r2, #1
 8079536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8079538:	7bfa      	ldrb	r2, [r7, #15]
 807953a:	6879      	ldr	r1, [r7, #4]
 807953c:	4613      	mov	r3, r2
 807953e:	00db      	lsls	r3, r3, #3
 8079540:	1a9b      	subs	r3, r3, r2
 8079542:	009b      	lsls	r3, r3, #2
 8079544:	440b      	add	r3, r1
 8079546:	333c      	adds	r3, #60	; 0x3c
 8079548:	7bfa      	ldrb	r2, [r7, #15]
 807954a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 807954c:	7bfa      	ldrb	r2, [r7, #15]
 807954e:	7bfb      	ldrb	r3, [r7, #15]
 8079550:	b298      	uxth	r0, r3
 8079552:	6879      	ldr	r1, [r7, #4]
 8079554:	4613      	mov	r3, r2
 8079556:	00db      	lsls	r3, r3, #3
 8079558:	1a9b      	subs	r3, r3, r2
 807955a:	009b      	lsls	r3, r3, #2
 807955c:	440b      	add	r3, r1
 807955e:	3342      	adds	r3, #66	; 0x42
 8079560:	4602      	mov	r2, r0
 8079562:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8079564:	7bfa      	ldrb	r2, [r7, #15]
 8079566:	6879      	ldr	r1, [r7, #4]
 8079568:	4613      	mov	r3, r2
 807956a:	00db      	lsls	r3, r3, #3
 807956c:	1a9b      	subs	r3, r3, r2
 807956e:	009b      	lsls	r3, r3, #2
 8079570:	440b      	add	r3, r1
 8079572:	333f      	adds	r3, #63	; 0x3f
 8079574:	2200      	movs	r2, #0
 8079576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8079578:	7bfa      	ldrb	r2, [r7, #15]
 807957a:	6879      	ldr	r1, [r7, #4]
 807957c:	4613      	mov	r3, r2
 807957e:	00db      	lsls	r3, r3, #3
 8079580:	1a9b      	subs	r3, r3, r2
 8079582:	009b      	lsls	r3, r3, #2
 8079584:	440b      	add	r3, r1
 8079586:	3344      	adds	r3, #68	; 0x44
 8079588:	2200      	movs	r2, #0
 807958a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 807958c:	7bfa      	ldrb	r2, [r7, #15]
 807958e:	6879      	ldr	r1, [r7, #4]
 8079590:	4613      	mov	r3, r2
 8079592:	00db      	lsls	r3, r3, #3
 8079594:	1a9b      	subs	r3, r3, r2
 8079596:	009b      	lsls	r3, r3, #2
 8079598:	440b      	add	r3, r1
 807959a:	3348      	adds	r3, #72	; 0x48
 807959c:	2200      	movs	r2, #0
 807959e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80795a0:	7bfa      	ldrb	r2, [r7, #15]
 80795a2:	6879      	ldr	r1, [r7, #4]
 80795a4:	4613      	mov	r3, r2
 80795a6:	00db      	lsls	r3, r3, #3
 80795a8:	1a9b      	subs	r3, r3, r2
 80795aa:	009b      	lsls	r3, r3, #2
 80795ac:	440b      	add	r3, r1
 80795ae:	3350      	adds	r3, #80	; 0x50
 80795b0:	2200      	movs	r2, #0
 80795b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80795b4:	7bfb      	ldrb	r3, [r7, #15]
 80795b6:	3301      	adds	r3, #1
 80795b8:	73fb      	strb	r3, [r7, #15]
 80795ba:	7bfa      	ldrb	r2, [r7, #15]
 80795bc:	687b      	ldr	r3, [r7, #4]
 80795be:	685b      	ldr	r3, [r3, #4]
 80795c0:	429a      	cmp	r2, r3
 80795c2:	d3af      	bcc.n	8079524 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80795c4:	2300      	movs	r3, #0
 80795c6:	73fb      	strb	r3, [r7, #15]
 80795c8:	e044      	b.n	8079654 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80795ca:	7bfa      	ldrb	r2, [r7, #15]
 80795cc:	6879      	ldr	r1, [r7, #4]
 80795ce:	4613      	mov	r3, r2
 80795d0:	00db      	lsls	r3, r3, #3
 80795d2:	1a9b      	subs	r3, r3, r2
 80795d4:	009b      	lsls	r3, r3, #2
 80795d6:	440b      	add	r3, r1
 80795d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80795dc:	2200      	movs	r2, #0
 80795de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80795e0:	7bfa      	ldrb	r2, [r7, #15]
 80795e2:	6879      	ldr	r1, [r7, #4]
 80795e4:	4613      	mov	r3, r2
 80795e6:	00db      	lsls	r3, r3, #3
 80795e8:	1a9b      	subs	r3, r3, r2
 80795ea:	009b      	lsls	r3, r3, #2
 80795ec:	440b      	add	r3, r1
 80795ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80795f2:	7bfa      	ldrb	r2, [r7, #15]
 80795f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80795f6:	7bfa      	ldrb	r2, [r7, #15]
 80795f8:	6879      	ldr	r1, [r7, #4]
 80795fa:	4613      	mov	r3, r2
 80795fc:	00db      	lsls	r3, r3, #3
 80795fe:	1a9b      	subs	r3, r3, r2
 8079600:	009b      	lsls	r3, r3, #2
 8079602:	440b      	add	r3, r1
 8079604:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8079608:	2200      	movs	r2, #0
 807960a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 807960c:	7bfa      	ldrb	r2, [r7, #15]
 807960e:	6879      	ldr	r1, [r7, #4]
 8079610:	4613      	mov	r3, r2
 8079612:	00db      	lsls	r3, r3, #3
 8079614:	1a9b      	subs	r3, r3, r2
 8079616:	009b      	lsls	r3, r3, #2
 8079618:	440b      	add	r3, r1
 807961a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 807961e:	2200      	movs	r2, #0
 8079620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8079622:	7bfa      	ldrb	r2, [r7, #15]
 8079624:	6879      	ldr	r1, [r7, #4]
 8079626:	4613      	mov	r3, r2
 8079628:	00db      	lsls	r3, r3, #3
 807962a:	1a9b      	subs	r3, r3, r2
 807962c:	009b      	lsls	r3, r3, #2
 807962e:	440b      	add	r3, r1
 8079630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8079634:	2200      	movs	r2, #0
 8079636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8079638:	7bfa      	ldrb	r2, [r7, #15]
 807963a:	6879      	ldr	r1, [r7, #4]
 807963c:	4613      	mov	r3, r2
 807963e:	00db      	lsls	r3, r3, #3
 8079640:	1a9b      	subs	r3, r3, r2
 8079642:	009b      	lsls	r3, r3, #2
 8079644:	440b      	add	r3, r1
 8079646:	f503 7304 	add.w	r3, r3, #528	; 0x210
 807964a:	2200      	movs	r2, #0
 807964c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807964e:	7bfb      	ldrb	r3, [r7, #15]
 8079650:	3301      	adds	r3, #1
 8079652:	73fb      	strb	r3, [r7, #15]
 8079654:	7bfa      	ldrb	r2, [r7, #15]
 8079656:	687b      	ldr	r3, [r7, #4]
 8079658:	685b      	ldr	r3, [r3, #4]
 807965a:	429a      	cmp	r2, r3
 807965c:	d3b5      	bcc.n	80795ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 807965e:	687b      	ldr	r3, [r7, #4]
 8079660:	681b      	ldr	r3, [r3, #0]
 8079662:	603b      	str	r3, [r7, #0]
 8079664:	687e      	ldr	r6, [r7, #4]
 8079666:	466d      	mov	r5, sp
 8079668:	f106 0410 	add.w	r4, r6, #16
 807966c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 807966e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8079670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8079672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8079674:	e894 0003 	ldmia.w	r4, {r0, r1}
 8079678:	e885 0003 	stmia.w	r5, {r0, r1}
 807967c:	1d33      	adds	r3, r6, #4
 807967e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8079680:	6838      	ldr	r0, [r7, #0]
 8079682:	f001 fdef 	bl	807b264 <USB_DevInit>
 8079686:	4603      	mov	r3, r0
 8079688:	2b00      	cmp	r3, #0
 807968a:	d005      	beq.n	8079698 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 807968c:	687b      	ldr	r3, [r7, #4]
 807968e:	2202      	movs	r2, #2
 8079690:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8079694:	2301      	movs	r3, #1
 8079696:	e00d      	b.n	80796b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8079698:	687b      	ldr	r3, [r7, #4]
 807969a:	2200      	movs	r2, #0
 807969c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80796a0:	687b      	ldr	r3, [r7, #4]
 80796a2:	2201      	movs	r2, #1
 80796a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80796a8:	687b      	ldr	r3, [r7, #4]
 80796aa:	681b      	ldr	r3, [r3, #0]
 80796ac:	4618      	mov	r0, r3
 80796ae:	f002 fd5b 	bl	807c168 <USB_DevDisconnect>

  return HAL_OK;
 80796b2:	2300      	movs	r3, #0
}
 80796b4:	4618      	mov	r0, r3
 80796b6:	3714      	adds	r7, #20
 80796b8:	46bd      	mov	sp, r7
 80796ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080796bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80796bc:	b580      	push	{r7, lr}
 80796be:	b084      	sub	sp, #16
 80796c0:	af00      	add	r7, sp, #0
 80796c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80796c4:	687b      	ldr	r3, [r7, #4]
 80796c6:	681b      	ldr	r3, [r3, #0]
 80796c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80796ca:	687b      	ldr	r3, [r7, #4]
 80796cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80796d0:	2b01      	cmp	r3, #1
 80796d2:	d101      	bne.n	80796d8 <HAL_PCD_Start+0x1c>
 80796d4:	2302      	movs	r3, #2
 80796d6:	e020      	b.n	807971a <HAL_PCD_Start+0x5e>
 80796d8:	687b      	ldr	r3, [r7, #4]
 80796da:	2201      	movs	r2, #1
 80796dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80796e0:	687b      	ldr	r3, [r7, #4]
 80796e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80796e4:	2b01      	cmp	r3, #1
 80796e6:	d109      	bne.n	80796fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80796e8:	687b      	ldr	r3, [r7, #4]
 80796ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80796ec:	2b01      	cmp	r3, #1
 80796ee:	d005      	beq.n	80796fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80796f0:	68fb      	ldr	r3, [r7, #12]
 80796f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80796f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80796f8:	68fb      	ldr	r3, [r7, #12]
 80796fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80796fc:	687b      	ldr	r3, [r7, #4]
 80796fe:	681b      	ldr	r3, [r3, #0]
 8079700:	4618      	mov	r0, r3
 8079702:	f001 fd63 	bl	807b1cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8079706:	687b      	ldr	r3, [r7, #4]
 8079708:	681b      	ldr	r3, [r3, #0]
 807970a:	4618      	mov	r0, r3
 807970c:	f002 fd0b 	bl	807c126 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8079710:	687b      	ldr	r3, [r7, #4]
 8079712:	2200      	movs	r2, #0
 8079714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8079718:	2300      	movs	r3, #0
}
 807971a:	4618      	mov	r0, r3
 807971c:	3710      	adds	r7, #16
 807971e:	46bd      	mov	sp, r7
 8079720:	bd80      	pop	{r7, pc}

08079722 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8079722:	b580      	push	{r7, lr}
 8079724:	b084      	sub	sp, #16
 8079726:	af00      	add	r7, sp, #0
 8079728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807972a:	687b      	ldr	r3, [r7, #4]
 807972c:	681b      	ldr	r3, [r3, #0]
 807972e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8079730:	687b      	ldr	r3, [r7, #4]
 8079732:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8079736:	2b01      	cmp	r3, #1
 8079738:	d101      	bne.n	807973e <HAL_PCD_Stop+0x1c>
 807973a:	2302      	movs	r3, #2
 807973c:	e026      	b.n	807978c <HAL_PCD_Stop+0x6a>
 807973e:	687b      	ldr	r3, [r7, #4]
 8079740:	2201      	movs	r2, #1
 8079742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8079746:	687b      	ldr	r3, [r7, #4]
 8079748:	681b      	ldr	r3, [r3, #0]
 807974a:	4618      	mov	r0, r3
 807974c:	f001 fd4f 	bl	807b1ee <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8079750:	687b      	ldr	r3, [r7, #4]
 8079752:	681b      	ldr	r3, [r3, #0]
 8079754:	4618      	mov	r0, r3
 8079756:	f002 fd07 	bl	807c168 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 807975a:	687b      	ldr	r3, [r7, #4]
 807975c:	681b      	ldr	r3, [r3, #0]
 807975e:	2110      	movs	r1, #16
 8079760:	4618      	mov	r0, r3
 8079762:	f001 fee3 	bl	807b52c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8079766:	687b      	ldr	r3, [r7, #4]
 8079768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807976a:	2b01      	cmp	r3, #1
 807976c:	d109      	bne.n	8079782 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 807976e:	687b      	ldr	r3, [r7, #4]
 8079770:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8079772:	2b01      	cmp	r3, #1
 8079774:	d005      	beq.n	8079782 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8079776:	68fb      	ldr	r3, [r7, #12]
 8079778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807977a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 807977e:	68fb      	ldr	r3, [r7, #12]
 8079780:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 8079782:	687b      	ldr	r3, [r7, #4]
 8079784:	2200      	movs	r2, #0
 8079786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 807978a:	2300      	movs	r3, #0
}
 807978c:	4618      	mov	r0, r3
 807978e:	3710      	adds	r7, #16
 8079790:	46bd      	mov	sp, r7
 8079792:	bd80      	pop	{r7, pc}

08079794 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8079794:	b590      	push	{r4, r7, lr}
 8079796:	b08d      	sub	sp, #52	; 0x34
 8079798:	af00      	add	r7, sp, #0
 807979a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807979c:	687b      	ldr	r3, [r7, #4]
 807979e:	681b      	ldr	r3, [r3, #0]
 80797a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80797a2:	6a3b      	ldr	r3, [r7, #32]
 80797a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80797a6:	687b      	ldr	r3, [r7, #4]
 80797a8:	681b      	ldr	r3, [r3, #0]
 80797aa:	4618      	mov	r0, r3
 80797ac:	f002 fd90 	bl	807c2d0 <USB_GetMode>
 80797b0:	4603      	mov	r3, r0
 80797b2:	2b00      	cmp	r3, #0
 80797b4:	f040 839d 	bne.w	8079ef2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80797b8:	687b      	ldr	r3, [r7, #4]
 80797ba:	681b      	ldr	r3, [r3, #0]
 80797bc:	4618      	mov	r0, r3
 80797be:	f002 fcf4 	bl	807c1aa <USB_ReadInterrupts>
 80797c2:	4603      	mov	r3, r0
 80797c4:	2b00      	cmp	r3, #0
 80797c6:	f000 8393 	beq.w	8079ef0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80797ca:	687b      	ldr	r3, [r7, #4]
 80797cc:	681b      	ldr	r3, [r3, #0]
 80797ce:	4618      	mov	r0, r3
 80797d0:	f002 fceb 	bl	807c1aa <USB_ReadInterrupts>
 80797d4:	4603      	mov	r3, r0
 80797d6:	f003 0302 	and.w	r3, r3, #2
 80797da:	2b02      	cmp	r3, #2
 80797dc:	d107      	bne.n	80797ee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80797de:	687b      	ldr	r3, [r7, #4]
 80797e0:	681b      	ldr	r3, [r3, #0]
 80797e2:	695a      	ldr	r2, [r3, #20]
 80797e4:	687b      	ldr	r3, [r7, #4]
 80797e6:	681b      	ldr	r3, [r3, #0]
 80797e8:	f002 0202 	and.w	r2, r2, #2
 80797ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80797ee:	687b      	ldr	r3, [r7, #4]
 80797f0:	681b      	ldr	r3, [r3, #0]
 80797f2:	4618      	mov	r0, r3
 80797f4:	f002 fcd9 	bl	807c1aa <USB_ReadInterrupts>
 80797f8:	4603      	mov	r3, r0
 80797fa:	f003 0310 	and.w	r3, r3, #16
 80797fe:	2b10      	cmp	r3, #16
 8079800:	d161      	bne.n	80798c6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8079802:	687b      	ldr	r3, [r7, #4]
 8079804:	681b      	ldr	r3, [r3, #0]
 8079806:	699a      	ldr	r2, [r3, #24]
 8079808:	687b      	ldr	r3, [r7, #4]
 807980a:	681b      	ldr	r3, [r3, #0]
 807980c:	f022 0210 	bic.w	r2, r2, #16
 8079810:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8079812:	6a3b      	ldr	r3, [r7, #32]
 8079814:	6a1b      	ldr	r3, [r3, #32]
 8079816:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8079818:	69bb      	ldr	r3, [r7, #24]
 807981a:	f003 020f 	and.w	r2, r3, #15
 807981e:	4613      	mov	r3, r2
 8079820:	00db      	lsls	r3, r3, #3
 8079822:	1a9b      	subs	r3, r3, r2
 8079824:	009b      	lsls	r3, r3, #2
 8079826:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807982a:	687a      	ldr	r2, [r7, #4]
 807982c:	4413      	add	r3, r2
 807982e:	3304      	adds	r3, #4
 8079830:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8079832:	69bb      	ldr	r3, [r7, #24]
 8079834:	0c5b      	lsrs	r3, r3, #17
 8079836:	f003 030f 	and.w	r3, r3, #15
 807983a:	2b02      	cmp	r3, #2
 807983c:	d124      	bne.n	8079888 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 807983e:	69ba      	ldr	r2, [r7, #24]
 8079840:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8079844:	4013      	ands	r3, r2
 8079846:	2b00      	cmp	r3, #0
 8079848:	d035      	beq.n	80798b6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 807984a:	697b      	ldr	r3, [r7, #20]
 807984c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 807984e:	69bb      	ldr	r3, [r7, #24]
 8079850:	091b      	lsrs	r3, r3, #4
 8079852:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8079854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8079858:	b29b      	uxth	r3, r3
 807985a:	461a      	mov	r2, r3
 807985c:	6a38      	ldr	r0, [r7, #32]
 807985e:	f002 fb3f 	bl	807bee0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8079862:	697b      	ldr	r3, [r7, #20]
 8079864:	68da      	ldr	r2, [r3, #12]
 8079866:	69bb      	ldr	r3, [r7, #24]
 8079868:	091b      	lsrs	r3, r3, #4
 807986a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 807986e:	441a      	add	r2, r3
 8079870:	697b      	ldr	r3, [r7, #20]
 8079872:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8079874:	697b      	ldr	r3, [r7, #20]
 8079876:	699a      	ldr	r2, [r3, #24]
 8079878:	69bb      	ldr	r3, [r7, #24]
 807987a:	091b      	lsrs	r3, r3, #4
 807987c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8079880:	441a      	add	r2, r3
 8079882:	697b      	ldr	r3, [r7, #20]
 8079884:	619a      	str	r2, [r3, #24]
 8079886:	e016      	b.n	80798b6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8079888:	69bb      	ldr	r3, [r7, #24]
 807988a:	0c5b      	lsrs	r3, r3, #17
 807988c:	f003 030f 	and.w	r3, r3, #15
 8079890:	2b06      	cmp	r3, #6
 8079892:	d110      	bne.n	80798b6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8079894:	687b      	ldr	r3, [r7, #4]
 8079896:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807989a:	2208      	movs	r2, #8
 807989c:	4619      	mov	r1, r3
 807989e:	6a38      	ldr	r0, [r7, #32]
 80798a0:	f002 fb1e 	bl	807bee0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80798a4:	697b      	ldr	r3, [r7, #20]
 80798a6:	699a      	ldr	r2, [r3, #24]
 80798a8:	69bb      	ldr	r3, [r7, #24]
 80798aa:	091b      	lsrs	r3, r3, #4
 80798ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80798b0:	441a      	add	r2, r3
 80798b2:	697b      	ldr	r3, [r7, #20]
 80798b4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80798b6:	687b      	ldr	r3, [r7, #4]
 80798b8:	681b      	ldr	r3, [r3, #0]
 80798ba:	699a      	ldr	r2, [r3, #24]
 80798bc:	687b      	ldr	r3, [r7, #4]
 80798be:	681b      	ldr	r3, [r3, #0]
 80798c0:	f042 0210 	orr.w	r2, r2, #16
 80798c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80798c6:	687b      	ldr	r3, [r7, #4]
 80798c8:	681b      	ldr	r3, [r3, #0]
 80798ca:	4618      	mov	r0, r3
 80798cc:	f002 fc6d 	bl	807c1aa <USB_ReadInterrupts>
 80798d0:	4603      	mov	r3, r0
 80798d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80798d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80798da:	d16e      	bne.n	80799ba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80798dc:	2300      	movs	r3, #0
 80798de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80798e0:	687b      	ldr	r3, [r7, #4]
 80798e2:	681b      	ldr	r3, [r3, #0]
 80798e4:	4618      	mov	r0, r3
 80798e6:	f002 fc73 	bl	807c1d0 <USB_ReadDevAllOutEpInterrupt>
 80798ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80798ec:	e062      	b.n	80799b4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80798ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80798f0:	f003 0301 	and.w	r3, r3, #1
 80798f4:	2b00      	cmp	r3, #0
 80798f6:	d057      	beq.n	80799a8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80798f8:	687b      	ldr	r3, [r7, #4]
 80798fa:	681b      	ldr	r3, [r3, #0]
 80798fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80798fe:	b2d2      	uxtb	r2, r2
 8079900:	4611      	mov	r1, r2
 8079902:	4618      	mov	r0, r3
 8079904:	f002 fc98 	bl	807c238 <USB_ReadDevOutEPInterrupt>
 8079908:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 807990a:	693b      	ldr	r3, [r7, #16]
 807990c:	f003 0301 	and.w	r3, r3, #1
 8079910:	2b00      	cmp	r3, #0
 8079912:	d00c      	beq.n	807992e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8079914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079916:	015a      	lsls	r2, r3, #5
 8079918:	69fb      	ldr	r3, [r7, #28]
 807991a:	4413      	add	r3, r2
 807991c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079920:	461a      	mov	r2, r3
 8079922:	2301      	movs	r3, #1
 8079924:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8079926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8079928:	6878      	ldr	r0, [r7, #4]
 807992a:	f000 fd4f 	bl	807a3cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 807992e:	693b      	ldr	r3, [r7, #16]
 8079930:	f003 0308 	and.w	r3, r3, #8
 8079934:	2b00      	cmp	r3, #0
 8079936:	d00c      	beq.n	8079952 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8079938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807993a:	015a      	lsls	r2, r3, #5
 807993c:	69fb      	ldr	r3, [r7, #28]
 807993e:	4413      	add	r3, r2
 8079940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079944:	461a      	mov	r2, r3
 8079946:	2308      	movs	r3, #8
 8079948:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 807994a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 807994c:	6878      	ldr	r0, [r7, #4]
 807994e:	f000 fe49 	bl	807a5e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8079952:	693b      	ldr	r3, [r7, #16]
 8079954:	f003 0310 	and.w	r3, r3, #16
 8079958:	2b00      	cmp	r3, #0
 807995a:	d008      	beq.n	807996e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 807995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807995e:	015a      	lsls	r2, r3, #5
 8079960:	69fb      	ldr	r3, [r7, #28]
 8079962:	4413      	add	r3, r2
 8079964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079968:	461a      	mov	r2, r3
 807996a:	2310      	movs	r3, #16
 807996c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 807996e:	693b      	ldr	r3, [r7, #16]
 8079970:	f003 0320 	and.w	r3, r3, #32
 8079974:	2b00      	cmp	r3, #0
 8079976:	d008      	beq.n	807998a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8079978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807997a:	015a      	lsls	r2, r3, #5
 807997c:	69fb      	ldr	r3, [r7, #28]
 807997e:	4413      	add	r3, r2
 8079980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079984:	461a      	mov	r2, r3
 8079986:	2320      	movs	r3, #32
 8079988:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 807998a:	693b      	ldr	r3, [r7, #16]
 807998c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8079990:	2b00      	cmp	r3, #0
 8079992:	d009      	beq.n	80799a8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8079994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079996:	015a      	lsls	r2, r3, #5
 8079998:	69fb      	ldr	r3, [r7, #28]
 807999a:	4413      	add	r3, r2
 807999c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80799a0:	461a      	mov	r2, r3
 80799a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80799a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80799a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80799aa:	3301      	adds	r3, #1
 80799ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80799ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80799b0:	085b      	lsrs	r3, r3, #1
 80799b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80799b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80799b6:	2b00      	cmp	r3, #0
 80799b8:	d199      	bne.n	80798ee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80799ba:	687b      	ldr	r3, [r7, #4]
 80799bc:	681b      	ldr	r3, [r3, #0]
 80799be:	4618      	mov	r0, r3
 80799c0:	f002 fbf3 	bl	807c1aa <USB_ReadInterrupts>
 80799c4:	4603      	mov	r3, r0
 80799c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80799ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80799ce:	f040 80c0 	bne.w	8079b52 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80799d2:	687b      	ldr	r3, [r7, #4]
 80799d4:	681b      	ldr	r3, [r3, #0]
 80799d6:	4618      	mov	r0, r3
 80799d8:	f002 fc14 	bl	807c204 <USB_ReadDevAllInEpInterrupt>
 80799dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80799de:	2300      	movs	r3, #0
 80799e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80799e2:	e0b2      	b.n	8079b4a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80799e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80799e6:	f003 0301 	and.w	r3, r3, #1
 80799ea:	2b00      	cmp	r3, #0
 80799ec:	f000 80a7 	beq.w	8079b3e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80799f0:	687b      	ldr	r3, [r7, #4]
 80799f2:	681b      	ldr	r3, [r3, #0]
 80799f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80799f6:	b2d2      	uxtb	r2, r2
 80799f8:	4611      	mov	r1, r2
 80799fa:	4618      	mov	r0, r3
 80799fc:	f002 fc3a 	bl	807c274 <USB_ReadDevInEPInterrupt>
 8079a00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8079a02:	693b      	ldr	r3, [r7, #16]
 8079a04:	f003 0301 	and.w	r3, r3, #1
 8079a08:	2b00      	cmp	r3, #0
 8079a0a:	d057      	beq.n	8079abc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8079a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079a0e:	f003 030f 	and.w	r3, r3, #15
 8079a12:	2201      	movs	r2, #1
 8079a14:	fa02 f303 	lsl.w	r3, r2, r3
 8079a18:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8079a1a:	69fb      	ldr	r3, [r7, #28]
 8079a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8079a22:	68fb      	ldr	r3, [r7, #12]
 8079a24:	43db      	mvns	r3, r3
 8079a26:	69f9      	ldr	r1, [r7, #28]
 8079a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8079a2c:	4013      	ands	r3, r2
 8079a2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8079a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079a32:	015a      	lsls	r2, r3, #5
 8079a34:	69fb      	ldr	r3, [r7, #28]
 8079a36:	4413      	add	r3, r2
 8079a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079a3c:	461a      	mov	r2, r3
 8079a3e:	2301      	movs	r3, #1
 8079a40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8079a42:	687b      	ldr	r3, [r7, #4]
 8079a44:	691b      	ldr	r3, [r3, #16]
 8079a46:	2b01      	cmp	r3, #1
 8079a48:	d132      	bne.n	8079ab0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8079a4a:	6879      	ldr	r1, [r7, #4]
 8079a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a4e:	4613      	mov	r3, r2
 8079a50:	00db      	lsls	r3, r3, #3
 8079a52:	1a9b      	subs	r3, r3, r2
 8079a54:	009b      	lsls	r3, r3, #2
 8079a56:	440b      	add	r3, r1
 8079a58:	3348      	adds	r3, #72	; 0x48
 8079a5a:	6819      	ldr	r1, [r3, #0]
 8079a5c:	6878      	ldr	r0, [r7, #4]
 8079a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a60:	4613      	mov	r3, r2
 8079a62:	00db      	lsls	r3, r3, #3
 8079a64:	1a9b      	subs	r3, r3, r2
 8079a66:	009b      	lsls	r3, r3, #2
 8079a68:	4403      	add	r3, r0
 8079a6a:	3344      	adds	r3, #68	; 0x44
 8079a6c:	681b      	ldr	r3, [r3, #0]
 8079a6e:	4419      	add	r1, r3
 8079a70:	6878      	ldr	r0, [r7, #4]
 8079a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a74:	4613      	mov	r3, r2
 8079a76:	00db      	lsls	r3, r3, #3
 8079a78:	1a9b      	subs	r3, r3, r2
 8079a7a:	009b      	lsls	r3, r3, #2
 8079a7c:	4403      	add	r3, r0
 8079a7e:	3348      	adds	r3, #72	; 0x48
 8079a80:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8079a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079a84:	2b00      	cmp	r3, #0
 8079a86:	d113      	bne.n	8079ab0 <HAL_PCD_IRQHandler+0x31c>
 8079a88:	6879      	ldr	r1, [r7, #4]
 8079a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a8c:	4613      	mov	r3, r2
 8079a8e:	00db      	lsls	r3, r3, #3
 8079a90:	1a9b      	subs	r3, r3, r2
 8079a92:	009b      	lsls	r3, r3, #2
 8079a94:	440b      	add	r3, r1
 8079a96:	3350      	adds	r3, #80	; 0x50
 8079a98:	681b      	ldr	r3, [r3, #0]
 8079a9a:	2b00      	cmp	r3, #0
 8079a9c:	d108      	bne.n	8079ab0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8079a9e:	687b      	ldr	r3, [r7, #4]
 8079aa0:	6818      	ldr	r0, [r3, #0]
 8079aa2:	687b      	ldr	r3, [r7, #4]
 8079aa4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8079aa8:	461a      	mov	r2, r3
 8079aaa:	2101      	movs	r1, #1
 8079aac:	f002 fc42 	bl	807c334 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8079ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079ab2:	b2db      	uxtb	r3, r3
 8079ab4:	4619      	mov	r1, r3
 8079ab6:	6878      	ldr	r0, [r7, #4]
 8079ab8:	f004 ffb9 	bl	807ea2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8079abc:	693b      	ldr	r3, [r7, #16]
 8079abe:	f003 0308 	and.w	r3, r3, #8
 8079ac2:	2b00      	cmp	r3, #0
 8079ac4:	d008      	beq.n	8079ad8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8079ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079ac8:	015a      	lsls	r2, r3, #5
 8079aca:	69fb      	ldr	r3, [r7, #28]
 8079acc:	4413      	add	r3, r2
 8079ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079ad2:	461a      	mov	r2, r3
 8079ad4:	2308      	movs	r3, #8
 8079ad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8079ad8:	693b      	ldr	r3, [r7, #16]
 8079ada:	f003 0310 	and.w	r3, r3, #16
 8079ade:	2b00      	cmp	r3, #0
 8079ae0:	d008      	beq.n	8079af4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8079ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079ae4:	015a      	lsls	r2, r3, #5
 8079ae6:	69fb      	ldr	r3, [r7, #28]
 8079ae8:	4413      	add	r3, r2
 8079aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079aee:	461a      	mov	r2, r3
 8079af0:	2310      	movs	r3, #16
 8079af2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8079af4:	693b      	ldr	r3, [r7, #16]
 8079af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8079afa:	2b00      	cmp	r3, #0
 8079afc:	d008      	beq.n	8079b10 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8079afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079b00:	015a      	lsls	r2, r3, #5
 8079b02:	69fb      	ldr	r3, [r7, #28]
 8079b04:	4413      	add	r3, r2
 8079b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079b0a:	461a      	mov	r2, r3
 8079b0c:	2340      	movs	r3, #64	; 0x40
 8079b0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8079b10:	693b      	ldr	r3, [r7, #16]
 8079b12:	f003 0302 	and.w	r3, r3, #2
 8079b16:	2b00      	cmp	r3, #0
 8079b18:	d008      	beq.n	8079b2c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8079b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079b1c:	015a      	lsls	r2, r3, #5
 8079b1e:	69fb      	ldr	r3, [r7, #28]
 8079b20:	4413      	add	r3, r2
 8079b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079b26:	461a      	mov	r2, r3
 8079b28:	2302      	movs	r3, #2
 8079b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8079b2c:	693b      	ldr	r3, [r7, #16]
 8079b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8079b32:	2b00      	cmp	r3, #0
 8079b34:	d003      	beq.n	8079b3e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8079b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8079b38:	6878      	ldr	r0, [r7, #4]
 8079b3a:	f000 fbb9 	bl	807a2b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8079b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079b40:	3301      	adds	r3, #1
 8079b42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8079b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8079b46:	085b      	lsrs	r3, r3, #1
 8079b48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8079b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8079b4c:	2b00      	cmp	r3, #0
 8079b4e:	f47f af49 	bne.w	80799e4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8079b52:	687b      	ldr	r3, [r7, #4]
 8079b54:	681b      	ldr	r3, [r3, #0]
 8079b56:	4618      	mov	r0, r3
 8079b58:	f002 fb27 	bl	807c1aa <USB_ReadInterrupts>
 8079b5c:	4603      	mov	r3, r0
 8079b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8079b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8079b66:	d122      	bne.n	8079bae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8079b68:	69fb      	ldr	r3, [r7, #28]
 8079b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079b6e:	685b      	ldr	r3, [r3, #4]
 8079b70:	69fa      	ldr	r2, [r7, #28]
 8079b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079b76:	f023 0301 	bic.w	r3, r3, #1
 8079b7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8079b7c:	687b      	ldr	r3, [r7, #4]
 8079b7e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8079b82:	2b01      	cmp	r3, #1
 8079b84:	d108      	bne.n	8079b98 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8079b86:	687b      	ldr	r3, [r7, #4]
 8079b88:	2200      	movs	r2, #0
 8079b8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8079b8e:	2100      	movs	r1, #0
 8079b90:	6878      	ldr	r0, [r7, #4]
 8079b92:	f000 fdc5 	bl	807a720 <HAL_PCDEx_LPM_Callback>
 8079b96:	e002      	b.n	8079b9e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8079b98:	6878      	ldr	r0, [r7, #4]
 8079b9a:	f004 ffb5 	bl	807eb08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8079b9e:	687b      	ldr	r3, [r7, #4]
 8079ba0:	681b      	ldr	r3, [r3, #0]
 8079ba2:	695a      	ldr	r2, [r3, #20]
 8079ba4:	687b      	ldr	r3, [r7, #4]
 8079ba6:	681b      	ldr	r3, [r3, #0]
 8079ba8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8079bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8079bae:	687b      	ldr	r3, [r7, #4]
 8079bb0:	681b      	ldr	r3, [r3, #0]
 8079bb2:	4618      	mov	r0, r3
 8079bb4:	f002 faf9 	bl	807c1aa <USB_ReadInterrupts>
 8079bb8:	4603      	mov	r3, r0
 8079bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8079bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8079bc2:	d112      	bne.n	8079bea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8079bc4:	69fb      	ldr	r3, [r7, #28]
 8079bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079bca:	689b      	ldr	r3, [r3, #8]
 8079bcc:	f003 0301 	and.w	r3, r3, #1
 8079bd0:	2b01      	cmp	r3, #1
 8079bd2:	d102      	bne.n	8079bda <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8079bd4:	6878      	ldr	r0, [r7, #4]
 8079bd6:	f004 ff71 	bl	807eabc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8079bda:	687b      	ldr	r3, [r7, #4]
 8079bdc:	681b      	ldr	r3, [r3, #0]
 8079bde:	695a      	ldr	r2, [r3, #20]
 8079be0:	687b      	ldr	r3, [r7, #4]
 8079be2:	681b      	ldr	r3, [r3, #0]
 8079be4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8079be8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8079bea:	687b      	ldr	r3, [r7, #4]
 8079bec:	681b      	ldr	r3, [r3, #0]
 8079bee:	4618      	mov	r0, r3
 8079bf0:	f002 fadb 	bl	807c1aa <USB_ReadInterrupts>
 8079bf4:	4603      	mov	r3, r0
 8079bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8079bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8079bfe:	f040 80c7 	bne.w	8079d90 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8079c02:	69fb      	ldr	r3, [r7, #28]
 8079c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079c08:	685b      	ldr	r3, [r3, #4]
 8079c0a:	69fa      	ldr	r2, [r7, #28]
 8079c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079c10:	f023 0301 	bic.w	r3, r3, #1
 8079c14:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8079c16:	687b      	ldr	r3, [r7, #4]
 8079c18:	681b      	ldr	r3, [r3, #0]
 8079c1a:	2110      	movs	r1, #16
 8079c1c:	4618      	mov	r0, r3
 8079c1e:	f001 fc85 	bl	807b52c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8079c22:	2300      	movs	r3, #0
 8079c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8079c26:	e056      	b.n	8079cd6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8079c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c2a:	015a      	lsls	r2, r3, #5
 8079c2c:	69fb      	ldr	r3, [r7, #28]
 8079c2e:	4413      	add	r3, r2
 8079c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079c34:	461a      	mov	r2, r3
 8079c36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8079c3a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8079c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c3e:	015a      	lsls	r2, r3, #5
 8079c40:	69fb      	ldr	r3, [r7, #28]
 8079c42:	4413      	add	r3, r2
 8079c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079c48:	681b      	ldr	r3, [r3, #0]
 8079c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079c4c:	0151      	lsls	r1, r2, #5
 8079c4e:	69fa      	ldr	r2, [r7, #28]
 8079c50:	440a      	add	r2, r1
 8079c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8079c56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8079c5a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8079c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c5e:	015a      	lsls	r2, r3, #5
 8079c60:	69fb      	ldr	r3, [r7, #28]
 8079c62:	4413      	add	r3, r2
 8079c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079c68:	681b      	ldr	r3, [r3, #0]
 8079c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079c6c:	0151      	lsls	r1, r2, #5
 8079c6e:	69fa      	ldr	r2, [r7, #28]
 8079c70:	440a      	add	r2, r1
 8079c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8079c76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8079c7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8079c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c7e:	015a      	lsls	r2, r3, #5
 8079c80:	69fb      	ldr	r3, [r7, #28]
 8079c82:	4413      	add	r3, r2
 8079c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079c88:	461a      	mov	r2, r3
 8079c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8079c8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8079c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c92:	015a      	lsls	r2, r3, #5
 8079c94:	69fb      	ldr	r3, [r7, #28]
 8079c96:	4413      	add	r3, r2
 8079c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079c9c:	681b      	ldr	r3, [r3, #0]
 8079c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079ca0:	0151      	lsls	r1, r2, #5
 8079ca2:	69fa      	ldr	r2, [r7, #28]
 8079ca4:	440a      	add	r2, r1
 8079ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8079caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8079cae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8079cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079cb2:	015a      	lsls	r2, r3, #5
 8079cb4:	69fb      	ldr	r3, [r7, #28]
 8079cb6:	4413      	add	r3, r2
 8079cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079cbc:	681b      	ldr	r3, [r3, #0]
 8079cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079cc0:	0151      	lsls	r1, r2, #5
 8079cc2:	69fa      	ldr	r2, [r7, #28]
 8079cc4:	440a      	add	r2, r1
 8079cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8079cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8079cce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8079cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079cd2:	3301      	adds	r3, #1
 8079cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8079cd6:	687b      	ldr	r3, [r7, #4]
 8079cd8:	685b      	ldr	r3, [r3, #4]
 8079cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079cdc:	429a      	cmp	r2, r3
 8079cde:	d3a3      	bcc.n	8079c28 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8079ce0:	69fb      	ldr	r3, [r7, #28]
 8079ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079ce6:	69db      	ldr	r3, [r3, #28]
 8079ce8:	69fa      	ldr	r2, [r7, #28]
 8079cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079cee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8079cf2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8079cf4:	687b      	ldr	r3, [r7, #4]
 8079cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8079cf8:	2b00      	cmp	r3, #0
 8079cfa:	d016      	beq.n	8079d2a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8079cfc:	69fb      	ldr	r3, [r7, #28]
 8079cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8079d06:	69fa      	ldr	r2, [r7, #28]
 8079d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d0c:	f043 030b 	orr.w	r3, r3, #11
 8079d10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8079d14:	69fb      	ldr	r3, [r7, #28]
 8079d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8079d1c:	69fa      	ldr	r2, [r7, #28]
 8079d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d22:	f043 030b 	orr.w	r3, r3, #11
 8079d26:	6453      	str	r3, [r2, #68]	; 0x44
 8079d28:	e015      	b.n	8079d56 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8079d2a:	69fb      	ldr	r3, [r7, #28]
 8079d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d30:	695b      	ldr	r3, [r3, #20]
 8079d32:	69fa      	ldr	r2, [r7, #28]
 8079d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8079d3c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8079d40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8079d42:	69fb      	ldr	r3, [r7, #28]
 8079d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d48:	691b      	ldr	r3, [r3, #16]
 8079d4a:	69fa      	ldr	r2, [r7, #28]
 8079d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d50:	f043 030b 	orr.w	r3, r3, #11
 8079d54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8079d56:	69fb      	ldr	r3, [r7, #28]
 8079d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d5c:	681b      	ldr	r3, [r3, #0]
 8079d5e:	69fa      	ldr	r2, [r7, #28]
 8079d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8079d68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8079d6a:	687b      	ldr	r3, [r7, #4]
 8079d6c:	6818      	ldr	r0, [r3, #0]
 8079d6e:	687b      	ldr	r3, [r7, #4]
 8079d70:	691b      	ldr	r3, [r3, #16]
 8079d72:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8079d74:	687b      	ldr	r3, [r7, #4]
 8079d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8079d7a:	461a      	mov	r2, r3
 8079d7c:	f002 fada 	bl	807c334 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8079d80:	687b      	ldr	r3, [r7, #4]
 8079d82:	681b      	ldr	r3, [r3, #0]
 8079d84:	695a      	ldr	r2, [r3, #20]
 8079d86:	687b      	ldr	r3, [r7, #4]
 8079d88:	681b      	ldr	r3, [r3, #0]
 8079d8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8079d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8079d90:	687b      	ldr	r3, [r7, #4]
 8079d92:	681b      	ldr	r3, [r3, #0]
 8079d94:	4618      	mov	r0, r3
 8079d96:	f002 fa08 	bl	807c1aa <USB_ReadInterrupts>
 8079d9a:	4603      	mov	r3, r0
 8079d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8079da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8079da4:	d124      	bne.n	8079df0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8079da6:	687b      	ldr	r3, [r7, #4]
 8079da8:	681b      	ldr	r3, [r3, #0]
 8079daa:	4618      	mov	r0, r3
 8079dac:	f002 fa9e 	bl	807c2ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8079db0:	687b      	ldr	r3, [r7, #4]
 8079db2:	681b      	ldr	r3, [r3, #0]
 8079db4:	4618      	mov	r0, r3
 8079db6:	f001 fc1a 	bl	807b5ee <USB_GetDevSpeed>
 8079dba:	4603      	mov	r3, r0
 8079dbc:	461a      	mov	r2, r3
 8079dbe:	687b      	ldr	r3, [r7, #4]
 8079dc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8079dc2:	687b      	ldr	r3, [r7, #4]
 8079dc4:	681c      	ldr	r4, [r3, #0]
 8079dc6:	f001 f8d7 	bl	807af78 <HAL_RCC_GetHCLKFreq>
 8079dca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8079dcc:	687b      	ldr	r3, [r7, #4]
 8079dce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8079dd0:	b2db      	uxtb	r3, r3
 8079dd2:	461a      	mov	r2, r3
 8079dd4:	4620      	mov	r0, r4
 8079dd6:	f001 f957 	bl	807b088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8079dda:	6878      	ldr	r0, [r7, #4]
 8079ddc:	f004 fe4f 	bl	807ea7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8079de0:	687b      	ldr	r3, [r7, #4]
 8079de2:	681b      	ldr	r3, [r3, #0]
 8079de4:	695a      	ldr	r2, [r3, #20]
 8079de6:	687b      	ldr	r3, [r7, #4]
 8079de8:	681b      	ldr	r3, [r3, #0]
 8079dea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8079dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8079df0:	687b      	ldr	r3, [r7, #4]
 8079df2:	681b      	ldr	r3, [r3, #0]
 8079df4:	4618      	mov	r0, r3
 8079df6:	f002 f9d8 	bl	807c1aa <USB_ReadInterrupts>
 8079dfa:	4603      	mov	r3, r0
 8079dfc:	f003 0308 	and.w	r3, r3, #8
 8079e00:	2b08      	cmp	r3, #8
 8079e02:	d10a      	bne.n	8079e1a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8079e04:	6878      	ldr	r0, [r7, #4]
 8079e06:	f004 fe2c 	bl	807ea62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8079e0a:	687b      	ldr	r3, [r7, #4]
 8079e0c:	681b      	ldr	r3, [r3, #0]
 8079e0e:	695a      	ldr	r2, [r3, #20]
 8079e10:	687b      	ldr	r3, [r7, #4]
 8079e12:	681b      	ldr	r3, [r3, #0]
 8079e14:	f002 0208 	and.w	r2, r2, #8
 8079e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8079e1a:	687b      	ldr	r3, [r7, #4]
 8079e1c:	681b      	ldr	r3, [r3, #0]
 8079e1e:	4618      	mov	r0, r3
 8079e20:	f002 f9c3 	bl	807c1aa <USB_ReadInterrupts>
 8079e24:	4603      	mov	r3, r0
 8079e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8079e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8079e2e:	d10f      	bne.n	8079e50 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8079e30:	2300      	movs	r3, #0
 8079e32:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8079e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079e36:	b2db      	uxtb	r3, r3
 8079e38:	4619      	mov	r1, r3
 8079e3a:	6878      	ldr	r0, [r7, #4]
 8079e3c:	f004 fe84 	bl	807eb48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8079e40:	687b      	ldr	r3, [r7, #4]
 8079e42:	681b      	ldr	r3, [r3, #0]
 8079e44:	695a      	ldr	r2, [r3, #20]
 8079e46:	687b      	ldr	r3, [r7, #4]
 8079e48:	681b      	ldr	r3, [r3, #0]
 8079e4a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8079e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8079e50:	687b      	ldr	r3, [r7, #4]
 8079e52:	681b      	ldr	r3, [r3, #0]
 8079e54:	4618      	mov	r0, r3
 8079e56:	f002 f9a8 	bl	807c1aa <USB_ReadInterrupts>
 8079e5a:	4603      	mov	r3, r0
 8079e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8079e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8079e64:	d10f      	bne.n	8079e86 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8079e66:	2300      	movs	r3, #0
 8079e68:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8079e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079e6c:	b2db      	uxtb	r3, r3
 8079e6e:	4619      	mov	r1, r3
 8079e70:	6878      	ldr	r0, [r7, #4]
 8079e72:	f004 fe57 	bl	807eb24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8079e76:	687b      	ldr	r3, [r7, #4]
 8079e78:	681b      	ldr	r3, [r3, #0]
 8079e7a:	695a      	ldr	r2, [r3, #20]
 8079e7c:	687b      	ldr	r3, [r7, #4]
 8079e7e:	681b      	ldr	r3, [r3, #0]
 8079e80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8079e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8079e86:	687b      	ldr	r3, [r7, #4]
 8079e88:	681b      	ldr	r3, [r3, #0]
 8079e8a:	4618      	mov	r0, r3
 8079e8c:	f002 f98d 	bl	807c1aa <USB_ReadInterrupts>
 8079e90:	4603      	mov	r3, r0
 8079e92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8079e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8079e9a:	d10a      	bne.n	8079eb2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8079e9c:	6878      	ldr	r0, [r7, #4]
 8079e9e:	f004 fe65 	bl	807eb6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8079ea2:	687b      	ldr	r3, [r7, #4]
 8079ea4:	681b      	ldr	r3, [r3, #0]
 8079ea6:	695a      	ldr	r2, [r3, #20]
 8079ea8:	687b      	ldr	r3, [r7, #4]
 8079eaa:	681b      	ldr	r3, [r3, #0]
 8079eac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8079eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8079eb2:	687b      	ldr	r3, [r7, #4]
 8079eb4:	681b      	ldr	r3, [r3, #0]
 8079eb6:	4618      	mov	r0, r3
 8079eb8:	f002 f977 	bl	807c1aa <USB_ReadInterrupts>
 8079ebc:	4603      	mov	r3, r0
 8079ebe:	f003 0304 	and.w	r3, r3, #4
 8079ec2:	2b04      	cmp	r3, #4
 8079ec4:	d115      	bne.n	8079ef2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8079ec6:	687b      	ldr	r3, [r7, #4]
 8079ec8:	681b      	ldr	r3, [r3, #0]
 8079eca:	685b      	ldr	r3, [r3, #4]
 8079ecc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8079ece:	69bb      	ldr	r3, [r7, #24]
 8079ed0:	f003 0304 	and.w	r3, r3, #4
 8079ed4:	2b00      	cmp	r3, #0
 8079ed6:	d002      	beq.n	8079ede <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8079ed8:	6878      	ldr	r0, [r7, #4]
 8079eda:	f004 fe55 	bl	807eb88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8079ede:	687b      	ldr	r3, [r7, #4]
 8079ee0:	681b      	ldr	r3, [r3, #0]
 8079ee2:	6859      	ldr	r1, [r3, #4]
 8079ee4:	687b      	ldr	r3, [r7, #4]
 8079ee6:	681b      	ldr	r3, [r3, #0]
 8079ee8:	69ba      	ldr	r2, [r7, #24]
 8079eea:	430a      	orrs	r2, r1
 8079eec:	605a      	str	r2, [r3, #4]
 8079eee:	e000      	b.n	8079ef2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8079ef0:	bf00      	nop
    }
  }
}
 8079ef2:	3734      	adds	r7, #52	; 0x34
 8079ef4:	46bd      	mov	sp, r7
 8079ef6:	bd90      	pop	{r4, r7, pc}

08079ef8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8079ef8:	b580      	push	{r7, lr}
 8079efa:	b082      	sub	sp, #8
 8079efc:	af00      	add	r7, sp, #0
 8079efe:	6078      	str	r0, [r7, #4]
 8079f00:	460b      	mov	r3, r1
 8079f02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8079f04:	687b      	ldr	r3, [r7, #4]
 8079f06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8079f0a:	2b01      	cmp	r3, #1
 8079f0c:	d101      	bne.n	8079f12 <HAL_PCD_SetAddress+0x1a>
 8079f0e:	2302      	movs	r3, #2
 8079f10:	e013      	b.n	8079f3a <HAL_PCD_SetAddress+0x42>
 8079f12:	687b      	ldr	r3, [r7, #4]
 8079f14:	2201      	movs	r2, #1
 8079f16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8079f1a:	687b      	ldr	r3, [r7, #4]
 8079f1c:	78fa      	ldrb	r2, [r7, #3]
 8079f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8079f22:	687b      	ldr	r3, [r7, #4]
 8079f24:	681b      	ldr	r3, [r3, #0]
 8079f26:	78fa      	ldrb	r2, [r7, #3]
 8079f28:	4611      	mov	r1, r2
 8079f2a:	4618      	mov	r0, r3
 8079f2c:	f002 f8d5 	bl	807c0da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8079f30:	687b      	ldr	r3, [r7, #4]
 8079f32:	2200      	movs	r2, #0
 8079f34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8079f38:	2300      	movs	r3, #0
}
 8079f3a:	4618      	mov	r0, r3
 8079f3c:	3708      	adds	r7, #8
 8079f3e:	46bd      	mov	sp, r7
 8079f40:	bd80      	pop	{r7, pc}

08079f42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8079f42:	b580      	push	{r7, lr}
 8079f44:	b084      	sub	sp, #16
 8079f46:	af00      	add	r7, sp, #0
 8079f48:	6078      	str	r0, [r7, #4]
 8079f4a:	4608      	mov	r0, r1
 8079f4c:	4611      	mov	r1, r2
 8079f4e:	461a      	mov	r2, r3
 8079f50:	4603      	mov	r3, r0
 8079f52:	70fb      	strb	r3, [r7, #3]
 8079f54:	460b      	mov	r3, r1
 8079f56:	803b      	strh	r3, [r7, #0]
 8079f58:	4613      	mov	r3, r2
 8079f5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8079f5c:	2300      	movs	r3, #0
 8079f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8079f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8079f64:	2b00      	cmp	r3, #0
 8079f66:	da0f      	bge.n	8079f88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8079f68:	78fb      	ldrb	r3, [r7, #3]
 8079f6a:	f003 020f 	and.w	r2, r3, #15
 8079f6e:	4613      	mov	r3, r2
 8079f70:	00db      	lsls	r3, r3, #3
 8079f72:	1a9b      	subs	r3, r3, r2
 8079f74:	009b      	lsls	r3, r3, #2
 8079f76:	3338      	adds	r3, #56	; 0x38
 8079f78:	687a      	ldr	r2, [r7, #4]
 8079f7a:	4413      	add	r3, r2
 8079f7c:	3304      	adds	r3, #4
 8079f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8079f80:	68fb      	ldr	r3, [r7, #12]
 8079f82:	2201      	movs	r2, #1
 8079f84:	705a      	strb	r2, [r3, #1]
 8079f86:	e00f      	b.n	8079fa8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8079f88:	78fb      	ldrb	r3, [r7, #3]
 8079f8a:	f003 020f 	and.w	r2, r3, #15
 8079f8e:	4613      	mov	r3, r2
 8079f90:	00db      	lsls	r3, r3, #3
 8079f92:	1a9b      	subs	r3, r3, r2
 8079f94:	009b      	lsls	r3, r3, #2
 8079f96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8079f9a:	687a      	ldr	r2, [r7, #4]
 8079f9c:	4413      	add	r3, r2
 8079f9e:	3304      	adds	r3, #4
 8079fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8079fa2:	68fb      	ldr	r3, [r7, #12]
 8079fa4:	2200      	movs	r2, #0
 8079fa6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8079fa8:	78fb      	ldrb	r3, [r7, #3]
 8079faa:	f003 030f 	and.w	r3, r3, #15
 8079fae:	b2da      	uxtb	r2, r3
 8079fb0:	68fb      	ldr	r3, [r7, #12]
 8079fb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8079fb4:	883a      	ldrh	r2, [r7, #0]
 8079fb6:	68fb      	ldr	r3, [r7, #12]
 8079fb8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8079fba:	68fb      	ldr	r3, [r7, #12]
 8079fbc:	78ba      	ldrb	r2, [r7, #2]
 8079fbe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8079fc0:	68fb      	ldr	r3, [r7, #12]
 8079fc2:	785b      	ldrb	r3, [r3, #1]
 8079fc4:	2b00      	cmp	r3, #0
 8079fc6:	d004      	beq.n	8079fd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8079fc8:	68fb      	ldr	r3, [r7, #12]
 8079fca:	781b      	ldrb	r3, [r3, #0]
 8079fcc:	b29a      	uxth	r2, r3
 8079fce:	68fb      	ldr	r3, [r7, #12]
 8079fd0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8079fd2:	78bb      	ldrb	r3, [r7, #2]
 8079fd4:	2b02      	cmp	r3, #2
 8079fd6:	d102      	bne.n	8079fde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8079fd8:	68fb      	ldr	r3, [r7, #12]
 8079fda:	2200      	movs	r2, #0
 8079fdc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8079fde:	687b      	ldr	r3, [r7, #4]
 8079fe0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8079fe4:	2b01      	cmp	r3, #1
 8079fe6:	d101      	bne.n	8079fec <HAL_PCD_EP_Open+0xaa>
 8079fe8:	2302      	movs	r3, #2
 8079fea:	e00e      	b.n	807a00a <HAL_PCD_EP_Open+0xc8>
 8079fec:	687b      	ldr	r3, [r7, #4]
 8079fee:	2201      	movs	r2, #1
 8079ff0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8079ff4:	687b      	ldr	r3, [r7, #4]
 8079ff6:	681b      	ldr	r3, [r3, #0]
 8079ff8:	68f9      	ldr	r1, [r7, #12]
 8079ffa:	4618      	mov	r0, r3
 8079ffc:	f001 fb1c 	bl	807b638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 807a000:	687b      	ldr	r3, [r7, #4]
 807a002:	2200      	movs	r2, #0
 807a004:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 807a008:	7afb      	ldrb	r3, [r7, #11]
}
 807a00a:	4618      	mov	r0, r3
 807a00c:	3710      	adds	r7, #16
 807a00e:	46bd      	mov	sp, r7
 807a010:	bd80      	pop	{r7, pc}

0807a012 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 807a012:	b580      	push	{r7, lr}
 807a014:	b086      	sub	sp, #24
 807a016:	af00      	add	r7, sp, #0
 807a018:	60f8      	str	r0, [r7, #12]
 807a01a:	607a      	str	r2, [r7, #4]
 807a01c:	603b      	str	r3, [r7, #0]
 807a01e:	460b      	mov	r3, r1
 807a020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 807a022:	7afb      	ldrb	r3, [r7, #11]
 807a024:	f003 020f 	and.w	r2, r3, #15
 807a028:	4613      	mov	r3, r2
 807a02a:	00db      	lsls	r3, r3, #3
 807a02c:	1a9b      	subs	r3, r3, r2
 807a02e:	009b      	lsls	r3, r3, #2
 807a030:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807a034:	68fa      	ldr	r2, [r7, #12]
 807a036:	4413      	add	r3, r2
 807a038:	3304      	adds	r3, #4
 807a03a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 807a03c:	697b      	ldr	r3, [r7, #20]
 807a03e:	687a      	ldr	r2, [r7, #4]
 807a040:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 807a042:	697b      	ldr	r3, [r7, #20]
 807a044:	683a      	ldr	r2, [r7, #0]
 807a046:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 807a048:	697b      	ldr	r3, [r7, #20]
 807a04a:	2200      	movs	r2, #0
 807a04c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 807a04e:	697b      	ldr	r3, [r7, #20]
 807a050:	2200      	movs	r2, #0
 807a052:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a054:	7afb      	ldrb	r3, [r7, #11]
 807a056:	f003 030f 	and.w	r3, r3, #15
 807a05a:	b2da      	uxtb	r2, r3
 807a05c:	697b      	ldr	r3, [r7, #20]
 807a05e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 807a060:	68fb      	ldr	r3, [r7, #12]
 807a062:	691b      	ldr	r3, [r3, #16]
 807a064:	2b01      	cmp	r3, #1
 807a066:	d102      	bne.n	807a06e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 807a068:	687a      	ldr	r2, [r7, #4]
 807a06a:	697b      	ldr	r3, [r7, #20]
 807a06c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a06e:	7afb      	ldrb	r3, [r7, #11]
 807a070:	f003 030f 	and.w	r3, r3, #15
 807a074:	2b00      	cmp	r3, #0
 807a076:	d109      	bne.n	807a08c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a078:	68fb      	ldr	r3, [r7, #12]
 807a07a:	6818      	ldr	r0, [r3, #0]
 807a07c:	68fb      	ldr	r3, [r7, #12]
 807a07e:	691b      	ldr	r3, [r3, #16]
 807a080:	b2db      	uxtb	r3, r3
 807a082:	461a      	mov	r2, r3
 807a084:	6979      	ldr	r1, [r7, #20]
 807a086:	f001 fda3 	bl	807bbd0 <USB_EP0StartXfer>
 807a08a:	e008      	b.n	807a09e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a08c:	68fb      	ldr	r3, [r7, #12]
 807a08e:	6818      	ldr	r0, [r3, #0]
 807a090:	68fb      	ldr	r3, [r7, #12]
 807a092:	691b      	ldr	r3, [r3, #16]
 807a094:	b2db      	uxtb	r3, r3
 807a096:	461a      	mov	r2, r3
 807a098:	6979      	ldr	r1, [r7, #20]
 807a09a:	f001 fb55 	bl	807b748 <USB_EPStartXfer>
  }

  return HAL_OK;
 807a09e:	2300      	movs	r3, #0
}
 807a0a0:	4618      	mov	r0, r3
 807a0a2:	3718      	adds	r7, #24
 807a0a4:	46bd      	mov	sp, r7
 807a0a6:	bd80      	pop	{r7, pc}

0807a0a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 807a0a8:	b580      	push	{r7, lr}
 807a0aa:	b086      	sub	sp, #24
 807a0ac:	af00      	add	r7, sp, #0
 807a0ae:	60f8      	str	r0, [r7, #12]
 807a0b0:	607a      	str	r2, [r7, #4]
 807a0b2:	603b      	str	r3, [r7, #0]
 807a0b4:	460b      	mov	r3, r1
 807a0b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a0b8:	7afb      	ldrb	r3, [r7, #11]
 807a0ba:	f003 020f 	and.w	r2, r3, #15
 807a0be:	4613      	mov	r3, r2
 807a0c0:	00db      	lsls	r3, r3, #3
 807a0c2:	1a9b      	subs	r3, r3, r2
 807a0c4:	009b      	lsls	r3, r3, #2
 807a0c6:	3338      	adds	r3, #56	; 0x38
 807a0c8:	68fa      	ldr	r2, [r7, #12]
 807a0ca:	4413      	add	r3, r2
 807a0cc:	3304      	adds	r3, #4
 807a0ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 807a0d0:	697b      	ldr	r3, [r7, #20]
 807a0d2:	687a      	ldr	r2, [r7, #4]
 807a0d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 807a0d6:	697b      	ldr	r3, [r7, #20]
 807a0d8:	683a      	ldr	r2, [r7, #0]
 807a0da:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 807a0dc:	697b      	ldr	r3, [r7, #20]
 807a0de:	2200      	movs	r2, #0
 807a0e0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 807a0e2:	697b      	ldr	r3, [r7, #20]
 807a0e4:	2201      	movs	r2, #1
 807a0e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a0e8:	7afb      	ldrb	r3, [r7, #11]
 807a0ea:	f003 030f 	and.w	r3, r3, #15
 807a0ee:	b2da      	uxtb	r2, r3
 807a0f0:	697b      	ldr	r3, [r7, #20]
 807a0f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 807a0f4:	68fb      	ldr	r3, [r7, #12]
 807a0f6:	691b      	ldr	r3, [r3, #16]
 807a0f8:	2b01      	cmp	r3, #1
 807a0fa:	d102      	bne.n	807a102 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 807a0fc:	687a      	ldr	r2, [r7, #4]
 807a0fe:	697b      	ldr	r3, [r7, #20]
 807a100:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a102:	7afb      	ldrb	r3, [r7, #11]
 807a104:	f003 030f 	and.w	r3, r3, #15
 807a108:	2b00      	cmp	r3, #0
 807a10a:	d109      	bne.n	807a120 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a10c:	68fb      	ldr	r3, [r7, #12]
 807a10e:	6818      	ldr	r0, [r3, #0]
 807a110:	68fb      	ldr	r3, [r7, #12]
 807a112:	691b      	ldr	r3, [r3, #16]
 807a114:	b2db      	uxtb	r3, r3
 807a116:	461a      	mov	r2, r3
 807a118:	6979      	ldr	r1, [r7, #20]
 807a11a:	f001 fd59 	bl	807bbd0 <USB_EP0StartXfer>
 807a11e:	e008      	b.n	807a132 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a120:	68fb      	ldr	r3, [r7, #12]
 807a122:	6818      	ldr	r0, [r3, #0]
 807a124:	68fb      	ldr	r3, [r7, #12]
 807a126:	691b      	ldr	r3, [r3, #16]
 807a128:	b2db      	uxtb	r3, r3
 807a12a:	461a      	mov	r2, r3
 807a12c:	6979      	ldr	r1, [r7, #20]
 807a12e:	f001 fb0b 	bl	807b748 <USB_EPStartXfer>
  }

  return HAL_OK;
 807a132:	2300      	movs	r3, #0
}
 807a134:	4618      	mov	r0, r3
 807a136:	3718      	adds	r7, #24
 807a138:	46bd      	mov	sp, r7
 807a13a:	bd80      	pop	{r7, pc}

0807a13c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 807a13c:	b580      	push	{r7, lr}
 807a13e:	b084      	sub	sp, #16
 807a140:	af00      	add	r7, sp, #0
 807a142:	6078      	str	r0, [r7, #4]
 807a144:	460b      	mov	r3, r1
 807a146:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 807a148:	78fb      	ldrb	r3, [r7, #3]
 807a14a:	f003 020f 	and.w	r2, r3, #15
 807a14e:	687b      	ldr	r3, [r7, #4]
 807a150:	685b      	ldr	r3, [r3, #4]
 807a152:	429a      	cmp	r2, r3
 807a154:	d901      	bls.n	807a15a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 807a156:	2301      	movs	r3, #1
 807a158:	e050      	b.n	807a1fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 807a15a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807a15e:	2b00      	cmp	r3, #0
 807a160:	da0f      	bge.n	807a182 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a162:	78fb      	ldrb	r3, [r7, #3]
 807a164:	f003 020f 	and.w	r2, r3, #15
 807a168:	4613      	mov	r3, r2
 807a16a:	00db      	lsls	r3, r3, #3
 807a16c:	1a9b      	subs	r3, r3, r2
 807a16e:	009b      	lsls	r3, r3, #2
 807a170:	3338      	adds	r3, #56	; 0x38
 807a172:	687a      	ldr	r2, [r7, #4]
 807a174:	4413      	add	r3, r2
 807a176:	3304      	adds	r3, #4
 807a178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 807a17a:	68fb      	ldr	r3, [r7, #12]
 807a17c:	2201      	movs	r2, #1
 807a17e:	705a      	strb	r2, [r3, #1]
 807a180:	e00d      	b.n	807a19e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 807a182:	78fa      	ldrb	r2, [r7, #3]
 807a184:	4613      	mov	r3, r2
 807a186:	00db      	lsls	r3, r3, #3
 807a188:	1a9b      	subs	r3, r3, r2
 807a18a:	009b      	lsls	r3, r3, #2
 807a18c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807a190:	687a      	ldr	r2, [r7, #4]
 807a192:	4413      	add	r3, r2
 807a194:	3304      	adds	r3, #4
 807a196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 807a198:	68fb      	ldr	r3, [r7, #12]
 807a19a:	2200      	movs	r2, #0
 807a19c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 807a19e:	68fb      	ldr	r3, [r7, #12]
 807a1a0:	2201      	movs	r2, #1
 807a1a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a1a4:	78fb      	ldrb	r3, [r7, #3]
 807a1a6:	f003 030f 	and.w	r3, r3, #15
 807a1aa:	b2da      	uxtb	r2, r3
 807a1ac:	68fb      	ldr	r3, [r7, #12]
 807a1ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 807a1b0:	687b      	ldr	r3, [r7, #4]
 807a1b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 807a1b6:	2b01      	cmp	r3, #1
 807a1b8:	d101      	bne.n	807a1be <HAL_PCD_EP_SetStall+0x82>
 807a1ba:	2302      	movs	r3, #2
 807a1bc:	e01e      	b.n	807a1fc <HAL_PCD_EP_SetStall+0xc0>
 807a1be:	687b      	ldr	r3, [r7, #4]
 807a1c0:	2201      	movs	r2, #1
 807a1c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 807a1c6:	687b      	ldr	r3, [r7, #4]
 807a1c8:	681b      	ldr	r3, [r3, #0]
 807a1ca:	68f9      	ldr	r1, [r7, #12]
 807a1cc:	4618      	mov	r0, r3
 807a1ce:	f001 feb0 	bl	807bf32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a1d2:	78fb      	ldrb	r3, [r7, #3]
 807a1d4:	f003 030f 	and.w	r3, r3, #15
 807a1d8:	2b00      	cmp	r3, #0
 807a1da:	d10a      	bne.n	807a1f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 807a1dc:	687b      	ldr	r3, [r7, #4]
 807a1de:	6818      	ldr	r0, [r3, #0]
 807a1e0:	687b      	ldr	r3, [r7, #4]
 807a1e2:	691b      	ldr	r3, [r3, #16]
 807a1e4:	b2d9      	uxtb	r1, r3
 807a1e6:	687b      	ldr	r3, [r7, #4]
 807a1e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a1ec:	461a      	mov	r2, r3
 807a1ee:	f002 f8a1 	bl	807c334 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 807a1f2:	687b      	ldr	r3, [r7, #4]
 807a1f4:	2200      	movs	r2, #0
 807a1f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 807a1fa:	2300      	movs	r3, #0
}
 807a1fc:	4618      	mov	r0, r3
 807a1fe:	3710      	adds	r7, #16
 807a200:	46bd      	mov	sp, r7
 807a202:	bd80      	pop	{r7, pc}

0807a204 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 807a204:	b580      	push	{r7, lr}
 807a206:	b084      	sub	sp, #16
 807a208:	af00      	add	r7, sp, #0
 807a20a:	6078      	str	r0, [r7, #4]
 807a20c:	460b      	mov	r3, r1
 807a20e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 807a210:	78fb      	ldrb	r3, [r7, #3]
 807a212:	f003 020f 	and.w	r2, r3, #15
 807a216:	687b      	ldr	r3, [r7, #4]
 807a218:	685b      	ldr	r3, [r3, #4]
 807a21a:	429a      	cmp	r2, r3
 807a21c:	d901      	bls.n	807a222 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 807a21e:	2301      	movs	r3, #1
 807a220:	e042      	b.n	807a2a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 807a222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807a226:	2b00      	cmp	r3, #0
 807a228:	da0f      	bge.n	807a24a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a22a:	78fb      	ldrb	r3, [r7, #3]
 807a22c:	f003 020f 	and.w	r2, r3, #15
 807a230:	4613      	mov	r3, r2
 807a232:	00db      	lsls	r3, r3, #3
 807a234:	1a9b      	subs	r3, r3, r2
 807a236:	009b      	lsls	r3, r3, #2
 807a238:	3338      	adds	r3, #56	; 0x38
 807a23a:	687a      	ldr	r2, [r7, #4]
 807a23c:	4413      	add	r3, r2
 807a23e:	3304      	adds	r3, #4
 807a240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 807a242:	68fb      	ldr	r3, [r7, #12]
 807a244:	2201      	movs	r2, #1
 807a246:	705a      	strb	r2, [r3, #1]
 807a248:	e00f      	b.n	807a26a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 807a24a:	78fb      	ldrb	r3, [r7, #3]
 807a24c:	f003 020f 	and.w	r2, r3, #15
 807a250:	4613      	mov	r3, r2
 807a252:	00db      	lsls	r3, r3, #3
 807a254:	1a9b      	subs	r3, r3, r2
 807a256:	009b      	lsls	r3, r3, #2
 807a258:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807a25c:	687a      	ldr	r2, [r7, #4]
 807a25e:	4413      	add	r3, r2
 807a260:	3304      	adds	r3, #4
 807a262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 807a264:	68fb      	ldr	r3, [r7, #12]
 807a266:	2200      	movs	r2, #0
 807a268:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 807a26a:	68fb      	ldr	r3, [r7, #12]
 807a26c:	2200      	movs	r2, #0
 807a26e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a270:	78fb      	ldrb	r3, [r7, #3]
 807a272:	f003 030f 	and.w	r3, r3, #15
 807a276:	b2da      	uxtb	r2, r3
 807a278:	68fb      	ldr	r3, [r7, #12]
 807a27a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 807a27c:	687b      	ldr	r3, [r7, #4]
 807a27e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 807a282:	2b01      	cmp	r3, #1
 807a284:	d101      	bne.n	807a28a <HAL_PCD_EP_ClrStall+0x86>
 807a286:	2302      	movs	r3, #2
 807a288:	e00e      	b.n	807a2a8 <HAL_PCD_EP_ClrStall+0xa4>
 807a28a:	687b      	ldr	r3, [r7, #4]
 807a28c:	2201      	movs	r2, #1
 807a28e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 807a292:	687b      	ldr	r3, [r7, #4]
 807a294:	681b      	ldr	r3, [r3, #0]
 807a296:	68f9      	ldr	r1, [r7, #12]
 807a298:	4618      	mov	r0, r3
 807a29a:	f001 feb8 	bl	807c00e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 807a29e:	687b      	ldr	r3, [r7, #4]
 807a2a0:	2200      	movs	r2, #0
 807a2a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 807a2a6:	2300      	movs	r3, #0
}
 807a2a8:	4618      	mov	r0, r3
 807a2aa:	3710      	adds	r7, #16
 807a2ac:	46bd      	mov	sp, r7
 807a2ae:	bd80      	pop	{r7, pc}

0807a2b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a2b0:	b580      	push	{r7, lr}
 807a2b2:	b08a      	sub	sp, #40	; 0x28
 807a2b4:	af02      	add	r7, sp, #8
 807a2b6:	6078      	str	r0, [r7, #4]
 807a2b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a2ba:	687b      	ldr	r3, [r7, #4]
 807a2bc:	681b      	ldr	r3, [r3, #0]
 807a2be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a2c0:	697b      	ldr	r3, [r7, #20]
 807a2c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 807a2c4:	683a      	ldr	r2, [r7, #0]
 807a2c6:	4613      	mov	r3, r2
 807a2c8:	00db      	lsls	r3, r3, #3
 807a2ca:	1a9b      	subs	r3, r3, r2
 807a2cc:	009b      	lsls	r3, r3, #2
 807a2ce:	3338      	adds	r3, #56	; 0x38
 807a2d0:	687a      	ldr	r2, [r7, #4]
 807a2d2:	4413      	add	r3, r2
 807a2d4:	3304      	adds	r3, #4
 807a2d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 807a2d8:	68fb      	ldr	r3, [r7, #12]
 807a2da:	699a      	ldr	r2, [r3, #24]
 807a2dc:	68fb      	ldr	r3, [r7, #12]
 807a2de:	695b      	ldr	r3, [r3, #20]
 807a2e0:	429a      	cmp	r2, r3
 807a2e2:	d901      	bls.n	807a2e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 807a2e4:	2301      	movs	r3, #1
 807a2e6:	e06c      	b.n	807a3c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 807a2e8:	68fb      	ldr	r3, [r7, #12]
 807a2ea:	695a      	ldr	r2, [r3, #20]
 807a2ec:	68fb      	ldr	r3, [r7, #12]
 807a2ee:	699b      	ldr	r3, [r3, #24]
 807a2f0:	1ad3      	subs	r3, r2, r3
 807a2f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 807a2f4:	68fb      	ldr	r3, [r7, #12]
 807a2f6:	689b      	ldr	r3, [r3, #8]
 807a2f8:	69fa      	ldr	r2, [r7, #28]
 807a2fa:	429a      	cmp	r2, r3
 807a2fc:	d902      	bls.n	807a304 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 807a2fe:	68fb      	ldr	r3, [r7, #12]
 807a300:	689b      	ldr	r3, [r3, #8]
 807a302:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 807a304:	69fb      	ldr	r3, [r7, #28]
 807a306:	3303      	adds	r3, #3
 807a308:	089b      	lsrs	r3, r3, #2
 807a30a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a30c:	e02b      	b.n	807a366 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 807a30e:	68fb      	ldr	r3, [r7, #12]
 807a310:	695a      	ldr	r2, [r3, #20]
 807a312:	68fb      	ldr	r3, [r7, #12]
 807a314:	699b      	ldr	r3, [r3, #24]
 807a316:	1ad3      	subs	r3, r2, r3
 807a318:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 807a31a:	68fb      	ldr	r3, [r7, #12]
 807a31c:	689b      	ldr	r3, [r3, #8]
 807a31e:	69fa      	ldr	r2, [r7, #28]
 807a320:	429a      	cmp	r2, r3
 807a322:	d902      	bls.n	807a32a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 807a324:	68fb      	ldr	r3, [r7, #12]
 807a326:	689b      	ldr	r3, [r3, #8]
 807a328:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 807a32a:	69fb      	ldr	r3, [r7, #28]
 807a32c:	3303      	adds	r3, #3
 807a32e:	089b      	lsrs	r3, r3, #2
 807a330:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 807a332:	68fb      	ldr	r3, [r7, #12]
 807a334:	68d9      	ldr	r1, [r3, #12]
 807a336:	683b      	ldr	r3, [r7, #0]
 807a338:	b2da      	uxtb	r2, r3
 807a33a:	69fb      	ldr	r3, [r7, #28]
 807a33c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 807a33e:	687b      	ldr	r3, [r7, #4]
 807a340:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 807a342:	b2db      	uxtb	r3, r3
 807a344:	9300      	str	r3, [sp, #0]
 807a346:	4603      	mov	r3, r0
 807a348:	6978      	ldr	r0, [r7, #20]
 807a34a:	f001 fd94 	bl	807be76 <USB_WritePacket>

    ep->xfer_buff  += len;
 807a34e:	68fb      	ldr	r3, [r7, #12]
 807a350:	68da      	ldr	r2, [r3, #12]
 807a352:	69fb      	ldr	r3, [r7, #28]
 807a354:	441a      	add	r2, r3
 807a356:	68fb      	ldr	r3, [r7, #12]
 807a358:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 807a35a:	68fb      	ldr	r3, [r7, #12]
 807a35c:	699a      	ldr	r2, [r3, #24]
 807a35e:	69fb      	ldr	r3, [r7, #28]
 807a360:	441a      	add	r2, r3
 807a362:	68fb      	ldr	r3, [r7, #12]
 807a364:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a366:	683b      	ldr	r3, [r7, #0]
 807a368:	015a      	lsls	r2, r3, #5
 807a36a:	693b      	ldr	r3, [r7, #16]
 807a36c:	4413      	add	r3, r2
 807a36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807a372:	699b      	ldr	r3, [r3, #24]
 807a374:	b29b      	uxth	r3, r3
 807a376:	69ba      	ldr	r2, [r7, #24]
 807a378:	429a      	cmp	r2, r3
 807a37a:	d809      	bhi.n	807a390 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 807a37c:	68fb      	ldr	r3, [r7, #12]
 807a37e:	699a      	ldr	r2, [r3, #24]
 807a380:	68fb      	ldr	r3, [r7, #12]
 807a382:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a384:	429a      	cmp	r2, r3
 807a386:	d203      	bcs.n	807a390 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 807a388:	68fb      	ldr	r3, [r7, #12]
 807a38a:	695b      	ldr	r3, [r3, #20]
 807a38c:	2b00      	cmp	r3, #0
 807a38e:	d1be      	bne.n	807a30e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 807a390:	68fb      	ldr	r3, [r7, #12]
 807a392:	695a      	ldr	r2, [r3, #20]
 807a394:	68fb      	ldr	r3, [r7, #12]
 807a396:	699b      	ldr	r3, [r3, #24]
 807a398:	429a      	cmp	r2, r3
 807a39a:	d811      	bhi.n	807a3c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 807a39c:	683b      	ldr	r3, [r7, #0]
 807a39e:	f003 030f 	and.w	r3, r3, #15
 807a3a2:	2201      	movs	r2, #1
 807a3a4:	fa02 f303 	lsl.w	r3, r2, r3
 807a3a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 807a3aa:	693b      	ldr	r3, [r7, #16]
 807a3ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807a3b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807a3b2:	68bb      	ldr	r3, [r7, #8]
 807a3b4:	43db      	mvns	r3, r3
 807a3b6:	6939      	ldr	r1, [r7, #16]
 807a3b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807a3bc:	4013      	ands	r3, r2
 807a3be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 807a3c0:	2300      	movs	r3, #0
}
 807a3c2:	4618      	mov	r0, r3
 807a3c4:	3720      	adds	r7, #32
 807a3c6:	46bd      	mov	sp, r7
 807a3c8:	bd80      	pop	{r7, pc}
	...

0807a3cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a3cc:	b580      	push	{r7, lr}
 807a3ce:	b086      	sub	sp, #24
 807a3d0:	af00      	add	r7, sp, #0
 807a3d2:	6078      	str	r0, [r7, #4]
 807a3d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a3d6:	687b      	ldr	r3, [r7, #4]
 807a3d8:	681b      	ldr	r3, [r3, #0]
 807a3da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a3dc:	697b      	ldr	r3, [r7, #20]
 807a3de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807a3e0:	697b      	ldr	r3, [r7, #20]
 807a3e2:	333c      	adds	r3, #60	; 0x3c
 807a3e4:	3304      	adds	r3, #4
 807a3e6:	681b      	ldr	r3, [r3, #0]
 807a3e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 807a3ea:	683b      	ldr	r3, [r7, #0]
 807a3ec:	015a      	lsls	r2, r3, #5
 807a3ee:	693b      	ldr	r3, [r7, #16]
 807a3f0:	4413      	add	r3, r2
 807a3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a3f6:	689b      	ldr	r3, [r3, #8]
 807a3f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 807a3fa:	687b      	ldr	r3, [r7, #4]
 807a3fc:	691b      	ldr	r3, [r3, #16]
 807a3fe:	2b01      	cmp	r3, #1
 807a400:	f040 80a0 	bne.w	807a544 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 807a404:	68bb      	ldr	r3, [r7, #8]
 807a406:	f003 0308 	and.w	r3, r3, #8
 807a40a:	2b00      	cmp	r3, #0
 807a40c:	d015      	beq.n	807a43a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a40e:	68fb      	ldr	r3, [r7, #12]
 807a410:	4a72      	ldr	r2, [pc, #456]	; (807a5dc <PCD_EP_OutXfrComplete_int+0x210>)
 807a412:	4293      	cmp	r3, r2
 807a414:	f240 80dd 	bls.w	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a418:	68bb      	ldr	r3, [r7, #8]
 807a41a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a41e:	2b00      	cmp	r3, #0
 807a420:	f000 80d7 	beq.w	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a424:	683b      	ldr	r3, [r7, #0]
 807a426:	015a      	lsls	r2, r3, #5
 807a428:	693b      	ldr	r3, [r7, #16]
 807a42a:	4413      	add	r3, r2
 807a42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a430:	461a      	mov	r2, r3
 807a432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a436:	6093      	str	r3, [r2, #8]
 807a438:	e0cb      	b.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 807a43a:	68bb      	ldr	r3, [r7, #8]
 807a43c:	f003 0320 	and.w	r3, r3, #32
 807a440:	2b00      	cmp	r3, #0
 807a442:	d009      	beq.n	807a458 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 807a444:	683b      	ldr	r3, [r7, #0]
 807a446:	015a      	lsls	r2, r3, #5
 807a448:	693b      	ldr	r3, [r7, #16]
 807a44a:	4413      	add	r3, r2
 807a44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a450:	461a      	mov	r2, r3
 807a452:	2320      	movs	r3, #32
 807a454:	6093      	str	r3, [r2, #8]
 807a456:	e0bc      	b.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 807a458:	68bb      	ldr	r3, [r7, #8]
 807a45a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 807a45e:	2b00      	cmp	r3, #0
 807a460:	f040 80b7 	bne.w	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a464:	68fb      	ldr	r3, [r7, #12]
 807a466:	4a5d      	ldr	r2, [pc, #372]	; (807a5dc <PCD_EP_OutXfrComplete_int+0x210>)
 807a468:	4293      	cmp	r3, r2
 807a46a:	d90f      	bls.n	807a48c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a46c:	68bb      	ldr	r3, [r7, #8]
 807a46e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a472:	2b00      	cmp	r3, #0
 807a474:	d00a      	beq.n	807a48c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a476:	683b      	ldr	r3, [r7, #0]
 807a478:	015a      	lsls	r2, r3, #5
 807a47a:	693b      	ldr	r3, [r7, #16]
 807a47c:	4413      	add	r3, r2
 807a47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a482:	461a      	mov	r2, r3
 807a484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a488:	6093      	str	r3, [r2, #8]
 807a48a:	e0a2      	b.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 807a48c:	6879      	ldr	r1, [r7, #4]
 807a48e:	683a      	ldr	r2, [r7, #0]
 807a490:	4613      	mov	r3, r2
 807a492:	00db      	lsls	r3, r3, #3
 807a494:	1a9b      	subs	r3, r3, r2
 807a496:	009b      	lsls	r3, r3, #2
 807a498:	440b      	add	r3, r1
 807a49a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 807a49e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 807a4a0:	683b      	ldr	r3, [r7, #0]
 807a4a2:	0159      	lsls	r1, r3, #5
 807a4a4:	693b      	ldr	r3, [r7, #16]
 807a4a6:	440b      	add	r3, r1
 807a4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a4ac:	691b      	ldr	r3, [r3, #16]
 807a4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 807a4b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 807a4b4:	6878      	ldr	r0, [r7, #4]
 807a4b6:	683a      	ldr	r2, [r7, #0]
 807a4b8:	4613      	mov	r3, r2
 807a4ba:	00db      	lsls	r3, r3, #3
 807a4bc:	1a9b      	subs	r3, r3, r2
 807a4be:	009b      	lsls	r3, r3, #2
 807a4c0:	4403      	add	r3, r0
 807a4c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 807a4c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 807a4c8:	6879      	ldr	r1, [r7, #4]
 807a4ca:	683a      	ldr	r2, [r7, #0]
 807a4cc:	4613      	mov	r3, r2
 807a4ce:	00db      	lsls	r3, r3, #3
 807a4d0:	1a9b      	subs	r3, r3, r2
 807a4d2:	009b      	lsls	r3, r3, #2
 807a4d4:	440b      	add	r3, r1
 807a4d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 807a4da:	6819      	ldr	r1, [r3, #0]
 807a4dc:	6878      	ldr	r0, [r7, #4]
 807a4de:	683a      	ldr	r2, [r7, #0]
 807a4e0:	4613      	mov	r3, r2
 807a4e2:	00db      	lsls	r3, r3, #3
 807a4e4:	1a9b      	subs	r3, r3, r2
 807a4e6:	009b      	lsls	r3, r3, #2
 807a4e8:	4403      	add	r3, r0
 807a4ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 807a4ee:	681b      	ldr	r3, [r3, #0]
 807a4f0:	4419      	add	r1, r3
 807a4f2:	6878      	ldr	r0, [r7, #4]
 807a4f4:	683a      	ldr	r2, [r7, #0]
 807a4f6:	4613      	mov	r3, r2
 807a4f8:	00db      	lsls	r3, r3, #3
 807a4fa:	1a9b      	subs	r3, r3, r2
 807a4fc:	009b      	lsls	r3, r3, #2
 807a4fe:	4403      	add	r3, r0
 807a500:	f503 7302 	add.w	r3, r3, #520	; 0x208
 807a504:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 807a506:	683b      	ldr	r3, [r7, #0]
 807a508:	2b00      	cmp	r3, #0
 807a50a:	d114      	bne.n	807a536 <PCD_EP_OutXfrComplete_int+0x16a>
 807a50c:	6879      	ldr	r1, [r7, #4]
 807a50e:	683a      	ldr	r2, [r7, #0]
 807a510:	4613      	mov	r3, r2
 807a512:	00db      	lsls	r3, r3, #3
 807a514:	1a9b      	subs	r3, r3, r2
 807a516:	009b      	lsls	r3, r3, #2
 807a518:	440b      	add	r3, r1
 807a51a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 807a51e:	681b      	ldr	r3, [r3, #0]
 807a520:	2b00      	cmp	r3, #0
 807a522:	d108      	bne.n	807a536 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 807a524:	687b      	ldr	r3, [r7, #4]
 807a526:	6818      	ldr	r0, [r3, #0]
 807a528:	687b      	ldr	r3, [r7, #4]
 807a52a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a52e:	461a      	mov	r2, r3
 807a530:	2101      	movs	r1, #1
 807a532:	f001 feff 	bl	807c334 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a536:	683b      	ldr	r3, [r7, #0]
 807a538:	b2db      	uxtb	r3, r3
 807a53a:	4619      	mov	r1, r3
 807a53c:	6878      	ldr	r0, [r7, #4]
 807a53e:	f004 fa5b 	bl	807e9f8 <HAL_PCD_DataOutStageCallback>
 807a542:	e046      	b.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 807a544:	68fb      	ldr	r3, [r7, #12]
 807a546:	4a26      	ldr	r2, [pc, #152]	; (807a5e0 <PCD_EP_OutXfrComplete_int+0x214>)
 807a548:	4293      	cmp	r3, r2
 807a54a:	d124      	bne.n	807a596 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 807a54c:	68bb      	ldr	r3, [r7, #8]
 807a54e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 807a552:	2b00      	cmp	r3, #0
 807a554:	d00a      	beq.n	807a56c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a556:	683b      	ldr	r3, [r7, #0]
 807a558:	015a      	lsls	r2, r3, #5
 807a55a:	693b      	ldr	r3, [r7, #16]
 807a55c:	4413      	add	r3, r2
 807a55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a562:	461a      	mov	r2, r3
 807a564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a568:	6093      	str	r3, [r2, #8]
 807a56a:	e032      	b.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 807a56c:	68bb      	ldr	r3, [r7, #8]
 807a56e:	f003 0320 	and.w	r3, r3, #32
 807a572:	2b00      	cmp	r3, #0
 807a574:	d008      	beq.n	807a588 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 807a576:	683b      	ldr	r3, [r7, #0]
 807a578:	015a      	lsls	r2, r3, #5
 807a57a:	693b      	ldr	r3, [r7, #16]
 807a57c:	4413      	add	r3, r2
 807a57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a582:	461a      	mov	r2, r3
 807a584:	2320      	movs	r3, #32
 807a586:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a588:	683b      	ldr	r3, [r7, #0]
 807a58a:	b2db      	uxtb	r3, r3
 807a58c:	4619      	mov	r1, r3
 807a58e:	6878      	ldr	r0, [r7, #4]
 807a590:	f004 fa32 	bl	807e9f8 <HAL_PCD_DataOutStageCallback>
 807a594:	e01d      	b.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 807a596:	683b      	ldr	r3, [r7, #0]
 807a598:	2b00      	cmp	r3, #0
 807a59a:	d114      	bne.n	807a5c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 807a59c:	6879      	ldr	r1, [r7, #4]
 807a59e:	683a      	ldr	r2, [r7, #0]
 807a5a0:	4613      	mov	r3, r2
 807a5a2:	00db      	lsls	r3, r3, #3
 807a5a4:	1a9b      	subs	r3, r3, r2
 807a5a6:	009b      	lsls	r3, r3, #2
 807a5a8:	440b      	add	r3, r1
 807a5aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 807a5ae:	681b      	ldr	r3, [r3, #0]
 807a5b0:	2b00      	cmp	r3, #0
 807a5b2:	d108      	bne.n	807a5c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 807a5b4:	687b      	ldr	r3, [r7, #4]
 807a5b6:	6818      	ldr	r0, [r3, #0]
 807a5b8:	687b      	ldr	r3, [r7, #4]
 807a5ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a5be:	461a      	mov	r2, r3
 807a5c0:	2100      	movs	r1, #0
 807a5c2:	f001 feb7 	bl	807c334 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a5c6:	683b      	ldr	r3, [r7, #0]
 807a5c8:	b2db      	uxtb	r3, r3
 807a5ca:	4619      	mov	r1, r3
 807a5cc:	6878      	ldr	r0, [r7, #4]
 807a5ce:	f004 fa13 	bl	807e9f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 807a5d2:	2300      	movs	r3, #0
}
 807a5d4:	4618      	mov	r0, r3
 807a5d6:	3718      	adds	r7, #24
 807a5d8:	46bd      	mov	sp, r7
 807a5da:	bd80      	pop	{r7, pc}
 807a5dc:	4f54300a 	.word	0x4f54300a
 807a5e0:	4f54310a 	.word	0x4f54310a

0807a5e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a5e4:	b580      	push	{r7, lr}
 807a5e6:	b086      	sub	sp, #24
 807a5e8:	af00      	add	r7, sp, #0
 807a5ea:	6078      	str	r0, [r7, #4]
 807a5ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a5ee:	687b      	ldr	r3, [r7, #4]
 807a5f0:	681b      	ldr	r3, [r3, #0]
 807a5f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a5f4:	697b      	ldr	r3, [r7, #20]
 807a5f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807a5f8:	697b      	ldr	r3, [r7, #20]
 807a5fa:	333c      	adds	r3, #60	; 0x3c
 807a5fc:	3304      	adds	r3, #4
 807a5fe:	681b      	ldr	r3, [r3, #0]
 807a600:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 807a602:	683b      	ldr	r3, [r7, #0]
 807a604:	015a      	lsls	r2, r3, #5
 807a606:	693b      	ldr	r3, [r7, #16]
 807a608:	4413      	add	r3, r2
 807a60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a60e:	689b      	ldr	r3, [r3, #8]
 807a610:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a612:	68fb      	ldr	r3, [r7, #12]
 807a614:	4a15      	ldr	r2, [pc, #84]	; (807a66c <PCD_EP_OutSetupPacket_int+0x88>)
 807a616:	4293      	cmp	r3, r2
 807a618:	d90e      	bls.n	807a638 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a61a:	68bb      	ldr	r3, [r7, #8]
 807a61c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a620:	2b00      	cmp	r3, #0
 807a622:	d009      	beq.n	807a638 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a624:	683b      	ldr	r3, [r7, #0]
 807a626:	015a      	lsls	r2, r3, #5
 807a628:	693b      	ldr	r3, [r7, #16]
 807a62a:	4413      	add	r3, r2
 807a62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a630:	461a      	mov	r2, r3
 807a632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a636:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 807a638:	6878      	ldr	r0, [r7, #4]
 807a63a:	f004 f9cb 	bl	807e9d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 807a63e:	68fb      	ldr	r3, [r7, #12]
 807a640:	4a0a      	ldr	r2, [pc, #40]	; (807a66c <PCD_EP_OutSetupPacket_int+0x88>)
 807a642:	4293      	cmp	r3, r2
 807a644:	d90c      	bls.n	807a660 <PCD_EP_OutSetupPacket_int+0x7c>
 807a646:	687b      	ldr	r3, [r7, #4]
 807a648:	691b      	ldr	r3, [r3, #16]
 807a64a:	2b01      	cmp	r3, #1
 807a64c:	d108      	bne.n	807a660 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 807a64e:	687b      	ldr	r3, [r7, #4]
 807a650:	6818      	ldr	r0, [r3, #0]
 807a652:	687b      	ldr	r3, [r7, #4]
 807a654:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a658:	461a      	mov	r2, r3
 807a65a:	2101      	movs	r1, #1
 807a65c:	f001 fe6a 	bl	807c334 <USB_EP0_OutStart>
  }

  return HAL_OK;
 807a660:	2300      	movs	r3, #0
}
 807a662:	4618      	mov	r0, r3
 807a664:	3718      	adds	r7, #24
 807a666:	46bd      	mov	sp, r7
 807a668:	bd80      	pop	{r7, pc}
 807a66a:	bf00      	nop
 807a66c:	4f54300a 	.word	0x4f54300a

0807a670 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 807a670:	b480      	push	{r7}
 807a672:	b085      	sub	sp, #20
 807a674:	af00      	add	r7, sp, #0
 807a676:	6078      	str	r0, [r7, #4]
 807a678:	460b      	mov	r3, r1
 807a67a:	70fb      	strb	r3, [r7, #3]
 807a67c:	4613      	mov	r3, r2
 807a67e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 807a680:	687b      	ldr	r3, [r7, #4]
 807a682:	681b      	ldr	r3, [r3, #0]
 807a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807a686:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 807a688:	78fb      	ldrb	r3, [r7, #3]
 807a68a:	2b00      	cmp	r3, #0
 807a68c:	d107      	bne.n	807a69e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 807a68e:	883b      	ldrh	r3, [r7, #0]
 807a690:	0419      	lsls	r1, r3, #16
 807a692:	687b      	ldr	r3, [r7, #4]
 807a694:	681b      	ldr	r3, [r3, #0]
 807a696:	68ba      	ldr	r2, [r7, #8]
 807a698:	430a      	orrs	r2, r1
 807a69a:	629a      	str	r2, [r3, #40]	; 0x28
 807a69c:	e028      	b.n	807a6f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 807a69e:	687b      	ldr	r3, [r7, #4]
 807a6a0:	681b      	ldr	r3, [r3, #0]
 807a6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807a6a4:	0c1b      	lsrs	r3, r3, #16
 807a6a6:	68ba      	ldr	r2, [r7, #8]
 807a6a8:	4413      	add	r3, r2
 807a6aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 807a6ac:	2300      	movs	r3, #0
 807a6ae:	73fb      	strb	r3, [r7, #15]
 807a6b0:	e00d      	b.n	807a6ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 807a6b2:	687b      	ldr	r3, [r7, #4]
 807a6b4:	681a      	ldr	r2, [r3, #0]
 807a6b6:	7bfb      	ldrb	r3, [r7, #15]
 807a6b8:	3340      	adds	r3, #64	; 0x40
 807a6ba:	009b      	lsls	r3, r3, #2
 807a6bc:	4413      	add	r3, r2
 807a6be:	685b      	ldr	r3, [r3, #4]
 807a6c0:	0c1b      	lsrs	r3, r3, #16
 807a6c2:	68ba      	ldr	r2, [r7, #8]
 807a6c4:	4413      	add	r3, r2
 807a6c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 807a6c8:	7bfb      	ldrb	r3, [r7, #15]
 807a6ca:	3301      	adds	r3, #1
 807a6cc:	73fb      	strb	r3, [r7, #15]
 807a6ce:	7bfa      	ldrb	r2, [r7, #15]
 807a6d0:	78fb      	ldrb	r3, [r7, #3]
 807a6d2:	3b01      	subs	r3, #1
 807a6d4:	429a      	cmp	r2, r3
 807a6d6:	d3ec      	bcc.n	807a6b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 807a6d8:	883b      	ldrh	r3, [r7, #0]
 807a6da:	0418      	lsls	r0, r3, #16
 807a6dc:	687b      	ldr	r3, [r7, #4]
 807a6de:	6819      	ldr	r1, [r3, #0]
 807a6e0:	78fb      	ldrb	r3, [r7, #3]
 807a6e2:	3b01      	subs	r3, #1
 807a6e4:	68ba      	ldr	r2, [r7, #8]
 807a6e6:	4302      	orrs	r2, r0
 807a6e8:	3340      	adds	r3, #64	; 0x40
 807a6ea:	009b      	lsls	r3, r3, #2
 807a6ec:	440b      	add	r3, r1
 807a6ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 807a6f0:	2300      	movs	r3, #0
}
 807a6f2:	4618      	mov	r0, r3
 807a6f4:	3714      	adds	r7, #20
 807a6f6:	46bd      	mov	sp, r7
 807a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a6fc:	4770      	bx	lr

0807a6fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 807a6fe:	b480      	push	{r7}
 807a700:	b083      	sub	sp, #12
 807a702:	af00      	add	r7, sp, #0
 807a704:	6078      	str	r0, [r7, #4]
 807a706:	460b      	mov	r3, r1
 807a708:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 807a70a:	687b      	ldr	r3, [r7, #4]
 807a70c:	681b      	ldr	r3, [r3, #0]
 807a70e:	887a      	ldrh	r2, [r7, #2]
 807a710:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 807a712:	2300      	movs	r3, #0
}
 807a714:	4618      	mov	r0, r3
 807a716:	370c      	adds	r7, #12
 807a718:	46bd      	mov	sp, r7
 807a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a71e:	4770      	bx	lr

0807a720 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 807a720:	b480      	push	{r7}
 807a722:	b083      	sub	sp, #12
 807a724:	af00      	add	r7, sp, #0
 807a726:	6078      	str	r0, [r7, #4]
 807a728:	460b      	mov	r3, r1
 807a72a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 807a72c:	bf00      	nop
 807a72e:	370c      	adds	r7, #12
 807a730:	46bd      	mov	sp, r7
 807a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a736:	4770      	bx	lr

0807a738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 807a738:	b580      	push	{r7, lr}
 807a73a:	b086      	sub	sp, #24
 807a73c:	af00      	add	r7, sp, #0
 807a73e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 807a740:	687b      	ldr	r3, [r7, #4]
 807a742:	2b00      	cmp	r3, #0
 807a744:	d101      	bne.n	807a74a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 807a746:	2301      	movs	r3, #1
 807a748:	e264      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 807a74a:	687b      	ldr	r3, [r7, #4]
 807a74c:	681b      	ldr	r3, [r3, #0]
 807a74e:	f003 0301 	and.w	r3, r3, #1
 807a752:	2b00      	cmp	r3, #0
 807a754:	d075      	beq.n	807a842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807a756:	4ba3      	ldr	r3, [pc, #652]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a758:	689b      	ldr	r3, [r3, #8]
 807a75a:	f003 030c 	and.w	r3, r3, #12
 807a75e:	2b04      	cmp	r3, #4
 807a760:	d00c      	beq.n	807a77c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807a762:	4ba0      	ldr	r3, [pc, #640]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a764:	689b      	ldr	r3, [r3, #8]
 807a766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807a76a:	2b08      	cmp	r3, #8
 807a76c:	d112      	bne.n	807a794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807a76e:	4b9d      	ldr	r3, [pc, #628]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a770:	685b      	ldr	r3, [r3, #4]
 807a772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 807a776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 807a77a:	d10b      	bne.n	807a794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 807a77c:	4b99      	ldr	r3, [pc, #612]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a77e:	681b      	ldr	r3, [r3, #0]
 807a780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807a784:	2b00      	cmp	r3, #0
 807a786:	d05b      	beq.n	807a840 <HAL_RCC_OscConfig+0x108>
 807a788:	687b      	ldr	r3, [r7, #4]
 807a78a:	685b      	ldr	r3, [r3, #4]
 807a78c:	2b00      	cmp	r3, #0
 807a78e:	d157      	bne.n	807a840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 807a790:	2301      	movs	r3, #1
 807a792:	e23f      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 807a794:	687b      	ldr	r3, [r7, #4]
 807a796:	685b      	ldr	r3, [r3, #4]
 807a798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 807a79c:	d106      	bne.n	807a7ac <HAL_RCC_OscConfig+0x74>
 807a79e:	4b91      	ldr	r3, [pc, #580]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7a0:	681b      	ldr	r3, [r3, #0]
 807a7a2:	4a90      	ldr	r2, [pc, #576]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 807a7a8:	6013      	str	r3, [r2, #0]
 807a7aa:	e01d      	b.n	807a7e8 <HAL_RCC_OscConfig+0xb0>
 807a7ac:	687b      	ldr	r3, [r7, #4]
 807a7ae:	685b      	ldr	r3, [r3, #4]
 807a7b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 807a7b4:	d10c      	bne.n	807a7d0 <HAL_RCC_OscConfig+0x98>
 807a7b6:	4b8b      	ldr	r3, [pc, #556]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7b8:	681b      	ldr	r3, [r3, #0]
 807a7ba:	4a8a      	ldr	r2, [pc, #552]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 807a7c0:	6013      	str	r3, [r2, #0]
 807a7c2:	4b88      	ldr	r3, [pc, #544]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7c4:	681b      	ldr	r3, [r3, #0]
 807a7c6:	4a87      	ldr	r2, [pc, #540]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 807a7cc:	6013      	str	r3, [r2, #0]
 807a7ce:	e00b      	b.n	807a7e8 <HAL_RCC_OscConfig+0xb0>
 807a7d0:	4b84      	ldr	r3, [pc, #528]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7d2:	681b      	ldr	r3, [r3, #0]
 807a7d4:	4a83      	ldr	r2, [pc, #524]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 807a7da:	6013      	str	r3, [r2, #0]
 807a7dc:	4b81      	ldr	r3, [pc, #516]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7de:	681b      	ldr	r3, [r3, #0]
 807a7e0:	4a80      	ldr	r2, [pc, #512]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a7e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 807a7e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 807a7e8:	687b      	ldr	r3, [r7, #4]
 807a7ea:	685b      	ldr	r3, [r3, #4]
 807a7ec:	2b00      	cmp	r3, #0
 807a7ee:	d013      	beq.n	807a818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807a7f0:	f7fe f866 	bl	80788c0 <HAL_GetTick>
 807a7f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807a7f6:	e008      	b.n	807a80a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 807a7f8:	f7fe f862 	bl	80788c0 <HAL_GetTick>
 807a7fc:	4602      	mov	r2, r0
 807a7fe:	693b      	ldr	r3, [r7, #16]
 807a800:	1ad3      	subs	r3, r2, r3
 807a802:	2b64      	cmp	r3, #100	; 0x64
 807a804:	d901      	bls.n	807a80a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 807a806:	2303      	movs	r3, #3
 807a808:	e204      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807a80a:	4b76      	ldr	r3, [pc, #472]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a80c:	681b      	ldr	r3, [r3, #0]
 807a80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807a812:	2b00      	cmp	r3, #0
 807a814:	d0f0      	beq.n	807a7f8 <HAL_RCC_OscConfig+0xc0>
 807a816:	e014      	b.n	807a842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807a818:	f7fe f852 	bl	80788c0 <HAL_GetTick>
 807a81c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807a81e:	e008      	b.n	807a832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 807a820:	f7fe f84e 	bl	80788c0 <HAL_GetTick>
 807a824:	4602      	mov	r2, r0
 807a826:	693b      	ldr	r3, [r7, #16]
 807a828:	1ad3      	subs	r3, r2, r3
 807a82a:	2b64      	cmp	r3, #100	; 0x64
 807a82c:	d901      	bls.n	807a832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 807a82e:	2303      	movs	r3, #3
 807a830:	e1f0      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807a832:	4b6c      	ldr	r3, [pc, #432]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a834:	681b      	ldr	r3, [r3, #0]
 807a836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807a83a:	2b00      	cmp	r3, #0
 807a83c:	d1f0      	bne.n	807a820 <HAL_RCC_OscConfig+0xe8>
 807a83e:	e000      	b.n	807a842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 807a840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 807a842:	687b      	ldr	r3, [r7, #4]
 807a844:	681b      	ldr	r3, [r3, #0]
 807a846:	f003 0302 	and.w	r3, r3, #2
 807a84a:	2b00      	cmp	r3, #0
 807a84c:	d063      	beq.n	807a916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807a84e:	4b65      	ldr	r3, [pc, #404]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a850:	689b      	ldr	r3, [r3, #8]
 807a852:	f003 030c 	and.w	r3, r3, #12
 807a856:	2b00      	cmp	r3, #0
 807a858:	d00b      	beq.n	807a872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807a85a:	4b62      	ldr	r3, [pc, #392]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a85c:	689b      	ldr	r3, [r3, #8]
 807a85e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807a862:	2b08      	cmp	r3, #8
 807a864:	d11c      	bne.n	807a8a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807a866:	4b5f      	ldr	r3, [pc, #380]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a868:	685b      	ldr	r3, [r3, #4]
 807a86a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 807a86e:	2b00      	cmp	r3, #0
 807a870:	d116      	bne.n	807a8a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 807a872:	4b5c      	ldr	r3, [pc, #368]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a874:	681b      	ldr	r3, [r3, #0]
 807a876:	f003 0302 	and.w	r3, r3, #2
 807a87a:	2b00      	cmp	r3, #0
 807a87c:	d005      	beq.n	807a88a <HAL_RCC_OscConfig+0x152>
 807a87e:	687b      	ldr	r3, [r7, #4]
 807a880:	68db      	ldr	r3, [r3, #12]
 807a882:	2b01      	cmp	r3, #1
 807a884:	d001      	beq.n	807a88a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 807a886:	2301      	movs	r3, #1
 807a888:	e1c4      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 807a88a:	4b56      	ldr	r3, [pc, #344]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a88c:	681b      	ldr	r3, [r3, #0]
 807a88e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 807a892:	687b      	ldr	r3, [r7, #4]
 807a894:	691b      	ldr	r3, [r3, #16]
 807a896:	00db      	lsls	r3, r3, #3
 807a898:	4952      	ldr	r1, [pc, #328]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a89a:	4313      	orrs	r3, r2
 807a89c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 807a89e:	e03a      	b.n	807a916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 807a8a0:	687b      	ldr	r3, [r7, #4]
 807a8a2:	68db      	ldr	r3, [r3, #12]
 807a8a4:	2b00      	cmp	r3, #0
 807a8a6:	d020      	beq.n	807a8ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 807a8a8:	4b4f      	ldr	r3, [pc, #316]	; (807a9e8 <HAL_RCC_OscConfig+0x2b0>)
 807a8aa:	2201      	movs	r2, #1
 807a8ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 807a8ae:	f7fe f807 	bl	80788c0 <HAL_GetTick>
 807a8b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807a8b4:	e008      	b.n	807a8c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 807a8b6:	f7fe f803 	bl	80788c0 <HAL_GetTick>
 807a8ba:	4602      	mov	r2, r0
 807a8bc:	693b      	ldr	r3, [r7, #16]
 807a8be:	1ad3      	subs	r3, r2, r3
 807a8c0:	2b02      	cmp	r3, #2
 807a8c2:	d901      	bls.n	807a8c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 807a8c4:	2303      	movs	r3, #3
 807a8c6:	e1a5      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807a8c8:	4b46      	ldr	r3, [pc, #280]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a8ca:	681b      	ldr	r3, [r3, #0]
 807a8cc:	f003 0302 	and.w	r3, r3, #2
 807a8d0:	2b00      	cmp	r3, #0
 807a8d2:	d0f0      	beq.n	807a8b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 807a8d4:	4b43      	ldr	r3, [pc, #268]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a8d6:	681b      	ldr	r3, [r3, #0]
 807a8d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 807a8dc:	687b      	ldr	r3, [r7, #4]
 807a8de:	691b      	ldr	r3, [r3, #16]
 807a8e0:	00db      	lsls	r3, r3, #3
 807a8e2:	4940      	ldr	r1, [pc, #256]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a8e4:	4313      	orrs	r3, r2
 807a8e6:	600b      	str	r3, [r1, #0]
 807a8e8:	e015      	b.n	807a916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 807a8ea:	4b3f      	ldr	r3, [pc, #252]	; (807a9e8 <HAL_RCC_OscConfig+0x2b0>)
 807a8ec:	2200      	movs	r2, #0
 807a8ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 807a8f0:	f7fd ffe6 	bl	80788c0 <HAL_GetTick>
 807a8f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807a8f6:	e008      	b.n	807a90a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 807a8f8:	f7fd ffe2 	bl	80788c0 <HAL_GetTick>
 807a8fc:	4602      	mov	r2, r0
 807a8fe:	693b      	ldr	r3, [r7, #16]
 807a900:	1ad3      	subs	r3, r2, r3
 807a902:	2b02      	cmp	r3, #2
 807a904:	d901      	bls.n	807a90a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 807a906:	2303      	movs	r3, #3
 807a908:	e184      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807a90a:	4b36      	ldr	r3, [pc, #216]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a90c:	681b      	ldr	r3, [r3, #0]
 807a90e:	f003 0302 	and.w	r3, r3, #2
 807a912:	2b00      	cmp	r3, #0
 807a914:	d1f0      	bne.n	807a8f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 807a916:	687b      	ldr	r3, [r7, #4]
 807a918:	681b      	ldr	r3, [r3, #0]
 807a91a:	f003 0308 	and.w	r3, r3, #8
 807a91e:	2b00      	cmp	r3, #0
 807a920:	d030      	beq.n	807a984 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 807a922:	687b      	ldr	r3, [r7, #4]
 807a924:	695b      	ldr	r3, [r3, #20]
 807a926:	2b00      	cmp	r3, #0
 807a928:	d016      	beq.n	807a958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 807a92a:	4b30      	ldr	r3, [pc, #192]	; (807a9ec <HAL_RCC_OscConfig+0x2b4>)
 807a92c:	2201      	movs	r2, #1
 807a92e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 807a930:	f7fd ffc6 	bl	80788c0 <HAL_GetTick>
 807a934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807a936:	e008      	b.n	807a94a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807a938:	f7fd ffc2 	bl	80788c0 <HAL_GetTick>
 807a93c:	4602      	mov	r2, r0
 807a93e:	693b      	ldr	r3, [r7, #16]
 807a940:	1ad3      	subs	r3, r2, r3
 807a942:	2b02      	cmp	r3, #2
 807a944:	d901      	bls.n	807a94a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 807a946:	2303      	movs	r3, #3
 807a948:	e164      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807a94a:	4b26      	ldr	r3, [pc, #152]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 807a94e:	f003 0302 	and.w	r3, r3, #2
 807a952:	2b00      	cmp	r3, #0
 807a954:	d0f0      	beq.n	807a938 <HAL_RCC_OscConfig+0x200>
 807a956:	e015      	b.n	807a984 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 807a958:	4b24      	ldr	r3, [pc, #144]	; (807a9ec <HAL_RCC_OscConfig+0x2b4>)
 807a95a:	2200      	movs	r2, #0
 807a95c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 807a95e:	f7fd ffaf 	bl	80788c0 <HAL_GetTick>
 807a962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807a964:	e008      	b.n	807a978 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807a966:	f7fd ffab 	bl	80788c0 <HAL_GetTick>
 807a96a:	4602      	mov	r2, r0
 807a96c:	693b      	ldr	r3, [r7, #16]
 807a96e:	1ad3      	subs	r3, r2, r3
 807a970:	2b02      	cmp	r3, #2
 807a972:	d901      	bls.n	807a978 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 807a974:	2303      	movs	r3, #3
 807a976:	e14d      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807a978:	4b1a      	ldr	r3, [pc, #104]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a97a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 807a97c:	f003 0302 	and.w	r3, r3, #2
 807a980:	2b00      	cmp	r3, #0
 807a982:	d1f0      	bne.n	807a966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 807a984:	687b      	ldr	r3, [r7, #4]
 807a986:	681b      	ldr	r3, [r3, #0]
 807a988:	f003 0304 	and.w	r3, r3, #4
 807a98c:	2b00      	cmp	r3, #0
 807a98e:	f000 80a0 	beq.w	807aad2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 807a992:	2300      	movs	r3, #0
 807a994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 807a996:	4b13      	ldr	r3, [pc, #76]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807a99a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 807a99e:	2b00      	cmp	r3, #0
 807a9a0:	d10f      	bne.n	807a9c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 807a9a2:	2300      	movs	r3, #0
 807a9a4:	60bb      	str	r3, [r7, #8]
 807a9a6:	4b0f      	ldr	r3, [pc, #60]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807a9aa:	4a0e      	ldr	r2, [pc, #56]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a9ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807a9b0:	6413      	str	r3, [r2, #64]	; 0x40
 807a9b2:	4b0c      	ldr	r3, [pc, #48]	; (807a9e4 <HAL_RCC_OscConfig+0x2ac>)
 807a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807a9b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 807a9ba:	60bb      	str	r3, [r7, #8]
 807a9bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 807a9be:	2301      	movs	r3, #1
 807a9c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807a9c2:	4b0b      	ldr	r3, [pc, #44]	; (807a9f0 <HAL_RCC_OscConfig+0x2b8>)
 807a9c4:	681b      	ldr	r3, [r3, #0]
 807a9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807a9ca:	2b00      	cmp	r3, #0
 807a9cc:	d121      	bne.n	807aa12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 807a9ce:	4b08      	ldr	r3, [pc, #32]	; (807a9f0 <HAL_RCC_OscConfig+0x2b8>)
 807a9d0:	681b      	ldr	r3, [r3, #0]
 807a9d2:	4a07      	ldr	r2, [pc, #28]	; (807a9f0 <HAL_RCC_OscConfig+0x2b8>)
 807a9d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 807a9d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 807a9da:	f7fd ff71 	bl	80788c0 <HAL_GetTick>
 807a9de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807a9e0:	e011      	b.n	807aa06 <HAL_RCC_OscConfig+0x2ce>
 807a9e2:	bf00      	nop
 807a9e4:	40023800 	.word	0x40023800
 807a9e8:	42470000 	.word	0x42470000
 807a9ec:	42470e80 	.word	0x42470e80
 807a9f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 807a9f4:	f7fd ff64 	bl	80788c0 <HAL_GetTick>
 807a9f8:	4602      	mov	r2, r0
 807a9fa:	693b      	ldr	r3, [r7, #16]
 807a9fc:	1ad3      	subs	r3, r2, r3
 807a9fe:	2b02      	cmp	r3, #2
 807aa00:	d901      	bls.n	807aa06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 807aa02:	2303      	movs	r3, #3
 807aa04:	e106      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807aa06:	4b85      	ldr	r3, [pc, #532]	; (807ac1c <HAL_RCC_OscConfig+0x4e4>)
 807aa08:	681b      	ldr	r3, [r3, #0]
 807aa0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807aa0e:	2b00      	cmp	r3, #0
 807aa10:	d0f0      	beq.n	807a9f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 807aa12:	687b      	ldr	r3, [r7, #4]
 807aa14:	689b      	ldr	r3, [r3, #8]
 807aa16:	2b01      	cmp	r3, #1
 807aa18:	d106      	bne.n	807aa28 <HAL_RCC_OscConfig+0x2f0>
 807aa1a:	4b81      	ldr	r3, [pc, #516]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa1e:	4a80      	ldr	r2, [pc, #512]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa20:	f043 0301 	orr.w	r3, r3, #1
 807aa24:	6713      	str	r3, [r2, #112]	; 0x70
 807aa26:	e01c      	b.n	807aa62 <HAL_RCC_OscConfig+0x32a>
 807aa28:	687b      	ldr	r3, [r7, #4]
 807aa2a:	689b      	ldr	r3, [r3, #8]
 807aa2c:	2b05      	cmp	r3, #5
 807aa2e:	d10c      	bne.n	807aa4a <HAL_RCC_OscConfig+0x312>
 807aa30:	4b7b      	ldr	r3, [pc, #492]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa34:	4a7a      	ldr	r2, [pc, #488]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa36:	f043 0304 	orr.w	r3, r3, #4
 807aa3a:	6713      	str	r3, [r2, #112]	; 0x70
 807aa3c:	4b78      	ldr	r3, [pc, #480]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa40:	4a77      	ldr	r2, [pc, #476]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa42:	f043 0301 	orr.w	r3, r3, #1
 807aa46:	6713      	str	r3, [r2, #112]	; 0x70
 807aa48:	e00b      	b.n	807aa62 <HAL_RCC_OscConfig+0x32a>
 807aa4a:	4b75      	ldr	r3, [pc, #468]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa4e:	4a74      	ldr	r2, [pc, #464]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa50:	f023 0301 	bic.w	r3, r3, #1
 807aa54:	6713      	str	r3, [r2, #112]	; 0x70
 807aa56:	4b72      	ldr	r3, [pc, #456]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa5a:	4a71      	ldr	r2, [pc, #452]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa5c:	f023 0304 	bic.w	r3, r3, #4
 807aa60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 807aa62:	687b      	ldr	r3, [r7, #4]
 807aa64:	689b      	ldr	r3, [r3, #8]
 807aa66:	2b00      	cmp	r3, #0
 807aa68:	d015      	beq.n	807aa96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 807aa6a:	f7fd ff29 	bl	80788c0 <HAL_GetTick>
 807aa6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 807aa70:	e00a      	b.n	807aa88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 807aa72:	f7fd ff25 	bl	80788c0 <HAL_GetTick>
 807aa76:	4602      	mov	r2, r0
 807aa78:	693b      	ldr	r3, [r7, #16]
 807aa7a:	1ad3      	subs	r3, r2, r3
 807aa7c:	f241 3288 	movw	r2, #5000	; 0x1388
 807aa80:	4293      	cmp	r3, r2
 807aa82:	d901      	bls.n	807aa88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 807aa84:	2303      	movs	r3, #3
 807aa86:	e0c5      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 807aa88:	4b65      	ldr	r3, [pc, #404]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aa8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa8c:	f003 0302 	and.w	r3, r3, #2
 807aa90:	2b00      	cmp	r3, #0
 807aa92:	d0ee      	beq.n	807aa72 <HAL_RCC_OscConfig+0x33a>
 807aa94:	e014      	b.n	807aac0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 807aa96:	f7fd ff13 	bl	80788c0 <HAL_GetTick>
 807aa9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 807aa9c:	e00a      	b.n	807aab4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 807aa9e:	f7fd ff0f 	bl	80788c0 <HAL_GetTick>
 807aaa2:	4602      	mov	r2, r0
 807aaa4:	693b      	ldr	r3, [r7, #16]
 807aaa6:	1ad3      	subs	r3, r2, r3
 807aaa8:	f241 3288 	movw	r2, #5000	; 0x1388
 807aaac:	4293      	cmp	r3, r2
 807aaae:	d901      	bls.n	807aab4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 807aab0:	2303      	movs	r3, #3
 807aab2:	e0af      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 807aab4:	4b5a      	ldr	r3, [pc, #360]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aab8:	f003 0302 	and.w	r3, r3, #2
 807aabc:	2b00      	cmp	r3, #0
 807aabe:	d1ee      	bne.n	807aa9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 807aac0:	7dfb      	ldrb	r3, [r7, #23]
 807aac2:	2b01      	cmp	r3, #1
 807aac4:	d105      	bne.n	807aad2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 807aac6:	4b56      	ldr	r3, [pc, #344]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807aaca:	4a55      	ldr	r2, [pc, #340]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aacc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 807aad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 807aad2:	687b      	ldr	r3, [r7, #4]
 807aad4:	699b      	ldr	r3, [r3, #24]
 807aad6:	2b00      	cmp	r3, #0
 807aad8:	f000 809b 	beq.w	807ac12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 807aadc:	4b50      	ldr	r3, [pc, #320]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807aade:	689b      	ldr	r3, [r3, #8]
 807aae0:	f003 030c 	and.w	r3, r3, #12
 807aae4:	2b08      	cmp	r3, #8
 807aae6:	d05c      	beq.n	807aba2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 807aae8:	687b      	ldr	r3, [r7, #4]
 807aaea:	699b      	ldr	r3, [r3, #24]
 807aaec:	2b02      	cmp	r3, #2
 807aaee:	d141      	bne.n	807ab74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 807aaf0:	4b4c      	ldr	r3, [pc, #304]	; (807ac24 <HAL_RCC_OscConfig+0x4ec>)
 807aaf2:	2200      	movs	r2, #0
 807aaf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807aaf6:	f7fd fee3 	bl	80788c0 <HAL_GetTick>
 807aafa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807aafc:	e008      	b.n	807ab10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807aafe:	f7fd fedf 	bl	80788c0 <HAL_GetTick>
 807ab02:	4602      	mov	r2, r0
 807ab04:	693b      	ldr	r3, [r7, #16]
 807ab06:	1ad3      	subs	r3, r2, r3
 807ab08:	2b02      	cmp	r3, #2
 807ab0a:	d901      	bls.n	807ab10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 807ab0c:	2303      	movs	r3, #3
 807ab0e:	e081      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab10:	4b43      	ldr	r3, [pc, #268]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807ab12:	681b      	ldr	r3, [r3, #0]
 807ab14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807ab18:	2b00      	cmp	r3, #0
 807ab1a:	d1f0      	bne.n	807aafe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 807ab1c:	687b      	ldr	r3, [r7, #4]
 807ab1e:	69da      	ldr	r2, [r3, #28]
 807ab20:	687b      	ldr	r3, [r7, #4]
 807ab22:	6a1b      	ldr	r3, [r3, #32]
 807ab24:	431a      	orrs	r2, r3
 807ab26:	687b      	ldr	r3, [r7, #4]
 807ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807ab2a:	019b      	lsls	r3, r3, #6
 807ab2c:	431a      	orrs	r2, r3
 807ab2e:	687b      	ldr	r3, [r7, #4]
 807ab30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807ab32:	085b      	lsrs	r3, r3, #1
 807ab34:	3b01      	subs	r3, #1
 807ab36:	041b      	lsls	r3, r3, #16
 807ab38:	431a      	orrs	r2, r3
 807ab3a:	687b      	ldr	r3, [r7, #4]
 807ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807ab3e:	061b      	lsls	r3, r3, #24
 807ab40:	4937      	ldr	r1, [pc, #220]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807ab42:	4313      	orrs	r3, r2
 807ab44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 807ab46:	4b37      	ldr	r3, [pc, #220]	; (807ac24 <HAL_RCC_OscConfig+0x4ec>)
 807ab48:	2201      	movs	r2, #1
 807ab4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807ab4c:	f7fd feb8 	bl	80788c0 <HAL_GetTick>
 807ab50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807ab52:	e008      	b.n	807ab66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807ab54:	f7fd feb4 	bl	80788c0 <HAL_GetTick>
 807ab58:	4602      	mov	r2, r0
 807ab5a:	693b      	ldr	r3, [r7, #16]
 807ab5c:	1ad3      	subs	r3, r2, r3
 807ab5e:	2b02      	cmp	r3, #2
 807ab60:	d901      	bls.n	807ab66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 807ab62:	2303      	movs	r3, #3
 807ab64:	e056      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807ab66:	4b2e      	ldr	r3, [pc, #184]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807ab68:	681b      	ldr	r3, [r3, #0]
 807ab6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807ab6e:	2b00      	cmp	r3, #0
 807ab70:	d0f0      	beq.n	807ab54 <HAL_RCC_OscConfig+0x41c>
 807ab72:	e04e      	b.n	807ac12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 807ab74:	4b2b      	ldr	r3, [pc, #172]	; (807ac24 <HAL_RCC_OscConfig+0x4ec>)
 807ab76:	2200      	movs	r2, #0
 807ab78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807ab7a:	f7fd fea1 	bl	80788c0 <HAL_GetTick>
 807ab7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab80:	e008      	b.n	807ab94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807ab82:	f7fd fe9d 	bl	80788c0 <HAL_GetTick>
 807ab86:	4602      	mov	r2, r0
 807ab88:	693b      	ldr	r3, [r7, #16]
 807ab8a:	1ad3      	subs	r3, r2, r3
 807ab8c:	2b02      	cmp	r3, #2
 807ab8e:	d901      	bls.n	807ab94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 807ab90:	2303      	movs	r3, #3
 807ab92:	e03f      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab94:	4b22      	ldr	r3, [pc, #136]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807ab96:	681b      	ldr	r3, [r3, #0]
 807ab98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807ab9c:	2b00      	cmp	r3, #0
 807ab9e:	d1f0      	bne.n	807ab82 <HAL_RCC_OscConfig+0x44a>
 807aba0:	e037      	b.n	807ac12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 807aba2:	687b      	ldr	r3, [r7, #4]
 807aba4:	699b      	ldr	r3, [r3, #24]
 807aba6:	2b01      	cmp	r3, #1
 807aba8:	d101      	bne.n	807abae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 807abaa:	2301      	movs	r3, #1
 807abac:	e032      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 807abae:	4b1c      	ldr	r3, [pc, #112]	; (807ac20 <HAL_RCC_OscConfig+0x4e8>)
 807abb0:	685b      	ldr	r3, [r3, #4]
 807abb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 807abb4:	687b      	ldr	r3, [r7, #4]
 807abb6:	699b      	ldr	r3, [r3, #24]
 807abb8:	2b01      	cmp	r3, #1
 807abba:	d028      	beq.n	807ac0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 807abbc:	68fb      	ldr	r3, [r7, #12]
 807abbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 807abc2:	687b      	ldr	r3, [r7, #4]
 807abc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 807abc6:	429a      	cmp	r2, r3
 807abc8:	d121      	bne.n	807ac0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 807abca:	68fb      	ldr	r3, [r7, #12]
 807abcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 807abd0:	687b      	ldr	r3, [r7, #4]
 807abd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 807abd4:	429a      	cmp	r2, r3
 807abd6:	d11a      	bne.n	807ac0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 807abd8:	68fa      	ldr	r2, [r7, #12]
 807abda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 807abde:	4013      	ands	r3, r2
 807abe0:	687a      	ldr	r2, [r7, #4]
 807abe2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 807abe4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 807abe6:	4293      	cmp	r3, r2
 807abe8:	d111      	bne.n	807ac0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 807abea:	68fb      	ldr	r3, [r7, #12]
 807abec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 807abf0:	687b      	ldr	r3, [r7, #4]
 807abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807abf4:	085b      	lsrs	r3, r3, #1
 807abf6:	3b01      	subs	r3, #1
 807abf8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 807abfa:	429a      	cmp	r2, r3
 807abfc:	d107      	bne.n	807ac0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 807abfe:	68fb      	ldr	r3, [r7, #12]
 807ac00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 807ac04:	687b      	ldr	r3, [r7, #4]
 807ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807ac08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 807ac0a:	429a      	cmp	r2, r3
 807ac0c:	d001      	beq.n	807ac12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 807ac0e:	2301      	movs	r3, #1
 807ac10:	e000      	b.n	807ac14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 807ac12:	2300      	movs	r3, #0
}
 807ac14:	4618      	mov	r0, r3
 807ac16:	3718      	adds	r7, #24
 807ac18:	46bd      	mov	sp, r7
 807ac1a:	bd80      	pop	{r7, pc}
 807ac1c:	40007000 	.word	0x40007000
 807ac20:	40023800 	.word	0x40023800
 807ac24:	42470060 	.word	0x42470060

0807ac28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 807ac28:	b580      	push	{r7, lr}
 807ac2a:	b084      	sub	sp, #16
 807ac2c:	af00      	add	r7, sp, #0
 807ac2e:	6078      	str	r0, [r7, #4]
 807ac30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 807ac32:	687b      	ldr	r3, [r7, #4]
 807ac34:	2b00      	cmp	r3, #0
 807ac36:	d101      	bne.n	807ac3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 807ac38:	2301      	movs	r3, #1
 807ac3a:	e0cc      	b.n	807add6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 807ac3c:	4b68      	ldr	r3, [pc, #416]	; (807ade0 <HAL_RCC_ClockConfig+0x1b8>)
 807ac3e:	681b      	ldr	r3, [r3, #0]
 807ac40:	f003 0307 	and.w	r3, r3, #7
 807ac44:	683a      	ldr	r2, [r7, #0]
 807ac46:	429a      	cmp	r2, r3
 807ac48:	d90c      	bls.n	807ac64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807ac4a:	4b65      	ldr	r3, [pc, #404]	; (807ade0 <HAL_RCC_ClockConfig+0x1b8>)
 807ac4c:	683a      	ldr	r2, [r7, #0]
 807ac4e:	b2d2      	uxtb	r2, r2
 807ac50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807ac52:	4b63      	ldr	r3, [pc, #396]	; (807ade0 <HAL_RCC_ClockConfig+0x1b8>)
 807ac54:	681b      	ldr	r3, [r3, #0]
 807ac56:	f003 0307 	and.w	r3, r3, #7
 807ac5a:	683a      	ldr	r2, [r7, #0]
 807ac5c:	429a      	cmp	r2, r3
 807ac5e:	d001      	beq.n	807ac64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 807ac60:	2301      	movs	r3, #1
 807ac62:	e0b8      	b.n	807add6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 807ac64:	687b      	ldr	r3, [r7, #4]
 807ac66:	681b      	ldr	r3, [r3, #0]
 807ac68:	f003 0302 	and.w	r3, r3, #2
 807ac6c:	2b00      	cmp	r3, #0
 807ac6e:	d020      	beq.n	807acb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 807ac70:	687b      	ldr	r3, [r7, #4]
 807ac72:	681b      	ldr	r3, [r3, #0]
 807ac74:	f003 0304 	and.w	r3, r3, #4
 807ac78:	2b00      	cmp	r3, #0
 807ac7a:	d005      	beq.n	807ac88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 807ac7c:	4b59      	ldr	r3, [pc, #356]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ac7e:	689b      	ldr	r3, [r3, #8]
 807ac80:	4a58      	ldr	r2, [pc, #352]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ac82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 807ac86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 807ac88:	687b      	ldr	r3, [r7, #4]
 807ac8a:	681b      	ldr	r3, [r3, #0]
 807ac8c:	f003 0308 	and.w	r3, r3, #8
 807ac90:	2b00      	cmp	r3, #0
 807ac92:	d005      	beq.n	807aca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 807ac94:	4b53      	ldr	r3, [pc, #332]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ac96:	689b      	ldr	r3, [r3, #8]
 807ac98:	4a52      	ldr	r2, [pc, #328]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ac9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 807ac9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 807aca0:	4b50      	ldr	r3, [pc, #320]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807aca2:	689b      	ldr	r3, [r3, #8]
 807aca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 807aca8:	687b      	ldr	r3, [r7, #4]
 807acaa:	689b      	ldr	r3, [r3, #8]
 807acac:	494d      	ldr	r1, [pc, #308]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807acae:	4313      	orrs	r3, r2
 807acb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 807acb2:	687b      	ldr	r3, [r7, #4]
 807acb4:	681b      	ldr	r3, [r3, #0]
 807acb6:	f003 0301 	and.w	r3, r3, #1
 807acba:	2b00      	cmp	r3, #0
 807acbc:	d044      	beq.n	807ad48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 807acbe:	687b      	ldr	r3, [r7, #4]
 807acc0:	685b      	ldr	r3, [r3, #4]
 807acc2:	2b01      	cmp	r3, #1
 807acc4:	d107      	bne.n	807acd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807acc6:	4b47      	ldr	r3, [pc, #284]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807acc8:	681b      	ldr	r3, [r3, #0]
 807acca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807acce:	2b00      	cmp	r3, #0
 807acd0:	d119      	bne.n	807ad06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807acd2:	2301      	movs	r3, #1
 807acd4:	e07f      	b.n	807add6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807acd6:	687b      	ldr	r3, [r7, #4]
 807acd8:	685b      	ldr	r3, [r3, #4]
 807acda:	2b02      	cmp	r3, #2
 807acdc:	d003      	beq.n	807ace6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 807acde:	687b      	ldr	r3, [r7, #4]
 807ace0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807ace2:	2b03      	cmp	r3, #3
 807ace4:	d107      	bne.n	807acf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807ace6:	4b3f      	ldr	r3, [pc, #252]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ace8:	681b      	ldr	r3, [r3, #0]
 807acea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807acee:	2b00      	cmp	r3, #0
 807acf0:	d109      	bne.n	807ad06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807acf2:	2301      	movs	r3, #1
 807acf4:	e06f      	b.n	807add6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807acf6:	4b3b      	ldr	r3, [pc, #236]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807acf8:	681b      	ldr	r3, [r3, #0]
 807acfa:	f003 0302 	and.w	r3, r3, #2
 807acfe:	2b00      	cmp	r3, #0
 807ad00:	d101      	bne.n	807ad06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807ad02:	2301      	movs	r3, #1
 807ad04:	e067      	b.n	807add6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 807ad06:	4b37      	ldr	r3, [pc, #220]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ad08:	689b      	ldr	r3, [r3, #8]
 807ad0a:	f023 0203 	bic.w	r2, r3, #3
 807ad0e:	687b      	ldr	r3, [r7, #4]
 807ad10:	685b      	ldr	r3, [r3, #4]
 807ad12:	4934      	ldr	r1, [pc, #208]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ad14:	4313      	orrs	r3, r2
 807ad16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 807ad18:	f7fd fdd2 	bl	80788c0 <HAL_GetTick>
 807ad1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807ad1e:	e00a      	b.n	807ad36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 807ad20:	f7fd fdce 	bl	80788c0 <HAL_GetTick>
 807ad24:	4602      	mov	r2, r0
 807ad26:	68fb      	ldr	r3, [r7, #12]
 807ad28:	1ad3      	subs	r3, r2, r3
 807ad2a:	f241 3288 	movw	r2, #5000	; 0x1388
 807ad2e:	4293      	cmp	r3, r2
 807ad30:	d901      	bls.n	807ad36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 807ad32:	2303      	movs	r3, #3
 807ad34:	e04f      	b.n	807add6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807ad36:	4b2b      	ldr	r3, [pc, #172]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ad38:	689b      	ldr	r3, [r3, #8]
 807ad3a:	f003 020c 	and.w	r2, r3, #12
 807ad3e:	687b      	ldr	r3, [r7, #4]
 807ad40:	685b      	ldr	r3, [r3, #4]
 807ad42:	009b      	lsls	r3, r3, #2
 807ad44:	429a      	cmp	r2, r3
 807ad46:	d1eb      	bne.n	807ad20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 807ad48:	4b25      	ldr	r3, [pc, #148]	; (807ade0 <HAL_RCC_ClockConfig+0x1b8>)
 807ad4a:	681b      	ldr	r3, [r3, #0]
 807ad4c:	f003 0307 	and.w	r3, r3, #7
 807ad50:	683a      	ldr	r2, [r7, #0]
 807ad52:	429a      	cmp	r2, r3
 807ad54:	d20c      	bcs.n	807ad70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807ad56:	4b22      	ldr	r3, [pc, #136]	; (807ade0 <HAL_RCC_ClockConfig+0x1b8>)
 807ad58:	683a      	ldr	r2, [r7, #0]
 807ad5a:	b2d2      	uxtb	r2, r2
 807ad5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807ad5e:	4b20      	ldr	r3, [pc, #128]	; (807ade0 <HAL_RCC_ClockConfig+0x1b8>)
 807ad60:	681b      	ldr	r3, [r3, #0]
 807ad62:	f003 0307 	and.w	r3, r3, #7
 807ad66:	683a      	ldr	r2, [r7, #0]
 807ad68:	429a      	cmp	r2, r3
 807ad6a:	d001      	beq.n	807ad70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 807ad6c:	2301      	movs	r3, #1
 807ad6e:	e032      	b.n	807add6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 807ad70:	687b      	ldr	r3, [r7, #4]
 807ad72:	681b      	ldr	r3, [r3, #0]
 807ad74:	f003 0304 	and.w	r3, r3, #4
 807ad78:	2b00      	cmp	r3, #0
 807ad7a:	d008      	beq.n	807ad8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 807ad7c:	4b19      	ldr	r3, [pc, #100]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ad7e:	689b      	ldr	r3, [r3, #8]
 807ad80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 807ad84:	687b      	ldr	r3, [r7, #4]
 807ad86:	68db      	ldr	r3, [r3, #12]
 807ad88:	4916      	ldr	r1, [pc, #88]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ad8a:	4313      	orrs	r3, r2
 807ad8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 807ad8e:	687b      	ldr	r3, [r7, #4]
 807ad90:	681b      	ldr	r3, [r3, #0]
 807ad92:	f003 0308 	and.w	r3, r3, #8
 807ad96:	2b00      	cmp	r3, #0
 807ad98:	d009      	beq.n	807adae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 807ad9a:	4b12      	ldr	r3, [pc, #72]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807ad9c:	689b      	ldr	r3, [r3, #8]
 807ad9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 807ada2:	687b      	ldr	r3, [r7, #4]
 807ada4:	691b      	ldr	r3, [r3, #16]
 807ada6:	00db      	lsls	r3, r3, #3
 807ada8:	490e      	ldr	r1, [pc, #56]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807adaa:	4313      	orrs	r3, r2
 807adac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 807adae:	f000 f82d 	bl	807ae0c <HAL_RCC_GetSysClockFreq>
 807adb2:	4602      	mov	r2, r0
 807adb4:	4b0b      	ldr	r3, [pc, #44]	; (807ade4 <HAL_RCC_ClockConfig+0x1bc>)
 807adb6:	689b      	ldr	r3, [r3, #8]
 807adb8:	091b      	lsrs	r3, r3, #4
 807adba:	f003 030f 	and.w	r3, r3, #15
 807adbe:	490a      	ldr	r1, [pc, #40]	; (807ade8 <HAL_RCC_ClockConfig+0x1c0>)
 807adc0:	5ccb      	ldrb	r3, [r1, r3]
 807adc2:	fa22 f303 	lsr.w	r3, r2, r3
 807adc6:	4a09      	ldr	r2, [pc, #36]	; (807adec <HAL_RCC_ClockConfig+0x1c4>)
 807adc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 807adca:	4b09      	ldr	r3, [pc, #36]	; (807adf0 <HAL_RCC_ClockConfig+0x1c8>)
 807adcc:	681b      	ldr	r3, [r3, #0]
 807adce:	4618      	mov	r0, r3
 807add0:	f7fd fd32 	bl	8078838 <HAL_InitTick>

  return HAL_OK;
 807add4:	2300      	movs	r3, #0
}
 807add6:	4618      	mov	r0, r3
 807add8:	3710      	adds	r7, #16
 807adda:	46bd      	mov	sp, r7
 807addc:	bd80      	pop	{r7, pc}
 807adde:	bf00      	nop
 807ade0:	40023c00 	.word	0x40023c00
 807ade4:	40023800 	.word	0x40023800
 807ade8:	0807f018 	.word	0x0807f018
 807adec:	20000000 	.word	0x20000000
 807adf0:	20000004 	.word	0x20000004

0807adf4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 807adf4:	b480      	push	{r7}
 807adf6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 807adf8:	4b03      	ldr	r3, [pc, #12]	; (807ae08 <HAL_RCC_EnableCSS+0x14>)
 807adfa:	2201      	movs	r2, #1
 807adfc:	601a      	str	r2, [r3, #0]
}
 807adfe:	bf00      	nop
 807ae00:	46bd      	mov	sp, r7
 807ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ae06:	4770      	bx	lr
 807ae08:	4247004c 	.word	0x4247004c

0807ae0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 807ae0c:	b5b0      	push	{r4, r5, r7, lr}
 807ae0e:	b084      	sub	sp, #16
 807ae10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 807ae12:	2100      	movs	r1, #0
 807ae14:	6079      	str	r1, [r7, #4]
 807ae16:	2100      	movs	r1, #0
 807ae18:	60f9      	str	r1, [r7, #12]
 807ae1a:	2100      	movs	r1, #0
 807ae1c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 807ae1e:	2100      	movs	r1, #0
 807ae20:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 807ae22:	4952      	ldr	r1, [pc, #328]	; (807af6c <HAL_RCC_GetSysClockFreq+0x160>)
 807ae24:	6889      	ldr	r1, [r1, #8]
 807ae26:	f001 010c 	and.w	r1, r1, #12
 807ae2a:	2908      	cmp	r1, #8
 807ae2c:	d00d      	beq.n	807ae4a <HAL_RCC_GetSysClockFreq+0x3e>
 807ae2e:	2908      	cmp	r1, #8
 807ae30:	f200 8094 	bhi.w	807af5c <HAL_RCC_GetSysClockFreq+0x150>
 807ae34:	2900      	cmp	r1, #0
 807ae36:	d002      	beq.n	807ae3e <HAL_RCC_GetSysClockFreq+0x32>
 807ae38:	2904      	cmp	r1, #4
 807ae3a:	d003      	beq.n	807ae44 <HAL_RCC_GetSysClockFreq+0x38>
 807ae3c:	e08e      	b.n	807af5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 807ae3e:	4b4c      	ldr	r3, [pc, #304]	; (807af70 <HAL_RCC_GetSysClockFreq+0x164>)
 807ae40:	60bb      	str	r3, [r7, #8]
       break;
 807ae42:	e08e      	b.n	807af62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 807ae44:	4b4b      	ldr	r3, [pc, #300]	; (807af74 <HAL_RCC_GetSysClockFreq+0x168>)
 807ae46:	60bb      	str	r3, [r7, #8]
      break;
 807ae48:	e08b      	b.n	807af62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 807ae4a:	4948      	ldr	r1, [pc, #288]	; (807af6c <HAL_RCC_GetSysClockFreq+0x160>)
 807ae4c:	6849      	ldr	r1, [r1, #4]
 807ae4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 807ae52:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 807ae54:	4945      	ldr	r1, [pc, #276]	; (807af6c <HAL_RCC_GetSysClockFreq+0x160>)
 807ae56:	6849      	ldr	r1, [r1, #4]
 807ae58:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 807ae5c:	2900      	cmp	r1, #0
 807ae5e:	d024      	beq.n	807aeaa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 807ae60:	4942      	ldr	r1, [pc, #264]	; (807af6c <HAL_RCC_GetSysClockFreq+0x160>)
 807ae62:	6849      	ldr	r1, [r1, #4]
 807ae64:	0989      	lsrs	r1, r1, #6
 807ae66:	4608      	mov	r0, r1
 807ae68:	f04f 0100 	mov.w	r1, #0
 807ae6c:	f240 14ff 	movw	r4, #511	; 0x1ff
 807ae70:	f04f 0500 	mov.w	r5, #0
 807ae74:	ea00 0204 	and.w	r2, r0, r4
 807ae78:	ea01 0305 	and.w	r3, r1, r5
 807ae7c:	493d      	ldr	r1, [pc, #244]	; (807af74 <HAL_RCC_GetSysClockFreq+0x168>)
 807ae7e:	fb01 f003 	mul.w	r0, r1, r3
 807ae82:	2100      	movs	r1, #0
 807ae84:	fb01 f102 	mul.w	r1, r1, r2
 807ae88:	1844      	adds	r4, r0, r1
 807ae8a:	493a      	ldr	r1, [pc, #232]	; (807af74 <HAL_RCC_GetSysClockFreq+0x168>)
 807ae8c:	fba2 0101 	umull	r0, r1, r2, r1
 807ae90:	1863      	adds	r3, r4, r1
 807ae92:	4619      	mov	r1, r3
 807ae94:	687b      	ldr	r3, [r7, #4]
 807ae96:	461a      	mov	r2, r3
 807ae98:	f04f 0300 	mov.w	r3, #0
 807ae9c:	f7fd f99c 	bl	80781d8 <__aeabi_uldivmod>
 807aea0:	4602      	mov	r2, r0
 807aea2:	460b      	mov	r3, r1
 807aea4:	4613      	mov	r3, r2
 807aea6:	60fb      	str	r3, [r7, #12]
 807aea8:	e04a      	b.n	807af40 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 807aeaa:	4b30      	ldr	r3, [pc, #192]	; (807af6c <HAL_RCC_GetSysClockFreq+0x160>)
 807aeac:	685b      	ldr	r3, [r3, #4]
 807aeae:	099b      	lsrs	r3, r3, #6
 807aeb0:	461a      	mov	r2, r3
 807aeb2:	f04f 0300 	mov.w	r3, #0
 807aeb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 807aeba:	f04f 0100 	mov.w	r1, #0
 807aebe:	ea02 0400 	and.w	r4, r2, r0
 807aec2:	ea03 0501 	and.w	r5, r3, r1
 807aec6:	4620      	mov	r0, r4
 807aec8:	4629      	mov	r1, r5
 807aeca:	f04f 0200 	mov.w	r2, #0
 807aece:	f04f 0300 	mov.w	r3, #0
 807aed2:	014b      	lsls	r3, r1, #5
 807aed4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 807aed8:	0142      	lsls	r2, r0, #5
 807aeda:	4610      	mov	r0, r2
 807aedc:	4619      	mov	r1, r3
 807aede:	1b00      	subs	r0, r0, r4
 807aee0:	eb61 0105 	sbc.w	r1, r1, r5
 807aee4:	f04f 0200 	mov.w	r2, #0
 807aee8:	f04f 0300 	mov.w	r3, #0
 807aeec:	018b      	lsls	r3, r1, #6
 807aeee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 807aef2:	0182      	lsls	r2, r0, #6
 807aef4:	1a12      	subs	r2, r2, r0
 807aef6:	eb63 0301 	sbc.w	r3, r3, r1
 807aefa:	f04f 0000 	mov.w	r0, #0
 807aefe:	f04f 0100 	mov.w	r1, #0
 807af02:	00d9      	lsls	r1, r3, #3
 807af04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 807af08:	00d0      	lsls	r0, r2, #3
 807af0a:	4602      	mov	r2, r0
 807af0c:	460b      	mov	r3, r1
 807af0e:	1912      	adds	r2, r2, r4
 807af10:	eb45 0303 	adc.w	r3, r5, r3
 807af14:	f04f 0000 	mov.w	r0, #0
 807af18:	f04f 0100 	mov.w	r1, #0
 807af1c:	0299      	lsls	r1, r3, #10
 807af1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 807af22:	0290      	lsls	r0, r2, #10
 807af24:	4602      	mov	r2, r0
 807af26:	460b      	mov	r3, r1
 807af28:	4610      	mov	r0, r2
 807af2a:	4619      	mov	r1, r3
 807af2c:	687b      	ldr	r3, [r7, #4]
 807af2e:	461a      	mov	r2, r3
 807af30:	f04f 0300 	mov.w	r3, #0
 807af34:	f7fd f950 	bl	80781d8 <__aeabi_uldivmod>
 807af38:	4602      	mov	r2, r0
 807af3a:	460b      	mov	r3, r1
 807af3c:	4613      	mov	r3, r2
 807af3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 807af40:	4b0a      	ldr	r3, [pc, #40]	; (807af6c <HAL_RCC_GetSysClockFreq+0x160>)
 807af42:	685b      	ldr	r3, [r3, #4]
 807af44:	0c1b      	lsrs	r3, r3, #16
 807af46:	f003 0303 	and.w	r3, r3, #3
 807af4a:	3301      	adds	r3, #1
 807af4c:	005b      	lsls	r3, r3, #1
 807af4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 807af50:	68fa      	ldr	r2, [r7, #12]
 807af52:	683b      	ldr	r3, [r7, #0]
 807af54:	fbb2 f3f3 	udiv	r3, r2, r3
 807af58:	60bb      	str	r3, [r7, #8]
      break;
 807af5a:	e002      	b.n	807af62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 807af5c:	4b04      	ldr	r3, [pc, #16]	; (807af70 <HAL_RCC_GetSysClockFreq+0x164>)
 807af5e:	60bb      	str	r3, [r7, #8]
      break;
 807af60:	bf00      	nop
    }
  }
  return sysclockfreq;
 807af62:	68bb      	ldr	r3, [r7, #8]
}
 807af64:	4618      	mov	r0, r3
 807af66:	3710      	adds	r7, #16
 807af68:	46bd      	mov	sp, r7
 807af6a:	bdb0      	pop	{r4, r5, r7, pc}
 807af6c:	40023800 	.word	0x40023800
 807af70:	00f42400 	.word	0x00f42400
 807af74:	017d7840 	.word	0x017d7840

0807af78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 807af78:	b480      	push	{r7}
 807af7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 807af7c:	4b03      	ldr	r3, [pc, #12]	; (807af8c <HAL_RCC_GetHCLKFreq+0x14>)
 807af7e:	681b      	ldr	r3, [r3, #0]
}
 807af80:	4618      	mov	r0, r3
 807af82:	46bd      	mov	sp, r7
 807af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 807af88:	4770      	bx	lr
 807af8a:	bf00      	nop
 807af8c:	20000000 	.word	0x20000000

0807af90 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 807af90:	b580      	push	{r7, lr}
 807af92:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 807af94:	4b06      	ldr	r3, [pc, #24]	; (807afb0 <HAL_RCC_NMI_IRQHandler+0x20>)
 807af96:	68db      	ldr	r3, [r3, #12]
 807af98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 807af9c:	2b80      	cmp	r3, #128	; 0x80
 807af9e:	d104      	bne.n	807afaa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 807afa0:	f000 f80a 	bl	807afb8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 807afa4:	4b03      	ldr	r3, [pc, #12]	; (807afb4 <HAL_RCC_NMI_IRQHandler+0x24>)
 807afa6:	2280      	movs	r2, #128	; 0x80
 807afa8:	701a      	strb	r2, [r3, #0]
  }
}
 807afaa:	bf00      	nop
 807afac:	bd80      	pop	{r7, pc}
 807afae:	bf00      	nop
 807afb0:	40023800 	.word	0x40023800
 807afb4:	4002380e 	.word	0x4002380e

0807afb8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 807afb8:	b480      	push	{r7}
 807afba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 807afbc:	bf00      	nop
 807afbe:	46bd      	mov	sp, r7
 807afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807afc4:	4770      	bx	lr

0807afc6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 807afc6:	b084      	sub	sp, #16
 807afc8:	b580      	push	{r7, lr}
 807afca:	b084      	sub	sp, #16
 807afcc:	af00      	add	r7, sp, #0
 807afce:	6078      	str	r0, [r7, #4]
 807afd0:	f107 001c 	add.w	r0, r7, #28
 807afd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 807afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807afda:	2b01      	cmp	r3, #1
 807afdc:	d122      	bne.n	807b024 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 807afde:	687b      	ldr	r3, [r7, #4]
 807afe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807afe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 807afe6:	687b      	ldr	r3, [r7, #4]
 807afe8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 807afea:	687b      	ldr	r3, [r7, #4]
 807afec:	68db      	ldr	r3, [r3, #12]
 807afee:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 807aff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 807aff6:	687a      	ldr	r2, [r7, #4]
 807aff8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 807affa:	687b      	ldr	r3, [r7, #4]
 807affc:	68db      	ldr	r3, [r3, #12]
 807affe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 807b002:	687b      	ldr	r3, [r7, #4]
 807b004:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 807b006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 807b008:	2b01      	cmp	r3, #1
 807b00a:	d105      	bne.n	807b018 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 807b00c:	687b      	ldr	r3, [r7, #4]
 807b00e:	68db      	ldr	r3, [r3, #12]
 807b010:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 807b014:	687b      	ldr	r3, [r7, #4]
 807b016:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 807b018:	6878      	ldr	r0, [r7, #4]
 807b01a:	f001 f9e9 	bl	807c3f0 <USB_CoreReset>
 807b01e:	4603      	mov	r3, r0
 807b020:	73fb      	strb	r3, [r7, #15]
 807b022:	e01a      	b.n	807b05a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 807b024:	687b      	ldr	r3, [r7, #4]
 807b026:	68db      	ldr	r3, [r3, #12]
 807b028:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 807b02c:	687b      	ldr	r3, [r7, #4]
 807b02e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 807b030:	6878      	ldr	r0, [r7, #4]
 807b032:	f001 f9dd 	bl	807c3f0 <USB_CoreReset>
 807b036:	4603      	mov	r3, r0
 807b038:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 807b03a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 807b03c:	2b00      	cmp	r3, #0
 807b03e:	d106      	bne.n	807b04e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 807b040:	687b      	ldr	r3, [r7, #4]
 807b042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 807b048:	687b      	ldr	r3, [r7, #4]
 807b04a:	639a      	str	r2, [r3, #56]	; 0x38
 807b04c:	e005      	b.n	807b05a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 807b04e:	687b      	ldr	r3, [r7, #4]
 807b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 807b056:	687b      	ldr	r3, [r7, #4]
 807b058:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 807b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807b05c:	2b01      	cmp	r3, #1
 807b05e:	d10b      	bne.n	807b078 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 807b060:	687b      	ldr	r3, [r7, #4]
 807b062:	689b      	ldr	r3, [r3, #8]
 807b064:	f043 0206 	orr.w	r2, r3, #6
 807b068:	687b      	ldr	r3, [r7, #4]
 807b06a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 807b06c:	687b      	ldr	r3, [r7, #4]
 807b06e:	689b      	ldr	r3, [r3, #8]
 807b070:	f043 0220 	orr.w	r2, r3, #32
 807b074:	687b      	ldr	r3, [r7, #4]
 807b076:	609a      	str	r2, [r3, #8]
  }

  return ret;
 807b078:	7bfb      	ldrb	r3, [r7, #15]
}
 807b07a:	4618      	mov	r0, r3
 807b07c:	3710      	adds	r7, #16
 807b07e:	46bd      	mov	sp, r7
 807b080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 807b084:	b004      	add	sp, #16
 807b086:	4770      	bx	lr

0807b088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 807b088:	b480      	push	{r7}
 807b08a:	b087      	sub	sp, #28
 807b08c:	af00      	add	r7, sp, #0
 807b08e:	60f8      	str	r0, [r7, #12]
 807b090:	60b9      	str	r1, [r7, #8]
 807b092:	4613      	mov	r3, r2
 807b094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 807b096:	79fb      	ldrb	r3, [r7, #7]
 807b098:	2b02      	cmp	r3, #2
 807b09a:	d165      	bne.n	807b168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 807b09c:	68bb      	ldr	r3, [r7, #8]
 807b09e:	4a41      	ldr	r2, [pc, #260]	; (807b1a4 <USB_SetTurnaroundTime+0x11c>)
 807b0a0:	4293      	cmp	r3, r2
 807b0a2:	d906      	bls.n	807b0b2 <USB_SetTurnaroundTime+0x2a>
 807b0a4:	68bb      	ldr	r3, [r7, #8]
 807b0a6:	4a40      	ldr	r2, [pc, #256]	; (807b1a8 <USB_SetTurnaroundTime+0x120>)
 807b0a8:	4293      	cmp	r3, r2
 807b0aa:	d202      	bcs.n	807b0b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 807b0ac:	230f      	movs	r3, #15
 807b0ae:	617b      	str	r3, [r7, #20]
 807b0b0:	e062      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 807b0b2:	68bb      	ldr	r3, [r7, #8]
 807b0b4:	4a3c      	ldr	r2, [pc, #240]	; (807b1a8 <USB_SetTurnaroundTime+0x120>)
 807b0b6:	4293      	cmp	r3, r2
 807b0b8:	d306      	bcc.n	807b0c8 <USB_SetTurnaroundTime+0x40>
 807b0ba:	68bb      	ldr	r3, [r7, #8]
 807b0bc:	4a3b      	ldr	r2, [pc, #236]	; (807b1ac <USB_SetTurnaroundTime+0x124>)
 807b0be:	4293      	cmp	r3, r2
 807b0c0:	d202      	bcs.n	807b0c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 807b0c2:	230e      	movs	r3, #14
 807b0c4:	617b      	str	r3, [r7, #20]
 807b0c6:	e057      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 807b0c8:	68bb      	ldr	r3, [r7, #8]
 807b0ca:	4a38      	ldr	r2, [pc, #224]	; (807b1ac <USB_SetTurnaroundTime+0x124>)
 807b0cc:	4293      	cmp	r3, r2
 807b0ce:	d306      	bcc.n	807b0de <USB_SetTurnaroundTime+0x56>
 807b0d0:	68bb      	ldr	r3, [r7, #8]
 807b0d2:	4a37      	ldr	r2, [pc, #220]	; (807b1b0 <USB_SetTurnaroundTime+0x128>)
 807b0d4:	4293      	cmp	r3, r2
 807b0d6:	d202      	bcs.n	807b0de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 807b0d8:	230d      	movs	r3, #13
 807b0da:	617b      	str	r3, [r7, #20]
 807b0dc:	e04c      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 807b0de:	68bb      	ldr	r3, [r7, #8]
 807b0e0:	4a33      	ldr	r2, [pc, #204]	; (807b1b0 <USB_SetTurnaroundTime+0x128>)
 807b0e2:	4293      	cmp	r3, r2
 807b0e4:	d306      	bcc.n	807b0f4 <USB_SetTurnaroundTime+0x6c>
 807b0e6:	68bb      	ldr	r3, [r7, #8]
 807b0e8:	4a32      	ldr	r2, [pc, #200]	; (807b1b4 <USB_SetTurnaroundTime+0x12c>)
 807b0ea:	4293      	cmp	r3, r2
 807b0ec:	d802      	bhi.n	807b0f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 807b0ee:	230c      	movs	r3, #12
 807b0f0:	617b      	str	r3, [r7, #20]
 807b0f2:	e041      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 807b0f4:	68bb      	ldr	r3, [r7, #8]
 807b0f6:	4a2f      	ldr	r2, [pc, #188]	; (807b1b4 <USB_SetTurnaroundTime+0x12c>)
 807b0f8:	4293      	cmp	r3, r2
 807b0fa:	d906      	bls.n	807b10a <USB_SetTurnaroundTime+0x82>
 807b0fc:	68bb      	ldr	r3, [r7, #8]
 807b0fe:	4a2e      	ldr	r2, [pc, #184]	; (807b1b8 <USB_SetTurnaroundTime+0x130>)
 807b100:	4293      	cmp	r3, r2
 807b102:	d802      	bhi.n	807b10a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 807b104:	230b      	movs	r3, #11
 807b106:	617b      	str	r3, [r7, #20]
 807b108:	e036      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 807b10a:	68bb      	ldr	r3, [r7, #8]
 807b10c:	4a2a      	ldr	r2, [pc, #168]	; (807b1b8 <USB_SetTurnaroundTime+0x130>)
 807b10e:	4293      	cmp	r3, r2
 807b110:	d906      	bls.n	807b120 <USB_SetTurnaroundTime+0x98>
 807b112:	68bb      	ldr	r3, [r7, #8]
 807b114:	4a29      	ldr	r2, [pc, #164]	; (807b1bc <USB_SetTurnaroundTime+0x134>)
 807b116:	4293      	cmp	r3, r2
 807b118:	d802      	bhi.n	807b120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 807b11a:	230a      	movs	r3, #10
 807b11c:	617b      	str	r3, [r7, #20]
 807b11e:	e02b      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 807b120:	68bb      	ldr	r3, [r7, #8]
 807b122:	4a26      	ldr	r2, [pc, #152]	; (807b1bc <USB_SetTurnaroundTime+0x134>)
 807b124:	4293      	cmp	r3, r2
 807b126:	d906      	bls.n	807b136 <USB_SetTurnaroundTime+0xae>
 807b128:	68bb      	ldr	r3, [r7, #8]
 807b12a:	4a25      	ldr	r2, [pc, #148]	; (807b1c0 <USB_SetTurnaroundTime+0x138>)
 807b12c:	4293      	cmp	r3, r2
 807b12e:	d202      	bcs.n	807b136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 807b130:	2309      	movs	r3, #9
 807b132:	617b      	str	r3, [r7, #20]
 807b134:	e020      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 807b136:	68bb      	ldr	r3, [r7, #8]
 807b138:	4a21      	ldr	r2, [pc, #132]	; (807b1c0 <USB_SetTurnaroundTime+0x138>)
 807b13a:	4293      	cmp	r3, r2
 807b13c:	d306      	bcc.n	807b14c <USB_SetTurnaroundTime+0xc4>
 807b13e:	68bb      	ldr	r3, [r7, #8]
 807b140:	4a20      	ldr	r2, [pc, #128]	; (807b1c4 <USB_SetTurnaroundTime+0x13c>)
 807b142:	4293      	cmp	r3, r2
 807b144:	d802      	bhi.n	807b14c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 807b146:	2308      	movs	r3, #8
 807b148:	617b      	str	r3, [r7, #20]
 807b14a:	e015      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 807b14c:	68bb      	ldr	r3, [r7, #8]
 807b14e:	4a1d      	ldr	r2, [pc, #116]	; (807b1c4 <USB_SetTurnaroundTime+0x13c>)
 807b150:	4293      	cmp	r3, r2
 807b152:	d906      	bls.n	807b162 <USB_SetTurnaroundTime+0xda>
 807b154:	68bb      	ldr	r3, [r7, #8]
 807b156:	4a1c      	ldr	r2, [pc, #112]	; (807b1c8 <USB_SetTurnaroundTime+0x140>)
 807b158:	4293      	cmp	r3, r2
 807b15a:	d202      	bcs.n	807b162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 807b15c:	2307      	movs	r3, #7
 807b15e:	617b      	str	r3, [r7, #20]
 807b160:	e00a      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 807b162:	2306      	movs	r3, #6
 807b164:	617b      	str	r3, [r7, #20]
 807b166:	e007      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 807b168:	79fb      	ldrb	r3, [r7, #7]
 807b16a:	2b00      	cmp	r3, #0
 807b16c:	d102      	bne.n	807b174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 807b16e:	2309      	movs	r3, #9
 807b170:	617b      	str	r3, [r7, #20]
 807b172:	e001      	b.n	807b178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 807b174:	2309      	movs	r3, #9
 807b176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 807b178:	68fb      	ldr	r3, [r7, #12]
 807b17a:	68db      	ldr	r3, [r3, #12]
 807b17c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 807b180:	68fb      	ldr	r3, [r7, #12]
 807b182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 807b184:	68fb      	ldr	r3, [r7, #12]
 807b186:	68da      	ldr	r2, [r3, #12]
 807b188:	697b      	ldr	r3, [r7, #20]
 807b18a:	029b      	lsls	r3, r3, #10
 807b18c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 807b190:	431a      	orrs	r2, r3
 807b192:	68fb      	ldr	r3, [r7, #12]
 807b194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 807b196:	2300      	movs	r3, #0
}
 807b198:	4618      	mov	r0, r3
 807b19a:	371c      	adds	r7, #28
 807b19c:	46bd      	mov	sp, r7
 807b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b1a2:	4770      	bx	lr
 807b1a4:	00d8acbf 	.word	0x00d8acbf
 807b1a8:	00e4e1c0 	.word	0x00e4e1c0
 807b1ac:	00f42400 	.word	0x00f42400
 807b1b0:	01067380 	.word	0x01067380
 807b1b4:	011a499f 	.word	0x011a499f
 807b1b8:	01312cff 	.word	0x01312cff
 807b1bc:	014ca43f 	.word	0x014ca43f
 807b1c0:	016e3600 	.word	0x016e3600
 807b1c4:	01a6ab1f 	.word	0x01a6ab1f
 807b1c8:	01e84800 	.word	0x01e84800

0807b1cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 807b1cc:	b480      	push	{r7}
 807b1ce:	b083      	sub	sp, #12
 807b1d0:	af00      	add	r7, sp, #0
 807b1d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 807b1d4:	687b      	ldr	r3, [r7, #4]
 807b1d6:	689b      	ldr	r3, [r3, #8]
 807b1d8:	f043 0201 	orr.w	r2, r3, #1
 807b1dc:	687b      	ldr	r3, [r7, #4]
 807b1de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 807b1e0:	2300      	movs	r3, #0
}
 807b1e2:	4618      	mov	r0, r3
 807b1e4:	370c      	adds	r7, #12
 807b1e6:	46bd      	mov	sp, r7
 807b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b1ec:	4770      	bx	lr

0807b1ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 807b1ee:	b480      	push	{r7}
 807b1f0:	b083      	sub	sp, #12
 807b1f2:	af00      	add	r7, sp, #0
 807b1f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 807b1f6:	687b      	ldr	r3, [r7, #4]
 807b1f8:	689b      	ldr	r3, [r3, #8]
 807b1fa:	f023 0201 	bic.w	r2, r3, #1
 807b1fe:	687b      	ldr	r3, [r7, #4]
 807b200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 807b202:	2300      	movs	r3, #0
}
 807b204:	4618      	mov	r0, r3
 807b206:	370c      	adds	r7, #12
 807b208:	46bd      	mov	sp, r7
 807b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b20e:	4770      	bx	lr

0807b210 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 807b210:	b580      	push	{r7, lr}
 807b212:	b082      	sub	sp, #8
 807b214:	af00      	add	r7, sp, #0
 807b216:	6078      	str	r0, [r7, #4]
 807b218:	460b      	mov	r3, r1
 807b21a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 807b21c:	687b      	ldr	r3, [r7, #4]
 807b21e:	68db      	ldr	r3, [r3, #12]
 807b220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 807b224:	687b      	ldr	r3, [r7, #4]
 807b226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 807b228:	78fb      	ldrb	r3, [r7, #3]
 807b22a:	2b01      	cmp	r3, #1
 807b22c:	d106      	bne.n	807b23c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 807b22e:	687b      	ldr	r3, [r7, #4]
 807b230:	68db      	ldr	r3, [r3, #12]
 807b232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 807b236:	687b      	ldr	r3, [r7, #4]
 807b238:	60da      	str	r2, [r3, #12]
 807b23a:	e00b      	b.n	807b254 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 807b23c:	78fb      	ldrb	r3, [r7, #3]
 807b23e:	2b00      	cmp	r3, #0
 807b240:	d106      	bne.n	807b250 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 807b242:	687b      	ldr	r3, [r7, #4]
 807b244:	68db      	ldr	r3, [r3, #12]
 807b246:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 807b24a:	687b      	ldr	r3, [r7, #4]
 807b24c:	60da      	str	r2, [r3, #12]
 807b24e:	e001      	b.n	807b254 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 807b250:	2301      	movs	r3, #1
 807b252:	e003      	b.n	807b25c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 807b254:	2032      	movs	r0, #50	; 0x32
 807b256:	f7fd fb3f 	bl	80788d8 <HAL_Delay>

  return HAL_OK;
 807b25a:	2300      	movs	r3, #0
}
 807b25c:	4618      	mov	r0, r3
 807b25e:	3708      	adds	r7, #8
 807b260:	46bd      	mov	sp, r7
 807b262:	bd80      	pop	{r7, pc}

0807b264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 807b264:	b084      	sub	sp, #16
 807b266:	b580      	push	{r7, lr}
 807b268:	b086      	sub	sp, #24
 807b26a:	af00      	add	r7, sp, #0
 807b26c:	6078      	str	r0, [r7, #4]
 807b26e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 807b272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 807b276:	2300      	movs	r3, #0
 807b278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b27a:	687b      	ldr	r3, [r7, #4]
 807b27c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 807b27e:	2300      	movs	r3, #0
 807b280:	613b      	str	r3, [r7, #16]
 807b282:	e009      	b.n	807b298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 807b284:	687a      	ldr	r2, [r7, #4]
 807b286:	693b      	ldr	r3, [r7, #16]
 807b288:	3340      	adds	r3, #64	; 0x40
 807b28a:	009b      	lsls	r3, r3, #2
 807b28c:	4413      	add	r3, r2
 807b28e:	2200      	movs	r2, #0
 807b290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 807b292:	693b      	ldr	r3, [r7, #16]
 807b294:	3301      	adds	r3, #1
 807b296:	613b      	str	r3, [r7, #16]
 807b298:	693b      	ldr	r3, [r7, #16]
 807b29a:	2b0e      	cmp	r3, #14
 807b29c:	d9f2      	bls.n	807b284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 807b29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 807b2a0:	2b00      	cmp	r3, #0
 807b2a2:	d11c      	bne.n	807b2de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 807b2a4:	68fb      	ldr	r3, [r7, #12]
 807b2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b2aa:	685b      	ldr	r3, [r3, #4]
 807b2ac:	68fa      	ldr	r2, [r7, #12]
 807b2ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807b2b2:	f043 0302 	orr.w	r3, r3, #2
 807b2b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 807b2b8:	687b      	ldr	r3, [r7, #4]
 807b2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b2bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 807b2c0:	687b      	ldr	r3, [r7, #4]
 807b2c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 807b2c4:	687b      	ldr	r3, [r7, #4]
 807b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b2c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 807b2cc:	687b      	ldr	r3, [r7, #4]
 807b2ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 807b2d0:	687b      	ldr	r3, [r7, #4]
 807b2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b2d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 807b2d8:	687b      	ldr	r3, [r7, #4]
 807b2da:	639a      	str	r2, [r3, #56]	; 0x38
 807b2dc:	e00b      	b.n	807b2f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 807b2de:	687b      	ldr	r3, [r7, #4]
 807b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b2e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 807b2e6:	687b      	ldr	r3, [r7, #4]
 807b2e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 807b2ea:	687b      	ldr	r3, [r7, #4]
 807b2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b2ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 807b2f2:	687b      	ldr	r3, [r7, #4]
 807b2f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 807b2f6:	68fb      	ldr	r3, [r7, #12]
 807b2f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807b2fc:	461a      	mov	r2, r3
 807b2fe:	2300      	movs	r3, #0
 807b300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 807b302:	68fb      	ldr	r3, [r7, #12]
 807b304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b308:	4619      	mov	r1, r3
 807b30a:	68fb      	ldr	r3, [r7, #12]
 807b30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b310:	461a      	mov	r2, r3
 807b312:	680b      	ldr	r3, [r1, #0]
 807b314:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 807b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 807b318:	2b01      	cmp	r3, #1
 807b31a:	d10c      	bne.n	807b336 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 807b31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807b31e:	2b00      	cmp	r3, #0
 807b320:	d104      	bne.n	807b32c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 807b322:	2100      	movs	r1, #0
 807b324:	6878      	ldr	r0, [r7, #4]
 807b326:	f000 f949 	bl	807b5bc <USB_SetDevSpeed>
 807b32a:	e008      	b.n	807b33e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 807b32c:	2101      	movs	r1, #1
 807b32e:	6878      	ldr	r0, [r7, #4]
 807b330:	f000 f944 	bl	807b5bc <USB_SetDevSpeed>
 807b334:	e003      	b.n	807b33e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 807b336:	2103      	movs	r1, #3
 807b338:	6878      	ldr	r0, [r7, #4]
 807b33a:	f000 f93f 	bl	807b5bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 807b33e:	2110      	movs	r1, #16
 807b340:	6878      	ldr	r0, [r7, #4]
 807b342:	f000 f8f3 	bl	807b52c <USB_FlushTxFifo>
 807b346:	4603      	mov	r3, r0
 807b348:	2b00      	cmp	r3, #0
 807b34a:	d001      	beq.n	807b350 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 807b34c:	2301      	movs	r3, #1
 807b34e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 807b350:	6878      	ldr	r0, [r7, #4]
 807b352:	f000 f911 	bl	807b578 <USB_FlushRxFifo>
 807b356:	4603      	mov	r3, r0
 807b358:	2b00      	cmp	r3, #0
 807b35a:	d001      	beq.n	807b360 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 807b35c:	2301      	movs	r3, #1
 807b35e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 807b360:	68fb      	ldr	r3, [r7, #12]
 807b362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b366:	461a      	mov	r2, r3
 807b368:	2300      	movs	r3, #0
 807b36a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 807b36c:	68fb      	ldr	r3, [r7, #12]
 807b36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b372:	461a      	mov	r2, r3
 807b374:	2300      	movs	r3, #0
 807b376:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 807b378:	68fb      	ldr	r3, [r7, #12]
 807b37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b37e:	461a      	mov	r2, r3
 807b380:	2300      	movs	r3, #0
 807b382:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b384:	2300      	movs	r3, #0
 807b386:	613b      	str	r3, [r7, #16]
 807b388:	e043      	b.n	807b412 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 807b38a:	693b      	ldr	r3, [r7, #16]
 807b38c:	015a      	lsls	r2, r3, #5
 807b38e:	68fb      	ldr	r3, [r7, #12]
 807b390:	4413      	add	r3, r2
 807b392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b396:	681b      	ldr	r3, [r3, #0]
 807b398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807b39c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 807b3a0:	d118      	bne.n	807b3d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 807b3a2:	693b      	ldr	r3, [r7, #16]
 807b3a4:	2b00      	cmp	r3, #0
 807b3a6:	d10a      	bne.n	807b3be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 807b3a8:	693b      	ldr	r3, [r7, #16]
 807b3aa:	015a      	lsls	r2, r3, #5
 807b3ac:	68fb      	ldr	r3, [r7, #12]
 807b3ae:	4413      	add	r3, r2
 807b3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b3b4:	461a      	mov	r2, r3
 807b3b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 807b3ba:	6013      	str	r3, [r2, #0]
 807b3bc:	e013      	b.n	807b3e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 807b3be:	693b      	ldr	r3, [r7, #16]
 807b3c0:	015a      	lsls	r2, r3, #5
 807b3c2:	68fb      	ldr	r3, [r7, #12]
 807b3c4:	4413      	add	r3, r2
 807b3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b3ca:	461a      	mov	r2, r3
 807b3cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 807b3d0:	6013      	str	r3, [r2, #0]
 807b3d2:	e008      	b.n	807b3e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 807b3d4:	693b      	ldr	r3, [r7, #16]
 807b3d6:	015a      	lsls	r2, r3, #5
 807b3d8:	68fb      	ldr	r3, [r7, #12]
 807b3da:	4413      	add	r3, r2
 807b3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b3e0:	461a      	mov	r2, r3
 807b3e2:	2300      	movs	r3, #0
 807b3e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 807b3e6:	693b      	ldr	r3, [r7, #16]
 807b3e8:	015a      	lsls	r2, r3, #5
 807b3ea:	68fb      	ldr	r3, [r7, #12]
 807b3ec:	4413      	add	r3, r2
 807b3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b3f2:	461a      	mov	r2, r3
 807b3f4:	2300      	movs	r3, #0
 807b3f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 807b3f8:	693b      	ldr	r3, [r7, #16]
 807b3fa:	015a      	lsls	r2, r3, #5
 807b3fc:	68fb      	ldr	r3, [r7, #12]
 807b3fe:	4413      	add	r3, r2
 807b400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b404:	461a      	mov	r2, r3
 807b406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 807b40a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b40c:	693b      	ldr	r3, [r7, #16]
 807b40e:	3301      	adds	r3, #1
 807b410:	613b      	str	r3, [r7, #16]
 807b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807b414:	693a      	ldr	r2, [r7, #16]
 807b416:	429a      	cmp	r2, r3
 807b418:	d3b7      	bcc.n	807b38a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b41a:	2300      	movs	r3, #0
 807b41c:	613b      	str	r3, [r7, #16]
 807b41e:	e043      	b.n	807b4a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 807b420:	693b      	ldr	r3, [r7, #16]
 807b422:	015a      	lsls	r2, r3, #5
 807b424:	68fb      	ldr	r3, [r7, #12]
 807b426:	4413      	add	r3, r2
 807b428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b42c:	681b      	ldr	r3, [r3, #0]
 807b42e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807b432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 807b436:	d118      	bne.n	807b46a <USB_DevInit+0x206>
    {
      if (i == 0U)
 807b438:	693b      	ldr	r3, [r7, #16]
 807b43a:	2b00      	cmp	r3, #0
 807b43c:	d10a      	bne.n	807b454 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 807b43e:	693b      	ldr	r3, [r7, #16]
 807b440:	015a      	lsls	r2, r3, #5
 807b442:	68fb      	ldr	r3, [r7, #12]
 807b444:	4413      	add	r3, r2
 807b446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b44a:	461a      	mov	r2, r3
 807b44c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 807b450:	6013      	str	r3, [r2, #0]
 807b452:	e013      	b.n	807b47c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 807b454:	693b      	ldr	r3, [r7, #16]
 807b456:	015a      	lsls	r2, r3, #5
 807b458:	68fb      	ldr	r3, [r7, #12]
 807b45a:	4413      	add	r3, r2
 807b45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b460:	461a      	mov	r2, r3
 807b462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 807b466:	6013      	str	r3, [r2, #0]
 807b468:	e008      	b.n	807b47c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 807b46a:	693b      	ldr	r3, [r7, #16]
 807b46c:	015a      	lsls	r2, r3, #5
 807b46e:	68fb      	ldr	r3, [r7, #12]
 807b470:	4413      	add	r3, r2
 807b472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b476:	461a      	mov	r2, r3
 807b478:	2300      	movs	r3, #0
 807b47a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 807b47c:	693b      	ldr	r3, [r7, #16]
 807b47e:	015a      	lsls	r2, r3, #5
 807b480:	68fb      	ldr	r3, [r7, #12]
 807b482:	4413      	add	r3, r2
 807b484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b488:	461a      	mov	r2, r3
 807b48a:	2300      	movs	r3, #0
 807b48c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 807b48e:	693b      	ldr	r3, [r7, #16]
 807b490:	015a      	lsls	r2, r3, #5
 807b492:	68fb      	ldr	r3, [r7, #12]
 807b494:	4413      	add	r3, r2
 807b496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b49a:	461a      	mov	r2, r3
 807b49c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 807b4a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b4a2:	693b      	ldr	r3, [r7, #16]
 807b4a4:	3301      	adds	r3, #1
 807b4a6:	613b      	str	r3, [r7, #16]
 807b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807b4aa:	693a      	ldr	r2, [r7, #16]
 807b4ac:	429a      	cmp	r2, r3
 807b4ae:	d3b7      	bcc.n	807b420 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 807b4b0:	68fb      	ldr	r3, [r7, #12]
 807b4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b4b6:	691b      	ldr	r3, [r3, #16]
 807b4b8:	68fa      	ldr	r2, [r7, #12]
 807b4ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807b4be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 807b4c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 807b4c4:	687b      	ldr	r3, [r7, #4]
 807b4c6:	2200      	movs	r2, #0
 807b4c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 807b4ca:	687b      	ldr	r3, [r7, #4]
 807b4cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 807b4d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 807b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807b4d4:	2b00      	cmp	r3, #0
 807b4d6:	d105      	bne.n	807b4e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 807b4d8:	687b      	ldr	r3, [r7, #4]
 807b4da:	699b      	ldr	r3, [r3, #24]
 807b4dc:	f043 0210 	orr.w	r2, r3, #16
 807b4e0:	687b      	ldr	r3, [r7, #4]
 807b4e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 807b4e4:	687b      	ldr	r3, [r7, #4]
 807b4e6:	699a      	ldr	r2, [r3, #24]
 807b4e8:	4b0f      	ldr	r3, [pc, #60]	; (807b528 <USB_DevInit+0x2c4>)
 807b4ea:	4313      	orrs	r3, r2
 807b4ec:	687a      	ldr	r2, [r7, #4]
 807b4ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 807b4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 807b4f2:	2b00      	cmp	r3, #0
 807b4f4:	d005      	beq.n	807b502 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 807b4f6:	687b      	ldr	r3, [r7, #4]
 807b4f8:	699b      	ldr	r3, [r3, #24]
 807b4fa:	f043 0208 	orr.w	r2, r3, #8
 807b4fe:	687b      	ldr	r3, [r7, #4]
 807b500:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 807b502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 807b504:	2b01      	cmp	r3, #1
 807b506:	d107      	bne.n	807b518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 807b508:	687b      	ldr	r3, [r7, #4]
 807b50a:	699b      	ldr	r3, [r3, #24]
 807b50c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 807b510:	f043 0304 	orr.w	r3, r3, #4
 807b514:	687a      	ldr	r2, [r7, #4]
 807b516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 807b518:	7dfb      	ldrb	r3, [r7, #23]
}
 807b51a:	4618      	mov	r0, r3
 807b51c:	3718      	adds	r7, #24
 807b51e:	46bd      	mov	sp, r7
 807b520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 807b524:	b004      	add	sp, #16
 807b526:	4770      	bx	lr
 807b528:	803c3800 	.word	0x803c3800

0807b52c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 807b52c:	b480      	push	{r7}
 807b52e:	b085      	sub	sp, #20
 807b530:	af00      	add	r7, sp, #0
 807b532:	6078      	str	r0, [r7, #4]
 807b534:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 807b536:	2300      	movs	r3, #0
 807b538:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 807b53a:	683b      	ldr	r3, [r7, #0]
 807b53c:	019b      	lsls	r3, r3, #6
 807b53e:	f043 0220 	orr.w	r2, r3, #32
 807b542:	687b      	ldr	r3, [r7, #4]
 807b544:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807b546:	68fb      	ldr	r3, [r7, #12]
 807b548:	3301      	adds	r3, #1
 807b54a:	60fb      	str	r3, [r7, #12]
 807b54c:	68fb      	ldr	r3, [r7, #12]
 807b54e:	4a09      	ldr	r2, [pc, #36]	; (807b574 <USB_FlushTxFifo+0x48>)
 807b550:	4293      	cmp	r3, r2
 807b552:	d901      	bls.n	807b558 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 807b554:	2303      	movs	r3, #3
 807b556:	e006      	b.n	807b566 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 807b558:	687b      	ldr	r3, [r7, #4]
 807b55a:	691b      	ldr	r3, [r3, #16]
 807b55c:	f003 0320 	and.w	r3, r3, #32
 807b560:	2b20      	cmp	r3, #32
 807b562:	d0f0      	beq.n	807b546 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 807b564:	2300      	movs	r3, #0
}
 807b566:	4618      	mov	r0, r3
 807b568:	3714      	adds	r7, #20
 807b56a:	46bd      	mov	sp, r7
 807b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b570:	4770      	bx	lr
 807b572:	bf00      	nop
 807b574:	00030d40 	.word	0x00030d40

0807b578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 807b578:	b480      	push	{r7}
 807b57a:	b085      	sub	sp, #20
 807b57c:	af00      	add	r7, sp, #0
 807b57e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 807b580:	2300      	movs	r3, #0
 807b582:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 807b584:	687b      	ldr	r3, [r7, #4]
 807b586:	2210      	movs	r2, #16
 807b588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807b58a:	68fb      	ldr	r3, [r7, #12]
 807b58c:	3301      	adds	r3, #1
 807b58e:	60fb      	str	r3, [r7, #12]
 807b590:	68fb      	ldr	r3, [r7, #12]
 807b592:	4a09      	ldr	r2, [pc, #36]	; (807b5b8 <USB_FlushRxFifo+0x40>)
 807b594:	4293      	cmp	r3, r2
 807b596:	d901      	bls.n	807b59c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 807b598:	2303      	movs	r3, #3
 807b59a:	e006      	b.n	807b5aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 807b59c:	687b      	ldr	r3, [r7, #4]
 807b59e:	691b      	ldr	r3, [r3, #16]
 807b5a0:	f003 0310 	and.w	r3, r3, #16
 807b5a4:	2b10      	cmp	r3, #16
 807b5a6:	d0f0      	beq.n	807b58a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 807b5a8:	2300      	movs	r3, #0
}
 807b5aa:	4618      	mov	r0, r3
 807b5ac:	3714      	adds	r7, #20
 807b5ae:	46bd      	mov	sp, r7
 807b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b5b4:	4770      	bx	lr
 807b5b6:	bf00      	nop
 807b5b8:	00030d40 	.word	0x00030d40

0807b5bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 807b5bc:	b480      	push	{r7}
 807b5be:	b085      	sub	sp, #20
 807b5c0:	af00      	add	r7, sp, #0
 807b5c2:	6078      	str	r0, [r7, #4]
 807b5c4:	460b      	mov	r3, r1
 807b5c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b5c8:	687b      	ldr	r3, [r7, #4]
 807b5ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 807b5cc:	68fb      	ldr	r3, [r7, #12]
 807b5ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b5d2:	681a      	ldr	r2, [r3, #0]
 807b5d4:	78fb      	ldrb	r3, [r7, #3]
 807b5d6:	68f9      	ldr	r1, [r7, #12]
 807b5d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b5dc:	4313      	orrs	r3, r2
 807b5de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 807b5e0:	2300      	movs	r3, #0
}
 807b5e2:	4618      	mov	r0, r3
 807b5e4:	3714      	adds	r7, #20
 807b5e6:	46bd      	mov	sp, r7
 807b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b5ec:	4770      	bx	lr

0807b5ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 807b5ee:	b480      	push	{r7}
 807b5f0:	b087      	sub	sp, #28
 807b5f2:	af00      	add	r7, sp, #0
 807b5f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b5f6:	687b      	ldr	r3, [r7, #4]
 807b5f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 807b5fa:	693b      	ldr	r3, [r7, #16]
 807b5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b600:	689b      	ldr	r3, [r3, #8]
 807b602:	f003 0306 	and.w	r3, r3, #6
 807b606:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 807b608:	68fb      	ldr	r3, [r7, #12]
 807b60a:	2b00      	cmp	r3, #0
 807b60c:	d102      	bne.n	807b614 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 807b60e:	2300      	movs	r3, #0
 807b610:	75fb      	strb	r3, [r7, #23]
 807b612:	e00a      	b.n	807b62a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 807b614:	68fb      	ldr	r3, [r7, #12]
 807b616:	2b02      	cmp	r3, #2
 807b618:	d002      	beq.n	807b620 <USB_GetDevSpeed+0x32>
 807b61a:	68fb      	ldr	r3, [r7, #12]
 807b61c:	2b06      	cmp	r3, #6
 807b61e:	d102      	bne.n	807b626 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 807b620:	2302      	movs	r3, #2
 807b622:	75fb      	strb	r3, [r7, #23]
 807b624:	e001      	b.n	807b62a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 807b626:	230f      	movs	r3, #15
 807b628:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 807b62a:	7dfb      	ldrb	r3, [r7, #23]
}
 807b62c:	4618      	mov	r0, r3
 807b62e:	371c      	adds	r7, #28
 807b630:	46bd      	mov	sp, r7
 807b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b636:	4770      	bx	lr

0807b638 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807b638:	b480      	push	{r7}
 807b63a:	b085      	sub	sp, #20
 807b63c:	af00      	add	r7, sp, #0
 807b63e:	6078      	str	r0, [r7, #4]
 807b640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b642:	687b      	ldr	r3, [r7, #4]
 807b644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807b646:	683b      	ldr	r3, [r7, #0]
 807b648:	781b      	ldrb	r3, [r3, #0]
 807b64a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807b64c:	683b      	ldr	r3, [r7, #0]
 807b64e:	785b      	ldrb	r3, [r3, #1]
 807b650:	2b01      	cmp	r3, #1
 807b652:	d13a      	bne.n	807b6ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 807b654:	68fb      	ldr	r3, [r7, #12]
 807b656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b65a:	69da      	ldr	r2, [r3, #28]
 807b65c:	683b      	ldr	r3, [r7, #0]
 807b65e:	781b      	ldrb	r3, [r3, #0]
 807b660:	f003 030f 	and.w	r3, r3, #15
 807b664:	2101      	movs	r1, #1
 807b666:	fa01 f303 	lsl.w	r3, r1, r3
 807b66a:	b29b      	uxth	r3, r3
 807b66c:	68f9      	ldr	r1, [r7, #12]
 807b66e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b672:	4313      	orrs	r3, r2
 807b674:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 807b676:	68bb      	ldr	r3, [r7, #8]
 807b678:	015a      	lsls	r2, r3, #5
 807b67a:	68fb      	ldr	r3, [r7, #12]
 807b67c:	4413      	add	r3, r2
 807b67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b682:	681b      	ldr	r3, [r3, #0]
 807b684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 807b688:	2b00      	cmp	r3, #0
 807b68a:	d155      	bne.n	807b738 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b68c:	68bb      	ldr	r3, [r7, #8]
 807b68e:	015a      	lsls	r2, r3, #5
 807b690:	68fb      	ldr	r3, [r7, #12]
 807b692:	4413      	add	r3, r2
 807b694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b698:	681a      	ldr	r2, [r3, #0]
 807b69a:	683b      	ldr	r3, [r7, #0]
 807b69c:	689b      	ldr	r3, [r3, #8]
 807b69e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 807b6a2:	683b      	ldr	r3, [r7, #0]
 807b6a4:	78db      	ldrb	r3, [r3, #3]
 807b6a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b6a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 807b6aa:	68bb      	ldr	r3, [r7, #8]
 807b6ac:	059b      	lsls	r3, r3, #22
 807b6ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b6b0:	4313      	orrs	r3, r2
 807b6b2:	68ba      	ldr	r2, [r7, #8]
 807b6b4:	0151      	lsls	r1, r2, #5
 807b6b6:	68fa      	ldr	r2, [r7, #12]
 807b6b8:	440a      	add	r2, r1
 807b6ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b6be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807b6c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 807b6c6:	6013      	str	r3, [r2, #0]
 807b6c8:	e036      	b.n	807b738 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 807b6ca:	68fb      	ldr	r3, [r7, #12]
 807b6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b6d0:	69da      	ldr	r2, [r3, #28]
 807b6d2:	683b      	ldr	r3, [r7, #0]
 807b6d4:	781b      	ldrb	r3, [r3, #0]
 807b6d6:	f003 030f 	and.w	r3, r3, #15
 807b6da:	2101      	movs	r1, #1
 807b6dc:	fa01 f303 	lsl.w	r3, r1, r3
 807b6e0:	041b      	lsls	r3, r3, #16
 807b6e2:	68f9      	ldr	r1, [r7, #12]
 807b6e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b6e8:	4313      	orrs	r3, r2
 807b6ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 807b6ec:	68bb      	ldr	r3, [r7, #8]
 807b6ee:	015a      	lsls	r2, r3, #5
 807b6f0:	68fb      	ldr	r3, [r7, #12]
 807b6f2:	4413      	add	r3, r2
 807b6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b6f8:	681b      	ldr	r3, [r3, #0]
 807b6fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 807b6fe:	2b00      	cmp	r3, #0
 807b700:	d11a      	bne.n	807b738 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 807b702:	68bb      	ldr	r3, [r7, #8]
 807b704:	015a      	lsls	r2, r3, #5
 807b706:	68fb      	ldr	r3, [r7, #12]
 807b708:	4413      	add	r3, r2
 807b70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b70e:	681a      	ldr	r2, [r3, #0]
 807b710:	683b      	ldr	r3, [r7, #0]
 807b712:	689b      	ldr	r3, [r3, #8]
 807b714:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 807b718:	683b      	ldr	r3, [r7, #0]
 807b71a:	78db      	ldrb	r3, [r3, #3]
 807b71c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 807b71e:	430b      	orrs	r3, r1
 807b720:	4313      	orrs	r3, r2
 807b722:	68ba      	ldr	r2, [r7, #8]
 807b724:	0151      	lsls	r1, r2, #5
 807b726:	68fa      	ldr	r2, [r7, #12]
 807b728:	440a      	add	r2, r1
 807b72a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807b72e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807b732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 807b736:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 807b738:	2300      	movs	r3, #0
}
 807b73a:	4618      	mov	r0, r3
 807b73c:	3714      	adds	r7, #20
 807b73e:	46bd      	mov	sp, r7
 807b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b744:	4770      	bx	lr
	...

0807b748 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 807b748:	b580      	push	{r7, lr}
 807b74a:	b08a      	sub	sp, #40	; 0x28
 807b74c:	af02      	add	r7, sp, #8
 807b74e:	60f8      	str	r0, [r7, #12]
 807b750:	60b9      	str	r1, [r7, #8]
 807b752:	4613      	mov	r3, r2
 807b754:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b756:	68fb      	ldr	r3, [r7, #12]
 807b758:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 807b75a:	68bb      	ldr	r3, [r7, #8]
 807b75c:	781b      	ldrb	r3, [r3, #0]
 807b75e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 807b760:	68bb      	ldr	r3, [r7, #8]
 807b762:	785b      	ldrb	r3, [r3, #1]
 807b764:	2b01      	cmp	r3, #1
 807b766:	f040 815c 	bne.w	807ba22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 807b76a:	68bb      	ldr	r3, [r7, #8]
 807b76c:	695b      	ldr	r3, [r3, #20]
 807b76e:	2b00      	cmp	r3, #0
 807b770:	d132      	bne.n	807b7d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807b772:	69bb      	ldr	r3, [r7, #24]
 807b774:	015a      	lsls	r2, r3, #5
 807b776:	69fb      	ldr	r3, [r7, #28]
 807b778:	4413      	add	r3, r2
 807b77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b77e:	691b      	ldr	r3, [r3, #16]
 807b780:	69ba      	ldr	r2, [r7, #24]
 807b782:	0151      	lsls	r1, r2, #5
 807b784:	69fa      	ldr	r2, [r7, #28]
 807b786:	440a      	add	r2, r1
 807b788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b78c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807b790:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807b794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807b796:	69bb      	ldr	r3, [r7, #24]
 807b798:	015a      	lsls	r2, r3, #5
 807b79a:	69fb      	ldr	r3, [r7, #28]
 807b79c:	4413      	add	r3, r2
 807b79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b7a2:	691b      	ldr	r3, [r3, #16]
 807b7a4:	69ba      	ldr	r2, [r7, #24]
 807b7a6:	0151      	lsls	r1, r2, #5
 807b7a8:	69fa      	ldr	r2, [r7, #28]
 807b7aa:	440a      	add	r2, r1
 807b7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b7b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807b7b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807b7b6:	69bb      	ldr	r3, [r7, #24]
 807b7b8:	015a      	lsls	r2, r3, #5
 807b7ba:	69fb      	ldr	r3, [r7, #28]
 807b7bc:	4413      	add	r3, r2
 807b7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b7c2:	691b      	ldr	r3, [r3, #16]
 807b7c4:	69ba      	ldr	r2, [r7, #24]
 807b7c6:	0151      	lsls	r1, r2, #5
 807b7c8:	69fa      	ldr	r2, [r7, #28]
 807b7ca:	440a      	add	r2, r1
 807b7cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b7d0:	0cdb      	lsrs	r3, r3, #19
 807b7d2:	04db      	lsls	r3, r3, #19
 807b7d4:	6113      	str	r3, [r2, #16]
 807b7d6:	e074      	b.n	807b8c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807b7d8:	69bb      	ldr	r3, [r7, #24]
 807b7da:	015a      	lsls	r2, r3, #5
 807b7dc:	69fb      	ldr	r3, [r7, #28]
 807b7de:	4413      	add	r3, r2
 807b7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b7e4:	691b      	ldr	r3, [r3, #16]
 807b7e6:	69ba      	ldr	r2, [r7, #24]
 807b7e8:	0151      	lsls	r1, r2, #5
 807b7ea:	69fa      	ldr	r2, [r7, #28]
 807b7ec:	440a      	add	r2, r1
 807b7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b7f2:	0cdb      	lsrs	r3, r3, #19
 807b7f4:	04db      	lsls	r3, r3, #19
 807b7f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807b7f8:	69bb      	ldr	r3, [r7, #24]
 807b7fa:	015a      	lsls	r2, r3, #5
 807b7fc:	69fb      	ldr	r3, [r7, #28]
 807b7fe:	4413      	add	r3, r2
 807b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b804:	691b      	ldr	r3, [r3, #16]
 807b806:	69ba      	ldr	r2, [r7, #24]
 807b808:	0151      	lsls	r1, r2, #5
 807b80a:	69fa      	ldr	r2, [r7, #28]
 807b80c:	440a      	add	r2, r1
 807b80e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b812:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807b816:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807b81a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 807b81c:	69bb      	ldr	r3, [r7, #24]
 807b81e:	015a      	lsls	r2, r3, #5
 807b820:	69fb      	ldr	r3, [r7, #28]
 807b822:	4413      	add	r3, r2
 807b824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b828:	691a      	ldr	r2, [r3, #16]
 807b82a:	68bb      	ldr	r3, [r7, #8]
 807b82c:	6959      	ldr	r1, [r3, #20]
 807b82e:	68bb      	ldr	r3, [r7, #8]
 807b830:	689b      	ldr	r3, [r3, #8]
 807b832:	440b      	add	r3, r1
 807b834:	1e59      	subs	r1, r3, #1
 807b836:	68bb      	ldr	r3, [r7, #8]
 807b838:	689b      	ldr	r3, [r3, #8]
 807b83a:	fbb1 f3f3 	udiv	r3, r1, r3
 807b83e:	04d9      	lsls	r1, r3, #19
 807b840:	4b9d      	ldr	r3, [pc, #628]	; (807bab8 <USB_EPStartXfer+0x370>)
 807b842:	400b      	ands	r3, r1
 807b844:	69b9      	ldr	r1, [r7, #24]
 807b846:	0148      	lsls	r0, r1, #5
 807b848:	69f9      	ldr	r1, [r7, #28]
 807b84a:	4401      	add	r1, r0
 807b84c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807b850:	4313      	orrs	r3, r2
 807b852:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 807b854:	69bb      	ldr	r3, [r7, #24]
 807b856:	015a      	lsls	r2, r3, #5
 807b858:	69fb      	ldr	r3, [r7, #28]
 807b85a:	4413      	add	r3, r2
 807b85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b860:	691a      	ldr	r2, [r3, #16]
 807b862:	68bb      	ldr	r3, [r7, #8]
 807b864:	695b      	ldr	r3, [r3, #20]
 807b866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807b86a:	69b9      	ldr	r1, [r7, #24]
 807b86c:	0148      	lsls	r0, r1, #5
 807b86e:	69f9      	ldr	r1, [r7, #28]
 807b870:	4401      	add	r1, r0
 807b872:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807b876:	4313      	orrs	r3, r2
 807b878:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 807b87a:	68bb      	ldr	r3, [r7, #8]
 807b87c:	78db      	ldrb	r3, [r3, #3]
 807b87e:	2b01      	cmp	r3, #1
 807b880:	d11f      	bne.n	807b8c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 807b882:	69bb      	ldr	r3, [r7, #24]
 807b884:	015a      	lsls	r2, r3, #5
 807b886:	69fb      	ldr	r3, [r7, #28]
 807b888:	4413      	add	r3, r2
 807b88a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b88e:	691b      	ldr	r3, [r3, #16]
 807b890:	69ba      	ldr	r2, [r7, #24]
 807b892:	0151      	lsls	r1, r2, #5
 807b894:	69fa      	ldr	r2, [r7, #28]
 807b896:	440a      	add	r2, r1
 807b898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b89c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 807b8a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 807b8a2:	69bb      	ldr	r3, [r7, #24]
 807b8a4:	015a      	lsls	r2, r3, #5
 807b8a6:	69fb      	ldr	r3, [r7, #28]
 807b8a8:	4413      	add	r3, r2
 807b8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b8ae:	691b      	ldr	r3, [r3, #16]
 807b8b0:	69ba      	ldr	r2, [r7, #24]
 807b8b2:	0151      	lsls	r1, r2, #5
 807b8b4:	69fa      	ldr	r2, [r7, #28]
 807b8b6:	440a      	add	r2, r1
 807b8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b8bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807b8c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 807b8c2:	79fb      	ldrb	r3, [r7, #7]
 807b8c4:	2b01      	cmp	r3, #1
 807b8c6:	d14b      	bne.n	807b960 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 807b8c8:	68bb      	ldr	r3, [r7, #8]
 807b8ca:	691b      	ldr	r3, [r3, #16]
 807b8cc:	2b00      	cmp	r3, #0
 807b8ce:	d009      	beq.n	807b8e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 807b8d0:	69bb      	ldr	r3, [r7, #24]
 807b8d2:	015a      	lsls	r2, r3, #5
 807b8d4:	69fb      	ldr	r3, [r7, #28]
 807b8d6:	4413      	add	r3, r2
 807b8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b8dc:	461a      	mov	r2, r3
 807b8de:	68bb      	ldr	r3, [r7, #8]
 807b8e0:	691b      	ldr	r3, [r3, #16]
 807b8e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 807b8e4:	68bb      	ldr	r3, [r7, #8]
 807b8e6:	78db      	ldrb	r3, [r3, #3]
 807b8e8:	2b01      	cmp	r3, #1
 807b8ea:	d128      	bne.n	807b93e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807b8ec:	69fb      	ldr	r3, [r7, #28]
 807b8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b8f2:	689b      	ldr	r3, [r3, #8]
 807b8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807b8f8:	2b00      	cmp	r3, #0
 807b8fa:	d110      	bne.n	807b91e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 807b8fc:	69bb      	ldr	r3, [r7, #24]
 807b8fe:	015a      	lsls	r2, r3, #5
 807b900:	69fb      	ldr	r3, [r7, #28]
 807b902:	4413      	add	r3, r2
 807b904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b908:	681b      	ldr	r3, [r3, #0]
 807b90a:	69ba      	ldr	r2, [r7, #24]
 807b90c:	0151      	lsls	r1, r2, #5
 807b90e:	69fa      	ldr	r2, [r7, #28]
 807b910:	440a      	add	r2, r1
 807b912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b916:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807b91a:	6013      	str	r3, [r2, #0]
 807b91c:	e00f      	b.n	807b93e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 807b91e:	69bb      	ldr	r3, [r7, #24]
 807b920:	015a      	lsls	r2, r3, #5
 807b922:	69fb      	ldr	r3, [r7, #28]
 807b924:	4413      	add	r3, r2
 807b926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b92a:	681b      	ldr	r3, [r3, #0]
 807b92c:	69ba      	ldr	r2, [r7, #24]
 807b92e:	0151      	lsls	r1, r2, #5
 807b930:	69fa      	ldr	r2, [r7, #28]
 807b932:	440a      	add	r2, r1
 807b934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807b93c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807b93e:	69bb      	ldr	r3, [r7, #24]
 807b940:	015a      	lsls	r2, r3, #5
 807b942:	69fb      	ldr	r3, [r7, #28]
 807b944:	4413      	add	r3, r2
 807b946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b94a:	681b      	ldr	r3, [r3, #0]
 807b94c:	69ba      	ldr	r2, [r7, #24]
 807b94e:	0151      	lsls	r1, r2, #5
 807b950:	69fa      	ldr	r2, [r7, #28]
 807b952:	440a      	add	r2, r1
 807b954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b958:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807b95c:	6013      	str	r3, [r2, #0]
 807b95e:	e12f      	b.n	807bbc0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807b960:	69bb      	ldr	r3, [r7, #24]
 807b962:	015a      	lsls	r2, r3, #5
 807b964:	69fb      	ldr	r3, [r7, #28]
 807b966:	4413      	add	r3, r2
 807b968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b96c:	681b      	ldr	r3, [r3, #0]
 807b96e:	69ba      	ldr	r2, [r7, #24]
 807b970:	0151      	lsls	r1, r2, #5
 807b972:	69fa      	ldr	r2, [r7, #28]
 807b974:	440a      	add	r2, r1
 807b976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b97a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807b97e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 807b980:	68bb      	ldr	r3, [r7, #8]
 807b982:	78db      	ldrb	r3, [r3, #3]
 807b984:	2b01      	cmp	r3, #1
 807b986:	d015      	beq.n	807b9b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 807b988:	68bb      	ldr	r3, [r7, #8]
 807b98a:	695b      	ldr	r3, [r3, #20]
 807b98c:	2b00      	cmp	r3, #0
 807b98e:	f000 8117 	beq.w	807bbc0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807b992:	69fb      	ldr	r3, [r7, #28]
 807b994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807b99a:	68bb      	ldr	r3, [r7, #8]
 807b99c:	781b      	ldrb	r3, [r3, #0]
 807b99e:	f003 030f 	and.w	r3, r3, #15
 807b9a2:	2101      	movs	r1, #1
 807b9a4:	fa01 f303 	lsl.w	r3, r1, r3
 807b9a8:	69f9      	ldr	r1, [r7, #28]
 807b9aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b9ae:	4313      	orrs	r3, r2
 807b9b0:	634b      	str	r3, [r1, #52]	; 0x34
 807b9b2:	e105      	b.n	807bbc0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807b9b4:	69fb      	ldr	r3, [r7, #28]
 807b9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b9ba:	689b      	ldr	r3, [r3, #8]
 807b9bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807b9c0:	2b00      	cmp	r3, #0
 807b9c2:	d110      	bne.n	807b9e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 807b9c4:	69bb      	ldr	r3, [r7, #24]
 807b9c6:	015a      	lsls	r2, r3, #5
 807b9c8:	69fb      	ldr	r3, [r7, #28]
 807b9ca:	4413      	add	r3, r2
 807b9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b9d0:	681b      	ldr	r3, [r3, #0]
 807b9d2:	69ba      	ldr	r2, [r7, #24]
 807b9d4:	0151      	lsls	r1, r2, #5
 807b9d6:	69fa      	ldr	r2, [r7, #28]
 807b9d8:	440a      	add	r2, r1
 807b9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b9de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807b9e2:	6013      	str	r3, [r2, #0]
 807b9e4:	e00f      	b.n	807ba06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 807b9e6:	69bb      	ldr	r3, [r7, #24]
 807b9e8:	015a      	lsls	r2, r3, #5
 807b9ea:	69fb      	ldr	r3, [r7, #28]
 807b9ec:	4413      	add	r3, r2
 807b9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b9f2:	681b      	ldr	r3, [r3, #0]
 807b9f4:	69ba      	ldr	r2, [r7, #24]
 807b9f6:	0151      	lsls	r1, r2, #5
 807b9f8:	69fa      	ldr	r2, [r7, #28]
 807b9fa:	440a      	add	r2, r1
 807b9fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807ba00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807ba04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 807ba06:	68bb      	ldr	r3, [r7, #8]
 807ba08:	68d9      	ldr	r1, [r3, #12]
 807ba0a:	68bb      	ldr	r3, [r7, #8]
 807ba0c:	781a      	ldrb	r2, [r3, #0]
 807ba0e:	68bb      	ldr	r3, [r7, #8]
 807ba10:	695b      	ldr	r3, [r3, #20]
 807ba12:	b298      	uxth	r0, r3
 807ba14:	79fb      	ldrb	r3, [r7, #7]
 807ba16:	9300      	str	r3, [sp, #0]
 807ba18:	4603      	mov	r3, r0
 807ba1a:	68f8      	ldr	r0, [r7, #12]
 807ba1c:	f000 fa2b 	bl	807be76 <USB_WritePacket>
 807ba20:	e0ce      	b.n	807bbc0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 807ba22:	69bb      	ldr	r3, [r7, #24]
 807ba24:	015a      	lsls	r2, r3, #5
 807ba26:	69fb      	ldr	r3, [r7, #28]
 807ba28:	4413      	add	r3, r2
 807ba2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807ba2e:	691b      	ldr	r3, [r3, #16]
 807ba30:	69ba      	ldr	r2, [r7, #24]
 807ba32:	0151      	lsls	r1, r2, #5
 807ba34:	69fa      	ldr	r2, [r7, #28]
 807ba36:	440a      	add	r2, r1
 807ba38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807ba3c:	0cdb      	lsrs	r3, r3, #19
 807ba3e:	04db      	lsls	r3, r3, #19
 807ba40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807ba42:	69bb      	ldr	r3, [r7, #24]
 807ba44:	015a      	lsls	r2, r3, #5
 807ba46:	69fb      	ldr	r3, [r7, #28]
 807ba48:	4413      	add	r3, r2
 807ba4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807ba4e:	691b      	ldr	r3, [r3, #16]
 807ba50:	69ba      	ldr	r2, [r7, #24]
 807ba52:	0151      	lsls	r1, r2, #5
 807ba54:	69fa      	ldr	r2, [r7, #28]
 807ba56:	440a      	add	r2, r1
 807ba58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807ba5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807ba60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807ba64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 807ba66:	68bb      	ldr	r3, [r7, #8]
 807ba68:	695b      	ldr	r3, [r3, #20]
 807ba6a:	2b00      	cmp	r3, #0
 807ba6c:	d126      	bne.n	807babc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 807ba6e:	69bb      	ldr	r3, [r7, #24]
 807ba70:	015a      	lsls	r2, r3, #5
 807ba72:	69fb      	ldr	r3, [r7, #28]
 807ba74:	4413      	add	r3, r2
 807ba76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807ba7a:	691a      	ldr	r2, [r3, #16]
 807ba7c:	68bb      	ldr	r3, [r7, #8]
 807ba7e:	689b      	ldr	r3, [r3, #8]
 807ba80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807ba84:	69b9      	ldr	r1, [r7, #24]
 807ba86:	0148      	lsls	r0, r1, #5
 807ba88:	69f9      	ldr	r1, [r7, #28]
 807ba8a:	4401      	add	r1, r0
 807ba8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807ba90:	4313      	orrs	r3, r2
 807ba92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807ba94:	69bb      	ldr	r3, [r7, #24]
 807ba96:	015a      	lsls	r2, r3, #5
 807ba98:	69fb      	ldr	r3, [r7, #28]
 807ba9a:	4413      	add	r3, r2
 807ba9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807baa0:	691b      	ldr	r3, [r3, #16]
 807baa2:	69ba      	ldr	r2, [r7, #24]
 807baa4:	0151      	lsls	r1, r2, #5
 807baa6:	69fa      	ldr	r2, [r7, #28]
 807baa8:	440a      	add	r2, r1
 807baaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807baae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807bab2:	6113      	str	r3, [r2, #16]
 807bab4:	e036      	b.n	807bb24 <USB_EPStartXfer+0x3dc>
 807bab6:	bf00      	nop
 807bab8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 807babc:	68bb      	ldr	r3, [r7, #8]
 807babe:	695a      	ldr	r2, [r3, #20]
 807bac0:	68bb      	ldr	r3, [r7, #8]
 807bac2:	689b      	ldr	r3, [r3, #8]
 807bac4:	4413      	add	r3, r2
 807bac6:	1e5a      	subs	r2, r3, #1
 807bac8:	68bb      	ldr	r3, [r7, #8]
 807baca:	689b      	ldr	r3, [r3, #8]
 807bacc:	fbb2 f3f3 	udiv	r3, r2, r3
 807bad0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 807bad2:	69bb      	ldr	r3, [r7, #24]
 807bad4:	015a      	lsls	r2, r3, #5
 807bad6:	69fb      	ldr	r3, [r7, #28]
 807bad8:	4413      	add	r3, r2
 807bada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bade:	691a      	ldr	r2, [r3, #16]
 807bae0:	8afb      	ldrh	r3, [r7, #22]
 807bae2:	04d9      	lsls	r1, r3, #19
 807bae4:	4b39      	ldr	r3, [pc, #228]	; (807bbcc <USB_EPStartXfer+0x484>)
 807bae6:	400b      	ands	r3, r1
 807bae8:	69b9      	ldr	r1, [r7, #24]
 807baea:	0148      	lsls	r0, r1, #5
 807baec:	69f9      	ldr	r1, [r7, #28]
 807baee:	4401      	add	r1, r0
 807baf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807baf4:	4313      	orrs	r3, r2
 807baf6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 807baf8:	69bb      	ldr	r3, [r7, #24]
 807bafa:	015a      	lsls	r2, r3, #5
 807bafc:	69fb      	ldr	r3, [r7, #28]
 807bafe:	4413      	add	r3, r2
 807bb00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb04:	691a      	ldr	r2, [r3, #16]
 807bb06:	68bb      	ldr	r3, [r7, #8]
 807bb08:	689b      	ldr	r3, [r3, #8]
 807bb0a:	8af9      	ldrh	r1, [r7, #22]
 807bb0c:	fb01 f303 	mul.w	r3, r1, r3
 807bb10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bb14:	69b9      	ldr	r1, [r7, #24]
 807bb16:	0148      	lsls	r0, r1, #5
 807bb18:	69f9      	ldr	r1, [r7, #28]
 807bb1a:	4401      	add	r1, r0
 807bb1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807bb20:	4313      	orrs	r3, r2
 807bb22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 807bb24:	79fb      	ldrb	r3, [r7, #7]
 807bb26:	2b01      	cmp	r3, #1
 807bb28:	d10d      	bne.n	807bb46 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 807bb2a:	68bb      	ldr	r3, [r7, #8]
 807bb2c:	68db      	ldr	r3, [r3, #12]
 807bb2e:	2b00      	cmp	r3, #0
 807bb30:	d009      	beq.n	807bb46 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 807bb32:	68bb      	ldr	r3, [r7, #8]
 807bb34:	68d9      	ldr	r1, [r3, #12]
 807bb36:	69bb      	ldr	r3, [r7, #24]
 807bb38:	015a      	lsls	r2, r3, #5
 807bb3a:	69fb      	ldr	r3, [r7, #28]
 807bb3c:	4413      	add	r3, r2
 807bb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb42:	460a      	mov	r2, r1
 807bb44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 807bb46:	68bb      	ldr	r3, [r7, #8]
 807bb48:	78db      	ldrb	r3, [r3, #3]
 807bb4a:	2b01      	cmp	r3, #1
 807bb4c:	d128      	bne.n	807bba0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807bb4e:	69fb      	ldr	r3, [r7, #28]
 807bb50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807bb54:	689b      	ldr	r3, [r3, #8]
 807bb56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807bb5a:	2b00      	cmp	r3, #0
 807bb5c:	d110      	bne.n	807bb80 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 807bb5e:	69bb      	ldr	r3, [r7, #24]
 807bb60:	015a      	lsls	r2, r3, #5
 807bb62:	69fb      	ldr	r3, [r7, #28]
 807bb64:	4413      	add	r3, r2
 807bb66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb6a:	681b      	ldr	r3, [r3, #0]
 807bb6c:	69ba      	ldr	r2, [r7, #24]
 807bb6e:	0151      	lsls	r1, r2, #5
 807bb70:	69fa      	ldr	r2, [r7, #28]
 807bb72:	440a      	add	r2, r1
 807bb74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bb78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807bb7c:	6013      	str	r3, [r2, #0]
 807bb7e:	e00f      	b.n	807bba0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 807bb80:	69bb      	ldr	r3, [r7, #24]
 807bb82:	015a      	lsls	r2, r3, #5
 807bb84:	69fb      	ldr	r3, [r7, #28]
 807bb86:	4413      	add	r3, r2
 807bb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb8c:	681b      	ldr	r3, [r3, #0]
 807bb8e:	69ba      	ldr	r2, [r7, #24]
 807bb90:	0151      	lsls	r1, r2, #5
 807bb92:	69fa      	ldr	r2, [r7, #28]
 807bb94:	440a      	add	r2, r1
 807bb96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bb9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807bb9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807bba0:	69bb      	ldr	r3, [r7, #24]
 807bba2:	015a      	lsls	r2, r3, #5
 807bba4:	69fb      	ldr	r3, [r7, #28]
 807bba6:	4413      	add	r3, r2
 807bba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bbac:	681b      	ldr	r3, [r3, #0]
 807bbae:	69ba      	ldr	r2, [r7, #24]
 807bbb0:	0151      	lsls	r1, r2, #5
 807bbb2:	69fa      	ldr	r2, [r7, #28]
 807bbb4:	440a      	add	r2, r1
 807bbb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bbba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807bbbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807bbc0:	2300      	movs	r3, #0
}
 807bbc2:	4618      	mov	r0, r3
 807bbc4:	3720      	adds	r7, #32
 807bbc6:	46bd      	mov	sp, r7
 807bbc8:	bd80      	pop	{r7, pc}
 807bbca:	bf00      	nop
 807bbcc:	1ff80000 	.word	0x1ff80000

0807bbd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 807bbd0:	b480      	push	{r7}
 807bbd2:	b087      	sub	sp, #28
 807bbd4:	af00      	add	r7, sp, #0
 807bbd6:	60f8      	str	r0, [r7, #12]
 807bbd8:	60b9      	str	r1, [r7, #8]
 807bbda:	4613      	mov	r3, r2
 807bbdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bbde:	68fb      	ldr	r3, [r7, #12]
 807bbe0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 807bbe2:	68bb      	ldr	r3, [r7, #8]
 807bbe4:	781b      	ldrb	r3, [r3, #0]
 807bbe6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 807bbe8:	68bb      	ldr	r3, [r7, #8]
 807bbea:	785b      	ldrb	r3, [r3, #1]
 807bbec:	2b01      	cmp	r3, #1
 807bbee:	f040 80cd 	bne.w	807bd8c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 807bbf2:	68bb      	ldr	r3, [r7, #8]
 807bbf4:	695b      	ldr	r3, [r3, #20]
 807bbf6:	2b00      	cmp	r3, #0
 807bbf8:	d132      	bne.n	807bc60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807bbfa:	693b      	ldr	r3, [r7, #16]
 807bbfc:	015a      	lsls	r2, r3, #5
 807bbfe:	697b      	ldr	r3, [r7, #20]
 807bc00:	4413      	add	r3, r2
 807bc02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc06:	691b      	ldr	r3, [r3, #16]
 807bc08:	693a      	ldr	r2, [r7, #16]
 807bc0a:	0151      	lsls	r1, r2, #5
 807bc0c:	697a      	ldr	r2, [r7, #20]
 807bc0e:	440a      	add	r2, r1
 807bc10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807bc18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807bc1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807bc1e:	693b      	ldr	r3, [r7, #16]
 807bc20:	015a      	lsls	r2, r3, #5
 807bc22:	697b      	ldr	r3, [r7, #20]
 807bc24:	4413      	add	r3, r2
 807bc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc2a:	691b      	ldr	r3, [r3, #16]
 807bc2c:	693a      	ldr	r2, [r7, #16]
 807bc2e:	0151      	lsls	r1, r2, #5
 807bc30:	697a      	ldr	r2, [r7, #20]
 807bc32:	440a      	add	r2, r1
 807bc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807bc3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807bc3e:	693b      	ldr	r3, [r7, #16]
 807bc40:	015a      	lsls	r2, r3, #5
 807bc42:	697b      	ldr	r3, [r7, #20]
 807bc44:	4413      	add	r3, r2
 807bc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc4a:	691b      	ldr	r3, [r3, #16]
 807bc4c:	693a      	ldr	r2, [r7, #16]
 807bc4e:	0151      	lsls	r1, r2, #5
 807bc50:	697a      	ldr	r2, [r7, #20]
 807bc52:	440a      	add	r2, r1
 807bc54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc58:	0cdb      	lsrs	r3, r3, #19
 807bc5a:	04db      	lsls	r3, r3, #19
 807bc5c:	6113      	str	r3, [r2, #16]
 807bc5e:	e04e      	b.n	807bcfe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807bc60:	693b      	ldr	r3, [r7, #16]
 807bc62:	015a      	lsls	r2, r3, #5
 807bc64:	697b      	ldr	r3, [r7, #20]
 807bc66:	4413      	add	r3, r2
 807bc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc6c:	691b      	ldr	r3, [r3, #16]
 807bc6e:	693a      	ldr	r2, [r7, #16]
 807bc70:	0151      	lsls	r1, r2, #5
 807bc72:	697a      	ldr	r2, [r7, #20]
 807bc74:	440a      	add	r2, r1
 807bc76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc7a:	0cdb      	lsrs	r3, r3, #19
 807bc7c:	04db      	lsls	r3, r3, #19
 807bc7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807bc80:	693b      	ldr	r3, [r7, #16]
 807bc82:	015a      	lsls	r2, r3, #5
 807bc84:	697b      	ldr	r3, [r7, #20]
 807bc86:	4413      	add	r3, r2
 807bc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc8c:	691b      	ldr	r3, [r3, #16]
 807bc8e:	693a      	ldr	r2, [r7, #16]
 807bc90:	0151      	lsls	r1, r2, #5
 807bc92:	697a      	ldr	r2, [r7, #20]
 807bc94:	440a      	add	r2, r1
 807bc96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807bc9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807bca2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 807bca4:	68bb      	ldr	r3, [r7, #8]
 807bca6:	695a      	ldr	r2, [r3, #20]
 807bca8:	68bb      	ldr	r3, [r7, #8]
 807bcaa:	689b      	ldr	r3, [r3, #8]
 807bcac:	429a      	cmp	r2, r3
 807bcae:	d903      	bls.n	807bcb8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 807bcb0:	68bb      	ldr	r3, [r7, #8]
 807bcb2:	689a      	ldr	r2, [r3, #8]
 807bcb4:	68bb      	ldr	r3, [r7, #8]
 807bcb6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807bcb8:	693b      	ldr	r3, [r7, #16]
 807bcba:	015a      	lsls	r2, r3, #5
 807bcbc:	697b      	ldr	r3, [r7, #20]
 807bcbe:	4413      	add	r3, r2
 807bcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bcc4:	691b      	ldr	r3, [r3, #16]
 807bcc6:	693a      	ldr	r2, [r7, #16]
 807bcc8:	0151      	lsls	r1, r2, #5
 807bcca:	697a      	ldr	r2, [r7, #20]
 807bccc:	440a      	add	r2, r1
 807bcce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bcd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807bcd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 807bcd8:	693b      	ldr	r3, [r7, #16]
 807bcda:	015a      	lsls	r2, r3, #5
 807bcdc:	697b      	ldr	r3, [r7, #20]
 807bcde:	4413      	add	r3, r2
 807bce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bce4:	691a      	ldr	r2, [r3, #16]
 807bce6:	68bb      	ldr	r3, [r7, #8]
 807bce8:	695b      	ldr	r3, [r3, #20]
 807bcea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bcee:	6939      	ldr	r1, [r7, #16]
 807bcf0:	0148      	lsls	r0, r1, #5
 807bcf2:	6979      	ldr	r1, [r7, #20]
 807bcf4:	4401      	add	r1, r0
 807bcf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807bcfa:	4313      	orrs	r3, r2
 807bcfc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 807bcfe:	79fb      	ldrb	r3, [r7, #7]
 807bd00:	2b01      	cmp	r3, #1
 807bd02:	d11e      	bne.n	807bd42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 807bd04:	68bb      	ldr	r3, [r7, #8]
 807bd06:	691b      	ldr	r3, [r3, #16]
 807bd08:	2b00      	cmp	r3, #0
 807bd0a:	d009      	beq.n	807bd20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 807bd0c:	693b      	ldr	r3, [r7, #16]
 807bd0e:	015a      	lsls	r2, r3, #5
 807bd10:	697b      	ldr	r3, [r7, #20]
 807bd12:	4413      	add	r3, r2
 807bd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bd18:	461a      	mov	r2, r3
 807bd1a:	68bb      	ldr	r3, [r7, #8]
 807bd1c:	691b      	ldr	r3, [r3, #16]
 807bd1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807bd20:	693b      	ldr	r3, [r7, #16]
 807bd22:	015a      	lsls	r2, r3, #5
 807bd24:	697b      	ldr	r3, [r7, #20]
 807bd26:	4413      	add	r3, r2
 807bd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bd2c:	681b      	ldr	r3, [r3, #0]
 807bd2e:	693a      	ldr	r2, [r7, #16]
 807bd30:	0151      	lsls	r1, r2, #5
 807bd32:	697a      	ldr	r2, [r7, #20]
 807bd34:	440a      	add	r2, r1
 807bd36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bd3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807bd3e:	6013      	str	r3, [r2, #0]
 807bd40:	e092      	b.n	807be68 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807bd42:	693b      	ldr	r3, [r7, #16]
 807bd44:	015a      	lsls	r2, r3, #5
 807bd46:	697b      	ldr	r3, [r7, #20]
 807bd48:	4413      	add	r3, r2
 807bd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bd4e:	681b      	ldr	r3, [r3, #0]
 807bd50:	693a      	ldr	r2, [r7, #16]
 807bd52:	0151      	lsls	r1, r2, #5
 807bd54:	697a      	ldr	r2, [r7, #20]
 807bd56:	440a      	add	r2, r1
 807bd58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bd5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807bd60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 807bd62:	68bb      	ldr	r3, [r7, #8]
 807bd64:	695b      	ldr	r3, [r3, #20]
 807bd66:	2b00      	cmp	r3, #0
 807bd68:	d07e      	beq.n	807be68 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807bd6a:	697b      	ldr	r3, [r7, #20]
 807bd6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807bd70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807bd72:	68bb      	ldr	r3, [r7, #8]
 807bd74:	781b      	ldrb	r3, [r3, #0]
 807bd76:	f003 030f 	and.w	r3, r3, #15
 807bd7a:	2101      	movs	r1, #1
 807bd7c:	fa01 f303 	lsl.w	r3, r1, r3
 807bd80:	6979      	ldr	r1, [r7, #20]
 807bd82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807bd86:	4313      	orrs	r3, r2
 807bd88:	634b      	str	r3, [r1, #52]	; 0x34
 807bd8a:	e06d      	b.n	807be68 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 807bd8c:	693b      	ldr	r3, [r7, #16]
 807bd8e:	015a      	lsls	r2, r3, #5
 807bd90:	697b      	ldr	r3, [r7, #20]
 807bd92:	4413      	add	r3, r2
 807bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bd98:	691b      	ldr	r3, [r3, #16]
 807bd9a:	693a      	ldr	r2, [r7, #16]
 807bd9c:	0151      	lsls	r1, r2, #5
 807bd9e:	697a      	ldr	r2, [r7, #20]
 807bda0:	440a      	add	r2, r1
 807bda2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bda6:	0cdb      	lsrs	r3, r3, #19
 807bda8:	04db      	lsls	r3, r3, #19
 807bdaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807bdac:	693b      	ldr	r3, [r7, #16]
 807bdae:	015a      	lsls	r2, r3, #5
 807bdb0:	697b      	ldr	r3, [r7, #20]
 807bdb2:	4413      	add	r3, r2
 807bdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bdb8:	691b      	ldr	r3, [r3, #16]
 807bdba:	693a      	ldr	r2, [r7, #16]
 807bdbc:	0151      	lsls	r1, r2, #5
 807bdbe:	697a      	ldr	r2, [r7, #20]
 807bdc0:	440a      	add	r2, r1
 807bdc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bdc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807bdca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807bdce:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 807bdd0:	68bb      	ldr	r3, [r7, #8]
 807bdd2:	695b      	ldr	r3, [r3, #20]
 807bdd4:	2b00      	cmp	r3, #0
 807bdd6:	d003      	beq.n	807bde0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 807bdd8:	68bb      	ldr	r3, [r7, #8]
 807bdda:	689a      	ldr	r2, [r3, #8]
 807bddc:	68bb      	ldr	r3, [r7, #8]
 807bdde:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807bde0:	693b      	ldr	r3, [r7, #16]
 807bde2:	015a      	lsls	r2, r3, #5
 807bde4:	697b      	ldr	r3, [r7, #20]
 807bde6:	4413      	add	r3, r2
 807bde8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bdec:	691b      	ldr	r3, [r3, #16]
 807bdee:	693a      	ldr	r2, [r7, #16]
 807bdf0:	0151      	lsls	r1, r2, #5
 807bdf2:	697a      	ldr	r2, [r7, #20]
 807bdf4:	440a      	add	r2, r1
 807bdf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bdfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807bdfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 807be00:	693b      	ldr	r3, [r7, #16]
 807be02:	015a      	lsls	r2, r3, #5
 807be04:	697b      	ldr	r3, [r7, #20]
 807be06:	4413      	add	r3, r2
 807be08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807be0c:	691a      	ldr	r2, [r3, #16]
 807be0e:	68bb      	ldr	r3, [r7, #8]
 807be10:	689b      	ldr	r3, [r3, #8]
 807be12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807be16:	6939      	ldr	r1, [r7, #16]
 807be18:	0148      	lsls	r0, r1, #5
 807be1a:	6979      	ldr	r1, [r7, #20]
 807be1c:	4401      	add	r1, r0
 807be1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807be22:	4313      	orrs	r3, r2
 807be24:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 807be26:	79fb      	ldrb	r3, [r7, #7]
 807be28:	2b01      	cmp	r3, #1
 807be2a:	d10d      	bne.n	807be48 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 807be2c:	68bb      	ldr	r3, [r7, #8]
 807be2e:	68db      	ldr	r3, [r3, #12]
 807be30:	2b00      	cmp	r3, #0
 807be32:	d009      	beq.n	807be48 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 807be34:	68bb      	ldr	r3, [r7, #8]
 807be36:	68d9      	ldr	r1, [r3, #12]
 807be38:	693b      	ldr	r3, [r7, #16]
 807be3a:	015a      	lsls	r2, r3, #5
 807be3c:	697b      	ldr	r3, [r7, #20]
 807be3e:	4413      	add	r3, r2
 807be40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807be44:	460a      	mov	r2, r1
 807be46:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807be48:	693b      	ldr	r3, [r7, #16]
 807be4a:	015a      	lsls	r2, r3, #5
 807be4c:	697b      	ldr	r3, [r7, #20]
 807be4e:	4413      	add	r3, r2
 807be50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807be54:	681b      	ldr	r3, [r3, #0]
 807be56:	693a      	ldr	r2, [r7, #16]
 807be58:	0151      	lsls	r1, r2, #5
 807be5a:	697a      	ldr	r2, [r7, #20]
 807be5c:	440a      	add	r2, r1
 807be5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807be62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807be66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807be68:	2300      	movs	r3, #0
}
 807be6a:	4618      	mov	r0, r3
 807be6c:	371c      	adds	r7, #28
 807be6e:	46bd      	mov	sp, r7
 807be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 807be74:	4770      	bx	lr

0807be76 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 807be76:	b480      	push	{r7}
 807be78:	b089      	sub	sp, #36	; 0x24
 807be7a:	af00      	add	r7, sp, #0
 807be7c:	60f8      	str	r0, [r7, #12]
 807be7e:	60b9      	str	r1, [r7, #8]
 807be80:	4611      	mov	r1, r2
 807be82:	461a      	mov	r2, r3
 807be84:	460b      	mov	r3, r1
 807be86:	71fb      	strb	r3, [r7, #7]
 807be88:	4613      	mov	r3, r2
 807be8a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807be8c:	68fb      	ldr	r3, [r7, #12]
 807be8e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 807be90:	68bb      	ldr	r3, [r7, #8]
 807be92:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 807be94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 807be98:	2b00      	cmp	r3, #0
 807be9a:	d11a      	bne.n	807bed2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 807be9c:	88bb      	ldrh	r3, [r7, #4]
 807be9e:	3303      	adds	r3, #3
 807bea0:	089b      	lsrs	r3, r3, #2
 807bea2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 807bea4:	2300      	movs	r3, #0
 807bea6:	61bb      	str	r3, [r7, #24]
 807bea8:	e00f      	b.n	807beca <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 807beaa:	79fb      	ldrb	r3, [r7, #7]
 807beac:	031a      	lsls	r2, r3, #12
 807beae:	697b      	ldr	r3, [r7, #20]
 807beb0:	4413      	add	r3, r2
 807beb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 807beb6:	461a      	mov	r2, r3
 807beb8:	69fb      	ldr	r3, [r7, #28]
 807beba:	681b      	ldr	r3, [r3, #0]
 807bebc:	6013      	str	r3, [r2, #0]
      pSrc++;
 807bebe:	69fb      	ldr	r3, [r7, #28]
 807bec0:	3304      	adds	r3, #4
 807bec2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 807bec4:	69bb      	ldr	r3, [r7, #24]
 807bec6:	3301      	adds	r3, #1
 807bec8:	61bb      	str	r3, [r7, #24]
 807beca:	69ba      	ldr	r2, [r7, #24]
 807becc:	693b      	ldr	r3, [r7, #16]
 807bece:	429a      	cmp	r2, r3
 807bed0:	d3eb      	bcc.n	807beaa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 807bed2:	2300      	movs	r3, #0
}
 807bed4:	4618      	mov	r0, r3
 807bed6:	3724      	adds	r7, #36	; 0x24
 807bed8:	46bd      	mov	sp, r7
 807beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bede:	4770      	bx	lr

0807bee0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 807bee0:	b480      	push	{r7}
 807bee2:	b089      	sub	sp, #36	; 0x24
 807bee4:	af00      	add	r7, sp, #0
 807bee6:	60f8      	str	r0, [r7, #12]
 807bee8:	60b9      	str	r1, [r7, #8]
 807beea:	4613      	mov	r3, r2
 807beec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807beee:	68fb      	ldr	r3, [r7, #12]
 807bef0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 807bef2:	68bb      	ldr	r3, [r7, #8]
 807bef4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 807bef6:	88fb      	ldrh	r3, [r7, #6]
 807bef8:	3303      	adds	r3, #3
 807befa:	089b      	lsrs	r3, r3, #2
 807befc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 807befe:	2300      	movs	r3, #0
 807bf00:	61bb      	str	r3, [r7, #24]
 807bf02:	e00b      	b.n	807bf1c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 807bf04:	697b      	ldr	r3, [r7, #20]
 807bf06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 807bf0a:	681a      	ldr	r2, [r3, #0]
 807bf0c:	69fb      	ldr	r3, [r7, #28]
 807bf0e:	601a      	str	r2, [r3, #0]
    pDest++;
 807bf10:	69fb      	ldr	r3, [r7, #28]
 807bf12:	3304      	adds	r3, #4
 807bf14:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 807bf16:	69bb      	ldr	r3, [r7, #24]
 807bf18:	3301      	adds	r3, #1
 807bf1a:	61bb      	str	r3, [r7, #24]
 807bf1c:	69ba      	ldr	r2, [r7, #24]
 807bf1e:	693b      	ldr	r3, [r7, #16]
 807bf20:	429a      	cmp	r2, r3
 807bf22:	d3ef      	bcc.n	807bf04 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 807bf24:	69fb      	ldr	r3, [r7, #28]
}
 807bf26:	4618      	mov	r0, r3
 807bf28:	3724      	adds	r7, #36	; 0x24
 807bf2a:	46bd      	mov	sp, r7
 807bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bf30:	4770      	bx	lr

0807bf32 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807bf32:	b480      	push	{r7}
 807bf34:	b085      	sub	sp, #20
 807bf36:	af00      	add	r7, sp, #0
 807bf38:	6078      	str	r0, [r7, #4]
 807bf3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bf3c:	687b      	ldr	r3, [r7, #4]
 807bf3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807bf40:	683b      	ldr	r3, [r7, #0]
 807bf42:	781b      	ldrb	r3, [r3, #0]
 807bf44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807bf46:	683b      	ldr	r3, [r7, #0]
 807bf48:	785b      	ldrb	r3, [r3, #1]
 807bf4a:	2b01      	cmp	r3, #1
 807bf4c:	d12c      	bne.n	807bfa8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 807bf4e:	68bb      	ldr	r3, [r7, #8]
 807bf50:	015a      	lsls	r2, r3, #5
 807bf52:	68fb      	ldr	r3, [r7, #12]
 807bf54:	4413      	add	r3, r2
 807bf56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bf5a:	681b      	ldr	r3, [r3, #0]
 807bf5c:	2b00      	cmp	r3, #0
 807bf5e:	db12      	blt.n	807bf86 <USB_EPSetStall+0x54>
 807bf60:	68bb      	ldr	r3, [r7, #8]
 807bf62:	2b00      	cmp	r3, #0
 807bf64:	d00f      	beq.n	807bf86 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 807bf66:	68bb      	ldr	r3, [r7, #8]
 807bf68:	015a      	lsls	r2, r3, #5
 807bf6a:	68fb      	ldr	r3, [r7, #12]
 807bf6c:	4413      	add	r3, r2
 807bf6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bf72:	681b      	ldr	r3, [r3, #0]
 807bf74:	68ba      	ldr	r2, [r7, #8]
 807bf76:	0151      	lsls	r1, r2, #5
 807bf78:	68fa      	ldr	r2, [r7, #12]
 807bf7a:	440a      	add	r2, r1
 807bf7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bf80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 807bf84:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 807bf86:	68bb      	ldr	r3, [r7, #8]
 807bf88:	015a      	lsls	r2, r3, #5
 807bf8a:	68fb      	ldr	r3, [r7, #12]
 807bf8c:	4413      	add	r3, r2
 807bf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bf92:	681b      	ldr	r3, [r3, #0]
 807bf94:	68ba      	ldr	r2, [r7, #8]
 807bf96:	0151      	lsls	r1, r2, #5
 807bf98:	68fa      	ldr	r2, [r7, #12]
 807bf9a:	440a      	add	r2, r1
 807bf9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bfa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 807bfa4:	6013      	str	r3, [r2, #0]
 807bfa6:	e02b      	b.n	807c000 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 807bfa8:	68bb      	ldr	r3, [r7, #8]
 807bfaa:	015a      	lsls	r2, r3, #5
 807bfac:	68fb      	ldr	r3, [r7, #12]
 807bfae:	4413      	add	r3, r2
 807bfb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bfb4:	681b      	ldr	r3, [r3, #0]
 807bfb6:	2b00      	cmp	r3, #0
 807bfb8:	db12      	blt.n	807bfe0 <USB_EPSetStall+0xae>
 807bfba:	68bb      	ldr	r3, [r7, #8]
 807bfbc:	2b00      	cmp	r3, #0
 807bfbe:	d00f      	beq.n	807bfe0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 807bfc0:	68bb      	ldr	r3, [r7, #8]
 807bfc2:	015a      	lsls	r2, r3, #5
 807bfc4:	68fb      	ldr	r3, [r7, #12]
 807bfc6:	4413      	add	r3, r2
 807bfc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bfcc:	681b      	ldr	r3, [r3, #0]
 807bfce:	68ba      	ldr	r2, [r7, #8]
 807bfd0:	0151      	lsls	r1, r2, #5
 807bfd2:	68fa      	ldr	r2, [r7, #12]
 807bfd4:	440a      	add	r2, r1
 807bfd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bfda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 807bfde:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 807bfe0:	68bb      	ldr	r3, [r7, #8]
 807bfe2:	015a      	lsls	r2, r3, #5
 807bfe4:	68fb      	ldr	r3, [r7, #12]
 807bfe6:	4413      	add	r3, r2
 807bfe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bfec:	681b      	ldr	r3, [r3, #0]
 807bfee:	68ba      	ldr	r2, [r7, #8]
 807bff0:	0151      	lsls	r1, r2, #5
 807bff2:	68fa      	ldr	r2, [r7, #12]
 807bff4:	440a      	add	r2, r1
 807bff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 807bffe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807c000:	2300      	movs	r3, #0
}
 807c002:	4618      	mov	r0, r3
 807c004:	3714      	adds	r7, #20
 807c006:	46bd      	mov	sp, r7
 807c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c00c:	4770      	bx	lr

0807c00e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807c00e:	b480      	push	{r7}
 807c010:	b085      	sub	sp, #20
 807c012:	af00      	add	r7, sp, #0
 807c014:	6078      	str	r0, [r7, #4]
 807c016:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c018:	687b      	ldr	r3, [r7, #4]
 807c01a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807c01c:	683b      	ldr	r3, [r7, #0]
 807c01e:	781b      	ldrb	r3, [r3, #0]
 807c020:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807c022:	683b      	ldr	r3, [r7, #0]
 807c024:	785b      	ldrb	r3, [r3, #1]
 807c026:	2b01      	cmp	r3, #1
 807c028:	d128      	bne.n	807c07c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 807c02a:	68bb      	ldr	r3, [r7, #8]
 807c02c:	015a      	lsls	r2, r3, #5
 807c02e:	68fb      	ldr	r3, [r7, #12]
 807c030:	4413      	add	r3, r2
 807c032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c036:	681b      	ldr	r3, [r3, #0]
 807c038:	68ba      	ldr	r2, [r7, #8]
 807c03a:	0151      	lsls	r1, r2, #5
 807c03c:	68fa      	ldr	r2, [r7, #12]
 807c03e:	440a      	add	r2, r1
 807c040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807c044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 807c048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 807c04a:	683b      	ldr	r3, [r7, #0]
 807c04c:	78db      	ldrb	r3, [r3, #3]
 807c04e:	2b03      	cmp	r3, #3
 807c050:	d003      	beq.n	807c05a <USB_EPClearStall+0x4c>
 807c052:	683b      	ldr	r3, [r7, #0]
 807c054:	78db      	ldrb	r3, [r3, #3]
 807c056:	2b02      	cmp	r3, #2
 807c058:	d138      	bne.n	807c0cc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 807c05a:	68bb      	ldr	r3, [r7, #8]
 807c05c:	015a      	lsls	r2, r3, #5
 807c05e:	68fb      	ldr	r3, [r7, #12]
 807c060:	4413      	add	r3, r2
 807c062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c066:	681b      	ldr	r3, [r3, #0]
 807c068:	68ba      	ldr	r2, [r7, #8]
 807c06a:	0151      	lsls	r1, r2, #5
 807c06c:	68fa      	ldr	r2, [r7, #12]
 807c06e:	440a      	add	r2, r1
 807c070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807c074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807c078:	6013      	str	r3, [r2, #0]
 807c07a:	e027      	b.n	807c0cc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 807c07c:	68bb      	ldr	r3, [r7, #8]
 807c07e:	015a      	lsls	r2, r3, #5
 807c080:	68fb      	ldr	r3, [r7, #12]
 807c082:	4413      	add	r3, r2
 807c084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c088:	681b      	ldr	r3, [r3, #0]
 807c08a:	68ba      	ldr	r2, [r7, #8]
 807c08c:	0151      	lsls	r1, r2, #5
 807c08e:	68fa      	ldr	r2, [r7, #12]
 807c090:	440a      	add	r2, r1
 807c092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 807c09a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 807c09c:	683b      	ldr	r3, [r7, #0]
 807c09e:	78db      	ldrb	r3, [r3, #3]
 807c0a0:	2b03      	cmp	r3, #3
 807c0a2:	d003      	beq.n	807c0ac <USB_EPClearStall+0x9e>
 807c0a4:	683b      	ldr	r3, [r7, #0]
 807c0a6:	78db      	ldrb	r3, [r3, #3]
 807c0a8:	2b02      	cmp	r3, #2
 807c0aa:	d10f      	bne.n	807c0cc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 807c0ac:	68bb      	ldr	r3, [r7, #8]
 807c0ae:	015a      	lsls	r2, r3, #5
 807c0b0:	68fb      	ldr	r3, [r7, #12]
 807c0b2:	4413      	add	r3, r2
 807c0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c0b8:	681b      	ldr	r3, [r3, #0]
 807c0ba:	68ba      	ldr	r2, [r7, #8]
 807c0bc:	0151      	lsls	r1, r2, #5
 807c0be:	68fa      	ldr	r2, [r7, #12]
 807c0c0:	440a      	add	r2, r1
 807c0c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c0c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807c0ca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 807c0cc:	2300      	movs	r3, #0
}
 807c0ce:	4618      	mov	r0, r3
 807c0d0:	3714      	adds	r7, #20
 807c0d2:	46bd      	mov	sp, r7
 807c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c0d8:	4770      	bx	lr

0807c0da <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 807c0da:	b480      	push	{r7}
 807c0dc:	b085      	sub	sp, #20
 807c0de:	af00      	add	r7, sp, #0
 807c0e0:	6078      	str	r0, [r7, #4]
 807c0e2:	460b      	mov	r3, r1
 807c0e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c0e6:	687b      	ldr	r3, [r7, #4]
 807c0e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 807c0ea:	68fb      	ldr	r3, [r7, #12]
 807c0ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c0f0:	681b      	ldr	r3, [r3, #0]
 807c0f2:	68fa      	ldr	r2, [r7, #12]
 807c0f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c0f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 807c0fc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 807c0fe:	68fb      	ldr	r3, [r7, #12]
 807c100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c104:	681a      	ldr	r2, [r3, #0]
 807c106:	78fb      	ldrb	r3, [r7, #3]
 807c108:	011b      	lsls	r3, r3, #4
 807c10a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 807c10e:	68f9      	ldr	r1, [r7, #12]
 807c110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807c114:	4313      	orrs	r3, r2
 807c116:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 807c118:	2300      	movs	r3, #0
}
 807c11a:	4618      	mov	r0, r3
 807c11c:	3714      	adds	r7, #20
 807c11e:	46bd      	mov	sp, r7
 807c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c124:	4770      	bx	lr

0807c126 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 807c126:	b480      	push	{r7}
 807c128:	b085      	sub	sp, #20
 807c12a:	af00      	add	r7, sp, #0
 807c12c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c12e:	687b      	ldr	r3, [r7, #4]
 807c130:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 807c132:	68fb      	ldr	r3, [r7, #12]
 807c134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807c138:	681b      	ldr	r3, [r3, #0]
 807c13a:	68fa      	ldr	r2, [r7, #12]
 807c13c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 807c140:	f023 0303 	bic.w	r3, r3, #3
 807c144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 807c146:	68fb      	ldr	r3, [r7, #12]
 807c148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c14c:	685b      	ldr	r3, [r3, #4]
 807c14e:	68fa      	ldr	r2, [r7, #12]
 807c150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c154:	f023 0302 	bic.w	r3, r3, #2
 807c158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c15a:	2300      	movs	r3, #0
}
 807c15c:	4618      	mov	r0, r3
 807c15e:	3714      	adds	r7, #20
 807c160:	46bd      	mov	sp, r7
 807c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c166:	4770      	bx	lr

0807c168 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 807c168:	b480      	push	{r7}
 807c16a:	b085      	sub	sp, #20
 807c16c:	af00      	add	r7, sp, #0
 807c16e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c170:	687b      	ldr	r3, [r7, #4]
 807c172:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 807c174:	68fb      	ldr	r3, [r7, #12]
 807c176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807c17a:	681b      	ldr	r3, [r3, #0]
 807c17c:	68fa      	ldr	r2, [r7, #12]
 807c17e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 807c182:	f023 0303 	bic.w	r3, r3, #3
 807c186:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 807c188:	68fb      	ldr	r3, [r7, #12]
 807c18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c18e:	685b      	ldr	r3, [r3, #4]
 807c190:	68fa      	ldr	r2, [r7, #12]
 807c192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c196:	f043 0302 	orr.w	r3, r3, #2
 807c19a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c19c:	2300      	movs	r3, #0
}
 807c19e:	4618      	mov	r0, r3
 807c1a0:	3714      	adds	r7, #20
 807c1a2:	46bd      	mov	sp, r7
 807c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c1a8:	4770      	bx	lr

0807c1aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 807c1aa:	b480      	push	{r7}
 807c1ac:	b085      	sub	sp, #20
 807c1ae:	af00      	add	r7, sp, #0
 807c1b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 807c1b2:	687b      	ldr	r3, [r7, #4]
 807c1b4:	695b      	ldr	r3, [r3, #20]
 807c1b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 807c1b8:	687b      	ldr	r3, [r7, #4]
 807c1ba:	699b      	ldr	r3, [r3, #24]
 807c1bc:	68fa      	ldr	r2, [r7, #12]
 807c1be:	4013      	ands	r3, r2
 807c1c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 807c1c2:	68fb      	ldr	r3, [r7, #12]
}
 807c1c4:	4618      	mov	r0, r3
 807c1c6:	3714      	adds	r7, #20
 807c1c8:	46bd      	mov	sp, r7
 807c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c1ce:	4770      	bx	lr

0807c1d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 807c1d0:	b480      	push	{r7}
 807c1d2:	b085      	sub	sp, #20
 807c1d4:	af00      	add	r7, sp, #0
 807c1d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c1d8:	687b      	ldr	r3, [r7, #4]
 807c1da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 807c1dc:	68fb      	ldr	r3, [r7, #12]
 807c1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c1e2:	699b      	ldr	r3, [r3, #24]
 807c1e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 807c1e6:	68fb      	ldr	r3, [r7, #12]
 807c1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c1ec:	69db      	ldr	r3, [r3, #28]
 807c1ee:	68ba      	ldr	r2, [r7, #8]
 807c1f0:	4013      	ands	r3, r2
 807c1f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 807c1f4:	68bb      	ldr	r3, [r7, #8]
 807c1f6:	0c1b      	lsrs	r3, r3, #16
}
 807c1f8:	4618      	mov	r0, r3
 807c1fa:	3714      	adds	r7, #20
 807c1fc:	46bd      	mov	sp, r7
 807c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c202:	4770      	bx	lr

0807c204 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 807c204:	b480      	push	{r7}
 807c206:	b085      	sub	sp, #20
 807c208:	af00      	add	r7, sp, #0
 807c20a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c20c:	687b      	ldr	r3, [r7, #4]
 807c20e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 807c210:	68fb      	ldr	r3, [r7, #12]
 807c212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c216:	699b      	ldr	r3, [r3, #24]
 807c218:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 807c21a:	68fb      	ldr	r3, [r7, #12]
 807c21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c220:	69db      	ldr	r3, [r3, #28]
 807c222:	68ba      	ldr	r2, [r7, #8]
 807c224:	4013      	ands	r3, r2
 807c226:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 807c228:	68bb      	ldr	r3, [r7, #8]
 807c22a:	b29b      	uxth	r3, r3
}
 807c22c:	4618      	mov	r0, r3
 807c22e:	3714      	adds	r7, #20
 807c230:	46bd      	mov	sp, r7
 807c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c236:	4770      	bx	lr

0807c238 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 807c238:	b480      	push	{r7}
 807c23a:	b085      	sub	sp, #20
 807c23c:	af00      	add	r7, sp, #0
 807c23e:	6078      	str	r0, [r7, #4]
 807c240:	460b      	mov	r3, r1
 807c242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c244:	687b      	ldr	r3, [r7, #4]
 807c246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 807c248:	78fb      	ldrb	r3, [r7, #3]
 807c24a:	015a      	lsls	r2, r3, #5
 807c24c:	68fb      	ldr	r3, [r7, #12]
 807c24e:	4413      	add	r3, r2
 807c250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c254:	689b      	ldr	r3, [r3, #8]
 807c256:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 807c258:	68fb      	ldr	r3, [r7, #12]
 807c25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c25e:	695b      	ldr	r3, [r3, #20]
 807c260:	68ba      	ldr	r2, [r7, #8]
 807c262:	4013      	ands	r3, r2
 807c264:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 807c266:	68bb      	ldr	r3, [r7, #8]
}
 807c268:	4618      	mov	r0, r3
 807c26a:	3714      	adds	r7, #20
 807c26c:	46bd      	mov	sp, r7
 807c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c272:	4770      	bx	lr

0807c274 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 807c274:	b480      	push	{r7}
 807c276:	b087      	sub	sp, #28
 807c278:	af00      	add	r7, sp, #0
 807c27a:	6078      	str	r0, [r7, #4]
 807c27c:	460b      	mov	r3, r1
 807c27e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c280:	687b      	ldr	r3, [r7, #4]
 807c282:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 807c284:	697b      	ldr	r3, [r7, #20]
 807c286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c28a:	691b      	ldr	r3, [r3, #16]
 807c28c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 807c28e:	697b      	ldr	r3, [r7, #20]
 807c290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 807c296:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 807c298:	78fb      	ldrb	r3, [r7, #3]
 807c29a:	f003 030f 	and.w	r3, r3, #15
 807c29e:	68fa      	ldr	r2, [r7, #12]
 807c2a0:	fa22 f303 	lsr.w	r3, r2, r3
 807c2a4:	01db      	lsls	r3, r3, #7
 807c2a6:	b2db      	uxtb	r3, r3
 807c2a8:	693a      	ldr	r2, [r7, #16]
 807c2aa:	4313      	orrs	r3, r2
 807c2ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 807c2ae:	78fb      	ldrb	r3, [r7, #3]
 807c2b0:	015a      	lsls	r2, r3, #5
 807c2b2:	697b      	ldr	r3, [r7, #20]
 807c2b4:	4413      	add	r3, r2
 807c2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c2ba:	689b      	ldr	r3, [r3, #8]
 807c2bc:	693a      	ldr	r2, [r7, #16]
 807c2be:	4013      	ands	r3, r2
 807c2c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 807c2c2:	68bb      	ldr	r3, [r7, #8]
}
 807c2c4:	4618      	mov	r0, r3
 807c2c6:	371c      	adds	r7, #28
 807c2c8:	46bd      	mov	sp, r7
 807c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c2ce:	4770      	bx	lr

0807c2d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 807c2d0:	b480      	push	{r7}
 807c2d2:	b083      	sub	sp, #12
 807c2d4:	af00      	add	r7, sp, #0
 807c2d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 807c2d8:	687b      	ldr	r3, [r7, #4]
 807c2da:	695b      	ldr	r3, [r3, #20]
 807c2dc:	f003 0301 	and.w	r3, r3, #1
}
 807c2e0:	4618      	mov	r0, r3
 807c2e2:	370c      	adds	r7, #12
 807c2e4:	46bd      	mov	sp, r7
 807c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c2ea:	4770      	bx	lr

0807c2ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 807c2ec:	b480      	push	{r7}
 807c2ee:	b085      	sub	sp, #20
 807c2f0:	af00      	add	r7, sp, #0
 807c2f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c2f4:	687b      	ldr	r3, [r7, #4]
 807c2f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 807c2f8:	68fb      	ldr	r3, [r7, #12]
 807c2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c2fe:	681b      	ldr	r3, [r3, #0]
 807c300:	68fa      	ldr	r2, [r7, #12]
 807c302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807c306:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 807c30a:	f023 0307 	bic.w	r3, r3, #7
 807c30e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 807c310:	68fb      	ldr	r3, [r7, #12]
 807c312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c316:	685b      	ldr	r3, [r3, #4]
 807c318:	68fa      	ldr	r2, [r7, #12]
 807c31a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c31e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 807c322:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c324:	2300      	movs	r3, #0
}
 807c326:	4618      	mov	r0, r3
 807c328:	3714      	adds	r7, #20
 807c32a:	46bd      	mov	sp, r7
 807c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c330:	4770      	bx	lr
	...

0807c334 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 807c334:	b480      	push	{r7}
 807c336:	b087      	sub	sp, #28
 807c338:	af00      	add	r7, sp, #0
 807c33a:	60f8      	str	r0, [r7, #12]
 807c33c:	460b      	mov	r3, r1
 807c33e:	607a      	str	r2, [r7, #4]
 807c340:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c342:	68fb      	ldr	r3, [r7, #12]
 807c344:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807c346:	68fb      	ldr	r3, [r7, #12]
 807c348:	333c      	adds	r3, #60	; 0x3c
 807c34a:	3304      	adds	r3, #4
 807c34c:	681b      	ldr	r3, [r3, #0]
 807c34e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 807c350:	693b      	ldr	r3, [r7, #16]
 807c352:	4a26      	ldr	r2, [pc, #152]	; (807c3ec <USB_EP0_OutStart+0xb8>)
 807c354:	4293      	cmp	r3, r2
 807c356:	d90a      	bls.n	807c36e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 807c358:	697b      	ldr	r3, [r7, #20]
 807c35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c35e:	681b      	ldr	r3, [r3, #0]
 807c360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807c364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 807c368:	d101      	bne.n	807c36e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 807c36a:	2300      	movs	r3, #0
 807c36c:	e037      	b.n	807c3de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 807c36e:	697b      	ldr	r3, [r7, #20]
 807c370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c374:	461a      	mov	r2, r3
 807c376:	2300      	movs	r3, #0
 807c378:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807c37a:	697b      	ldr	r3, [r7, #20]
 807c37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c380:	691b      	ldr	r3, [r3, #16]
 807c382:	697a      	ldr	r2, [r7, #20]
 807c384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807c38c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 807c38e:	697b      	ldr	r3, [r7, #20]
 807c390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c394:	691b      	ldr	r3, [r3, #16]
 807c396:	697a      	ldr	r2, [r7, #20]
 807c398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c39c:	f043 0318 	orr.w	r3, r3, #24
 807c3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 807c3a2:	697b      	ldr	r3, [r7, #20]
 807c3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3a8:	691b      	ldr	r3, [r3, #16]
 807c3aa:	697a      	ldr	r2, [r7, #20]
 807c3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c3b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 807c3b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 807c3b6:	7afb      	ldrb	r3, [r7, #11]
 807c3b8:	2b01      	cmp	r3, #1
 807c3ba:	d10f      	bne.n	807c3dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 807c3bc:	697b      	ldr	r3, [r7, #20]
 807c3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3c2:	461a      	mov	r2, r3
 807c3c4:	687b      	ldr	r3, [r7, #4]
 807c3c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 807c3c8:	697b      	ldr	r3, [r7, #20]
 807c3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3ce:	681b      	ldr	r3, [r3, #0]
 807c3d0:	697a      	ldr	r2, [r7, #20]
 807c3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c3d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 807c3da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807c3dc:	2300      	movs	r3, #0
}
 807c3de:	4618      	mov	r0, r3
 807c3e0:	371c      	adds	r7, #28
 807c3e2:	46bd      	mov	sp, r7
 807c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c3e8:	4770      	bx	lr
 807c3ea:	bf00      	nop
 807c3ec:	4f54300a 	.word	0x4f54300a

0807c3f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 807c3f0:	b480      	push	{r7}
 807c3f2:	b085      	sub	sp, #20
 807c3f4:	af00      	add	r7, sp, #0
 807c3f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 807c3f8:	2300      	movs	r3, #0
 807c3fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 807c3fc:	68fb      	ldr	r3, [r7, #12]
 807c3fe:	3301      	adds	r3, #1
 807c400:	60fb      	str	r3, [r7, #12]
 807c402:	68fb      	ldr	r3, [r7, #12]
 807c404:	4a13      	ldr	r2, [pc, #76]	; (807c454 <USB_CoreReset+0x64>)
 807c406:	4293      	cmp	r3, r2
 807c408:	d901      	bls.n	807c40e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 807c40a:	2303      	movs	r3, #3
 807c40c:	e01b      	b.n	807c446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 807c40e:	687b      	ldr	r3, [r7, #4]
 807c410:	691b      	ldr	r3, [r3, #16]
 807c412:	2b00      	cmp	r3, #0
 807c414:	daf2      	bge.n	807c3fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 807c416:	2300      	movs	r3, #0
 807c418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 807c41a:	687b      	ldr	r3, [r7, #4]
 807c41c:	691b      	ldr	r3, [r3, #16]
 807c41e:	f043 0201 	orr.w	r2, r3, #1
 807c422:	687b      	ldr	r3, [r7, #4]
 807c424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807c426:	68fb      	ldr	r3, [r7, #12]
 807c428:	3301      	adds	r3, #1
 807c42a:	60fb      	str	r3, [r7, #12]
 807c42c:	68fb      	ldr	r3, [r7, #12]
 807c42e:	4a09      	ldr	r2, [pc, #36]	; (807c454 <USB_CoreReset+0x64>)
 807c430:	4293      	cmp	r3, r2
 807c432:	d901      	bls.n	807c438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 807c434:	2303      	movs	r3, #3
 807c436:	e006      	b.n	807c446 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 807c438:	687b      	ldr	r3, [r7, #4]
 807c43a:	691b      	ldr	r3, [r3, #16]
 807c43c:	f003 0301 	and.w	r3, r3, #1
 807c440:	2b01      	cmp	r3, #1
 807c442:	d0f0      	beq.n	807c426 <USB_CoreReset+0x36>

  return HAL_OK;
 807c444:	2300      	movs	r3, #0
}
 807c446:	4618      	mov	r0, r3
 807c448:	3714      	adds	r7, #20
 807c44a:	46bd      	mov	sp, r7
 807c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c450:	4770      	bx	lr
 807c452:	bf00      	nop
 807c454:	00030d40 	.word	0x00030d40

0807c458 <__NVIC_SystemReset>:
{
 807c458:	b480      	push	{r7}
 807c45a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 807c45c:	f3bf 8f4f 	dsb	sy
}
 807c460:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 807c462:	4b06      	ldr	r3, [pc, #24]	; (807c47c <__NVIC_SystemReset+0x24>)
 807c464:	68db      	ldr	r3, [r3, #12]
 807c466:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 807c46a:	4904      	ldr	r1, [pc, #16]	; (807c47c <__NVIC_SystemReset+0x24>)
 807c46c:	4b04      	ldr	r3, [pc, #16]	; (807c480 <__NVIC_SystemReset+0x28>)
 807c46e:	4313      	orrs	r3, r2
 807c470:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 807c472:	f3bf 8f4f 	dsb	sy
}
 807c476:	bf00      	nop
    __NOP();
 807c478:	bf00      	nop
 807c47a:	e7fd      	b.n	807c478 <__NVIC_SystemReset+0x20>
 807c47c:	e000ed00 	.word	0xe000ed00
 807c480:	05fa0004 	.word	0x05fa0004

0807c484 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807c484:	b580      	push	{r7, lr}
 807c486:	b084      	sub	sp, #16
 807c488:	af00      	add	r7, sp, #0
 807c48a:	6078      	str	r0, [r7, #4]
 807c48c:	460b      	mov	r3, r1
 807c48e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 807c490:	f240 401c 	movw	r0, #1052	; 0x41c
 807c494:	f002 fcfa 	bl	807ee8c <USBD_static_malloc>
 807c498:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 807c49a:	68fb      	ldr	r3, [r7, #12]
 807c49c:	2b00      	cmp	r3, #0
 807c49e:	d105      	bne.n	807c4ac <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 807c4a0:	687b      	ldr	r3, [r7, #4]
 807c4a2:	2200      	movs	r2, #0
 807c4a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 807c4a8:	2302      	movs	r3, #2
 807c4aa:	e03f      	b.n	807c52c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 807c4ac:	687b      	ldr	r3, [r7, #4]
 807c4ae:	68fa      	ldr	r2, [r7, #12]
 807c4b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 807c4b4:	68fb      	ldr	r3, [r7, #12]
 807c4b6:	2200      	movs	r2, #0
 807c4b8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 807c4bc:	68fb      	ldr	r3, [r7, #12]
 807c4be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 807c4c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 807c4c6:	68fb      	ldr	r3, [r7, #12]
 807c4c8:	2200      	movs	r2, #0
 807c4ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 807c4ce:	68fb      	ldr	r3, [r7, #12]
 807c4d0:	2200      	movs	r2, #0
 807c4d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 807c4d6:	68fb      	ldr	r3, [r7, #12]
 807c4d8:	2200      	movs	r2, #0
 807c4da:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 807c4de:	68fb      	ldr	r3, [r7, #12]
 807c4e0:	2202      	movs	r2, #2
 807c4e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 807c4e6:	68fb      	ldr	r3, [r7, #12]
 807c4e8:	2200      	movs	r2, #0
 807c4ea:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 807c4ee:	68fb      	ldr	r3, [r7, #12]
 807c4f0:	2200      	movs	r2, #0
 807c4f2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 807c4f6:	68fb      	ldr	r3, [r7, #12]
 807c4f8:	2200      	movs	r2, #0
 807c4fa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 807c4fe:	68fb      	ldr	r3, [r7, #12]
 807c500:	2200      	movs	r2, #0
 807c502:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 807c506:	68fb      	ldr	r3, [r7, #12]
 807c508:	2202      	movs	r2, #2
 807c50a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 807c50e:	68fb      	ldr	r3, [r7, #12]
 807c510:	2200      	movs	r2, #0
 807c512:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 807c516:	687b      	ldr	r3, [r7, #4]
 807c518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807c51c:	685b      	ldr	r3, [r3, #4]
 807c51e:	4798      	blx	r3
 807c520:	4603      	mov	r3, r0
 807c522:	2b00      	cmp	r3, #0
 807c524:	d001      	beq.n	807c52a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 807c526:	2303      	movs	r3, #3
 807c528:	e000      	b.n	807c52c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 807c52a:	2300      	movs	r3, #0
}
 807c52c:	4618      	mov	r0, r3
 807c52e:	3710      	adds	r7, #16
 807c530:	46bd      	mov	sp, r7
 807c532:	bd80      	pop	{r7, pc}

0807c534 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807c534:	b580      	push	{r7, lr}
 807c536:	b084      	sub	sp, #16
 807c538:	af00      	add	r7, sp, #0
 807c53a:	6078      	str	r0, [r7, #4]
 807c53c:	460b      	mov	r3, r1
 807c53e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 807c540:	687b      	ldr	r3, [r7, #4]
 807c542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c546:	2b00      	cmp	r3, #0
 807c548:	d101      	bne.n	807c54e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 807c54a:	2302      	movs	r3, #2
 807c54c:	e027      	b.n	807c59e <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c54e:	687b      	ldr	r3, [r7, #4]
 807c550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c554:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 807c556:	68fb      	ldr	r3, [r7, #12]
 807c558:	2200      	movs	r2, #0
 807c55a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 807c55e:	68fb      	ldr	r3, [r7, #12]
 807c560:	2200      	movs	r2, #0
 807c562:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 807c566:	68fb      	ldr	r3, [r7, #12]
 807c568:	2202      	movs	r2, #2
 807c56a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 807c56e:	68fb      	ldr	r3, [r7, #12]
 807c570:	2200      	movs	r2, #0
 807c572:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 807c576:	68fb      	ldr	r3, [r7, #12]
 807c578:	2202      	movs	r2, #2
 807c57a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 807c57e:	687b      	ldr	r3, [r7, #4]
 807c580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807c584:	689b      	ldr	r3, [r3, #8]
 807c586:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 807c588:	687b      	ldr	r3, [r7, #4]
 807c58a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c58e:	4618      	mov	r0, r3
 807c590:	f002 fc8a 	bl	807eea8 <USBD_static_free>
  pdev->pClassData = NULL;
 807c594:	687b      	ldr	r3, [r7, #4]
 807c596:	2200      	movs	r2, #0
 807c598:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 807c59c:	2300      	movs	r3, #0
}
 807c59e:	4618      	mov	r0, r3
 807c5a0:	3710      	adds	r7, #16
 807c5a2:	46bd      	mov	sp, r7
 807c5a4:	bd80      	pop	{r7, pc}
	...

0807c5a8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807c5a8:	b580      	push	{r7, lr}
 807c5aa:	b088      	sub	sp, #32
 807c5ac:	af00      	add	r7, sp, #0
 807c5ae:	6078      	str	r0, [r7, #4]
 807c5b0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c5b2:	687b      	ldr	r3, [r7, #4]
 807c5b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c5b8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 807c5ba:	2300      	movs	r3, #0
 807c5bc:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 807c5be:	2300      	movs	r3, #0
 807c5c0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 807c5c2:	2300      	movs	r3, #0
 807c5c4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 807c5c6:	2300      	movs	r3, #0
 807c5c8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 807c5ca:	693b      	ldr	r3, [r7, #16]
 807c5cc:	2b00      	cmp	r3, #0
 807c5ce:	d101      	bne.n	807c5d4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 807c5d0:	2303      	movs	r3, #3
 807c5d2:	e0d5      	b.n	807c780 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807c5d4:	683b      	ldr	r3, [r7, #0]
 807c5d6:	781b      	ldrb	r3, [r3, #0]
 807c5d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807c5dc:	2b00      	cmp	r3, #0
 807c5de:	d03e      	beq.n	807c65e <USBD_DFU_Setup+0xb6>
 807c5e0:	2b20      	cmp	r3, #32
 807c5e2:	f040 80c5 	bne.w	807c770 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 807c5e6:	683b      	ldr	r3, [r7, #0]
 807c5e8:	785b      	ldrb	r3, [r3, #1]
 807c5ea:	2b06      	cmp	r3, #6
 807c5ec:	d82f      	bhi.n	807c64e <USBD_DFU_Setup+0xa6>
 807c5ee:	a201      	add	r2, pc, #4	; (adr r2, 807c5f4 <USBD_DFU_Setup+0x4c>)
 807c5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807c5f4:	0807c645 	.word	0x0807c645
 807c5f8:	0807c611 	.word	0x0807c611
 807c5fc:	0807c61b 	.word	0x0807c61b
 807c600:	0807c625 	.word	0x0807c625
 807c604:	0807c62d 	.word	0x0807c62d
 807c608:	0807c635 	.word	0x0807c635
 807c60c:	0807c63d 	.word	0x0807c63d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 807c610:	6839      	ldr	r1, [r7, #0]
 807c612:	6878      	ldr	r0, [r7, #4]
 807c614:	f000 fa6c 	bl	807caf0 <DFU_Download>
          break;
 807c618:	e020      	b.n	807c65c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 807c61a:	6839      	ldr	r1, [r7, #0]
 807c61c:	6878      	ldr	r0, [r7, #4]
 807c61e:	f000 fad3 	bl	807cbc8 <DFU_Upload>
          break;
 807c622:	e01b      	b.n	807c65c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 807c624:	6878      	ldr	r0, [r7, #4]
 807c626:	f000 fba9 	bl	807cd7c <DFU_GetStatus>
          break;
 807c62a:	e017      	b.n	807c65c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 807c62c:	6878      	ldr	r0, [r7, #4]
 807c62e:	f000 fc5b 	bl	807cee8 <DFU_ClearStatus>
          break;
 807c632:	e013      	b.n	807c65c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 807c634:	6878      	ldr	r0, [r7, #4]
 807c636:	f000 fcab 	bl	807cf90 <DFU_GetState>
          break;
 807c63a:	e00f      	b.n	807c65c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 807c63c:	6878      	ldr	r0, [r7, #4]
 807c63e:	f000 fcbf 	bl	807cfc0 <DFU_Abort>
          break;
 807c642:	e00b      	b.n	807c65c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 807c644:	6839      	ldr	r1, [r7, #0]
 807c646:	6878      	ldr	r0, [r7, #4]
 807c648:	f000 f9ee 	bl	807ca28 <DFU_Detach>
          break;
 807c64c:	e006      	b.n	807c65c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 807c64e:	6839      	ldr	r1, [r7, #0]
 807c650:	6878      	ldr	r0, [r7, #4]
 807c652:	f001 fdf9 	bl	807e248 <USBD_CtlError>
          ret = USBD_FAIL;
 807c656:	2303      	movs	r3, #3
 807c658:	77fb      	strb	r3, [r7, #31]
          break;
 807c65a:	bf00      	nop
      }
      break;
 807c65c:	e08f      	b.n	807c77e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807c65e:	683b      	ldr	r3, [r7, #0]
 807c660:	785b      	ldrb	r3, [r3, #1]
 807c662:	2b0b      	cmp	r3, #11
 807c664:	d87b      	bhi.n	807c75e <USBD_DFU_Setup+0x1b6>
 807c666:	a201      	add	r2, pc, #4	; (adr r2, 807c66c <USBD_DFU_Setup+0xc4>)
 807c668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807c66c:	0807c69d 	.word	0x0807c69d
 807c670:	0807c76d 	.word	0x0807c76d
 807c674:	0807c75f 	.word	0x0807c75f
 807c678:	0807c75f 	.word	0x0807c75f
 807c67c:	0807c75f 	.word	0x0807c75f
 807c680:	0807c75f 	.word	0x0807c75f
 807c684:	0807c6c7 	.word	0x0807c6c7
 807c688:	0807c75f 	.word	0x0807c75f
 807c68c:	0807c75f 	.word	0x0807c75f
 807c690:	0807c75f 	.word	0x0807c75f
 807c694:	0807c6f1 	.word	0x0807c6f1
 807c698:	0807c71d 	.word	0x0807c71d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c69c:	687b      	ldr	r3, [r7, #4]
 807c69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807c6a2:	b2db      	uxtb	r3, r3
 807c6a4:	2b03      	cmp	r3, #3
 807c6a6:	d107      	bne.n	807c6b8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 807c6a8:	f107 030e 	add.w	r3, r7, #14
 807c6ac:	2202      	movs	r2, #2
 807c6ae:	4619      	mov	r1, r3
 807c6b0:	6878      	ldr	r0, [r7, #4]
 807c6b2:	f001 fe3a 	bl	807e32a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c6b6:	e05a      	b.n	807c76e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c6b8:	6839      	ldr	r1, [r7, #0]
 807c6ba:	6878      	ldr	r0, [r7, #4]
 807c6bc:	f001 fdc4 	bl	807e248 <USBD_CtlError>
            ret = USBD_FAIL;
 807c6c0:	2303      	movs	r3, #3
 807c6c2:	77fb      	strb	r3, [r7, #31]
          break;
 807c6c4:	e053      	b.n	807c76e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 807c6c6:	683b      	ldr	r3, [r7, #0]
 807c6c8:	885b      	ldrh	r3, [r3, #2]
 807c6ca:	0a1b      	lsrs	r3, r3, #8
 807c6cc:	b29b      	uxth	r3, r3
 807c6ce:	2b21      	cmp	r3, #33	; 0x21
 807c6d0:	d107      	bne.n	807c6e2 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 807c6d2:	4b2d      	ldr	r3, [pc, #180]	; (807c788 <USBD_DFU_Setup+0x1e0>)
 807c6d4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 807c6d6:	683b      	ldr	r3, [r7, #0]
 807c6d8:	88db      	ldrh	r3, [r3, #6]
 807c6da:	2b09      	cmp	r3, #9
 807c6dc:	bf28      	it	cs
 807c6de:	2309      	movcs	r3, #9
 807c6e0:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 807c6e2:	8afb      	ldrh	r3, [r7, #22]
 807c6e4:	461a      	mov	r2, r3
 807c6e6:	69b9      	ldr	r1, [r7, #24]
 807c6e8:	6878      	ldr	r0, [r7, #4]
 807c6ea:	f001 fe1e 	bl	807e32a <USBD_CtlSendData>
          break;
 807c6ee:	e03e      	b.n	807c76e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c6f0:	687b      	ldr	r3, [r7, #4]
 807c6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807c6f6:	b2db      	uxtb	r3, r3
 807c6f8:	2b03      	cmp	r3, #3
 807c6fa:	d108      	bne.n	807c70e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 807c6fc:	693b      	ldr	r3, [r7, #16]
 807c6fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 807c702:	2201      	movs	r2, #1
 807c704:	4619      	mov	r1, r3
 807c706:	6878      	ldr	r0, [r7, #4]
 807c708:	f001 fe0f 	bl	807e32a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c70c:	e02f      	b.n	807c76e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c70e:	6839      	ldr	r1, [r7, #0]
 807c710:	6878      	ldr	r0, [r7, #4]
 807c712:	f001 fd99 	bl	807e248 <USBD_CtlError>
            ret = USBD_FAIL;
 807c716:	2303      	movs	r3, #3
 807c718:	77fb      	strb	r3, [r7, #31]
          break;
 807c71a:	e028      	b.n	807c76e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 807c71c:	683b      	ldr	r3, [r7, #0]
 807c71e:	885b      	ldrh	r3, [r3, #2]
 807c720:	b2db      	uxtb	r3, r3
 807c722:	2b00      	cmp	r3, #0
 807c724:	d114      	bne.n	807c750 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c726:	687b      	ldr	r3, [r7, #4]
 807c728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807c72c:	b2db      	uxtb	r3, r3
 807c72e:	2b03      	cmp	r3, #3
 807c730:	d107      	bne.n	807c742 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 807c732:	683b      	ldr	r3, [r7, #0]
 807c734:	885b      	ldrh	r3, [r3, #2]
 807c736:	b2db      	uxtb	r3, r3
 807c738:	461a      	mov	r2, r3
 807c73a:	693b      	ldr	r3, [r7, #16]
 807c73c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c740:	e015      	b.n	807c76e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 807c742:	6839      	ldr	r1, [r7, #0]
 807c744:	6878      	ldr	r0, [r7, #4]
 807c746:	f001 fd7f 	bl	807e248 <USBD_CtlError>
              ret = USBD_FAIL;
 807c74a:	2303      	movs	r3, #3
 807c74c:	77fb      	strb	r3, [r7, #31]
          break;
 807c74e:	e00e      	b.n	807c76e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c750:	6839      	ldr	r1, [r7, #0]
 807c752:	6878      	ldr	r0, [r7, #4]
 807c754:	f001 fd78 	bl	807e248 <USBD_CtlError>
            ret = USBD_FAIL;
 807c758:	2303      	movs	r3, #3
 807c75a:	77fb      	strb	r3, [r7, #31]
          break;
 807c75c:	e007      	b.n	807c76e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 807c75e:	6839      	ldr	r1, [r7, #0]
 807c760:	6878      	ldr	r0, [r7, #4]
 807c762:	f001 fd71 	bl	807e248 <USBD_CtlError>
          ret = USBD_FAIL;
 807c766:	2303      	movs	r3, #3
 807c768:	77fb      	strb	r3, [r7, #31]
          break;
 807c76a:	e000      	b.n	807c76e <USBD_DFU_Setup+0x1c6>
          break;
 807c76c:	bf00      	nop
      }
      break;
 807c76e:	e006      	b.n	807c77e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 807c770:	6839      	ldr	r1, [r7, #0]
 807c772:	6878      	ldr	r0, [r7, #4]
 807c774:	f001 fd68 	bl	807e248 <USBD_CtlError>
      ret = USBD_FAIL;
 807c778:	2303      	movs	r3, #3
 807c77a:	77fb      	strb	r3, [r7, #31]
      break;
 807c77c:	bf00      	nop
  }

  return (uint8_t)ret;
 807c77e:	7ffb      	ldrb	r3, [r7, #31]
}
 807c780:	4618      	mov	r0, r3
 807c782:	3720      	adds	r7, #32
 807c784:	46bd      	mov	sp, r7
 807c786:	bd80      	pop	{r7, pc}
 807c788:	2000005a 	.word	0x2000005a

0807c78c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 807c78c:	b480      	push	{r7}
 807c78e:	b083      	sub	sp, #12
 807c790:	af00      	add	r7, sp, #0
 807c792:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 807c794:	687b      	ldr	r3, [r7, #4]
 807c796:	221b      	movs	r2, #27
 807c798:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 807c79a:	4b03      	ldr	r3, [pc, #12]	; (807c7a8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 807c79c:	4618      	mov	r0, r3
 807c79e:	370c      	adds	r7, #12
 807c7a0:	46bd      	mov	sp, r7
 807c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c7a6:	4770      	bx	lr
 807c7a8:	20000048 	.word	0x20000048

0807c7ac <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 807c7ac:	b480      	push	{r7}
 807c7ae:	b083      	sub	sp, #12
 807c7b0:	af00      	add	r7, sp, #0
 807c7b2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807c7b4:	2300      	movs	r3, #0
}
 807c7b6:	4618      	mov	r0, r3
 807c7b8:	370c      	adds	r7, #12
 807c7ba:	46bd      	mov	sp, r7
 807c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c7c0:	4770      	bx	lr

0807c7c2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 807c7c2:	b580      	push	{r7, lr}
 807c7c4:	b088      	sub	sp, #32
 807c7c6:	af00      	add	r7, sp, #0
 807c7c8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c7ca:	687b      	ldr	r3, [r7, #4]
 807c7cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c7d0:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807c7d2:	687b      	ldr	r3, [r7, #4]
 807c7d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807c7d8:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 807c7da:	69fb      	ldr	r3, [r7, #28]
 807c7dc:	2b00      	cmp	r3, #0
 807c7de:	d101      	bne.n	807c7e4 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 807c7e0:	2303      	movs	r3, #3
 807c7e2:	e0ce      	b.n	807c982 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 807c7e4:	69fb      	ldr	r3, [r7, #28]
 807c7e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807c7ea:	2b04      	cmp	r3, #4
 807c7ec:	f040 80bd 	bne.w	807c96a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 807c7f0:	69fb      	ldr	r3, [r7, #28]
 807c7f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807c7f6:	2b00      	cmp	r3, #0
 807c7f8:	d17c      	bne.n	807c8f4 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 807c7fa:	69fb      	ldr	r3, [r7, #28]
 807c7fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807c800:	2b01      	cmp	r3, #1
 807c802:	f000 8093 	beq.w	807c92c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 807c806:	69fb      	ldr	r3, [r7, #28]
 807c808:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807c80c:	2b05      	cmp	r3, #5
 807c80e:	d15e      	bne.n	807c8ce <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 807c810:	69fb      	ldr	r3, [r7, #28]
 807c812:	781b      	ldrb	r3, [r3, #0]
 807c814:	2b21      	cmp	r3, #33	; 0x21
 807c816:	d124      	bne.n	807c862 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 807c818:	69fb      	ldr	r3, [r7, #28]
 807c81a:	785b      	ldrb	r3, [r3, #1]
 807c81c:	461a      	mov	r2, r3
 807c81e:	69fb      	ldr	r3, [r7, #28]
 807c820:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 807c824:	69fb      	ldr	r3, [r7, #28]
 807c826:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c82a:	69fb      	ldr	r3, [r7, #28]
 807c82c:	789b      	ldrb	r3, [r3, #2]
 807c82e:	021b      	lsls	r3, r3, #8
 807c830:	441a      	add	r2, r3
 807c832:	69fb      	ldr	r3, [r7, #28]
 807c834:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 807c838:	69fb      	ldr	r3, [r7, #28]
 807c83a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c83e:	69fb      	ldr	r3, [r7, #28]
 807c840:	78db      	ldrb	r3, [r3, #3]
 807c842:	041b      	lsls	r3, r3, #16
 807c844:	441a      	add	r2, r3
 807c846:	69fb      	ldr	r3, [r7, #28]
 807c848:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807c84c:	69fb      	ldr	r3, [r7, #28]
 807c84e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c852:	69fb      	ldr	r3, [r7, #28]
 807c854:	791b      	ldrb	r3, [r3, #4]
 807c856:	061b      	lsls	r3, r3, #24
 807c858:	441a      	add	r2, r3
 807c85a:	69fb      	ldr	r3, [r7, #28]
 807c85c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 807c860:	e064      	b.n	807c92c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 807c862:	69fb      	ldr	r3, [r7, #28]
 807c864:	781b      	ldrb	r3, [r3, #0]
 807c866:	2b41      	cmp	r3, #65	; 0x41
 807c868:	d12f      	bne.n	807c8ca <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 807c86a:	69fb      	ldr	r3, [r7, #28]
 807c86c:	785b      	ldrb	r3, [r3, #1]
 807c86e:	461a      	mov	r2, r3
 807c870:	69fb      	ldr	r3, [r7, #28]
 807c872:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 807c876:	69fb      	ldr	r3, [r7, #28]
 807c878:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c87c:	69fb      	ldr	r3, [r7, #28]
 807c87e:	789b      	ldrb	r3, [r3, #2]
 807c880:	021b      	lsls	r3, r3, #8
 807c882:	441a      	add	r2, r3
 807c884:	69fb      	ldr	r3, [r7, #28]
 807c886:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 807c88a:	69fb      	ldr	r3, [r7, #28]
 807c88c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c890:	69fb      	ldr	r3, [r7, #28]
 807c892:	78db      	ldrb	r3, [r3, #3]
 807c894:	041b      	lsls	r3, r3, #16
 807c896:	441a      	add	r2, r3
 807c898:	69fb      	ldr	r3, [r7, #28]
 807c89a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807c89e:	69fb      	ldr	r3, [r7, #28]
 807c8a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c8a4:	69fb      	ldr	r3, [r7, #28]
 807c8a6:	791b      	ldrb	r3, [r3, #4]
 807c8a8:	061b      	lsls	r3, r3, #24
 807c8aa:	441a      	add	r2, r3
 807c8ac:	69fb      	ldr	r3, [r7, #28]
 807c8ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 807c8b2:	69bb      	ldr	r3, [r7, #24]
 807c8b4:	68db      	ldr	r3, [r3, #12]
 807c8b6:	69fa      	ldr	r2, [r7, #28]
 807c8b8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 807c8bc:	4610      	mov	r0, r2
 807c8be:	4798      	blx	r3
 807c8c0:	4603      	mov	r3, r0
 807c8c2:	2b00      	cmp	r3, #0
 807c8c4:	d032      	beq.n	807c92c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 807c8c6:	2303      	movs	r3, #3
 807c8c8:	e05b      	b.n	807c982 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 807c8ca:	2303      	movs	r3, #3
 807c8cc:	e059      	b.n	807c982 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 807c8ce:	69fb      	ldr	r3, [r7, #28]
 807c8d0:	2200      	movs	r2, #0
 807c8d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 807c8d6:	69fb      	ldr	r3, [r7, #28]
 807c8d8:	2200      	movs	r2, #0
 807c8da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 807c8de:	2300      	movs	r3, #0
 807c8e0:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 807c8e2:	2301      	movs	r3, #1
 807c8e4:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 807c8e6:	f107 030c 	add.w	r3, r7, #12
 807c8ea:	4619      	mov	r1, r3
 807c8ec:	6878      	ldr	r0, [r7, #4]
 807c8ee:	f001 fcab 	bl	807e248 <USBD_CtlError>
 807c8f2:	e01b      	b.n	807c92c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 807c8f4:	69fb      	ldr	r3, [r7, #28]
 807c8f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807c8fa:	2b01      	cmp	r3, #1
 807c8fc:	d916      	bls.n	807c92c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 807c8fe:	69fb      	ldr	r3, [r7, #28]
 807c900:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807c904:	3b02      	subs	r3, #2
 807c906:	029a      	lsls	r2, r3, #10
 807c908:	69fb      	ldr	r3, [r7, #28]
 807c90a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 807c90e:	4413      	add	r3, r2
 807c910:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 807c912:	69bb      	ldr	r3, [r7, #24]
 807c914:	691b      	ldr	r3, [r3, #16]
 807c916:	69f8      	ldr	r0, [r7, #28]
 807c918:	6979      	ldr	r1, [r7, #20]
 807c91a:	69fa      	ldr	r2, [r7, #28]
 807c91c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 807c920:	4798      	blx	r3
 807c922:	4603      	mov	r3, r0
 807c924:	2b00      	cmp	r3, #0
 807c926:	d001      	beq.n	807c92c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 807c928:	2303      	movs	r3, #3
 807c92a:	e02a      	b.n	807c982 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 807c92c:	69fb      	ldr	r3, [r7, #28]
 807c92e:	2200      	movs	r2, #0
 807c930:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 807c934:	69fb      	ldr	r3, [r7, #28]
 807c936:	2200      	movs	r2, #0
 807c938:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 807c93c:	69fb      	ldr	r3, [r7, #28]
 807c93e:	2203      	movs	r2, #3
 807c940:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807c944:	69fb      	ldr	r3, [r7, #28]
 807c946:	2200      	movs	r2, #0
 807c948:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807c94c:	69fb      	ldr	r3, [r7, #28]
 807c94e:	2200      	movs	r2, #0
 807c950:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807c954:	69fb      	ldr	r3, [r7, #28]
 807c956:	2200      	movs	r2, #0
 807c958:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807c95c:	69fb      	ldr	r3, [r7, #28]
 807c95e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807c962:	69fb      	ldr	r3, [r7, #28]
 807c964:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807c968:	e00a      	b.n	807c980 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 807c96a:	69fb      	ldr	r3, [r7, #28]
 807c96c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807c970:	2b07      	cmp	r3, #7
 807c972:	d103      	bne.n	807c97c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 807c974:	6878      	ldr	r0, [r7, #4]
 807c976:	f000 fb75 	bl	807d064 <DFU_Leave>
 807c97a:	e001      	b.n	807c980 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 807c97c:	2303      	movs	r3, #3
 807c97e:	e000      	b.n	807c982 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 807c980:	2300      	movs	r3, #0
}
 807c982:	4618      	mov	r0, r3
 807c984:	3720      	adds	r7, #32
 807c986:	46bd      	mov	sp, r7
 807c988:	bd80      	pop	{r7, pc}

0807c98a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 807c98a:	b480      	push	{r7}
 807c98c:	b083      	sub	sp, #12
 807c98e:	af00      	add	r7, sp, #0
 807c990:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807c992:	2300      	movs	r3, #0
}
 807c994:	4618      	mov	r0, r3
 807c996:	370c      	adds	r7, #12
 807c998:	46bd      	mov	sp, r7
 807c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c99e:	4770      	bx	lr

0807c9a0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 807c9a0:	b480      	push	{r7}
 807c9a2:	b083      	sub	sp, #12
 807c9a4:	af00      	add	r7, sp, #0
 807c9a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 807c9a8:	687b      	ldr	r3, [r7, #4]
 807c9aa:	220a      	movs	r2, #10
 807c9ac:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 807c9ae:	4b03      	ldr	r3, [pc, #12]	; (807c9bc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 807c9b0:	4618      	mov	r0, r3
 807c9b2:	370c      	adds	r7, #12
 807c9b4:	46bd      	mov	sp, r7
 807c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c9ba:	4770      	bx	lr
 807c9bc:	20000064 	.word	0x20000064

0807c9c0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 807c9c0:	b580      	push	{r7, lr}
 807c9c2:	b086      	sub	sp, #24
 807c9c4:	af00      	add	r7, sp, #0
 807c9c6:	60f8      	str	r0, [r7, #12]
 807c9c8:	460b      	mov	r3, r1
 807c9ca:	607a      	str	r2, [r7, #4]
 807c9cc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807c9ce:	68fb      	ldr	r3, [r7, #12]
 807c9d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807c9d4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 807c9d6:	7afb      	ldrb	r3, [r7, #11]
 807c9d8:	2b06      	cmp	r3, #6
 807c9da:	d808      	bhi.n	807c9ee <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 807c9dc:	697b      	ldr	r3, [r7, #20]
 807c9de:	681b      	ldr	r3, [r3, #0]
 807c9e0:	687a      	ldr	r2, [r7, #4]
 807c9e2:	4905      	ldr	r1, [pc, #20]	; (807c9f8 <USBD_DFU_GetUsrStringDesc+0x38>)
 807c9e4:	4618      	mov	r0, r3
 807c9e6:	f001 fc40 	bl	807e26a <USBD_GetString>
    return USBD_StrDesc;
 807c9ea:	4b03      	ldr	r3, [pc, #12]	; (807c9f8 <USBD_DFU_GetUsrStringDesc+0x38>)
 807c9ec:	e000      	b.n	807c9f0 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 807c9ee:	2300      	movs	r3, #0
  }
}
 807c9f0:	4618      	mov	r0, r3
 807c9f2:	3718      	adds	r7, #24
 807c9f4:	46bd      	mov	sp, r7
 807c9f6:	bd80      	pop	{r7, pc}
 807c9f8:	200000f8 	.word	0x200000f8

0807c9fc <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 807c9fc:	b480      	push	{r7}
 807c9fe:	b083      	sub	sp, #12
 807ca00:	af00      	add	r7, sp, #0
 807ca02:	6078      	str	r0, [r7, #4]
 807ca04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 807ca06:	683b      	ldr	r3, [r7, #0]
 807ca08:	2b00      	cmp	r3, #0
 807ca0a:	d101      	bne.n	807ca10 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 807ca0c:	2303      	movs	r3, #3
 807ca0e:	e004      	b.n	807ca1a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 807ca10:	687b      	ldr	r3, [r7, #4]
 807ca12:	683a      	ldr	r2, [r7, #0]
 807ca14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 807ca18:	2300      	movs	r3, #0
}
 807ca1a:	4618      	mov	r0, r3
 807ca1c:	370c      	adds	r7, #12
 807ca1e:	46bd      	mov	sp, r7
 807ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ca24:	4770      	bx	lr
	...

0807ca28 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807ca28:	b580      	push	{r7, lr}
 807ca2a:	b084      	sub	sp, #16
 807ca2c:	af00      	add	r7, sp, #0
 807ca2e:	6078      	str	r0, [r7, #4]
 807ca30:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807ca32:	687b      	ldr	r3, [r7, #4]
 807ca34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807ca38:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807ca3a:	68fb      	ldr	r3, [r7, #12]
 807ca3c:	2b00      	cmp	r3, #0
 807ca3e:	d051      	beq.n	807cae4 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807ca40:	68fb      	ldr	r3, [r7, #12]
 807ca42:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807ca46:	2b02      	cmp	r3, #2
 807ca48:	d013      	beq.n	807ca72 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807ca4a:	68fb      	ldr	r3, [r7, #12]
 807ca4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807ca50:	2b03      	cmp	r3, #3
 807ca52:	d00e      	beq.n	807ca72 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807ca54:	68fb      	ldr	r3, [r7, #12]
 807ca56:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807ca5a:	2b05      	cmp	r3, #5
 807ca5c:	d009      	beq.n	807ca72 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807ca5e:	68fb      	ldr	r3, [r7, #12]
 807ca60:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807ca64:	2b06      	cmp	r3, #6
 807ca66:	d004      	beq.n	807ca72 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807ca68:	68fb      	ldr	r3, [r7, #12]
 807ca6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807ca6e:	2b09      	cmp	r3, #9
 807ca70:	d125      	bne.n	807cabe <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 807ca72:	68fb      	ldr	r3, [r7, #12]
 807ca74:	2202      	movs	r2, #2
 807ca76:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 807ca7a:	68fb      	ldr	r3, [r7, #12]
 807ca7c:	2200      	movs	r2, #0
 807ca7e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807ca82:	68fb      	ldr	r3, [r7, #12]
 807ca84:	2200      	movs	r2, #0
 807ca86:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807ca8a:	68fb      	ldr	r3, [r7, #12]
 807ca8c:	2200      	movs	r2, #0
 807ca8e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 807ca92:	68fb      	ldr	r3, [r7, #12]
 807ca94:	2200      	movs	r2, #0
 807ca96:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807ca9a:	68fb      	ldr	r3, [r7, #12]
 807ca9c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807caa0:	68fb      	ldr	r3, [r7, #12]
 807caa2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 807caa6:	68fb      	ldr	r3, [r7, #12]
 807caa8:	2200      	movs	r2, #0
 807caaa:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 807caae:	68fb      	ldr	r3, [r7, #12]
 807cab0:	2200      	movs	r2, #0
 807cab2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 807cab6:	68fb      	ldr	r3, [r7, #12]
 807cab8:	2200      	movs	r2, #0
 807caba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 807cabe:	4b0b      	ldr	r3, [pc, #44]	; (807caec <DFU_Detach+0xc4>)
 807cac0:	7d5b      	ldrb	r3, [r3, #21]
 807cac2:	f003 0310 	and.w	r3, r3, #16
 807cac6:	2b00      	cmp	r3, #0
 807cac8:	d006      	beq.n	807cad8 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 807caca:	6878      	ldr	r0, [r7, #4]
 807cacc:	f000 fb7b 	bl	807d1c6 <USBD_Stop>
    (void)USBD_Start(pdev);
 807cad0:	6878      	ldr	r0, [r7, #4]
 807cad2:	f000 fb6c 	bl	807d1ae <USBD_Start>
 807cad6:	e006      	b.n	807cae6 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 807cad8:	683b      	ldr	r3, [r7, #0]
 807cada:	885b      	ldrh	r3, [r3, #2]
 807cadc:	4618      	mov	r0, r3
 807cade:	f7fb fefb 	bl	80788d8 <HAL_Delay>
 807cae2:	e000      	b.n	807cae6 <DFU_Detach+0xbe>
    return;
 807cae4:	bf00      	nop
  }
}
 807cae6:	3710      	adds	r7, #16
 807cae8:	46bd      	mov	sp, r7
 807caea:	bd80      	pop	{r7, pc}
 807caec:	20000048 	.word	0x20000048

0807caf0 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807caf0:	b580      	push	{r7, lr}
 807caf2:	b084      	sub	sp, #16
 807caf4:	af00      	add	r7, sp, #0
 807caf6:	6078      	str	r0, [r7, #4]
 807caf8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cafa:	687b      	ldr	r3, [r7, #4]
 807cafc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cb00:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cb02:	68fb      	ldr	r3, [r7, #12]
 807cb04:	2b00      	cmp	r3, #0
 807cb06:	d05b      	beq.n	807cbc0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 807cb08:	683b      	ldr	r3, [r7, #0]
 807cb0a:	88db      	ldrh	r3, [r3, #6]
 807cb0c:	2b00      	cmp	r3, #0
 807cb0e:	d02d      	beq.n	807cb6c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 807cb10:	68fb      	ldr	r3, [r7, #12]
 807cb12:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cb16:	2b02      	cmp	r3, #2
 807cb18:	d004      	beq.n	807cb24 <DFU_Download+0x34>
 807cb1a:	68fb      	ldr	r3, [r7, #12]
 807cb1c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cb20:	2b05      	cmp	r3, #5
 807cb22:	d11e      	bne.n	807cb62 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 807cb24:	683b      	ldr	r3, [r7, #0]
 807cb26:	885b      	ldrh	r3, [r3, #2]
 807cb28:	461a      	mov	r2, r3
 807cb2a:	68fb      	ldr	r3, [r7, #12]
 807cb2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 807cb30:	683b      	ldr	r3, [r7, #0]
 807cb32:	88db      	ldrh	r3, [r3, #6]
 807cb34:	461a      	mov	r2, r3
 807cb36:	68fb      	ldr	r3, [r7, #12]
 807cb38:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 807cb3c:	68fb      	ldr	r3, [r7, #12]
 807cb3e:	2203      	movs	r2, #3
 807cb40:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 807cb44:	68fb      	ldr	r3, [r7, #12]
 807cb46:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cb4a:	68fb      	ldr	r3, [r7, #12]
 807cb4c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 807cb50:	68f9      	ldr	r1, [r7, #12]
 807cb52:	68fb      	ldr	r3, [r7, #12]
 807cb54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cb58:	461a      	mov	r2, r3
 807cb5a:	6878      	ldr	r0, [r7, #4]
 807cb5c:	f001 fc11 	bl	807e382 <USBD_CtlPrepareRx>
 807cb60:	e02f      	b.n	807cbc2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cb62:	6839      	ldr	r1, [r7, #0]
 807cb64:	6878      	ldr	r0, [r7, #4]
 807cb66:	f001 fb6f 	bl	807e248 <USBD_CtlError>
 807cb6a:	e02a      	b.n	807cbc2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 807cb6c:	68fb      	ldr	r3, [r7, #12]
 807cb6e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cb72:	2b05      	cmp	r3, #5
 807cb74:	d004      	beq.n	807cb80 <DFU_Download+0x90>
 807cb76:	68fb      	ldr	r3, [r7, #12]
 807cb78:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cb7c:	2b02      	cmp	r3, #2
 807cb7e:	d11a      	bne.n	807cbb6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 807cb80:	68fb      	ldr	r3, [r7, #12]
 807cb82:	2201      	movs	r2, #1
 807cb84:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 807cb88:	68fb      	ldr	r3, [r7, #12]
 807cb8a:	2206      	movs	r2, #6
 807cb8c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 807cb90:	68fb      	ldr	r3, [r7, #12]
 807cb92:	2200      	movs	r2, #0
 807cb94:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 807cb98:	68fb      	ldr	r3, [r7, #12]
 807cb9a:	2200      	movs	r2, #0
 807cb9c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 807cba0:	68fb      	ldr	r3, [r7, #12]
 807cba2:	2200      	movs	r2, #0
 807cba4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 807cba8:	68fb      	ldr	r3, [r7, #12]
 807cbaa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cbae:	68fb      	ldr	r3, [r7, #12]
 807cbb0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807cbb4:	e005      	b.n	807cbc2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cbb6:	6839      	ldr	r1, [r7, #0]
 807cbb8:	6878      	ldr	r0, [r7, #4]
 807cbba:	f001 fb45 	bl	807e248 <USBD_CtlError>
 807cbbe:	e000      	b.n	807cbc2 <DFU_Download+0xd2>
    return;
 807cbc0:	bf00      	nop
    }
  }
}
 807cbc2:	3710      	adds	r7, #16
 807cbc4:	46bd      	mov	sp, r7
 807cbc6:	bd80      	pop	{r7, pc}

0807cbc8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807cbc8:	b580      	push	{r7, lr}
 807cbca:	b086      	sub	sp, #24
 807cbcc:	af00      	add	r7, sp, #0
 807cbce:	6078      	str	r0, [r7, #4]
 807cbd0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cbd2:	687b      	ldr	r3, [r7, #4]
 807cbd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cbd8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807cbda:	687b      	ldr	r3, [r7, #4]
 807cbdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807cbe0:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 807cbe2:	697b      	ldr	r3, [r7, #20]
 807cbe4:	2b00      	cmp	r3, #0
 807cbe6:	f000 80c4 	beq.w	807cd72 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 807cbea:	683b      	ldr	r3, [r7, #0]
 807cbec:	88db      	ldrh	r3, [r3, #6]
 807cbee:	2b00      	cmp	r3, #0
 807cbf0:	f000 80a8 	beq.w	807cd44 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807cbf4:	697b      	ldr	r3, [r7, #20]
 807cbf6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cbfa:	2b02      	cmp	r3, #2
 807cbfc:	d005      	beq.n	807cc0a <DFU_Upload+0x42>
 807cbfe:	697b      	ldr	r3, [r7, #20]
 807cc00:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cc04:	2b09      	cmp	r3, #9
 807cc06:	f040 8090 	bne.w	807cd2a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 807cc0a:	683b      	ldr	r3, [r7, #0]
 807cc0c:	885b      	ldrh	r3, [r3, #2]
 807cc0e:	461a      	mov	r2, r3
 807cc10:	697b      	ldr	r3, [r7, #20]
 807cc12:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 807cc16:	683b      	ldr	r3, [r7, #0]
 807cc18:	88db      	ldrh	r3, [r3, #6]
 807cc1a:	461a      	mov	r2, r3
 807cc1c:	697b      	ldr	r3, [r7, #20]
 807cc1e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 807cc22:	697b      	ldr	r3, [r7, #20]
 807cc24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807cc28:	2b00      	cmp	r3, #0
 807cc2a:	d12c      	bne.n	807cc86 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 807cc2c:	697b      	ldr	r3, [r7, #20]
 807cc2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cc32:	2b03      	cmp	r3, #3
 807cc34:	d901      	bls.n	807cc3a <DFU_Upload+0x72>
 807cc36:	2202      	movs	r2, #2
 807cc38:	e000      	b.n	807cc3c <DFU_Upload+0x74>
 807cc3a:	2209      	movs	r2, #9
 807cc3c:	697b      	ldr	r3, [r7, #20]
 807cc3e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807cc42:	697b      	ldr	r3, [r7, #20]
 807cc44:	2200      	movs	r2, #0
 807cc46:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cc4a:	697b      	ldr	r3, [r7, #20]
 807cc4c:	2200      	movs	r2, #0
 807cc4e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807cc52:	697b      	ldr	r3, [r7, #20]
 807cc54:	2200      	movs	r2, #0
 807cc56:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cc5a:	697b      	ldr	r3, [r7, #20]
 807cc5c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cc60:	697b      	ldr	r3, [r7, #20]
 807cc62:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 807cc66:	697b      	ldr	r3, [r7, #20]
 807cc68:	2200      	movs	r2, #0
 807cc6a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 807cc6c:	697b      	ldr	r3, [r7, #20]
 807cc6e:	2221      	movs	r2, #33	; 0x21
 807cc70:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 807cc72:	697b      	ldr	r3, [r7, #20]
 807cc74:	2241      	movs	r2, #65	; 0x41
 807cc76:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 807cc78:	697b      	ldr	r3, [r7, #20]
 807cc7a:	2203      	movs	r2, #3
 807cc7c:	4619      	mov	r1, r3
 807cc7e:	6878      	ldr	r0, [r7, #4]
 807cc80:	f001 fb53 	bl	807e32a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 807cc84:	e076      	b.n	807cd74 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 807cc86:	697b      	ldr	r3, [r7, #20]
 807cc88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807cc8c:	2b01      	cmp	r3, #1
 807cc8e:	d931      	bls.n	807ccf4 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 807cc90:	697b      	ldr	r3, [r7, #20]
 807cc92:	2209      	movs	r2, #9
 807cc94:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807cc98:	697b      	ldr	r3, [r7, #20]
 807cc9a:	2200      	movs	r2, #0
 807cc9c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cca0:	697b      	ldr	r3, [r7, #20]
 807cca2:	2200      	movs	r2, #0
 807cca4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807cca8:	697b      	ldr	r3, [r7, #20]
 807ccaa:	2200      	movs	r2, #0
 807ccac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ccb0:	697b      	ldr	r3, [r7, #20]
 807ccb2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807ccb6:	697b      	ldr	r3, [r7, #20]
 807ccb8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 807ccbc:	697b      	ldr	r3, [r7, #20]
 807ccbe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807ccc2:	3b02      	subs	r3, #2
 807ccc4:	029a      	lsls	r2, r3, #10
 807ccc6:	697b      	ldr	r3, [r7, #20]
 807ccc8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 807cccc:	4413      	add	r3, r2
 807ccce:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 807ccd0:	693b      	ldr	r3, [r7, #16]
 807ccd2:	695b      	ldr	r3, [r3, #20]
 807ccd4:	68f8      	ldr	r0, [r7, #12]
 807ccd6:	6979      	ldr	r1, [r7, #20]
 807ccd8:	697a      	ldr	r2, [r7, #20]
 807ccda:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 807ccde:	4798      	blx	r3
 807cce0:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 807cce2:	697b      	ldr	r3, [r7, #20]
 807cce4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cce8:	461a      	mov	r2, r3
 807ccea:	68b9      	ldr	r1, [r7, #8]
 807ccec:	6878      	ldr	r0, [r7, #4]
 807ccee:	f001 fb1c 	bl	807e32a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 807ccf2:	e03f      	b.n	807cd74 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 807ccf4:	697b      	ldr	r3, [r7, #20]
 807ccf6:	220f      	movs	r2, #15
 807ccf8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807ccfc:	697b      	ldr	r3, [r7, #20]
 807ccfe:	2200      	movs	r2, #0
 807cd00:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cd04:	697b      	ldr	r3, [r7, #20]
 807cd06:	2200      	movs	r2, #0
 807cd08:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807cd0c:	697b      	ldr	r3, [r7, #20]
 807cd0e:	2200      	movs	r2, #0
 807cd10:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cd14:	697b      	ldr	r3, [r7, #20]
 807cd16:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cd1a:	697b      	ldr	r3, [r7, #20]
 807cd1c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 807cd20:	6839      	ldr	r1, [r7, #0]
 807cd22:	6878      	ldr	r0, [r7, #4]
 807cd24:	f001 fa90 	bl	807e248 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 807cd28:	e024      	b.n	807cd74 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 807cd2a:	697b      	ldr	r3, [r7, #20]
 807cd2c:	2200      	movs	r2, #0
 807cd2e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 807cd32:	697b      	ldr	r3, [r7, #20]
 807cd34:	2200      	movs	r2, #0
 807cd36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cd3a:	6839      	ldr	r1, [r7, #0]
 807cd3c:	6878      	ldr	r0, [r7, #4]
 807cd3e:	f001 fa83 	bl	807e248 <USBD_CtlError>
 807cd42:	e017      	b.n	807cd74 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807cd44:	697b      	ldr	r3, [r7, #20]
 807cd46:	2202      	movs	r2, #2
 807cd48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807cd4c:	697b      	ldr	r3, [r7, #20]
 807cd4e:	2200      	movs	r2, #0
 807cd50:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807cd54:	697b      	ldr	r3, [r7, #20]
 807cd56:	2200      	movs	r2, #0
 807cd58:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807cd5c:	697b      	ldr	r3, [r7, #20]
 807cd5e:	2200      	movs	r2, #0
 807cd60:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807cd64:	697b      	ldr	r3, [r7, #20]
 807cd66:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cd6a:	697b      	ldr	r3, [r7, #20]
 807cd6c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807cd70:	e000      	b.n	807cd74 <DFU_Upload+0x1ac>
    return;
 807cd72:	bf00      	nop
  }
}
 807cd74:	3718      	adds	r7, #24
 807cd76:	46bd      	mov	sp, r7
 807cd78:	bd80      	pop	{r7, pc}
	...

0807cd7c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 807cd7c:	b580      	push	{r7, lr}
 807cd7e:	b084      	sub	sp, #16
 807cd80:	af00      	add	r7, sp, #0
 807cd82:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cd84:	687b      	ldr	r3, [r7, #4]
 807cd86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cd8a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807cd8c:	687b      	ldr	r3, [r7, #4]
 807cd8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807cd92:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 807cd94:	68fb      	ldr	r3, [r7, #12]
 807cd96:	2b00      	cmp	r3, #0
 807cd98:	f000 80a0 	beq.w	807cedc <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 807cd9c:	68fb      	ldr	r3, [r7, #12]
 807cd9e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cda2:	2b03      	cmp	r3, #3
 807cda4:	d002      	beq.n	807cdac <DFU_GetStatus+0x30>
 807cda6:	2b06      	cmp	r3, #6
 807cda8:	d051      	beq.n	807ce4e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 807cdaa:	e08e      	b.n	807ceca <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 807cdac:	68fb      	ldr	r3, [r7, #12]
 807cdae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cdb2:	2b00      	cmp	r3, #0
 807cdb4:	d034      	beq.n	807ce20 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 807cdb6:	68fb      	ldr	r3, [r7, #12]
 807cdb8:	2204      	movs	r2, #4
 807cdba:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 807cdbe:	68fb      	ldr	r3, [r7, #12]
 807cdc0:	2200      	movs	r2, #0
 807cdc2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cdc6:	68fb      	ldr	r3, [r7, #12]
 807cdc8:	2200      	movs	r2, #0
 807cdca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807cdce:	68fb      	ldr	r3, [r7, #12]
 807cdd0:	2200      	movs	r2, #0
 807cdd2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cdd6:	68fb      	ldr	r3, [r7, #12]
 807cdd8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cddc:	68fb      	ldr	r3, [r7, #12]
 807cdde:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 807cde2:	68fb      	ldr	r3, [r7, #12]
 807cde4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807cde8:	2b00      	cmp	r3, #0
 807cdea:	d10e      	bne.n	807ce0a <DFU_GetStatus+0x8e>
 807cdec:	68fb      	ldr	r3, [r7, #12]
 807cdee:	781b      	ldrb	r3, [r3, #0]
 807cdf0:	2b41      	cmp	r3, #65	; 0x41
 807cdf2:	d10a      	bne.n	807ce0a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 807cdf4:	68bb      	ldr	r3, [r7, #8]
 807cdf6:	699b      	ldr	r3, [r3, #24]
 807cdf8:	68fa      	ldr	r2, [r7, #12]
 807cdfa:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 807cdfe:	68fa      	ldr	r2, [r7, #12]
 807ce00:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 807ce04:	2100      	movs	r1, #0
 807ce06:	4798      	blx	r3
      break;
 807ce08:	e05f      	b.n	807ceca <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 807ce0a:	68bb      	ldr	r3, [r7, #8]
 807ce0c:	699b      	ldr	r3, [r3, #24]
 807ce0e:	68fa      	ldr	r2, [r7, #12]
 807ce10:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 807ce14:	68fa      	ldr	r2, [r7, #12]
 807ce16:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 807ce1a:	2101      	movs	r1, #1
 807ce1c:	4798      	blx	r3
      break;
 807ce1e:	e054      	b.n	807ceca <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 807ce20:	68fb      	ldr	r3, [r7, #12]
 807ce22:	2205      	movs	r2, #5
 807ce24:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 807ce28:	68fb      	ldr	r3, [r7, #12]
 807ce2a:	2200      	movs	r2, #0
 807ce2c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807ce30:	68fb      	ldr	r3, [r7, #12]
 807ce32:	2200      	movs	r2, #0
 807ce34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807ce38:	68fb      	ldr	r3, [r7, #12]
 807ce3a:	2200      	movs	r2, #0
 807ce3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ce40:	68fb      	ldr	r3, [r7, #12]
 807ce42:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807ce46:	68fb      	ldr	r3, [r7, #12]
 807ce48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 807ce4c:	e03d      	b.n	807ceca <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 807ce4e:	68fb      	ldr	r3, [r7, #12]
 807ce50:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 807ce54:	2b01      	cmp	r3, #1
 807ce56:	d116      	bne.n	807ce86 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 807ce58:	68fb      	ldr	r3, [r7, #12]
 807ce5a:	2207      	movs	r2, #7
 807ce5c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 807ce60:	68fb      	ldr	r3, [r7, #12]
 807ce62:	2201      	movs	r2, #1
 807ce64:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807ce68:	68fb      	ldr	r3, [r7, #12]
 807ce6a:	2200      	movs	r2, #0
 807ce6c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807ce70:	68fb      	ldr	r3, [r7, #12]
 807ce72:	2200      	movs	r2, #0
 807ce74:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ce78:	68fb      	ldr	r3, [r7, #12]
 807ce7a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807ce7e:	68fb      	ldr	r3, [r7, #12]
 807ce80:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 807ce84:	e020      	b.n	807cec8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 807ce86:	68fb      	ldr	r3, [r7, #12]
 807ce88:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 807ce8c:	2b00      	cmp	r3, #0
 807ce8e:	d11b      	bne.n	807cec8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 807ce90:	4b14      	ldr	r3, [pc, #80]	; (807cee4 <DFU_GetStatus+0x168>)
 807ce92:	7d1b      	ldrb	r3, [r3, #20]
 807ce94:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 807ce98:	2b00      	cmp	r3, #0
 807ce9a:	d015      	beq.n	807cec8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 807ce9c:	68fb      	ldr	r3, [r7, #12]
 807ce9e:	2202      	movs	r2, #2
 807cea0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 807cea4:	68fb      	ldr	r3, [r7, #12]
 807cea6:	2200      	movs	r2, #0
 807cea8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 807ceac:	68fb      	ldr	r3, [r7, #12]
 807ceae:	2200      	movs	r2, #0
 807ceb0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 807ceb4:	68fb      	ldr	r3, [r7, #12]
 807ceb6:	2200      	movs	r2, #0
 807ceb8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 807cebc:	68fb      	ldr	r3, [r7, #12]
 807cebe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cec2:	68fb      	ldr	r3, [r7, #12]
 807cec4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 807cec8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 807ceca:	68fb      	ldr	r3, [r7, #12]
 807cecc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 807ced0:	2206      	movs	r2, #6
 807ced2:	4619      	mov	r1, r3
 807ced4:	6878      	ldr	r0, [r7, #4]
 807ced6:	f001 fa28 	bl	807e32a <USBD_CtlSendData>
 807ceda:	e000      	b.n	807cede <DFU_GetStatus+0x162>
    return;
 807cedc:	bf00      	nop
}
 807cede:	3710      	adds	r7, #16
 807cee0:	46bd      	mov	sp, r7
 807cee2:	bd80      	pop	{r7, pc}
 807cee4:	20000048 	.word	0x20000048

0807cee8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 807cee8:	b480      	push	{r7}
 807ceea:	b085      	sub	sp, #20
 807ceec:	af00      	add	r7, sp, #0
 807ceee:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cef0:	687b      	ldr	r3, [r7, #4]
 807cef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cef6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cef8:	68fb      	ldr	r3, [r7, #12]
 807cefa:	2b00      	cmp	r3, #0
 807cefc:	d042      	beq.n	807cf84 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 807cefe:	68fb      	ldr	r3, [r7, #12]
 807cf00:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cf04:	2b0a      	cmp	r3, #10
 807cf06:	d11e      	bne.n	807cf46 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807cf08:	68fb      	ldr	r3, [r7, #12]
 807cf0a:	2202      	movs	r2, #2
 807cf0c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 807cf10:	68fb      	ldr	r3, [r7, #12]
 807cf12:	2200      	movs	r2, #0
 807cf14:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807cf18:	68fb      	ldr	r3, [r7, #12]
 807cf1a:	2200      	movs	r2, #0
 807cf1c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807cf20:	68fb      	ldr	r3, [r7, #12]
 807cf22:	2200      	movs	r2, #0
 807cf24:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807cf28:	68fb      	ldr	r3, [r7, #12]
 807cf2a:	2200      	movs	r2, #0
 807cf2c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807cf30:	68fb      	ldr	r3, [r7, #12]
 807cf32:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cf36:	68fb      	ldr	r3, [r7, #12]
 807cf38:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807cf3c:	68fb      	ldr	r3, [r7, #12]
 807cf3e:	2200      	movs	r2, #0
 807cf40:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 807cf44:	e01f      	b.n	807cf86 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 807cf46:	68fb      	ldr	r3, [r7, #12]
 807cf48:	220a      	movs	r2, #10
 807cf4a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 807cf4e:	68fb      	ldr	r3, [r7, #12]
 807cf50:	220e      	movs	r2, #14
 807cf52:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807cf56:	68fb      	ldr	r3, [r7, #12]
 807cf58:	2200      	movs	r2, #0
 807cf5a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807cf5e:	68fb      	ldr	r3, [r7, #12]
 807cf60:	2200      	movs	r2, #0
 807cf62:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807cf66:	68fb      	ldr	r3, [r7, #12]
 807cf68:	2200      	movs	r2, #0
 807cf6a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807cf6e:	68fb      	ldr	r3, [r7, #12]
 807cf70:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cf74:	68fb      	ldr	r3, [r7, #12]
 807cf76:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807cf7a:	68fb      	ldr	r3, [r7, #12]
 807cf7c:	2200      	movs	r2, #0
 807cf7e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 807cf82:	e000      	b.n	807cf86 <DFU_ClearStatus+0x9e>
    return;
 807cf84:	bf00      	nop
  }
}
 807cf86:	3714      	adds	r7, #20
 807cf88:	46bd      	mov	sp, r7
 807cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807cf8e:	4770      	bx	lr

0807cf90 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 807cf90:	b580      	push	{r7, lr}
 807cf92:	b084      	sub	sp, #16
 807cf94:	af00      	add	r7, sp, #0
 807cf96:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cf98:	687b      	ldr	r3, [r7, #4]
 807cf9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cf9e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cfa0:	68fb      	ldr	r3, [r7, #12]
 807cfa2:	2b00      	cmp	r3, #0
 807cfa4:	d008      	beq.n	807cfb8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 807cfa6:	68fb      	ldr	r3, [r7, #12]
 807cfa8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 807cfac:	2201      	movs	r2, #1
 807cfae:	4619      	mov	r1, r3
 807cfb0:	6878      	ldr	r0, [r7, #4]
 807cfb2:	f001 f9ba 	bl	807e32a <USBD_CtlSendData>
 807cfb6:	e000      	b.n	807cfba <DFU_GetState+0x2a>
    return;
 807cfb8:	bf00      	nop
}
 807cfba:	3710      	adds	r7, #16
 807cfbc:	46bd      	mov	sp, r7
 807cfbe:	bd80      	pop	{r7, pc}

0807cfc0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 807cfc0:	b480      	push	{r7}
 807cfc2:	b085      	sub	sp, #20
 807cfc4:	af00      	add	r7, sp, #0
 807cfc6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cfc8:	687b      	ldr	r3, [r7, #4]
 807cfca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cfce:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cfd0:	68fb      	ldr	r3, [r7, #12]
 807cfd2:	2b00      	cmp	r3, #0
 807cfd4:	d03f      	beq.n	807d056 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807cfd6:	68fb      	ldr	r3, [r7, #12]
 807cfd8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cfdc:	2b02      	cmp	r3, #2
 807cfde:	d013      	beq.n	807d008 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807cfe0:	68fb      	ldr	r3, [r7, #12]
 807cfe2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807cfe6:	2b03      	cmp	r3, #3
 807cfe8:	d00e      	beq.n	807d008 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807cfea:	68fb      	ldr	r3, [r7, #12]
 807cfec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807cff0:	2b05      	cmp	r3, #5
 807cff2:	d009      	beq.n	807d008 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807cff4:	68fb      	ldr	r3, [r7, #12]
 807cff6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807cffa:	2b06      	cmp	r3, #6
 807cffc:	d004      	beq.n	807d008 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807cffe:	68fb      	ldr	r3, [r7, #12]
 807d000:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807d004:	2b09      	cmp	r3, #9
 807d006:	d127      	bne.n	807d058 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807d008:	68fb      	ldr	r3, [r7, #12]
 807d00a:	2202      	movs	r2, #2
 807d00c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 807d010:	68fb      	ldr	r3, [r7, #12]
 807d012:	2200      	movs	r2, #0
 807d014:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807d018:	68fb      	ldr	r3, [r7, #12]
 807d01a:	2200      	movs	r2, #0
 807d01c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807d020:	68fb      	ldr	r3, [r7, #12]
 807d022:	2200      	movs	r2, #0
 807d024:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807d028:	68fb      	ldr	r3, [r7, #12]
 807d02a:	2200      	movs	r2, #0
 807d02c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d030:	68fb      	ldr	r3, [r7, #12]
 807d032:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807d036:	68fb      	ldr	r3, [r7, #12]
 807d038:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807d03c:	68fb      	ldr	r3, [r7, #12]
 807d03e:	2200      	movs	r2, #0
 807d040:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 807d044:	68fb      	ldr	r3, [r7, #12]
 807d046:	2200      	movs	r2, #0
 807d048:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 807d04c:	68fb      	ldr	r3, [r7, #12]
 807d04e:	2200      	movs	r2, #0
 807d050:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 807d054:	e000      	b.n	807d058 <DFU_Abort+0x98>
    return;
 807d056:	bf00      	nop
  }
}
 807d058:	3714      	adds	r7, #20
 807d05a:	46bd      	mov	sp, r7
 807d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d060:	4770      	bx	lr
	...

0807d064 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 807d064:	b580      	push	{r7, lr}
 807d066:	b084      	sub	sp, #16
 807d068:	af00      	add	r7, sp, #0
 807d06a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807d06c:	687b      	ldr	r3, [r7, #4]
 807d06e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807d072:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807d074:	68fb      	ldr	r3, [r7, #12]
 807d076:	2b00      	cmp	r3, #0
 807d078:	d03b      	beq.n	807d0f2 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 807d07a:	68fb      	ldr	r3, [r7, #12]
 807d07c:	2200      	movs	r2, #0
 807d07e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 807d082:	4b1e      	ldr	r3, [pc, #120]	; (807d0fc <DFU_Leave+0x98>)
 807d084:	7d1b      	ldrb	r3, [r3, #20]
 807d086:	f003 0304 	and.w	r3, r3, #4
 807d08a:	2b00      	cmp	r3, #0
 807d08c:	d016      	beq.n	807d0bc <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 807d08e:	68fb      	ldr	r3, [r7, #12]
 807d090:	2206      	movs	r2, #6
 807d092:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807d096:	68fb      	ldr	r3, [r7, #12]
 807d098:	2200      	movs	r2, #0
 807d09a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807d09e:	68fb      	ldr	r3, [r7, #12]
 807d0a0:	2200      	movs	r2, #0
 807d0a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807d0a6:	68fb      	ldr	r3, [r7, #12]
 807d0a8:	2200      	movs	r2, #0
 807d0aa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d0ae:	68fb      	ldr	r3, [r7, #12]
 807d0b0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807d0b4:	68fb      	ldr	r3, [r7, #12]
 807d0b6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 807d0ba:	e01b      	b.n	807d0f4 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 807d0bc:	68fb      	ldr	r3, [r7, #12]
 807d0be:	2208      	movs	r2, #8
 807d0c0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807d0c4:	68fb      	ldr	r3, [r7, #12]
 807d0c6:	2200      	movs	r2, #0
 807d0c8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807d0cc:	68fb      	ldr	r3, [r7, #12]
 807d0ce:	2200      	movs	r2, #0
 807d0d0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807d0d4:	68fb      	ldr	r3, [r7, #12]
 807d0d6:	2200      	movs	r2, #0
 807d0d8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d0dc:	68fb      	ldr	r3, [r7, #12]
 807d0de:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807d0e2:	68fb      	ldr	r3, [r7, #12]
 807d0e4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 807d0e8:	6878      	ldr	r0, [r7, #4]
 807d0ea:	f000 f86c 	bl	807d1c6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 807d0ee:	f7ff f9b3 	bl	807c458 <__NVIC_SystemReset>
    return;
 807d0f2:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 807d0f4:	3710      	adds	r7, #16
 807d0f6:	46bd      	mov	sp, r7
 807d0f8:	bd80      	pop	{r7, pc}
 807d0fa:	bf00      	nop
 807d0fc:	20000048 	.word	0x20000048

0807d100 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 807d100:	b580      	push	{r7, lr}
 807d102:	b086      	sub	sp, #24
 807d104:	af00      	add	r7, sp, #0
 807d106:	60f8      	str	r0, [r7, #12]
 807d108:	60b9      	str	r1, [r7, #8]
 807d10a:	4613      	mov	r3, r2
 807d10c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 807d10e:	68fb      	ldr	r3, [r7, #12]
 807d110:	2b00      	cmp	r3, #0
 807d112:	d101      	bne.n	807d118 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 807d114:	2303      	movs	r3, #3
 807d116:	e01f      	b.n	807d158 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 807d118:	68fb      	ldr	r3, [r7, #12]
 807d11a:	2200      	movs	r2, #0
 807d11c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 807d120:	68fb      	ldr	r3, [r7, #12]
 807d122:	2200      	movs	r2, #0
 807d124:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 807d128:	68fb      	ldr	r3, [r7, #12]
 807d12a:	2200      	movs	r2, #0
 807d12c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 807d130:	68bb      	ldr	r3, [r7, #8]
 807d132:	2b00      	cmp	r3, #0
 807d134:	d003      	beq.n	807d13e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 807d136:	68fb      	ldr	r3, [r7, #12]
 807d138:	68ba      	ldr	r2, [r7, #8]
 807d13a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d13e:	68fb      	ldr	r3, [r7, #12]
 807d140:	2201      	movs	r2, #1
 807d142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 807d146:	68fb      	ldr	r3, [r7, #12]
 807d148:	79fa      	ldrb	r2, [r7, #7]
 807d14a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 807d14c:	68f8      	ldr	r0, [r7, #12]
 807d14e:	f001 fd29 	bl	807eba4 <USBD_LL_Init>
 807d152:	4603      	mov	r3, r0
 807d154:	75fb      	strb	r3, [r7, #23]

  return ret;
 807d156:	7dfb      	ldrb	r3, [r7, #23]
}
 807d158:	4618      	mov	r0, r3
 807d15a:	3718      	adds	r7, #24
 807d15c:	46bd      	mov	sp, r7
 807d15e:	bd80      	pop	{r7, pc}

0807d160 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 807d160:	b580      	push	{r7, lr}
 807d162:	b084      	sub	sp, #16
 807d164:	af00      	add	r7, sp, #0
 807d166:	6078      	str	r0, [r7, #4]
 807d168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 807d16a:	2300      	movs	r3, #0
 807d16c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 807d16e:	683b      	ldr	r3, [r7, #0]
 807d170:	2b00      	cmp	r3, #0
 807d172:	d101      	bne.n	807d178 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 807d174:	2303      	movs	r3, #3
 807d176:	e016      	b.n	807d1a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 807d178:	687b      	ldr	r3, [r7, #4]
 807d17a:	683a      	ldr	r2, [r7, #0]
 807d17c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 807d180:	687b      	ldr	r3, [r7, #4]
 807d182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807d188:	2b00      	cmp	r3, #0
 807d18a:	d00b      	beq.n	807d1a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 807d18c:	687b      	ldr	r3, [r7, #4]
 807d18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807d194:	f107 020e 	add.w	r2, r7, #14
 807d198:	4610      	mov	r0, r2
 807d19a:	4798      	blx	r3
 807d19c:	4602      	mov	r2, r0
 807d19e:	687b      	ldr	r3, [r7, #4]
 807d1a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 807d1a4:	2300      	movs	r3, #0
}
 807d1a6:	4618      	mov	r0, r3
 807d1a8:	3710      	adds	r7, #16
 807d1aa:	46bd      	mov	sp, r7
 807d1ac:	bd80      	pop	{r7, pc}

0807d1ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 807d1ae:	b580      	push	{r7, lr}
 807d1b0:	b082      	sub	sp, #8
 807d1b2:	af00      	add	r7, sp, #0
 807d1b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 807d1b6:	6878      	ldr	r0, [r7, #4]
 807d1b8:	f001 fd40 	bl	807ec3c <USBD_LL_Start>
 807d1bc:	4603      	mov	r3, r0
}
 807d1be:	4618      	mov	r0, r3
 807d1c0:	3708      	adds	r7, #8
 807d1c2:	46bd      	mov	sp, r7
 807d1c4:	bd80      	pop	{r7, pc}

0807d1c6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 807d1c6:	b580      	push	{r7, lr}
 807d1c8:	b082      	sub	sp, #8
 807d1ca:	af00      	add	r7, sp, #0
 807d1cc:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 807d1ce:	6878      	ldr	r0, [r7, #4]
 807d1d0:	f001 fd4f 	bl	807ec72 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 807d1d4:	687b      	ldr	r3, [r7, #4]
 807d1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d1da:	2b00      	cmp	r3, #0
 807d1dc:	d009      	beq.n	807d1f2 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d1de:	687b      	ldr	r3, [r7, #4]
 807d1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d1e4:	685b      	ldr	r3, [r3, #4]
 807d1e6:	687a      	ldr	r2, [r7, #4]
 807d1e8:	6852      	ldr	r2, [r2, #4]
 807d1ea:	b2d2      	uxtb	r2, r2
 807d1ec:	4611      	mov	r1, r2
 807d1ee:	6878      	ldr	r0, [r7, #4]
 807d1f0:	4798      	blx	r3
  }

  return USBD_OK;
 807d1f2:	2300      	movs	r3, #0
}
 807d1f4:	4618      	mov	r0, r3
 807d1f6:	3708      	adds	r7, #8
 807d1f8:	46bd      	mov	sp, r7
 807d1fa:	bd80      	pop	{r7, pc}

0807d1fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 807d1fc:	b480      	push	{r7}
 807d1fe:	b083      	sub	sp, #12
 807d200:	af00      	add	r7, sp, #0
 807d202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 807d204:	2300      	movs	r3, #0
}
 807d206:	4618      	mov	r0, r3
 807d208:	370c      	adds	r7, #12
 807d20a:	46bd      	mov	sp, r7
 807d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d210:	4770      	bx	lr

0807d212 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807d212:	b580      	push	{r7, lr}
 807d214:	b084      	sub	sp, #16
 807d216:	af00      	add	r7, sp, #0
 807d218:	6078      	str	r0, [r7, #4]
 807d21a:	460b      	mov	r3, r1
 807d21c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 807d21e:	2303      	movs	r3, #3
 807d220:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 807d222:	687b      	ldr	r3, [r7, #4]
 807d224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d228:	2b00      	cmp	r3, #0
 807d22a:	d009      	beq.n	807d240 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 807d22c:	687b      	ldr	r3, [r7, #4]
 807d22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d232:	681b      	ldr	r3, [r3, #0]
 807d234:	78fa      	ldrb	r2, [r7, #3]
 807d236:	4611      	mov	r1, r2
 807d238:	6878      	ldr	r0, [r7, #4]
 807d23a:	4798      	blx	r3
 807d23c:	4603      	mov	r3, r0
 807d23e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 807d240:	7bfb      	ldrb	r3, [r7, #15]
}
 807d242:	4618      	mov	r0, r3
 807d244:	3710      	adds	r7, #16
 807d246:	46bd      	mov	sp, r7
 807d248:	bd80      	pop	{r7, pc}

0807d24a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807d24a:	b580      	push	{r7, lr}
 807d24c:	b082      	sub	sp, #8
 807d24e:	af00      	add	r7, sp, #0
 807d250:	6078      	str	r0, [r7, #4]
 807d252:	460b      	mov	r3, r1
 807d254:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 807d256:	687b      	ldr	r3, [r7, #4]
 807d258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d25c:	2b00      	cmp	r3, #0
 807d25e:	d007      	beq.n	807d270 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 807d260:	687b      	ldr	r3, [r7, #4]
 807d262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d266:	685b      	ldr	r3, [r3, #4]
 807d268:	78fa      	ldrb	r2, [r7, #3]
 807d26a:	4611      	mov	r1, r2
 807d26c:	6878      	ldr	r0, [r7, #4]
 807d26e:	4798      	blx	r3
  }

  return USBD_OK;
 807d270:	2300      	movs	r3, #0
}
 807d272:	4618      	mov	r0, r3
 807d274:	3708      	adds	r7, #8
 807d276:	46bd      	mov	sp, r7
 807d278:	bd80      	pop	{r7, pc}

0807d27a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 807d27a:	b580      	push	{r7, lr}
 807d27c:	b084      	sub	sp, #16
 807d27e:	af00      	add	r7, sp, #0
 807d280:	6078      	str	r0, [r7, #4]
 807d282:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 807d284:	687b      	ldr	r3, [r7, #4]
 807d286:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d28a:	6839      	ldr	r1, [r7, #0]
 807d28c:	4618      	mov	r0, r3
 807d28e:	f000 ffa1 	bl	807e1d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 807d292:	687b      	ldr	r3, [r7, #4]
 807d294:	2201      	movs	r2, #1
 807d296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 807d29a:	687b      	ldr	r3, [r7, #4]
 807d29c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 807d2a0:	461a      	mov	r2, r3
 807d2a2:	687b      	ldr	r3, [r7, #4]
 807d2a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 807d2a8:	687b      	ldr	r3, [r7, #4]
 807d2aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 807d2ae:	f003 031f 	and.w	r3, r3, #31
 807d2b2:	2b02      	cmp	r3, #2
 807d2b4:	d01a      	beq.n	807d2ec <USBD_LL_SetupStage+0x72>
 807d2b6:	2b02      	cmp	r3, #2
 807d2b8:	d822      	bhi.n	807d300 <USBD_LL_SetupStage+0x86>
 807d2ba:	2b00      	cmp	r3, #0
 807d2bc:	d002      	beq.n	807d2c4 <USBD_LL_SetupStage+0x4a>
 807d2be:	2b01      	cmp	r3, #1
 807d2c0:	d00a      	beq.n	807d2d8 <USBD_LL_SetupStage+0x5e>
 807d2c2:	e01d      	b.n	807d300 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 807d2c4:	687b      	ldr	r3, [r7, #4]
 807d2c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d2ca:	4619      	mov	r1, r3
 807d2cc:	6878      	ldr	r0, [r7, #4]
 807d2ce:	f000 fa61 	bl	807d794 <USBD_StdDevReq>
 807d2d2:	4603      	mov	r3, r0
 807d2d4:	73fb      	strb	r3, [r7, #15]
      break;
 807d2d6:	e020      	b.n	807d31a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 807d2d8:	687b      	ldr	r3, [r7, #4]
 807d2da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d2de:	4619      	mov	r1, r3
 807d2e0:	6878      	ldr	r0, [r7, #4]
 807d2e2:	f000 fac5 	bl	807d870 <USBD_StdItfReq>
 807d2e6:	4603      	mov	r3, r0
 807d2e8:	73fb      	strb	r3, [r7, #15]
      break;
 807d2ea:	e016      	b.n	807d31a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 807d2ec:	687b      	ldr	r3, [r7, #4]
 807d2ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d2f2:	4619      	mov	r1, r3
 807d2f4:	6878      	ldr	r0, [r7, #4]
 807d2f6:	f000 fb04 	bl	807d902 <USBD_StdEPReq>
 807d2fa:	4603      	mov	r3, r0
 807d2fc:	73fb      	strb	r3, [r7, #15]
      break;
 807d2fe:	e00c      	b.n	807d31a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 807d300:	687b      	ldr	r3, [r7, #4]
 807d302:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 807d306:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 807d30a:	b2db      	uxtb	r3, r3
 807d30c:	4619      	mov	r1, r3
 807d30e:	6878      	ldr	r0, [r7, #4]
 807d310:	f001 fcf0 	bl	807ecf4 <USBD_LL_StallEP>
 807d314:	4603      	mov	r3, r0
 807d316:	73fb      	strb	r3, [r7, #15]
      break;
 807d318:	bf00      	nop
  }

  return ret;
 807d31a:	7bfb      	ldrb	r3, [r7, #15]
}
 807d31c:	4618      	mov	r0, r3
 807d31e:	3710      	adds	r7, #16
 807d320:	46bd      	mov	sp, r7
 807d322:	bd80      	pop	{r7, pc}

0807d324 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 807d324:	b580      	push	{r7, lr}
 807d326:	b086      	sub	sp, #24
 807d328:	af00      	add	r7, sp, #0
 807d32a:	60f8      	str	r0, [r7, #12]
 807d32c:	460b      	mov	r3, r1
 807d32e:	607a      	str	r2, [r7, #4]
 807d330:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 807d332:	7afb      	ldrb	r3, [r7, #11]
 807d334:	2b00      	cmp	r3, #0
 807d336:	d138      	bne.n	807d3aa <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 807d338:	68fb      	ldr	r3, [r7, #12]
 807d33a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 807d33e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 807d340:	68fb      	ldr	r3, [r7, #12]
 807d342:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 807d346:	2b03      	cmp	r3, #3
 807d348:	d14a      	bne.n	807d3e0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 807d34a:	693b      	ldr	r3, [r7, #16]
 807d34c:	689a      	ldr	r2, [r3, #8]
 807d34e:	693b      	ldr	r3, [r7, #16]
 807d350:	68db      	ldr	r3, [r3, #12]
 807d352:	429a      	cmp	r2, r3
 807d354:	d913      	bls.n	807d37e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 807d356:	693b      	ldr	r3, [r7, #16]
 807d358:	689a      	ldr	r2, [r3, #8]
 807d35a:	693b      	ldr	r3, [r7, #16]
 807d35c:	68db      	ldr	r3, [r3, #12]
 807d35e:	1ad2      	subs	r2, r2, r3
 807d360:	693b      	ldr	r3, [r7, #16]
 807d362:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 807d364:	693b      	ldr	r3, [r7, #16]
 807d366:	68da      	ldr	r2, [r3, #12]
 807d368:	693b      	ldr	r3, [r7, #16]
 807d36a:	689b      	ldr	r3, [r3, #8]
 807d36c:	4293      	cmp	r3, r2
 807d36e:	bf28      	it	cs
 807d370:	4613      	movcs	r3, r2
 807d372:	461a      	mov	r2, r3
 807d374:	6879      	ldr	r1, [r7, #4]
 807d376:	68f8      	ldr	r0, [r7, #12]
 807d378:	f001 f820 	bl	807e3bc <USBD_CtlContinueRx>
 807d37c:	e030      	b.n	807d3e0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d37e:	68fb      	ldr	r3, [r7, #12]
 807d380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d384:	b2db      	uxtb	r3, r3
 807d386:	2b03      	cmp	r3, #3
 807d388:	d10b      	bne.n	807d3a2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 807d38a:	68fb      	ldr	r3, [r7, #12]
 807d38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d390:	691b      	ldr	r3, [r3, #16]
 807d392:	2b00      	cmp	r3, #0
 807d394:	d005      	beq.n	807d3a2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 807d396:	68fb      	ldr	r3, [r7, #12]
 807d398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d39c:	691b      	ldr	r3, [r3, #16]
 807d39e:	68f8      	ldr	r0, [r7, #12]
 807d3a0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 807d3a2:	68f8      	ldr	r0, [r7, #12]
 807d3a4:	f001 f81b 	bl	807e3de <USBD_CtlSendStatus>
 807d3a8:	e01a      	b.n	807d3e0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d3aa:	68fb      	ldr	r3, [r7, #12]
 807d3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d3b0:	b2db      	uxtb	r3, r3
 807d3b2:	2b03      	cmp	r3, #3
 807d3b4:	d114      	bne.n	807d3e0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 807d3b6:	68fb      	ldr	r3, [r7, #12]
 807d3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d3bc:	699b      	ldr	r3, [r3, #24]
 807d3be:	2b00      	cmp	r3, #0
 807d3c0:	d00e      	beq.n	807d3e0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 807d3c2:	68fb      	ldr	r3, [r7, #12]
 807d3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d3c8:	699b      	ldr	r3, [r3, #24]
 807d3ca:	7afa      	ldrb	r2, [r7, #11]
 807d3cc:	4611      	mov	r1, r2
 807d3ce:	68f8      	ldr	r0, [r7, #12]
 807d3d0:	4798      	blx	r3
 807d3d2:	4603      	mov	r3, r0
 807d3d4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 807d3d6:	7dfb      	ldrb	r3, [r7, #23]
 807d3d8:	2b00      	cmp	r3, #0
 807d3da:	d001      	beq.n	807d3e0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 807d3dc:	7dfb      	ldrb	r3, [r7, #23]
 807d3de:	e000      	b.n	807d3e2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 807d3e0:	2300      	movs	r3, #0
}
 807d3e2:	4618      	mov	r0, r3
 807d3e4:	3718      	adds	r7, #24
 807d3e6:	46bd      	mov	sp, r7
 807d3e8:	bd80      	pop	{r7, pc}

0807d3ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 807d3ea:	b580      	push	{r7, lr}
 807d3ec:	b086      	sub	sp, #24
 807d3ee:	af00      	add	r7, sp, #0
 807d3f0:	60f8      	str	r0, [r7, #12]
 807d3f2:	460b      	mov	r3, r1
 807d3f4:	607a      	str	r2, [r7, #4]
 807d3f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 807d3f8:	7afb      	ldrb	r3, [r7, #11]
 807d3fa:	2b00      	cmp	r3, #0
 807d3fc:	d16b      	bne.n	807d4d6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 807d3fe:	68fb      	ldr	r3, [r7, #12]
 807d400:	3314      	adds	r3, #20
 807d402:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 807d404:	68fb      	ldr	r3, [r7, #12]
 807d406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 807d40a:	2b02      	cmp	r3, #2
 807d40c:	d156      	bne.n	807d4bc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 807d40e:	693b      	ldr	r3, [r7, #16]
 807d410:	689a      	ldr	r2, [r3, #8]
 807d412:	693b      	ldr	r3, [r7, #16]
 807d414:	68db      	ldr	r3, [r3, #12]
 807d416:	429a      	cmp	r2, r3
 807d418:	d914      	bls.n	807d444 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 807d41a:	693b      	ldr	r3, [r7, #16]
 807d41c:	689a      	ldr	r2, [r3, #8]
 807d41e:	693b      	ldr	r3, [r7, #16]
 807d420:	68db      	ldr	r3, [r3, #12]
 807d422:	1ad2      	subs	r2, r2, r3
 807d424:	693b      	ldr	r3, [r7, #16]
 807d426:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 807d428:	693b      	ldr	r3, [r7, #16]
 807d42a:	689b      	ldr	r3, [r3, #8]
 807d42c:	461a      	mov	r2, r3
 807d42e:	6879      	ldr	r1, [r7, #4]
 807d430:	68f8      	ldr	r0, [r7, #12]
 807d432:	f000 ff95 	bl	807e360 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807d436:	2300      	movs	r3, #0
 807d438:	2200      	movs	r2, #0
 807d43a:	2100      	movs	r1, #0
 807d43c:	68f8      	ldr	r0, [r7, #12]
 807d43e:	f001 fd03 	bl	807ee48 <USBD_LL_PrepareReceive>
 807d442:	e03b      	b.n	807d4bc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 807d444:	693b      	ldr	r3, [r7, #16]
 807d446:	68da      	ldr	r2, [r3, #12]
 807d448:	693b      	ldr	r3, [r7, #16]
 807d44a:	689b      	ldr	r3, [r3, #8]
 807d44c:	429a      	cmp	r2, r3
 807d44e:	d11c      	bne.n	807d48a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 807d450:	693b      	ldr	r3, [r7, #16]
 807d452:	685a      	ldr	r2, [r3, #4]
 807d454:	693b      	ldr	r3, [r7, #16]
 807d456:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 807d458:	429a      	cmp	r2, r3
 807d45a:	d316      	bcc.n	807d48a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 807d45c:	693b      	ldr	r3, [r7, #16]
 807d45e:	685a      	ldr	r2, [r3, #4]
 807d460:	68fb      	ldr	r3, [r7, #12]
 807d462:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 807d466:	429a      	cmp	r2, r3
 807d468:	d20f      	bcs.n	807d48a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 807d46a:	2200      	movs	r2, #0
 807d46c:	2100      	movs	r1, #0
 807d46e:	68f8      	ldr	r0, [r7, #12]
 807d470:	f000 ff76 	bl	807e360 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 807d474:	68fb      	ldr	r3, [r7, #12]
 807d476:	2200      	movs	r2, #0
 807d478:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807d47c:	2300      	movs	r3, #0
 807d47e:	2200      	movs	r2, #0
 807d480:	2100      	movs	r1, #0
 807d482:	68f8      	ldr	r0, [r7, #12]
 807d484:	f001 fce0 	bl	807ee48 <USBD_LL_PrepareReceive>
 807d488:	e018      	b.n	807d4bc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d48a:	68fb      	ldr	r3, [r7, #12]
 807d48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d490:	b2db      	uxtb	r3, r3
 807d492:	2b03      	cmp	r3, #3
 807d494:	d10b      	bne.n	807d4ae <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 807d496:	68fb      	ldr	r3, [r7, #12]
 807d498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d49c:	68db      	ldr	r3, [r3, #12]
 807d49e:	2b00      	cmp	r3, #0
 807d4a0:	d005      	beq.n	807d4ae <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 807d4a2:	68fb      	ldr	r3, [r7, #12]
 807d4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d4a8:	68db      	ldr	r3, [r3, #12]
 807d4aa:	68f8      	ldr	r0, [r7, #12]
 807d4ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 807d4ae:	2180      	movs	r1, #128	; 0x80
 807d4b0:	68f8      	ldr	r0, [r7, #12]
 807d4b2:	f001 fc1f 	bl	807ecf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 807d4b6:	68f8      	ldr	r0, [r7, #12]
 807d4b8:	f000 ffa4 	bl	807e404 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 807d4bc:	68fb      	ldr	r3, [r7, #12]
 807d4be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 807d4c2:	2b01      	cmp	r3, #1
 807d4c4:	d122      	bne.n	807d50c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 807d4c6:	68f8      	ldr	r0, [r7, #12]
 807d4c8:	f7ff fe98 	bl	807d1fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 807d4cc:	68fb      	ldr	r3, [r7, #12]
 807d4ce:	2200      	movs	r2, #0
 807d4d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 807d4d4:	e01a      	b.n	807d50c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d4d6:	68fb      	ldr	r3, [r7, #12]
 807d4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d4dc:	b2db      	uxtb	r3, r3
 807d4de:	2b03      	cmp	r3, #3
 807d4e0:	d114      	bne.n	807d50c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 807d4e2:	68fb      	ldr	r3, [r7, #12]
 807d4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d4e8:	695b      	ldr	r3, [r3, #20]
 807d4ea:	2b00      	cmp	r3, #0
 807d4ec:	d00e      	beq.n	807d50c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 807d4ee:	68fb      	ldr	r3, [r7, #12]
 807d4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d4f4:	695b      	ldr	r3, [r3, #20]
 807d4f6:	7afa      	ldrb	r2, [r7, #11]
 807d4f8:	4611      	mov	r1, r2
 807d4fa:	68f8      	ldr	r0, [r7, #12]
 807d4fc:	4798      	blx	r3
 807d4fe:	4603      	mov	r3, r0
 807d500:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 807d502:	7dfb      	ldrb	r3, [r7, #23]
 807d504:	2b00      	cmp	r3, #0
 807d506:	d001      	beq.n	807d50c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 807d508:	7dfb      	ldrb	r3, [r7, #23]
 807d50a:	e000      	b.n	807d50e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 807d50c:	2300      	movs	r3, #0
}
 807d50e:	4618      	mov	r0, r3
 807d510:	3718      	adds	r7, #24
 807d512:	46bd      	mov	sp, r7
 807d514:	bd80      	pop	{r7, pc}

0807d516 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 807d516:	b580      	push	{r7, lr}
 807d518:	b082      	sub	sp, #8
 807d51a:	af00      	add	r7, sp, #0
 807d51c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d51e:	687b      	ldr	r3, [r7, #4]
 807d520:	2201      	movs	r2, #1
 807d522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 807d526:	687b      	ldr	r3, [r7, #4]
 807d528:	2200      	movs	r2, #0
 807d52a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 807d52e:	687b      	ldr	r3, [r7, #4]
 807d530:	2200      	movs	r2, #0
 807d532:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 807d534:	687b      	ldr	r3, [r7, #4]
 807d536:	2200      	movs	r2, #0
 807d538:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 807d53c:	687b      	ldr	r3, [r7, #4]
 807d53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d542:	2b00      	cmp	r3, #0
 807d544:	d101      	bne.n	807d54a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 807d546:	2303      	movs	r3, #3
 807d548:	e02f      	b.n	807d5aa <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 807d54a:	687b      	ldr	r3, [r7, #4]
 807d54c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807d550:	2b00      	cmp	r3, #0
 807d552:	d00f      	beq.n	807d574 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 807d554:	687b      	ldr	r3, [r7, #4]
 807d556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d55a:	685b      	ldr	r3, [r3, #4]
 807d55c:	2b00      	cmp	r3, #0
 807d55e:	d009      	beq.n	807d574 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d560:	687b      	ldr	r3, [r7, #4]
 807d562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d566:	685b      	ldr	r3, [r3, #4]
 807d568:	687a      	ldr	r2, [r7, #4]
 807d56a:	6852      	ldr	r2, [r2, #4]
 807d56c:	b2d2      	uxtb	r2, r2
 807d56e:	4611      	mov	r1, r2
 807d570:	6878      	ldr	r0, [r7, #4]
 807d572:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 807d574:	2340      	movs	r3, #64	; 0x40
 807d576:	2200      	movs	r2, #0
 807d578:	2100      	movs	r1, #0
 807d57a:	6878      	ldr	r0, [r7, #4]
 807d57c:	f001 fb94 	bl	807eca8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 807d580:	687b      	ldr	r3, [r7, #4]
 807d582:	2201      	movs	r2, #1
 807d584:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 807d588:	687b      	ldr	r3, [r7, #4]
 807d58a:	2240      	movs	r2, #64	; 0x40
 807d58c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 807d590:	2340      	movs	r3, #64	; 0x40
 807d592:	2200      	movs	r2, #0
 807d594:	2180      	movs	r1, #128	; 0x80
 807d596:	6878      	ldr	r0, [r7, #4]
 807d598:	f001 fb86 	bl	807eca8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 807d59c:	687b      	ldr	r3, [r7, #4]
 807d59e:	2201      	movs	r2, #1
 807d5a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 807d5a2:	687b      	ldr	r3, [r7, #4]
 807d5a4:	2240      	movs	r2, #64	; 0x40
 807d5a6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 807d5a8:	2300      	movs	r3, #0
}
 807d5aa:	4618      	mov	r0, r3
 807d5ac:	3708      	adds	r7, #8
 807d5ae:	46bd      	mov	sp, r7
 807d5b0:	bd80      	pop	{r7, pc}

0807d5b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 807d5b2:	b480      	push	{r7}
 807d5b4:	b083      	sub	sp, #12
 807d5b6:	af00      	add	r7, sp, #0
 807d5b8:	6078      	str	r0, [r7, #4]
 807d5ba:	460b      	mov	r3, r1
 807d5bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 807d5be:	687b      	ldr	r3, [r7, #4]
 807d5c0:	78fa      	ldrb	r2, [r7, #3]
 807d5c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 807d5c4:	2300      	movs	r3, #0
}
 807d5c6:	4618      	mov	r0, r3
 807d5c8:	370c      	adds	r7, #12
 807d5ca:	46bd      	mov	sp, r7
 807d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d5d0:	4770      	bx	lr

0807d5d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 807d5d2:	b480      	push	{r7}
 807d5d4:	b083      	sub	sp, #12
 807d5d6:	af00      	add	r7, sp, #0
 807d5d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 807d5da:	687b      	ldr	r3, [r7, #4]
 807d5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d5e0:	b2da      	uxtb	r2, r3
 807d5e2:	687b      	ldr	r3, [r7, #4]
 807d5e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 807d5e8:	687b      	ldr	r3, [r7, #4]
 807d5ea:	2204      	movs	r2, #4
 807d5ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 807d5f0:	2300      	movs	r3, #0
}
 807d5f2:	4618      	mov	r0, r3
 807d5f4:	370c      	adds	r7, #12
 807d5f6:	46bd      	mov	sp, r7
 807d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d5fc:	4770      	bx	lr

0807d5fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 807d5fe:	b480      	push	{r7}
 807d600:	b083      	sub	sp, #12
 807d602:	af00      	add	r7, sp, #0
 807d604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 807d606:	687b      	ldr	r3, [r7, #4]
 807d608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d60c:	b2db      	uxtb	r3, r3
 807d60e:	2b04      	cmp	r3, #4
 807d610:	d106      	bne.n	807d620 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 807d612:	687b      	ldr	r3, [r7, #4]
 807d614:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 807d618:	b2da      	uxtb	r2, r3
 807d61a:	687b      	ldr	r3, [r7, #4]
 807d61c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 807d620:	2300      	movs	r3, #0
}
 807d622:	4618      	mov	r0, r3
 807d624:	370c      	adds	r7, #12
 807d626:	46bd      	mov	sp, r7
 807d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d62c:	4770      	bx	lr

0807d62e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 807d62e:	b580      	push	{r7, lr}
 807d630:	b082      	sub	sp, #8
 807d632:	af00      	add	r7, sp, #0
 807d634:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 807d636:	687b      	ldr	r3, [r7, #4]
 807d638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d63c:	2b00      	cmp	r3, #0
 807d63e:	d101      	bne.n	807d644 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 807d640:	2303      	movs	r3, #3
 807d642:	e012      	b.n	807d66a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d644:	687b      	ldr	r3, [r7, #4]
 807d646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d64a:	b2db      	uxtb	r3, r3
 807d64c:	2b03      	cmp	r3, #3
 807d64e:	d10b      	bne.n	807d668 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 807d650:	687b      	ldr	r3, [r7, #4]
 807d652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d656:	69db      	ldr	r3, [r3, #28]
 807d658:	2b00      	cmp	r3, #0
 807d65a:	d005      	beq.n	807d668 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 807d65c:	687b      	ldr	r3, [r7, #4]
 807d65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d662:	69db      	ldr	r3, [r3, #28]
 807d664:	6878      	ldr	r0, [r7, #4]
 807d666:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d668:	2300      	movs	r3, #0
}
 807d66a:	4618      	mov	r0, r3
 807d66c:	3708      	adds	r7, #8
 807d66e:	46bd      	mov	sp, r7
 807d670:	bd80      	pop	{r7, pc}

0807d672 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 807d672:	b580      	push	{r7, lr}
 807d674:	b082      	sub	sp, #8
 807d676:	af00      	add	r7, sp, #0
 807d678:	6078      	str	r0, [r7, #4]
 807d67a:	460b      	mov	r3, r1
 807d67c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 807d67e:	687b      	ldr	r3, [r7, #4]
 807d680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d684:	2b00      	cmp	r3, #0
 807d686:	d101      	bne.n	807d68c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 807d688:	2303      	movs	r3, #3
 807d68a:	e014      	b.n	807d6b6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d68c:	687b      	ldr	r3, [r7, #4]
 807d68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d692:	b2db      	uxtb	r3, r3
 807d694:	2b03      	cmp	r3, #3
 807d696:	d10d      	bne.n	807d6b4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 807d698:	687b      	ldr	r3, [r7, #4]
 807d69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d69e:	6a1b      	ldr	r3, [r3, #32]
 807d6a0:	2b00      	cmp	r3, #0
 807d6a2:	d007      	beq.n	807d6b4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 807d6a4:	687b      	ldr	r3, [r7, #4]
 807d6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6aa:	6a1b      	ldr	r3, [r3, #32]
 807d6ac:	78fa      	ldrb	r2, [r7, #3]
 807d6ae:	4611      	mov	r1, r2
 807d6b0:	6878      	ldr	r0, [r7, #4]
 807d6b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d6b4:	2300      	movs	r3, #0
}
 807d6b6:	4618      	mov	r0, r3
 807d6b8:	3708      	adds	r7, #8
 807d6ba:	46bd      	mov	sp, r7
 807d6bc:	bd80      	pop	{r7, pc}

0807d6be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 807d6be:	b580      	push	{r7, lr}
 807d6c0:	b082      	sub	sp, #8
 807d6c2:	af00      	add	r7, sp, #0
 807d6c4:	6078      	str	r0, [r7, #4]
 807d6c6:	460b      	mov	r3, r1
 807d6c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 807d6ca:	687b      	ldr	r3, [r7, #4]
 807d6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6d0:	2b00      	cmp	r3, #0
 807d6d2:	d101      	bne.n	807d6d8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 807d6d4:	2303      	movs	r3, #3
 807d6d6:	e014      	b.n	807d702 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d6d8:	687b      	ldr	r3, [r7, #4]
 807d6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d6de:	b2db      	uxtb	r3, r3
 807d6e0:	2b03      	cmp	r3, #3
 807d6e2:	d10d      	bne.n	807d700 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 807d6e4:	687b      	ldr	r3, [r7, #4]
 807d6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807d6ec:	2b00      	cmp	r3, #0
 807d6ee:	d007      	beq.n	807d700 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 807d6f0:	687b      	ldr	r3, [r7, #4]
 807d6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807d6f8:	78fa      	ldrb	r2, [r7, #3]
 807d6fa:	4611      	mov	r1, r2
 807d6fc:	6878      	ldr	r0, [r7, #4]
 807d6fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d700:	2300      	movs	r3, #0
}
 807d702:	4618      	mov	r0, r3
 807d704:	3708      	adds	r7, #8
 807d706:	46bd      	mov	sp, r7
 807d708:	bd80      	pop	{r7, pc}

0807d70a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 807d70a:	b480      	push	{r7}
 807d70c:	b083      	sub	sp, #12
 807d70e:	af00      	add	r7, sp, #0
 807d710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 807d712:	2300      	movs	r3, #0
}
 807d714:	4618      	mov	r0, r3
 807d716:	370c      	adds	r7, #12
 807d718:	46bd      	mov	sp, r7
 807d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d71e:	4770      	bx	lr

0807d720 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 807d720:	b580      	push	{r7, lr}
 807d722:	b082      	sub	sp, #8
 807d724:	af00      	add	r7, sp, #0
 807d726:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d728:	687b      	ldr	r3, [r7, #4]
 807d72a:	2201      	movs	r2, #1
 807d72c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 807d730:	687b      	ldr	r3, [r7, #4]
 807d732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d736:	2b00      	cmp	r3, #0
 807d738:	d009      	beq.n	807d74e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d73a:	687b      	ldr	r3, [r7, #4]
 807d73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d740:	685b      	ldr	r3, [r3, #4]
 807d742:	687a      	ldr	r2, [r7, #4]
 807d744:	6852      	ldr	r2, [r2, #4]
 807d746:	b2d2      	uxtb	r2, r2
 807d748:	4611      	mov	r1, r2
 807d74a:	6878      	ldr	r0, [r7, #4]
 807d74c:	4798      	blx	r3
  }

  return USBD_OK;
 807d74e:	2300      	movs	r3, #0
}
 807d750:	4618      	mov	r0, r3
 807d752:	3708      	adds	r7, #8
 807d754:	46bd      	mov	sp, r7
 807d756:	bd80      	pop	{r7, pc}

0807d758 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 807d758:	b480      	push	{r7}
 807d75a:	b087      	sub	sp, #28
 807d75c:	af00      	add	r7, sp, #0
 807d75e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 807d760:	687b      	ldr	r3, [r7, #4]
 807d762:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 807d764:	697b      	ldr	r3, [r7, #20]
 807d766:	781b      	ldrb	r3, [r3, #0]
 807d768:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 807d76a:	697b      	ldr	r3, [r7, #20]
 807d76c:	3301      	adds	r3, #1
 807d76e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 807d770:	697b      	ldr	r3, [r7, #20]
 807d772:	781b      	ldrb	r3, [r3, #0]
 807d774:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 807d776:	8a3b      	ldrh	r3, [r7, #16]
 807d778:	021b      	lsls	r3, r3, #8
 807d77a:	b21a      	sxth	r2, r3
 807d77c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 807d780:	4313      	orrs	r3, r2
 807d782:	b21b      	sxth	r3, r3
 807d784:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 807d786:	89fb      	ldrh	r3, [r7, #14]
}
 807d788:	4618      	mov	r0, r3
 807d78a:	371c      	adds	r7, #28
 807d78c:	46bd      	mov	sp, r7
 807d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d792:	4770      	bx	lr

0807d794 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d794:	b580      	push	{r7, lr}
 807d796:	b084      	sub	sp, #16
 807d798:	af00      	add	r7, sp, #0
 807d79a:	6078      	str	r0, [r7, #4]
 807d79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807d79e:	2300      	movs	r3, #0
 807d7a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d7a2:	683b      	ldr	r3, [r7, #0]
 807d7a4:	781b      	ldrb	r3, [r3, #0]
 807d7a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807d7aa:	2b40      	cmp	r3, #64	; 0x40
 807d7ac:	d005      	beq.n	807d7ba <USBD_StdDevReq+0x26>
 807d7ae:	2b40      	cmp	r3, #64	; 0x40
 807d7b0:	d853      	bhi.n	807d85a <USBD_StdDevReq+0xc6>
 807d7b2:	2b00      	cmp	r3, #0
 807d7b4:	d00b      	beq.n	807d7ce <USBD_StdDevReq+0x3a>
 807d7b6:	2b20      	cmp	r3, #32
 807d7b8:	d14f      	bne.n	807d85a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d7ba:	687b      	ldr	r3, [r7, #4]
 807d7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d7c0:	689b      	ldr	r3, [r3, #8]
 807d7c2:	6839      	ldr	r1, [r7, #0]
 807d7c4:	6878      	ldr	r0, [r7, #4]
 807d7c6:	4798      	blx	r3
 807d7c8:	4603      	mov	r3, r0
 807d7ca:	73fb      	strb	r3, [r7, #15]
      break;
 807d7cc:	e04a      	b.n	807d864 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807d7ce:	683b      	ldr	r3, [r7, #0]
 807d7d0:	785b      	ldrb	r3, [r3, #1]
 807d7d2:	2b09      	cmp	r3, #9
 807d7d4:	d83b      	bhi.n	807d84e <USBD_StdDevReq+0xba>
 807d7d6:	a201      	add	r2, pc, #4	; (adr r2, 807d7dc <USBD_StdDevReq+0x48>)
 807d7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807d7dc:	0807d831 	.word	0x0807d831
 807d7e0:	0807d845 	.word	0x0807d845
 807d7e4:	0807d84f 	.word	0x0807d84f
 807d7e8:	0807d83b 	.word	0x0807d83b
 807d7ec:	0807d84f 	.word	0x0807d84f
 807d7f0:	0807d80f 	.word	0x0807d80f
 807d7f4:	0807d805 	.word	0x0807d805
 807d7f8:	0807d84f 	.word	0x0807d84f
 807d7fc:	0807d827 	.word	0x0807d827
 807d800:	0807d819 	.word	0x0807d819
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 807d804:	6839      	ldr	r1, [r7, #0]
 807d806:	6878      	ldr	r0, [r7, #4]
 807d808:	f000 f9de 	bl	807dbc8 <USBD_GetDescriptor>
          break;
 807d80c:	e024      	b.n	807d858 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 807d80e:	6839      	ldr	r1, [r7, #0]
 807d810:	6878      	ldr	r0, [r7, #4]
 807d812:	f000 fb55 	bl	807dec0 <USBD_SetAddress>
          break;
 807d816:	e01f      	b.n	807d858 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 807d818:	6839      	ldr	r1, [r7, #0]
 807d81a:	6878      	ldr	r0, [r7, #4]
 807d81c:	f000 fb94 	bl	807df48 <USBD_SetConfig>
 807d820:	4603      	mov	r3, r0
 807d822:	73fb      	strb	r3, [r7, #15]
          break;
 807d824:	e018      	b.n	807d858 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 807d826:	6839      	ldr	r1, [r7, #0]
 807d828:	6878      	ldr	r0, [r7, #4]
 807d82a:	f000 fc33 	bl	807e094 <USBD_GetConfig>
          break;
 807d82e:	e013      	b.n	807d858 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 807d830:	6839      	ldr	r1, [r7, #0]
 807d832:	6878      	ldr	r0, [r7, #4]
 807d834:	f000 fc64 	bl	807e100 <USBD_GetStatus>
          break;
 807d838:	e00e      	b.n	807d858 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 807d83a:	6839      	ldr	r1, [r7, #0]
 807d83c:	6878      	ldr	r0, [r7, #4]
 807d83e:	f000 fc93 	bl	807e168 <USBD_SetFeature>
          break;
 807d842:	e009      	b.n	807d858 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 807d844:	6839      	ldr	r1, [r7, #0]
 807d846:	6878      	ldr	r0, [r7, #4]
 807d848:	f000 fca2 	bl	807e190 <USBD_ClrFeature>
          break;
 807d84c:	e004      	b.n	807d858 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 807d84e:	6839      	ldr	r1, [r7, #0]
 807d850:	6878      	ldr	r0, [r7, #4]
 807d852:	f000 fcf9 	bl	807e248 <USBD_CtlError>
          break;
 807d856:	bf00      	nop
      }
      break;
 807d858:	e004      	b.n	807d864 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 807d85a:	6839      	ldr	r1, [r7, #0]
 807d85c:	6878      	ldr	r0, [r7, #4]
 807d85e:	f000 fcf3 	bl	807e248 <USBD_CtlError>
      break;
 807d862:	bf00      	nop
  }

  return ret;
 807d864:	7bfb      	ldrb	r3, [r7, #15]
}
 807d866:	4618      	mov	r0, r3
 807d868:	3710      	adds	r7, #16
 807d86a:	46bd      	mov	sp, r7
 807d86c:	bd80      	pop	{r7, pc}
 807d86e:	bf00      	nop

0807d870 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d870:	b580      	push	{r7, lr}
 807d872:	b084      	sub	sp, #16
 807d874:	af00      	add	r7, sp, #0
 807d876:	6078      	str	r0, [r7, #4]
 807d878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807d87a:	2300      	movs	r3, #0
 807d87c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d87e:	683b      	ldr	r3, [r7, #0]
 807d880:	781b      	ldrb	r3, [r3, #0]
 807d882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807d886:	2b40      	cmp	r3, #64	; 0x40
 807d888:	d005      	beq.n	807d896 <USBD_StdItfReq+0x26>
 807d88a:	2b40      	cmp	r3, #64	; 0x40
 807d88c:	d82f      	bhi.n	807d8ee <USBD_StdItfReq+0x7e>
 807d88e:	2b00      	cmp	r3, #0
 807d890:	d001      	beq.n	807d896 <USBD_StdItfReq+0x26>
 807d892:	2b20      	cmp	r3, #32
 807d894:	d12b      	bne.n	807d8ee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 807d896:	687b      	ldr	r3, [r7, #4]
 807d898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d89c:	b2db      	uxtb	r3, r3
 807d89e:	3b01      	subs	r3, #1
 807d8a0:	2b02      	cmp	r3, #2
 807d8a2:	d81d      	bhi.n	807d8e0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 807d8a4:	683b      	ldr	r3, [r7, #0]
 807d8a6:	889b      	ldrh	r3, [r3, #4]
 807d8a8:	b2db      	uxtb	r3, r3
 807d8aa:	2b01      	cmp	r3, #1
 807d8ac:	d813      	bhi.n	807d8d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d8ae:	687b      	ldr	r3, [r7, #4]
 807d8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d8b4:	689b      	ldr	r3, [r3, #8]
 807d8b6:	6839      	ldr	r1, [r7, #0]
 807d8b8:	6878      	ldr	r0, [r7, #4]
 807d8ba:	4798      	blx	r3
 807d8bc:	4603      	mov	r3, r0
 807d8be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 807d8c0:	683b      	ldr	r3, [r7, #0]
 807d8c2:	88db      	ldrh	r3, [r3, #6]
 807d8c4:	2b00      	cmp	r3, #0
 807d8c6:	d110      	bne.n	807d8ea <USBD_StdItfReq+0x7a>
 807d8c8:	7bfb      	ldrb	r3, [r7, #15]
 807d8ca:	2b00      	cmp	r3, #0
 807d8cc:	d10d      	bne.n	807d8ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 807d8ce:	6878      	ldr	r0, [r7, #4]
 807d8d0:	f000 fd85 	bl	807e3de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 807d8d4:	e009      	b.n	807d8ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 807d8d6:	6839      	ldr	r1, [r7, #0]
 807d8d8:	6878      	ldr	r0, [r7, #4]
 807d8da:	f000 fcb5 	bl	807e248 <USBD_CtlError>
          break;
 807d8de:	e004      	b.n	807d8ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 807d8e0:	6839      	ldr	r1, [r7, #0]
 807d8e2:	6878      	ldr	r0, [r7, #4]
 807d8e4:	f000 fcb0 	bl	807e248 <USBD_CtlError>
          break;
 807d8e8:	e000      	b.n	807d8ec <USBD_StdItfReq+0x7c>
          break;
 807d8ea:	bf00      	nop
      }
      break;
 807d8ec:	e004      	b.n	807d8f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 807d8ee:	6839      	ldr	r1, [r7, #0]
 807d8f0:	6878      	ldr	r0, [r7, #4]
 807d8f2:	f000 fca9 	bl	807e248 <USBD_CtlError>
      break;
 807d8f6:	bf00      	nop
  }

  return ret;
 807d8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 807d8fa:	4618      	mov	r0, r3
 807d8fc:	3710      	adds	r7, #16
 807d8fe:	46bd      	mov	sp, r7
 807d900:	bd80      	pop	{r7, pc}

0807d902 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d902:	b580      	push	{r7, lr}
 807d904:	b084      	sub	sp, #16
 807d906:	af00      	add	r7, sp, #0
 807d908:	6078      	str	r0, [r7, #4]
 807d90a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 807d90c:	2300      	movs	r3, #0
 807d90e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 807d910:	683b      	ldr	r3, [r7, #0]
 807d912:	889b      	ldrh	r3, [r3, #4]
 807d914:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d916:	683b      	ldr	r3, [r7, #0]
 807d918:	781b      	ldrb	r3, [r3, #0]
 807d91a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807d91e:	2b40      	cmp	r3, #64	; 0x40
 807d920:	d007      	beq.n	807d932 <USBD_StdEPReq+0x30>
 807d922:	2b40      	cmp	r3, #64	; 0x40
 807d924:	f200 8145 	bhi.w	807dbb2 <USBD_StdEPReq+0x2b0>
 807d928:	2b00      	cmp	r3, #0
 807d92a:	d00c      	beq.n	807d946 <USBD_StdEPReq+0x44>
 807d92c:	2b20      	cmp	r3, #32
 807d92e:	f040 8140 	bne.w	807dbb2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d932:	687b      	ldr	r3, [r7, #4]
 807d934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d938:	689b      	ldr	r3, [r3, #8]
 807d93a:	6839      	ldr	r1, [r7, #0]
 807d93c:	6878      	ldr	r0, [r7, #4]
 807d93e:	4798      	blx	r3
 807d940:	4603      	mov	r3, r0
 807d942:	73fb      	strb	r3, [r7, #15]
      break;
 807d944:	e13a      	b.n	807dbbc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807d946:	683b      	ldr	r3, [r7, #0]
 807d948:	785b      	ldrb	r3, [r3, #1]
 807d94a:	2b03      	cmp	r3, #3
 807d94c:	d007      	beq.n	807d95e <USBD_StdEPReq+0x5c>
 807d94e:	2b03      	cmp	r3, #3
 807d950:	f300 8129 	bgt.w	807dba6 <USBD_StdEPReq+0x2a4>
 807d954:	2b00      	cmp	r3, #0
 807d956:	d07f      	beq.n	807da58 <USBD_StdEPReq+0x156>
 807d958:	2b01      	cmp	r3, #1
 807d95a:	d03c      	beq.n	807d9d6 <USBD_StdEPReq+0xd4>
 807d95c:	e123      	b.n	807dba6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 807d95e:	687b      	ldr	r3, [r7, #4]
 807d960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d964:	b2db      	uxtb	r3, r3
 807d966:	2b02      	cmp	r3, #2
 807d968:	d002      	beq.n	807d970 <USBD_StdEPReq+0x6e>
 807d96a:	2b03      	cmp	r3, #3
 807d96c:	d016      	beq.n	807d99c <USBD_StdEPReq+0x9a>
 807d96e:	e02c      	b.n	807d9ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807d970:	7bbb      	ldrb	r3, [r7, #14]
 807d972:	2b00      	cmp	r3, #0
 807d974:	d00d      	beq.n	807d992 <USBD_StdEPReq+0x90>
 807d976:	7bbb      	ldrb	r3, [r7, #14]
 807d978:	2b80      	cmp	r3, #128	; 0x80
 807d97a:	d00a      	beq.n	807d992 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 807d97c:	7bbb      	ldrb	r3, [r7, #14]
 807d97e:	4619      	mov	r1, r3
 807d980:	6878      	ldr	r0, [r7, #4]
 807d982:	f001 f9b7 	bl	807ecf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 807d986:	2180      	movs	r1, #128	; 0x80
 807d988:	6878      	ldr	r0, [r7, #4]
 807d98a:	f001 f9b3 	bl	807ecf4 <USBD_LL_StallEP>
 807d98e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807d990:	e020      	b.n	807d9d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 807d992:	6839      	ldr	r1, [r7, #0]
 807d994:	6878      	ldr	r0, [r7, #4]
 807d996:	f000 fc57 	bl	807e248 <USBD_CtlError>
              break;
 807d99a:	e01b      	b.n	807d9d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 807d99c:	683b      	ldr	r3, [r7, #0]
 807d99e:	885b      	ldrh	r3, [r3, #2]
 807d9a0:	2b00      	cmp	r3, #0
 807d9a2:	d10e      	bne.n	807d9c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 807d9a4:	7bbb      	ldrb	r3, [r7, #14]
 807d9a6:	2b00      	cmp	r3, #0
 807d9a8:	d00b      	beq.n	807d9c2 <USBD_StdEPReq+0xc0>
 807d9aa:	7bbb      	ldrb	r3, [r7, #14]
 807d9ac:	2b80      	cmp	r3, #128	; 0x80
 807d9ae:	d008      	beq.n	807d9c2 <USBD_StdEPReq+0xc0>
 807d9b0:	683b      	ldr	r3, [r7, #0]
 807d9b2:	88db      	ldrh	r3, [r3, #6]
 807d9b4:	2b00      	cmp	r3, #0
 807d9b6:	d104      	bne.n	807d9c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 807d9b8:	7bbb      	ldrb	r3, [r7, #14]
 807d9ba:	4619      	mov	r1, r3
 807d9bc:	6878      	ldr	r0, [r7, #4]
 807d9be:	f001 f999 	bl	807ecf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 807d9c2:	6878      	ldr	r0, [r7, #4]
 807d9c4:	f000 fd0b 	bl	807e3de <USBD_CtlSendStatus>

              break;
 807d9c8:	e004      	b.n	807d9d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 807d9ca:	6839      	ldr	r1, [r7, #0]
 807d9cc:	6878      	ldr	r0, [r7, #4]
 807d9ce:	f000 fc3b 	bl	807e248 <USBD_CtlError>
              break;
 807d9d2:	bf00      	nop
          }
          break;
 807d9d4:	e0ec      	b.n	807dbb0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 807d9d6:	687b      	ldr	r3, [r7, #4]
 807d9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d9dc:	b2db      	uxtb	r3, r3
 807d9de:	2b02      	cmp	r3, #2
 807d9e0:	d002      	beq.n	807d9e8 <USBD_StdEPReq+0xe6>
 807d9e2:	2b03      	cmp	r3, #3
 807d9e4:	d016      	beq.n	807da14 <USBD_StdEPReq+0x112>
 807d9e6:	e030      	b.n	807da4a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807d9e8:	7bbb      	ldrb	r3, [r7, #14]
 807d9ea:	2b00      	cmp	r3, #0
 807d9ec:	d00d      	beq.n	807da0a <USBD_StdEPReq+0x108>
 807d9ee:	7bbb      	ldrb	r3, [r7, #14]
 807d9f0:	2b80      	cmp	r3, #128	; 0x80
 807d9f2:	d00a      	beq.n	807da0a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 807d9f4:	7bbb      	ldrb	r3, [r7, #14]
 807d9f6:	4619      	mov	r1, r3
 807d9f8:	6878      	ldr	r0, [r7, #4]
 807d9fa:	f001 f97b 	bl	807ecf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 807d9fe:	2180      	movs	r1, #128	; 0x80
 807da00:	6878      	ldr	r0, [r7, #4]
 807da02:	f001 f977 	bl	807ecf4 <USBD_LL_StallEP>
 807da06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807da08:	e025      	b.n	807da56 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 807da0a:	6839      	ldr	r1, [r7, #0]
 807da0c:	6878      	ldr	r0, [r7, #4]
 807da0e:	f000 fc1b 	bl	807e248 <USBD_CtlError>
              break;
 807da12:	e020      	b.n	807da56 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 807da14:	683b      	ldr	r3, [r7, #0]
 807da16:	885b      	ldrh	r3, [r3, #2]
 807da18:	2b00      	cmp	r3, #0
 807da1a:	d11b      	bne.n	807da54 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 807da1c:	7bbb      	ldrb	r3, [r7, #14]
 807da1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 807da22:	2b00      	cmp	r3, #0
 807da24:	d004      	beq.n	807da30 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 807da26:	7bbb      	ldrb	r3, [r7, #14]
 807da28:	4619      	mov	r1, r3
 807da2a:	6878      	ldr	r0, [r7, #4]
 807da2c:	f001 f981 	bl	807ed32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 807da30:	6878      	ldr	r0, [r7, #4]
 807da32:	f000 fcd4 	bl	807e3de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807da36:	687b      	ldr	r3, [r7, #4]
 807da38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807da3c:	689b      	ldr	r3, [r3, #8]
 807da3e:	6839      	ldr	r1, [r7, #0]
 807da40:	6878      	ldr	r0, [r7, #4]
 807da42:	4798      	blx	r3
 807da44:	4603      	mov	r3, r0
 807da46:	73fb      	strb	r3, [r7, #15]
              }
              break;
 807da48:	e004      	b.n	807da54 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 807da4a:	6839      	ldr	r1, [r7, #0]
 807da4c:	6878      	ldr	r0, [r7, #4]
 807da4e:	f000 fbfb 	bl	807e248 <USBD_CtlError>
              break;
 807da52:	e000      	b.n	807da56 <USBD_StdEPReq+0x154>
              break;
 807da54:	bf00      	nop
          }
          break;
 807da56:	e0ab      	b.n	807dbb0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 807da58:	687b      	ldr	r3, [r7, #4]
 807da5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807da5e:	b2db      	uxtb	r3, r3
 807da60:	2b02      	cmp	r3, #2
 807da62:	d002      	beq.n	807da6a <USBD_StdEPReq+0x168>
 807da64:	2b03      	cmp	r3, #3
 807da66:	d032      	beq.n	807dace <USBD_StdEPReq+0x1cc>
 807da68:	e097      	b.n	807db9a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807da6a:	7bbb      	ldrb	r3, [r7, #14]
 807da6c:	2b00      	cmp	r3, #0
 807da6e:	d007      	beq.n	807da80 <USBD_StdEPReq+0x17e>
 807da70:	7bbb      	ldrb	r3, [r7, #14]
 807da72:	2b80      	cmp	r3, #128	; 0x80
 807da74:	d004      	beq.n	807da80 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 807da76:	6839      	ldr	r1, [r7, #0]
 807da78:	6878      	ldr	r0, [r7, #4]
 807da7a:	f000 fbe5 	bl	807e248 <USBD_CtlError>
                break;
 807da7e:	e091      	b.n	807dba4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807da80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807da84:	2b00      	cmp	r3, #0
 807da86:	da0b      	bge.n	807daa0 <USBD_StdEPReq+0x19e>
 807da88:	7bbb      	ldrb	r3, [r7, #14]
 807da8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807da8e:	4613      	mov	r3, r2
 807da90:	009b      	lsls	r3, r3, #2
 807da92:	4413      	add	r3, r2
 807da94:	009b      	lsls	r3, r3, #2
 807da96:	3310      	adds	r3, #16
 807da98:	687a      	ldr	r2, [r7, #4]
 807da9a:	4413      	add	r3, r2
 807da9c:	3304      	adds	r3, #4
 807da9e:	e00b      	b.n	807dab8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807daa0:	7bbb      	ldrb	r3, [r7, #14]
 807daa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807daa6:	4613      	mov	r3, r2
 807daa8:	009b      	lsls	r3, r3, #2
 807daaa:	4413      	add	r3, r2
 807daac:	009b      	lsls	r3, r3, #2
 807daae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807dab2:	687a      	ldr	r2, [r7, #4]
 807dab4:	4413      	add	r3, r2
 807dab6:	3304      	adds	r3, #4
 807dab8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 807daba:	68bb      	ldr	r3, [r7, #8]
 807dabc:	2200      	movs	r2, #0
 807dabe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 807dac0:	68bb      	ldr	r3, [r7, #8]
 807dac2:	2202      	movs	r2, #2
 807dac4:	4619      	mov	r1, r3
 807dac6:	6878      	ldr	r0, [r7, #4]
 807dac8:	f000 fc2f 	bl	807e32a <USBD_CtlSendData>
              break;
 807dacc:	e06a      	b.n	807dba4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 807dace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807dad2:	2b00      	cmp	r3, #0
 807dad4:	da11      	bge.n	807dafa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 807dad6:	7bbb      	ldrb	r3, [r7, #14]
 807dad8:	f003 020f 	and.w	r2, r3, #15
 807dadc:	6879      	ldr	r1, [r7, #4]
 807dade:	4613      	mov	r3, r2
 807dae0:	009b      	lsls	r3, r3, #2
 807dae2:	4413      	add	r3, r2
 807dae4:	009b      	lsls	r3, r3, #2
 807dae6:	440b      	add	r3, r1
 807dae8:	3324      	adds	r3, #36	; 0x24
 807daea:	881b      	ldrh	r3, [r3, #0]
 807daec:	2b00      	cmp	r3, #0
 807daee:	d117      	bne.n	807db20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 807daf0:	6839      	ldr	r1, [r7, #0]
 807daf2:	6878      	ldr	r0, [r7, #4]
 807daf4:	f000 fba8 	bl	807e248 <USBD_CtlError>
                  break;
 807daf8:	e054      	b.n	807dba4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 807dafa:	7bbb      	ldrb	r3, [r7, #14]
 807dafc:	f003 020f 	and.w	r2, r3, #15
 807db00:	6879      	ldr	r1, [r7, #4]
 807db02:	4613      	mov	r3, r2
 807db04:	009b      	lsls	r3, r3, #2
 807db06:	4413      	add	r3, r2
 807db08:	009b      	lsls	r3, r3, #2
 807db0a:	440b      	add	r3, r1
 807db0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 807db10:	881b      	ldrh	r3, [r3, #0]
 807db12:	2b00      	cmp	r3, #0
 807db14:	d104      	bne.n	807db20 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 807db16:	6839      	ldr	r1, [r7, #0]
 807db18:	6878      	ldr	r0, [r7, #4]
 807db1a:	f000 fb95 	bl	807e248 <USBD_CtlError>
                  break;
 807db1e:	e041      	b.n	807dba4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807db20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807db24:	2b00      	cmp	r3, #0
 807db26:	da0b      	bge.n	807db40 <USBD_StdEPReq+0x23e>
 807db28:	7bbb      	ldrb	r3, [r7, #14]
 807db2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807db2e:	4613      	mov	r3, r2
 807db30:	009b      	lsls	r3, r3, #2
 807db32:	4413      	add	r3, r2
 807db34:	009b      	lsls	r3, r3, #2
 807db36:	3310      	adds	r3, #16
 807db38:	687a      	ldr	r2, [r7, #4]
 807db3a:	4413      	add	r3, r2
 807db3c:	3304      	adds	r3, #4
 807db3e:	e00b      	b.n	807db58 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807db40:	7bbb      	ldrb	r3, [r7, #14]
 807db42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807db46:	4613      	mov	r3, r2
 807db48:	009b      	lsls	r3, r3, #2
 807db4a:	4413      	add	r3, r2
 807db4c:	009b      	lsls	r3, r3, #2
 807db4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807db52:	687a      	ldr	r2, [r7, #4]
 807db54:	4413      	add	r3, r2
 807db56:	3304      	adds	r3, #4
 807db58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 807db5a:	7bbb      	ldrb	r3, [r7, #14]
 807db5c:	2b00      	cmp	r3, #0
 807db5e:	d002      	beq.n	807db66 <USBD_StdEPReq+0x264>
 807db60:	7bbb      	ldrb	r3, [r7, #14]
 807db62:	2b80      	cmp	r3, #128	; 0x80
 807db64:	d103      	bne.n	807db6e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 807db66:	68bb      	ldr	r3, [r7, #8]
 807db68:	2200      	movs	r2, #0
 807db6a:	601a      	str	r2, [r3, #0]
 807db6c:	e00e      	b.n	807db8c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 807db6e:	7bbb      	ldrb	r3, [r7, #14]
 807db70:	4619      	mov	r1, r3
 807db72:	6878      	ldr	r0, [r7, #4]
 807db74:	f001 f8fc 	bl	807ed70 <USBD_LL_IsStallEP>
 807db78:	4603      	mov	r3, r0
 807db7a:	2b00      	cmp	r3, #0
 807db7c:	d003      	beq.n	807db86 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 807db7e:	68bb      	ldr	r3, [r7, #8]
 807db80:	2201      	movs	r2, #1
 807db82:	601a      	str	r2, [r3, #0]
 807db84:	e002      	b.n	807db8c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 807db86:	68bb      	ldr	r3, [r7, #8]
 807db88:	2200      	movs	r2, #0
 807db8a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 807db8c:	68bb      	ldr	r3, [r7, #8]
 807db8e:	2202      	movs	r2, #2
 807db90:	4619      	mov	r1, r3
 807db92:	6878      	ldr	r0, [r7, #4]
 807db94:	f000 fbc9 	bl	807e32a <USBD_CtlSendData>
              break;
 807db98:	e004      	b.n	807dba4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 807db9a:	6839      	ldr	r1, [r7, #0]
 807db9c:	6878      	ldr	r0, [r7, #4]
 807db9e:	f000 fb53 	bl	807e248 <USBD_CtlError>
              break;
 807dba2:	bf00      	nop
          }
          break;
 807dba4:	e004      	b.n	807dbb0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 807dba6:	6839      	ldr	r1, [r7, #0]
 807dba8:	6878      	ldr	r0, [r7, #4]
 807dbaa:	f000 fb4d 	bl	807e248 <USBD_CtlError>
          break;
 807dbae:	bf00      	nop
      }
      break;
 807dbb0:	e004      	b.n	807dbbc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 807dbb2:	6839      	ldr	r1, [r7, #0]
 807dbb4:	6878      	ldr	r0, [r7, #4]
 807dbb6:	f000 fb47 	bl	807e248 <USBD_CtlError>
      break;
 807dbba:	bf00      	nop
  }

  return ret;
 807dbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 807dbbe:	4618      	mov	r0, r3
 807dbc0:	3710      	adds	r7, #16
 807dbc2:	46bd      	mov	sp, r7
 807dbc4:	bd80      	pop	{r7, pc}
	...

0807dbc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807dbc8:	b580      	push	{r7, lr}
 807dbca:	b084      	sub	sp, #16
 807dbcc:	af00      	add	r7, sp, #0
 807dbce:	6078      	str	r0, [r7, #4]
 807dbd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 807dbd2:	2300      	movs	r3, #0
 807dbd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 807dbd6:	2300      	movs	r3, #0
 807dbd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 807dbda:	2300      	movs	r3, #0
 807dbdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 807dbde:	683b      	ldr	r3, [r7, #0]
 807dbe0:	885b      	ldrh	r3, [r3, #2]
 807dbe2:	0a1b      	lsrs	r3, r3, #8
 807dbe4:	b29b      	uxth	r3, r3
 807dbe6:	3b01      	subs	r3, #1
 807dbe8:	2b06      	cmp	r3, #6
 807dbea:	f200 813b 	bhi.w	807de64 <USBD_GetDescriptor+0x29c>
 807dbee:	a201      	add	r2, pc, #4	; (adr r2, 807dbf4 <USBD_GetDescriptor+0x2c>)
 807dbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807dbf4:	0807dc11 	.word	0x0807dc11
 807dbf8:	0807dc29 	.word	0x0807dc29
 807dbfc:	0807dc69 	.word	0x0807dc69
 807dc00:	0807de65 	.word	0x0807de65
 807dc04:	0807de65 	.word	0x0807de65
 807dc08:	0807de05 	.word	0x0807de05
 807dc0c:	0807de31 	.word	0x0807de31
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 807dc10:	687b      	ldr	r3, [r7, #4]
 807dc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dc16:	681b      	ldr	r3, [r3, #0]
 807dc18:	687a      	ldr	r2, [r7, #4]
 807dc1a:	7c12      	ldrb	r2, [r2, #16]
 807dc1c:	f107 0108 	add.w	r1, r7, #8
 807dc20:	4610      	mov	r0, r2
 807dc22:	4798      	blx	r3
 807dc24:	60f8      	str	r0, [r7, #12]
      break;
 807dc26:	e125      	b.n	807de74 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807dc28:	687b      	ldr	r3, [r7, #4]
 807dc2a:	7c1b      	ldrb	r3, [r3, #16]
 807dc2c:	2b00      	cmp	r3, #0
 807dc2e:	d10d      	bne.n	807dc4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 807dc30:	687b      	ldr	r3, [r7, #4]
 807dc32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807dc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807dc38:	f107 0208 	add.w	r2, r7, #8
 807dc3c:	4610      	mov	r0, r2
 807dc3e:	4798      	blx	r3
 807dc40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807dc42:	68fb      	ldr	r3, [r7, #12]
 807dc44:	3301      	adds	r3, #1
 807dc46:	2202      	movs	r2, #2
 807dc48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 807dc4a:	e113      	b.n	807de74 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 807dc4c:	687b      	ldr	r3, [r7, #4]
 807dc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807dc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807dc54:	f107 0208 	add.w	r2, r7, #8
 807dc58:	4610      	mov	r0, r2
 807dc5a:	4798      	blx	r3
 807dc5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807dc5e:	68fb      	ldr	r3, [r7, #12]
 807dc60:	3301      	adds	r3, #1
 807dc62:	2202      	movs	r2, #2
 807dc64:	701a      	strb	r2, [r3, #0]
      break;
 807dc66:	e105      	b.n	807de74 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 807dc68:	683b      	ldr	r3, [r7, #0]
 807dc6a:	885b      	ldrh	r3, [r3, #2]
 807dc6c:	b2db      	uxtb	r3, r3
 807dc6e:	2b05      	cmp	r3, #5
 807dc70:	f200 80ac 	bhi.w	807ddcc <USBD_GetDescriptor+0x204>
 807dc74:	a201      	add	r2, pc, #4	; (adr r2, 807dc7c <USBD_GetDescriptor+0xb4>)
 807dc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807dc7a:	bf00      	nop
 807dc7c:	0807dc95 	.word	0x0807dc95
 807dc80:	0807dcc9 	.word	0x0807dcc9
 807dc84:	0807dcfd 	.word	0x0807dcfd
 807dc88:	0807dd31 	.word	0x0807dd31
 807dc8c:	0807dd65 	.word	0x0807dd65
 807dc90:	0807dd99 	.word	0x0807dd99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 807dc94:	687b      	ldr	r3, [r7, #4]
 807dc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dc9a:	685b      	ldr	r3, [r3, #4]
 807dc9c:	2b00      	cmp	r3, #0
 807dc9e:	d00b      	beq.n	807dcb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 807dca0:	687b      	ldr	r3, [r7, #4]
 807dca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dca6:	685b      	ldr	r3, [r3, #4]
 807dca8:	687a      	ldr	r2, [r7, #4]
 807dcaa:	7c12      	ldrb	r2, [r2, #16]
 807dcac:	f107 0108 	add.w	r1, r7, #8
 807dcb0:	4610      	mov	r0, r2
 807dcb2:	4798      	blx	r3
 807dcb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dcb6:	e0a4      	b.n	807de02 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dcb8:	6839      	ldr	r1, [r7, #0]
 807dcba:	6878      	ldr	r0, [r7, #4]
 807dcbc:	f000 fac4 	bl	807e248 <USBD_CtlError>
            err++;
 807dcc0:	7afb      	ldrb	r3, [r7, #11]
 807dcc2:	3301      	adds	r3, #1
 807dcc4:	72fb      	strb	r3, [r7, #11]
          break;
 807dcc6:	e09c      	b.n	807de02 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 807dcc8:	687b      	ldr	r3, [r7, #4]
 807dcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dcce:	689b      	ldr	r3, [r3, #8]
 807dcd0:	2b00      	cmp	r3, #0
 807dcd2:	d00b      	beq.n	807dcec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 807dcd4:	687b      	ldr	r3, [r7, #4]
 807dcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dcda:	689b      	ldr	r3, [r3, #8]
 807dcdc:	687a      	ldr	r2, [r7, #4]
 807dcde:	7c12      	ldrb	r2, [r2, #16]
 807dce0:	f107 0108 	add.w	r1, r7, #8
 807dce4:	4610      	mov	r0, r2
 807dce6:	4798      	blx	r3
 807dce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dcea:	e08a      	b.n	807de02 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dcec:	6839      	ldr	r1, [r7, #0]
 807dcee:	6878      	ldr	r0, [r7, #4]
 807dcf0:	f000 faaa 	bl	807e248 <USBD_CtlError>
            err++;
 807dcf4:	7afb      	ldrb	r3, [r7, #11]
 807dcf6:	3301      	adds	r3, #1
 807dcf8:	72fb      	strb	r3, [r7, #11]
          break;
 807dcfa:	e082      	b.n	807de02 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 807dcfc:	687b      	ldr	r3, [r7, #4]
 807dcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd02:	68db      	ldr	r3, [r3, #12]
 807dd04:	2b00      	cmp	r3, #0
 807dd06:	d00b      	beq.n	807dd20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 807dd08:	687b      	ldr	r3, [r7, #4]
 807dd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd0e:	68db      	ldr	r3, [r3, #12]
 807dd10:	687a      	ldr	r2, [r7, #4]
 807dd12:	7c12      	ldrb	r2, [r2, #16]
 807dd14:	f107 0108 	add.w	r1, r7, #8
 807dd18:	4610      	mov	r0, r2
 807dd1a:	4798      	blx	r3
 807dd1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd1e:	e070      	b.n	807de02 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd20:	6839      	ldr	r1, [r7, #0]
 807dd22:	6878      	ldr	r0, [r7, #4]
 807dd24:	f000 fa90 	bl	807e248 <USBD_CtlError>
            err++;
 807dd28:	7afb      	ldrb	r3, [r7, #11]
 807dd2a:	3301      	adds	r3, #1
 807dd2c:	72fb      	strb	r3, [r7, #11]
          break;
 807dd2e:	e068      	b.n	807de02 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 807dd30:	687b      	ldr	r3, [r7, #4]
 807dd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd36:	691b      	ldr	r3, [r3, #16]
 807dd38:	2b00      	cmp	r3, #0
 807dd3a:	d00b      	beq.n	807dd54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 807dd3c:	687b      	ldr	r3, [r7, #4]
 807dd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd42:	691b      	ldr	r3, [r3, #16]
 807dd44:	687a      	ldr	r2, [r7, #4]
 807dd46:	7c12      	ldrb	r2, [r2, #16]
 807dd48:	f107 0108 	add.w	r1, r7, #8
 807dd4c:	4610      	mov	r0, r2
 807dd4e:	4798      	blx	r3
 807dd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd52:	e056      	b.n	807de02 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd54:	6839      	ldr	r1, [r7, #0]
 807dd56:	6878      	ldr	r0, [r7, #4]
 807dd58:	f000 fa76 	bl	807e248 <USBD_CtlError>
            err++;
 807dd5c:	7afb      	ldrb	r3, [r7, #11]
 807dd5e:	3301      	adds	r3, #1
 807dd60:	72fb      	strb	r3, [r7, #11]
          break;
 807dd62:	e04e      	b.n	807de02 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 807dd64:	687b      	ldr	r3, [r7, #4]
 807dd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd6a:	695b      	ldr	r3, [r3, #20]
 807dd6c:	2b00      	cmp	r3, #0
 807dd6e:	d00b      	beq.n	807dd88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 807dd70:	687b      	ldr	r3, [r7, #4]
 807dd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd76:	695b      	ldr	r3, [r3, #20]
 807dd78:	687a      	ldr	r2, [r7, #4]
 807dd7a:	7c12      	ldrb	r2, [r2, #16]
 807dd7c:	f107 0108 	add.w	r1, r7, #8
 807dd80:	4610      	mov	r0, r2
 807dd82:	4798      	blx	r3
 807dd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd86:	e03c      	b.n	807de02 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd88:	6839      	ldr	r1, [r7, #0]
 807dd8a:	6878      	ldr	r0, [r7, #4]
 807dd8c:	f000 fa5c 	bl	807e248 <USBD_CtlError>
            err++;
 807dd90:	7afb      	ldrb	r3, [r7, #11]
 807dd92:	3301      	adds	r3, #1
 807dd94:	72fb      	strb	r3, [r7, #11]
          break;
 807dd96:	e034      	b.n	807de02 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 807dd98:	687b      	ldr	r3, [r7, #4]
 807dd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd9e:	699b      	ldr	r3, [r3, #24]
 807dda0:	2b00      	cmp	r3, #0
 807dda2:	d00b      	beq.n	807ddbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 807dda4:	687b      	ldr	r3, [r7, #4]
 807dda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807ddaa:	699b      	ldr	r3, [r3, #24]
 807ddac:	687a      	ldr	r2, [r7, #4]
 807ddae:	7c12      	ldrb	r2, [r2, #16]
 807ddb0:	f107 0108 	add.w	r1, r7, #8
 807ddb4:	4610      	mov	r0, r2
 807ddb6:	4798      	blx	r3
 807ddb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807ddba:	e022      	b.n	807de02 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807ddbc:	6839      	ldr	r1, [r7, #0]
 807ddbe:	6878      	ldr	r0, [r7, #4]
 807ddc0:	f000 fa42 	bl	807e248 <USBD_CtlError>
            err++;
 807ddc4:	7afb      	ldrb	r3, [r7, #11]
 807ddc6:	3301      	adds	r3, #1
 807ddc8:	72fb      	strb	r3, [r7, #11]
          break;
 807ddca:	e01a      	b.n	807de02 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 807ddcc:	687b      	ldr	r3, [r7, #4]
 807ddce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807ddd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807ddd4:	2b00      	cmp	r3, #0
 807ddd6:	d00c      	beq.n	807ddf2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 807ddd8:	687b      	ldr	r3, [r7, #4]
 807ddda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807ddde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807dde0:	683a      	ldr	r2, [r7, #0]
 807dde2:	8852      	ldrh	r2, [r2, #2]
 807dde4:	b2d1      	uxtb	r1, r2
 807dde6:	f107 0208 	add.w	r2, r7, #8
 807ddea:	6878      	ldr	r0, [r7, #4]
 807ddec:	4798      	blx	r3
 807ddee:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 807ddf0:	e006      	b.n	807de00 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 807ddf2:	6839      	ldr	r1, [r7, #0]
 807ddf4:	6878      	ldr	r0, [r7, #4]
 807ddf6:	f000 fa27 	bl	807e248 <USBD_CtlError>
            err++;
 807ddfa:	7afb      	ldrb	r3, [r7, #11]
 807ddfc:	3301      	adds	r3, #1
 807ddfe:	72fb      	strb	r3, [r7, #11]
          break;
 807de00:	bf00      	nop
      }
      break;
 807de02:	e037      	b.n	807de74 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807de04:	687b      	ldr	r3, [r7, #4]
 807de06:	7c1b      	ldrb	r3, [r3, #16]
 807de08:	2b00      	cmp	r3, #0
 807de0a:	d109      	bne.n	807de20 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 807de0c:	687b      	ldr	r3, [r7, #4]
 807de0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807de12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 807de14:	f107 0208 	add.w	r2, r7, #8
 807de18:	4610      	mov	r0, r2
 807de1a:	4798      	blx	r3
 807de1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807de1e:	e029      	b.n	807de74 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 807de20:	6839      	ldr	r1, [r7, #0]
 807de22:	6878      	ldr	r0, [r7, #4]
 807de24:	f000 fa10 	bl	807e248 <USBD_CtlError>
        err++;
 807de28:	7afb      	ldrb	r3, [r7, #11]
 807de2a:	3301      	adds	r3, #1
 807de2c:	72fb      	strb	r3, [r7, #11]
      break;
 807de2e:	e021      	b.n	807de74 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807de30:	687b      	ldr	r3, [r7, #4]
 807de32:	7c1b      	ldrb	r3, [r3, #16]
 807de34:	2b00      	cmp	r3, #0
 807de36:	d10d      	bne.n	807de54 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 807de38:	687b      	ldr	r3, [r7, #4]
 807de3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807de3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807de40:	f107 0208 	add.w	r2, r7, #8
 807de44:	4610      	mov	r0, r2
 807de46:	4798      	blx	r3
 807de48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 807de4a:	68fb      	ldr	r3, [r7, #12]
 807de4c:	3301      	adds	r3, #1
 807de4e:	2207      	movs	r2, #7
 807de50:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807de52:	e00f      	b.n	807de74 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 807de54:	6839      	ldr	r1, [r7, #0]
 807de56:	6878      	ldr	r0, [r7, #4]
 807de58:	f000 f9f6 	bl	807e248 <USBD_CtlError>
        err++;
 807de5c:	7afb      	ldrb	r3, [r7, #11]
 807de5e:	3301      	adds	r3, #1
 807de60:	72fb      	strb	r3, [r7, #11]
      break;
 807de62:	e007      	b.n	807de74 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 807de64:	6839      	ldr	r1, [r7, #0]
 807de66:	6878      	ldr	r0, [r7, #4]
 807de68:	f000 f9ee 	bl	807e248 <USBD_CtlError>
      err++;
 807de6c:	7afb      	ldrb	r3, [r7, #11]
 807de6e:	3301      	adds	r3, #1
 807de70:	72fb      	strb	r3, [r7, #11]
      break;
 807de72:	bf00      	nop
  }

  if (err != 0U)
 807de74:	7afb      	ldrb	r3, [r7, #11]
 807de76:	2b00      	cmp	r3, #0
 807de78:	d11e      	bne.n	807deb8 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 807de7a:	683b      	ldr	r3, [r7, #0]
 807de7c:	88db      	ldrh	r3, [r3, #6]
 807de7e:	2b00      	cmp	r3, #0
 807de80:	d016      	beq.n	807deb0 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 807de82:	893b      	ldrh	r3, [r7, #8]
 807de84:	2b00      	cmp	r3, #0
 807de86:	d00e      	beq.n	807dea6 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 807de88:	683b      	ldr	r3, [r7, #0]
 807de8a:	88da      	ldrh	r2, [r3, #6]
 807de8c:	893b      	ldrh	r3, [r7, #8]
 807de8e:	4293      	cmp	r3, r2
 807de90:	bf28      	it	cs
 807de92:	4613      	movcs	r3, r2
 807de94:	b29b      	uxth	r3, r3
 807de96:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 807de98:	893b      	ldrh	r3, [r7, #8]
 807de9a:	461a      	mov	r2, r3
 807de9c:	68f9      	ldr	r1, [r7, #12]
 807de9e:	6878      	ldr	r0, [r7, #4]
 807dea0:	f000 fa43 	bl	807e32a <USBD_CtlSendData>
 807dea4:	e009      	b.n	807deba <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 807dea6:	6839      	ldr	r1, [r7, #0]
 807dea8:	6878      	ldr	r0, [r7, #4]
 807deaa:	f000 f9cd 	bl	807e248 <USBD_CtlError>
 807deae:	e004      	b.n	807deba <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 807deb0:	6878      	ldr	r0, [r7, #4]
 807deb2:	f000 fa94 	bl	807e3de <USBD_CtlSendStatus>
 807deb6:	e000      	b.n	807deba <USBD_GetDescriptor+0x2f2>
    return;
 807deb8:	bf00      	nop
  }
}
 807deba:	3710      	adds	r7, #16
 807debc:	46bd      	mov	sp, r7
 807debe:	bd80      	pop	{r7, pc}

0807dec0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807dec0:	b580      	push	{r7, lr}
 807dec2:	b084      	sub	sp, #16
 807dec4:	af00      	add	r7, sp, #0
 807dec6:	6078      	str	r0, [r7, #4]
 807dec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 807deca:	683b      	ldr	r3, [r7, #0]
 807decc:	889b      	ldrh	r3, [r3, #4]
 807dece:	2b00      	cmp	r3, #0
 807ded0:	d131      	bne.n	807df36 <USBD_SetAddress+0x76>
 807ded2:	683b      	ldr	r3, [r7, #0]
 807ded4:	88db      	ldrh	r3, [r3, #6]
 807ded6:	2b00      	cmp	r3, #0
 807ded8:	d12d      	bne.n	807df36 <USBD_SetAddress+0x76>
 807deda:	683b      	ldr	r3, [r7, #0]
 807dedc:	885b      	ldrh	r3, [r3, #2]
 807dede:	2b7f      	cmp	r3, #127	; 0x7f
 807dee0:	d829      	bhi.n	807df36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 807dee2:	683b      	ldr	r3, [r7, #0]
 807dee4:	885b      	ldrh	r3, [r3, #2]
 807dee6:	b2db      	uxtb	r3, r3
 807dee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 807deec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807deee:	687b      	ldr	r3, [r7, #4]
 807def0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807def4:	b2db      	uxtb	r3, r3
 807def6:	2b03      	cmp	r3, #3
 807def8:	d104      	bne.n	807df04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 807defa:	6839      	ldr	r1, [r7, #0]
 807defc:	6878      	ldr	r0, [r7, #4]
 807defe:	f000 f9a3 	bl	807e248 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df02:	e01d      	b.n	807df40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 807df04:	687b      	ldr	r3, [r7, #4]
 807df06:	7bfa      	ldrb	r2, [r7, #15]
 807df08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 807df0c:	7bfb      	ldrb	r3, [r7, #15]
 807df0e:	4619      	mov	r1, r3
 807df10:	6878      	ldr	r0, [r7, #4]
 807df12:	f000 ff59 	bl	807edc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 807df16:	6878      	ldr	r0, [r7, #4]
 807df18:	f000 fa61 	bl	807e3de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 807df1c:	7bfb      	ldrb	r3, [r7, #15]
 807df1e:	2b00      	cmp	r3, #0
 807df20:	d004      	beq.n	807df2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 807df22:	687b      	ldr	r3, [r7, #4]
 807df24:	2202      	movs	r2, #2
 807df26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df2a:	e009      	b.n	807df40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 807df2c:	687b      	ldr	r3, [r7, #4]
 807df2e:	2201      	movs	r2, #1
 807df30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df34:	e004      	b.n	807df40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 807df36:	6839      	ldr	r1, [r7, #0]
 807df38:	6878      	ldr	r0, [r7, #4]
 807df3a:	f000 f985 	bl	807e248 <USBD_CtlError>
  }
}
 807df3e:	bf00      	nop
 807df40:	bf00      	nop
 807df42:	3710      	adds	r7, #16
 807df44:	46bd      	mov	sp, r7
 807df46:	bd80      	pop	{r7, pc}

0807df48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807df48:	b580      	push	{r7, lr}
 807df4a:	b084      	sub	sp, #16
 807df4c:	af00      	add	r7, sp, #0
 807df4e:	6078      	str	r0, [r7, #4]
 807df50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807df52:	2300      	movs	r3, #0
 807df54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 807df56:	683b      	ldr	r3, [r7, #0]
 807df58:	885b      	ldrh	r3, [r3, #2]
 807df5a:	b2da      	uxtb	r2, r3
 807df5c:	4b4c      	ldr	r3, [pc, #304]	; (807e090 <USBD_SetConfig+0x148>)
 807df5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 807df60:	4b4b      	ldr	r3, [pc, #300]	; (807e090 <USBD_SetConfig+0x148>)
 807df62:	781b      	ldrb	r3, [r3, #0]
 807df64:	2b01      	cmp	r3, #1
 807df66:	d905      	bls.n	807df74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 807df68:	6839      	ldr	r1, [r7, #0]
 807df6a:	6878      	ldr	r0, [r7, #4]
 807df6c:	f000 f96c 	bl	807e248 <USBD_CtlError>
    return USBD_FAIL;
 807df70:	2303      	movs	r3, #3
 807df72:	e088      	b.n	807e086 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 807df74:	687b      	ldr	r3, [r7, #4]
 807df76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807df7a:	b2db      	uxtb	r3, r3
 807df7c:	2b02      	cmp	r3, #2
 807df7e:	d002      	beq.n	807df86 <USBD_SetConfig+0x3e>
 807df80:	2b03      	cmp	r3, #3
 807df82:	d025      	beq.n	807dfd0 <USBD_SetConfig+0x88>
 807df84:	e071      	b.n	807e06a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 807df86:	4b42      	ldr	r3, [pc, #264]	; (807e090 <USBD_SetConfig+0x148>)
 807df88:	781b      	ldrb	r3, [r3, #0]
 807df8a:	2b00      	cmp	r3, #0
 807df8c:	d01c      	beq.n	807dfc8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 807df8e:	4b40      	ldr	r3, [pc, #256]	; (807e090 <USBD_SetConfig+0x148>)
 807df90:	781b      	ldrb	r3, [r3, #0]
 807df92:	461a      	mov	r2, r3
 807df94:	687b      	ldr	r3, [r7, #4]
 807df96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 807df98:	4b3d      	ldr	r3, [pc, #244]	; (807e090 <USBD_SetConfig+0x148>)
 807df9a:	781b      	ldrb	r3, [r3, #0]
 807df9c:	4619      	mov	r1, r3
 807df9e:	6878      	ldr	r0, [r7, #4]
 807dfa0:	f7ff f937 	bl	807d212 <USBD_SetClassConfig>
 807dfa4:	4603      	mov	r3, r0
 807dfa6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 807dfa8:	7bfb      	ldrb	r3, [r7, #15]
 807dfaa:	2b00      	cmp	r3, #0
 807dfac:	d004      	beq.n	807dfb8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 807dfae:	6839      	ldr	r1, [r7, #0]
 807dfb0:	6878      	ldr	r0, [r7, #4]
 807dfb2:	f000 f949 	bl	807e248 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 807dfb6:	e065      	b.n	807e084 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 807dfb8:	6878      	ldr	r0, [r7, #4]
 807dfba:	f000 fa10 	bl	807e3de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 807dfbe:	687b      	ldr	r3, [r7, #4]
 807dfc0:	2203      	movs	r2, #3
 807dfc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 807dfc6:	e05d      	b.n	807e084 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 807dfc8:	6878      	ldr	r0, [r7, #4]
 807dfca:	f000 fa08 	bl	807e3de <USBD_CtlSendStatus>
      break;
 807dfce:	e059      	b.n	807e084 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 807dfd0:	4b2f      	ldr	r3, [pc, #188]	; (807e090 <USBD_SetConfig+0x148>)
 807dfd2:	781b      	ldrb	r3, [r3, #0]
 807dfd4:	2b00      	cmp	r3, #0
 807dfd6:	d112      	bne.n	807dffe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 807dfd8:	687b      	ldr	r3, [r7, #4]
 807dfda:	2202      	movs	r2, #2
 807dfdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 807dfe0:	4b2b      	ldr	r3, [pc, #172]	; (807e090 <USBD_SetConfig+0x148>)
 807dfe2:	781b      	ldrb	r3, [r3, #0]
 807dfe4:	461a      	mov	r2, r3
 807dfe6:	687b      	ldr	r3, [r7, #4]
 807dfe8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 807dfea:	4b29      	ldr	r3, [pc, #164]	; (807e090 <USBD_SetConfig+0x148>)
 807dfec:	781b      	ldrb	r3, [r3, #0]
 807dfee:	4619      	mov	r1, r3
 807dff0:	6878      	ldr	r0, [r7, #4]
 807dff2:	f7ff f92a 	bl	807d24a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 807dff6:	6878      	ldr	r0, [r7, #4]
 807dff8:	f000 f9f1 	bl	807e3de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 807dffc:	e042      	b.n	807e084 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 807dffe:	4b24      	ldr	r3, [pc, #144]	; (807e090 <USBD_SetConfig+0x148>)
 807e000:	781b      	ldrb	r3, [r3, #0]
 807e002:	461a      	mov	r2, r3
 807e004:	687b      	ldr	r3, [r7, #4]
 807e006:	685b      	ldr	r3, [r3, #4]
 807e008:	429a      	cmp	r2, r3
 807e00a:	d02a      	beq.n	807e062 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 807e00c:	687b      	ldr	r3, [r7, #4]
 807e00e:	685b      	ldr	r3, [r3, #4]
 807e010:	b2db      	uxtb	r3, r3
 807e012:	4619      	mov	r1, r3
 807e014:	6878      	ldr	r0, [r7, #4]
 807e016:	f7ff f918 	bl	807d24a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 807e01a:	4b1d      	ldr	r3, [pc, #116]	; (807e090 <USBD_SetConfig+0x148>)
 807e01c:	781b      	ldrb	r3, [r3, #0]
 807e01e:	461a      	mov	r2, r3
 807e020:	687b      	ldr	r3, [r7, #4]
 807e022:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 807e024:	4b1a      	ldr	r3, [pc, #104]	; (807e090 <USBD_SetConfig+0x148>)
 807e026:	781b      	ldrb	r3, [r3, #0]
 807e028:	4619      	mov	r1, r3
 807e02a:	6878      	ldr	r0, [r7, #4]
 807e02c:	f7ff f8f1 	bl	807d212 <USBD_SetClassConfig>
 807e030:	4603      	mov	r3, r0
 807e032:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 807e034:	7bfb      	ldrb	r3, [r7, #15]
 807e036:	2b00      	cmp	r3, #0
 807e038:	d00f      	beq.n	807e05a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 807e03a:	6839      	ldr	r1, [r7, #0]
 807e03c:	6878      	ldr	r0, [r7, #4]
 807e03e:	f000 f903 	bl	807e248 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 807e042:	687b      	ldr	r3, [r7, #4]
 807e044:	685b      	ldr	r3, [r3, #4]
 807e046:	b2db      	uxtb	r3, r3
 807e048:	4619      	mov	r1, r3
 807e04a:	6878      	ldr	r0, [r7, #4]
 807e04c:	f7ff f8fd 	bl	807d24a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 807e050:	687b      	ldr	r3, [r7, #4]
 807e052:	2202      	movs	r2, #2
 807e054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 807e058:	e014      	b.n	807e084 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 807e05a:	6878      	ldr	r0, [r7, #4]
 807e05c:	f000 f9bf 	bl	807e3de <USBD_CtlSendStatus>
      break;
 807e060:	e010      	b.n	807e084 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 807e062:	6878      	ldr	r0, [r7, #4]
 807e064:	f000 f9bb 	bl	807e3de <USBD_CtlSendStatus>
      break;
 807e068:	e00c      	b.n	807e084 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 807e06a:	6839      	ldr	r1, [r7, #0]
 807e06c:	6878      	ldr	r0, [r7, #4]
 807e06e:	f000 f8eb 	bl	807e248 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 807e072:	4b07      	ldr	r3, [pc, #28]	; (807e090 <USBD_SetConfig+0x148>)
 807e074:	781b      	ldrb	r3, [r3, #0]
 807e076:	4619      	mov	r1, r3
 807e078:	6878      	ldr	r0, [r7, #4]
 807e07a:	f7ff f8e6 	bl	807d24a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 807e07e:	2303      	movs	r3, #3
 807e080:	73fb      	strb	r3, [r7, #15]
      break;
 807e082:	bf00      	nop
  }

  return ret;
 807e084:	7bfb      	ldrb	r3, [r7, #15]
}
 807e086:	4618      	mov	r0, r3
 807e088:	3710      	adds	r7, #16
 807e08a:	46bd      	mov	sp, r7
 807e08c:	bd80      	pop	{r7, pc}
 807e08e:	bf00      	nop
 807e090:	200001f7 	.word	0x200001f7

0807e094 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e094:	b580      	push	{r7, lr}
 807e096:	b082      	sub	sp, #8
 807e098:	af00      	add	r7, sp, #0
 807e09a:	6078      	str	r0, [r7, #4]
 807e09c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 807e09e:	683b      	ldr	r3, [r7, #0]
 807e0a0:	88db      	ldrh	r3, [r3, #6]
 807e0a2:	2b01      	cmp	r3, #1
 807e0a4:	d004      	beq.n	807e0b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 807e0a6:	6839      	ldr	r1, [r7, #0]
 807e0a8:	6878      	ldr	r0, [r7, #4]
 807e0aa:	f000 f8cd 	bl	807e248 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 807e0ae:	e023      	b.n	807e0f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 807e0b0:	687b      	ldr	r3, [r7, #4]
 807e0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807e0b6:	b2db      	uxtb	r3, r3
 807e0b8:	2b02      	cmp	r3, #2
 807e0ba:	dc02      	bgt.n	807e0c2 <USBD_GetConfig+0x2e>
 807e0bc:	2b00      	cmp	r3, #0
 807e0be:	dc03      	bgt.n	807e0c8 <USBD_GetConfig+0x34>
 807e0c0:	e015      	b.n	807e0ee <USBD_GetConfig+0x5a>
 807e0c2:	2b03      	cmp	r3, #3
 807e0c4:	d00b      	beq.n	807e0de <USBD_GetConfig+0x4a>
 807e0c6:	e012      	b.n	807e0ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 807e0c8:	687b      	ldr	r3, [r7, #4]
 807e0ca:	2200      	movs	r2, #0
 807e0cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 807e0ce:	687b      	ldr	r3, [r7, #4]
 807e0d0:	3308      	adds	r3, #8
 807e0d2:	2201      	movs	r2, #1
 807e0d4:	4619      	mov	r1, r3
 807e0d6:	6878      	ldr	r0, [r7, #4]
 807e0d8:	f000 f927 	bl	807e32a <USBD_CtlSendData>
        break;
 807e0dc:	e00c      	b.n	807e0f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 807e0de:	687b      	ldr	r3, [r7, #4]
 807e0e0:	3304      	adds	r3, #4
 807e0e2:	2201      	movs	r2, #1
 807e0e4:	4619      	mov	r1, r3
 807e0e6:	6878      	ldr	r0, [r7, #4]
 807e0e8:	f000 f91f 	bl	807e32a <USBD_CtlSendData>
        break;
 807e0ec:	e004      	b.n	807e0f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 807e0ee:	6839      	ldr	r1, [r7, #0]
 807e0f0:	6878      	ldr	r0, [r7, #4]
 807e0f2:	f000 f8a9 	bl	807e248 <USBD_CtlError>
        break;
 807e0f6:	bf00      	nop
}
 807e0f8:	bf00      	nop
 807e0fa:	3708      	adds	r7, #8
 807e0fc:	46bd      	mov	sp, r7
 807e0fe:	bd80      	pop	{r7, pc}

0807e100 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e100:	b580      	push	{r7, lr}
 807e102:	b082      	sub	sp, #8
 807e104:	af00      	add	r7, sp, #0
 807e106:	6078      	str	r0, [r7, #4]
 807e108:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 807e10a:	687b      	ldr	r3, [r7, #4]
 807e10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807e110:	b2db      	uxtb	r3, r3
 807e112:	3b01      	subs	r3, #1
 807e114:	2b02      	cmp	r3, #2
 807e116:	d81e      	bhi.n	807e156 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 807e118:	683b      	ldr	r3, [r7, #0]
 807e11a:	88db      	ldrh	r3, [r3, #6]
 807e11c:	2b02      	cmp	r3, #2
 807e11e:	d004      	beq.n	807e12a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 807e120:	6839      	ldr	r1, [r7, #0]
 807e122:	6878      	ldr	r0, [r7, #4]
 807e124:	f000 f890 	bl	807e248 <USBD_CtlError>
        break;
 807e128:	e01a      	b.n	807e160 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 807e12a:	687b      	ldr	r3, [r7, #4]
 807e12c:	2201      	movs	r2, #1
 807e12e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 807e130:	687b      	ldr	r3, [r7, #4]
 807e132:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 807e136:	2b00      	cmp	r3, #0
 807e138:	d005      	beq.n	807e146 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 807e13a:	687b      	ldr	r3, [r7, #4]
 807e13c:	68db      	ldr	r3, [r3, #12]
 807e13e:	f043 0202 	orr.w	r2, r3, #2
 807e142:	687b      	ldr	r3, [r7, #4]
 807e144:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 807e146:	687b      	ldr	r3, [r7, #4]
 807e148:	330c      	adds	r3, #12
 807e14a:	2202      	movs	r2, #2
 807e14c:	4619      	mov	r1, r3
 807e14e:	6878      	ldr	r0, [r7, #4]
 807e150:	f000 f8eb 	bl	807e32a <USBD_CtlSendData>
      break;
 807e154:	e004      	b.n	807e160 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 807e156:	6839      	ldr	r1, [r7, #0]
 807e158:	6878      	ldr	r0, [r7, #4]
 807e15a:	f000 f875 	bl	807e248 <USBD_CtlError>
      break;
 807e15e:	bf00      	nop
  }
}
 807e160:	bf00      	nop
 807e162:	3708      	adds	r7, #8
 807e164:	46bd      	mov	sp, r7
 807e166:	bd80      	pop	{r7, pc}

0807e168 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e168:	b580      	push	{r7, lr}
 807e16a:	b082      	sub	sp, #8
 807e16c:	af00      	add	r7, sp, #0
 807e16e:	6078      	str	r0, [r7, #4]
 807e170:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 807e172:	683b      	ldr	r3, [r7, #0]
 807e174:	885b      	ldrh	r3, [r3, #2]
 807e176:	2b01      	cmp	r3, #1
 807e178:	d106      	bne.n	807e188 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 807e17a:	687b      	ldr	r3, [r7, #4]
 807e17c:	2201      	movs	r2, #1
 807e17e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 807e182:	6878      	ldr	r0, [r7, #4]
 807e184:	f000 f92b 	bl	807e3de <USBD_CtlSendStatus>
  }
}
 807e188:	bf00      	nop
 807e18a:	3708      	adds	r7, #8
 807e18c:	46bd      	mov	sp, r7
 807e18e:	bd80      	pop	{r7, pc}

0807e190 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e190:	b580      	push	{r7, lr}
 807e192:	b082      	sub	sp, #8
 807e194:	af00      	add	r7, sp, #0
 807e196:	6078      	str	r0, [r7, #4]
 807e198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 807e19a:	687b      	ldr	r3, [r7, #4]
 807e19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807e1a0:	b2db      	uxtb	r3, r3
 807e1a2:	3b01      	subs	r3, #1
 807e1a4:	2b02      	cmp	r3, #2
 807e1a6:	d80b      	bhi.n	807e1c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 807e1a8:	683b      	ldr	r3, [r7, #0]
 807e1aa:	885b      	ldrh	r3, [r3, #2]
 807e1ac:	2b01      	cmp	r3, #1
 807e1ae:	d10c      	bne.n	807e1ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 807e1b0:	687b      	ldr	r3, [r7, #4]
 807e1b2:	2200      	movs	r2, #0
 807e1b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 807e1b8:	6878      	ldr	r0, [r7, #4]
 807e1ba:	f000 f910 	bl	807e3de <USBD_CtlSendStatus>
      }
      break;
 807e1be:	e004      	b.n	807e1ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 807e1c0:	6839      	ldr	r1, [r7, #0]
 807e1c2:	6878      	ldr	r0, [r7, #4]
 807e1c4:	f000 f840 	bl	807e248 <USBD_CtlError>
      break;
 807e1c8:	e000      	b.n	807e1cc <USBD_ClrFeature+0x3c>
      break;
 807e1ca:	bf00      	nop
  }
}
 807e1cc:	bf00      	nop
 807e1ce:	3708      	adds	r7, #8
 807e1d0:	46bd      	mov	sp, r7
 807e1d2:	bd80      	pop	{r7, pc}

0807e1d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 807e1d4:	b580      	push	{r7, lr}
 807e1d6:	b084      	sub	sp, #16
 807e1d8:	af00      	add	r7, sp, #0
 807e1da:	6078      	str	r0, [r7, #4]
 807e1dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 807e1de:	683b      	ldr	r3, [r7, #0]
 807e1e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 807e1e2:	68fb      	ldr	r3, [r7, #12]
 807e1e4:	781a      	ldrb	r2, [r3, #0]
 807e1e6:	687b      	ldr	r3, [r7, #4]
 807e1e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 807e1ea:	68fb      	ldr	r3, [r7, #12]
 807e1ec:	3301      	adds	r3, #1
 807e1ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 807e1f0:	68fb      	ldr	r3, [r7, #12]
 807e1f2:	781a      	ldrb	r2, [r3, #0]
 807e1f4:	687b      	ldr	r3, [r7, #4]
 807e1f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 807e1f8:	68fb      	ldr	r3, [r7, #12]
 807e1fa:	3301      	adds	r3, #1
 807e1fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 807e1fe:	68f8      	ldr	r0, [r7, #12]
 807e200:	f7ff faaa 	bl	807d758 <SWAPBYTE>
 807e204:	4603      	mov	r3, r0
 807e206:	461a      	mov	r2, r3
 807e208:	687b      	ldr	r3, [r7, #4]
 807e20a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 807e20c:	68fb      	ldr	r3, [r7, #12]
 807e20e:	3301      	adds	r3, #1
 807e210:	60fb      	str	r3, [r7, #12]
  pbuff++;
 807e212:	68fb      	ldr	r3, [r7, #12]
 807e214:	3301      	adds	r3, #1
 807e216:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 807e218:	68f8      	ldr	r0, [r7, #12]
 807e21a:	f7ff fa9d 	bl	807d758 <SWAPBYTE>
 807e21e:	4603      	mov	r3, r0
 807e220:	461a      	mov	r2, r3
 807e222:	687b      	ldr	r3, [r7, #4]
 807e224:	809a      	strh	r2, [r3, #4]

  pbuff++;
 807e226:	68fb      	ldr	r3, [r7, #12]
 807e228:	3301      	adds	r3, #1
 807e22a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 807e22c:	68fb      	ldr	r3, [r7, #12]
 807e22e:	3301      	adds	r3, #1
 807e230:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 807e232:	68f8      	ldr	r0, [r7, #12]
 807e234:	f7ff fa90 	bl	807d758 <SWAPBYTE>
 807e238:	4603      	mov	r3, r0
 807e23a:	461a      	mov	r2, r3
 807e23c:	687b      	ldr	r3, [r7, #4]
 807e23e:	80da      	strh	r2, [r3, #6]
}
 807e240:	bf00      	nop
 807e242:	3710      	adds	r7, #16
 807e244:	46bd      	mov	sp, r7
 807e246:	bd80      	pop	{r7, pc}

0807e248 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e248:	b580      	push	{r7, lr}
 807e24a:	b082      	sub	sp, #8
 807e24c:	af00      	add	r7, sp, #0
 807e24e:	6078      	str	r0, [r7, #4]
 807e250:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 807e252:	2180      	movs	r1, #128	; 0x80
 807e254:	6878      	ldr	r0, [r7, #4]
 807e256:	f000 fd4d 	bl	807ecf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 807e25a:	2100      	movs	r1, #0
 807e25c:	6878      	ldr	r0, [r7, #4]
 807e25e:	f000 fd49 	bl	807ecf4 <USBD_LL_StallEP>
}
 807e262:	bf00      	nop
 807e264:	3708      	adds	r7, #8
 807e266:	46bd      	mov	sp, r7
 807e268:	bd80      	pop	{r7, pc}

0807e26a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 807e26a:	b580      	push	{r7, lr}
 807e26c:	b086      	sub	sp, #24
 807e26e:	af00      	add	r7, sp, #0
 807e270:	60f8      	str	r0, [r7, #12]
 807e272:	60b9      	str	r1, [r7, #8]
 807e274:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 807e276:	2300      	movs	r3, #0
 807e278:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 807e27a:	68fb      	ldr	r3, [r7, #12]
 807e27c:	2b00      	cmp	r3, #0
 807e27e:	d036      	beq.n	807e2ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 807e280:	68fb      	ldr	r3, [r7, #12]
 807e282:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 807e284:	6938      	ldr	r0, [r7, #16]
 807e286:	f000 f836 	bl	807e2f6 <USBD_GetLen>
 807e28a:	4603      	mov	r3, r0
 807e28c:	3301      	adds	r3, #1
 807e28e:	b29b      	uxth	r3, r3
 807e290:	005b      	lsls	r3, r3, #1
 807e292:	b29a      	uxth	r2, r3
 807e294:	687b      	ldr	r3, [r7, #4]
 807e296:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 807e298:	7dfb      	ldrb	r3, [r7, #23]
 807e29a:	68ba      	ldr	r2, [r7, #8]
 807e29c:	4413      	add	r3, r2
 807e29e:	687a      	ldr	r2, [r7, #4]
 807e2a0:	7812      	ldrb	r2, [r2, #0]
 807e2a2:	701a      	strb	r2, [r3, #0]
  idx++;
 807e2a4:	7dfb      	ldrb	r3, [r7, #23]
 807e2a6:	3301      	adds	r3, #1
 807e2a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 807e2aa:	7dfb      	ldrb	r3, [r7, #23]
 807e2ac:	68ba      	ldr	r2, [r7, #8]
 807e2ae:	4413      	add	r3, r2
 807e2b0:	2203      	movs	r2, #3
 807e2b2:	701a      	strb	r2, [r3, #0]
  idx++;
 807e2b4:	7dfb      	ldrb	r3, [r7, #23]
 807e2b6:	3301      	adds	r3, #1
 807e2b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 807e2ba:	e013      	b.n	807e2e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 807e2bc:	7dfb      	ldrb	r3, [r7, #23]
 807e2be:	68ba      	ldr	r2, [r7, #8]
 807e2c0:	4413      	add	r3, r2
 807e2c2:	693a      	ldr	r2, [r7, #16]
 807e2c4:	7812      	ldrb	r2, [r2, #0]
 807e2c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 807e2c8:	693b      	ldr	r3, [r7, #16]
 807e2ca:	3301      	adds	r3, #1
 807e2cc:	613b      	str	r3, [r7, #16]
    idx++;
 807e2ce:	7dfb      	ldrb	r3, [r7, #23]
 807e2d0:	3301      	adds	r3, #1
 807e2d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 807e2d4:	7dfb      	ldrb	r3, [r7, #23]
 807e2d6:	68ba      	ldr	r2, [r7, #8]
 807e2d8:	4413      	add	r3, r2
 807e2da:	2200      	movs	r2, #0
 807e2dc:	701a      	strb	r2, [r3, #0]
    idx++;
 807e2de:	7dfb      	ldrb	r3, [r7, #23]
 807e2e0:	3301      	adds	r3, #1
 807e2e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 807e2e4:	693b      	ldr	r3, [r7, #16]
 807e2e6:	781b      	ldrb	r3, [r3, #0]
 807e2e8:	2b00      	cmp	r3, #0
 807e2ea:	d1e7      	bne.n	807e2bc <USBD_GetString+0x52>
 807e2ec:	e000      	b.n	807e2f0 <USBD_GetString+0x86>
    return;
 807e2ee:	bf00      	nop
  }
}
 807e2f0:	3718      	adds	r7, #24
 807e2f2:	46bd      	mov	sp, r7
 807e2f4:	bd80      	pop	{r7, pc}

0807e2f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 807e2f6:	b480      	push	{r7}
 807e2f8:	b085      	sub	sp, #20
 807e2fa:	af00      	add	r7, sp, #0
 807e2fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 807e2fe:	2300      	movs	r3, #0
 807e300:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 807e302:	687b      	ldr	r3, [r7, #4]
 807e304:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 807e306:	e005      	b.n	807e314 <USBD_GetLen+0x1e>
  {
    len++;
 807e308:	7bfb      	ldrb	r3, [r7, #15]
 807e30a:	3301      	adds	r3, #1
 807e30c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 807e30e:	68bb      	ldr	r3, [r7, #8]
 807e310:	3301      	adds	r3, #1
 807e312:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 807e314:	68bb      	ldr	r3, [r7, #8]
 807e316:	781b      	ldrb	r3, [r3, #0]
 807e318:	2b00      	cmp	r3, #0
 807e31a:	d1f5      	bne.n	807e308 <USBD_GetLen+0x12>
  }

  return len;
 807e31c:	7bfb      	ldrb	r3, [r7, #15]
}
 807e31e:	4618      	mov	r0, r3
 807e320:	3714      	adds	r7, #20
 807e322:	46bd      	mov	sp, r7
 807e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e328:	4770      	bx	lr

0807e32a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 807e32a:	b580      	push	{r7, lr}
 807e32c:	b084      	sub	sp, #16
 807e32e:	af00      	add	r7, sp, #0
 807e330:	60f8      	str	r0, [r7, #12]
 807e332:	60b9      	str	r1, [r7, #8]
 807e334:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 807e336:	68fb      	ldr	r3, [r7, #12]
 807e338:	2202      	movs	r2, #2
 807e33a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 807e33e:	68fb      	ldr	r3, [r7, #12]
 807e340:	687a      	ldr	r2, [r7, #4]
 807e342:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 807e344:	68fb      	ldr	r3, [r7, #12]
 807e346:	687a      	ldr	r2, [r7, #4]
 807e348:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 807e34a:	687b      	ldr	r3, [r7, #4]
 807e34c:	68ba      	ldr	r2, [r7, #8]
 807e34e:	2100      	movs	r1, #0
 807e350:	68f8      	ldr	r0, [r7, #12]
 807e352:	f000 fd58 	bl	807ee06 <USBD_LL_Transmit>

  return USBD_OK;
 807e356:	2300      	movs	r3, #0
}
 807e358:	4618      	mov	r0, r3
 807e35a:	3710      	adds	r7, #16
 807e35c:	46bd      	mov	sp, r7
 807e35e:	bd80      	pop	{r7, pc}

0807e360 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 807e360:	b580      	push	{r7, lr}
 807e362:	b084      	sub	sp, #16
 807e364:	af00      	add	r7, sp, #0
 807e366:	60f8      	str	r0, [r7, #12]
 807e368:	60b9      	str	r1, [r7, #8]
 807e36a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 807e36c:	687b      	ldr	r3, [r7, #4]
 807e36e:	68ba      	ldr	r2, [r7, #8]
 807e370:	2100      	movs	r1, #0
 807e372:	68f8      	ldr	r0, [r7, #12]
 807e374:	f000 fd47 	bl	807ee06 <USBD_LL_Transmit>

  return USBD_OK;
 807e378:	2300      	movs	r3, #0
}
 807e37a:	4618      	mov	r0, r3
 807e37c:	3710      	adds	r7, #16
 807e37e:	46bd      	mov	sp, r7
 807e380:	bd80      	pop	{r7, pc}

0807e382 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 807e382:	b580      	push	{r7, lr}
 807e384:	b084      	sub	sp, #16
 807e386:	af00      	add	r7, sp, #0
 807e388:	60f8      	str	r0, [r7, #12]
 807e38a:	60b9      	str	r1, [r7, #8]
 807e38c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 807e38e:	68fb      	ldr	r3, [r7, #12]
 807e390:	2203      	movs	r2, #3
 807e392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 807e396:	68fb      	ldr	r3, [r7, #12]
 807e398:	687a      	ldr	r2, [r7, #4]
 807e39a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 807e39e:	68fb      	ldr	r3, [r7, #12]
 807e3a0:	687a      	ldr	r2, [r7, #4]
 807e3a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 807e3a6:	687b      	ldr	r3, [r7, #4]
 807e3a8:	68ba      	ldr	r2, [r7, #8]
 807e3aa:	2100      	movs	r1, #0
 807e3ac:	68f8      	ldr	r0, [r7, #12]
 807e3ae:	f000 fd4b 	bl	807ee48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e3b2:	2300      	movs	r3, #0
}
 807e3b4:	4618      	mov	r0, r3
 807e3b6:	3710      	adds	r7, #16
 807e3b8:	46bd      	mov	sp, r7
 807e3ba:	bd80      	pop	{r7, pc}

0807e3bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 807e3bc:	b580      	push	{r7, lr}
 807e3be:	b084      	sub	sp, #16
 807e3c0:	af00      	add	r7, sp, #0
 807e3c2:	60f8      	str	r0, [r7, #12]
 807e3c4:	60b9      	str	r1, [r7, #8]
 807e3c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 807e3c8:	687b      	ldr	r3, [r7, #4]
 807e3ca:	68ba      	ldr	r2, [r7, #8]
 807e3cc:	2100      	movs	r1, #0
 807e3ce:	68f8      	ldr	r0, [r7, #12]
 807e3d0:	f000 fd3a 	bl	807ee48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e3d4:	2300      	movs	r3, #0
}
 807e3d6:	4618      	mov	r0, r3
 807e3d8:	3710      	adds	r7, #16
 807e3da:	46bd      	mov	sp, r7
 807e3dc:	bd80      	pop	{r7, pc}

0807e3de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 807e3de:	b580      	push	{r7, lr}
 807e3e0:	b082      	sub	sp, #8
 807e3e2:	af00      	add	r7, sp, #0
 807e3e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 807e3e6:	687b      	ldr	r3, [r7, #4]
 807e3e8:	2204      	movs	r2, #4
 807e3ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 807e3ee:	2300      	movs	r3, #0
 807e3f0:	2200      	movs	r2, #0
 807e3f2:	2100      	movs	r1, #0
 807e3f4:	6878      	ldr	r0, [r7, #4]
 807e3f6:	f000 fd06 	bl	807ee06 <USBD_LL_Transmit>

  return USBD_OK;
 807e3fa:	2300      	movs	r3, #0
}
 807e3fc:	4618      	mov	r0, r3
 807e3fe:	3708      	adds	r7, #8
 807e400:	46bd      	mov	sp, r7
 807e402:	bd80      	pop	{r7, pc}

0807e404 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 807e404:	b580      	push	{r7, lr}
 807e406:	b082      	sub	sp, #8
 807e408:	af00      	add	r7, sp, #0
 807e40a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 807e40c:	687b      	ldr	r3, [r7, #4]
 807e40e:	2205      	movs	r2, #5
 807e410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807e414:	2300      	movs	r3, #0
 807e416:	2200      	movs	r2, #0
 807e418:	2100      	movs	r1, #0
 807e41a:	6878      	ldr	r0, [r7, #4]
 807e41c:	f000 fd14 	bl	807ee48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e420:	2300      	movs	r3, #0
}
 807e422:	4618      	mov	r0, r3
 807e424:	3708      	adds	r7, #8
 807e426:	46bd      	mov	sp, r7
 807e428:	bd80      	pop	{r7, pc}

0807e42a <dfu_test>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void dfu_test(void)
{
 807e42a:	b480      	push	{r7}
 807e42c:	af00      	add	r7, sp, #0

}
 807e42e:	bf00      	nop
 807e430:	46bd      	mov	sp, r7
 807e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e436:	4770      	bx	lr

0807e438 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 807e438:	b580      	push	{r7, lr}
 807e43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 807e43c:	2200      	movs	r2, #0
 807e43e:	4912      	ldr	r1, [pc, #72]	; (807e488 <MX_USB_DEVICE_Init+0x50>)
 807e440:	4812      	ldr	r0, [pc, #72]	; (807e48c <MX_USB_DEVICE_Init+0x54>)
 807e442:	f7fe fe5d 	bl	807d100 <USBD_Init>
 807e446:	4603      	mov	r3, r0
 807e448:	2b00      	cmp	r3, #0
 807e44a:	d001      	beq.n	807e450 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 807e44c:	f7fa f92e 	bl	80786ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 807e450:	490f      	ldr	r1, [pc, #60]	; (807e490 <MX_USB_DEVICE_Init+0x58>)
 807e452:	480e      	ldr	r0, [pc, #56]	; (807e48c <MX_USB_DEVICE_Init+0x54>)
 807e454:	f7fe fe84 	bl	807d160 <USBD_RegisterClass>
 807e458:	4603      	mov	r3, r0
 807e45a:	2b00      	cmp	r3, #0
 807e45c:	d001      	beq.n	807e462 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 807e45e:	f7fa f925 	bl	80786ac <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 807e462:	490c      	ldr	r1, [pc, #48]	; (807e494 <MX_USB_DEVICE_Init+0x5c>)
 807e464:	4809      	ldr	r0, [pc, #36]	; (807e48c <MX_USB_DEVICE_Init+0x54>)
 807e466:	f7fe fac9 	bl	807c9fc <USBD_DFU_RegisterMedia>
 807e46a:	4603      	mov	r3, r0
 807e46c:	2b00      	cmp	r3, #0
 807e46e:	d001      	beq.n	807e474 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 807e470:	f7fa f91c 	bl	80786ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 807e474:	4805      	ldr	r0, [pc, #20]	; (807e48c <MX_USB_DEVICE_Init+0x54>)
 807e476:	f7fe fe9a 	bl	807d1ae <USBD_Start>
 807e47a:	4603      	mov	r3, r0
 807e47c:	2b00      	cmp	r3, #0
 807e47e:	d001      	beq.n	807e484 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 807e480:	f7fa f914 	bl	80786ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 807e484:	bf00      	nop
 807e486:	bd80      	pop	{r7, pc}
 807e488:	20000070 	.word	0x20000070
 807e48c:	2000063c 	.word	0x2000063c
 807e490:	2000000c 	.word	0x2000000c
 807e494:	200000c0 	.word	0x200000c0

0807e498 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e498:	b480      	push	{r7}
 807e49a:	b083      	sub	sp, #12
 807e49c:	af00      	add	r7, sp, #0
 807e49e:	4603      	mov	r3, r0
 807e4a0:	6039      	str	r1, [r7, #0]
 807e4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 807e4a4:	683b      	ldr	r3, [r7, #0]
 807e4a6:	2212      	movs	r2, #18
 807e4a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 807e4aa:	4b03      	ldr	r3, [pc, #12]	; (807e4b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 807e4ac:	4618      	mov	r0, r3
 807e4ae:	370c      	adds	r7, #12
 807e4b0:	46bd      	mov	sp, r7
 807e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e4b6:	4770      	bx	lr
 807e4b8:	2000008c 	.word	0x2000008c

0807e4bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e4bc:	b480      	push	{r7}
 807e4be:	b083      	sub	sp, #12
 807e4c0:	af00      	add	r7, sp, #0
 807e4c2:	4603      	mov	r3, r0
 807e4c4:	6039      	str	r1, [r7, #0]
 807e4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 807e4c8:	683b      	ldr	r3, [r7, #0]
 807e4ca:	2204      	movs	r2, #4
 807e4cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 807e4ce:	4b03      	ldr	r3, [pc, #12]	; (807e4dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 807e4d0:	4618      	mov	r0, r3
 807e4d2:	370c      	adds	r7, #12
 807e4d4:	46bd      	mov	sp, r7
 807e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e4da:	4770      	bx	lr
 807e4dc:	200000a0 	.word	0x200000a0

0807e4e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e4e0:	b580      	push	{r7, lr}
 807e4e2:	b082      	sub	sp, #8
 807e4e4:	af00      	add	r7, sp, #0
 807e4e6:	4603      	mov	r3, r0
 807e4e8:	6039      	str	r1, [r7, #0]
 807e4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 807e4ec:	79fb      	ldrb	r3, [r7, #7]
 807e4ee:	2b00      	cmp	r3, #0
 807e4f0:	d105      	bne.n	807e4fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 807e4f2:	683a      	ldr	r2, [r7, #0]
 807e4f4:	4907      	ldr	r1, [pc, #28]	; (807e514 <USBD_FS_ProductStrDescriptor+0x34>)
 807e4f6:	4808      	ldr	r0, [pc, #32]	; (807e518 <USBD_FS_ProductStrDescriptor+0x38>)
 807e4f8:	f7ff feb7 	bl	807e26a <USBD_GetString>
 807e4fc:	e004      	b.n	807e508 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 807e4fe:	683a      	ldr	r2, [r7, #0]
 807e500:	4904      	ldr	r1, [pc, #16]	; (807e514 <USBD_FS_ProductStrDescriptor+0x34>)
 807e502:	4805      	ldr	r0, [pc, #20]	; (807e518 <USBD_FS_ProductStrDescriptor+0x38>)
 807e504:	f7ff feb1 	bl	807e26a <USBD_GetString>
  }
  return USBD_StrDesc;
 807e508:	4b02      	ldr	r3, [pc, #8]	; (807e514 <USBD_FS_ProductStrDescriptor+0x34>)
}
 807e50a:	4618      	mov	r0, r3
 807e50c:	3708      	adds	r7, #8
 807e50e:	46bd      	mov	sp, r7
 807e510:	bd80      	pop	{r7, pc}
 807e512:	bf00      	nop
 807e514:	2000090c 	.word	0x2000090c
 807e518:	0807ef84 	.word	0x0807ef84

0807e51c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e51c:	b580      	push	{r7, lr}
 807e51e:	b082      	sub	sp, #8
 807e520:	af00      	add	r7, sp, #0
 807e522:	4603      	mov	r3, r0
 807e524:	6039      	str	r1, [r7, #0]
 807e526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 807e528:	683a      	ldr	r2, [r7, #0]
 807e52a:	4904      	ldr	r1, [pc, #16]	; (807e53c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 807e52c:	4804      	ldr	r0, [pc, #16]	; (807e540 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 807e52e:	f7ff fe9c 	bl	807e26a <USBD_GetString>
  return USBD_StrDesc;
 807e532:	4b02      	ldr	r3, [pc, #8]	; (807e53c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 807e534:	4618      	mov	r0, r3
 807e536:	3708      	adds	r7, #8
 807e538:	46bd      	mov	sp, r7
 807e53a:	bd80      	pop	{r7, pc}
 807e53c:	2000090c 	.word	0x2000090c
 807e540:	0807ef94 	.word	0x0807ef94

0807e544 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e544:	b580      	push	{r7, lr}
 807e546:	b082      	sub	sp, #8
 807e548:	af00      	add	r7, sp, #0
 807e54a:	4603      	mov	r3, r0
 807e54c:	6039      	str	r1, [r7, #0]
 807e54e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 807e550:	683b      	ldr	r3, [r7, #0]
 807e552:	221a      	movs	r2, #26
 807e554:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 807e556:	f000 f843 	bl	807e5e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 807e55a:	4b02      	ldr	r3, [pc, #8]	; (807e564 <USBD_FS_SerialStrDescriptor+0x20>)
}
 807e55c:	4618      	mov	r0, r3
 807e55e:	3708      	adds	r7, #8
 807e560:	46bd      	mov	sp, r7
 807e562:	bd80      	pop	{r7, pc}
 807e564:	200000a4 	.word	0x200000a4

0807e568 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e568:	b580      	push	{r7, lr}
 807e56a:	b082      	sub	sp, #8
 807e56c:	af00      	add	r7, sp, #0
 807e56e:	4603      	mov	r3, r0
 807e570:	6039      	str	r1, [r7, #0]
 807e572:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 807e574:	79fb      	ldrb	r3, [r7, #7]
 807e576:	2b00      	cmp	r3, #0
 807e578:	d105      	bne.n	807e586 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 807e57a:	683a      	ldr	r2, [r7, #0]
 807e57c:	4907      	ldr	r1, [pc, #28]	; (807e59c <USBD_FS_ConfigStrDescriptor+0x34>)
 807e57e:	4808      	ldr	r0, [pc, #32]	; (807e5a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 807e580:	f7ff fe73 	bl	807e26a <USBD_GetString>
 807e584:	e004      	b.n	807e590 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 807e586:	683a      	ldr	r2, [r7, #0]
 807e588:	4904      	ldr	r1, [pc, #16]	; (807e59c <USBD_FS_ConfigStrDescriptor+0x34>)
 807e58a:	4805      	ldr	r0, [pc, #20]	; (807e5a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 807e58c:	f7ff fe6d 	bl	807e26a <USBD_GetString>
  }
  return USBD_StrDesc;
 807e590:	4b02      	ldr	r3, [pc, #8]	; (807e59c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 807e592:	4618      	mov	r0, r3
 807e594:	3708      	adds	r7, #8
 807e596:	46bd      	mov	sp, r7
 807e598:	bd80      	pop	{r7, pc}
 807e59a:	bf00      	nop
 807e59c:	2000090c 	.word	0x2000090c
 807e5a0:	0807ef9c 	.word	0x0807ef9c

0807e5a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e5a4:	b580      	push	{r7, lr}
 807e5a6:	b082      	sub	sp, #8
 807e5a8:	af00      	add	r7, sp, #0
 807e5aa:	4603      	mov	r3, r0
 807e5ac:	6039      	str	r1, [r7, #0]
 807e5ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 807e5b0:	79fb      	ldrb	r3, [r7, #7]
 807e5b2:	2b00      	cmp	r3, #0
 807e5b4:	d105      	bne.n	807e5c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 807e5b6:	683a      	ldr	r2, [r7, #0]
 807e5b8:	4907      	ldr	r1, [pc, #28]	; (807e5d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 807e5ba:	4808      	ldr	r0, [pc, #32]	; (807e5dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 807e5bc:	f7ff fe55 	bl	807e26a <USBD_GetString>
 807e5c0:	e004      	b.n	807e5cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 807e5c2:	683a      	ldr	r2, [r7, #0]
 807e5c4:	4904      	ldr	r1, [pc, #16]	; (807e5d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 807e5c6:	4805      	ldr	r0, [pc, #20]	; (807e5dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 807e5c8:	f7ff fe4f 	bl	807e26a <USBD_GetString>
  }
  return USBD_StrDesc;
 807e5cc:	4b02      	ldr	r3, [pc, #8]	; (807e5d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 807e5ce:	4618      	mov	r0, r3
 807e5d0:	3708      	adds	r7, #8
 807e5d2:	46bd      	mov	sp, r7
 807e5d4:	bd80      	pop	{r7, pc}
 807e5d6:	bf00      	nop
 807e5d8:	2000090c 	.word	0x2000090c
 807e5dc:	0807efa8 	.word	0x0807efa8

0807e5e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 807e5e0:	b580      	push	{r7, lr}
 807e5e2:	b084      	sub	sp, #16
 807e5e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 807e5e6:	4b0f      	ldr	r3, [pc, #60]	; (807e624 <Get_SerialNum+0x44>)
 807e5e8:	681b      	ldr	r3, [r3, #0]
 807e5ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 807e5ec:	4b0e      	ldr	r3, [pc, #56]	; (807e628 <Get_SerialNum+0x48>)
 807e5ee:	681b      	ldr	r3, [r3, #0]
 807e5f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 807e5f2:	4b0e      	ldr	r3, [pc, #56]	; (807e62c <Get_SerialNum+0x4c>)
 807e5f4:	681b      	ldr	r3, [r3, #0]
 807e5f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 807e5f8:	68fa      	ldr	r2, [r7, #12]
 807e5fa:	687b      	ldr	r3, [r7, #4]
 807e5fc:	4413      	add	r3, r2
 807e5fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 807e600:	68fb      	ldr	r3, [r7, #12]
 807e602:	2b00      	cmp	r3, #0
 807e604:	d009      	beq.n	807e61a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 807e606:	2208      	movs	r2, #8
 807e608:	4909      	ldr	r1, [pc, #36]	; (807e630 <Get_SerialNum+0x50>)
 807e60a:	68f8      	ldr	r0, [r7, #12]
 807e60c:	f000 f814 	bl	807e638 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 807e610:	2204      	movs	r2, #4
 807e612:	4908      	ldr	r1, [pc, #32]	; (807e634 <Get_SerialNum+0x54>)
 807e614:	68b8      	ldr	r0, [r7, #8]
 807e616:	f000 f80f 	bl	807e638 <IntToUnicode>
  }
}
 807e61a:	bf00      	nop
 807e61c:	3710      	adds	r7, #16
 807e61e:	46bd      	mov	sp, r7
 807e620:	bd80      	pop	{r7, pc}
 807e622:	bf00      	nop
 807e624:	1fff7a10 	.word	0x1fff7a10
 807e628:	1fff7a14 	.word	0x1fff7a14
 807e62c:	1fff7a18 	.word	0x1fff7a18
 807e630:	200000a6 	.word	0x200000a6
 807e634:	200000b6 	.word	0x200000b6

0807e638 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 807e638:	b480      	push	{r7}
 807e63a:	b087      	sub	sp, #28
 807e63c:	af00      	add	r7, sp, #0
 807e63e:	60f8      	str	r0, [r7, #12]
 807e640:	60b9      	str	r1, [r7, #8]
 807e642:	4613      	mov	r3, r2
 807e644:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 807e646:	2300      	movs	r3, #0
 807e648:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 807e64a:	2300      	movs	r3, #0
 807e64c:	75fb      	strb	r3, [r7, #23]
 807e64e:	e027      	b.n	807e6a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 807e650:	68fb      	ldr	r3, [r7, #12]
 807e652:	0f1b      	lsrs	r3, r3, #28
 807e654:	2b09      	cmp	r3, #9
 807e656:	d80b      	bhi.n	807e670 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 807e658:	68fb      	ldr	r3, [r7, #12]
 807e65a:	0f1b      	lsrs	r3, r3, #28
 807e65c:	b2da      	uxtb	r2, r3
 807e65e:	7dfb      	ldrb	r3, [r7, #23]
 807e660:	005b      	lsls	r3, r3, #1
 807e662:	4619      	mov	r1, r3
 807e664:	68bb      	ldr	r3, [r7, #8]
 807e666:	440b      	add	r3, r1
 807e668:	3230      	adds	r2, #48	; 0x30
 807e66a:	b2d2      	uxtb	r2, r2
 807e66c:	701a      	strb	r2, [r3, #0]
 807e66e:	e00a      	b.n	807e686 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 807e670:	68fb      	ldr	r3, [r7, #12]
 807e672:	0f1b      	lsrs	r3, r3, #28
 807e674:	b2da      	uxtb	r2, r3
 807e676:	7dfb      	ldrb	r3, [r7, #23]
 807e678:	005b      	lsls	r3, r3, #1
 807e67a:	4619      	mov	r1, r3
 807e67c:	68bb      	ldr	r3, [r7, #8]
 807e67e:	440b      	add	r3, r1
 807e680:	3237      	adds	r2, #55	; 0x37
 807e682:	b2d2      	uxtb	r2, r2
 807e684:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 807e686:	68fb      	ldr	r3, [r7, #12]
 807e688:	011b      	lsls	r3, r3, #4
 807e68a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 807e68c:	7dfb      	ldrb	r3, [r7, #23]
 807e68e:	005b      	lsls	r3, r3, #1
 807e690:	3301      	adds	r3, #1
 807e692:	68ba      	ldr	r2, [r7, #8]
 807e694:	4413      	add	r3, r2
 807e696:	2200      	movs	r2, #0
 807e698:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 807e69a:	7dfb      	ldrb	r3, [r7, #23]
 807e69c:	3301      	adds	r3, #1
 807e69e:	75fb      	strb	r3, [r7, #23]
 807e6a0:	7dfa      	ldrb	r2, [r7, #23]
 807e6a2:	79fb      	ldrb	r3, [r7, #7]
 807e6a4:	429a      	cmp	r2, r3
 807e6a6:	d3d3      	bcc.n	807e650 <IntToUnicode+0x18>
  }
}
 807e6a8:	bf00      	nop
 807e6aa:	bf00      	nop
 807e6ac:	371c      	adds	r7, #28
 807e6ae:	46bd      	mov	sp, r7
 807e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e6b4:	4770      	bx	lr

0807e6b6 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 807e6b6:	b580      	push	{r7, lr}
 807e6b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
	HAL_FLASH_Unlock();
 807e6ba:	f7fa fa97 	bl	8078bec <HAL_FLASH_Unlock>
  return (USBD_OK);
 807e6be:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 807e6c0:	4618      	mov	r0, r3
 807e6c2:	bd80      	pop	{r7, pc}

0807e6c4 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 807e6c4:	b580      	push	{r7, lr}
 807e6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_FLASH_Lock();
 807e6c8:	f7fa fab2 	bl	8078c30 <HAL_FLASH_Lock>
  return (USBD_OK);
 807e6cc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 807e6ce:	4618      	mov	r0, r3
 807e6d0:	bd80      	pop	{r7, pc}

0807e6d2 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 807e6d2:	b580      	push	{r7, lr}
 807e6d4:	b08a      	sub	sp, #40	; 0x28
 807e6d6:	af00      	add	r7, sp, #0
 807e6d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
	uint32_t startsector = 0, sectorerror = 0;
 807e6da:	2300      	movs	r3, #0
 807e6dc:	627b      	str	r3, [r7, #36]	; 0x24
 807e6de:	2300      	movs	r3, #0
 807e6e0:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef eraseinitstruct;

	startsector = GetSector(Add);
 807e6e2:	6878      	ldr	r0, [r7, #4]
 807e6e4:	f000 f8a8 	bl	807e838 <GetSector>
 807e6e8:	6278      	str	r0, [r7, #36]	; 0x24
	  eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 807e6ea:	2300      	movs	r3, #0
 807e6ec:	60bb      	str	r3, [r7, #8]
	  eraseinitstruct.Banks = GetBank(Add);
 807e6ee:	6878      	ldr	r0, [r7, #4]
 807e6f0:	f000 f90c 	bl	807e90c <GetBank>
 807e6f4:	4603      	mov	r3, r0
 807e6f6:	60fb      	str	r3, [r7, #12]
	  eraseinitstruct.Sector = startsector;
 807e6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807e6fa:	613b      	str	r3, [r7, #16]
	  eraseinitstruct.NbSectors = 1;
 807e6fc:	2301      	movs	r3, #1
 807e6fe:	617b      	str	r3, [r7, #20]
	  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 807e700:	2302      	movs	r3, #2
 807e702:	61bb      	str	r3, [r7, #24]
	  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 807e704:	f107 021c 	add.w	r2, r7, #28
 807e708:	f107 0308 	add.w	r3, r7, #8
 807e70c:	4611      	mov	r1, r2
 807e70e:	4618      	mov	r0, r3
 807e710:	f7fa fbde 	bl	8078ed0 <HAL_FLASHEx_Erase>
 807e714:	4603      	mov	r3, r0
 807e716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  if (status != HAL_OK)
 807e71a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 807e71e:	2b00      	cmp	r3, #0
 807e720:	d001      	beq.n	807e726 <MEM_If_Erase_FS+0x54>
	    {
	      return 1;
 807e722:	2301      	movs	r3, #1
 807e724:	e000      	b.n	807e728 <MEM_If_Erase_FS+0x56>
	    }
  return (USBD_OK);
 807e726:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 807e728:	4618      	mov	r0, r3
 807e72a:	3728      	adds	r7, #40	; 0x28
 807e72c:	46bd      	mov	sp, r7
 807e72e:	bd80      	pop	{r7, pc}

0807e730 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 807e730:	b580      	push	{r7, lr}
 807e732:	b086      	sub	sp, #24
 807e734:	af00      	add	r7, sp, #0
 807e736:	60f8      	str	r0, [r7, #12]
 807e738:	60b9      	str	r1, [r7, #8]
 807e73a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
	uint32_t i = 0;
 807e73c:	2300      	movs	r3, #0
 807e73e:	617b      	str	r3, [r7, #20]

	  for (i = 0; i < Len; i += 4)
 807e740:	2300      	movs	r3, #0
 807e742:	617b      	str	r3, [r7, #20]
 807e744:	e021      	b.n	807e78a <MEM_If_Write_FS+0x5a>
	  {
	    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
	     * be done by byte */
	    if (HAL_FLASH_Program
	        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (dest + i),
 807e746:	68ba      	ldr	r2, [r7, #8]
 807e748:	697b      	ldr	r3, [r7, #20]
 807e74a:	4413      	add	r3, r2
	    if (HAL_FLASH_Program
 807e74c:	4619      	mov	r1, r3
	         *(uint32_t *) (src + i)) == HAL_OK)
 807e74e:	68fa      	ldr	r2, [r7, #12]
 807e750:	697b      	ldr	r3, [r7, #20]
 807e752:	4413      	add	r3, r2
 807e754:	681b      	ldr	r3, [r3, #0]
	    if (HAL_FLASH_Program
 807e756:	461a      	mov	r2, r3
 807e758:	f04f 0300 	mov.w	r3, #0
 807e75c:	2002      	movs	r0, #2
 807e75e:	f7fa f9f1 	bl	8078b44 <HAL_FLASH_Program>
 807e762:	4603      	mov	r3, r0
 807e764:	2b00      	cmp	r3, #0
 807e766:	d10b      	bne.n	807e780 <MEM_If_Write_FS+0x50>
	    {
	      /* Check the written value */
	      if (*(uint32_t *) (src + i) != *(uint32_t *) (dest + i))
 807e768:	68fa      	ldr	r2, [r7, #12]
 807e76a:	697b      	ldr	r3, [r7, #20]
 807e76c:	4413      	add	r3, r2
 807e76e:	681a      	ldr	r2, [r3, #0]
 807e770:	68b9      	ldr	r1, [r7, #8]
 807e772:	697b      	ldr	r3, [r7, #20]
 807e774:	440b      	add	r3, r1
 807e776:	681b      	ldr	r3, [r3, #0]
 807e778:	429a      	cmp	r2, r3
 807e77a:	d003      	beq.n	807e784 <MEM_If_Write_FS+0x54>
	      {
	        /* Flash content doesn't match SRAM content */
	        return 2;
 807e77c:	2302      	movs	r3, #2
 807e77e:	e009      	b.n	807e794 <MEM_If_Write_FS+0x64>
	      }
	    }
	    else
	    {
	      /* Error occurred while writing data in Flash memory */
	      return 1;
 807e780:	2301      	movs	r3, #1
 807e782:	e007      	b.n	807e794 <MEM_If_Write_FS+0x64>
	  for (i = 0; i < Len; i += 4)
 807e784:	697b      	ldr	r3, [r7, #20]
 807e786:	3304      	adds	r3, #4
 807e788:	617b      	str	r3, [r7, #20]
 807e78a:	697a      	ldr	r2, [r7, #20]
 807e78c:	687b      	ldr	r3, [r7, #4]
 807e78e:	429a      	cmp	r2, r3
 807e790:	d3d9      	bcc.n	807e746 <MEM_If_Write_FS+0x16>
	    }
	  }
  return (USBD_OK);
 807e792:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 807e794:	4618      	mov	r0, r3
 807e796:	3718      	adds	r7, #24
 807e798:	46bd      	mov	sp, r7
 807e79a:	bd80      	pop	{r7, pc}

0807e79c <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 807e79c:	b480      	push	{r7}
 807e79e:	b087      	sub	sp, #28
 807e7a0:	af00      	add	r7, sp, #0
 807e7a2:	60f8      	str	r0, [r7, #12]
 807e7a4:	60b9      	str	r1, [r7, #8]
 807e7a6:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
	uint32_t i = 0;
 807e7a8:	2300      	movs	r3, #0
 807e7aa:	617b      	str	r3, [r7, #20]
	  uint8_t *psrc = src;
 807e7ac:	68fb      	ldr	r3, [r7, #12]
 807e7ae:	613b      	str	r3, [r7, #16]

	  for (i = 0; i < Len; i++)
 807e7b0:	2300      	movs	r3, #0
 807e7b2:	617b      	str	r3, [r7, #20]
 807e7b4:	e00a      	b.n	807e7cc <MEM_If_Read_FS+0x30>
	  {
	    dest[i] = *psrc++;
 807e7b6:	693b      	ldr	r3, [r7, #16]
 807e7b8:	1c5a      	adds	r2, r3, #1
 807e7ba:	613a      	str	r2, [r7, #16]
 807e7bc:	68b9      	ldr	r1, [r7, #8]
 807e7be:	697a      	ldr	r2, [r7, #20]
 807e7c0:	440a      	add	r2, r1
 807e7c2:	781b      	ldrb	r3, [r3, #0]
 807e7c4:	7013      	strb	r3, [r2, #0]
	  for (i = 0; i < Len; i++)
 807e7c6:	697b      	ldr	r3, [r7, #20]
 807e7c8:	3301      	adds	r3, #1
 807e7ca:	617b      	str	r3, [r7, #20]
 807e7cc:	697a      	ldr	r2, [r7, #20]
 807e7ce:	687b      	ldr	r3, [r7, #4]
 807e7d0:	429a      	cmp	r2, r3
 807e7d2:	d3f0      	bcc.n	807e7b6 <MEM_If_Read_FS+0x1a>
	  }
	  /* Return a valid address to avoid HardFault */
	  return (uint8_t *) (dest);
 807e7d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END 4 */
}
 807e7d6:	4618      	mov	r0, r3
 807e7d8:	371c      	adds	r7, #28
 807e7da:	46bd      	mov	sp, r7
 807e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e7e0:	4770      	bx	lr

0807e7e2 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 807e7e2:	b480      	push	{r7}
 807e7e4:	b085      	sub	sp, #20
 807e7e6:	af00      	add	r7, sp, #0
 807e7e8:	60f8      	str	r0, [r7, #12]
 807e7ea:	460b      	mov	r3, r1
 807e7ec:	607a      	str	r2, [r7, #4]
 807e7ee:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
	switch (Cmd)
 807e7f0:	7afb      	ldrb	r3, [r7, #11]
 807e7f2:	2b01      	cmp	r3, #1
 807e7f4:	d10c      	bne.n	807e810 <MEM_If_GetStatus_FS+0x2e>
	  {
	  case DFU_MEDIA_PROGRAM:
	    buffer[1] = (uint8_t) FLASH_PROGRAM_TIME;
 807e7f6:	687b      	ldr	r3, [r7, #4]
 807e7f8:	3301      	adds	r3, #1
 807e7fa:	2232      	movs	r2, #50	; 0x32
 807e7fc:	701a      	strb	r2, [r3, #0]
	    buffer[2] = (uint8_t) (FLASH_PROGRAM_TIME << 8);
 807e7fe:	687b      	ldr	r3, [r7, #4]
 807e800:	3302      	adds	r3, #2
 807e802:	2200      	movs	r2, #0
 807e804:	701a      	strb	r2, [r3, #0]
	    buffer[3] = 0;
 807e806:	687b      	ldr	r3, [r7, #4]
 807e808:	3303      	adds	r3, #3
 807e80a:	2200      	movs	r2, #0
 807e80c:	701a      	strb	r2, [r3, #0]
	    break;
 807e80e:	e00c      	b.n	807e82a <MEM_If_GetStatus_FS+0x48>

	  case DFU_MEDIA_ERASE:
	  default:
	    buffer[1] = (uint8_t) FLASH_ERASE_TIME;
 807e810:	687b      	ldr	r3, [r7, #4]
 807e812:	3301      	adds	r3, #1
 807e814:	2232      	movs	r2, #50	; 0x32
 807e816:	701a      	strb	r2, [r3, #0]
	    buffer[2] = (uint8_t) (FLASH_ERASE_TIME << 8);
 807e818:	687b      	ldr	r3, [r7, #4]
 807e81a:	3302      	adds	r3, #2
 807e81c:	2200      	movs	r2, #0
 807e81e:	701a      	strb	r2, [r3, #0]
	    buffer[3] = 0;
 807e820:	687b      	ldr	r3, [r7, #4]
 807e822:	3303      	adds	r3, #3
 807e824:	2200      	movs	r2, #0
 807e826:	701a      	strb	r2, [r3, #0]
	    break;
 807e828:	bf00      	nop
	  }
  return (USBD_OK);
 807e82a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 807e82c:	4618      	mov	r0, r3
 807e82e:	3714      	adds	r7, #20
 807e830:	46bd      	mov	sp, r7
 807e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e836:	4770      	bx	lr

0807e838 <GetSector>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static uint32_t GetSector(uint32_t Address)
{
 807e838:	b480      	push	{r7}
 807e83a:	b085      	sub	sp, #20
 807e83c:	af00      	add	r7, sp, #0
 807e83e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 807e840:	2300      	movs	r3, #0
 807e842:	60fb      	str	r3, [r7, #12]

  if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 807e844:	687b      	ldr	r3, [r7, #4]
 807e846:	4a2a      	ldr	r2, [pc, #168]	; (807e8f0 <GetSector+0xb8>)
 807e848:	4293      	cmp	r3, r2
 807e84a:	d206      	bcs.n	807e85a <GetSector+0x22>
 807e84c:	687b      	ldr	r3, [r7, #4]
 807e84e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 807e852:	d302      	bcc.n	807e85a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 807e854:	2300      	movs	r3, #0
 807e856:	60fb      	str	r3, [r7, #12]
 807e858:	e043      	b.n	807e8e2 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 807e85a:	687b      	ldr	r3, [r7, #4]
 807e85c:	4a25      	ldr	r2, [pc, #148]	; (807e8f4 <GetSector+0xbc>)
 807e85e:	4293      	cmp	r3, r2
 807e860:	d206      	bcs.n	807e870 <GetSector+0x38>
 807e862:	687b      	ldr	r3, [r7, #4]
 807e864:	4a22      	ldr	r2, [pc, #136]	; (807e8f0 <GetSector+0xb8>)
 807e866:	4293      	cmp	r3, r2
 807e868:	d302      	bcc.n	807e870 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 807e86a:	2301      	movs	r3, #1
 807e86c:	60fb      	str	r3, [r7, #12]
 807e86e:	e038      	b.n	807e8e2 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 807e870:	687b      	ldr	r3, [r7, #4]
 807e872:	4a21      	ldr	r2, [pc, #132]	; (807e8f8 <GetSector+0xc0>)
 807e874:	4293      	cmp	r3, r2
 807e876:	d206      	bcs.n	807e886 <GetSector+0x4e>
 807e878:	687b      	ldr	r3, [r7, #4]
 807e87a:	4a1e      	ldr	r2, [pc, #120]	; (807e8f4 <GetSector+0xbc>)
 807e87c:	4293      	cmp	r3, r2
 807e87e:	d302      	bcc.n	807e886 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 807e880:	2302      	movs	r3, #2
 807e882:	60fb      	str	r3, [r7, #12]
 807e884:	e02d      	b.n	807e8e2 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 807e886:	687b      	ldr	r3, [r7, #4]
 807e888:	4a1c      	ldr	r2, [pc, #112]	; (807e8fc <GetSector+0xc4>)
 807e88a:	4293      	cmp	r3, r2
 807e88c:	d806      	bhi.n	807e89c <GetSector+0x64>
 807e88e:	687b      	ldr	r3, [r7, #4]
 807e890:	4a19      	ldr	r2, [pc, #100]	; (807e8f8 <GetSector+0xc0>)
 807e892:	4293      	cmp	r3, r2
 807e894:	d302      	bcc.n	807e89c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 807e896:	2303      	movs	r3, #3
 807e898:	60fb      	str	r3, [r7, #12]
 807e89a:	e022      	b.n	807e8e2 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 807e89c:	687b      	ldr	r3, [r7, #4]
 807e89e:	4a18      	ldr	r2, [pc, #96]	; (807e900 <GetSector+0xc8>)
 807e8a0:	4293      	cmp	r3, r2
 807e8a2:	d806      	bhi.n	807e8b2 <GetSector+0x7a>
 807e8a4:	687b      	ldr	r3, [r7, #4]
 807e8a6:	4a15      	ldr	r2, [pc, #84]	; (807e8fc <GetSector+0xc4>)
 807e8a8:	4293      	cmp	r3, r2
 807e8aa:	d902      	bls.n	807e8b2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 807e8ac:	2304      	movs	r3, #4
 807e8ae:	60fb      	str	r3, [r7, #12]
 807e8b0:	e017      	b.n	807e8e2 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 807e8b2:	687b      	ldr	r3, [r7, #4]
 807e8b4:	4a13      	ldr	r2, [pc, #76]	; (807e904 <GetSector+0xcc>)
 807e8b6:	4293      	cmp	r3, r2
 807e8b8:	d806      	bhi.n	807e8c8 <GetSector+0x90>
 807e8ba:	687b      	ldr	r3, [r7, #4]
 807e8bc:	4a10      	ldr	r2, [pc, #64]	; (807e900 <GetSector+0xc8>)
 807e8be:	4293      	cmp	r3, r2
 807e8c0:	d902      	bls.n	807e8c8 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 807e8c2:	2305      	movs	r3, #5
 807e8c4:	60fb      	str	r3, [r7, #12]
 807e8c6:	e00c      	b.n	807e8e2 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 807e8c8:	687b      	ldr	r3, [r7, #4]
 807e8ca:	4a0f      	ldr	r2, [pc, #60]	; (807e908 <GetSector+0xd0>)
 807e8cc:	4293      	cmp	r3, r2
 807e8ce:	d806      	bhi.n	807e8de <GetSector+0xa6>
 807e8d0:	687b      	ldr	r3, [r7, #4]
 807e8d2:	4a0c      	ldr	r2, [pc, #48]	; (807e904 <GetSector+0xcc>)
 807e8d4:	4293      	cmp	r3, r2
 807e8d6:	d902      	bls.n	807e8de <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 807e8d8:	2306      	movs	r3, #6
 807e8da:	60fb      	str	r3, [r7, #12]
 807e8dc:	e001      	b.n	807e8e2 <GetSector+0xaa>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 807e8de:	2307      	movs	r3, #7
 807e8e0:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 807e8e2:	68fb      	ldr	r3, [r7, #12]
}
 807e8e4:	4618      	mov	r0, r3
 807e8e6:	3714      	adds	r7, #20
 807e8e8:	46bd      	mov	sp, r7
 807e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e8ee:	4770      	bx	lr
 807e8f0:	08004000 	.word	0x08004000
 807e8f4:	08008000 	.word	0x08008000
 807e8f8:	0800c000 	.word	0x0800c000
 807e8fc:	0800ffff 	.word	0x0800ffff
 807e900:	0801ffff 	.word	0x0801ffff
 807e904:	0803ffff 	.word	0x0803ffff
 807e908:	0805ffff 	.word	0x0805ffff

0807e90c <GetBank>:

static uint32_t GetBank(uint32_t Addr)
{
 807e90c:	b480      	push	{r7}
 807e90e:	b085      	sub	sp, #20
 807e910:	af00      	add	r7, sp, #0
 807e912:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0;
 807e914:	2300      	movs	r3, #0
 807e916:	60fb      	str	r3, [r7, #12]

  /* Sector in bank 1 */
  bank = FLASH_BANK_1;
 807e918:	2301      	movs	r3, #1
 807e91a:	60fb      	str	r3, [r7, #12]
  return bank;
 807e91c:	68fb      	ldr	r3, [r7, #12]
}
 807e91e:	4618      	mov	r0, r3
 807e920:	3714      	adds	r7, #20
 807e922:	46bd      	mov	sp, r7
 807e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e928:	4770      	bx	lr
	...

0807e92c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 807e92c:	b580      	push	{r7, lr}
 807e92e:	b08a      	sub	sp, #40	; 0x28
 807e930:	af00      	add	r7, sp, #0
 807e932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 807e934:	f107 0314 	add.w	r3, r7, #20
 807e938:	2200      	movs	r2, #0
 807e93a:	601a      	str	r2, [r3, #0]
 807e93c:	605a      	str	r2, [r3, #4]
 807e93e:	609a      	str	r2, [r3, #8]
 807e940:	60da      	str	r2, [r3, #12]
 807e942:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 807e944:	687b      	ldr	r3, [r7, #4]
 807e946:	681b      	ldr	r3, [r3, #0]
 807e948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 807e94c:	d13a      	bne.n	807e9c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 807e94e:	2300      	movs	r3, #0
 807e950:	613b      	str	r3, [r7, #16]
 807e952:	4b1e      	ldr	r3, [pc, #120]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807e956:	4a1d      	ldr	r2, [pc, #116]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e958:	f043 0301 	orr.w	r3, r3, #1
 807e95c:	6313      	str	r3, [r2, #48]	; 0x30
 807e95e:	4b1b      	ldr	r3, [pc, #108]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807e962:	f003 0301 	and.w	r3, r3, #1
 807e966:	613b      	str	r3, [r7, #16]
 807e968:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 807e96a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 807e96e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807e970:	2302      	movs	r3, #2
 807e972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 807e974:	2300      	movs	r3, #0
 807e976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 807e978:	2303      	movs	r3, #3
 807e97a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 807e97c:	230a      	movs	r3, #10
 807e97e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 807e980:	f107 0314 	add.w	r3, r7, #20
 807e984:	4619      	mov	r1, r3
 807e986:	4812      	ldr	r0, [pc, #72]	; (807e9d0 <HAL_PCD_MspInit+0xa4>)
 807e988:	f7fa fbc4 	bl	8079114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 807e98c:	4b0f      	ldr	r3, [pc, #60]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 807e990:	4a0e      	ldr	r2, [pc, #56]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807e996:	6353      	str	r3, [r2, #52]	; 0x34
 807e998:	2300      	movs	r3, #0
 807e99a:	60fb      	str	r3, [r7, #12]
 807e99c:	4b0b      	ldr	r3, [pc, #44]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e99e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 807e9a0:	4a0a      	ldr	r2, [pc, #40]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e9a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 807e9a6:	6453      	str	r3, [r2, #68]	; 0x44
 807e9a8:	4b08      	ldr	r3, [pc, #32]	; (807e9cc <HAL_PCD_MspInit+0xa0>)
 807e9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 807e9ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 807e9b0:	60fb      	str	r3, [r7, #12]
 807e9b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 807e9b4:	2200      	movs	r2, #0
 807e9b6:	2100      	movs	r1, #0
 807e9b8:	2043      	movs	r0, #67	; 0x43
 807e9ba:	f7fa f88c 	bl	8078ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 807e9be:	2043      	movs	r0, #67	; 0x43
 807e9c0:	f7fa f8a5 	bl	8078b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 807e9c4:	bf00      	nop
 807e9c6:	3728      	adds	r7, #40	; 0x28
 807e9c8:	46bd      	mov	sp, r7
 807e9ca:	bd80      	pop	{r7, pc}
 807e9cc:	40023800 	.word	0x40023800
 807e9d0:	40020000 	.word	0x40020000

0807e9d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807e9d4:	b580      	push	{r7, lr}
 807e9d6:	b082      	sub	sp, #8
 807e9d8:	af00      	add	r7, sp, #0
 807e9da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 807e9dc:	687b      	ldr	r3, [r7, #4]
 807e9de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 807e9e2:	687b      	ldr	r3, [r7, #4]
 807e9e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807e9e8:	4619      	mov	r1, r3
 807e9ea:	4610      	mov	r0, r2
 807e9ec:	f7fe fc45 	bl	807d27a <USBD_LL_SetupStage>
}
 807e9f0:	bf00      	nop
 807e9f2:	3708      	adds	r7, #8
 807e9f4:	46bd      	mov	sp, r7
 807e9f6:	bd80      	pop	{r7, pc}

0807e9f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807e9f8:	b580      	push	{r7, lr}
 807e9fa:	b082      	sub	sp, #8
 807e9fc:	af00      	add	r7, sp, #0
 807e9fe:	6078      	str	r0, [r7, #4]
 807ea00:	460b      	mov	r3, r1
 807ea02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 807ea04:	687b      	ldr	r3, [r7, #4]
 807ea06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 807ea0a:	78fa      	ldrb	r2, [r7, #3]
 807ea0c:	6879      	ldr	r1, [r7, #4]
 807ea0e:	4613      	mov	r3, r2
 807ea10:	00db      	lsls	r3, r3, #3
 807ea12:	1a9b      	subs	r3, r3, r2
 807ea14:	009b      	lsls	r3, r3, #2
 807ea16:	440b      	add	r3, r1
 807ea18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 807ea1c:	681a      	ldr	r2, [r3, #0]
 807ea1e:	78fb      	ldrb	r3, [r7, #3]
 807ea20:	4619      	mov	r1, r3
 807ea22:	f7fe fc7f 	bl	807d324 <USBD_LL_DataOutStage>
}
 807ea26:	bf00      	nop
 807ea28:	3708      	adds	r7, #8
 807ea2a:	46bd      	mov	sp, r7
 807ea2c:	bd80      	pop	{r7, pc}

0807ea2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea2e:	b580      	push	{r7, lr}
 807ea30:	b082      	sub	sp, #8
 807ea32:	af00      	add	r7, sp, #0
 807ea34:	6078      	str	r0, [r7, #4]
 807ea36:	460b      	mov	r3, r1
 807ea38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 807ea3a:	687b      	ldr	r3, [r7, #4]
 807ea3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 807ea40:	78fa      	ldrb	r2, [r7, #3]
 807ea42:	6879      	ldr	r1, [r7, #4]
 807ea44:	4613      	mov	r3, r2
 807ea46:	00db      	lsls	r3, r3, #3
 807ea48:	1a9b      	subs	r3, r3, r2
 807ea4a:	009b      	lsls	r3, r3, #2
 807ea4c:	440b      	add	r3, r1
 807ea4e:	3348      	adds	r3, #72	; 0x48
 807ea50:	681a      	ldr	r2, [r3, #0]
 807ea52:	78fb      	ldrb	r3, [r7, #3]
 807ea54:	4619      	mov	r1, r3
 807ea56:	f7fe fcc8 	bl	807d3ea <USBD_LL_DataInStage>
}
 807ea5a:	bf00      	nop
 807ea5c:	3708      	adds	r7, #8
 807ea5e:	46bd      	mov	sp, r7
 807ea60:	bd80      	pop	{r7, pc}

0807ea62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea62:	b580      	push	{r7, lr}
 807ea64:	b082      	sub	sp, #8
 807ea66:	af00      	add	r7, sp, #0
 807ea68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 807ea6a:	687b      	ldr	r3, [r7, #4]
 807ea6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807ea70:	4618      	mov	r0, r3
 807ea72:	f7fe fddc 	bl	807d62e <USBD_LL_SOF>
}
 807ea76:	bf00      	nop
 807ea78:	3708      	adds	r7, #8
 807ea7a:	46bd      	mov	sp, r7
 807ea7c:	bd80      	pop	{r7, pc}

0807ea7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea7e:	b580      	push	{r7, lr}
 807ea80:	b084      	sub	sp, #16
 807ea82:	af00      	add	r7, sp, #0
 807ea84:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 807ea86:	2301      	movs	r3, #1
 807ea88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 807ea8a:	687b      	ldr	r3, [r7, #4]
 807ea8c:	68db      	ldr	r3, [r3, #12]
 807ea8e:	2b02      	cmp	r3, #2
 807ea90:	d001      	beq.n	807ea96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 807ea92:	f7f9 fe0b 	bl	80786ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 807ea96:	687b      	ldr	r3, [r7, #4]
 807ea98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807ea9c:	7bfa      	ldrb	r2, [r7, #15]
 807ea9e:	4611      	mov	r1, r2
 807eaa0:	4618      	mov	r0, r3
 807eaa2:	f7fe fd86 	bl	807d5b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 807eaa6:	687b      	ldr	r3, [r7, #4]
 807eaa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eaac:	4618      	mov	r0, r3
 807eaae:	f7fe fd32 	bl	807d516 <USBD_LL_Reset>
}
 807eab2:	bf00      	nop
 807eab4:	3710      	adds	r7, #16
 807eab6:	46bd      	mov	sp, r7
 807eab8:	bd80      	pop	{r7, pc}
	...

0807eabc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eabc:	b580      	push	{r7, lr}
 807eabe:	b082      	sub	sp, #8
 807eac0:	af00      	add	r7, sp, #0
 807eac2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 807eac4:	687b      	ldr	r3, [r7, #4]
 807eac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eaca:	4618      	mov	r0, r3
 807eacc:	f7fe fd81 	bl	807d5d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 807ead0:	687b      	ldr	r3, [r7, #4]
 807ead2:	681b      	ldr	r3, [r3, #0]
 807ead4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807ead8:	681b      	ldr	r3, [r3, #0]
 807eada:	687a      	ldr	r2, [r7, #4]
 807eadc:	6812      	ldr	r2, [r2, #0]
 807eade:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 807eae2:	f043 0301 	orr.w	r3, r3, #1
 807eae6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 807eae8:	687b      	ldr	r3, [r7, #4]
 807eaea:	6a1b      	ldr	r3, [r3, #32]
 807eaec:	2b00      	cmp	r3, #0
 807eaee:	d005      	beq.n	807eafc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 807eaf0:	4b04      	ldr	r3, [pc, #16]	; (807eb04 <HAL_PCD_SuspendCallback+0x48>)
 807eaf2:	691b      	ldr	r3, [r3, #16]
 807eaf4:	4a03      	ldr	r2, [pc, #12]	; (807eb04 <HAL_PCD_SuspendCallback+0x48>)
 807eaf6:	f043 0306 	orr.w	r3, r3, #6
 807eafa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 807eafc:	bf00      	nop
 807eafe:	3708      	adds	r7, #8
 807eb00:	46bd      	mov	sp, r7
 807eb02:	bd80      	pop	{r7, pc}
 807eb04:	e000ed00 	.word	0xe000ed00

0807eb08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb08:	b580      	push	{r7, lr}
 807eb0a:	b082      	sub	sp, #8
 807eb0c:	af00      	add	r7, sp, #0
 807eb0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 807eb10:	687b      	ldr	r3, [r7, #4]
 807eb12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb16:	4618      	mov	r0, r3
 807eb18:	f7fe fd71 	bl	807d5fe <USBD_LL_Resume>
}
 807eb1c:	bf00      	nop
 807eb1e:	3708      	adds	r7, #8
 807eb20:	46bd      	mov	sp, r7
 807eb22:	bd80      	pop	{r7, pc}

0807eb24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb24:	b580      	push	{r7, lr}
 807eb26:	b082      	sub	sp, #8
 807eb28:	af00      	add	r7, sp, #0
 807eb2a:	6078      	str	r0, [r7, #4]
 807eb2c:	460b      	mov	r3, r1
 807eb2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807eb30:	687b      	ldr	r3, [r7, #4]
 807eb32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb36:	78fa      	ldrb	r2, [r7, #3]
 807eb38:	4611      	mov	r1, r2
 807eb3a:	4618      	mov	r0, r3
 807eb3c:	f7fe fdbf 	bl	807d6be <USBD_LL_IsoOUTIncomplete>
}
 807eb40:	bf00      	nop
 807eb42:	3708      	adds	r7, #8
 807eb44:	46bd      	mov	sp, r7
 807eb46:	bd80      	pop	{r7, pc}

0807eb48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb48:	b580      	push	{r7, lr}
 807eb4a:	b082      	sub	sp, #8
 807eb4c:	af00      	add	r7, sp, #0
 807eb4e:	6078      	str	r0, [r7, #4]
 807eb50:	460b      	mov	r3, r1
 807eb52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807eb54:	687b      	ldr	r3, [r7, #4]
 807eb56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb5a:	78fa      	ldrb	r2, [r7, #3]
 807eb5c:	4611      	mov	r1, r2
 807eb5e:	4618      	mov	r0, r3
 807eb60:	f7fe fd87 	bl	807d672 <USBD_LL_IsoINIncomplete>
}
 807eb64:	bf00      	nop
 807eb66:	3708      	adds	r7, #8
 807eb68:	46bd      	mov	sp, r7
 807eb6a:	bd80      	pop	{r7, pc}

0807eb6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb6c:	b580      	push	{r7, lr}
 807eb6e:	b082      	sub	sp, #8
 807eb70:	af00      	add	r7, sp, #0
 807eb72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 807eb74:	687b      	ldr	r3, [r7, #4]
 807eb76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb7a:	4618      	mov	r0, r3
 807eb7c:	f7fe fdc5 	bl	807d70a <USBD_LL_DevConnected>
}
 807eb80:	bf00      	nop
 807eb82:	3708      	adds	r7, #8
 807eb84:	46bd      	mov	sp, r7
 807eb86:	bd80      	pop	{r7, pc}

0807eb88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb88:	b580      	push	{r7, lr}
 807eb8a:	b082      	sub	sp, #8
 807eb8c:	af00      	add	r7, sp, #0
 807eb8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 807eb90:	687b      	ldr	r3, [r7, #4]
 807eb92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb96:	4618      	mov	r0, r3
 807eb98:	f7fe fdc2 	bl	807d720 <USBD_LL_DevDisconnected>
}
 807eb9c:	bf00      	nop
 807eb9e:	3708      	adds	r7, #8
 807eba0:	46bd      	mov	sp, r7
 807eba2:	bd80      	pop	{r7, pc}

0807eba4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 807eba4:	b580      	push	{r7, lr}
 807eba6:	b082      	sub	sp, #8
 807eba8:	af00      	add	r7, sp, #0
 807ebaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 807ebac:	687b      	ldr	r3, [r7, #4]
 807ebae:	781b      	ldrb	r3, [r3, #0]
 807ebb0:	2b00      	cmp	r3, #0
 807ebb2:	d13c      	bne.n	807ec2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 807ebb4:	4a20      	ldr	r2, [pc, #128]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebb6:	687b      	ldr	r3, [r7, #4]
 807ebb8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 807ebbc:	687b      	ldr	r3, [r7, #4]
 807ebbe:	4a1e      	ldr	r2, [pc, #120]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 807ebc4:	4b1c      	ldr	r3, [pc, #112]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 807ebca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 807ebcc:	4b1a      	ldr	r3, [pc, #104]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebce:	2204      	movs	r2, #4
 807ebd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 807ebd2:	4b19      	ldr	r3, [pc, #100]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebd4:	2202      	movs	r2, #2
 807ebd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 807ebd8:	4b17      	ldr	r3, [pc, #92]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebda:	2200      	movs	r2, #0
 807ebdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 807ebde:	4b16      	ldr	r3, [pc, #88]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebe0:	2202      	movs	r2, #2
 807ebe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 807ebe4:	4b14      	ldr	r3, [pc, #80]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebe6:	2200      	movs	r2, #0
 807ebe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 807ebea:	4b13      	ldr	r3, [pc, #76]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebec:	2200      	movs	r2, #0
 807ebee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 807ebf0:	4b11      	ldr	r3, [pc, #68]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebf2:	2200      	movs	r2, #0
 807ebf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 807ebf6:	4b10      	ldr	r3, [pc, #64]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebf8:	2200      	movs	r2, #0
 807ebfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 807ebfc:	4b0e      	ldr	r3, [pc, #56]	; (807ec38 <USBD_LL_Init+0x94>)
 807ebfe:	2200      	movs	r2, #0
 807ec00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 807ec02:	480d      	ldr	r0, [pc, #52]	; (807ec38 <USBD_LL_Init+0x94>)
 807ec04:	f7fa fc3d 	bl	8079482 <HAL_PCD_Init>
 807ec08:	4603      	mov	r3, r0
 807ec0a:	2b00      	cmp	r3, #0
 807ec0c:	d001      	beq.n	807ec12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 807ec0e:	f7f9 fd4d 	bl	80786ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 807ec12:	2180      	movs	r1, #128	; 0x80
 807ec14:	4808      	ldr	r0, [pc, #32]	; (807ec38 <USBD_LL_Init+0x94>)
 807ec16:	f7fb fd72 	bl	807a6fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 807ec1a:	2240      	movs	r2, #64	; 0x40
 807ec1c:	2100      	movs	r1, #0
 807ec1e:	4806      	ldr	r0, [pc, #24]	; (807ec38 <USBD_LL_Init+0x94>)
 807ec20:	f7fb fd26 	bl	807a670 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 807ec24:	2280      	movs	r2, #128	; 0x80
 807ec26:	2101      	movs	r1, #1
 807ec28:	4803      	ldr	r0, [pc, #12]	; (807ec38 <USBD_LL_Init+0x94>)
 807ec2a:	f7fb fd21 	bl	807a670 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 807ec2e:	2300      	movs	r3, #0
}
 807ec30:	4618      	mov	r0, r3
 807ec32:	3708      	adds	r7, #8
 807ec34:	46bd      	mov	sp, r7
 807ec36:	bd80      	pop	{r7, pc}
 807ec38:	20000b0c 	.word	0x20000b0c

0807ec3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 807ec3c:	b580      	push	{r7, lr}
 807ec3e:	b084      	sub	sp, #16
 807ec40:	af00      	add	r7, sp, #0
 807ec42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ec44:	2300      	movs	r3, #0
 807ec46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ec48:	2300      	movs	r3, #0
 807ec4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 807ec4c:	687b      	ldr	r3, [r7, #4]
 807ec4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ec52:	4618      	mov	r0, r3
 807ec54:	f7fa fd32 	bl	80796bc <HAL_PCD_Start>
 807ec58:	4603      	mov	r3, r0
 807ec5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ec5c:	7bfb      	ldrb	r3, [r7, #15]
 807ec5e:	4618      	mov	r0, r3
 807ec60:	f000 f92c 	bl	807eebc <USBD_Get_USB_Status>
 807ec64:	4603      	mov	r3, r0
 807ec66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ec68:	7bbb      	ldrb	r3, [r7, #14]
}
 807ec6a:	4618      	mov	r0, r3
 807ec6c:	3710      	adds	r7, #16
 807ec6e:	46bd      	mov	sp, r7
 807ec70:	bd80      	pop	{r7, pc}

0807ec72 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 807ec72:	b580      	push	{r7, lr}
 807ec74:	b084      	sub	sp, #16
 807ec76:	af00      	add	r7, sp, #0
 807ec78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ec7a:	2300      	movs	r3, #0
 807ec7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ec7e:	2300      	movs	r3, #0
 807ec80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 807ec82:	687b      	ldr	r3, [r7, #4]
 807ec84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ec88:	4618      	mov	r0, r3
 807ec8a:	f7fa fd4a 	bl	8079722 <HAL_PCD_Stop>
 807ec8e:	4603      	mov	r3, r0
 807ec90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ec92:	7bfb      	ldrb	r3, [r7, #15]
 807ec94:	4618      	mov	r0, r3
 807ec96:	f000 f911 	bl	807eebc <USBD_Get_USB_Status>
 807ec9a:	4603      	mov	r3, r0
 807ec9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ec9e:	7bbb      	ldrb	r3, [r7, #14]
}
 807eca0:	4618      	mov	r0, r3
 807eca2:	3710      	adds	r7, #16
 807eca4:	46bd      	mov	sp, r7
 807eca6:	bd80      	pop	{r7, pc}

0807eca8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 807eca8:	b580      	push	{r7, lr}
 807ecaa:	b084      	sub	sp, #16
 807ecac:	af00      	add	r7, sp, #0
 807ecae:	6078      	str	r0, [r7, #4]
 807ecb0:	4608      	mov	r0, r1
 807ecb2:	4611      	mov	r1, r2
 807ecb4:	461a      	mov	r2, r3
 807ecb6:	4603      	mov	r3, r0
 807ecb8:	70fb      	strb	r3, [r7, #3]
 807ecba:	460b      	mov	r3, r1
 807ecbc:	70bb      	strb	r3, [r7, #2]
 807ecbe:	4613      	mov	r3, r2
 807ecc0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ecc2:	2300      	movs	r3, #0
 807ecc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ecc6:	2300      	movs	r3, #0
 807ecc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 807ecca:	687b      	ldr	r3, [r7, #4]
 807eccc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807ecd0:	78bb      	ldrb	r3, [r7, #2]
 807ecd2:	883a      	ldrh	r2, [r7, #0]
 807ecd4:	78f9      	ldrb	r1, [r7, #3]
 807ecd6:	f7fb f934 	bl	8079f42 <HAL_PCD_EP_Open>
 807ecda:	4603      	mov	r3, r0
 807ecdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ecde:	7bfb      	ldrb	r3, [r7, #15]
 807ece0:	4618      	mov	r0, r3
 807ece2:	f000 f8eb 	bl	807eebc <USBD_Get_USB_Status>
 807ece6:	4603      	mov	r3, r0
 807ece8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ecea:	7bbb      	ldrb	r3, [r7, #14]
}
 807ecec:	4618      	mov	r0, r3
 807ecee:	3710      	adds	r7, #16
 807ecf0:	46bd      	mov	sp, r7
 807ecf2:	bd80      	pop	{r7, pc}

0807ecf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807ecf4:	b580      	push	{r7, lr}
 807ecf6:	b084      	sub	sp, #16
 807ecf8:	af00      	add	r7, sp, #0
 807ecfa:	6078      	str	r0, [r7, #4]
 807ecfc:	460b      	mov	r3, r1
 807ecfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ed00:	2300      	movs	r3, #0
 807ed02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ed04:	2300      	movs	r3, #0
 807ed06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 807ed08:	687b      	ldr	r3, [r7, #4]
 807ed0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ed0e:	78fa      	ldrb	r2, [r7, #3]
 807ed10:	4611      	mov	r1, r2
 807ed12:	4618      	mov	r0, r3
 807ed14:	f7fb fa12 	bl	807a13c <HAL_PCD_EP_SetStall>
 807ed18:	4603      	mov	r3, r0
 807ed1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ed1c:	7bfb      	ldrb	r3, [r7, #15]
 807ed1e:	4618      	mov	r0, r3
 807ed20:	f000 f8cc 	bl	807eebc <USBD_Get_USB_Status>
 807ed24:	4603      	mov	r3, r0
 807ed26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed28:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed2a:	4618      	mov	r0, r3
 807ed2c:	3710      	adds	r7, #16
 807ed2e:	46bd      	mov	sp, r7
 807ed30:	bd80      	pop	{r7, pc}

0807ed32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807ed32:	b580      	push	{r7, lr}
 807ed34:	b084      	sub	sp, #16
 807ed36:	af00      	add	r7, sp, #0
 807ed38:	6078      	str	r0, [r7, #4]
 807ed3a:	460b      	mov	r3, r1
 807ed3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ed3e:	2300      	movs	r3, #0
 807ed40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ed42:	2300      	movs	r3, #0
 807ed44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 807ed46:	687b      	ldr	r3, [r7, #4]
 807ed48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ed4c:	78fa      	ldrb	r2, [r7, #3]
 807ed4e:	4611      	mov	r1, r2
 807ed50:	4618      	mov	r0, r3
 807ed52:	f7fb fa57 	bl	807a204 <HAL_PCD_EP_ClrStall>
 807ed56:	4603      	mov	r3, r0
 807ed58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ed5a:	7bfb      	ldrb	r3, [r7, #15]
 807ed5c:	4618      	mov	r0, r3
 807ed5e:	f000 f8ad 	bl	807eebc <USBD_Get_USB_Status>
 807ed62:	4603      	mov	r3, r0
 807ed64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed66:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed68:	4618      	mov	r0, r3
 807ed6a:	3710      	adds	r7, #16
 807ed6c:	46bd      	mov	sp, r7
 807ed6e:	bd80      	pop	{r7, pc}

0807ed70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807ed70:	b480      	push	{r7}
 807ed72:	b085      	sub	sp, #20
 807ed74:	af00      	add	r7, sp, #0
 807ed76:	6078      	str	r0, [r7, #4]
 807ed78:	460b      	mov	r3, r1
 807ed7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 807ed7c:	687b      	ldr	r3, [r7, #4]
 807ed7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ed82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 807ed84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807ed88:	2b00      	cmp	r3, #0
 807ed8a:	da0b      	bge.n	807eda4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 807ed8c:	78fb      	ldrb	r3, [r7, #3]
 807ed8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807ed92:	68f9      	ldr	r1, [r7, #12]
 807ed94:	4613      	mov	r3, r2
 807ed96:	00db      	lsls	r3, r3, #3
 807ed98:	1a9b      	subs	r3, r3, r2
 807ed9a:	009b      	lsls	r3, r3, #2
 807ed9c:	440b      	add	r3, r1
 807ed9e:	333e      	adds	r3, #62	; 0x3e
 807eda0:	781b      	ldrb	r3, [r3, #0]
 807eda2:	e00b      	b.n	807edbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 807eda4:	78fb      	ldrb	r3, [r7, #3]
 807eda6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807edaa:	68f9      	ldr	r1, [r7, #12]
 807edac:	4613      	mov	r3, r2
 807edae:	00db      	lsls	r3, r3, #3
 807edb0:	1a9b      	subs	r3, r3, r2
 807edb2:	009b      	lsls	r3, r3, #2
 807edb4:	440b      	add	r3, r1
 807edb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 807edba:	781b      	ldrb	r3, [r3, #0]
  }
}
 807edbc:	4618      	mov	r0, r3
 807edbe:	3714      	adds	r7, #20
 807edc0:	46bd      	mov	sp, r7
 807edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 807edc6:	4770      	bx	lr

0807edc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 807edc8:	b580      	push	{r7, lr}
 807edca:	b084      	sub	sp, #16
 807edcc:	af00      	add	r7, sp, #0
 807edce:	6078      	str	r0, [r7, #4]
 807edd0:	460b      	mov	r3, r1
 807edd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807edd4:	2300      	movs	r3, #0
 807edd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807edd8:	2300      	movs	r3, #0
 807edda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 807eddc:	687b      	ldr	r3, [r7, #4]
 807edde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ede2:	78fa      	ldrb	r2, [r7, #3]
 807ede4:	4611      	mov	r1, r2
 807ede6:	4618      	mov	r0, r3
 807ede8:	f7fb f886 	bl	8079ef8 <HAL_PCD_SetAddress>
 807edec:	4603      	mov	r3, r0
 807edee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807edf0:	7bfb      	ldrb	r3, [r7, #15]
 807edf2:	4618      	mov	r0, r3
 807edf4:	f000 f862 	bl	807eebc <USBD_Get_USB_Status>
 807edf8:	4603      	mov	r3, r0
 807edfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807edfc:	7bbb      	ldrb	r3, [r7, #14]
}
 807edfe:	4618      	mov	r0, r3
 807ee00:	3710      	adds	r7, #16
 807ee02:	46bd      	mov	sp, r7
 807ee04:	bd80      	pop	{r7, pc}

0807ee06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 807ee06:	b580      	push	{r7, lr}
 807ee08:	b086      	sub	sp, #24
 807ee0a:	af00      	add	r7, sp, #0
 807ee0c:	60f8      	str	r0, [r7, #12]
 807ee0e:	607a      	str	r2, [r7, #4]
 807ee10:	603b      	str	r3, [r7, #0]
 807ee12:	460b      	mov	r3, r1
 807ee14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ee16:	2300      	movs	r3, #0
 807ee18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ee1a:	2300      	movs	r3, #0
 807ee1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 807ee1e:	68fb      	ldr	r3, [r7, #12]
 807ee20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807ee24:	7af9      	ldrb	r1, [r7, #11]
 807ee26:	683b      	ldr	r3, [r7, #0]
 807ee28:	687a      	ldr	r2, [r7, #4]
 807ee2a:	f7fb f93d 	bl	807a0a8 <HAL_PCD_EP_Transmit>
 807ee2e:	4603      	mov	r3, r0
 807ee30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ee32:	7dfb      	ldrb	r3, [r7, #23]
 807ee34:	4618      	mov	r0, r3
 807ee36:	f000 f841 	bl	807eebc <USBD_Get_USB_Status>
 807ee3a:	4603      	mov	r3, r0
 807ee3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 807ee3e:	7dbb      	ldrb	r3, [r7, #22]
}
 807ee40:	4618      	mov	r0, r3
 807ee42:	3718      	adds	r7, #24
 807ee44:	46bd      	mov	sp, r7
 807ee46:	bd80      	pop	{r7, pc}

0807ee48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 807ee48:	b580      	push	{r7, lr}
 807ee4a:	b086      	sub	sp, #24
 807ee4c:	af00      	add	r7, sp, #0
 807ee4e:	60f8      	str	r0, [r7, #12]
 807ee50:	607a      	str	r2, [r7, #4]
 807ee52:	603b      	str	r3, [r7, #0]
 807ee54:	460b      	mov	r3, r1
 807ee56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ee58:	2300      	movs	r3, #0
 807ee5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ee5c:	2300      	movs	r3, #0
 807ee5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 807ee60:	68fb      	ldr	r3, [r7, #12]
 807ee62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807ee66:	7af9      	ldrb	r1, [r7, #11]
 807ee68:	683b      	ldr	r3, [r7, #0]
 807ee6a:	687a      	ldr	r2, [r7, #4]
 807ee6c:	f7fb f8d1 	bl	807a012 <HAL_PCD_EP_Receive>
 807ee70:	4603      	mov	r3, r0
 807ee72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ee74:	7dfb      	ldrb	r3, [r7, #23]
 807ee76:	4618      	mov	r0, r3
 807ee78:	f000 f820 	bl	807eebc <USBD_Get_USB_Status>
 807ee7c:	4603      	mov	r3, r0
 807ee7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 807ee80:	7dbb      	ldrb	r3, [r7, #22]
}
 807ee82:	4618      	mov	r0, r3
 807ee84:	3718      	adds	r7, #24
 807ee86:	46bd      	mov	sp, r7
 807ee88:	bd80      	pop	{r7, pc}
	...

0807ee8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 807ee8c:	b480      	push	{r7}
 807ee8e:	b083      	sub	sp, #12
 807ee90:	af00      	add	r7, sp, #0
 807ee92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 807ee94:	4b03      	ldr	r3, [pc, #12]	; (807eea4 <USBD_static_malloc+0x18>)
}
 807ee96:	4618      	mov	r0, r3
 807ee98:	370c      	adds	r7, #12
 807ee9a:	46bd      	mov	sp, r7
 807ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807eea0:	4770      	bx	lr
 807eea2:	bf00      	nop
 807eea4:	200001f8 	.word	0x200001f8

0807eea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 807eea8:	b480      	push	{r7}
 807eeaa:	b083      	sub	sp, #12
 807eeac:	af00      	add	r7, sp, #0
 807eeae:	6078      	str	r0, [r7, #4]

}
 807eeb0:	bf00      	nop
 807eeb2:	370c      	adds	r7, #12
 807eeb4:	46bd      	mov	sp, r7
 807eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807eeba:	4770      	bx	lr

0807eebc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 807eebc:	b480      	push	{r7}
 807eebe:	b085      	sub	sp, #20
 807eec0:	af00      	add	r7, sp, #0
 807eec2:	4603      	mov	r3, r0
 807eec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807eec6:	2300      	movs	r3, #0
 807eec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 807eeca:	79fb      	ldrb	r3, [r7, #7]
 807eecc:	2b03      	cmp	r3, #3
 807eece:	d817      	bhi.n	807ef00 <USBD_Get_USB_Status+0x44>
 807eed0:	a201      	add	r2, pc, #4	; (adr r2, 807eed8 <USBD_Get_USB_Status+0x1c>)
 807eed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807eed6:	bf00      	nop
 807eed8:	0807eee9 	.word	0x0807eee9
 807eedc:	0807eeef 	.word	0x0807eeef
 807eee0:	0807eef5 	.word	0x0807eef5
 807eee4:	0807eefb 	.word	0x0807eefb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 807eee8:	2300      	movs	r3, #0
 807eeea:	73fb      	strb	r3, [r7, #15]
    break;
 807eeec:	e00b      	b.n	807ef06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 807eeee:	2303      	movs	r3, #3
 807eef0:	73fb      	strb	r3, [r7, #15]
    break;
 807eef2:	e008      	b.n	807ef06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 807eef4:	2301      	movs	r3, #1
 807eef6:	73fb      	strb	r3, [r7, #15]
    break;
 807eef8:	e005      	b.n	807ef06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 807eefa:	2303      	movs	r3, #3
 807eefc:	73fb      	strb	r3, [r7, #15]
    break;
 807eefe:	e002      	b.n	807ef06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 807ef00:	2303      	movs	r3, #3
 807ef02:	73fb      	strb	r3, [r7, #15]
    break;
 807ef04:	bf00      	nop
  }
  return usb_status;
 807ef06:	7bfb      	ldrb	r3, [r7, #15]
}
 807ef08:	4618      	mov	r0, r3
 807ef0a:	3714      	adds	r7, #20
 807ef0c:	46bd      	mov	sp, r7
 807ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ef12:	4770      	bx	lr

0807ef14 <__libc_init_array>:
 807ef14:	b570      	push	{r4, r5, r6, lr}
 807ef16:	4d0d      	ldr	r5, [pc, #52]	; (807ef4c <__libc_init_array+0x38>)
 807ef18:	4c0d      	ldr	r4, [pc, #52]	; (807ef50 <__libc_init_array+0x3c>)
 807ef1a:	1b64      	subs	r4, r4, r5
 807ef1c:	10a4      	asrs	r4, r4, #2
 807ef1e:	2600      	movs	r6, #0
 807ef20:	42a6      	cmp	r6, r4
 807ef22:	d109      	bne.n	807ef38 <__libc_init_array+0x24>
 807ef24:	4d0b      	ldr	r5, [pc, #44]	; (807ef54 <__libc_init_array+0x40>)
 807ef26:	4c0c      	ldr	r4, [pc, #48]	; (807ef58 <__libc_init_array+0x44>)
 807ef28:	f000 f820 	bl	807ef6c <_init>
 807ef2c:	1b64      	subs	r4, r4, r5
 807ef2e:	10a4      	asrs	r4, r4, #2
 807ef30:	2600      	movs	r6, #0
 807ef32:	42a6      	cmp	r6, r4
 807ef34:	d105      	bne.n	807ef42 <__libc_init_array+0x2e>
 807ef36:	bd70      	pop	{r4, r5, r6, pc}
 807ef38:	f855 3b04 	ldr.w	r3, [r5], #4
 807ef3c:	4798      	blx	r3
 807ef3e:	3601      	adds	r6, #1
 807ef40:	e7ee      	b.n	807ef20 <__libc_init_array+0xc>
 807ef42:	f855 3b04 	ldr.w	r3, [r5], #4
 807ef46:	4798      	blx	r3
 807ef48:	3601      	adds	r6, #1
 807ef4a:	e7f2      	b.n	807ef32 <__libc_init_array+0x1e>
 807ef4c:	0807f030 	.word	0x0807f030
 807ef50:	0807f030 	.word	0x0807f030
 807ef54:	0807f030 	.word	0x0807f030
 807ef58:	0807f034 	.word	0x0807f034

0807ef5c <memset>:
 807ef5c:	4402      	add	r2, r0
 807ef5e:	4603      	mov	r3, r0
 807ef60:	4293      	cmp	r3, r2
 807ef62:	d100      	bne.n	807ef66 <memset+0xa>
 807ef64:	4770      	bx	lr
 807ef66:	f803 1b01 	strb.w	r1, [r3], #1
 807ef6a:	e7f9      	b.n	807ef60 <memset+0x4>

0807ef6c <_init>:
 807ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807ef6e:	bf00      	nop
 807ef70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807ef72:	bc08      	pop	{r3}
 807ef74:	469e      	mov	lr, r3
 807ef76:	4770      	bx	lr

0807ef78 <_fini>:
 807ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807ef7a:	bf00      	nop
 807ef7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807ef7e:	bc08      	pop	{r3}
 807ef80:	469e      	mov	lr, r3
 807ef82:	4770      	bx	lr
