
dfu2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08078000  08078000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e54  08078198  08078198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0807efec  0807efec  00007fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807f090  0807f090  000090dc  2**0
                  CONTENTS
  4 .ARM          00000008  0807f090  0807f090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807f098  0807f098  000090dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807f098  0807f098  00008098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807f09c  0807f09c  0000809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0807f0a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  200000dc  0807f17c  000090dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0807f17c  00009f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d350  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec5  00000000  00000000  0001645c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00019328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000955  00000000  00000000  00019fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018086  00000000  00000000  0001a91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa16  00000000  00000000  000329a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ef3  00000000  00000000  000423b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c92ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  000c92f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000cc4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08078198 <__do_global_dtors_aux>:
 8078198:	b510      	push	{r4, lr}
 807819a:	4c05      	ldr	r4, [pc, #20]	@ (80781b0 <__do_global_dtors_aux+0x18>)
 807819c:	7823      	ldrb	r3, [r4, #0]
 807819e:	b933      	cbnz	r3, 80781ae <__do_global_dtors_aux+0x16>
 80781a0:	4b04      	ldr	r3, [pc, #16]	@ (80781b4 <__do_global_dtors_aux+0x1c>)
 80781a2:	b113      	cbz	r3, 80781aa <__do_global_dtors_aux+0x12>
 80781a4:	4804      	ldr	r0, [pc, #16]	@ (80781b8 <__do_global_dtors_aux+0x20>)
 80781a6:	f3af 8000 	nop.w
 80781aa:	2301      	movs	r3, #1
 80781ac:	7023      	strb	r3, [r4, #0]
 80781ae:	bd10      	pop	{r4, pc}
 80781b0:	200000dc 	.word	0x200000dc
 80781b4:	00000000 	.word	0x00000000
 80781b8:	0807efd4 	.word	0x0807efd4

080781bc <frame_dummy>:
 80781bc:	b508      	push	{r3, lr}
 80781be:	4b03      	ldr	r3, [pc, #12]	@ (80781cc <frame_dummy+0x10>)
 80781c0:	b11b      	cbz	r3, 80781ca <frame_dummy+0xe>
 80781c2:	4903      	ldr	r1, [pc, #12]	@ (80781d0 <frame_dummy+0x14>)
 80781c4:	4803      	ldr	r0, [pc, #12]	@ (80781d4 <frame_dummy+0x18>)
 80781c6:	f3af 8000 	nop.w
 80781ca:	bd08      	pop	{r3, pc}
 80781cc:	00000000 	.word	0x00000000
 80781d0:	200000e0 	.word	0x200000e0
 80781d4:	0807efd4 	.word	0x0807efd4

080781d8 <__aeabi_uldivmod>:
 80781d8:	b953      	cbnz	r3, 80781f0 <__aeabi_uldivmod+0x18>
 80781da:	b94a      	cbnz	r2, 80781f0 <__aeabi_uldivmod+0x18>
 80781dc:	2900      	cmp	r1, #0
 80781de:	bf08      	it	eq
 80781e0:	2800      	cmpeq	r0, #0
 80781e2:	bf1c      	itt	ne
 80781e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80781e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80781ec:	f000 b988 	b.w	8078500 <__aeabi_idiv0>
 80781f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80781f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80781f8:	f000 f806 	bl	8078208 <__udivmoddi4>
 80781fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8078200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8078204:	b004      	add	sp, #16
 8078206:	4770      	bx	lr

08078208 <__udivmoddi4>:
 8078208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 807820c:	9d08      	ldr	r5, [sp, #32]
 807820e:	468e      	mov	lr, r1
 8078210:	4604      	mov	r4, r0
 8078212:	4688      	mov	r8, r1
 8078214:	2b00      	cmp	r3, #0
 8078216:	d14a      	bne.n	80782ae <__udivmoddi4+0xa6>
 8078218:	428a      	cmp	r2, r1
 807821a:	4617      	mov	r7, r2
 807821c:	d962      	bls.n	80782e4 <__udivmoddi4+0xdc>
 807821e:	fab2 f682 	clz	r6, r2
 8078222:	b14e      	cbz	r6, 8078238 <__udivmoddi4+0x30>
 8078224:	f1c6 0320 	rsb	r3, r6, #32
 8078228:	fa01 f806 	lsl.w	r8, r1, r6
 807822c:	fa20 f303 	lsr.w	r3, r0, r3
 8078230:	40b7      	lsls	r7, r6
 8078232:	ea43 0808 	orr.w	r8, r3, r8
 8078236:	40b4      	lsls	r4, r6
 8078238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 807823c:	fa1f fc87 	uxth.w	ip, r7
 8078240:	fbb8 f1fe 	udiv	r1, r8, lr
 8078244:	0c23      	lsrs	r3, r4, #16
 8078246:	fb0e 8811 	mls	r8, lr, r1, r8
 807824a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 807824e:	fb01 f20c 	mul.w	r2, r1, ip
 8078252:	429a      	cmp	r2, r3
 8078254:	d909      	bls.n	807826a <__udivmoddi4+0x62>
 8078256:	18fb      	adds	r3, r7, r3
 8078258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 807825c:	f080 80ea 	bcs.w	8078434 <__udivmoddi4+0x22c>
 8078260:	429a      	cmp	r2, r3
 8078262:	f240 80e7 	bls.w	8078434 <__udivmoddi4+0x22c>
 8078266:	3902      	subs	r1, #2
 8078268:	443b      	add	r3, r7
 807826a:	1a9a      	subs	r2, r3, r2
 807826c:	b2a3      	uxth	r3, r4
 807826e:	fbb2 f0fe 	udiv	r0, r2, lr
 8078272:	fb0e 2210 	mls	r2, lr, r0, r2
 8078276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 807827a:	fb00 fc0c 	mul.w	ip, r0, ip
 807827e:	459c      	cmp	ip, r3
 8078280:	d909      	bls.n	8078296 <__udivmoddi4+0x8e>
 8078282:	18fb      	adds	r3, r7, r3
 8078284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8078288:	f080 80d6 	bcs.w	8078438 <__udivmoddi4+0x230>
 807828c:	459c      	cmp	ip, r3
 807828e:	f240 80d3 	bls.w	8078438 <__udivmoddi4+0x230>
 8078292:	443b      	add	r3, r7
 8078294:	3802      	subs	r0, #2
 8078296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 807829a:	eba3 030c 	sub.w	r3, r3, ip
 807829e:	2100      	movs	r1, #0
 80782a0:	b11d      	cbz	r5, 80782aa <__udivmoddi4+0xa2>
 80782a2:	40f3      	lsrs	r3, r6
 80782a4:	2200      	movs	r2, #0
 80782a6:	e9c5 3200 	strd	r3, r2, [r5]
 80782aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80782ae:	428b      	cmp	r3, r1
 80782b0:	d905      	bls.n	80782be <__udivmoddi4+0xb6>
 80782b2:	b10d      	cbz	r5, 80782b8 <__udivmoddi4+0xb0>
 80782b4:	e9c5 0100 	strd	r0, r1, [r5]
 80782b8:	2100      	movs	r1, #0
 80782ba:	4608      	mov	r0, r1
 80782bc:	e7f5      	b.n	80782aa <__udivmoddi4+0xa2>
 80782be:	fab3 f183 	clz	r1, r3
 80782c2:	2900      	cmp	r1, #0
 80782c4:	d146      	bne.n	8078354 <__udivmoddi4+0x14c>
 80782c6:	4573      	cmp	r3, lr
 80782c8:	d302      	bcc.n	80782d0 <__udivmoddi4+0xc8>
 80782ca:	4282      	cmp	r2, r0
 80782cc:	f200 8105 	bhi.w	80784da <__udivmoddi4+0x2d2>
 80782d0:	1a84      	subs	r4, r0, r2
 80782d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80782d6:	2001      	movs	r0, #1
 80782d8:	4690      	mov	r8, r2
 80782da:	2d00      	cmp	r5, #0
 80782dc:	d0e5      	beq.n	80782aa <__udivmoddi4+0xa2>
 80782de:	e9c5 4800 	strd	r4, r8, [r5]
 80782e2:	e7e2      	b.n	80782aa <__udivmoddi4+0xa2>
 80782e4:	2a00      	cmp	r2, #0
 80782e6:	f000 8090 	beq.w	807840a <__udivmoddi4+0x202>
 80782ea:	fab2 f682 	clz	r6, r2
 80782ee:	2e00      	cmp	r6, #0
 80782f0:	f040 80a4 	bne.w	807843c <__udivmoddi4+0x234>
 80782f4:	1a8a      	subs	r2, r1, r2
 80782f6:	0c03      	lsrs	r3, r0, #16
 80782f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80782fc:	b280      	uxth	r0, r0
 80782fe:	b2bc      	uxth	r4, r7
 8078300:	2101      	movs	r1, #1
 8078302:	fbb2 fcfe 	udiv	ip, r2, lr
 8078306:	fb0e 221c 	mls	r2, lr, ip, r2
 807830a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 807830e:	fb04 f20c 	mul.w	r2, r4, ip
 8078312:	429a      	cmp	r2, r3
 8078314:	d907      	bls.n	8078326 <__udivmoddi4+0x11e>
 8078316:	18fb      	adds	r3, r7, r3
 8078318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 807831c:	d202      	bcs.n	8078324 <__udivmoddi4+0x11c>
 807831e:	429a      	cmp	r2, r3
 8078320:	f200 80e0 	bhi.w	80784e4 <__udivmoddi4+0x2dc>
 8078324:	46c4      	mov	ip, r8
 8078326:	1a9b      	subs	r3, r3, r2
 8078328:	fbb3 f2fe 	udiv	r2, r3, lr
 807832c:	fb0e 3312 	mls	r3, lr, r2, r3
 8078330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8078334:	fb02 f404 	mul.w	r4, r2, r4
 8078338:	429c      	cmp	r4, r3
 807833a:	d907      	bls.n	807834c <__udivmoddi4+0x144>
 807833c:	18fb      	adds	r3, r7, r3
 807833e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8078342:	d202      	bcs.n	807834a <__udivmoddi4+0x142>
 8078344:	429c      	cmp	r4, r3
 8078346:	f200 80ca 	bhi.w	80784de <__udivmoddi4+0x2d6>
 807834a:	4602      	mov	r2, r0
 807834c:	1b1b      	subs	r3, r3, r4
 807834e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8078352:	e7a5      	b.n	80782a0 <__udivmoddi4+0x98>
 8078354:	f1c1 0620 	rsb	r6, r1, #32
 8078358:	408b      	lsls	r3, r1
 807835a:	fa22 f706 	lsr.w	r7, r2, r6
 807835e:	431f      	orrs	r7, r3
 8078360:	fa0e f401 	lsl.w	r4, lr, r1
 8078364:	fa20 f306 	lsr.w	r3, r0, r6
 8078368:	fa2e fe06 	lsr.w	lr, lr, r6
 807836c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8078370:	4323      	orrs	r3, r4
 8078372:	fa00 f801 	lsl.w	r8, r0, r1
 8078376:	fa1f fc87 	uxth.w	ip, r7
 807837a:	fbbe f0f9 	udiv	r0, lr, r9
 807837e:	0c1c      	lsrs	r4, r3, #16
 8078380:	fb09 ee10 	mls	lr, r9, r0, lr
 8078384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8078388:	fb00 fe0c 	mul.w	lr, r0, ip
 807838c:	45a6      	cmp	lr, r4
 807838e:	fa02 f201 	lsl.w	r2, r2, r1
 8078392:	d909      	bls.n	80783a8 <__udivmoddi4+0x1a0>
 8078394:	193c      	adds	r4, r7, r4
 8078396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 807839a:	f080 809c 	bcs.w	80784d6 <__udivmoddi4+0x2ce>
 807839e:	45a6      	cmp	lr, r4
 80783a0:	f240 8099 	bls.w	80784d6 <__udivmoddi4+0x2ce>
 80783a4:	3802      	subs	r0, #2
 80783a6:	443c      	add	r4, r7
 80783a8:	eba4 040e 	sub.w	r4, r4, lr
 80783ac:	fa1f fe83 	uxth.w	lr, r3
 80783b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80783b4:	fb09 4413 	mls	r4, r9, r3, r4
 80783b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80783bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80783c0:	45a4      	cmp	ip, r4
 80783c2:	d908      	bls.n	80783d6 <__udivmoddi4+0x1ce>
 80783c4:	193c      	adds	r4, r7, r4
 80783c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80783ca:	f080 8082 	bcs.w	80784d2 <__udivmoddi4+0x2ca>
 80783ce:	45a4      	cmp	ip, r4
 80783d0:	d97f      	bls.n	80784d2 <__udivmoddi4+0x2ca>
 80783d2:	3b02      	subs	r3, #2
 80783d4:	443c      	add	r4, r7
 80783d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80783da:	eba4 040c 	sub.w	r4, r4, ip
 80783de:	fba0 ec02 	umull	lr, ip, r0, r2
 80783e2:	4564      	cmp	r4, ip
 80783e4:	4673      	mov	r3, lr
 80783e6:	46e1      	mov	r9, ip
 80783e8:	d362      	bcc.n	80784b0 <__udivmoddi4+0x2a8>
 80783ea:	d05f      	beq.n	80784ac <__udivmoddi4+0x2a4>
 80783ec:	b15d      	cbz	r5, 8078406 <__udivmoddi4+0x1fe>
 80783ee:	ebb8 0203 	subs.w	r2, r8, r3
 80783f2:	eb64 0409 	sbc.w	r4, r4, r9
 80783f6:	fa04 f606 	lsl.w	r6, r4, r6
 80783fa:	fa22 f301 	lsr.w	r3, r2, r1
 80783fe:	431e      	orrs	r6, r3
 8078400:	40cc      	lsrs	r4, r1
 8078402:	e9c5 6400 	strd	r6, r4, [r5]
 8078406:	2100      	movs	r1, #0
 8078408:	e74f      	b.n	80782aa <__udivmoddi4+0xa2>
 807840a:	fbb1 fcf2 	udiv	ip, r1, r2
 807840e:	0c01      	lsrs	r1, r0, #16
 8078410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8078414:	b280      	uxth	r0, r0
 8078416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 807841a:	463b      	mov	r3, r7
 807841c:	4638      	mov	r0, r7
 807841e:	463c      	mov	r4, r7
 8078420:	46b8      	mov	r8, r7
 8078422:	46be      	mov	lr, r7
 8078424:	2620      	movs	r6, #32
 8078426:	fbb1 f1f7 	udiv	r1, r1, r7
 807842a:	eba2 0208 	sub.w	r2, r2, r8
 807842e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8078432:	e766      	b.n	8078302 <__udivmoddi4+0xfa>
 8078434:	4601      	mov	r1, r0
 8078436:	e718      	b.n	807826a <__udivmoddi4+0x62>
 8078438:	4610      	mov	r0, r2
 807843a:	e72c      	b.n	8078296 <__udivmoddi4+0x8e>
 807843c:	f1c6 0220 	rsb	r2, r6, #32
 8078440:	fa2e f302 	lsr.w	r3, lr, r2
 8078444:	40b7      	lsls	r7, r6
 8078446:	40b1      	lsls	r1, r6
 8078448:	fa20 f202 	lsr.w	r2, r0, r2
 807844c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8078450:	430a      	orrs	r2, r1
 8078452:	fbb3 f8fe 	udiv	r8, r3, lr
 8078456:	b2bc      	uxth	r4, r7
 8078458:	fb0e 3318 	mls	r3, lr, r8, r3
 807845c:	0c11      	lsrs	r1, r2, #16
 807845e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8078462:	fb08 f904 	mul.w	r9, r8, r4
 8078466:	40b0      	lsls	r0, r6
 8078468:	4589      	cmp	r9, r1
 807846a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 807846e:	b280      	uxth	r0, r0
 8078470:	d93e      	bls.n	80784f0 <__udivmoddi4+0x2e8>
 8078472:	1879      	adds	r1, r7, r1
 8078474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8078478:	d201      	bcs.n	807847e <__udivmoddi4+0x276>
 807847a:	4589      	cmp	r9, r1
 807847c:	d81f      	bhi.n	80784be <__udivmoddi4+0x2b6>
 807847e:	eba1 0109 	sub.w	r1, r1, r9
 8078482:	fbb1 f9fe 	udiv	r9, r1, lr
 8078486:	fb09 f804 	mul.w	r8, r9, r4
 807848a:	fb0e 1119 	mls	r1, lr, r9, r1
 807848e:	b292      	uxth	r2, r2
 8078490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8078494:	4542      	cmp	r2, r8
 8078496:	d229      	bcs.n	80784ec <__udivmoddi4+0x2e4>
 8078498:	18ba      	adds	r2, r7, r2
 807849a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 807849e:	d2c4      	bcs.n	807842a <__udivmoddi4+0x222>
 80784a0:	4542      	cmp	r2, r8
 80784a2:	d2c2      	bcs.n	807842a <__udivmoddi4+0x222>
 80784a4:	f1a9 0102 	sub.w	r1, r9, #2
 80784a8:	443a      	add	r2, r7
 80784aa:	e7be      	b.n	807842a <__udivmoddi4+0x222>
 80784ac:	45f0      	cmp	r8, lr
 80784ae:	d29d      	bcs.n	80783ec <__udivmoddi4+0x1e4>
 80784b0:	ebbe 0302 	subs.w	r3, lr, r2
 80784b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80784b8:	3801      	subs	r0, #1
 80784ba:	46e1      	mov	r9, ip
 80784bc:	e796      	b.n	80783ec <__udivmoddi4+0x1e4>
 80784be:	eba7 0909 	sub.w	r9, r7, r9
 80784c2:	4449      	add	r1, r9
 80784c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80784c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80784cc:	fb09 f804 	mul.w	r8, r9, r4
 80784d0:	e7db      	b.n	807848a <__udivmoddi4+0x282>
 80784d2:	4673      	mov	r3, lr
 80784d4:	e77f      	b.n	80783d6 <__udivmoddi4+0x1ce>
 80784d6:	4650      	mov	r0, sl
 80784d8:	e766      	b.n	80783a8 <__udivmoddi4+0x1a0>
 80784da:	4608      	mov	r0, r1
 80784dc:	e6fd      	b.n	80782da <__udivmoddi4+0xd2>
 80784de:	443b      	add	r3, r7
 80784e0:	3a02      	subs	r2, #2
 80784e2:	e733      	b.n	807834c <__udivmoddi4+0x144>
 80784e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80784e8:	443b      	add	r3, r7
 80784ea:	e71c      	b.n	8078326 <__udivmoddi4+0x11e>
 80784ec:	4649      	mov	r1, r9
 80784ee:	e79c      	b.n	807842a <__udivmoddi4+0x222>
 80784f0:	eba1 0109 	sub.w	r1, r1, r9
 80784f4:	46c4      	mov	ip, r8
 80784f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80784fa:	fb09 f804 	mul.w	r8, r9, r4
 80784fe:	e7c4      	b.n	807848a <__udivmoddi4+0x282>

08078500 <__aeabi_idiv0>:
 8078500:	4770      	bx	lr
 8078502:	bf00      	nop

08078504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8078504:	b580      	push	{r7, lr}
 8078506:	b082      	sub	sp, #8
 8078508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 807850a:	f000 f993 	bl	8078834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 807850e:	f000 f82b 	bl	8078568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8078512:	f000 f893 	bl	807863c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8078516:	f005 ffc1 	bl	807e49c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MX_USB_DEVICE_Init();
 807851a:	f005 ffbf 	bl	807e49c <MX_USB_DEVICE_Init>

  dfu_test();
 807851e:	f005 ffb6 	bl	807e48e <dfu_test>

  uint32_t now = 0, then = 0;
 8078522:	2300      	movs	r3, #0
 8078524:	603b      	str	r3, [r7, #0]
 8078526:	2300      	movs	r3, #0
 8078528:	607b      	str	r3, [r7, #4]

  while (1)
  {

	now = HAL_GetTick();
 807852a:	f000 f9e9 	bl	8078900 <HAL_GetTick>
 807852e:	6038      	str	r0, [r7, #0]
	if (now % 50 == 0 && now != then)
 8078530:	683a      	ldr	r2, [r7, #0]
 8078532:	4b0b      	ldr	r3, [pc, #44]	@ (8078560 <main+0x5c>)
 8078534:	fba3 1302 	umull	r1, r3, r3, r2
 8078538:	091b      	lsrs	r3, r3, #4
 807853a:	2132      	movs	r1, #50	@ 0x32
 807853c:	fb01 f303 	mul.w	r3, r1, r3
 8078540:	1ad3      	subs	r3, r2, r3
 8078542:	2b00      	cmp	r3, #0
 8078544:	d1f1      	bne.n	807852a <main+0x26>
 8078546:	683a      	ldr	r2, [r7, #0]
 8078548:	687b      	ldr	r3, [r7, #4]
 807854a:	429a      	cmp	r2, r3
 807854c:	d0ed      	beq.n	807852a <main+0x26>
	{

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 807854e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8078552:	4804      	ldr	r0, [pc, #16]	@ (8078564 <main+0x60>)
 8078554:	f000 ff9b 	bl	807948e <HAL_GPIO_TogglePin>

		then = now;
 8078558:	683b      	ldr	r3, [r7, #0]
 807855a:	607b      	str	r3, [r7, #4]
	now = HAL_GetTick();
 807855c:	e7e5      	b.n	807852a <main+0x26>
 807855e:	bf00      	nop
 8078560:	51eb851f 	.word	0x51eb851f
 8078564:	40020800 	.word	0x40020800

08078568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8078568:	b580      	push	{r7, lr}
 807856a:	b094      	sub	sp, #80	@ 0x50
 807856c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 807856e:	f107 0320 	add.w	r3, r7, #32
 8078572:	2230      	movs	r2, #48	@ 0x30
 8078574:	2100      	movs	r1, #0
 8078576:	4618      	mov	r0, r3
 8078578:	f006 fd00 	bl	807ef7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 807857c:	f107 030c 	add.w	r3, r7, #12
 8078580:	2200      	movs	r2, #0
 8078582:	601a      	str	r2, [r3, #0]
 8078584:	605a      	str	r2, [r3, #4]
 8078586:	609a      	str	r2, [r3, #8]
 8078588:	60da      	str	r2, [r3, #12]
 807858a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 807858c:	2300      	movs	r3, #0
 807858e:	60bb      	str	r3, [r7, #8]
 8078590:	4b28      	ldr	r3, [pc, #160]	@ (8078634 <SystemClock_Config+0xcc>)
 8078592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8078594:	4a27      	ldr	r2, [pc, #156]	@ (8078634 <SystemClock_Config+0xcc>)
 8078596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807859a:	6413      	str	r3, [r2, #64]	@ 0x40
 807859c:	4b25      	ldr	r3, [pc, #148]	@ (8078634 <SystemClock_Config+0xcc>)
 807859e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80785a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80785a4:	60bb      	str	r3, [r7, #8]
 80785a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80785a8:	2300      	movs	r3, #0
 80785aa:	607b      	str	r3, [r7, #4]
 80785ac:	4b22      	ldr	r3, [pc, #136]	@ (8078638 <SystemClock_Config+0xd0>)
 80785ae:	681b      	ldr	r3, [r3, #0]
 80785b0:	4a21      	ldr	r2, [pc, #132]	@ (8078638 <SystemClock_Config+0xd0>)
 80785b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80785b6:	6013      	str	r3, [r2, #0]
 80785b8:	4b1f      	ldr	r3, [pc, #124]	@ (8078638 <SystemClock_Config+0xd0>)
 80785ba:	681b      	ldr	r3, [r3, #0]
 80785bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80785c0:	607b      	str	r3, [r7, #4]
 80785c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80785c4:	2301      	movs	r3, #1
 80785c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80785c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80785cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80785ce:	2302      	movs	r3, #2
 80785d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80785d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80785d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80785d8:	2319      	movs	r3, #25
 80785da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80785dc:	23c0      	movs	r3, #192	@ 0xc0
 80785de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80785e0:	2302      	movs	r3, #2
 80785e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80785e4:	2304      	movs	r3, #4
 80785e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80785e8:	f107 0320 	add.w	r3, r7, #32
 80785ec:	4618      	mov	r0, r3
 80785ee:	f002 f8c3 	bl	807a778 <HAL_RCC_OscConfig>
 80785f2:	4603      	mov	r3, r0
 80785f4:	2b00      	cmp	r3, #0
 80785f6:	d001      	beq.n	80785fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80785f8:	f000 f872 	bl	80786e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80785fc:	230f      	movs	r3, #15
 80785fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8078600:	2302      	movs	r3, #2
 8078602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8078604:	2300      	movs	r3, #0
 8078606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8078608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 807860c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 807860e:	2300      	movs	r3, #0
 8078610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8078612:	f107 030c 	add.w	r3, r7, #12
 8078616:	2103      	movs	r1, #3
 8078618:	4618      	mov	r0, r3
 807861a:	f002 fb25 	bl	807ac68 <HAL_RCC_ClockConfig>
 807861e:	4603      	mov	r3, r0
 8078620:	2b00      	cmp	r3, #0
 8078622:	d001      	beq.n	8078628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8078624:	f000 f85c 	bl	80786e0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8078628:	f002 fc04 	bl	807ae34 <HAL_RCC_EnableCSS>
}
 807862c:	bf00      	nop
 807862e:	3750      	adds	r7, #80	@ 0x50
 8078630:	46bd      	mov	sp, r7
 8078632:	bd80      	pop	{r7, pc}
 8078634:	40023800 	.word	0x40023800
 8078638:	40007000 	.word	0x40007000

0807863c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 807863c:	b580      	push	{r7, lr}
 807863e:	b088      	sub	sp, #32
 8078640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8078642:	f107 030c 	add.w	r3, r7, #12
 8078646:	2200      	movs	r2, #0
 8078648:	601a      	str	r2, [r3, #0]
 807864a:	605a      	str	r2, [r3, #4]
 807864c:	609a      	str	r2, [r3, #8]
 807864e:	60da      	str	r2, [r3, #12]
 8078650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8078652:	2300      	movs	r3, #0
 8078654:	60bb      	str	r3, [r7, #8]
 8078656:	4b20      	ldr	r3, [pc, #128]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 8078658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807865a:	4a1f      	ldr	r2, [pc, #124]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 807865c:	f043 0304 	orr.w	r3, r3, #4
 8078660:	6313      	str	r3, [r2, #48]	@ 0x30
 8078662:	4b1d      	ldr	r3, [pc, #116]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 8078664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8078666:	f003 0304 	and.w	r3, r3, #4
 807866a:	60bb      	str	r3, [r7, #8]
 807866c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 807866e:	2300      	movs	r3, #0
 8078670:	607b      	str	r3, [r7, #4]
 8078672:	4b19      	ldr	r3, [pc, #100]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 8078674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8078676:	4a18      	ldr	r2, [pc, #96]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 8078678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 807867c:	6313      	str	r3, [r2, #48]	@ 0x30
 807867e:	4b16      	ldr	r3, [pc, #88]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 8078680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8078682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8078686:	607b      	str	r3, [r7, #4]
 8078688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 807868a:	2300      	movs	r3, #0
 807868c:	603b      	str	r3, [r7, #0]
 807868e:	4b12      	ldr	r3, [pc, #72]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 8078690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8078692:	4a11      	ldr	r2, [pc, #68]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 8078694:	f043 0301 	orr.w	r3, r3, #1
 8078698:	6313      	str	r3, [r2, #48]	@ 0x30
 807869a:	4b0f      	ldr	r3, [pc, #60]	@ (80786d8 <MX_GPIO_Init+0x9c>)
 807869c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807869e:	f003 0301 	and.w	r3, r3, #1
 80786a2:	603b      	str	r3, [r7, #0]
 80786a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80786a6:	2201      	movs	r2, #1
 80786a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80786ac:	480b      	ldr	r0, [pc, #44]	@ (80786dc <MX_GPIO_Init+0xa0>)
 80786ae:	f000 fed5 	bl	807945c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80786b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80786b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80786b8:	2311      	movs	r3, #17
 80786ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80786bc:	2300      	movs	r3, #0
 80786be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80786c0:	2300      	movs	r3, #0
 80786c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80786c4:	f107 030c 	add.w	r3, r7, #12
 80786c8:	4619      	mov	r1, r3
 80786ca:	4804      	ldr	r0, [pc, #16]	@ (80786dc <MX_GPIO_Init+0xa0>)
 80786cc:	f000 fd42 	bl	8079154 <HAL_GPIO_Init>

}
 80786d0:	bf00      	nop
 80786d2:	3720      	adds	r7, #32
 80786d4:	46bd      	mov	sp, r7
 80786d6:	bd80      	pop	{r7, pc}
 80786d8:	40023800 	.word	0x40023800
 80786dc:	40020800 	.word	0x40020800

080786e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80786e0:	b480      	push	{r7}
 80786e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80786e4:	b672      	cpsid	i
}
 80786e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80786e8:	bf00      	nop
 80786ea:	e7fd      	b.n	80786e8 <Error_Handler+0x8>

080786ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80786ec:	b480      	push	{r7}
 80786ee:	b083      	sub	sp, #12
 80786f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80786f2:	2300      	movs	r3, #0
 80786f4:	607b      	str	r3, [r7, #4]
 80786f6:	4b10      	ldr	r3, [pc, #64]	@ (8078738 <HAL_MspInit+0x4c>)
 80786f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80786fa:	4a0f      	ldr	r2, [pc, #60]	@ (8078738 <HAL_MspInit+0x4c>)
 80786fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8078700:	6453      	str	r3, [r2, #68]	@ 0x44
 8078702:	4b0d      	ldr	r3, [pc, #52]	@ (8078738 <HAL_MspInit+0x4c>)
 8078704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8078706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 807870a:	607b      	str	r3, [r7, #4]
 807870c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 807870e:	2300      	movs	r3, #0
 8078710:	603b      	str	r3, [r7, #0]
 8078712:	4b09      	ldr	r3, [pc, #36]	@ (8078738 <HAL_MspInit+0x4c>)
 8078714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8078716:	4a08      	ldr	r2, [pc, #32]	@ (8078738 <HAL_MspInit+0x4c>)
 8078718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807871c:	6413      	str	r3, [r2, #64]	@ 0x40
 807871e:	4b06      	ldr	r3, [pc, #24]	@ (8078738 <HAL_MspInit+0x4c>)
 8078720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8078722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8078726:	603b      	str	r3, [r7, #0]
 8078728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 807872a:	bf00      	nop
 807872c:	370c      	adds	r7, #12
 807872e:	46bd      	mov	sp, r7
 8078730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078734:	4770      	bx	lr
 8078736:	bf00      	nop
 8078738:	40023800 	.word	0x40023800

0807873c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 807873c:	b580      	push	{r7, lr}
 807873e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8078740:	f002 fc56 	bl	807aff0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8078744:	bf00      	nop
 8078746:	e7fd      	b.n	8078744 <NMI_Handler+0x8>

08078748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8078748:	b480      	push	{r7}
 807874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 807874c:	bf00      	nop
 807874e:	e7fd      	b.n	807874c <HardFault_Handler+0x4>

08078750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8078750:	b480      	push	{r7}
 8078752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8078754:	bf00      	nop
 8078756:	e7fd      	b.n	8078754 <MemManage_Handler+0x4>

08078758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8078758:	b480      	push	{r7}
 807875a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 807875c:	bf00      	nop
 807875e:	e7fd      	b.n	807875c <BusFault_Handler+0x4>

08078760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8078760:	b480      	push	{r7}
 8078762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8078764:	bf00      	nop
 8078766:	e7fd      	b.n	8078764 <UsageFault_Handler+0x4>

08078768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8078768:	b480      	push	{r7}
 807876a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 807876c:	bf00      	nop
 807876e:	46bd      	mov	sp, r7
 8078770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078774:	4770      	bx	lr

08078776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8078776:	b480      	push	{r7}
 8078778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 807877a:	bf00      	nop
 807877c:	46bd      	mov	sp, r7
 807877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078782:	4770      	bx	lr

08078784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8078784:	b480      	push	{r7}
 8078786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8078788:	bf00      	nop
 807878a:	46bd      	mov	sp, r7
 807878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078790:	4770      	bx	lr

08078792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8078792:	b580      	push	{r7, lr}
 8078794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8078796:	f000 f89f 	bl	80788d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 807879a:	bf00      	nop
 807879c:	bd80      	pop	{r7, pc}
	...

080787a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80787a0:	b580      	push	{r7, lr}
 80787a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80787a4:	4802      	ldr	r0, [pc, #8]	@ (80787b0 <OTG_FS_IRQHandler+0x10>)
 80787a6:	f001 f815 	bl	80797d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80787aa:	bf00      	nop
 80787ac:	bd80      	pop	{r7, pc}
 80787ae:	bf00      	nop
 80787b0:	200006ec 	.word	0x200006ec

080787b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80787b4:	b480      	push	{r7}
 80787b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80787b8:	4b07      	ldr	r3, [pc, #28]	@ (80787d8 <SystemInit+0x24>)
 80787ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80787be:	4a06      	ldr	r2, [pc, #24]	@ (80787d8 <SystemInit+0x24>)
 80787c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80787c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80787c8:	4b03      	ldr	r3, [pc, #12]	@ (80787d8 <SystemInit+0x24>)
 80787ca:	4a04      	ldr	r2, [pc, #16]	@ (80787dc <SystemInit+0x28>)
 80787cc:	609a      	str	r2, [r3, #8]
#endif
}
 80787ce:	bf00      	nop
 80787d0:	46bd      	mov	sp, r7
 80787d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80787d6:	4770      	bx	lr
 80787d8:	e000ed00 	.word	0xe000ed00
 80787dc:	08078000 	.word	0x08078000

080787e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80787e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8078818 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80787e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80787e6:	e003      	b.n	80787f0 <LoopCopyDataInit>

080787e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80787e8:	4b0c      	ldr	r3, [pc, #48]	@ (807881c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80787ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80787ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80787ee:	3104      	adds	r1, #4

080787f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80787f0:	480b      	ldr	r0, [pc, #44]	@ (8078820 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80787f2:	4b0c      	ldr	r3, [pc, #48]	@ (8078824 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80787f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80787f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80787f8:	d3f6      	bcc.n	80787e8 <CopyDataInit>
  ldr  r2, =_sbss
 80787fa:	4a0b      	ldr	r2, [pc, #44]	@ (8078828 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80787fc:	e002      	b.n	8078804 <LoopFillZerobss>

080787fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80787fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8078800:	f842 3b04 	str.w	r3, [r2], #4

08078804 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8078804:	4b09      	ldr	r3, [pc, #36]	@ (807882c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8078806:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8078808:	d3f9      	bcc.n	80787fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 807880a:	f7ff ffd3 	bl	80787b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 807880e:	f006 fbbd 	bl	807ef8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8078812:	f7ff fe77 	bl	8078504 <main>
  bx  lr    
 8078816:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8078818:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 807881c:	0807f0a0 	.word	0x0807f0a0
  ldr  r0, =_sdata
 8078820:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8078824:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 8078828:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 807882c:	20000f14 	.word	0x20000f14

08078830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8078830:	e7fe      	b.n	8078830 <ADC_IRQHandler>
	...

08078834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8078834:	b580      	push	{r7, lr}
 8078836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8078838:	4b0e      	ldr	r3, [pc, #56]	@ (8078874 <HAL_Init+0x40>)
 807883a:	681b      	ldr	r3, [r3, #0]
 807883c:	4a0d      	ldr	r2, [pc, #52]	@ (8078874 <HAL_Init+0x40>)
 807883e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8078842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8078844:	4b0b      	ldr	r3, [pc, #44]	@ (8078874 <HAL_Init+0x40>)
 8078846:	681b      	ldr	r3, [r3, #0]
 8078848:	4a0a      	ldr	r2, [pc, #40]	@ (8078874 <HAL_Init+0x40>)
 807884a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 807884e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8078850:	4b08      	ldr	r3, [pc, #32]	@ (8078874 <HAL_Init+0x40>)
 8078852:	681b      	ldr	r3, [r3, #0]
 8078854:	4a07      	ldr	r2, [pc, #28]	@ (8078874 <HAL_Init+0x40>)
 8078856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 807885a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 807885c:	2003      	movs	r0, #3
 807885e:	f000 f94f 	bl	8078b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8078862:	2000      	movs	r0, #0
 8078864:	f000 f808 	bl	8078878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8078868:	f7ff ff40 	bl	80786ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 807886c:	2300      	movs	r3, #0
}
 807886e:	4618      	mov	r0, r3
 8078870:	bd80      	pop	{r7, pc}
 8078872:	bf00      	nop
 8078874:	40023c00 	.word	0x40023c00

08078878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8078878:	b580      	push	{r7, lr}
 807887a:	b082      	sub	sp, #8
 807887c:	af00      	add	r7, sp, #0
 807887e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8078880:	4b12      	ldr	r3, [pc, #72]	@ (80788cc <HAL_InitTick+0x54>)
 8078882:	681a      	ldr	r2, [r3, #0]
 8078884:	4b12      	ldr	r3, [pc, #72]	@ (80788d0 <HAL_InitTick+0x58>)
 8078886:	781b      	ldrb	r3, [r3, #0]
 8078888:	4619      	mov	r1, r3
 807888a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 807888e:	fbb3 f3f1 	udiv	r3, r3, r1
 8078892:	fbb2 f3f3 	udiv	r3, r2, r3
 8078896:	4618      	mov	r0, r3
 8078898:	f000 f967 	bl	8078b6a <HAL_SYSTICK_Config>
 807889c:	4603      	mov	r3, r0
 807889e:	2b00      	cmp	r3, #0
 80788a0:	d001      	beq.n	80788a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80788a2:	2301      	movs	r3, #1
 80788a4:	e00e      	b.n	80788c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80788a6:	687b      	ldr	r3, [r7, #4]
 80788a8:	2b0f      	cmp	r3, #15
 80788aa:	d80a      	bhi.n	80788c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80788ac:	2200      	movs	r2, #0
 80788ae:	6879      	ldr	r1, [r7, #4]
 80788b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80788b4:	f000 f92f 	bl	8078b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80788b8:	4a06      	ldr	r2, [pc, #24]	@ (80788d4 <HAL_InitTick+0x5c>)
 80788ba:	687b      	ldr	r3, [r7, #4]
 80788bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80788be:	2300      	movs	r3, #0
 80788c0:	e000      	b.n	80788c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80788c2:	2301      	movs	r3, #1
}
 80788c4:	4618      	mov	r0, r3
 80788c6:	3708      	adds	r7, #8
 80788c8:	46bd      	mov	sp, r7
 80788ca:	bd80      	pop	{r7, pc}
 80788cc:	20000000 	.word	0x20000000
 80788d0:	20000008 	.word	0x20000008
 80788d4:	20000004 	.word	0x20000004

080788d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80788d8:	b480      	push	{r7}
 80788da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80788dc:	4b06      	ldr	r3, [pc, #24]	@ (80788f8 <HAL_IncTick+0x20>)
 80788de:	781b      	ldrb	r3, [r3, #0]
 80788e0:	461a      	mov	r2, r3
 80788e2:	4b06      	ldr	r3, [pc, #24]	@ (80788fc <HAL_IncTick+0x24>)
 80788e4:	681b      	ldr	r3, [r3, #0]
 80788e6:	4413      	add	r3, r2
 80788e8:	4a04      	ldr	r2, [pc, #16]	@ (80788fc <HAL_IncTick+0x24>)
 80788ea:	6013      	str	r3, [r2, #0]
}
 80788ec:	bf00      	nop
 80788ee:	46bd      	mov	sp, r7
 80788f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80788f4:	4770      	bx	lr
 80788f6:	bf00      	nop
 80788f8:	20000008 	.word	0x20000008
 80788fc:	200000f8 	.word	0x200000f8

08078900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8078900:	b480      	push	{r7}
 8078902:	af00      	add	r7, sp, #0
  return uwTick;
 8078904:	4b03      	ldr	r3, [pc, #12]	@ (8078914 <HAL_GetTick+0x14>)
 8078906:	681b      	ldr	r3, [r3, #0]
}
 8078908:	4618      	mov	r0, r3
 807890a:	46bd      	mov	sp, r7
 807890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078910:	4770      	bx	lr
 8078912:	bf00      	nop
 8078914:	200000f8 	.word	0x200000f8

08078918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8078918:	b580      	push	{r7, lr}
 807891a:	b084      	sub	sp, #16
 807891c:	af00      	add	r7, sp, #0
 807891e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8078920:	f7ff ffee 	bl	8078900 <HAL_GetTick>
 8078924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8078926:	687b      	ldr	r3, [r7, #4]
 8078928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 807892a:	68fb      	ldr	r3, [r7, #12]
 807892c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8078930:	d005      	beq.n	807893e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8078932:	4b0a      	ldr	r3, [pc, #40]	@ (807895c <HAL_Delay+0x44>)
 8078934:	781b      	ldrb	r3, [r3, #0]
 8078936:	461a      	mov	r2, r3
 8078938:	68fb      	ldr	r3, [r7, #12]
 807893a:	4413      	add	r3, r2
 807893c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 807893e:	bf00      	nop
 8078940:	f7ff ffde 	bl	8078900 <HAL_GetTick>
 8078944:	4602      	mov	r2, r0
 8078946:	68bb      	ldr	r3, [r7, #8]
 8078948:	1ad3      	subs	r3, r2, r3
 807894a:	68fa      	ldr	r2, [r7, #12]
 807894c:	429a      	cmp	r2, r3
 807894e:	d8f7      	bhi.n	8078940 <HAL_Delay+0x28>
  {
  }
}
 8078950:	bf00      	nop
 8078952:	bf00      	nop
 8078954:	3710      	adds	r7, #16
 8078956:	46bd      	mov	sp, r7
 8078958:	bd80      	pop	{r7, pc}
 807895a:	bf00      	nop
 807895c:	20000008 	.word	0x20000008

08078960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8078960:	b480      	push	{r7}
 8078962:	b085      	sub	sp, #20
 8078964:	af00      	add	r7, sp, #0
 8078966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8078968:	687b      	ldr	r3, [r7, #4]
 807896a:	f003 0307 	and.w	r3, r3, #7
 807896e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8078970:	4b0c      	ldr	r3, [pc, #48]	@ (80789a4 <__NVIC_SetPriorityGrouping+0x44>)
 8078972:	68db      	ldr	r3, [r3, #12]
 8078974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8078976:	68ba      	ldr	r2, [r7, #8]
 8078978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 807897c:	4013      	ands	r3, r2
 807897e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8078980:	68fb      	ldr	r3, [r7, #12]
 8078982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8078984:	68bb      	ldr	r3, [r7, #8]
 8078986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8078988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 807898c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8078990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8078992:	4a04      	ldr	r2, [pc, #16]	@ (80789a4 <__NVIC_SetPriorityGrouping+0x44>)
 8078994:	68bb      	ldr	r3, [r7, #8]
 8078996:	60d3      	str	r3, [r2, #12]
}
 8078998:	bf00      	nop
 807899a:	3714      	adds	r7, #20
 807899c:	46bd      	mov	sp, r7
 807899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80789a2:	4770      	bx	lr
 80789a4:	e000ed00 	.word	0xe000ed00

080789a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80789a8:	b480      	push	{r7}
 80789aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80789ac:	4b04      	ldr	r3, [pc, #16]	@ (80789c0 <__NVIC_GetPriorityGrouping+0x18>)
 80789ae:	68db      	ldr	r3, [r3, #12]
 80789b0:	0a1b      	lsrs	r3, r3, #8
 80789b2:	f003 0307 	and.w	r3, r3, #7
}
 80789b6:	4618      	mov	r0, r3
 80789b8:	46bd      	mov	sp, r7
 80789ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80789be:	4770      	bx	lr
 80789c0:	e000ed00 	.word	0xe000ed00

080789c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80789c4:	b480      	push	{r7}
 80789c6:	b083      	sub	sp, #12
 80789c8:	af00      	add	r7, sp, #0
 80789ca:	4603      	mov	r3, r0
 80789cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80789ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789d2:	2b00      	cmp	r3, #0
 80789d4:	db0b      	blt.n	80789ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80789d6:	79fb      	ldrb	r3, [r7, #7]
 80789d8:	f003 021f 	and.w	r2, r3, #31
 80789dc:	4907      	ldr	r1, [pc, #28]	@ (80789fc <__NVIC_EnableIRQ+0x38>)
 80789de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789e2:	095b      	lsrs	r3, r3, #5
 80789e4:	2001      	movs	r0, #1
 80789e6:	fa00 f202 	lsl.w	r2, r0, r2
 80789ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80789ee:	bf00      	nop
 80789f0:	370c      	adds	r7, #12
 80789f2:	46bd      	mov	sp, r7
 80789f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80789f8:	4770      	bx	lr
 80789fa:	bf00      	nop
 80789fc:	e000e100 	.word	0xe000e100

08078a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8078a00:	b480      	push	{r7}
 8078a02:	b083      	sub	sp, #12
 8078a04:	af00      	add	r7, sp, #0
 8078a06:	4603      	mov	r3, r0
 8078a08:	6039      	str	r1, [r7, #0]
 8078a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8078a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8078a10:	2b00      	cmp	r3, #0
 8078a12:	db0a      	blt.n	8078a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8078a14:	683b      	ldr	r3, [r7, #0]
 8078a16:	b2da      	uxtb	r2, r3
 8078a18:	490c      	ldr	r1, [pc, #48]	@ (8078a4c <__NVIC_SetPriority+0x4c>)
 8078a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8078a1e:	0112      	lsls	r2, r2, #4
 8078a20:	b2d2      	uxtb	r2, r2
 8078a22:	440b      	add	r3, r1
 8078a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8078a28:	e00a      	b.n	8078a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8078a2a:	683b      	ldr	r3, [r7, #0]
 8078a2c:	b2da      	uxtb	r2, r3
 8078a2e:	4908      	ldr	r1, [pc, #32]	@ (8078a50 <__NVIC_SetPriority+0x50>)
 8078a30:	79fb      	ldrb	r3, [r7, #7]
 8078a32:	f003 030f 	and.w	r3, r3, #15
 8078a36:	3b04      	subs	r3, #4
 8078a38:	0112      	lsls	r2, r2, #4
 8078a3a:	b2d2      	uxtb	r2, r2
 8078a3c:	440b      	add	r3, r1
 8078a3e:	761a      	strb	r2, [r3, #24]
}
 8078a40:	bf00      	nop
 8078a42:	370c      	adds	r7, #12
 8078a44:	46bd      	mov	sp, r7
 8078a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078a4a:	4770      	bx	lr
 8078a4c:	e000e100 	.word	0xe000e100
 8078a50:	e000ed00 	.word	0xe000ed00

08078a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8078a54:	b480      	push	{r7}
 8078a56:	b089      	sub	sp, #36	@ 0x24
 8078a58:	af00      	add	r7, sp, #0
 8078a5a:	60f8      	str	r0, [r7, #12]
 8078a5c:	60b9      	str	r1, [r7, #8]
 8078a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8078a60:	68fb      	ldr	r3, [r7, #12]
 8078a62:	f003 0307 	and.w	r3, r3, #7
 8078a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8078a68:	69fb      	ldr	r3, [r7, #28]
 8078a6a:	f1c3 0307 	rsb	r3, r3, #7
 8078a6e:	2b04      	cmp	r3, #4
 8078a70:	bf28      	it	cs
 8078a72:	2304      	movcs	r3, #4
 8078a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8078a76:	69fb      	ldr	r3, [r7, #28]
 8078a78:	3304      	adds	r3, #4
 8078a7a:	2b06      	cmp	r3, #6
 8078a7c:	d902      	bls.n	8078a84 <NVIC_EncodePriority+0x30>
 8078a7e:	69fb      	ldr	r3, [r7, #28]
 8078a80:	3b03      	subs	r3, #3
 8078a82:	e000      	b.n	8078a86 <NVIC_EncodePriority+0x32>
 8078a84:	2300      	movs	r3, #0
 8078a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8078a88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8078a8c:	69bb      	ldr	r3, [r7, #24]
 8078a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8078a92:	43da      	mvns	r2, r3
 8078a94:	68bb      	ldr	r3, [r7, #8]
 8078a96:	401a      	ands	r2, r3
 8078a98:	697b      	ldr	r3, [r7, #20]
 8078a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8078a9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8078aa0:	697b      	ldr	r3, [r7, #20]
 8078aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8078aa6:	43d9      	mvns	r1, r3
 8078aa8:	687b      	ldr	r3, [r7, #4]
 8078aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8078aac:	4313      	orrs	r3, r2
         );
}
 8078aae:	4618      	mov	r0, r3
 8078ab0:	3724      	adds	r7, #36	@ 0x24
 8078ab2:	46bd      	mov	sp, r7
 8078ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078ab8:	4770      	bx	lr
	...

08078abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8078abc:	b580      	push	{r7, lr}
 8078abe:	b082      	sub	sp, #8
 8078ac0:	af00      	add	r7, sp, #0
 8078ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8078ac4:	687b      	ldr	r3, [r7, #4]
 8078ac6:	3b01      	subs	r3, #1
 8078ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8078acc:	d301      	bcc.n	8078ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8078ace:	2301      	movs	r3, #1
 8078ad0:	e00f      	b.n	8078af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8078ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8078afc <SysTick_Config+0x40>)
 8078ad4:	687b      	ldr	r3, [r7, #4]
 8078ad6:	3b01      	subs	r3, #1
 8078ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8078ada:	210f      	movs	r1, #15
 8078adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8078ae0:	f7ff ff8e 	bl	8078a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8078ae4:	4b05      	ldr	r3, [pc, #20]	@ (8078afc <SysTick_Config+0x40>)
 8078ae6:	2200      	movs	r2, #0
 8078ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8078aea:	4b04      	ldr	r3, [pc, #16]	@ (8078afc <SysTick_Config+0x40>)
 8078aec:	2207      	movs	r2, #7
 8078aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8078af0:	2300      	movs	r3, #0
}
 8078af2:	4618      	mov	r0, r3
 8078af4:	3708      	adds	r7, #8
 8078af6:	46bd      	mov	sp, r7
 8078af8:	bd80      	pop	{r7, pc}
 8078afa:	bf00      	nop
 8078afc:	e000e010 	.word	0xe000e010

08078b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8078b00:	b580      	push	{r7, lr}
 8078b02:	b082      	sub	sp, #8
 8078b04:	af00      	add	r7, sp, #0
 8078b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8078b08:	6878      	ldr	r0, [r7, #4]
 8078b0a:	f7ff ff29 	bl	8078960 <__NVIC_SetPriorityGrouping>
}
 8078b0e:	bf00      	nop
 8078b10:	3708      	adds	r7, #8
 8078b12:	46bd      	mov	sp, r7
 8078b14:	bd80      	pop	{r7, pc}

08078b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8078b16:	b580      	push	{r7, lr}
 8078b18:	b086      	sub	sp, #24
 8078b1a:	af00      	add	r7, sp, #0
 8078b1c:	4603      	mov	r3, r0
 8078b1e:	60b9      	str	r1, [r7, #8]
 8078b20:	607a      	str	r2, [r7, #4]
 8078b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8078b24:	2300      	movs	r3, #0
 8078b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8078b28:	f7ff ff3e 	bl	80789a8 <__NVIC_GetPriorityGrouping>
 8078b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8078b2e:	687a      	ldr	r2, [r7, #4]
 8078b30:	68b9      	ldr	r1, [r7, #8]
 8078b32:	6978      	ldr	r0, [r7, #20]
 8078b34:	f7ff ff8e 	bl	8078a54 <NVIC_EncodePriority>
 8078b38:	4602      	mov	r2, r0
 8078b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8078b3e:	4611      	mov	r1, r2
 8078b40:	4618      	mov	r0, r3
 8078b42:	f7ff ff5d 	bl	8078a00 <__NVIC_SetPriority>
}
 8078b46:	bf00      	nop
 8078b48:	3718      	adds	r7, #24
 8078b4a:	46bd      	mov	sp, r7
 8078b4c:	bd80      	pop	{r7, pc}

08078b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8078b4e:	b580      	push	{r7, lr}
 8078b50:	b082      	sub	sp, #8
 8078b52:	af00      	add	r7, sp, #0
 8078b54:	4603      	mov	r3, r0
 8078b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8078b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8078b5c:	4618      	mov	r0, r3
 8078b5e:	f7ff ff31 	bl	80789c4 <__NVIC_EnableIRQ>
}
 8078b62:	bf00      	nop
 8078b64:	3708      	adds	r7, #8
 8078b66:	46bd      	mov	sp, r7
 8078b68:	bd80      	pop	{r7, pc}

08078b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8078b6a:	b580      	push	{r7, lr}
 8078b6c:	b082      	sub	sp, #8
 8078b6e:	af00      	add	r7, sp, #0
 8078b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8078b72:	6878      	ldr	r0, [r7, #4]
 8078b74:	f7ff ffa2 	bl	8078abc <SysTick_Config>
 8078b78:	4603      	mov	r3, r0
}
 8078b7a:	4618      	mov	r0, r3
 8078b7c:	3708      	adds	r7, #8
 8078b7e:	46bd      	mov	sp, r7
 8078b80:	bd80      	pop	{r7, pc}
	...

08078b84 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8078b84:	b580      	push	{r7, lr}
 8078b86:	b086      	sub	sp, #24
 8078b88:	af00      	add	r7, sp, #0
 8078b8a:	60f8      	str	r0, [r7, #12]
 8078b8c:	60b9      	str	r1, [r7, #8]
 8078b8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8078b92:	2301      	movs	r3, #1
 8078b94:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8078b96:	4b23      	ldr	r3, [pc, #140]	@ (8078c24 <HAL_FLASH_Program+0xa0>)
 8078b98:	7e1b      	ldrb	r3, [r3, #24]
 8078b9a:	2b01      	cmp	r3, #1
 8078b9c:	d101      	bne.n	8078ba2 <HAL_FLASH_Program+0x1e>
 8078b9e:	2302      	movs	r3, #2
 8078ba0:	e03b      	b.n	8078c1a <HAL_FLASH_Program+0x96>
 8078ba2:	4b20      	ldr	r3, [pc, #128]	@ (8078c24 <HAL_FLASH_Program+0xa0>)
 8078ba4:	2201      	movs	r2, #1
 8078ba6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078ba8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8078bac:	f000 f870 	bl	8078c90 <FLASH_WaitForLastOperation>
 8078bb0:	4603      	mov	r3, r0
 8078bb2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8078bb4:	7dfb      	ldrb	r3, [r7, #23]
 8078bb6:	2b00      	cmp	r3, #0
 8078bb8:	d12b      	bne.n	8078c12 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8078bba:	68fb      	ldr	r3, [r7, #12]
 8078bbc:	2b00      	cmp	r3, #0
 8078bbe:	d105      	bne.n	8078bcc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8078bc0:	783b      	ldrb	r3, [r7, #0]
 8078bc2:	4619      	mov	r1, r3
 8078bc4:	68b8      	ldr	r0, [r7, #8]
 8078bc6:	f000 f91b 	bl	8078e00 <FLASH_Program_Byte>
 8078bca:	e016      	b.n	8078bfa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8078bcc:	68fb      	ldr	r3, [r7, #12]
 8078bce:	2b01      	cmp	r3, #1
 8078bd0:	d105      	bne.n	8078bde <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8078bd2:	883b      	ldrh	r3, [r7, #0]
 8078bd4:	4619      	mov	r1, r3
 8078bd6:	68b8      	ldr	r0, [r7, #8]
 8078bd8:	f000 f8ee 	bl	8078db8 <FLASH_Program_HalfWord>
 8078bdc:	e00d      	b.n	8078bfa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8078bde:	68fb      	ldr	r3, [r7, #12]
 8078be0:	2b02      	cmp	r3, #2
 8078be2:	d105      	bne.n	8078bf0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8078be4:	683b      	ldr	r3, [r7, #0]
 8078be6:	4619      	mov	r1, r3
 8078be8:	68b8      	ldr	r0, [r7, #8]
 8078bea:	f000 f8c3 	bl	8078d74 <FLASH_Program_Word>
 8078bee:	e004      	b.n	8078bfa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8078bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8078bf4:	68b8      	ldr	r0, [r7, #8]
 8078bf6:	f000 f88b 	bl	8078d10 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078bfa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8078bfe:	f000 f847 	bl	8078c90 <FLASH_WaitForLastOperation>
 8078c02:	4603      	mov	r3, r0
 8078c04:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8078c06:	4b08      	ldr	r3, [pc, #32]	@ (8078c28 <HAL_FLASH_Program+0xa4>)
 8078c08:	691b      	ldr	r3, [r3, #16]
 8078c0a:	4a07      	ldr	r2, [pc, #28]	@ (8078c28 <HAL_FLASH_Program+0xa4>)
 8078c0c:	f023 0301 	bic.w	r3, r3, #1
 8078c10:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8078c12:	4b04      	ldr	r3, [pc, #16]	@ (8078c24 <HAL_FLASH_Program+0xa0>)
 8078c14:	2200      	movs	r2, #0
 8078c16:	761a      	strb	r2, [r3, #24]
  
  return status;
 8078c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8078c1a:	4618      	mov	r0, r3
 8078c1c:	3718      	adds	r7, #24
 8078c1e:	46bd      	mov	sp, r7
 8078c20:	bd80      	pop	{r7, pc}
 8078c22:	bf00      	nop
 8078c24:	200000fc 	.word	0x200000fc
 8078c28:	40023c00 	.word	0x40023c00

08078c2c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8078c2c:	b480      	push	{r7}
 8078c2e:	b083      	sub	sp, #12
 8078c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8078c32:	2300      	movs	r3, #0
 8078c34:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8078c36:	4b0b      	ldr	r3, [pc, #44]	@ (8078c64 <HAL_FLASH_Unlock+0x38>)
 8078c38:	691b      	ldr	r3, [r3, #16]
 8078c3a:	2b00      	cmp	r3, #0
 8078c3c:	da0b      	bge.n	8078c56 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8078c3e:	4b09      	ldr	r3, [pc, #36]	@ (8078c64 <HAL_FLASH_Unlock+0x38>)
 8078c40:	4a09      	ldr	r2, [pc, #36]	@ (8078c68 <HAL_FLASH_Unlock+0x3c>)
 8078c42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8078c44:	4b07      	ldr	r3, [pc, #28]	@ (8078c64 <HAL_FLASH_Unlock+0x38>)
 8078c46:	4a09      	ldr	r2, [pc, #36]	@ (8078c6c <HAL_FLASH_Unlock+0x40>)
 8078c48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8078c4a:	4b06      	ldr	r3, [pc, #24]	@ (8078c64 <HAL_FLASH_Unlock+0x38>)
 8078c4c:	691b      	ldr	r3, [r3, #16]
 8078c4e:	2b00      	cmp	r3, #0
 8078c50:	da01      	bge.n	8078c56 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8078c52:	2301      	movs	r3, #1
 8078c54:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8078c56:	79fb      	ldrb	r3, [r7, #7]
}
 8078c58:	4618      	mov	r0, r3
 8078c5a:	370c      	adds	r7, #12
 8078c5c:	46bd      	mov	sp, r7
 8078c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078c62:	4770      	bx	lr
 8078c64:	40023c00 	.word	0x40023c00
 8078c68:	45670123 	.word	0x45670123
 8078c6c:	cdef89ab 	.word	0xcdef89ab

08078c70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8078c70:	b480      	push	{r7}
 8078c72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8078c74:	4b05      	ldr	r3, [pc, #20]	@ (8078c8c <HAL_FLASH_Lock+0x1c>)
 8078c76:	691b      	ldr	r3, [r3, #16]
 8078c78:	4a04      	ldr	r2, [pc, #16]	@ (8078c8c <HAL_FLASH_Lock+0x1c>)
 8078c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8078c7e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8078c80:	2300      	movs	r3, #0
}
 8078c82:	4618      	mov	r0, r3
 8078c84:	46bd      	mov	sp, r7
 8078c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078c8a:	4770      	bx	lr
 8078c8c:	40023c00 	.word	0x40023c00

08078c90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8078c90:	b580      	push	{r7, lr}
 8078c92:	b084      	sub	sp, #16
 8078c94:	af00      	add	r7, sp, #0
 8078c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8078c98:	2300      	movs	r3, #0
 8078c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8078c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8078d08 <FLASH_WaitForLastOperation+0x78>)
 8078c9e:	2200      	movs	r2, #0
 8078ca0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8078ca2:	f7ff fe2d 	bl	8078900 <HAL_GetTick>
 8078ca6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8078ca8:	e010      	b.n	8078ccc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8078caa:	687b      	ldr	r3, [r7, #4]
 8078cac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8078cb0:	d00c      	beq.n	8078ccc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8078cb2:	687b      	ldr	r3, [r7, #4]
 8078cb4:	2b00      	cmp	r3, #0
 8078cb6:	d007      	beq.n	8078cc8 <FLASH_WaitForLastOperation+0x38>
 8078cb8:	f7ff fe22 	bl	8078900 <HAL_GetTick>
 8078cbc:	4602      	mov	r2, r0
 8078cbe:	68fb      	ldr	r3, [r7, #12]
 8078cc0:	1ad3      	subs	r3, r2, r3
 8078cc2:	687a      	ldr	r2, [r7, #4]
 8078cc4:	429a      	cmp	r2, r3
 8078cc6:	d201      	bcs.n	8078ccc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8078cc8:	2303      	movs	r3, #3
 8078cca:	e019      	b.n	8078d00 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8078ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8078d0c <FLASH_WaitForLastOperation+0x7c>)
 8078cce:	68db      	ldr	r3, [r3, #12]
 8078cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8078cd4:	2b00      	cmp	r3, #0
 8078cd6:	d1e8      	bne.n	8078caa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8078cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8078d0c <FLASH_WaitForLastOperation+0x7c>)
 8078cda:	68db      	ldr	r3, [r3, #12]
 8078cdc:	f003 0301 	and.w	r3, r3, #1
 8078ce0:	2b00      	cmp	r3, #0
 8078ce2:	d002      	beq.n	8078cea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8078ce4:	4b09      	ldr	r3, [pc, #36]	@ (8078d0c <FLASH_WaitForLastOperation+0x7c>)
 8078ce6:	2201      	movs	r2, #1
 8078ce8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8078cea:	4b08      	ldr	r3, [pc, #32]	@ (8078d0c <FLASH_WaitForLastOperation+0x7c>)
 8078cec:	68db      	ldr	r3, [r3, #12]
 8078cee:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8078cf2:	2b00      	cmp	r3, #0
 8078cf4:	d003      	beq.n	8078cfe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8078cf6:	f000 f8a5 	bl	8078e44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8078cfa:	2301      	movs	r3, #1
 8078cfc:	e000      	b.n	8078d00 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8078cfe:	2300      	movs	r3, #0
  
}  
 8078d00:	4618      	mov	r0, r3
 8078d02:	3710      	adds	r7, #16
 8078d04:	46bd      	mov	sp, r7
 8078d06:	bd80      	pop	{r7, pc}
 8078d08:	200000fc 	.word	0x200000fc
 8078d0c:	40023c00 	.word	0x40023c00

08078d10 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8078d10:	b480      	push	{r7}
 8078d12:	b085      	sub	sp, #20
 8078d14:	af00      	add	r7, sp, #0
 8078d16:	60f8      	str	r0, [r7, #12]
 8078d18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078d1c:	4b14      	ldr	r3, [pc, #80]	@ (8078d70 <FLASH_Program_DoubleWord+0x60>)
 8078d1e:	691b      	ldr	r3, [r3, #16]
 8078d20:	4a13      	ldr	r2, [pc, #76]	@ (8078d70 <FLASH_Program_DoubleWord+0x60>)
 8078d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8078d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8078d28:	4b11      	ldr	r3, [pc, #68]	@ (8078d70 <FLASH_Program_DoubleWord+0x60>)
 8078d2a:	691b      	ldr	r3, [r3, #16]
 8078d2c:	4a10      	ldr	r2, [pc, #64]	@ (8078d70 <FLASH_Program_DoubleWord+0x60>)
 8078d2e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8078d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078d34:	4b0e      	ldr	r3, [pc, #56]	@ (8078d70 <FLASH_Program_DoubleWord+0x60>)
 8078d36:	691b      	ldr	r3, [r3, #16]
 8078d38:	4a0d      	ldr	r2, [pc, #52]	@ (8078d70 <FLASH_Program_DoubleWord+0x60>)
 8078d3a:	f043 0301 	orr.w	r3, r3, #1
 8078d3e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8078d40:	68fb      	ldr	r3, [r7, #12]
 8078d42:	683a      	ldr	r2, [r7, #0]
 8078d44:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8078d46:	f3bf 8f6f 	isb	sy
}
 8078d4a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8078d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8078d50:	f04f 0200 	mov.w	r2, #0
 8078d54:	f04f 0300 	mov.w	r3, #0
 8078d58:	000a      	movs	r2, r1
 8078d5a:	2300      	movs	r3, #0
 8078d5c:	68f9      	ldr	r1, [r7, #12]
 8078d5e:	3104      	adds	r1, #4
 8078d60:	4613      	mov	r3, r2
 8078d62:	600b      	str	r3, [r1, #0]
}
 8078d64:	bf00      	nop
 8078d66:	3714      	adds	r7, #20
 8078d68:	46bd      	mov	sp, r7
 8078d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078d6e:	4770      	bx	lr
 8078d70:	40023c00 	.word	0x40023c00

08078d74 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8078d74:	b480      	push	{r7}
 8078d76:	b083      	sub	sp, #12
 8078d78:	af00      	add	r7, sp, #0
 8078d7a:	6078      	str	r0, [r7, #4]
 8078d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8078db4 <FLASH_Program_Word+0x40>)
 8078d80:	691b      	ldr	r3, [r3, #16]
 8078d82:	4a0c      	ldr	r2, [pc, #48]	@ (8078db4 <FLASH_Program_Word+0x40>)
 8078d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8078d88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8078d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8078db4 <FLASH_Program_Word+0x40>)
 8078d8c:	691b      	ldr	r3, [r3, #16]
 8078d8e:	4a09      	ldr	r2, [pc, #36]	@ (8078db4 <FLASH_Program_Word+0x40>)
 8078d90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8078d94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078d96:	4b07      	ldr	r3, [pc, #28]	@ (8078db4 <FLASH_Program_Word+0x40>)
 8078d98:	691b      	ldr	r3, [r3, #16]
 8078d9a:	4a06      	ldr	r2, [pc, #24]	@ (8078db4 <FLASH_Program_Word+0x40>)
 8078d9c:	f043 0301 	orr.w	r3, r3, #1
 8078da0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8078da2:	687b      	ldr	r3, [r7, #4]
 8078da4:	683a      	ldr	r2, [r7, #0]
 8078da6:	601a      	str	r2, [r3, #0]
}
 8078da8:	bf00      	nop
 8078daa:	370c      	adds	r7, #12
 8078dac:	46bd      	mov	sp, r7
 8078dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078db2:	4770      	bx	lr
 8078db4:	40023c00 	.word	0x40023c00

08078db8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8078db8:	b480      	push	{r7}
 8078dba:	b083      	sub	sp, #12
 8078dbc:	af00      	add	r7, sp, #0
 8078dbe:	6078      	str	r0, [r7, #4]
 8078dc0:	460b      	mov	r3, r1
 8078dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8078dfc <FLASH_Program_HalfWord+0x44>)
 8078dc6:	691b      	ldr	r3, [r3, #16]
 8078dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8078dfc <FLASH_Program_HalfWord+0x44>)
 8078dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8078dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8078dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8078dfc <FLASH_Program_HalfWord+0x44>)
 8078dd2:	691b      	ldr	r3, [r3, #16]
 8078dd4:	4a09      	ldr	r2, [pc, #36]	@ (8078dfc <FLASH_Program_HalfWord+0x44>)
 8078dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8078dda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078ddc:	4b07      	ldr	r3, [pc, #28]	@ (8078dfc <FLASH_Program_HalfWord+0x44>)
 8078dde:	691b      	ldr	r3, [r3, #16]
 8078de0:	4a06      	ldr	r2, [pc, #24]	@ (8078dfc <FLASH_Program_HalfWord+0x44>)
 8078de2:	f043 0301 	orr.w	r3, r3, #1
 8078de6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8078de8:	687b      	ldr	r3, [r7, #4]
 8078dea:	887a      	ldrh	r2, [r7, #2]
 8078dec:	801a      	strh	r2, [r3, #0]
}
 8078dee:	bf00      	nop
 8078df0:	370c      	adds	r7, #12
 8078df2:	46bd      	mov	sp, r7
 8078df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078df8:	4770      	bx	lr
 8078dfa:	bf00      	nop
 8078dfc:	40023c00 	.word	0x40023c00

08078e00 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8078e00:	b480      	push	{r7}
 8078e02:	b083      	sub	sp, #12
 8078e04:	af00      	add	r7, sp, #0
 8078e06:	6078      	str	r0, [r7, #4]
 8078e08:	460b      	mov	r3, r1
 8078e0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8078e40 <FLASH_Program_Byte+0x40>)
 8078e0e:	691b      	ldr	r3, [r3, #16]
 8078e10:	4a0b      	ldr	r2, [pc, #44]	@ (8078e40 <FLASH_Program_Byte+0x40>)
 8078e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8078e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8078e18:	4b09      	ldr	r3, [pc, #36]	@ (8078e40 <FLASH_Program_Byte+0x40>)
 8078e1a:	4a09      	ldr	r2, [pc, #36]	@ (8078e40 <FLASH_Program_Byte+0x40>)
 8078e1c:	691b      	ldr	r3, [r3, #16]
 8078e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078e20:	4b07      	ldr	r3, [pc, #28]	@ (8078e40 <FLASH_Program_Byte+0x40>)
 8078e22:	691b      	ldr	r3, [r3, #16]
 8078e24:	4a06      	ldr	r2, [pc, #24]	@ (8078e40 <FLASH_Program_Byte+0x40>)
 8078e26:	f043 0301 	orr.w	r3, r3, #1
 8078e2a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8078e2c:	687b      	ldr	r3, [r7, #4]
 8078e2e:	78fa      	ldrb	r2, [r7, #3]
 8078e30:	701a      	strb	r2, [r3, #0]
}
 8078e32:	bf00      	nop
 8078e34:	370c      	adds	r7, #12
 8078e36:	46bd      	mov	sp, r7
 8078e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078e3c:	4770      	bx	lr
 8078e3e:	bf00      	nop
 8078e40:	40023c00 	.word	0x40023c00

08078e44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8078e44:	b480      	push	{r7}
 8078e46:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8078e48:	4b2f      	ldr	r3, [pc, #188]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078e4a:	68db      	ldr	r3, [r3, #12]
 8078e4c:	f003 0310 	and.w	r3, r3, #16
 8078e50:	2b00      	cmp	r3, #0
 8078e52:	d008      	beq.n	8078e66 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8078e54:	4b2d      	ldr	r3, [pc, #180]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078e56:	69db      	ldr	r3, [r3, #28]
 8078e58:	f043 0310 	orr.w	r3, r3, #16
 8078e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078e5e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8078e60:	4b29      	ldr	r3, [pc, #164]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078e62:	2210      	movs	r2, #16
 8078e64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8078e66:	4b28      	ldr	r3, [pc, #160]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078e68:	68db      	ldr	r3, [r3, #12]
 8078e6a:	f003 0320 	and.w	r3, r3, #32
 8078e6e:	2b00      	cmp	r3, #0
 8078e70:	d008      	beq.n	8078e84 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8078e72:	4b26      	ldr	r3, [pc, #152]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078e74:	69db      	ldr	r3, [r3, #28]
 8078e76:	f043 0308 	orr.w	r3, r3, #8
 8078e7a:	4a24      	ldr	r2, [pc, #144]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078e7c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8078e7e:	4b22      	ldr	r3, [pc, #136]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078e80:	2220      	movs	r2, #32
 8078e82:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8078e84:	4b20      	ldr	r3, [pc, #128]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078e86:	68db      	ldr	r3, [r3, #12]
 8078e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8078e8c:	2b00      	cmp	r3, #0
 8078e8e:	d008      	beq.n	8078ea2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8078e90:	4b1e      	ldr	r3, [pc, #120]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078e92:	69db      	ldr	r3, [r3, #28]
 8078e94:	f043 0304 	orr.w	r3, r3, #4
 8078e98:	4a1c      	ldr	r2, [pc, #112]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078e9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8078e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078e9e:	2240      	movs	r2, #64	@ 0x40
 8078ea0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8078ea2:	4b19      	ldr	r3, [pc, #100]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078ea4:	68db      	ldr	r3, [r3, #12]
 8078ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8078eaa:	2b00      	cmp	r3, #0
 8078eac:	d008      	beq.n	8078ec0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8078eae:	4b17      	ldr	r3, [pc, #92]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078eb0:	69db      	ldr	r3, [r3, #28]
 8078eb2:	f043 0302 	orr.w	r3, r3, #2
 8078eb6:	4a15      	ldr	r2, [pc, #84]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078eb8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8078eba:	4b13      	ldr	r3, [pc, #76]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078ebc:	2280      	movs	r2, #128	@ 0x80
 8078ebe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8078ec0:	4b11      	ldr	r3, [pc, #68]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078ec2:	68db      	ldr	r3, [r3, #12]
 8078ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8078ec8:	2b00      	cmp	r3, #0
 8078eca:	d009      	beq.n	8078ee0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8078ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078ece:	69db      	ldr	r3, [r3, #28]
 8078ed0:	f043 0301 	orr.w	r3, r3, #1
 8078ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078ed6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8078ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8078ede:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8078ee0:	4b09      	ldr	r3, [pc, #36]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078ee2:	68db      	ldr	r3, [r3, #12]
 8078ee4:	f003 0302 	and.w	r3, r3, #2
 8078ee8:	2b00      	cmp	r3, #0
 8078eea:	d008      	beq.n	8078efe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8078eec:	4b07      	ldr	r3, [pc, #28]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078eee:	69db      	ldr	r3, [r3, #28]
 8078ef0:	f043 0320 	orr.w	r3, r3, #32
 8078ef4:	4a05      	ldr	r2, [pc, #20]	@ (8078f0c <FLASH_SetErrorCode+0xc8>)
 8078ef6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8078ef8:	4b03      	ldr	r3, [pc, #12]	@ (8078f08 <FLASH_SetErrorCode+0xc4>)
 8078efa:	2202      	movs	r2, #2
 8078efc:	60da      	str	r2, [r3, #12]
  }
}
 8078efe:	bf00      	nop
 8078f00:	46bd      	mov	sp, r7
 8078f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078f06:	4770      	bx	lr
 8078f08:	40023c00 	.word	0x40023c00
 8078f0c:	200000fc 	.word	0x200000fc

08078f10 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8078f10:	b580      	push	{r7, lr}
 8078f12:	b084      	sub	sp, #16
 8078f14:	af00      	add	r7, sp, #0
 8078f16:	6078      	str	r0, [r7, #4]
 8078f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8078f1a:	2301      	movs	r3, #1
 8078f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8078f1e:	2300      	movs	r3, #0
 8078f20:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8078f22:	4b31      	ldr	r3, [pc, #196]	@ (8078fe8 <HAL_FLASHEx_Erase+0xd8>)
 8078f24:	7e1b      	ldrb	r3, [r3, #24]
 8078f26:	2b01      	cmp	r3, #1
 8078f28:	d101      	bne.n	8078f2e <HAL_FLASHEx_Erase+0x1e>
 8078f2a:	2302      	movs	r3, #2
 8078f2c:	e058      	b.n	8078fe0 <HAL_FLASHEx_Erase+0xd0>
 8078f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8078fe8 <HAL_FLASHEx_Erase+0xd8>)
 8078f30:	2201      	movs	r2, #1
 8078f32:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8078f38:	f7ff feaa 	bl	8078c90 <FLASH_WaitForLastOperation>
 8078f3c:	4603      	mov	r3, r0
 8078f3e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8078f40:	7bfb      	ldrb	r3, [r7, #15]
 8078f42:	2b00      	cmp	r3, #0
 8078f44:	d148      	bne.n	8078fd8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8078f46:	683b      	ldr	r3, [r7, #0]
 8078f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8078f4c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8078f4e:	687b      	ldr	r3, [r7, #4]
 8078f50:	681b      	ldr	r3, [r3, #0]
 8078f52:	2b01      	cmp	r3, #1
 8078f54:	d115      	bne.n	8078f82 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8078f56:	687b      	ldr	r3, [r7, #4]
 8078f58:	691b      	ldr	r3, [r3, #16]
 8078f5a:	b2da      	uxtb	r2, r3
 8078f5c:	687b      	ldr	r3, [r7, #4]
 8078f5e:	685b      	ldr	r3, [r3, #4]
 8078f60:	4619      	mov	r1, r3
 8078f62:	4610      	mov	r0, r2
 8078f64:	f000 f844 	bl	8078ff0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8078f6c:	f7ff fe90 	bl	8078c90 <FLASH_WaitForLastOperation>
 8078f70:	4603      	mov	r3, r0
 8078f72:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8078f74:	4b1d      	ldr	r3, [pc, #116]	@ (8078fec <HAL_FLASHEx_Erase+0xdc>)
 8078f76:	691b      	ldr	r3, [r3, #16]
 8078f78:	4a1c      	ldr	r2, [pc, #112]	@ (8078fec <HAL_FLASHEx_Erase+0xdc>)
 8078f7a:	f023 0304 	bic.w	r3, r3, #4
 8078f7e:	6113      	str	r3, [r2, #16]
 8078f80:	e028      	b.n	8078fd4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8078f82:	687b      	ldr	r3, [r7, #4]
 8078f84:	689b      	ldr	r3, [r3, #8]
 8078f86:	60bb      	str	r3, [r7, #8]
 8078f88:	e01c      	b.n	8078fc4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8078f8a:	687b      	ldr	r3, [r7, #4]
 8078f8c:	691b      	ldr	r3, [r3, #16]
 8078f8e:	b2db      	uxtb	r3, r3
 8078f90:	4619      	mov	r1, r3
 8078f92:	68b8      	ldr	r0, [r7, #8]
 8078f94:	f000 f850 	bl	8079038 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8078f9c:	f7ff fe78 	bl	8078c90 <FLASH_WaitForLastOperation>
 8078fa0:	4603      	mov	r3, r0
 8078fa2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8078fa4:	4b11      	ldr	r3, [pc, #68]	@ (8078fec <HAL_FLASHEx_Erase+0xdc>)
 8078fa6:	691b      	ldr	r3, [r3, #16]
 8078fa8:	4a10      	ldr	r2, [pc, #64]	@ (8078fec <HAL_FLASHEx_Erase+0xdc>)
 8078faa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8078fae:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8078fb0:	7bfb      	ldrb	r3, [r7, #15]
 8078fb2:	2b00      	cmp	r3, #0
 8078fb4:	d003      	beq.n	8078fbe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8078fb6:	683b      	ldr	r3, [r7, #0]
 8078fb8:	68ba      	ldr	r2, [r7, #8]
 8078fba:	601a      	str	r2, [r3, #0]
          break;
 8078fbc:	e00a      	b.n	8078fd4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8078fbe:	68bb      	ldr	r3, [r7, #8]
 8078fc0:	3301      	adds	r3, #1
 8078fc2:	60bb      	str	r3, [r7, #8]
 8078fc4:	687b      	ldr	r3, [r7, #4]
 8078fc6:	68da      	ldr	r2, [r3, #12]
 8078fc8:	687b      	ldr	r3, [r7, #4]
 8078fca:	689b      	ldr	r3, [r3, #8]
 8078fcc:	4413      	add	r3, r2
 8078fce:	68ba      	ldr	r2, [r7, #8]
 8078fd0:	429a      	cmp	r2, r3
 8078fd2:	d3da      	bcc.n	8078f8a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8078fd4:	f000 f878 	bl	80790c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8078fd8:	4b03      	ldr	r3, [pc, #12]	@ (8078fe8 <HAL_FLASHEx_Erase+0xd8>)
 8078fda:	2200      	movs	r2, #0
 8078fdc:	761a      	strb	r2, [r3, #24]

  return status;
 8078fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8078fe0:	4618      	mov	r0, r3
 8078fe2:	3710      	adds	r7, #16
 8078fe4:	46bd      	mov	sp, r7
 8078fe6:	bd80      	pop	{r7, pc}
 8078fe8:	200000fc 	.word	0x200000fc
 8078fec:	40023c00 	.word	0x40023c00

08078ff0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8078ff0:	b480      	push	{r7}
 8078ff2:	b083      	sub	sp, #12
 8078ff4:	af00      	add	r7, sp, #0
 8078ff6:	4603      	mov	r3, r0
 8078ff8:	6039      	str	r1, [r7, #0]
 8078ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8079034 <FLASH_MassErase+0x44>)
 8078ffe:	691b      	ldr	r3, [r3, #16]
 8079000:	4a0c      	ldr	r2, [pc, #48]	@ (8079034 <FLASH_MassErase+0x44>)
 8079002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8079006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8079008:	4b0a      	ldr	r3, [pc, #40]	@ (8079034 <FLASH_MassErase+0x44>)
 807900a:	691b      	ldr	r3, [r3, #16]
 807900c:	4a09      	ldr	r2, [pc, #36]	@ (8079034 <FLASH_MassErase+0x44>)
 807900e:	f043 0304 	orr.w	r3, r3, #4
 8079012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8079014:	4b07      	ldr	r3, [pc, #28]	@ (8079034 <FLASH_MassErase+0x44>)
 8079016:	691a      	ldr	r2, [r3, #16]
 8079018:	79fb      	ldrb	r3, [r7, #7]
 807901a:	021b      	lsls	r3, r3, #8
 807901c:	4313      	orrs	r3, r2
 807901e:	4a05      	ldr	r2, [pc, #20]	@ (8079034 <FLASH_MassErase+0x44>)
 8079020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8079024:	6113      	str	r3, [r2, #16]
}
 8079026:	bf00      	nop
 8079028:	370c      	adds	r7, #12
 807902a:	46bd      	mov	sp, r7
 807902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8079030:	4770      	bx	lr
 8079032:	bf00      	nop
 8079034:	40023c00 	.word	0x40023c00

08079038 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8079038:	b480      	push	{r7}
 807903a:	b085      	sub	sp, #20
 807903c:	af00      	add	r7, sp, #0
 807903e:	6078      	str	r0, [r7, #4]
 8079040:	460b      	mov	r3, r1
 8079042:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8079044:	2300      	movs	r3, #0
 8079046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8079048:	78fb      	ldrb	r3, [r7, #3]
 807904a:	2b00      	cmp	r3, #0
 807904c:	d102      	bne.n	8079054 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 807904e:	2300      	movs	r3, #0
 8079050:	60fb      	str	r3, [r7, #12]
 8079052:	e010      	b.n	8079076 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8079054:	78fb      	ldrb	r3, [r7, #3]
 8079056:	2b01      	cmp	r3, #1
 8079058:	d103      	bne.n	8079062 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 807905a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 807905e:	60fb      	str	r3, [r7, #12]
 8079060:	e009      	b.n	8079076 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8079062:	78fb      	ldrb	r3, [r7, #3]
 8079064:	2b02      	cmp	r3, #2
 8079066:	d103      	bne.n	8079070 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8079068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 807906c:	60fb      	str	r3, [r7, #12]
 807906e:	e002      	b.n	8079076 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8079070:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8079074:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8079076:	4b13      	ldr	r3, [pc, #76]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 8079078:	691b      	ldr	r3, [r3, #16]
 807907a:	4a12      	ldr	r2, [pc, #72]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 807907c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8079080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8079082:	4b10      	ldr	r3, [pc, #64]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 8079084:	691a      	ldr	r2, [r3, #16]
 8079086:	490f      	ldr	r1, [pc, #60]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 8079088:	68fb      	ldr	r3, [r7, #12]
 807908a:	4313      	orrs	r3, r2
 807908c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 807908e:	4b0d      	ldr	r3, [pc, #52]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 8079090:	691b      	ldr	r3, [r3, #16]
 8079092:	4a0c      	ldr	r2, [pc, #48]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 8079094:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8079098:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 807909a:	4b0a      	ldr	r3, [pc, #40]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 807909c:	691a      	ldr	r2, [r3, #16]
 807909e:	687b      	ldr	r3, [r7, #4]
 80790a0:	00db      	lsls	r3, r3, #3
 80790a2:	4313      	orrs	r3, r2
 80790a4:	4a07      	ldr	r2, [pc, #28]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 80790a6:	f043 0302 	orr.w	r3, r3, #2
 80790aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80790ac:	4b05      	ldr	r3, [pc, #20]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 80790ae:	691b      	ldr	r3, [r3, #16]
 80790b0:	4a04      	ldr	r2, [pc, #16]	@ (80790c4 <FLASH_Erase_Sector+0x8c>)
 80790b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80790b6:	6113      	str	r3, [r2, #16]
}
 80790b8:	bf00      	nop
 80790ba:	3714      	adds	r7, #20
 80790bc:	46bd      	mov	sp, r7
 80790be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80790c2:	4770      	bx	lr
 80790c4:	40023c00 	.word	0x40023c00

080790c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80790c8:	b480      	push	{r7}
 80790ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80790cc:	4b20      	ldr	r3, [pc, #128]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790ce:	681b      	ldr	r3, [r3, #0]
 80790d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80790d4:	2b00      	cmp	r3, #0
 80790d6:	d017      	beq.n	8079108 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80790d8:	4b1d      	ldr	r3, [pc, #116]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790da:	681b      	ldr	r3, [r3, #0]
 80790dc:	4a1c      	ldr	r2, [pc, #112]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80790e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80790e4:	4b1a      	ldr	r3, [pc, #104]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790e6:	681b      	ldr	r3, [r3, #0]
 80790e8:	4a19      	ldr	r2, [pc, #100]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80790ee:	6013      	str	r3, [r2, #0]
 80790f0:	4b17      	ldr	r3, [pc, #92]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790f2:	681b      	ldr	r3, [r3, #0]
 80790f4:	4a16      	ldr	r2, [pc, #88]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80790fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80790fc:	4b14      	ldr	r3, [pc, #80]	@ (8079150 <FLASH_FlushCaches+0x88>)
 80790fe:	681b      	ldr	r3, [r3, #0]
 8079100:	4a13      	ldr	r2, [pc, #76]	@ (8079150 <FLASH_FlushCaches+0x88>)
 8079102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8079106:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8079108:	4b11      	ldr	r3, [pc, #68]	@ (8079150 <FLASH_FlushCaches+0x88>)
 807910a:	681b      	ldr	r3, [r3, #0]
 807910c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8079110:	2b00      	cmp	r3, #0
 8079112:	d017      	beq.n	8079144 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8079114:	4b0e      	ldr	r3, [pc, #56]	@ (8079150 <FLASH_FlushCaches+0x88>)
 8079116:	681b      	ldr	r3, [r3, #0]
 8079118:	4a0d      	ldr	r2, [pc, #52]	@ (8079150 <FLASH_FlushCaches+0x88>)
 807911a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 807911e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8079120:	4b0b      	ldr	r3, [pc, #44]	@ (8079150 <FLASH_FlushCaches+0x88>)
 8079122:	681b      	ldr	r3, [r3, #0]
 8079124:	4a0a      	ldr	r2, [pc, #40]	@ (8079150 <FLASH_FlushCaches+0x88>)
 8079126:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 807912a:	6013      	str	r3, [r2, #0]
 807912c:	4b08      	ldr	r3, [pc, #32]	@ (8079150 <FLASH_FlushCaches+0x88>)
 807912e:	681b      	ldr	r3, [r3, #0]
 8079130:	4a07      	ldr	r2, [pc, #28]	@ (8079150 <FLASH_FlushCaches+0x88>)
 8079132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8079136:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8079138:	4b05      	ldr	r3, [pc, #20]	@ (8079150 <FLASH_FlushCaches+0x88>)
 807913a:	681b      	ldr	r3, [r3, #0]
 807913c:	4a04      	ldr	r2, [pc, #16]	@ (8079150 <FLASH_FlushCaches+0x88>)
 807913e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8079142:	6013      	str	r3, [r2, #0]
  }
}
 8079144:	bf00      	nop
 8079146:	46bd      	mov	sp, r7
 8079148:	f85d 7b04 	ldr.w	r7, [sp], #4
 807914c:	4770      	bx	lr
 807914e:	bf00      	nop
 8079150:	40023c00 	.word	0x40023c00

08079154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8079154:	b480      	push	{r7}
 8079156:	b089      	sub	sp, #36	@ 0x24
 8079158:	af00      	add	r7, sp, #0
 807915a:	6078      	str	r0, [r7, #4]
 807915c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 807915e:	2300      	movs	r3, #0
 8079160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8079162:	2300      	movs	r3, #0
 8079164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8079166:	2300      	movs	r3, #0
 8079168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 807916a:	2300      	movs	r3, #0
 807916c:	61fb      	str	r3, [r7, #28]
 807916e:	e159      	b.n	8079424 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8079170:	2201      	movs	r2, #1
 8079172:	69fb      	ldr	r3, [r7, #28]
 8079174:	fa02 f303 	lsl.w	r3, r2, r3
 8079178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 807917a:	683b      	ldr	r3, [r7, #0]
 807917c:	681b      	ldr	r3, [r3, #0]
 807917e:	697a      	ldr	r2, [r7, #20]
 8079180:	4013      	ands	r3, r2
 8079182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8079184:	693a      	ldr	r2, [r7, #16]
 8079186:	697b      	ldr	r3, [r7, #20]
 8079188:	429a      	cmp	r2, r3
 807918a:	f040 8148 	bne.w	807941e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 807918e:	683b      	ldr	r3, [r7, #0]
 8079190:	685b      	ldr	r3, [r3, #4]
 8079192:	f003 0303 	and.w	r3, r3, #3
 8079196:	2b01      	cmp	r3, #1
 8079198:	d005      	beq.n	80791a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 807919a:	683b      	ldr	r3, [r7, #0]
 807919c:	685b      	ldr	r3, [r3, #4]
 807919e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80791a2:	2b02      	cmp	r3, #2
 80791a4:	d130      	bne.n	8079208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80791a6:	687b      	ldr	r3, [r7, #4]
 80791a8:	689b      	ldr	r3, [r3, #8]
 80791aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80791ac:	69fb      	ldr	r3, [r7, #28]
 80791ae:	005b      	lsls	r3, r3, #1
 80791b0:	2203      	movs	r2, #3
 80791b2:	fa02 f303 	lsl.w	r3, r2, r3
 80791b6:	43db      	mvns	r3, r3
 80791b8:	69ba      	ldr	r2, [r7, #24]
 80791ba:	4013      	ands	r3, r2
 80791bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80791be:	683b      	ldr	r3, [r7, #0]
 80791c0:	68da      	ldr	r2, [r3, #12]
 80791c2:	69fb      	ldr	r3, [r7, #28]
 80791c4:	005b      	lsls	r3, r3, #1
 80791c6:	fa02 f303 	lsl.w	r3, r2, r3
 80791ca:	69ba      	ldr	r2, [r7, #24]
 80791cc:	4313      	orrs	r3, r2
 80791ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80791d0:	687b      	ldr	r3, [r7, #4]
 80791d2:	69ba      	ldr	r2, [r7, #24]
 80791d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80791d6:	687b      	ldr	r3, [r7, #4]
 80791d8:	685b      	ldr	r3, [r3, #4]
 80791da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80791dc:	2201      	movs	r2, #1
 80791de:	69fb      	ldr	r3, [r7, #28]
 80791e0:	fa02 f303 	lsl.w	r3, r2, r3
 80791e4:	43db      	mvns	r3, r3
 80791e6:	69ba      	ldr	r2, [r7, #24]
 80791e8:	4013      	ands	r3, r2
 80791ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80791ec:	683b      	ldr	r3, [r7, #0]
 80791ee:	685b      	ldr	r3, [r3, #4]
 80791f0:	091b      	lsrs	r3, r3, #4
 80791f2:	f003 0201 	and.w	r2, r3, #1
 80791f6:	69fb      	ldr	r3, [r7, #28]
 80791f8:	fa02 f303 	lsl.w	r3, r2, r3
 80791fc:	69ba      	ldr	r2, [r7, #24]
 80791fe:	4313      	orrs	r3, r2
 8079200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8079202:	687b      	ldr	r3, [r7, #4]
 8079204:	69ba      	ldr	r2, [r7, #24]
 8079206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8079208:	683b      	ldr	r3, [r7, #0]
 807920a:	685b      	ldr	r3, [r3, #4]
 807920c:	f003 0303 	and.w	r3, r3, #3
 8079210:	2b03      	cmp	r3, #3
 8079212:	d017      	beq.n	8079244 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8079214:	687b      	ldr	r3, [r7, #4]
 8079216:	68db      	ldr	r3, [r3, #12]
 8079218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 807921a:	69fb      	ldr	r3, [r7, #28]
 807921c:	005b      	lsls	r3, r3, #1
 807921e:	2203      	movs	r2, #3
 8079220:	fa02 f303 	lsl.w	r3, r2, r3
 8079224:	43db      	mvns	r3, r3
 8079226:	69ba      	ldr	r2, [r7, #24]
 8079228:	4013      	ands	r3, r2
 807922a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 807922c:	683b      	ldr	r3, [r7, #0]
 807922e:	689a      	ldr	r2, [r3, #8]
 8079230:	69fb      	ldr	r3, [r7, #28]
 8079232:	005b      	lsls	r3, r3, #1
 8079234:	fa02 f303 	lsl.w	r3, r2, r3
 8079238:	69ba      	ldr	r2, [r7, #24]
 807923a:	4313      	orrs	r3, r2
 807923c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 807923e:	687b      	ldr	r3, [r7, #4]
 8079240:	69ba      	ldr	r2, [r7, #24]
 8079242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8079244:	683b      	ldr	r3, [r7, #0]
 8079246:	685b      	ldr	r3, [r3, #4]
 8079248:	f003 0303 	and.w	r3, r3, #3
 807924c:	2b02      	cmp	r3, #2
 807924e:	d123      	bne.n	8079298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8079250:	69fb      	ldr	r3, [r7, #28]
 8079252:	08da      	lsrs	r2, r3, #3
 8079254:	687b      	ldr	r3, [r7, #4]
 8079256:	3208      	adds	r2, #8
 8079258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 807925c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 807925e:	69fb      	ldr	r3, [r7, #28]
 8079260:	f003 0307 	and.w	r3, r3, #7
 8079264:	009b      	lsls	r3, r3, #2
 8079266:	220f      	movs	r2, #15
 8079268:	fa02 f303 	lsl.w	r3, r2, r3
 807926c:	43db      	mvns	r3, r3
 807926e:	69ba      	ldr	r2, [r7, #24]
 8079270:	4013      	ands	r3, r2
 8079272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8079274:	683b      	ldr	r3, [r7, #0]
 8079276:	691a      	ldr	r2, [r3, #16]
 8079278:	69fb      	ldr	r3, [r7, #28]
 807927a:	f003 0307 	and.w	r3, r3, #7
 807927e:	009b      	lsls	r3, r3, #2
 8079280:	fa02 f303 	lsl.w	r3, r2, r3
 8079284:	69ba      	ldr	r2, [r7, #24]
 8079286:	4313      	orrs	r3, r2
 8079288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 807928a:	69fb      	ldr	r3, [r7, #28]
 807928c:	08da      	lsrs	r2, r3, #3
 807928e:	687b      	ldr	r3, [r7, #4]
 8079290:	3208      	adds	r2, #8
 8079292:	69b9      	ldr	r1, [r7, #24]
 8079294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8079298:	687b      	ldr	r3, [r7, #4]
 807929a:	681b      	ldr	r3, [r3, #0]
 807929c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 807929e:	69fb      	ldr	r3, [r7, #28]
 80792a0:	005b      	lsls	r3, r3, #1
 80792a2:	2203      	movs	r2, #3
 80792a4:	fa02 f303 	lsl.w	r3, r2, r3
 80792a8:	43db      	mvns	r3, r3
 80792aa:	69ba      	ldr	r2, [r7, #24]
 80792ac:	4013      	ands	r3, r2
 80792ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80792b0:	683b      	ldr	r3, [r7, #0]
 80792b2:	685b      	ldr	r3, [r3, #4]
 80792b4:	f003 0203 	and.w	r2, r3, #3
 80792b8:	69fb      	ldr	r3, [r7, #28]
 80792ba:	005b      	lsls	r3, r3, #1
 80792bc:	fa02 f303 	lsl.w	r3, r2, r3
 80792c0:	69ba      	ldr	r2, [r7, #24]
 80792c2:	4313      	orrs	r3, r2
 80792c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80792c6:	687b      	ldr	r3, [r7, #4]
 80792c8:	69ba      	ldr	r2, [r7, #24]
 80792ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80792cc:	683b      	ldr	r3, [r7, #0]
 80792ce:	685b      	ldr	r3, [r3, #4]
 80792d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80792d4:	2b00      	cmp	r3, #0
 80792d6:	f000 80a2 	beq.w	807941e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80792da:	2300      	movs	r3, #0
 80792dc:	60fb      	str	r3, [r7, #12]
 80792de:	4b57      	ldr	r3, [pc, #348]	@ (807943c <HAL_GPIO_Init+0x2e8>)
 80792e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80792e2:	4a56      	ldr	r2, [pc, #344]	@ (807943c <HAL_GPIO_Init+0x2e8>)
 80792e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80792e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80792ea:	4b54      	ldr	r3, [pc, #336]	@ (807943c <HAL_GPIO_Init+0x2e8>)
 80792ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80792ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80792f2:	60fb      	str	r3, [r7, #12]
 80792f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80792f6:	4a52      	ldr	r2, [pc, #328]	@ (8079440 <HAL_GPIO_Init+0x2ec>)
 80792f8:	69fb      	ldr	r3, [r7, #28]
 80792fa:	089b      	lsrs	r3, r3, #2
 80792fc:	3302      	adds	r3, #2
 80792fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8079302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8079304:	69fb      	ldr	r3, [r7, #28]
 8079306:	f003 0303 	and.w	r3, r3, #3
 807930a:	009b      	lsls	r3, r3, #2
 807930c:	220f      	movs	r2, #15
 807930e:	fa02 f303 	lsl.w	r3, r2, r3
 8079312:	43db      	mvns	r3, r3
 8079314:	69ba      	ldr	r2, [r7, #24]
 8079316:	4013      	ands	r3, r2
 8079318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 807931a:	687b      	ldr	r3, [r7, #4]
 807931c:	4a49      	ldr	r2, [pc, #292]	@ (8079444 <HAL_GPIO_Init+0x2f0>)
 807931e:	4293      	cmp	r3, r2
 8079320:	d019      	beq.n	8079356 <HAL_GPIO_Init+0x202>
 8079322:	687b      	ldr	r3, [r7, #4]
 8079324:	4a48      	ldr	r2, [pc, #288]	@ (8079448 <HAL_GPIO_Init+0x2f4>)
 8079326:	4293      	cmp	r3, r2
 8079328:	d013      	beq.n	8079352 <HAL_GPIO_Init+0x1fe>
 807932a:	687b      	ldr	r3, [r7, #4]
 807932c:	4a47      	ldr	r2, [pc, #284]	@ (807944c <HAL_GPIO_Init+0x2f8>)
 807932e:	4293      	cmp	r3, r2
 8079330:	d00d      	beq.n	807934e <HAL_GPIO_Init+0x1fa>
 8079332:	687b      	ldr	r3, [r7, #4]
 8079334:	4a46      	ldr	r2, [pc, #280]	@ (8079450 <HAL_GPIO_Init+0x2fc>)
 8079336:	4293      	cmp	r3, r2
 8079338:	d007      	beq.n	807934a <HAL_GPIO_Init+0x1f6>
 807933a:	687b      	ldr	r3, [r7, #4]
 807933c:	4a45      	ldr	r2, [pc, #276]	@ (8079454 <HAL_GPIO_Init+0x300>)
 807933e:	4293      	cmp	r3, r2
 8079340:	d101      	bne.n	8079346 <HAL_GPIO_Init+0x1f2>
 8079342:	2304      	movs	r3, #4
 8079344:	e008      	b.n	8079358 <HAL_GPIO_Init+0x204>
 8079346:	2307      	movs	r3, #7
 8079348:	e006      	b.n	8079358 <HAL_GPIO_Init+0x204>
 807934a:	2303      	movs	r3, #3
 807934c:	e004      	b.n	8079358 <HAL_GPIO_Init+0x204>
 807934e:	2302      	movs	r3, #2
 8079350:	e002      	b.n	8079358 <HAL_GPIO_Init+0x204>
 8079352:	2301      	movs	r3, #1
 8079354:	e000      	b.n	8079358 <HAL_GPIO_Init+0x204>
 8079356:	2300      	movs	r3, #0
 8079358:	69fa      	ldr	r2, [r7, #28]
 807935a:	f002 0203 	and.w	r2, r2, #3
 807935e:	0092      	lsls	r2, r2, #2
 8079360:	4093      	lsls	r3, r2
 8079362:	69ba      	ldr	r2, [r7, #24]
 8079364:	4313      	orrs	r3, r2
 8079366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8079368:	4935      	ldr	r1, [pc, #212]	@ (8079440 <HAL_GPIO_Init+0x2ec>)
 807936a:	69fb      	ldr	r3, [r7, #28]
 807936c:	089b      	lsrs	r3, r3, #2
 807936e:	3302      	adds	r3, #2
 8079370:	69ba      	ldr	r2, [r7, #24]
 8079372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8079376:	4b38      	ldr	r3, [pc, #224]	@ (8079458 <HAL_GPIO_Init+0x304>)
 8079378:	681b      	ldr	r3, [r3, #0]
 807937a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 807937c:	693b      	ldr	r3, [r7, #16]
 807937e:	43db      	mvns	r3, r3
 8079380:	69ba      	ldr	r2, [r7, #24]
 8079382:	4013      	ands	r3, r2
 8079384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8079386:	683b      	ldr	r3, [r7, #0]
 8079388:	685b      	ldr	r3, [r3, #4]
 807938a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 807938e:	2b00      	cmp	r3, #0
 8079390:	d003      	beq.n	807939a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8079392:	69ba      	ldr	r2, [r7, #24]
 8079394:	693b      	ldr	r3, [r7, #16]
 8079396:	4313      	orrs	r3, r2
 8079398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 807939a:	4a2f      	ldr	r2, [pc, #188]	@ (8079458 <HAL_GPIO_Init+0x304>)
 807939c:	69bb      	ldr	r3, [r7, #24]
 807939e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80793a0:	4b2d      	ldr	r3, [pc, #180]	@ (8079458 <HAL_GPIO_Init+0x304>)
 80793a2:	685b      	ldr	r3, [r3, #4]
 80793a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80793a6:	693b      	ldr	r3, [r7, #16]
 80793a8:	43db      	mvns	r3, r3
 80793aa:	69ba      	ldr	r2, [r7, #24]
 80793ac:	4013      	ands	r3, r2
 80793ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80793b0:	683b      	ldr	r3, [r7, #0]
 80793b2:	685b      	ldr	r3, [r3, #4]
 80793b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80793b8:	2b00      	cmp	r3, #0
 80793ba:	d003      	beq.n	80793c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80793bc:	69ba      	ldr	r2, [r7, #24]
 80793be:	693b      	ldr	r3, [r7, #16]
 80793c0:	4313      	orrs	r3, r2
 80793c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80793c4:	4a24      	ldr	r2, [pc, #144]	@ (8079458 <HAL_GPIO_Init+0x304>)
 80793c6:	69bb      	ldr	r3, [r7, #24]
 80793c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80793ca:	4b23      	ldr	r3, [pc, #140]	@ (8079458 <HAL_GPIO_Init+0x304>)
 80793cc:	689b      	ldr	r3, [r3, #8]
 80793ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80793d0:	693b      	ldr	r3, [r7, #16]
 80793d2:	43db      	mvns	r3, r3
 80793d4:	69ba      	ldr	r2, [r7, #24]
 80793d6:	4013      	ands	r3, r2
 80793d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80793da:	683b      	ldr	r3, [r7, #0]
 80793dc:	685b      	ldr	r3, [r3, #4]
 80793de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80793e2:	2b00      	cmp	r3, #0
 80793e4:	d003      	beq.n	80793ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80793e6:	69ba      	ldr	r2, [r7, #24]
 80793e8:	693b      	ldr	r3, [r7, #16]
 80793ea:	4313      	orrs	r3, r2
 80793ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80793ee:	4a1a      	ldr	r2, [pc, #104]	@ (8079458 <HAL_GPIO_Init+0x304>)
 80793f0:	69bb      	ldr	r3, [r7, #24]
 80793f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80793f4:	4b18      	ldr	r3, [pc, #96]	@ (8079458 <HAL_GPIO_Init+0x304>)
 80793f6:	68db      	ldr	r3, [r3, #12]
 80793f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80793fa:	693b      	ldr	r3, [r7, #16]
 80793fc:	43db      	mvns	r3, r3
 80793fe:	69ba      	ldr	r2, [r7, #24]
 8079400:	4013      	ands	r3, r2
 8079402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8079404:	683b      	ldr	r3, [r7, #0]
 8079406:	685b      	ldr	r3, [r3, #4]
 8079408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 807940c:	2b00      	cmp	r3, #0
 807940e:	d003      	beq.n	8079418 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8079410:	69ba      	ldr	r2, [r7, #24]
 8079412:	693b      	ldr	r3, [r7, #16]
 8079414:	4313      	orrs	r3, r2
 8079416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8079418:	4a0f      	ldr	r2, [pc, #60]	@ (8079458 <HAL_GPIO_Init+0x304>)
 807941a:	69bb      	ldr	r3, [r7, #24]
 807941c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 807941e:	69fb      	ldr	r3, [r7, #28]
 8079420:	3301      	adds	r3, #1
 8079422:	61fb      	str	r3, [r7, #28]
 8079424:	69fb      	ldr	r3, [r7, #28]
 8079426:	2b0f      	cmp	r3, #15
 8079428:	f67f aea2 	bls.w	8079170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 807942c:	bf00      	nop
 807942e:	bf00      	nop
 8079430:	3724      	adds	r7, #36	@ 0x24
 8079432:	46bd      	mov	sp, r7
 8079434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8079438:	4770      	bx	lr
 807943a:	bf00      	nop
 807943c:	40023800 	.word	0x40023800
 8079440:	40013800 	.word	0x40013800
 8079444:	40020000 	.word	0x40020000
 8079448:	40020400 	.word	0x40020400
 807944c:	40020800 	.word	0x40020800
 8079450:	40020c00 	.word	0x40020c00
 8079454:	40021000 	.word	0x40021000
 8079458:	40013c00 	.word	0x40013c00

0807945c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 807945c:	b480      	push	{r7}
 807945e:	b083      	sub	sp, #12
 8079460:	af00      	add	r7, sp, #0
 8079462:	6078      	str	r0, [r7, #4]
 8079464:	460b      	mov	r3, r1
 8079466:	807b      	strh	r3, [r7, #2]
 8079468:	4613      	mov	r3, r2
 807946a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 807946c:	787b      	ldrb	r3, [r7, #1]
 807946e:	2b00      	cmp	r3, #0
 8079470:	d003      	beq.n	807947a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8079472:	887a      	ldrh	r2, [r7, #2]
 8079474:	687b      	ldr	r3, [r7, #4]
 8079476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8079478:	e003      	b.n	8079482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 807947a:	887b      	ldrh	r3, [r7, #2]
 807947c:	041a      	lsls	r2, r3, #16
 807947e:	687b      	ldr	r3, [r7, #4]
 8079480:	619a      	str	r2, [r3, #24]
}
 8079482:	bf00      	nop
 8079484:	370c      	adds	r7, #12
 8079486:	46bd      	mov	sp, r7
 8079488:	f85d 7b04 	ldr.w	r7, [sp], #4
 807948c:	4770      	bx	lr

0807948e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 807948e:	b480      	push	{r7}
 8079490:	b085      	sub	sp, #20
 8079492:	af00      	add	r7, sp, #0
 8079494:	6078      	str	r0, [r7, #4]
 8079496:	460b      	mov	r3, r1
 8079498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 807949a:	687b      	ldr	r3, [r7, #4]
 807949c:	695b      	ldr	r3, [r3, #20]
 807949e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80794a0:	887a      	ldrh	r2, [r7, #2]
 80794a2:	68fb      	ldr	r3, [r7, #12]
 80794a4:	4013      	ands	r3, r2
 80794a6:	041a      	lsls	r2, r3, #16
 80794a8:	68fb      	ldr	r3, [r7, #12]
 80794aa:	43d9      	mvns	r1, r3
 80794ac:	887b      	ldrh	r3, [r7, #2]
 80794ae:	400b      	ands	r3, r1
 80794b0:	431a      	orrs	r2, r3
 80794b2:	687b      	ldr	r3, [r7, #4]
 80794b4:	619a      	str	r2, [r3, #24]
}
 80794b6:	bf00      	nop
 80794b8:	3714      	adds	r7, #20
 80794ba:	46bd      	mov	sp, r7
 80794bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80794c0:	4770      	bx	lr

080794c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80794c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80794c4:	b08f      	sub	sp, #60	@ 0x3c
 80794c6:	af0a      	add	r7, sp, #40	@ 0x28
 80794c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80794ca:	687b      	ldr	r3, [r7, #4]
 80794cc:	2b00      	cmp	r3, #0
 80794ce:	d101      	bne.n	80794d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80794d0:	2301      	movs	r3, #1
 80794d2:	e10f      	b.n	80796f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80794d4:	687b      	ldr	r3, [r7, #4]
 80794d6:	681b      	ldr	r3, [r3, #0]
 80794d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80794da:	687b      	ldr	r3, [r7, #4]
 80794dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 80794e0:	b2db      	uxtb	r3, r3
 80794e2:	2b00      	cmp	r3, #0
 80794e4:	d106      	bne.n	80794f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80794e6:	687b      	ldr	r3, [r7, #4]
 80794e8:	2200      	movs	r2, #0
 80794ea:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80794ee:	6878      	ldr	r0, [r7, #4]
 80794f0:	f005 fa50 	bl	807e994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80794f4:	687b      	ldr	r3, [r7, #4]
 80794f6:	2203      	movs	r2, #3
 80794f8:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80794fc:	68bb      	ldr	r3, [r7, #8]
 80794fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8079500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8079504:	2b00      	cmp	r3, #0
 8079506:	d102      	bne.n	807950e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8079508:	687b      	ldr	r3, [r7, #4]
 807950a:	2200      	movs	r2, #0
 807950c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 807950e:	687b      	ldr	r3, [r7, #4]
 8079510:	681b      	ldr	r3, [r3, #0]
 8079512:	4618      	mov	r0, r3
 8079514:	f001 fe9b 	bl	807b24e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8079518:	687b      	ldr	r3, [r7, #4]
 807951a:	681b      	ldr	r3, [r3, #0]
 807951c:	603b      	str	r3, [r7, #0]
 807951e:	687e      	ldr	r6, [r7, #4]
 8079520:	466d      	mov	r5, sp
 8079522:	f106 0410 	add.w	r4, r6, #16
 8079526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8079528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 807952a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 807952c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 807952e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8079532:	e885 0003 	stmia.w	r5, {r0, r1}
 8079536:	1d33      	adds	r3, r6, #4
 8079538:	cb0e      	ldmia	r3, {r1, r2, r3}
 807953a:	6838      	ldr	r0, [r7, #0]
 807953c:	f001 fd73 	bl	807b026 <USB_CoreInit>
 8079540:	4603      	mov	r3, r0
 8079542:	2b00      	cmp	r3, #0
 8079544:	d005      	beq.n	8079552 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8079546:	687b      	ldr	r3, [r7, #4]
 8079548:	2202      	movs	r2, #2
 807954a:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 807954e:	2301      	movs	r3, #1
 8079550:	e0d0      	b.n	80796f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8079552:	687b      	ldr	r3, [r7, #4]
 8079554:	681b      	ldr	r3, [r3, #0]
 8079556:	2100      	movs	r1, #0
 8079558:	4618      	mov	r0, r3
 807955a:	f001 fe89 	bl	807b270 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807955e:	2300      	movs	r3, #0
 8079560:	73fb      	strb	r3, [r7, #15]
 8079562:	e04a      	b.n	80795fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8079564:	7bfa      	ldrb	r2, [r7, #15]
 8079566:	6879      	ldr	r1, [r7, #4]
 8079568:	4613      	mov	r3, r2
 807956a:	00db      	lsls	r3, r3, #3
 807956c:	1a9b      	subs	r3, r3, r2
 807956e:	009b      	lsls	r3, r3, #2
 8079570:	440b      	add	r3, r1
 8079572:	333d      	adds	r3, #61	@ 0x3d
 8079574:	2201      	movs	r2, #1
 8079576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8079578:	7bfa      	ldrb	r2, [r7, #15]
 807957a:	6879      	ldr	r1, [r7, #4]
 807957c:	4613      	mov	r3, r2
 807957e:	00db      	lsls	r3, r3, #3
 8079580:	1a9b      	subs	r3, r3, r2
 8079582:	009b      	lsls	r3, r3, #2
 8079584:	440b      	add	r3, r1
 8079586:	333c      	adds	r3, #60	@ 0x3c
 8079588:	7bfa      	ldrb	r2, [r7, #15]
 807958a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 807958c:	7bfa      	ldrb	r2, [r7, #15]
 807958e:	7bfb      	ldrb	r3, [r7, #15]
 8079590:	b298      	uxth	r0, r3
 8079592:	6879      	ldr	r1, [r7, #4]
 8079594:	4613      	mov	r3, r2
 8079596:	00db      	lsls	r3, r3, #3
 8079598:	1a9b      	subs	r3, r3, r2
 807959a:	009b      	lsls	r3, r3, #2
 807959c:	440b      	add	r3, r1
 807959e:	3342      	adds	r3, #66	@ 0x42
 80795a0:	4602      	mov	r2, r0
 80795a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80795a4:	7bfa      	ldrb	r2, [r7, #15]
 80795a6:	6879      	ldr	r1, [r7, #4]
 80795a8:	4613      	mov	r3, r2
 80795aa:	00db      	lsls	r3, r3, #3
 80795ac:	1a9b      	subs	r3, r3, r2
 80795ae:	009b      	lsls	r3, r3, #2
 80795b0:	440b      	add	r3, r1
 80795b2:	333f      	adds	r3, #63	@ 0x3f
 80795b4:	2200      	movs	r2, #0
 80795b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80795b8:	7bfa      	ldrb	r2, [r7, #15]
 80795ba:	6879      	ldr	r1, [r7, #4]
 80795bc:	4613      	mov	r3, r2
 80795be:	00db      	lsls	r3, r3, #3
 80795c0:	1a9b      	subs	r3, r3, r2
 80795c2:	009b      	lsls	r3, r3, #2
 80795c4:	440b      	add	r3, r1
 80795c6:	3344      	adds	r3, #68	@ 0x44
 80795c8:	2200      	movs	r2, #0
 80795ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80795cc:	7bfa      	ldrb	r2, [r7, #15]
 80795ce:	6879      	ldr	r1, [r7, #4]
 80795d0:	4613      	mov	r3, r2
 80795d2:	00db      	lsls	r3, r3, #3
 80795d4:	1a9b      	subs	r3, r3, r2
 80795d6:	009b      	lsls	r3, r3, #2
 80795d8:	440b      	add	r3, r1
 80795da:	3348      	adds	r3, #72	@ 0x48
 80795dc:	2200      	movs	r2, #0
 80795de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80795e0:	7bfa      	ldrb	r2, [r7, #15]
 80795e2:	6879      	ldr	r1, [r7, #4]
 80795e4:	4613      	mov	r3, r2
 80795e6:	00db      	lsls	r3, r3, #3
 80795e8:	1a9b      	subs	r3, r3, r2
 80795ea:	009b      	lsls	r3, r3, #2
 80795ec:	440b      	add	r3, r1
 80795ee:	3350      	adds	r3, #80	@ 0x50
 80795f0:	2200      	movs	r2, #0
 80795f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80795f4:	7bfb      	ldrb	r3, [r7, #15]
 80795f6:	3301      	adds	r3, #1
 80795f8:	73fb      	strb	r3, [r7, #15]
 80795fa:	7bfa      	ldrb	r2, [r7, #15]
 80795fc:	687b      	ldr	r3, [r7, #4]
 80795fe:	685b      	ldr	r3, [r3, #4]
 8079600:	429a      	cmp	r2, r3
 8079602:	d3af      	bcc.n	8079564 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8079604:	2300      	movs	r3, #0
 8079606:	73fb      	strb	r3, [r7, #15]
 8079608:	e044      	b.n	8079694 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 807960a:	7bfa      	ldrb	r2, [r7, #15]
 807960c:	6879      	ldr	r1, [r7, #4]
 807960e:	4613      	mov	r3, r2
 8079610:	00db      	lsls	r3, r3, #3
 8079612:	1a9b      	subs	r3, r3, r2
 8079614:	009b      	lsls	r3, r3, #2
 8079616:	440b      	add	r3, r1
 8079618:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 807961c:	2200      	movs	r2, #0
 807961e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8079620:	7bfa      	ldrb	r2, [r7, #15]
 8079622:	6879      	ldr	r1, [r7, #4]
 8079624:	4613      	mov	r3, r2
 8079626:	00db      	lsls	r3, r3, #3
 8079628:	1a9b      	subs	r3, r3, r2
 807962a:	009b      	lsls	r3, r3, #2
 807962c:	440b      	add	r3, r1
 807962e:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8079632:	7bfa      	ldrb	r2, [r7, #15]
 8079634:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8079636:	7bfa      	ldrb	r2, [r7, #15]
 8079638:	6879      	ldr	r1, [r7, #4]
 807963a:	4613      	mov	r3, r2
 807963c:	00db      	lsls	r3, r3, #3
 807963e:	1a9b      	subs	r3, r3, r2
 8079640:	009b      	lsls	r3, r3, #2
 8079642:	440b      	add	r3, r1
 8079644:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8079648:	2200      	movs	r2, #0
 807964a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 807964c:	7bfa      	ldrb	r2, [r7, #15]
 807964e:	6879      	ldr	r1, [r7, #4]
 8079650:	4613      	mov	r3, r2
 8079652:	00db      	lsls	r3, r3, #3
 8079654:	1a9b      	subs	r3, r3, r2
 8079656:	009b      	lsls	r3, r3, #2
 8079658:	440b      	add	r3, r1
 807965a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 807965e:	2200      	movs	r2, #0
 8079660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8079662:	7bfa      	ldrb	r2, [r7, #15]
 8079664:	6879      	ldr	r1, [r7, #4]
 8079666:	4613      	mov	r3, r2
 8079668:	00db      	lsls	r3, r3, #3
 807966a:	1a9b      	subs	r3, r3, r2
 807966c:	009b      	lsls	r3, r3, #2
 807966e:	440b      	add	r3, r1
 8079670:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8079674:	2200      	movs	r2, #0
 8079676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8079678:	7bfa      	ldrb	r2, [r7, #15]
 807967a:	6879      	ldr	r1, [r7, #4]
 807967c:	4613      	mov	r3, r2
 807967e:	00db      	lsls	r3, r3, #3
 8079680:	1a9b      	subs	r3, r3, r2
 8079682:	009b      	lsls	r3, r3, #2
 8079684:	440b      	add	r3, r1
 8079686:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 807968a:	2200      	movs	r2, #0
 807968c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807968e:	7bfb      	ldrb	r3, [r7, #15]
 8079690:	3301      	adds	r3, #1
 8079692:	73fb      	strb	r3, [r7, #15]
 8079694:	7bfa      	ldrb	r2, [r7, #15]
 8079696:	687b      	ldr	r3, [r7, #4]
 8079698:	685b      	ldr	r3, [r3, #4]
 807969a:	429a      	cmp	r2, r3
 807969c:	d3b5      	bcc.n	807960a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 807969e:	687b      	ldr	r3, [r7, #4]
 80796a0:	681b      	ldr	r3, [r3, #0]
 80796a2:	603b      	str	r3, [r7, #0]
 80796a4:	687e      	ldr	r6, [r7, #4]
 80796a6:	466d      	mov	r5, sp
 80796a8:	f106 0410 	add.w	r4, r6, #16
 80796ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80796ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80796b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80796b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80796b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80796b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80796bc:	1d33      	adds	r3, r6, #4
 80796be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80796c0:	6838      	ldr	r0, [r7, #0]
 80796c2:	f001 fdff 	bl	807b2c4 <USB_DevInit>
 80796c6:	4603      	mov	r3, r0
 80796c8:	2b00      	cmp	r3, #0
 80796ca:	d005      	beq.n	80796d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80796cc:	687b      	ldr	r3, [r7, #4]
 80796ce:	2202      	movs	r2, #2
 80796d0:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80796d4:	2301      	movs	r3, #1
 80796d6:	e00d      	b.n	80796f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80796d8:	687b      	ldr	r3, [r7, #4]
 80796da:	2200      	movs	r2, #0
 80796dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80796e0:	687b      	ldr	r3, [r7, #4]
 80796e2:	2201      	movs	r2, #1
 80796e4:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80796e8:	687b      	ldr	r3, [r7, #4]
 80796ea:	681b      	ldr	r3, [r3, #0]
 80796ec:	4618      	mov	r0, r3
 80796ee:	f002 fd6b 	bl	807c1c8 <USB_DevDisconnect>

  return HAL_OK;
 80796f2:	2300      	movs	r3, #0
}
 80796f4:	4618      	mov	r0, r3
 80796f6:	3714      	adds	r7, #20
 80796f8:	46bd      	mov	sp, r7
 80796fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080796fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80796fc:	b580      	push	{r7, lr}
 80796fe:	b084      	sub	sp, #16
 8079700:	af00      	add	r7, sp, #0
 8079702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8079704:	687b      	ldr	r3, [r7, #4]
 8079706:	681b      	ldr	r3, [r3, #0]
 8079708:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 807970a:	687b      	ldr	r3, [r7, #4]
 807970c:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8079710:	2b01      	cmp	r3, #1
 8079712:	d101      	bne.n	8079718 <HAL_PCD_Start+0x1c>
 8079714:	2302      	movs	r3, #2
 8079716:	e020      	b.n	807975a <HAL_PCD_Start+0x5e>
 8079718:	687b      	ldr	r3, [r7, #4]
 807971a:	2201      	movs	r2, #1
 807971c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8079720:	687b      	ldr	r3, [r7, #4]
 8079722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8079724:	2b01      	cmp	r3, #1
 8079726:	d109      	bne.n	807973c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8079728:	687b      	ldr	r3, [r7, #4]
 807972a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 807972c:	2b01      	cmp	r3, #1
 807972e:	d005      	beq.n	807973c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8079730:	68fb      	ldr	r3, [r7, #12]
 8079732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8079734:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8079738:	68fb      	ldr	r3, [r7, #12]
 807973a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 807973c:	687b      	ldr	r3, [r7, #4]
 807973e:	681b      	ldr	r3, [r3, #0]
 8079740:	4618      	mov	r0, r3
 8079742:	f001 fd73 	bl	807b22c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8079746:	687b      	ldr	r3, [r7, #4]
 8079748:	681b      	ldr	r3, [r3, #0]
 807974a:	4618      	mov	r0, r3
 807974c:	f002 fd1b 	bl	807c186 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8079750:	687b      	ldr	r3, [r7, #4]
 8079752:	2200      	movs	r2, #0
 8079754:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8079758:	2300      	movs	r3, #0
}
 807975a:	4618      	mov	r0, r3
 807975c:	3710      	adds	r7, #16
 807975e:	46bd      	mov	sp, r7
 8079760:	bd80      	pop	{r7, pc}

08079762 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8079762:	b580      	push	{r7, lr}
 8079764:	b084      	sub	sp, #16
 8079766:	af00      	add	r7, sp, #0
 8079768:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807976a:	687b      	ldr	r3, [r7, #4]
 807976c:	681b      	ldr	r3, [r3, #0]
 807976e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8079770:	687b      	ldr	r3, [r7, #4]
 8079772:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8079776:	2b01      	cmp	r3, #1
 8079778:	d101      	bne.n	807977e <HAL_PCD_Stop+0x1c>
 807977a:	2302      	movs	r3, #2
 807977c:	e026      	b.n	80797cc <HAL_PCD_Stop+0x6a>
 807977e:	687b      	ldr	r3, [r7, #4]
 8079780:	2201      	movs	r2, #1
 8079782:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8079786:	687b      	ldr	r3, [r7, #4]
 8079788:	681b      	ldr	r3, [r3, #0]
 807978a:	4618      	mov	r0, r3
 807978c:	f001 fd5f 	bl	807b24e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8079790:	687b      	ldr	r3, [r7, #4]
 8079792:	681b      	ldr	r3, [r3, #0]
 8079794:	4618      	mov	r0, r3
 8079796:	f002 fd17 	bl	807c1c8 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 807979a:	687b      	ldr	r3, [r7, #4]
 807979c:	681b      	ldr	r3, [r3, #0]
 807979e:	2110      	movs	r1, #16
 80797a0:	4618      	mov	r0, r3
 80797a2:	f001 fef3 	bl	807b58c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80797a6:	687b      	ldr	r3, [r7, #4]
 80797a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80797aa:	2b01      	cmp	r3, #1
 80797ac:	d109      	bne.n	80797c2 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80797ae:	687b      	ldr	r3, [r7, #4]
 80797b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80797b2:	2b01      	cmp	r3, #1
 80797b4:	d005      	beq.n	80797c2 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80797b6:	68fb      	ldr	r3, [r7, #12]
 80797b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80797ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80797be:	68fb      	ldr	r3, [r7, #12]
 80797c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  __HAL_UNLOCK(hpcd);
 80797c2:	687b      	ldr	r3, [r7, #4]
 80797c4:	2200      	movs	r2, #0
 80797c6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80797ca:	2300      	movs	r3, #0
}
 80797cc:	4618      	mov	r0, r3
 80797ce:	3710      	adds	r7, #16
 80797d0:	46bd      	mov	sp, r7
 80797d2:	bd80      	pop	{r7, pc}

080797d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80797d4:	b590      	push	{r4, r7, lr}
 80797d6:	b08d      	sub	sp, #52	@ 0x34
 80797d8:	af00      	add	r7, sp, #0
 80797da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80797dc:	687b      	ldr	r3, [r7, #4]
 80797de:	681b      	ldr	r3, [r3, #0]
 80797e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80797e2:	6a3b      	ldr	r3, [r7, #32]
 80797e4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80797e6:	687b      	ldr	r3, [r7, #4]
 80797e8:	681b      	ldr	r3, [r3, #0]
 80797ea:	4618      	mov	r0, r3
 80797ec:	f002 fda0 	bl	807c330 <USB_GetMode>
 80797f0:	4603      	mov	r3, r0
 80797f2:	2b00      	cmp	r3, #0
 80797f4:	f040 839d 	bne.w	8079f32 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80797f8:	687b      	ldr	r3, [r7, #4]
 80797fa:	681b      	ldr	r3, [r3, #0]
 80797fc:	4618      	mov	r0, r3
 80797fe:	f002 fd04 	bl	807c20a <USB_ReadInterrupts>
 8079802:	4603      	mov	r3, r0
 8079804:	2b00      	cmp	r3, #0
 8079806:	f000 8393 	beq.w	8079f30 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 807980a:	687b      	ldr	r3, [r7, #4]
 807980c:	681b      	ldr	r3, [r3, #0]
 807980e:	4618      	mov	r0, r3
 8079810:	f002 fcfb 	bl	807c20a <USB_ReadInterrupts>
 8079814:	4603      	mov	r3, r0
 8079816:	f003 0302 	and.w	r3, r3, #2
 807981a:	2b02      	cmp	r3, #2
 807981c:	d107      	bne.n	807982e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 807981e:	687b      	ldr	r3, [r7, #4]
 8079820:	681b      	ldr	r3, [r3, #0]
 8079822:	695a      	ldr	r2, [r3, #20]
 8079824:	687b      	ldr	r3, [r7, #4]
 8079826:	681b      	ldr	r3, [r3, #0]
 8079828:	f002 0202 	and.w	r2, r2, #2
 807982c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 807982e:	687b      	ldr	r3, [r7, #4]
 8079830:	681b      	ldr	r3, [r3, #0]
 8079832:	4618      	mov	r0, r3
 8079834:	f002 fce9 	bl	807c20a <USB_ReadInterrupts>
 8079838:	4603      	mov	r3, r0
 807983a:	f003 0310 	and.w	r3, r3, #16
 807983e:	2b10      	cmp	r3, #16
 8079840:	d161      	bne.n	8079906 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8079842:	687b      	ldr	r3, [r7, #4]
 8079844:	681b      	ldr	r3, [r3, #0]
 8079846:	699a      	ldr	r2, [r3, #24]
 8079848:	687b      	ldr	r3, [r7, #4]
 807984a:	681b      	ldr	r3, [r3, #0]
 807984c:	f022 0210 	bic.w	r2, r2, #16
 8079850:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8079852:	6a3b      	ldr	r3, [r7, #32]
 8079854:	6a1b      	ldr	r3, [r3, #32]
 8079856:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8079858:	69bb      	ldr	r3, [r7, #24]
 807985a:	f003 020f 	and.w	r2, r3, #15
 807985e:	4613      	mov	r3, r2
 8079860:	00db      	lsls	r3, r3, #3
 8079862:	1a9b      	subs	r3, r3, r2
 8079864:	009b      	lsls	r3, r3, #2
 8079866:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 807986a:	687a      	ldr	r2, [r7, #4]
 807986c:	4413      	add	r3, r2
 807986e:	3304      	adds	r3, #4
 8079870:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8079872:	69bb      	ldr	r3, [r7, #24]
 8079874:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8079878:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 807987c:	d124      	bne.n	80798c8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 807987e:	69ba      	ldr	r2, [r7, #24]
 8079880:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8079884:	4013      	ands	r3, r2
 8079886:	2b00      	cmp	r3, #0
 8079888:	d035      	beq.n	80798f6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 807988a:	697b      	ldr	r3, [r7, #20]
 807988c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 807988e:	69bb      	ldr	r3, [r7, #24]
 8079890:	091b      	lsrs	r3, r3, #4
 8079892:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8079894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8079898:	b29b      	uxth	r3, r3
 807989a:	461a      	mov	r2, r3
 807989c:	6a38      	ldr	r0, [r7, #32]
 807989e:	f002 fb4f 	bl	807bf40 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80798a2:	697b      	ldr	r3, [r7, #20]
 80798a4:	68da      	ldr	r2, [r3, #12]
 80798a6:	69bb      	ldr	r3, [r7, #24]
 80798a8:	091b      	lsrs	r3, r3, #4
 80798aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80798ae:	441a      	add	r2, r3
 80798b0:	697b      	ldr	r3, [r7, #20]
 80798b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80798b4:	697b      	ldr	r3, [r7, #20]
 80798b6:	699a      	ldr	r2, [r3, #24]
 80798b8:	69bb      	ldr	r3, [r7, #24]
 80798ba:	091b      	lsrs	r3, r3, #4
 80798bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80798c0:	441a      	add	r2, r3
 80798c2:	697b      	ldr	r3, [r7, #20]
 80798c4:	619a      	str	r2, [r3, #24]
 80798c6:	e016      	b.n	80798f6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80798c8:	69bb      	ldr	r3, [r7, #24]
 80798ca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80798ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80798d2:	d110      	bne.n	80798f6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80798d4:	687b      	ldr	r3, [r7, #4]
 80798d6:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80798da:	2208      	movs	r2, #8
 80798dc:	4619      	mov	r1, r3
 80798de:	6a38      	ldr	r0, [r7, #32]
 80798e0:	f002 fb2e 	bl	807bf40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80798e4:	697b      	ldr	r3, [r7, #20]
 80798e6:	699a      	ldr	r2, [r3, #24]
 80798e8:	69bb      	ldr	r3, [r7, #24]
 80798ea:	091b      	lsrs	r3, r3, #4
 80798ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80798f0:	441a      	add	r2, r3
 80798f2:	697b      	ldr	r3, [r7, #20]
 80798f4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80798f6:	687b      	ldr	r3, [r7, #4]
 80798f8:	681b      	ldr	r3, [r3, #0]
 80798fa:	699a      	ldr	r2, [r3, #24]
 80798fc:	687b      	ldr	r3, [r7, #4]
 80798fe:	681b      	ldr	r3, [r3, #0]
 8079900:	f042 0210 	orr.w	r2, r2, #16
 8079904:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8079906:	687b      	ldr	r3, [r7, #4]
 8079908:	681b      	ldr	r3, [r3, #0]
 807990a:	4618      	mov	r0, r3
 807990c:	f002 fc7d 	bl	807c20a <USB_ReadInterrupts>
 8079910:	4603      	mov	r3, r0
 8079912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8079916:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 807991a:	d16e      	bne.n	80799fa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 807991c:	2300      	movs	r3, #0
 807991e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8079920:	687b      	ldr	r3, [r7, #4]
 8079922:	681b      	ldr	r3, [r3, #0]
 8079924:	4618      	mov	r0, r3
 8079926:	f002 fc83 	bl	807c230 <USB_ReadDevAllOutEpInterrupt>
 807992a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 807992c:	e062      	b.n	80799f4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 807992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8079930:	f003 0301 	and.w	r3, r3, #1
 8079934:	2b00      	cmp	r3, #0
 8079936:	d057      	beq.n	80799e8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8079938:	687b      	ldr	r3, [r7, #4]
 807993a:	681b      	ldr	r3, [r3, #0]
 807993c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 807993e:	b2d2      	uxtb	r2, r2
 8079940:	4611      	mov	r1, r2
 8079942:	4618      	mov	r0, r3
 8079944:	f002 fca8 	bl	807c298 <USB_ReadDevOutEPInterrupt>
 8079948:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 807994a:	693b      	ldr	r3, [r7, #16]
 807994c:	f003 0301 	and.w	r3, r3, #1
 8079950:	2b00      	cmp	r3, #0
 8079952:	d00c      	beq.n	807996e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8079954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079956:	015a      	lsls	r2, r3, #5
 8079958:	69fb      	ldr	r3, [r7, #28]
 807995a:	4413      	add	r3, r2
 807995c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8079960:	461a      	mov	r2, r3
 8079962:	2301      	movs	r3, #1
 8079964:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8079966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8079968:	6878      	ldr	r0, [r7, #4]
 807996a:	f000 fd4f 	bl	807a40c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 807996e:	693b      	ldr	r3, [r7, #16]
 8079970:	f003 0308 	and.w	r3, r3, #8
 8079974:	2b00      	cmp	r3, #0
 8079976:	d00c      	beq.n	8079992 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8079978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 807997a:	015a      	lsls	r2, r3, #5
 807997c:	69fb      	ldr	r3, [r7, #28]
 807997e:	4413      	add	r3, r2
 8079980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8079984:	461a      	mov	r2, r3
 8079986:	2308      	movs	r3, #8
 8079988:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 807998a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 807998c:	6878      	ldr	r0, [r7, #4]
 807998e:	f000 fe49 	bl	807a624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8079992:	693b      	ldr	r3, [r7, #16]
 8079994:	f003 0310 	and.w	r3, r3, #16
 8079998:	2b00      	cmp	r3, #0
 807999a:	d008      	beq.n	80799ae <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 807999c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 807999e:	015a      	lsls	r2, r3, #5
 80799a0:	69fb      	ldr	r3, [r7, #28]
 80799a2:	4413      	add	r3, r2
 80799a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80799a8:	461a      	mov	r2, r3
 80799aa:	2310      	movs	r3, #16
 80799ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80799ae:	693b      	ldr	r3, [r7, #16]
 80799b0:	f003 0320 	and.w	r3, r3, #32
 80799b4:	2b00      	cmp	r3, #0
 80799b6:	d008      	beq.n	80799ca <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80799b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80799ba:	015a      	lsls	r2, r3, #5
 80799bc:	69fb      	ldr	r3, [r7, #28]
 80799be:	4413      	add	r3, r2
 80799c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80799c4:	461a      	mov	r2, r3
 80799c6:	2320      	movs	r3, #32
 80799c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80799ca:	693b      	ldr	r3, [r7, #16]
 80799cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80799d0:	2b00      	cmp	r3, #0
 80799d2:	d009      	beq.n	80799e8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80799d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80799d6:	015a      	lsls	r2, r3, #5
 80799d8:	69fb      	ldr	r3, [r7, #28]
 80799da:	4413      	add	r3, r2
 80799dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80799e0:	461a      	mov	r2, r3
 80799e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80799e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80799e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80799ea:	3301      	adds	r3, #1
 80799ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80799ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80799f0:	085b      	lsrs	r3, r3, #1
 80799f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80799f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80799f6:	2b00      	cmp	r3, #0
 80799f8:	d199      	bne.n	807992e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80799fa:	687b      	ldr	r3, [r7, #4]
 80799fc:	681b      	ldr	r3, [r3, #0]
 80799fe:	4618      	mov	r0, r3
 8079a00:	f002 fc03 	bl	807c20a <USB_ReadInterrupts>
 8079a04:	4603      	mov	r3, r0
 8079a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8079a0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8079a0e:	f040 80c0 	bne.w	8079b92 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8079a12:	687b      	ldr	r3, [r7, #4]
 8079a14:	681b      	ldr	r3, [r3, #0]
 8079a16:	4618      	mov	r0, r3
 8079a18:	f002 fc24 	bl	807c264 <USB_ReadDevAllInEpInterrupt>
 8079a1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8079a1e:	2300      	movs	r3, #0
 8079a20:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8079a22:	e0b2      	b.n	8079b8a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8079a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8079a26:	f003 0301 	and.w	r3, r3, #1
 8079a2a:	2b00      	cmp	r3, #0
 8079a2c:	f000 80a7 	beq.w	8079b7e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8079a30:	687b      	ldr	r3, [r7, #4]
 8079a32:	681b      	ldr	r3, [r3, #0]
 8079a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8079a36:	b2d2      	uxtb	r2, r2
 8079a38:	4611      	mov	r1, r2
 8079a3a:	4618      	mov	r0, r3
 8079a3c:	f002 fc4a 	bl	807c2d4 <USB_ReadDevInEPInterrupt>
 8079a40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8079a42:	693b      	ldr	r3, [r7, #16]
 8079a44:	f003 0301 	and.w	r3, r3, #1
 8079a48:	2b00      	cmp	r3, #0
 8079a4a:	d057      	beq.n	8079afc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8079a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079a4e:	f003 030f 	and.w	r3, r3, #15
 8079a52:	2201      	movs	r2, #1
 8079a54:	fa02 f303 	lsl.w	r3, r2, r3
 8079a58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8079a5a:	69fb      	ldr	r3, [r7, #28]
 8079a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8079a62:	68fb      	ldr	r3, [r7, #12]
 8079a64:	43db      	mvns	r3, r3
 8079a66:	69f9      	ldr	r1, [r7, #28]
 8079a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8079a6c:	4013      	ands	r3, r2
 8079a6e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8079a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079a72:	015a      	lsls	r2, r3, #5
 8079a74:	69fb      	ldr	r3, [r7, #28]
 8079a76:	4413      	add	r3, r2
 8079a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079a7c:	461a      	mov	r2, r3
 8079a7e:	2301      	movs	r3, #1
 8079a80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8079a82:	687b      	ldr	r3, [r7, #4]
 8079a84:	691b      	ldr	r3, [r3, #16]
 8079a86:	2b01      	cmp	r3, #1
 8079a88:	d132      	bne.n	8079af0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8079a8a:	6879      	ldr	r1, [r7, #4]
 8079a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8079a8e:	4613      	mov	r3, r2
 8079a90:	00db      	lsls	r3, r3, #3
 8079a92:	1a9b      	subs	r3, r3, r2
 8079a94:	009b      	lsls	r3, r3, #2
 8079a96:	440b      	add	r3, r1
 8079a98:	3348      	adds	r3, #72	@ 0x48
 8079a9a:	6819      	ldr	r1, [r3, #0]
 8079a9c:	6878      	ldr	r0, [r7, #4]
 8079a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8079aa0:	4613      	mov	r3, r2
 8079aa2:	00db      	lsls	r3, r3, #3
 8079aa4:	1a9b      	subs	r3, r3, r2
 8079aa6:	009b      	lsls	r3, r3, #2
 8079aa8:	4403      	add	r3, r0
 8079aaa:	3344      	adds	r3, #68	@ 0x44
 8079aac:	681b      	ldr	r3, [r3, #0]
 8079aae:	4419      	add	r1, r3
 8079ab0:	6878      	ldr	r0, [r7, #4]
 8079ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8079ab4:	4613      	mov	r3, r2
 8079ab6:	00db      	lsls	r3, r3, #3
 8079ab8:	1a9b      	subs	r3, r3, r2
 8079aba:	009b      	lsls	r3, r3, #2
 8079abc:	4403      	add	r3, r0
 8079abe:	3348      	adds	r3, #72	@ 0x48
 8079ac0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8079ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079ac4:	2b00      	cmp	r3, #0
 8079ac6:	d113      	bne.n	8079af0 <HAL_PCD_IRQHandler+0x31c>
 8079ac8:	6879      	ldr	r1, [r7, #4]
 8079aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8079acc:	4613      	mov	r3, r2
 8079ace:	00db      	lsls	r3, r3, #3
 8079ad0:	1a9b      	subs	r3, r3, r2
 8079ad2:	009b      	lsls	r3, r3, #2
 8079ad4:	440b      	add	r3, r1
 8079ad6:	3350      	adds	r3, #80	@ 0x50
 8079ad8:	681b      	ldr	r3, [r3, #0]
 8079ada:	2b00      	cmp	r3, #0
 8079adc:	d108      	bne.n	8079af0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8079ade:	687b      	ldr	r3, [r7, #4]
 8079ae0:	6818      	ldr	r0, [r3, #0]
 8079ae2:	687b      	ldr	r3, [r7, #4]
 8079ae4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8079ae8:	461a      	mov	r2, r3
 8079aea:	2101      	movs	r1, #1
 8079aec:	f002 fc52 	bl	807c394 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8079af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079af2:	b2db      	uxtb	r3, r3
 8079af4:	4619      	mov	r1, r3
 8079af6:	6878      	ldr	r0, [r7, #4]
 8079af8:	f004 ffcd 	bl	807ea96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8079afc:	693b      	ldr	r3, [r7, #16]
 8079afe:	f003 0308 	and.w	r3, r3, #8
 8079b02:	2b00      	cmp	r3, #0
 8079b04:	d008      	beq.n	8079b18 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8079b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079b08:	015a      	lsls	r2, r3, #5
 8079b0a:	69fb      	ldr	r3, [r7, #28]
 8079b0c:	4413      	add	r3, r2
 8079b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079b12:	461a      	mov	r2, r3
 8079b14:	2308      	movs	r3, #8
 8079b16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8079b18:	693b      	ldr	r3, [r7, #16]
 8079b1a:	f003 0310 	and.w	r3, r3, #16
 8079b1e:	2b00      	cmp	r3, #0
 8079b20:	d008      	beq.n	8079b34 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8079b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079b24:	015a      	lsls	r2, r3, #5
 8079b26:	69fb      	ldr	r3, [r7, #28]
 8079b28:	4413      	add	r3, r2
 8079b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079b2e:	461a      	mov	r2, r3
 8079b30:	2310      	movs	r3, #16
 8079b32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8079b34:	693b      	ldr	r3, [r7, #16]
 8079b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8079b3a:	2b00      	cmp	r3, #0
 8079b3c:	d008      	beq.n	8079b50 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8079b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079b40:	015a      	lsls	r2, r3, #5
 8079b42:	69fb      	ldr	r3, [r7, #28]
 8079b44:	4413      	add	r3, r2
 8079b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079b4a:	461a      	mov	r2, r3
 8079b4c:	2340      	movs	r3, #64	@ 0x40
 8079b4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8079b50:	693b      	ldr	r3, [r7, #16]
 8079b52:	f003 0302 	and.w	r3, r3, #2
 8079b56:	2b00      	cmp	r3, #0
 8079b58:	d008      	beq.n	8079b6c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8079b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079b5c:	015a      	lsls	r2, r3, #5
 8079b5e:	69fb      	ldr	r3, [r7, #28]
 8079b60:	4413      	add	r3, r2
 8079b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079b66:	461a      	mov	r2, r3
 8079b68:	2302      	movs	r3, #2
 8079b6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8079b6c:	693b      	ldr	r3, [r7, #16]
 8079b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8079b72:	2b00      	cmp	r3, #0
 8079b74:	d003      	beq.n	8079b7e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8079b76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8079b78:	6878      	ldr	r0, [r7, #4]
 8079b7a:	f000 fbb9 	bl	807a2f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8079b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079b80:	3301      	adds	r3, #1
 8079b82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8079b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8079b86:	085b      	lsrs	r3, r3, #1
 8079b88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8079b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8079b8c:	2b00      	cmp	r3, #0
 8079b8e:	f47f af49 	bne.w	8079a24 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8079b92:	687b      	ldr	r3, [r7, #4]
 8079b94:	681b      	ldr	r3, [r3, #0]
 8079b96:	4618      	mov	r0, r3
 8079b98:	f002 fb37 	bl	807c20a <USB_ReadInterrupts>
 8079b9c:	4603      	mov	r3, r0
 8079b9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8079ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8079ba6:	d122      	bne.n	8079bee <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8079ba8:	69fb      	ldr	r3, [r7, #28]
 8079baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079bae:	685b      	ldr	r3, [r3, #4]
 8079bb0:	69fa      	ldr	r2, [r7, #28]
 8079bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079bb6:	f023 0301 	bic.w	r3, r3, #1
 8079bba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8079bbc:	687b      	ldr	r3, [r7, #4]
 8079bbe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8079bc2:	2b01      	cmp	r3, #1
 8079bc4:	d108      	bne.n	8079bd8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8079bc6:	687b      	ldr	r3, [r7, #4]
 8079bc8:	2200      	movs	r2, #0
 8079bca:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8079bce:	2100      	movs	r1, #0
 8079bd0:	6878      	ldr	r0, [r7, #4]
 8079bd2:	f000 fdc5 	bl	807a760 <HAL_PCDEx_LPM_Callback>
 8079bd6:	e002      	b.n	8079bde <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8079bd8:	6878      	ldr	r0, [r7, #4]
 8079bda:	f004 ffc9 	bl	807eb70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8079bde:	687b      	ldr	r3, [r7, #4]
 8079be0:	681b      	ldr	r3, [r3, #0]
 8079be2:	695a      	ldr	r2, [r3, #20]
 8079be4:	687b      	ldr	r3, [r7, #4]
 8079be6:	681b      	ldr	r3, [r3, #0]
 8079be8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8079bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8079bee:	687b      	ldr	r3, [r7, #4]
 8079bf0:	681b      	ldr	r3, [r3, #0]
 8079bf2:	4618      	mov	r0, r3
 8079bf4:	f002 fb09 	bl	807c20a <USB_ReadInterrupts>
 8079bf8:	4603      	mov	r3, r0
 8079bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8079bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8079c02:	d112      	bne.n	8079c2a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8079c04:	69fb      	ldr	r3, [r7, #28]
 8079c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079c0a:	689b      	ldr	r3, [r3, #8]
 8079c0c:	f003 0301 	and.w	r3, r3, #1
 8079c10:	2b01      	cmp	r3, #1
 8079c12:	d102      	bne.n	8079c1a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8079c14:	6878      	ldr	r0, [r7, #4]
 8079c16:	f004 ff85 	bl	807eb24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8079c1a:	687b      	ldr	r3, [r7, #4]
 8079c1c:	681b      	ldr	r3, [r3, #0]
 8079c1e:	695a      	ldr	r2, [r3, #20]
 8079c20:	687b      	ldr	r3, [r7, #4]
 8079c22:	681b      	ldr	r3, [r3, #0]
 8079c24:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8079c28:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8079c2a:	687b      	ldr	r3, [r7, #4]
 8079c2c:	681b      	ldr	r3, [r3, #0]
 8079c2e:	4618      	mov	r0, r3
 8079c30:	f002 faeb 	bl	807c20a <USB_ReadInterrupts>
 8079c34:	4603      	mov	r3, r0
 8079c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8079c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8079c3e:	f040 80c7 	bne.w	8079dd0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8079c42:	69fb      	ldr	r3, [r7, #28]
 8079c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079c48:	685b      	ldr	r3, [r3, #4]
 8079c4a:	69fa      	ldr	r2, [r7, #28]
 8079c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079c50:	f023 0301 	bic.w	r3, r3, #1
 8079c54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8079c56:	687b      	ldr	r3, [r7, #4]
 8079c58:	681b      	ldr	r3, [r3, #0]
 8079c5a:	2110      	movs	r1, #16
 8079c5c:	4618      	mov	r0, r3
 8079c5e:	f001 fc95 	bl	807b58c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8079c62:	2300      	movs	r3, #0
 8079c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8079c66:	e056      	b.n	8079d16 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8079c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8079c6a:	015a      	lsls	r2, r3, #5
 8079c6c:	69fb      	ldr	r3, [r7, #28]
 8079c6e:	4413      	add	r3, r2
 8079c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079c74:	461a      	mov	r2, r3
 8079c76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8079c7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8079c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8079c7e:	015a      	lsls	r2, r3, #5
 8079c80:	69fb      	ldr	r3, [r7, #28]
 8079c82:	4413      	add	r3, r2
 8079c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079c88:	681b      	ldr	r3, [r3, #0]
 8079c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8079c8c:	0151      	lsls	r1, r2, #5
 8079c8e:	69fa      	ldr	r2, [r7, #28]
 8079c90:	440a      	add	r2, r1
 8079c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8079c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8079c9a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8079c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8079c9e:	015a      	lsls	r2, r3, #5
 8079ca0:	69fb      	ldr	r3, [r7, #28]
 8079ca2:	4413      	add	r3, r2
 8079ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8079ca8:	681b      	ldr	r3, [r3, #0]
 8079caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8079cac:	0151      	lsls	r1, r2, #5
 8079cae:	69fa      	ldr	r2, [r7, #28]
 8079cb0:	440a      	add	r2, r1
 8079cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8079cb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8079cba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8079cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8079cbe:	015a      	lsls	r2, r3, #5
 8079cc0:	69fb      	ldr	r3, [r7, #28]
 8079cc2:	4413      	add	r3, r2
 8079cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8079cc8:	461a      	mov	r2, r3
 8079cca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8079cce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8079cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8079cd2:	015a      	lsls	r2, r3, #5
 8079cd4:	69fb      	ldr	r3, [r7, #28]
 8079cd6:	4413      	add	r3, r2
 8079cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8079cdc:	681b      	ldr	r3, [r3, #0]
 8079cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8079ce0:	0151      	lsls	r1, r2, #5
 8079ce2:	69fa      	ldr	r2, [r7, #28]
 8079ce4:	440a      	add	r2, r1
 8079ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8079cea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8079cee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8079cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8079cf2:	015a      	lsls	r2, r3, #5
 8079cf4:	69fb      	ldr	r3, [r7, #28]
 8079cf6:	4413      	add	r3, r2
 8079cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8079cfc:	681b      	ldr	r3, [r3, #0]
 8079cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8079d00:	0151      	lsls	r1, r2, #5
 8079d02:	69fa      	ldr	r2, [r7, #28]
 8079d04:	440a      	add	r2, r1
 8079d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8079d0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8079d0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8079d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8079d12:	3301      	adds	r3, #1
 8079d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8079d16:	687b      	ldr	r3, [r7, #4]
 8079d18:	685b      	ldr	r3, [r3, #4]
 8079d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8079d1c:	429a      	cmp	r2, r3
 8079d1e:	d3a3      	bcc.n	8079c68 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8079d20:	69fb      	ldr	r3, [r7, #28]
 8079d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079d26:	69db      	ldr	r3, [r3, #28]
 8079d28:	69fa      	ldr	r2, [r7, #28]
 8079d2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079d2e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8079d32:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8079d34:	687b      	ldr	r3, [r7, #4]
 8079d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8079d38:	2b00      	cmp	r3, #0
 8079d3a:	d016      	beq.n	8079d6a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8079d3c:	69fb      	ldr	r3, [r7, #28]
 8079d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8079d46:	69fa      	ldr	r2, [r7, #28]
 8079d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079d4c:	f043 030b 	orr.w	r3, r3, #11
 8079d50:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8079d54:	69fb      	ldr	r3, [r7, #28]
 8079d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8079d5c:	69fa      	ldr	r2, [r7, #28]
 8079d5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079d62:	f043 030b 	orr.w	r3, r3, #11
 8079d66:	6453      	str	r3, [r2, #68]	@ 0x44
 8079d68:	e015      	b.n	8079d96 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8079d6a:	69fb      	ldr	r3, [r7, #28]
 8079d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079d70:	695b      	ldr	r3, [r3, #20]
 8079d72:	69fa      	ldr	r2, [r7, #28]
 8079d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079d78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8079d7c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8079d80:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8079d82:	69fb      	ldr	r3, [r7, #28]
 8079d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079d88:	691b      	ldr	r3, [r3, #16]
 8079d8a:	69fa      	ldr	r2, [r7, #28]
 8079d8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079d90:	f043 030b 	orr.w	r3, r3, #11
 8079d94:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8079d96:	69fb      	ldr	r3, [r7, #28]
 8079d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8079d9c:	681b      	ldr	r3, [r3, #0]
 8079d9e:	69fa      	ldr	r2, [r7, #28]
 8079da0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8079da4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8079da8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8079daa:	687b      	ldr	r3, [r7, #4]
 8079dac:	6818      	ldr	r0, [r3, #0]
 8079dae:	687b      	ldr	r3, [r7, #4]
 8079db0:	691b      	ldr	r3, [r3, #16]
 8079db2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8079db4:	687b      	ldr	r3, [r7, #4]
 8079db6:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8079dba:	461a      	mov	r2, r3
 8079dbc:	f002 faea 	bl	807c394 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8079dc0:	687b      	ldr	r3, [r7, #4]
 8079dc2:	681b      	ldr	r3, [r3, #0]
 8079dc4:	695a      	ldr	r2, [r3, #20]
 8079dc6:	687b      	ldr	r3, [r7, #4]
 8079dc8:	681b      	ldr	r3, [r3, #0]
 8079dca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8079dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8079dd0:	687b      	ldr	r3, [r7, #4]
 8079dd2:	681b      	ldr	r3, [r3, #0]
 8079dd4:	4618      	mov	r0, r3
 8079dd6:	f002 fa18 	bl	807c20a <USB_ReadInterrupts>
 8079dda:	4603      	mov	r3, r0
 8079ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8079de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8079de4:	d124      	bne.n	8079e30 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8079de6:	687b      	ldr	r3, [r7, #4]
 8079de8:	681b      	ldr	r3, [r3, #0]
 8079dea:	4618      	mov	r0, r3
 8079dec:	f002 faae 	bl	807c34c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8079df0:	687b      	ldr	r3, [r7, #4]
 8079df2:	681b      	ldr	r3, [r3, #0]
 8079df4:	4618      	mov	r0, r3
 8079df6:	f001 fc2a 	bl	807b64e <USB_GetDevSpeed>
 8079dfa:	4603      	mov	r3, r0
 8079dfc:	461a      	mov	r2, r3
 8079dfe:	687b      	ldr	r3, [r7, #4]
 8079e00:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8079e02:	687b      	ldr	r3, [r7, #4]
 8079e04:	681c      	ldr	r4, [r3, #0]
 8079e06:	f001 f8e7 	bl	807afd8 <HAL_RCC_GetHCLKFreq>
 8079e0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8079e0c:	687b      	ldr	r3, [r7, #4]
 8079e0e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8079e10:	b2db      	uxtb	r3, r3
 8079e12:	461a      	mov	r2, r3
 8079e14:	4620      	mov	r0, r4
 8079e16:	f001 f967 	bl	807b0e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8079e1a:	6878      	ldr	r0, [r7, #4]
 8079e1c:	f004 fe63 	bl	807eae6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8079e20:	687b      	ldr	r3, [r7, #4]
 8079e22:	681b      	ldr	r3, [r3, #0]
 8079e24:	695a      	ldr	r2, [r3, #20]
 8079e26:	687b      	ldr	r3, [r7, #4]
 8079e28:	681b      	ldr	r3, [r3, #0]
 8079e2a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8079e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8079e30:	687b      	ldr	r3, [r7, #4]
 8079e32:	681b      	ldr	r3, [r3, #0]
 8079e34:	4618      	mov	r0, r3
 8079e36:	f002 f9e8 	bl	807c20a <USB_ReadInterrupts>
 8079e3a:	4603      	mov	r3, r0
 8079e3c:	f003 0308 	and.w	r3, r3, #8
 8079e40:	2b08      	cmp	r3, #8
 8079e42:	d10a      	bne.n	8079e5a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8079e44:	6878      	ldr	r0, [r7, #4]
 8079e46:	f004 fe40 	bl	807eaca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8079e4a:	687b      	ldr	r3, [r7, #4]
 8079e4c:	681b      	ldr	r3, [r3, #0]
 8079e4e:	695a      	ldr	r2, [r3, #20]
 8079e50:	687b      	ldr	r3, [r7, #4]
 8079e52:	681b      	ldr	r3, [r3, #0]
 8079e54:	f002 0208 	and.w	r2, r2, #8
 8079e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8079e5a:	687b      	ldr	r3, [r7, #4]
 8079e5c:	681b      	ldr	r3, [r3, #0]
 8079e5e:	4618      	mov	r0, r3
 8079e60:	f002 f9d3 	bl	807c20a <USB_ReadInterrupts>
 8079e64:	4603      	mov	r3, r0
 8079e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8079e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8079e6e:	d10f      	bne.n	8079e90 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8079e70:	2300      	movs	r3, #0
 8079e72:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8079e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079e76:	b2db      	uxtb	r3, r3
 8079e78:	4619      	mov	r1, r3
 8079e7a:	6878      	ldr	r0, [r7, #4]
 8079e7c:	f004 fe98 	bl	807ebb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8079e80:	687b      	ldr	r3, [r7, #4]
 8079e82:	681b      	ldr	r3, [r3, #0]
 8079e84:	695a      	ldr	r2, [r3, #20]
 8079e86:	687b      	ldr	r3, [r7, #4]
 8079e88:	681b      	ldr	r3, [r3, #0]
 8079e8a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8079e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8079e90:	687b      	ldr	r3, [r7, #4]
 8079e92:	681b      	ldr	r3, [r3, #0]
 8079e94:	4618      	mov	r0, r3
 8079e96:	f002 f9b8 	bl	807c20a <USB_ReadInterrupts>
 8079e9a:	4603      	mov	r3, r0
 8079e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8079ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8079ea4:	d10f      	bne.n	8079ec6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8079ea6:	2300      	movs	r3, #0
 8079ea8:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8079eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8079eac:	b2db      	uxtb	r3, r3
 8079eae:	4619      	mov	r1, r3
 8079eb0:	6878      	ldr	r0, [r7, #4]
 8079eb2:	f004 fe6b 	bl	807eb8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8079eb6:	687b      	ldr	r3, [r7, #4]
 8079eb8:	681b      	ldr	r3, [r3, #0]
 8079eba:	695a      	ldr	r2, [r3, #20]
 8079ebc:	687b      	ldr	r3, [r7, #4]
 8079ebe:	681b      	ldr	r3, [r3, #0]
 8079ec0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8079ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8079ec6:	687b      	ldr	r3, [r7, #4]
 8079ec8:	681b      	ldr	r3, [r3, #0]
 8079eca:	4618      	mov	r0, r3
 8079ecc:	f002 f99d 	bl	807c20a <USB_ReadInterrupts>
 8079ed0:	4603      	mov	r3, r0
 8079ed2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8079ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8079eda:	d10a      	bne.n	8079ef2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8079edc:	6878      	ldr	r0, [r7, #4]
 8079ede:	f004 fe79 	bl	807ebd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8079ee2:	687b      	ldr	r3, [r7, #4]
 8079ee4:	681b      	ldr	r3, [r3, #0]
 8079ee6:	695a      	ldr	r2, [r3, #20]
 8079ee8:	687b      	ldr	r3, [r7, #4]
 8079eea:	681b      	ldr	r3, [r3, #0]
 8079eec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8079ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8079ef2:	687b      	ldr	r3, [r7, #4]
 8079ef4:	681b      	ldr	r3, [r3, #0]
 8079ef6:	4618      	mov	r0, r3
 8079ef8:	f002 f987 	bl	807c20a <USB_ReadInterrupts>
 8079efc:	4603      	mov	r3, r0
 8079efe:	f003 0304 	and.w	r3, r3, #4
 8079f02:	2b04      	cmp	r3, #4
 8079f04:	d115      	bne.n	8079f32 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8079f06:	687b      	ldr	r3, [r7, #4]
 8079f08:	681b      	ldr	r3, [r3, #0]
 8079f0a:	685b      	ldr	r3, [r3, #4]
 8079f0c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8079f0e:	69bb      	ldr	r3, [r7, #24]
 8079f10:	f003 0304 	and.w	r3, r3, #4
 8079f14:	2b00      	cmp	r3, #0
 8079f16:	d002      	beq.n	8079f1e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8079f18:	6878      	ldr	r0, [r7, #4]
 8079f1a:	f004 fe69 	bl	807ebf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8079f1e:	687b      	ldr	r3, [r7, #4]
 8079f20:	681b      	ldr	r3, [r3, #0]
 8079f22:	6859      	ldr	r1, [r3, #4]
 8079f24:	687b      	ldr	r3, [r7, #4]
 8079f26:	681b      	ldr	r3, [r3, #0]
 8079f28:	69ba      	ldr	r2, [r7, #24]
 8079f2a:	430a      	orrs	r2, r1
 8079f2c:	605a      	str	r2, [r3, #4]
 8079f2e:	e000      	b.n	8079f32 <HAL_PCD_IRQHandler+0x75e>
      return;
 8079f30:	bf00      	nop
    }
  }
}
 8079f32:	3734      	adds	r7, #52	@ 0x34
 8079f34:	46bd      	mov	sp, r7
 8079f36:	bd90      	pop	{r4, r7, pc}

08079f38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8079f38:	b580      	push	{r7, lr}
 8079f3a:	b082      	sub	sp, #8
 8079f3c:	af00      	add	r7, sp, #0
 8079f3e:	6078      	str	r0, [r7, #4]
 8079f40:	460b      	mov	r3, r1
 8079f42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8079f44:	687b      	ldr	r3, [r7, #4]
 8079f46:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8079f4a:	2b01      	cmp	r3, #1
 8079f4c:	d101      	bne.n	8079f52 <HAL_PCD_SetAddress+0x1a>
 8079f4e:	2302      	movs	r3, #2
 8079f50:	e013      	b.n	8079f7a <HAL_PCD_SetAddress+0x42>
 8079f52:	687b      	ldr	r3, [r7, #4]
 8079f54:	2201      	movs	r2, #1
 8079f56:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8079f5a:	687b      	ldr	r3, [r7, #4]
 8079f5c:	78fa      	ldrb	r2, [r7, #3]
 8079f5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8079f62:	687b      	ldr	r3, [r7, #4]
 8079f64:	681b      	ldr	r3, [r3, #0]
 8079f66:	78fa      	ldrb	r2, [r7, #3]
 8079f68:	4611      	mov	r1, r2
 8079f6a:	4618      	mov	r0, r3
 8079f6c:	f002 f8e5 	bl	807c13a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8079f70:	687b      	ldr	r3, [r7, #4]
 8079f72:	2200      	movs	r2, #0
 8079f74:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8079f78:	2300      	movs	r3, #0
}
 8079f7a:	4618      	mov	r0, r3
 8079f7c:	3708      	adds	r7, #8
 8079f7e:	46bd      	mov	sp, r7
 8079f80:	bd80      	pop	{r7, pc}

08079f82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8079f82:	b580      	push	{r7, lr}
 8079f84:	b084      	sub	sp, #16
 8079f86:	af00      	add	r7, sp, #0
 8079f88:	6078      	str	r0, [r7, #4]
 8079f8a:	4608      	mov	r0, r1
 8079f8c:	4611      	mov	r1, r2
 8079f8e:	461a      	mov	r2, r3
 8079f90:	4603      	mov	r3, r0
 8079f92:	70fb      	strb	r3, [r7, #3]
 8079f94:	460b      	mov	r3, r1
 8079f96:	803b      	strh	r3, [r7, #0]
 8079f98:	4613      	mov	r3, r2
 8079f9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8079f9c:	2300      	movs	r3, #0
 8079f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8079fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8079fa4:	2b00      	cmp	r3, #0
 8079fa6:	da0f      	bge.n	8079fc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8079fa8:	78fb      	ldrb	r3, [r7, #3]
 8079faa:	f003 020f 	and.w	r2, r3, #15
 8079fae:	4613      	mov	r3, r2
 8079fb0:	00db      	lsls	r3, r3, #3
 8079fb2:	1a9b      	subs	r3, r3, r2
 8079fb4:	009b      	lsls	r3, r3, #2
 8079fb6:	3338      	adds	r3, #56	@ 0x38
 8079fb8:	687a      	ldr	r2, [r7, #4]
 8079fba:	4413      	add	r3, r2
 8079fbc:	3304      	adds	r3, #4
 8079fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8079fc0:	68fb      	ldr	r3, [r7, #12]
 8079fc2:	2201      	movs	r2, #1
 8079fc4:	705a      	strb	r2, [r3, #1]
 8079fc6:	e00f      	b.n	8079fe8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8079fc8:	78fb      	ldrb	r3, [r7, #3]
 8079fca:	f003 020f 	and.w	r2, r3, #15
 8079fce:	4613      	mov	r3, r2
 8079fd0:	00db      	lsls	r3, r3, #3
 8079fd2:	1a9b      	subs	r3, r3, r2
 8079fd4:	009b      	lsls	r3, r3, #2
 8079fd6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8079fda:	687a      	ldr	r2, [r7, #4]
 8079fdc:	4413      	add	r3, r2
 8079fde:	3304      	adds	r3, #4
 8079fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8079fe2:	68fb      	ldr	r3, [r7, #12]
 8079fe4:	2200      	movs	r2, #0
 8079fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8079fe8:	78fb      	ldrb	r3, [r7, #3]
 8079fea:	f003 030f 	and.w	r3, r3, #15
 8079fee:	b2da      	uxtb	r2, r3
 8079ff0:	68fb      	ldr	r3, [r7, #12]
 8079ff2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8079ff4:	883a      	ldrh	r2, [r7, #0]
 8079ff6:	68fb      	ldr	r3, [r7, #12]
 8079ff8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8079ffa:	68fb      	ldr	r3, [r7, #12]
 8079ffc:	78ba      	ldrb	r2, [r7, #2]
 8079ffe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 807a000:	68fb      	ldr	r3, [r7, #12]
 807a002:	785b      	ldrb	r3, [r3, #1]
 807a004:	2b00      	cmp	r3, #0
 807a006:	d004      	beq.n	807a012 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 807a008:	68fb      	ldr	r3, [r7, #12]
 807a00a:	781b      	ldrb	r3, [r3, #0]
 807a00c:	461a      	mov	r2, r3
 807a00e:	68fb      	ldr	r3, [r7, #12]
 807a010:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 807a012:	78bb      	ldrb	r3, [r7, #2]
 807a014:	2b02      	cmp	r3, #2
 807a016:	d102      	bne.n	807a01e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 807a018:	68fb      	ldr	r3, [r7, #12]
 807a01a:	2200      	movs	r2, #0
 807a01c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 807a01e:	687b      	ldr	r3, [r7, #4]
 807a020:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 807a024:	2b01      	cmp	r3, #1
 807a026:	d101      	bne.n	807a02c <HAL_PCD_EP_Open+0xaa>
 807a028:	2302      	movs	r3, #2
 807a02a:	e00e      	b.n	807a04a <HAL_PCD_EP_Open+0xc8>
 807a02c:	687b      	ldr	r3, [r7, #4]
 807a02e:	2201      	movs	r2, #1
 807a030:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 807a034:	687b      	ldr	r3, [r7, #4]
 807a036:	681b      	ldr	r3, [r3, #0]
 807a038:	68f9      	ldr	r1, [r7, #12]
 807a03a:	4618      	mov	r0, r3
 807a03c:	f001 fb2c 	bl	807b698 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 807a040:	687b      	ldr	r3, [r7, #4]
 807a042:	2200      	movs	r2, #0
 807a044:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 807a048:	7afb      	ldrb	r3, [r7, #11]
}
 807a04a:	4618      	mov	r0, r3
 807a04c:	3710      	adds	r7, #16
 807a04e:	46bd      	mov	sp, r7
 807a050:	bd80      	pop	{r7, pc}

0807a052 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 807a052:	b580      	push	{r7, lr}
 807a054:	b086      	sub	sp, #24
 807a056:	af00      	add	r7, sp, #0
 807a058:	60f8      	str	r0, [r7, #12]
 807a05a:	607a      	str	r2, [r7, #4]
 807a05c:	603b      	str	r3, [r7, #0]
 807a05e:	460b      	mov	r3, r1
 807a060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 807a062:	7afb      	ldrb	r3, [r7, #11]
 807a064:	f003 020f 	and.w	r2, r3, #15
 807a068:	4613      	mov	r3, r2
 807a06a:	00db      	lsls	r3, r3, #3
 807a06c:	1a9b      	subs	r3, r3, r2
 807a06e:	009b      	lsls	r3, r3, #2
 807a070:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 807a074:	68fa      	ldr	r2, [r7, #12]
 807a076:	4413      	add	r3, r2
 807a078:	3304      	adds	r3, #4
 807a07a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 807a07c:	697b      	ldr	r3, [r7, #20]
 807a07e:	687a      	ldr	r2, [r7, #4]
 807a080:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 807a082:	697b      	ldr	r3, [r7, #20]
 807a084:	683a      	ldr	r2, [r7, #0]
 807a086:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 807a088:	697b      	ldr	r3, [r7, #20]
 807a08a:	2200      	movs	r2, #0
 807a08c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 807a08e:	697b      	ldr	r3, [r7, #20]
 807a090:	2200      	movs	r2, #0
 807a092:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a094:	7afb      	ldrb	r3, [r7, #11]
 807a096:	f003 030f 	and.w	r3, r3, #15
 807a09a:	b2da      	uxtb	r2, r3
 807a09c:	697b      	ldr	r3, [r7, #20]
 807a09e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 807a0a0:	68fb      	ldr	r3, [r7, #12]
 807a0a2:	691b      	ldr	r3, [r3, #16]
 807a0a4:	2b01      	cmp	r3, #1
 807a0a6:	d102      	bne.n	807a0ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 807a0a8:	687a      	ldr	r2, [r7, #4]
 807a0aa:	697b      	ldr	r3, [r7, #20]
 807a0ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a0ae:	7afb      	ldrb	r3, [r7, #11]
 807a0b0:	f003 030f 	and.w	r3, r3, #15
 807a0b4:	2b00      	cmp	r3, #0
 807a0b6:	d109      	bne.n	807a0cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a0b8:	68fb      	ldr	r3, [r7, #12]
 807a0ba:	6818      	ldr	r0, [r3, #0]
 807a0bc:	68fb      	ldr	r3, [r7, #12]
 807a0be:	691b      	ldr	r3, [r3, #16]
 807a0c0:	b2db      	uxtb	r3, r3
 807a0c2:	461a      	mov	r2, r3
 807a0c4:	6979      	ldr	r1, [r7, #20]
 807a0c6:	f001 fdb3 	bl	807bc30 <USB_EP0StartXfer>
 807a0ca:	e008      	b.n	807a0de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a0cc:	68fb      	ldr	r3, [r7, #12]
 807a0ce:	6818      	ldr	r0, [r3, #0]
 807a0d0:	68fb      	ldr	r3, [r7, #12]
 807a0d2:	691b      	ldr	r3, [r3, #16]
 807a0d4:	b2db      	uxtb	r3, r3
 807a0d6:	461a      	mov	r2, r3
 807a0d8:	6979      	ldr	r1, [r7, #20]
 807a0da:	f001 fb65 	bl	807b7a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 807a0de:	2300      	movs	r3, #0
}
 807a0e0:	4618      	mov	r0, r3
 807a0e2:	3718      	adds	r7, #24
 807a0e4:	46bd      	mov	sp, r7
 807a0e6:	bd80      	pop	{r7, pc}

0807a0e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 807a0e8:	b580      	push	{r7, lr}
 807a0ea:	b086      	sub	sp, #24
 807a0ec:	af00      	add	r7, sp, #0
 807a0ee:	60f8      	str	r0, [r7, #12]
 807a0f0:	607a      	str	r2, [r7, #4]
 807a0f2:	603b      	str	r3, [r7, #0]
 807a0f4:	460b      	mov	r3, r1
 807a0f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a0f8:	7afb      	ldrb	r3, [r7, #11]
 807a0fa:	f003 020f 	and.w	r2, r3, #15
 807a0fe:	4613      	mov	r3, r2
 807a100:	00db      	lsls	r3, r3, #3
 807a102:	1a9b      	subs	r3, r3, r2
 807a104:	009b      	lsls	r3, r3, #2
 807a106:	3338      	adds	r3, #56	@ 0x38
 807a108:	68fa      	ldr	r2, [r7, #12]
 807a10a:	4413      	add	r3, r2
 807a10c:	3304      	adds	r3, #4
 807a10e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 807a110:	697b      	ldr	r3, [r7, #20]
 807a112:	687a      	ldr	r2, [r7, #4]
 807a114:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 807a116:	697b      	ldr	r3, [r7, #20]
 807a118:	683a      	ldr	r2, [r7, #0]
 807a11a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 807a11c:	697b      	ldr	r3, [r7, #20]
 807a11e:	2200      	movs	r2, #0
 807a120:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 807a122:	697b      	ldr	r3, [r7, #20]
 807a124:	2201      	movs	r2, #1
 807a126:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a128:	7afb      	ldrb	r3, [r7, #11]
 807a12a:	f003 030f 	and.w	r3, r3, #15
 807a12e:	b2da      	uxtb	r2, r3
 807a130:	697b      	ldr	r3, [r7, #20]
 807a132:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 807a134:	68fb      	ldr	r3, [r7, #12]
 807a136:	691b      	ldr	r3, [r3, #16]
 807a138:	2b01      	cmp	r3, #1
 807a13a:	d102      	bne.n	807a142 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 807a13c:	687a      	ldr	r2, [r7, #4]
 807a13e:	697b      	ldr	r3, [r7, #20]
 807a140:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a142:	7afb      	ldrb	r3, [r7, #11]
 807a144:	f003 030f 	and.w	r3, r3, #15
 807a148:	2b00      	cmp	r3, #0
 807a14a:	d109      	bne.n	807a160 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a14c:	68fb      	ldr	r3, [r7, #12]
 807a14e:	6818      	ldr	r0, [r3, #0]
 807a150:	68fb      	ldr	r3, [r7, #12]
 807a152:	691b      	ldr	r3, [r3, #16]
 807a154:	b2db      	uxtb	r3, r3
 807a156:	461a      	mov	r2, r3
 807a158:	6979      	ldr	r1, [r7, #20]
 807a15a:	f001 fd69 	bl	807bc30 <USB_EP0StartXfer>
 807a15e:	e008      	b.n	807a172 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a160:	68fb      	ldr	r3, [r7, #12]
 807a162:	6818      	ldr	r0, [r3, #0]
 807a164:	68fb      	ldr	r3, [r7, #12]
 807a166:	691b      	ldr	r3, [r3, #16]
 807a168:	b2db      	uxtb	r3, r3
 807a16a:	461a      	mov	r2, r3
 807a16c:	6979      	ldr	r1, [r7, #20]
 807a16e:	f001 fb1b 	bl	807b7a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 807a172:	2300      	movs	r3, #0
}
 807a174:	4618      	mov	r0, r3
 807a176:	3718      	adds	r7, #24
 807a178:	46bd      	mov	sp, r7
 807a17a:	bd80      	pop	{r7, pc}

0807a17c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 807a17c:	b580      	push	{r7, lr}
 807a17e:	b084      	sub	sp, #16
 807a180:	af00      	add	r7, sp, #0
 807a182:	6078      	str	r0, [r7, #4]
 807a184:	460b      	mov	r3, r1
 807a186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 807a188:	78fb      	ldrb	r3, [r7, #3]
 807a18a:	f003 020f 	and.w	r2, r3, #15
 807a18e:	687b      	ldr	r3, [r7, #4]
 807a190:	685b      	ldr	r3, [r3, #4]
 807a192:	429a      	cmp	r2, r3
 807a194:	d901      	bls.n	807a19a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 807a196:	2301      	movs	r3, #1
 807a198:	e050      	b.n	807a23c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 807a19a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807a19e:	2b00      	cmp	r3, #0
 807a1a0:	da0f      	bge.n	807a1c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a1a2:	78fb      	ldrb	r3, [r7, #3]
 807a1a4:	f003 020f 	and.w	r2, r3, #15
 807a1a8:	4613      	mov	r3, r2
 807a1aa:	00db      	lsls	r3, r3, #3
 807a1ac:	1a9b      	subs	r3, r3, r2
 807a1ae:	009b      	lsls	r3, r3, #2
 807a1b0:	3338      	adds	r3, #56	@ 0x38
 807a1b2:	687a      	ldr	r2, [r7, #4]
 807a1b4:	4413      	add	r3, r2
 807a1b6:	3304      	adds	r3, #4
 807a1b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 807a1ba:	68fb      	ldr	r3, [r7, #12]
 807a1bc:	2201      	movs	r2, #1
 807a1be:	705a      	strb	r2, [r3, #1]
 807a1c0:	e00d      	b.n	807a1de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 807a1c2:	78fa      	ldrb	r2, [r7, #3]
 807a1c4:	4613      	mov	r3, r2
 807a1c6:	00db      	lsls	r3, r3, #3
 807a1c8:	1a9b      	subs	r3, r3, r2
 807a1ca:	009b      	lsls	r3, r3, #2
 807a1cc:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 807a1d0:	687a      	ldr	r2, [r7, #4]
 807a1d2:	4413      	add	r3, r2
 807a1d4:	3304      	adds	r3, #4
 807a1d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 807a1d8:	68fb      	ldr	r3, [r7, #12]
 807a1da:	2200      	movs	r2, #0
 807a1dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 807a1de:	68fb      	ldr	r3, [r7, #12]
 807a1e0:	2201      	movs	r2, #1
 807a1e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a1e4:	78fb      	ldrb	r3, [r7, #3]
 807a1e6:	f003 030f 	and.w	r3, r3, #15
 807a1ea:	b2da      	uxtb	r2, r3
 807a1ec:	68fb      	ldr	r3, [r7, #12]
 807a1ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 807a1f0:	687b      	ldr	r3, [r7, #4]
 807a1f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 807a1f6:	2b01      	cmp	r3, #1
 807a1f8:	d101      	bne.n	807a1fe <HAL_PCD_EP_SetStall+0x82>
 807a1fa:	2302      	movs	r3, #2
 807a1fc:	e01e      	b.n	807a23c <HAL_PCD_EP_SetStall+0xc0>
 807a1fe:	687b      	ldr	r3, [r7, #4]
 807a200:	2201      	movs	r2, #1
 807a202:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 807a206:	687b      	ldr	r3, [r7, #4]
 807a208:	681b      	ldr	r3, [r3, #0]
 807a20a:	68f9      	ldr	r1, [r7, #12]
 807a20c:	4618      	mov	r0, r3
 807a20e:	f001 fec0 	bl	807bf92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a212:	78fb      	ldrb	r3, [r7, #3]
 807a214:	f003 030f 	and.w	r3, r3, #15
 807a218:	2b00      	cmp	r3, #0
 807a21a:	d10a      	bne.n	807a232 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 807a21c:	687b      	ldr	r3, [r7, #4]
 807a21e:	6818      	ldr	r0, [r3, #0]
 807a220:	687b      	ldr	r3, [r7, #4]
 807a222:	691b      	ldr	r3, [r3, #16]
 807a224:	b2d9      	uxtb	r1, r3
 807a226:	687b      	ldr	r3, [r7, #4]
 807a228:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 807a22c:	461a      	mov	r2, r3
 807a22e:	f002 f8b1 	bl	807c394 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 807a232:	687b      	ldr	r3, [r7, #4]
 807a234:	2200      	movs	r2, #0
 807a236:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 807a23a:	2300      	movs	r3, #0
}
 807a23c:	4618      	mov	r0, r3
 807a23e:	3710      	adds	r7, #16
 807a240:	46bd      	mov	sp, r7
 807a242:	bd80      	pop	{r7, pc}

0807a244 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 807a244:	b580      	push	{r7, lr}
 807a246:	b084      	sub	sp, #16
 807a248:	af00      	add	r7, sp, #0
 807a24a:	6078      	str	r0, [r7, #4]
 807a24c:	460b      	mov	r3, r1
 807a24e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 807a250:	78fb      	ldrb	r3, [r7, #3]
 807a252:	f003 020f 	and.w	r2, r3, #15
 807a256:	687b      	ldr	r3, [r7, #4]
 807a258:	685b      	ldr	r3, [r3, #4]
 807a25a:	429a      	cmp	r2, r3
 807a25c:	d901      	bls.n	807a262 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 807a25e:	2301      	movs	r3, #1
 807a260:	e042      	b.n	807a2e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 807a262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807a266:	2b00      	cmp	r3, #0
 807a268:	da0f      	bge.n	807a28a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a26a:	78fb      	ldrb	r3, [r7, #3]
 807a26c:	f003 020f 	and.w	r2, r3, #15
 807a270:	4613      	mov	r3, r2
 807a272:	00db      	lsls	r3, r3, #3
 807a274:	1a9b      	subs	r3, r3, r2
 807a276:	009b      	lsls	r3, r3, #2
 807a278:	3338      	adds	r3, #56	@ 0x38
 807a27a:	687a      	ldr	r2, [r7, #4]
 807a27c:	4413      	add	r3, r2
 807a27e:	3304      	adds	r3, #4
 807a280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 807a282:	68fb      	ldr	r3, [r7, #12]
 807a284:	2201      	movs	r2, #1
 807a286:	705a      	strb	r2, [r3, #1]
 807a288:	e00f      	b.n	807a2aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 807a28a:	78fb      	ldrb	r3, [r7, #3]
 807a28c:	f003 020f 	and.w	r2, r3, #15
 807a290:	4613      	mov	r3, r2
 807a292:	00db      	lsls	r3, r3, #3
 807a294:	1a9b      	subs	r3, r3, r2
 807a296:	009b      	lsls	r3, r3, #2
 807a298:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 807a29c:	687a      	ldr	r2, [r7, #4]
 807a29e:	4413      	add	r3, r2
 807a2a0:	3304      	adds	r3, #4
 807a2a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 807a2a4:	68fb      	ldr	r3, [r7, #12]
 807a2a6:	2200      	movs	r2, #0
 807a2a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 807a2aa:	68fb      	ldr	r3, [r7, #12]
 807a2ac:	2200      	movs	r2, #0
 807a2ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a2b0:	78fb      	ldrb	r3, [r7, #3]
 807a2b2:	f003 030f 	and.w	r3, r3, #15
 807a2b6:	b2da      	uxtb	r2, r3
 807a2b8:	68fb      	ldr	r3, [r7, #12]
 807a2ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 807a2bc:	687b      	ldr	r3, [r7, #4]
 807a2be:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 807a2c2:	2b01      	cmp	r3, #1
 807a2c4:	d101      	bne.n	807a2ca <HAL_PCD_EP_ClrStall+0x86>
 807a2c6:	2302      	movs	r3, #2
 807a2c8:	e00e      	b.n	807a2e8 <HAL_PCD_EP_ClrStall+0xa4>
 807a2ca:	687b      	ldr	r3, [r7, #4]
 807a2cc:	2201      	movs	r2, #1
 807a2ce:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 807a2d2:	687b      	ldr	r3, [r7, #4]
 807a2d4:	681b      	ldr	r3, [r3, #0]
 807a2d6:	68f9      	ldr	r1, [r7, #12]
 807a2d8:	4618      	mov	r0, r3
 807a2da:	f001 fec8 	bl	807c06e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 807a2de:	687b      	ldr	r3, [r7, #4]
 807a2e0:	2200      	movs	r2, #0
 807a2e2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 807a2e6:	2300      	movs	r3, #0
}
 807a2e8:	4618      	mov	r0, r3
 807a2ea:	3710      	adds	r7, #16
 807a2ec:	46bd      	mov	sp, r7
 807a2ee:	bd80      	pop	{r7, pc}

0807a2f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a2f0:	b580      	push	{r7, lr}
 807a2f2:	b08a      	sub	sp, #40	@ 0x28
 807a2f4:	af02      	add	r7, sp, #8
 807a2f6:	6078      	str	r0, [r7, #4]
 807a2f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a2fa:	687b      	ldr	r3, [r7, #4]
 807a2fc:	681b      	ldr	r3, [r3, #0]
 807a2fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a300:	697b      	ldr	r3, [r7, #20]
 807a302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 807a304:	683a      	ldr	r2, [r7, #0]
 807a306:	4613      	mov	r3, r2
 807a308:	00db      	lsls	r3, r3, #3
 807a30a:	1a9b      	subs	r3, r3, r2
 807a30c:	009b      	lsls	r3, r3, #2
 807a30e:	3338      	adds	r3, #56	@ 0x38
 807a310:	687a      	ldr	r2, [r7, #4]
 807a312:	4413      	add	r3, r2
 807a314:	3304      	adds	r3, #4
 807a316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 807a318:	68fb      	ldr	r3, [r7, #12]
 807a31a:	699a      	ldr	r2, [r3, #24]
 807a31c:	68fb      	ldr	r3, [r7, #12]
 807a31e:	695b      	ldr	r3, [r3, #20]
 807a320:	429a      	cmp	r2, r3
 807a322:	d901      	bls.n	807a328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 807a324:	2301      	movs	r3, #1
 807a326:	e06c      	b.n	807a402 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 807a328:	68fb      	ldr	r3, [r7, #12]
 807a32a:	695a      	ldr	r2, [r3, #20]
 807a32c:	68fb      	ldr	r3, [r7, #12]
 807a32e:	699b      	ldr	r3, [r3, #24]
 807a330:	1ad3      	subs	r3, r2, r3
 807a332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 807a334:	68fb      	ldr	r3, [r7, #12]
 807a336:	689b      	ldr	r3, [r3, #8]
 807a338:	69fa      	ldr	r2, [r7, #28]
 807a33a:	429a      	cmp	r2, r3
 807a33c:	d902      	bls.n	807a344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 807a33e:	68fb      	ldr	r3, [r7, #12]
 807a340:	689b      	ldr	r3, [r3, #8]
 807a342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 807a344:	69fb      	ldr	r3, [r7, #28]
 807a346:	3303      	adds	r3, #3
 807a348:	089b      	lsrs	r3, r3, #2
 807a34a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a34c:	e02b      	b.n	807a3a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 807a34e:	68fb      	ldr	r3, [r7, #12]
 807a350:	695a      	ldr	r2, [r3, #20]
 807a352:	68fb      	ldr	r3, [r7, #12]
 807a354:	699b      	ldr	r3, [r3, #24]
 807a356:	1ad3      	subs	r3, r2, r3
 807a358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 807a35a:	68fb      	ldr	r3, [r7, #12]
 807a35c:	689b      	ldr	r3, [r3, #8]
 807a35e:	69fa      	ldr	r2, [r7, #28]
 807a360:	429a      	cmp	r2, r3
 807a362:	d902      	bls.n	807a36a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 807a364:	68fb      	ldr	r3, [r7, #12]
 807a366:	689b      	ldr	r3, [r3, #8]
 807a368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 807a36a:	69fb      	ldr	r3, [r7, #28]
 807a36c:	3303      	adds	r3, #3
 807a36e:	089b      	lsrs	r3, r3, #2
 807a370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 807a372:	68fb      	ldr	r3, [r7, #12]
 807a374:	68d9      	ldr	r1, [r3, #12]
 807a376:	683b      	ldr	r3, [r7, #0]
 807a378:	b2da      	uxtb	r2, r3
 807a37a:	69fb      	ldr	r3, [r7, #28]
 807a37c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 807a37e:	687b      	ldr	r3, [r7, #4]
 807a380:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 807a382:	b2db      	uxtb	r3, r3
 807a384:	9300      	str	r3, [sp, #0]
 807a386:	4603      	mov	r3, r0
 807a388:	6978      	ldr	r0, [r7, #20]
 807a38a:	f001 fda4 	bl	807bed6 <USB_WritePacket>

    ep->xfer_buff  += len;
 807a38e:	68fb      	ldr	r3, [r7, #12]
 807a390:	68da      	ldr	r2, [r3, #12]
 807a392:	69fb      	ldr	r3, [r7, #28]
 807a394:	441a      	add	r2, r3
 807a396:	68fb      	ldr	r3, [r7, #12]
 807a398:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 807a39a:	68fb      	ldr	r3, [r7, #12]
 807a39c:	699a      	ldr	r2, [r3, #24]
 807a39e:	69fb      	ldr	r3, [r7, #28]
 807a3a0:	441a      	add	r2, r3
 807a3a2:	68fb      	ldr	r3, [r7, #12]
 807a3a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a3a6:	683b      	ldr	r3, [r7, #0]
 807a3a8:	015a      	lsls	r2, r3, #5
 807a3aa:	693b      	ldr	r3, [r7, #16]
 807a3ac:	4413      	add	r3, r2
 807a3ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807a3b2:	699b      	ldr	r3, [r3, #24]
 807a3b4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 807a3b6:	69ba      	ldr	r2, [r7, #24]
 807a3b8:	429a      	cmp	r2, r3
 807a3ba:	d809      	bhi.n	807a3d0 <PCD_WriteEmptyTxFifo+0xe0>
 807a3bc:	68fb      	ldr	r3, [r7, #12]
 807a3be:	699a      	ldr	r2, [r3, #24]
 807a3c0:	68fb      	ldr	r3, [r7, #12]
 807a3c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a3c4:	429a      	cmp	r2, r3
 807a3c6:	d203      	bcs.n	807a3d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 807a3c8:	68fb      	ldr	r3, [r7, #12]
 807a3ca:	695b      	ldr	r3, [r3, #20]
 807a3cc:	2b00      	cmp	r3, #0
 807a3ce:	d1be      	bne.n	807a34e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 807a3d0:	68fb      	ldr	r3, [r7, #12]
 807a3d2:	695a      	ldr	r2, [r3, #20]
 807a3d4:	68fb      	ldr	r3, [r7, #12]
 807a3d6:	699b      	ldr	r3, [r3, #24]
 807a3d8:	429a      	cmp	r2, r3
 807a3da:	d811      	bhi.n	807a400 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 807a3dc:	683b      	ldr	r3, [r7, #0]
 807a3de:	f003 030f 	and.w	r3, r3, #15
 807a3e2:	2201      	movs	r2, #1
 807a3e4:	fa02 f303 	lsl.w	r3, r2, r3
 807a3e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 807a3ea:	693b      	ldr	r3, [r7, #16]
 807a3ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807a3f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 807a3f2:	68bb      	ldr	r3, [r7, #8]
 807a3f4:	43db      	mvns	r3, r3
 807a3f6:	6939      	ldr	r1, [r7, #16]
 807a3f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 807a3fc:	4013      	ands	r3, r2
 807a3fe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 807a400:	2300      	movs	r3, #0
}
 807a402:	4618      	mov	r0, r3
 807a404:	3720      	adds	r7, #32
 807a406:	46bd      	mov	sp, r7
 807a408:	bd80      	pop	{r7, pc}
	...

0807a40c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a40c:	b580      	push	{r7, lr}
 807a40e:	b086      	sub	sp, #24
 807a410:	af00      	add	r7, sp, #0
 807a412:	6078      	str	r0, [r7, #4]
 807a414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a416:	687b      	ldr	r3, [r7, #4]
 807a418:	681b      	ldr	r3, [r3, #0]
 807a41a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a41c:	697b      	ldr	r3, [r7, #20]
 807a41e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807a420:	697b      	ldr	r3, [r7, #20]
 807a422:	333c      	adds	r3, #60	@ 0x3c
 807a424:	3304      	adds	r3, #4
 807a426:	681b      	ldr	r3, [r3, #0]
 807a428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 807a42a:	683b      	ldr	r3, [r7, #0]
 807a42c:	015a      	lsls	r2, r3, #5
 807a42e:	693b      	ldr	r3, [r7, #16]
 807a430:	4413      	add	r3, r2
 807a432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a436:	689b      	ldr	r3, [r3, #8]
 807a438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 807a43a:	687b      	ldr	r3, [r7, #4]
 807a43c:	691b      	ldr	r3, [r3, #16]
 807a43e:	2b01      	cmp	r3, #1
 807a440:	f040 80a0 	bne.w	807a584 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 807a444:	68bb      	ldr	r3, [r7, #8]
 807a446:	f003 0308 	and.w	r3, r3, #8
 807a44a:	2b00      	cmp	r3, #0
 807a44c:	d015      	beq.n	807a47a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a44e:	68fb      	ldr	r3, [r7, #12]
 807a450:	4a72      	ldr	r2, [pc, #456]	@ (807a61c <PCD_EP_OutXfrComplete_int+0x210>)
 807a452:	4293      	cmp	r3, r2
 807a454:	f240 80dd 	bls.w	807a612 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a458:	68bb      	ldr	r3, [r7, #8]
 807a45a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a45e:	2b00      	cmp	r3, #0
 807a460:	f000 80d7 	beq.w	807a612 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a464:	683b      	ldr	r3, [r7, #0]
 807a466:	015a      	lsls	r2, r3, #5
 807a468:	693b      	ldr	r3, [r7, #16]
 807a46a:	4413      	add	r3, r2
 807a46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a470:	461a      	mov	r2, r3
 807a472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 807a476:	6093      	str	r3, [r2, #8]
 807a478:	e0cb      	b.n	807a612 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 807a47a:	68bb      	ldr	r3, [r7, #8]
 807a47c:	f003 0320 	and.w	r3, r3, #32
 807a480:	2b00      	cmp	r3, #0
 807a482:	d009      	beq.n	807a498 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 807a484:	683b      	ldr	r3, [r7, #0]
 807a486:	015a      	lsls	r2, r3, #5
 807a488:	693b      	ldr	r3, [r7, #16]
 807a48a:	4413      	add	r3, r2
 807a48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a490:	461a      	mov	r2, r3
 807a492:	2320      	movs	r3, #32
 807a494:	6093      	str	r3, [r2, #8]
 807a496:	e0bc      	b.n	807a612 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 807a498:	68bb      	ldr	r3, [r7, #8]
 807a49a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 807a49e:	2b00      	cmp	r3, #0
 807a4a0:	f040 80b7 	bne.w	807a612 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a4a4:	68fb      	ldr	r3, [r7, #12]
 807a4a6:	4a5d      	ldr	r2, [pc, #372]	@ (807a61c <PCD_EP_OutXfrComplete_int+0x210>)
 807a4a8:	4293      	cmp	r3, r2
 807a4aa:	d90f      	bls.n	807a4cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a4ac:	68bb      	ldr	r3, [r7, #8]
 807a4ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a4b2:	2b00      	cmp	r3, #0
 807a4b4:	d00a      	beq.n	807a4cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a4b6:	683b      	ldr	r3, [r7, #0]
 807a4b8:	015a      	lsls	r2, r3, #5
 807a4ba:	693b      	ldr	r3, [r7, #16]
 807a4bc:	4413      	add	r3, r2
 807a4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a4c2:	461a      	mov	r2, r3
 807a4c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 807a4c8:	6093      	str	r3, [r2, #8]
 807a4ca:	e0a2      	b.n	807a612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 807a4cc:	6879      	ldr	r1, [r7, #4]
 807a4ce:	683a      	ldr	r2, [r7, #0]
 807a4d0:	4613      	mov	r3, r2
 807a4d2:	00db      	lsls	r3, r3, #3
 807a4d4:	1a9b      	subs	r3, r3, r2
 807a4d6:	009b      	lsls	r3, r3, #2
 807a4d8:	440b      	add	r3, r1
 807a4da:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 807a4de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 807a4e0:	683b      	ldr	r3, [r7, #0]
 807a4e2:	0159      	lsls	r1, r3, #5
 807a4e4:	693b      	ldr	r3, [r7, #16]
 807a4e6:	440b      	add	r3, r1
 807a4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a4ec:	691b      	ldr	r3, [r3, #16]
 807a4ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 807a4f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 807a4f4:	6878      	ldr	r0, [r7, #4]
 807a4f6:	683a      	ldr	r2, [r7, #0]
 807a4f8:	4613      	mov	r3, r2
 807a4fa:	00db      	lsls	r3, r3, #3
 807a4fc:	1a9b      	subs	r3, r3, r2
 807a4fe:	009b      	lsls	r3, r3, #2
 807a500:	4403      	add	r3, r0
 807a502:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 807a506:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 807a508:	6879      	ldr	r1, [r7, #4]
 807a50a:	683a      	ldr	r2, [r7, #0]
 807a50c:	4613      	mov	r3, r2
 807a50e:	00db      	lsls	r3, r3, #3
 807a510:	1a9b      	subs	r3, r3, r2
 807a512:	009b      	lsls	r3, r3, #2
 807a514:	440b      	add	r3, r1
 807a516:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 807a51a:	6819      	ldr	r1, [r3, #0]
 807a51c:	6878      	ldr	r0, [r7, #4]
 807a51e:	683a      	ldr	r2, [r7, #0]
 807a520:	4613      	mov	r3, r2
 807a522:	00db      	lsls	r3, r3, #3
 807a524:	1a9b      	subs	r3, r3, r2
 807a526:	009b      	lsls	r3, r3, #2
 807a528:	4403      	add	r3, r0
 807a52a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 807a52e:	681b      	ldr	r3, [r3, #0]
 807a530:	4419      	add	r1, r3
 807a532:	6878      	ldr	r0, [r7, #4]
 807a534:	683a      	ldr	r2, [r7, #0]
 807a536:	4613      	mov	r3, r2
 807a538:	00db      	lsls	r3, r3, #3
 807a53a:	1a9b      	subs	r3, r3, r2
 807a53c:	009b      	lsls	r3, r3, #2
 807a53e:	4403      	add	r3, r0
 807a540:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 807a544:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 807a546:	683b      	ldr	r3, [r7, #0]
 807a548:	2b00      	cmp	r3, #0
 807a54a:	d114      	bne.n	807a576 <PCD_EP_OutXfrComplete_int+0x16a>
 807a54c:	6879      	ldr	r1, [r7, #4]
 807a54e:	683a      	ldr	r2, [r7, #0]
 807a550:	4613      	mov	r3, r2
 807a552:	00db      	lsls	r3, r3, #3
 807a554:	1a9b      	subs	r3, r3, r2
 807a556:	009b      	lsls	r3, r3, #2
 807a558:	440b      	add	r3, r1
 807a55a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 807a55e:	681b      	ldr	r3, [r3, #0]
 807a560:	2b00      	cmp	r3, #0
 807a562:	d108      	bne.n	807a576 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 807a564:	687b      	ldr	r3, [r7, #4]
 807a566:	6818      	ldr	r0, [r3, #0]
 807a568:	687b      	ldr	r3, [r7, #4]
 807a56a:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 807a56e:	461a      	mov	r2, r3
 807a570:	2101      	movs	r1, #1
 807a572:	f001 ff0f 	bl	807c394 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a576:	683b      	ldr	r3, [r7, #0]
 807a578:	b2db      	uxtb	r3, r3
 807a57a:	4619      	mov	r1, r3
 807a57c:	6878      	ldr	r0, [r7, #4]
 807a57e:	f004 fa6f 	bl	807ea60 <HAL_PCD_DataOutStageCallback>
 807a582:	e046      	b.n	807a612 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 807a584:	68fb      	ldr	r3, [r7, #12]
 807a586:	4a26      	ldr	r2, [pc, #152]	@ (807a620 <PCD_EP_OutXfrComplete_int+0x214>)
 807a588:	4293      	cmp	r3, r2
 807a58a:	d124      	bne.n	807a5d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 807a58c:	68bb      	ldr	r3, [r7, #8]
 807a58e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 807a592:	2b00      	cmp	r3, #0
 807a594:	d00a      	beq.n	807a5ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a596:	683b      	ldr	r3, [r7, #0]
 807a598:	015a      	lsls	r2, r3, #5
 807a59a:	693b      	ldr	r3, [r7, #16]
 807a59c:	4413      	add	r3, r2
 807a59e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a5a2:	461a      	mov	r2, r3
 807a5a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 807a5a8:	6093      	str	r3, [r2, #8]
 807a5aa:	e032      	b.n	807a612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 807a5ac:	68bb      	ldr	r3, [r7, #8]
 807a5ae:	f003 0320 	and.w	r3, r3, #32
 807a5b2:	2b00      	cmp	r3, #0
 807a5b4:	d008      	beq.n	807a5c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 807a5b6:	683b      	ldr	r3, [r7, #0]
 807a5b8:	015a      	lsls	r2, r3, #5
 807a5ba:	693b      	ldr	r3, [r7, #16]
 807a5bc:	4413      	add	r3, r2
 807a5be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a5c2:	461a      	mov	r2, r3
 807a5c4:	2320      	movs	r3, #32
 807a5c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a5c8:	683b      	ldr	r3, [r7, #0]
 807a5ca:	b2db      	uxtb	r3, r3
 807a5cc:	4619      	mov	r1, r3
 807a5ce:	6878      	ldr	r0, [r7, #4]
 807a5d0:	f004 fa46 	bl	807ea60 <HAL_PCD_DataOutStageCallback>
 807a5d4:	e01d      	b.n	807a612 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 807a5d6:	683b      	ldr	r3, [r7, #0]
 807a5d8:	2b00      	cmp	r3, #0
 807a5da:	d114      	bne.n	807a606 <PCD_EP_OutXfrComplete_int+0x1fa>
 807a5dc:	6879      	ldr	r1, [r7, #4]
 807a5de:	683a      	ldr	r2, [r7, #0]
 807a5e0:	4613      	mov	r3, r2
 807a5e2:	00db      	lsls	r3, r3, #3
 807a5e4:	1a9b      	subs	r3, r3, r2
 807a5e6:	009b      	lsls	r3, r3, #2
 807a5e8:	440b      	add	r3, r1
 807a5ea:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 807a5ee:	681b      	ldr	r3, [r3, #0]
 807a5f0:	2b00      	cmp	r3, #0
 807a5f2:	d108      	bne.n	807a606 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 807a5f4:	687b      	ldr	r3, [r7, #4]
 807a5f6:	6818      	ldr	r0, [r3, #0]
 807a5f8:	687b      	ldr	r3, [r7, #4]
 807a5fa:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 807a5fe:	461a      	mov	r2, r3
 807a600:	2100      	movs	r1, #0
 807a602:	f001 fec7 	bl	807c394 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a606:	683b      	ldr	r3, [r7, #0]
 807a608:	b2db      	uxtb	r3, r3
 807a60a:	4619      	mov	r1, r3
 807a60c:	6878      	ldr	r0, [r7, #4]
 807a60e:	f004 fa27 	bl	807ea60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 807a612:	2300      	movs	r3, #0
}
 807a614:	4618      	mov	r0, r3
 807a616:	3718      	adds	r7, #24
 807a618:	46bd      	mov	sp, r7
 807a61a:	bd80      	pop	{r7, pc}
 807a61c:	4f54300a 	.word	0x4f54300a
 807a620:	4f54310a 	.word	0x4f54310a

0807a624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a624:	b580      	push	{r7, lr}
 807a626:	b086      	sub	sp, #24
 807a628:	af00      	add	r7, sp, #0
 807a62a:	6078      	str	r0, [r7, #4]
 807a62c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a62e:	687b      	ldr	r3, [r7, #4]
 807a630:	681b      	ldr	r3, [r3, #0]
 807a632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a634:	697b      	ldr	r3, [r7, #20]
 807a636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807a638:	697b      	ldr	r3, [r7, #20]
 807a63a:	333c      	adds	r3, #60	@ 0x3c
 807a63c:	3304      	adds	r3, #4
 807a63e:	681b      	ldr	r3, [r3, #0]
 807a640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 807a642:	683b      	ldr	r3, [r7, #0]
 807a644:	015a      	lsls	r2, r3, #5
 807a646:	693b      	ldr	r3, [r7, #16]
 807a648:	4413      	add	r3, r2
 807a64a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a64e:	689b      	ldr	r3, [r3, #8]
 807a650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a652:	68fb      	ldr	r3, [r7, #12]
 807a654:	4a15      	ldr	r2, [pc, #84]	@ (807a6ac <PCD_EP_OutSetupPacket_int+0x88>)
 807a656:	4293      	cmp	r3, r2
 807a658:	d90e      	bls.n	807a678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a65a:	68bb      	ldr	r3, [r7, #8]
 807a65c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a660:	2b00      	cmp	r3, #0
 807a662:	d009      	beq.n	807a678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a664:	683b      	ldr	r3, [r7, #0]
 807a666:	015a      	lsls	r2, r3, #5
 807a668:	693b      	ldr	r3, [r7, #16]
 807a66a:	4413      	add	r3, r2
 807a66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807a670:	461a      	mov	r2, r3
 807a672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 807a676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 807a678:	6878      	ldr	r0, [r7, #4]
 807a67a:	f004 f9df 	bl	807ea3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 807a67e:	68fb      	ldr	r3, [r7, #12]
 807a680:	4a0a      	ldr	r2, [pc, #40]	@ (807a6ac <PCD_EP_OutSetupPacket_int+0x88>)
 807a682:	4293      	cmp	r3, r2
 807a684:	d90c      	bls.n	807a6a0 <PCD_EP_OutSetupPacket_int+0x7c>
 807a686:	687b      	ldr	r3, [r7, #4]
 807a688:	691b      	ldr	r3, [r3, #16]
 807a68a:	2b01      	cmp	r3, #1
 807a68c:	d108      	bne.n	807a6a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 807a68e:	687b      	ldr	r3, [r7, #4]
 807a690:	6818      	ldr	r0, [r3, #0]
 807a692:	687b      	ldr	r3, [r7, #4]
 807a694:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 807a698:	461a      	mov	r2, r3
 807a69a:	2101      	movs	r1, #1
 807a69c:	f001 fe7a 	bl	807c394 <USB_EP0_OutStart>
  }

  return HAL_OK;
 807a6a0:	2300      	movs	r3, #0
}
 807a6a2:	4618      	mov	r0, r3
 807a6a4:	3718      	adds	r7, #24
 807a6a6:	46bd      	mov	sp, r7
 807a6a8:	bd80      	pop	{r7, pc}
 807a6aa:	bf00      	nop
 807a6ac:	4f54300a 	.word	0x4f54300a

0807a6b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 807a6b0:	b480      	push	{r7}
 807a6b2:	b085      	sub	sp, #20
 807a6b4:	af00      	add	r7, sp, #0
 807a6b6:	6078      	str	r0, [r7, #4]
 807a6b8:	460b      	mov	r3, r1
 807a6ba:	70fb      	strb	r3, [r7, #3]
 807a6bc:	4613      	mov	r3, r2
 807a6be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 807a6c0:	687b      	ldr	r3, [r7, #4]
 807a6c2:	681b      	ldr	r3, [r3, #0]
 807a6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 807a6c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 807a6c8:	78fb      	ldrb	r3, [r7, #3]
 807a6ca:	2b00      	cmp	r3, #0
 807a6cc:	d107      	bne.n	807a6de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 807a6ce:	883b      	ldrh	r3, [r7, #0]
 807a6d0:	0419      	lsls	r1, r3, #16
 807a6d2:	687b      	ldr	r3, [r7, #4]
 807a6d4:	681b      	ldr	r3, [r3, #0]
 807a6d6:	68ba      	ldr	r2, [r7, #8]
 807a6d8:	430a      	orrs	r2, r1
 807a6da:	629a      	str	r2, [r3, #40]	@ 0x28
 807a6dc:	e028      	b.n	807a730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 807a6de:	687b      	ldr	r3, [r7, #4]
 807a6e0:	681b      	ldr	r3, [r3, #0]
 807a6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 807a6e4:	0c1b      	lsrs	r3, r3, #16
 807a6e6:	68ba      	ldr	r2, [r7, #8]
 807a6e8:	4413      	add	r3, r2
 807a6ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 807a6ec:	2300      	movs	r3, #0
 807a6ee:	73fb      	strb	r3, [r7, #15]
 807a6f0:	e00d      	b.n	807a70e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 807a6f2:	687b      	ldr	r3, [r7, #4]
 807a6f4:	681a      	ldr	r2, [r3, #0]
 807a6f6:	7bfb      	ldrb	r3, [r7, #15]
 807a6f8:	3340      	adds	r3, #64	@ 0x40
 807a6fa:	009b      	lsls	r3, r3, #2
 807a6fc:	4413      	add	r3, r2
 807a6fe:	685b      	ldr	r3, [r3, #4]
 807a700:	0c1b      	lsrs	r3, r3, #16
 807a702:	68ba      	ldr	r2, [r7, #8]
 807a704:	4413      	add	r3, r2
 807a706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 807a708:	7bfb      	ldrb	r3, [r7, #15]
 807a70a:	3301      	adds	r3, #1
 807a70c:	73fb      	strb	r3, [r7, #15]
 807a70e:	7bfa      	ldrb	r2, [r7, #15]
 807a710:	78fb      	ldrb	r3, [r7, #3]
 807a712:	3b01      	subs	r3, #1
 807a714:	429a      	cmp	r2, r3
 807a716:	d3ec      	bcc.n	807a6f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 807a718:	883b      	ldrh	r3, [r7, #0]
 807a71a:	0418      	lsls	r0, r3, #16
 807a71c:	687b      	ldr	r3, [r7, #4]
 807a71e:	6819      	ldr	r1, [r3, #0]
 807a720:	78fb      	ldrb	r3, [r7, #3]
 807a722:	3b01      	subs	r3, #1
 807a724:	68ba      	ldr	r2, [r7, #8]
 807a726:	4302      	orrs	r2, r0
 807a728:	3340      	adds	r3, #64	@ 0x40
 807a72a:	009b      	lsls	r3, r3, #2
 807a72c:	440b      	add	r3, r1
 807a72e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 807a730:	2300      	movs	r3, #0
}
 807a732:	4618      	mov	r0, r3
 807a734:	3714      	adds	r7, #20
 807a736:	46bd      	mov	sp, r7
 807a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a73c:	4770      	bx	lr

0807a73e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 807a73e:	b480      	push	{r7}
 807a740:	b083      	sub	sp, #12
 807a742:	af00      	add	r7, sp, #0
 807a744:	6078      	str	r0, [r7, #4]
 807a746:	460b      	mov	r3, r1
 807a748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 807a74a:	687b      	ldr	r3, [r7, #4]
 807a74c:	681b      	ldr	r3, [r3, #0]
 807a74e:	887a      	ldrh	r2, [r7, #2]
 807a750:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 807a752:	2300      	movs	r3, #0
}
 807a754:	4618      	mov	r0, r3
 807a756:	370c      	adds	r7, #12
 807a758:	46bd      	mov	sp, r7
 807a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a75e:	4770      	bx	lr

0807a760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 807a760:	b480      	push	{r7}
 807a762:	b083      	sub	sp, #12
 807a764:	af00      	add	r7, sp, #0
 807a766:	6078      	str	r0, [r7, #4]
 807a768:	460b      	mov	r3, r1
 807a76a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 807a76c:	bf00      	nop
 807a76e:	370c      	adds	r7, #12
 807a770:	46bd      	mov	sp, r7
 807a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a776:	4770      	bx	lr

0807a778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 807a778:	b580      	push	{r7, lr}
 807a77a:	b086      	sub	sp, #24
 807a77c:	af00      	add	r7, sp, #0
 807a77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 807a780:	687b      	ldr	r3, [r7, #4]
 807a782:	2b00      	cmp	r3, #0
 807a784:	d101      	bne.n	807a78a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 807a786:	2301      	movs	r3, #1
 807a788:	e267      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 807a78a:	687b      	ldr	r3, [r7, #4]
 807a78c:	681b      	ldr	r3, [r3, #0]
 807a78e:	f003 0301 	and.w	r3, r3, #1
 807a792:	2b00      	cmp	r3, #0
 807a794:	d075      	beq.n	807a882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807a796:	4b88      	ldr	r3, [pc, #544]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a798:	689b      	ldr	r3, [r3, #8]
 807a79a:	f003 030c 	and.w	r3, r3, #12
 807a79e:	2b04      	cmp	r3, #4
 807a7a0:	d00c      	beq.n	807a7bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807a7a2:	4b85      	ldr	r3, [pc, #532]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a7a4:	689b      	ldr	r3, [r3, #8]
 807a7a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807a7aa:	2b08      	cmp	r3, #8
 807a7ac:	d112      	bne.n	807a7d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807a7ae:	4b82      	ldr	r3, [pc, #520]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a7b0:	685b      	ldr	r3, [r3, #4]
 807a7b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 807a7b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 807a7ba:	d10b      	bne.n	807a7d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 807a7bc:	4b7e      	ldr	r3, [pc, #504]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a7be:	681b      	ldr	r3, [r3, #0]
 807a7c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 807a7c4:	2b00      	cmp	r3, #0
 807a7c6:	d05b      	beq.n	807a880 <HAL_RCC_OscConfig+0x108>
 807a7c8:	687b      	ldr	r3, [r7, #4]
 807a7ca:	685b      	ldr	r3, [r3, #4]
 807a7cc:	2b00      	cmp	r3, #0
 807a7ce:	d157      	bne.n	807a880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 807a7d0:	2301      	movs	r3, #1
 807a7d2:	e242      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 807a7d4:	687b      	ldr	r3, [r7, #4]
 807a7d6:	685b      	ldr	r3, [r3, #4]
 807a7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 807a7dc:	d106      	bne.n	807a7ec <HAL_RCC_OscConfig+0x74>
 807a7de:	4b76      	ldr	r3, [pc, #472]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a7e0:	681b      	ldr	r3, [r3, #0]
 807a7e2:	4a75      	ldr	r2, [pc, #468]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a7e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 807a7e8:	6013      	str	r3, [r2, #0]
 807a7ea:	e01d      	b.n	807a828 <HAL_RCC_OscConfig+0xb0>
 807a7ec:	687b      	ldr	r3, [r7, #4]
 807a7ee:	685b      	ldr	r3, [r3, #4]
 807a7f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 807a7f4:	d10c      	bne.n	807a810 <HAL_RCC_OscConfig+0x98>
 807a7f6:	4b70      	ldr	r3, [pc, #448]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a7f8:	681b      	ldr	r3, [r3, #0]
 807a7fa:	4a6f      	ldr	r2, [pc, #444]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a7fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 807a800:	6013      	str	r3, [r2, #0]
 807a802:	4b6d      	ldr	r3, [pc, #436]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a804:	681b      	ldr	r3, [r3, #0]
 807a806:	4a6c      	ldr	r2, [pc, #432]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 807a80c:	6013      	str	r3, [r2, #0]
 807a80e:	e00b      	b.n	807a828 <HAL_RCC_OscConfig+0xb0>
 807a810:	4b69      	ldr	r3, [pc, #420]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a812:	681b      	ldr	r3, [r3, #0]
 807a814:	4a68      	ldr	r2, [pc, #416]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 807a81a:	6013      	str	r3, [r2, #0]
 807a81c:	4b66      	ldr	r3, [pc, #408]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a81e:	681b      	ldr	r3, [r3, #0]
 807a820:	4a65      	ldr	r2, [pc, #404]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 807a826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 807a828:	687b      	ldr	r3, [r7, #4]
 807a82a:	685b      	ldr	r3, [r3, #4]
 807a82c:	2b00      	cmp	r3, #0
 807a82e:	d013      	beq.n	807a858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807a830:	f7fe f866 	bl	8078900 <HAL_GetTick>
 807a834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807a836:	e008      	b.n	807a84a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 807a838:	f7fe f862 	bl	8078900 <HAL_GetTick>
 807a83c:	4602      	mov	r2, r0
 807a83e:	693b      	ldr	r3, [r7, #16]
 807a840:	1ad3      	subs	r3, r2, r3
 807a842:	2b64      	cmp	r3, #100	@ 0x64
 807a844:	d901      	bls.n	807a84a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 807a846:	2303      	movs	r3, #3
 807a848:	e207      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807a84a:	4b5b      	ldr	r3, [pc, #364]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a84c:	681b      	ldr	r3, [r3, #0]
 807a84e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 807a852:	2b00      	cmp	r3, #0
 807a854:	d0f0      	beq.n	807a838 <HAL_RCC_OscConfig+0xc0>
 807a856:	e014      	b.n	807a882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807a858:	f7fe f852 	bl	8078900 <HAL_GetTick>
 807a85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807a85e:	e008      	b.n	807a872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 807a860:	f7fe f84e 	bl	8078900 <HAL_GetTick>
 807a864:	4602      	mov	r2, r0
 807a866:	693b      	ldr	r3, [r7, #16]
 807a868:	1ad3      	subs	r3, r2, r3
 807a86a:	2b64      	cmp	r3, #100	@ 0x64
 807a86c:	d901      	bls.n	807a872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 807a86e:	2303      	movs	r3, #3
 807a870:	e1f3      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807a872:	4b51      	ldr	r3, [pc, #324]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a874:	681b      	ldr	r3, [r3, #0]
 807a876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 807a87a:	2b00      	cmp	r3, #0
 807a87c:	d1f0      	bne.n	807a860 <HAL_RCC_OscConfig+0xe8>
 807a87e:	e000      	b.n	807a882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 807a880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 807a882:	687b      	ldr	r3, [r7, #4]
 807a884:	681b      	ldr	r3, [r3, #0]
 807a886:	f003 0302 	and.w	r3, r3, #2
 807a88a:	2b00      	cmp	r3, #0
 807a88c:	d063      	beq.n	807a956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807a88e:	4b4a      	ldr	r3, [pc, #296]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a890:	689b      	ldr	r3, [r3, #8]
 807a892:	f003 030c 	and.w	r3, r3, #12
 807a896:	2b00      	cmp	r3, #0
 807a898:	d00b      	beq.n	807a8b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807a89a:	4b47      	ldr	r3, [pc, #284]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a89c:	689b      	ldr	r3, [r3, #8]
 807a89e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807a8a2:	2b08      	cmp	r3, #8
 807a8a4:	d11c      	bne.n	807a8e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807a8a6:	4b44      	ldr	r3, [pc, #272]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a8a8:	685b      	ldr	r3, [r3, #4]
 807a8aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 807a8ae:	2b00      	cmp	r3, #0
 807a8b0:	d116      	bne.n	807a8e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 807a8b2:	4b41      	ldr	r3, [pc, #260]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a8b4:	681b      	ldr	r3, [r3, #0]
 807a8b6:	f003 0302 	and.w	r3, r3, #2
 807a8ba:	2b00      	cmp	r3, #0
 807a8bc:	d005      	beq.n	807a8ca <HAL_RCC_OscConfig+0x152>
 807a8be:	687b      	ldr	r3, [r7, #4]
 807a8c0:	68db      	ldr	r3, [r3, #12]
 807a8c2:	2b01      	cmp	r3, #1
 807a8c4:	d001      	beq.n	807a8ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 807a8c6:	2301      	movs	r3, #1
 807a8c8:	e1c7      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 807a8ca:	4b3b      	ldr	r3, [pc, #236]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a8cc:	681b      	ldr	r3, [r3, #0]
 807a8ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 807a8d2:	687b      	ldr	r3, [r7, #4]
 807a8d4:	691b      	ldr	r3, [r3, #16]
 807a8d6:	00db      	lsls	r3, r3, #3
 807a8d8:	4937      	ldr	r1, [pc, #220]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a8da:	4313      	orrs	r3, r2
 807a8dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 807a8de:	e03a      	b.n	807a956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 807a8e0:	687b      	ldr	r3, [r7, #4]
 807a8e2:	68db      	ldr	r3, [r3, #12]
 807a8e4:	2b00      	cmp	r3, #0
 807a8e6:	d020      	beq.n	807a92a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 807a8e8:	4b34      	ldr	r3, [pc, #208]	@ (807a9bc <HAL_RCC_OscConfig+0x244>)
 807a8ea:	2201      	movs	r2, #1
 807a8ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 807a8ee:	f7fe f807 	bl	8078900 <HAL_GetTick>
 807a8f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807a8f4:	e008      	b.n	807a908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 807a8f6:	f7fe f803 	bl	8078900 <HAL_GetTick>
 807a8fa:	4602      	mov	r2, r0
 807a8fc:	693b      	ldr	r3, [r7, #16]
 807a8fe:	1ad3      	subs	r3, r2, r3
 807a900:	2b02      	cmp	r3, #2
 807a902:	d901      	bls.n	807a908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 807a904:	2303      	movs	r3, #3
 807a906:	e1a8      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807a908:	4b2b      	ldr	r3, [pc, #172]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a90a:	681b      	ldr	r3, [r3, #0]
 807a90c:	f003 0302 	and.w	r3, r3, #2
 807a910:	2b00      	cmp	r3, #0
 807a912:	d0f0      	beq.n	807a8f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 807a914:	4b28      	ldr	r3, [pc, #160]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a916:	681b      	ldr	r3, [r3, #0]
 807a918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 807a91c:	687b      	ldr	r3, [r7, #4]
 807a91e:	691b      	ldr	r3, [r3, #16]
 807a920:	00db      	lsls	r3, r3, #3
 807a922:	4925      	ldr	r1, [pc, #148]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a924:	4313      	orrs	r3, r2
 807a926:	600b      	str	r3, [r1, #0]
 807a928:	e015      	b.n	807a956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 807a92a:	4b24      	ldr	r3, [pc, #144]	@ (807a9bc <HAL_RCC_OscConfig+0x244>)
 807a92c:	2200      	movs	r2, #0
 807a92e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 807a930:	f7fd ffe6 	bl	8078900 <HAL_GetTick>
 807a934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807a936:	e008      	b.n	807a94a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 807a938:	f7fd ffe2 	bl	8078900 <HAL_GetTick>
 807a93c:	4602      	mov	r2, r0
 807a93e:	693b      	ldr	r3, [r7, #16]
 807a940:	1ad3      	subs	r3, r2, r3
 807a942:	2b02      	cmp	r3, #2
 807a944:	d901      	bls.n	807a94a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 807a946:	2303      	movs	r3, #3
 807a948:	e187      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807a94a:	4b1b      	ldr	r3, [pc, #108]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a94c:	681b      	ldr	r3, [r3, #0]
 807a94e:	f003 0302 	and.w	r3, r3, #2
 807a952:	2b00      	cmp	r3, #0
 807a954:	d1f0      	bne.n	807a938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 807a956:	687b      	ldr	r3, [r7, #4]
 807a958:	681b      	ldr	r3, [r3, #0]
 807a95a:	f003 0308 	and.w	r3, r3, #8
 807a95e:	2b00      	cmp	r3, #0
 807a960:	d036      	beq.n	807a9d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 807a962:	687b      	ldr	r3, [r7, #4]
 807a964:	695b      	ldr	r3, [r3, #20]
 807a966:	2b00      	cmp	r3, #0
 807a968:	d016      	beq.n	807a998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 807a96a:	4b15      	ldr	r3, [pc, #84]	@ (807a9c0 <HAL_RCC_OscConfig+0x248>)
 807a96c:	2201      	movs	r2, #1
 807a96e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 807a970:	f7fd ffc6 	bl	8078900 <HAL_GetTick>
 807a974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807a976:	e008      	b.n	807a98a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807a978:	f7fd ffc2 	bl	8078900 <HAL_GetTick>
 807a97c:	4602      	mov	r2, r0
 807a97e:	693b      	ldr	r3, [r7, #16]
 807a980:	1ad3      	subs	r3, r2, r3
 807a982:	2b02      	cmp	r3, #2
 807a984:	d901      	bls.n	807a98a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 807a986:	2303      	movs	r3, #3
 807a988:	e167      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807a98a:	4b0b      	ldr	r3, [pc, #44]	@ (807a9b8 <HAL_RCC_OscConfig+0x240>)
 807a98c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 807a98e:	f003 0302 	and.w	r3, r3, #2
 807a992:	2b00      	cmp	r3, #0
 807a994:	d0f0      	beq.n	807a978 <HAL_RCC_OscConfig+0x200>
 807a996:	e01b      	b.n	807a9d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 807a998:	4b09      	ldr	r3, [pc, #36]	@ (807a9c0 <HAL_RCC_OscConfig+0x248>)
 807a99a:	2200      	movs	r2, #0
 807a99c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 807a99e:	f7fd ffaf 	bl	8078900 <HAL_GetTick>
 807a9a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807a9a4:	e00e      	b.n	807a9c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807a9a6:	f7fd ffab 	bl	8078900 <HAL_GetTick>
 807a9aa:	4602      	mov	r2, r0
 807a9ac:	693b      	ldr	r3, [r7, #16]
 807a9ae:	1ad3      	subs	r3, r2, r3
 807a9b0:	2b02      	cmp	r3, #2
 807a9b2:	d907      	bls.n	807a9c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 807a9b4:	2303      	movs	r3, #3
 807a9b6:	e150      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
 807a9b8:	40023800 	.word	0x40023800
 807a9bc:	42470000 	.word	0x42470000
 807a9c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807a9c4:	4b88      	ldr	r3, [pc, #544]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807a9c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 807a9c8:	f003 0302 	and.w	r3, r3, #2
 807a9cc:	2b00      	cmp	r3, #0
 807a9ce:	d1ea      	bne.n	807a9a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 807a9d0:	687b      	ldr	r3, [r7, #4]
 807a9d2:	681b      	ldr	r3, [r3, #0]
 807a9d4:	f003 0304 	and.w	r3, r3, #4
 807a9d8:	2b00      	cmp	r3, #0
 807a9da:	f000 8097 	beq.w	807ab0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 807a9de:	2300      	movs	r3, #0
 807a9e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 807a9e2:	4b81      	ldr	r3, [pc, #516]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807a9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 807a9e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 807a9ea:	2b00      	cmp	r3, #0
 807a9ec:	d10f      	bne.n	807aa0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 807a9ee:	2300      	movs	r3, #0
 807a9f0:	60bb      	str	r3, [r7, #8]
 807a9f2:	4b7d      	ldr	r3, [pc, #500]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807a9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 807a9f6:	4a7c      	ldr	r2, [pc, #496]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807a9f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807a9fc:	6413      	str	r3, [r2, #64]	@ 0x40
 807a9fe:	4b7a      	ldr	r3, [pc, #488]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 807aa02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 807aa06:	60bb      	str	r3, [r7, #8]
 807aa08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 807aa0a:	2301      	movs	r3, #1
 807aa0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807aa0e:	4b77      	ldr	r3, [pc, #476]	@ (807abec <HAL_RCC_OscConfig+0x474>)
 807aa10:	681b      	ldr	r3, [r3, #0]
 807aa12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 807aa16:	2b00      	cmp	r3, #0
 807aa18:	d118      	bne.n	807aa4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 807aa1a:	4b74      	ldr	r3, [pc, #464]	@ (807abec <HAL_RCC_OscConfig+0x474>)
 807aa1c:	681b      	ldr	r3, [r3, #0]
 807aa1e:	4a73      	ldr	r2, [pc, #460]	@ (807abec <HAL_RCC_OscConfig+0x474>)
 807aa20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 807aa24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 807aa26:	f7fd ff6b 	bl	8078900 <HAL_GetTick>
 807aa2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807aa2c:	e008      	b.n	807aa40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 807aa2e:	f7fd ff67 	bl	8078900 <HAL_GetTick>
 807aa32:	4602      	mov	r2, r0
 807aa34:	693b      	ldr	r3, [r7, #16]
 807aa36:	1ad3      	subs	r3, r2, r3
 807aa38:	2b02      	cmp	r3, #2
 807aa3a:	d901      	bls.n	807aa40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 807aa3c:	2303      	movs	r3, #3
 807aa3e:	e10c      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807aa40:	4b6a      	ldr	r3, [pc, #424]	@ (807abec <HAL_RCC_OscConfig+0x474>)
 807aa42:	681b      	ldr	r3, [r3, #0]
 807aa44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 807aa48:	2b00      	cmp	r3, #0
 807aa4a:	d0f0      	beq.n	807aa2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 807aa4c:	687b      	ldr	r3, [r7, #4]
 807aa4e:	689b      	ldr	r3, [r3, #8]
 807aa50:	2b01      	cmp	r3, #1
 807aa52:	d106      	bne.n	807aa62 <HAL_RCC_OscConfig+0x2ea>
 807aa54:	4b64      	ldr	r3, [pc, #400]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 807aa58:	4a63      	ldr	r2, [pc, #396]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa5a:	f043 0301 	orr.w	r3, r3, #1
 807aa5e:	6713      	str	r3, [r2, #112]	@ 0x70
 807aa60:	e01c      	b.n	807aa9c <HAL_RCC_OscConfig+0x324>
 807aa62:	687b      	ldr	r3, [r7, #4]
 807aa64:	689b      	ldr	r3, [r3, #8]
 807aa66:	2b05      	cmp	r3, #5
 807aa68:	d10c      	bne.n	807aa84 <HAL_RCC_OscConfig+0x30c>
 807aa6a:	4b5f      	ldr	r3, [pc, #380]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 807aa6e:	4a5e      	ldr	r2, [pc, #376]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa70:	f043 0304 	orr.w	r3, r3, #4
 807aa74:	6713      	str	r3, [r2, #112]	@ 0x70
 807aa76:	4b5c      	ldr	r3, [pc, #368]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 807aa7a:	4a5b      	ldr	r2, [pc, #364]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa7c:	f043 0301 	orr.w	r3, r3, #1
 807aa80:	6713      	str	r3, [r2, #112]	@ 0x70
 807aa82:	e00b      	b.n	807aa9c <HAL_RCC_OscConfig+0x324>
 807aa84:	4b58      	ldr	r3, [pc, #352]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 807aa88:	4a57      	ldr	r2, [pc, #348]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa8a:	f023 0301 	bic.w	r3, r3, #1
 807aa8e:	6713      	str	r3, [r2, #112]	@ 0x70
 807aa90:	4b55      	ldr	r3, [pc, #340]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 807aa94:	4a54      	ldr	r2, [pc, #336]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aa96:	f023 0304 	bic.w	r3, r3, #4
 807aa9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 807aa9c:	687b      	ldr	r3, [r7, #4]
 807aa9e:	689b      	ldr	r3, [r3, #8]
 807aaa0:	2b00      	cmp	r3, #0
 807aaa2:	d015      	beq.n	807aad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 807aaa4:	f7fd ff2c 	bl	8078900 <HAL_GetTick>
 807aaa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 807aaaa:	e00a      	b.n	807aac2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 807aaac:	f7fd ff28 	bl	8078900 <HAL_GetTick>
 807aab0:	4602      	mov	r2, r0
 807aab2:	693b      	ldr	r3, [r7, #16]
 807aab4:	1ad3      	subs	r3, r2, r3
 807aab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 807aaba:	4293      	cmp	r3, r2
 807aabc:	d901      	bls.n	807aac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 807aabe:	2303      	movs	r3, #3
 807aac0:	e0cb      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 807aac2:	4b49      	ldr	r3, [pc, #292]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 807aac6:	f003 0302 	and.w	r3, r3, #2
 807aaca:	2b00      	cmp	r3, #0
 807aacc:	d0ee      	beq.n	807aaac <HAL_RCC_OscConfig+0x334>
 807aace:	e014      	b.n	807aafa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 807aad0:	f7fd ff16 	bl	8078900 <HAL_GetTick>
 807aad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 807aad6:	e00a      	b.n	807aaee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 807aad8:	f7fd ff12 	bl	8078900 <HAL_GetTick>
 807aadc:	4602      	mov	r2, r0
 807aade:	693b      	ldr	r3, [r7, #16]
 807aae0:	1ad3      	subs	r3, r2, r3
 807aae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 807aae6:	4293      	cmp	r3, r2
 807aae8:	d901      	bls.n	807aaee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 807aaea:	2303      	movs	r3, #3
 807aaec:	e0b5      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 807aaee:	4b3e      	ldr	r3, [pc, #248]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aaf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 807aaf2:	f003 0302 	and.w	r3, r3, #2
 807aaf6:	2b00      	cmp	r3, #0
 807aaf8:	d1ee      	bne.n	807aad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 807aafa:	7dfb      	ldrb	r3, [r7, #23]
 807aafc:	2b01      	cmp	r3, #1
 807aafe:	d105      	bne.n	807ab0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 807ab00:	4b39      	ldr	r3, [pc, #228]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807ab02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 807ab04:	4a38      	ldr	r2, [pc, #224]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807ab06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 807ab0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 807ab0c:	687b      	ldr	r3, [r7, #4]
 807ab0e:	699b      	ldr	r3, [r3, #24]
 807ab10:	2b00      	cmp	r3, #0
 807ab12:	f000 80a1 	beq.w	807ac58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 807ab16:	4b34      	ldr	r3, [pc, #208]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807ab18:	689b      	ldr	r3, [r3, #8]
 807ab1a:	f003 030c 	and.w	r3, r3, #12
 807ab1e:	2b08      	cmp	r3, #8
 807ab20:	d05c      	beq.n	807abdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 807ab22:	687b      	ldr	r3, [r7, #4]
 807ab24:	699b      	ldr	r3, [r3, #24]
 807ab26:	2b02      	cmp	r3, #2
 807ab28:	d141      	bne.n	807abae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 807ab2a:	4b31      	ldr	r3, [pc, #196]	@ (807abf0 <HAL_RCC_OscConfig+0x478>)
 807ab2c:	2200      	movs	r2, #0
 807ab2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807ab30:	f7fd fee6 	bl	8078900 <HAL_GetTick>
 807ab34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab36:	e008      	b.n	807ab4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807ab38:	f7fd fee2 	bl	8078900 <HAL_GetTick>
 807ab3c:	4602      	mov	r2, r0
 807ab3e:	693b      	ldr	r3, [r7, #16]
 807ab40:	1ad3      	subs	r3, r2, r3
 807ab42:	2b02      	cmp	r3, #2
 807ab44:	d901      	bls.n	807ab4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 807ab46:	2303      	movs	r3, #3
 807ab48:	e087      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab4a:	4b27      	ldr	r3, [pc, #156]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807ab4c:	681b      	ldr	r3, [r3, #0]
 807ab4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 807ab52:	2b00      	cmp	r3, #0
 807ab54:	d1f0      	bne.n	807ab38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 807ab56:	687b      	ldr	r3, [r7, #4]
 807ab58:	69da      	ldr	r2, [r3, #28]
 807ab5a:	687b      	ldr	r3, [r7, #4]
 807ab5c:	6a1b      	ldr	r3, [r3, #32]
 807ab5e:	431a      	orrs	r2, r3
 807ab60:	687b      	ldr	r3, [r7, #4]
 807ab62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 807ab64:	019b      	lsls	r3, r3, #6
 807ab66:	431a      	orrs	r2, r3
 807ab68:	687b      	ldr	r3, [r7, #4]
 807ab6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 807ab6c:	085b      	lsrs	r3, r3, #1
 807ab6e:	3b01      	subs	r3, #1
 807ab70:	041b      	lsls	r3, r3, #16
 807ab72:	431a      	orrs	r2, r3
 807ab74:	687b      	ldr	r3, [r7, #4]
 807ab76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 807ab78:	061b      	lsls	r3, r3, #24
 807ab7a:	491b      	ldr	r1, [pc, #108]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807ab7c:	4313      	orrs	r3, r2
 807ab7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 807ab80:	4b1b      	ldr	r3, [pc, #108]	@ (807abf0 <HAL_RCC_OscConfig+0x478>)
 807ab82:	2201      	movs	r2, #1
 807ab84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807ab86:	f7fd febb 	bl	8078900 <HAL_GetTick>
 807ab8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807ab8c:	e008      	b.n	807aba0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807ab8e:	f7fd feb7 	bl	8078900 <HAL_GetTick>
 807ab92:	4602      	mov	r2, r0
 807ab94:	693b      	ldr	r3, [r7, #16]
 807ab96:	1ad3      	subs	r3, r2, r3
 807ab98:	2b02      	cmp	r3, #2
 807ab9a:	d901      	bls.n	807aba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 807ab9c:	2303      	movs	r3, #3
 807ab9e:	e05c      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807aba0:	4b11      	ldr	r3, [pc, #68]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807aba2:	681b      	ldr	r3, [r3, #0]
 807aba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 807aba8:	2b00      	cmp	r3, #0
 807abaa:	d0f0      	beq.n	807ab8e <HAL_RCC_OscConfig+0x416>
 807abac:	e054      	b.n	807ac58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 807abae:	4b10      	ldr	r3, [pc, #64]	@ (807abf0 <HAL_RCC_OscConfig+0x478>)
 807abb0:	2200      	movs	r2, #0
 807abb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807abb4:	f7fd fea4 	bl	8078900 <HAL_GetTick>
 807abb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807abba:	e008      	b.n	807abce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807abbc:	f7fd fea0 	bl	8078900 <HAL_GetTick>
 807abc0:	4602      	mov	r2, r0
 807abc2:	693b      	ldr	r3, [r7, #16]
 807abc4:	1ad3      	subs	r3, r2, r3
 807abc6:	2b02      	cmp	r3, #2
 807abc8:	d901      	bls.n	807abce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 807abca:	2303      	movs	r3, #3
 807abcc:	e045      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807abce:	4b06      	ldr	r3, [pc, #24]	@ (807abe8 <HAL_RCC_OscConfig+0x470>)
 807abd0:	681b      	ldr	r3, [r3, #0]
 807abd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 807abd6:	2b00      	cmp	r3, #0
 807abd8:	d1f0      	bne.n	807abbc <HAL_RCC_OscConfig+0x444>
 807abda:	e03d      	b.n	807ac58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 807abdc:	687b      	ldr	r3, [r7, #4]
 807abde:	699b      	ldr	r3, [r3, #24]
 807abe0:	2b01      	cmp	r3, #1
 807abe2:	d107      	bne.n	807abf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 807abe4:	2301      	movs	r3, #1
 807abe6:	e038      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
 807abe8:	40023800 	.word	0x40023800
 807abec:	40007000 	.word	0x40007000
 807abf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 807abf4:	4b1b      	ldr	r3, [pc, #108]	@ (807ac64 <HAL_RCC_OscConfig+0x4ec>)
 807abf6:	685b      	ldr	r3, [r3, #4]
 807abf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 807abfa:	687b      	ldr	r3, [r7, #4]
 807abfc:	699b      	ldr	r3, [r3, #24]
 807abfe:	2b01      	cmp	r3, #1
 807ac00:	d028      	beq.n	807ac54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 807ac02:	68fb      	ldr	r3, [r7, #12]
 807ac04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 807ac08:	687b      	ldr	r3, [r7, #4]
 807ac0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 807ac0c:	429a      	cmp	r2, r3
 807ac0e:	d121      	bne.n	807ac54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 807ac10:	68fb      	ldr	r3, [r7, #12]
 807ac12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 807ac16:	687b      	ldr	r3, [r7, #4]
 807ac18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 807ac1a:	429a      	cmp	r2, r3
 807ac1c:	d11a      	bne.n	807ac54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 807ac1e:	68fa      	ldr	r2, [r7, #12]
 807ac20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 807ac24:	4013      	ands	r3, r2
 807ac26:	687a      	ldr	r2, [r7, #4]
 807ac28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 807ac2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 807ac2c:	4293      	cmp	r3, r2
 807ac2e:	d111      	bne.n	807ac54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 807ac30:	68fb      	ldr	r3, [r7, #12]
 807ac32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 807ac36:	687b      	ldr	r3, [r7, #4]
 807ac38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 807ac3a:	085b      	lsrs	r3, r3, #1
 807ac3c:	3b01      	subs	r3, #1
 807ac3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 807ac40:	429a      	cmp	r2, r3
 807ac42:	d107      	bne.n	807ac54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 807ac44:	68fb      	ldr	r3, [r7, #12]
 807ac46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 807ac4a:	687b      	ldr	r3, [r7, #4]
 807ac4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 807ac4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 807ac50:	429a      	cmp	r2, r3
 807ac52:	d001      	beq.n	807ac58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 807ac54:	2301      	movs	r3, #1
 807ac56:	e000      	b.n	807ac5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 807ac58:	2300      	movs	r3, #0
}
 807ac5a:	4618      	mov	r0, r3
 807ac5c:	3718      	adds	r7, #24
 807ac5e:	46bd      	mov	sp, r7
 807ac60:	bd80      	pop	{r7, pc}
 807ac62:	bf00      	nop
 807ac64:	40023800 	.word	0x40023800

0807ac68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 807ac68:	b580      	push	{r7, lr}
 807ac6a:	b084      	sub	sp, #16
 807ac6c:	af00      	add	r7, sp, #0
 807ac6e:	6078      	str	r0, [r7, #4]
 807ac70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 807ac72:	687b      	ldr	r3, [r7, #4]
 807ac74:	2b00      	cmp	r3, #0
 807ac76:	d101      	bne.n	807ac7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 807ac78:	2301      	movs	r3, #1
 807ac7a:	e0cc      	b.n	807ae16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 807ac7c:	4b68      	ldr	r3, [pc, #416]	@ (807ae20 <HAL_RCC_ClockConfig+0x1b8>)
 807ac7e:	681b      	ldr	r3, [r3, #0]
 807ac80:	f003 0307 	and.w	r3, r3, #7
 807ac84:	683a      	ldr	r2, [r7, #0]
 807ac86:	429a      	cmp	r2, r3
 807ac88:	d90c      	bls.n	807aca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807ac8a:	4b65      	ldr	r3, [pc, #404]	@ (807ae20 <HAL_RCC_ClockConfig+0x1b8>)
 807ac8c:	683a      	ldr	r2, [r7, #0]
 807ac8e:	b2d2      	uxtb	r2, r2
 807ac90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807ac92:	4b63      	ldr	r3, [pc, #396]	@ (807ae20 <HAL_RCC_ClockConfig+0x1b8>)
 807ac94:	681b      	ldr	r3, [r3, #0]
 807ac96:	f003 0307 	and.w	r3, r3, #7
 807ac9a:	683a      	ldr	r2, [r7, #0]
 807ac9c:	429a      	cmp	r2, r3
 807ac9e:	d001      	beq.n	807aca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 807aca0:	2301      	movs	r3, #1
 807aca2:	e0b8      	b.n	807ae16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 807aca4:	687b      	ldr	r3, [r7, #4]
 807aca6:	681b      	ldr	r3, [r3, #0]
 807aca8:	f003 0302 	and.w	r3, r3, #2
 807acac:	2b00      	cmp	r3, #0
 807acae:	d020      	beq.n	807acf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 807acb0:	687b      	ldr	r3, [r7, #4]
 807acb2:	681b      	ldr	r3, [r3, #0]
 807acb4:	f003 0304 	and.w	r3, r3, #4
 807acb8:	2b00      	cmp	r3, #0
 807acba:	d005      	beq.n	807acc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 807acbc:	4b59      	ldr	r3, [pc, #356]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807acbe:	689b      	ldr	r3, [r3, #8]
 807acc0:	4a58      	ldr	r2, [pc, #352]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807acc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 807acc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 807acc8:	687b      	ldr	r3, [r7, #4]
 807acca:	681b      	ldr	r3, [r3, #0]
 807accc:	f003 0308 	and.w	r3, r3, #8
 807acd0:	2b00      	cmp	r3, #0
 807acd2:	d005      	beq.n	807ace0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 807acd4:	4b53      	ldr	r3, [pc, #332]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807acd6:	689b      	ldr	r3, [r3, #8]
 807acd8:	4a52      	ldr	r2, [pc, #328]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807acda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 807acde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 807ace0:	4b50      	ldr	r3, [pc, #320]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807ace2:	689b      	ldr	r3, [r3, #8]
 807ace4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 807ace8:	687b      	ldr	r3, [r7, #4]
 807acea:	689b      	ldr	r3, [r3, #8]
 807acec:	494d      	ldr	r1, [pc, #308]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807acee:	4313      	orrs	r3, r2
 807acf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 807acf2:	687b      	ldr	r3, [r7, #4]
 807acf4:	681b      	ldr	r3, [r3, #0]
 807acf6:	f003 0301 	and.w	r3, r3, #1
 807acfa:	2b00      	cmp	r3, #0
 807acfc:	d044      	beq.n	807ad88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 807acfe:	687b      	ldr	r3, [r7, #4]
 807ad00:	685b      	ldr	r3, [r3, #4]
 807ad02:	2b01      	cmp	r3, #1
 807ad04:	d107      	bne.n	807ad16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807ad06:	4b47      	ldr	r3, [pc, #284]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807ad08:	681b      	ldr	r3, [r3, #0]
 807ad0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 807ad0e:	2b00      	cmp	r3, #0
 807ad10:	d119      	bne.n	807ad46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807ad12:	2301      	movs	r3, #1
 807ad14:	e07f      	b.n	807ae16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807ad16:	687b      	ldr	r3, [r7, #4]
 807ad18:	685b      	ldr	r3, [r3, #4]
 807ad1a:	2b02      	cmp	r3, #2
 807ad1c:	d003      	beq.n	807ad26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 807ad1e:	687b      	ldr	r3, [r7, #4]
 807ad20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807ad22:	2b03      	cmp	r3, #3
 807ad24:	d107      	bne.n	807ad36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807ad26:	4b3f      	ldr	r3, [pc, #252]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807ad28:	681b      	ldr	r3, [r3, #0]
 807ad2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 807ad2e:	2b00      	cmp	r3, #0
 807ad30:	d109      	bne.n	807ad46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807ad32:	2301      	movs	r3, #1
 807ad34:	e06f      	b.n	807ae16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807ad36:	4b3b      	ldr	r3, [pc, #236]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807ad38:	681b      	ldr	r3, [r3, #0]
 807ad3a:	f003 0302 	and.w	r3, r3, #2
 807ad3e:	2b00      	cmp	r3, #0
 807ad40:	d101      	bne.n	807ad46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807ad42:	2301      	movs	r3, #1
 807ad44:	e067      	b.n	807ae16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 807ad46:	4b37      	ldr	r3, [pc, #220]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807ad48:	689b      	ldr	r3, [r3, #8]
 807ad4a:	f023 0203 	bic.w	r2, r3, #3
 807ad4e:	687b      	ldr	r3, [r7, #4]
 807ad50:	685b      	ldr	r3, [r3, #4]
 807ad52:	4934      	ldr	r1, [pc, #208]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807ad54:	4313      	orrs	r3, r2
 807ad56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 807ad58:	f7fd fdd2 	bl	8078900 <HAL_GetTick>
 807ad5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807ad5e:	e00a      	b.n	807ad76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 807ad60:	f7fd fdce 	bl	8078900 <HAL_GetTick>
 807ad64:	4602      	mov	r2, r0
 807ad66:	68fb      	ldr	r3, [r7, #12]
 807ad68:	1ad3      	subs	r3, r2, r3
 807ad6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 807ad6e:	4293      	cmp	r3, r2
 807ad70:	d901      	bls.n	807ad76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 807ad72:	2303      	movs	r3, #3
 807ad74:	e04f      	b.n	807ae16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807ad76:	4b2b      	ldr	r3, [pc, #172]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807ad78:	689b      	ldr	r3, [r3, #8]
 807ad7a:	f003 020c 	and.w	r2, r3, #12
 807ad7e:	687b      	ldr	r3, [r7, #4]
 807ad80:	685b      	ldr	r3, [r3, #4]
 807ad82:	009b      	lsls	r3, r3, #2
 807ad84:	429a      	cmp	r2, r3
 807ad86:	d1eb      	bne.n	807ad60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 807ad88:	4b25      	ldr	r3, [pc, #148]	@ (807ae20 <HAL_RCC_ClockConfig+0x1b8>)
 807ad8a:	681b      	ldr	r3, [r3, #0]
 807ad8c:	f003 0307 	and.w	r3, r3, #7
 807ad90:	683a      	ldr	r2, [r7, #0]
 807ad92:	429a      	cmp	r2, r3
 807ad94:	d20c      	bcs.n	807adb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807ad96:	4b22      	ldr	r3, [pc, #136]	@ (807ae20 <HAL_RCC_ClockConfig+0x1b8>)
 807ad98:	683a      	ldr	r2, [r7, #0]
 807ad9a:	b2d2      	uxtb	r2, r2
 807ad9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807ad9e:	4b20      	ldr	r3, [pc, #128]	@ (807ae20 <HAL_RCC_ClockConfig+0x1b8>)
 807ada0:	681b      	ldr	r3, [r3, #0]
 807ada2:	f003 0307 	and.w	r3, r3, #7
 807ada6:	683a      	ldr	r2, [r7, #0]
 807ada8:	429a      	cmp	r2, r3
 807adaa:	d001      	beq.n	807adb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 807adac:	2301      	movs	r3, #1
 807adae:	e032      	b.n	807ae16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 807adb0:	687b      	ldr	r3, [r7, #4]
 807adb2:	681b      	ldr	r3, [r3, #0]
 807adb4:	f003 0304 	and.w	r3, r3, #4
 807adb8:	2b00      	cmp	r3, #0
 807adba:	d008      	beq.n	807adce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 807adbc:	4b19      	ldr	r3, [pc, #100]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807adbe:	689b      	ldr	r3, [r3, #8]
 807adc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 807adc4:	687b      	ldr	r3, [r7, #4]
 807adc6:	68db      	ldr	r3, [r3, #12]
 807adc8:	4916      	ldr	r1, [pc, #88]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807adca:	4313      	orrs	r3, r2
 807adcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 807adce:	687b      	ldr	r3, [r7, #4]
 807add0:	681b      	ldr	r3, [r3, #0]
 807add2:	f003 0308 	and.w	r3, r3, #8
 807add6:	2b00      	cmp	r3, #0
 807add8:	d009      	beq.n	807adee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 807adda:	4b12      	ldr	r3, [pc, #72]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807addc:	689b      	ldr	r3, [r3, #8]
 807adde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 807ade2:	687b      	ldr	r3, [r7, #4]
 807ade4:	691b      	ldr	r3, [r3, #16]
 807ade6:	00db      	lsls	r3, r3, #3
 807ade8:	490e      	ldr	r1, [pc, #56]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807adea:	4313      	orrs	r3, r2
 807adec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 807adee:	f000 f82d 	bl	807ae4c <HAL_RCC_GetSysClockFreq>
 807adf2:	4602      	mov	r2, r0
 807adf4:	4b0b      	ldr	r3, [pc, #44]	@ (807ae24 <HAL_RCC_ClockConfig+0x1bc>)
 807adf6:	689b      	ldr	r3, [r3, #8]
 807adf8:	091b      	lsrs	r3, r3, #4
 807adfa:	f003 030f 	and.w	r3, r3, #15
 807adfe:	490a      	ldr	r1, [pc, #40]	@ (807ae28 <HAL_RCC_ClockConfig+0x1c0>)
 807ae00:	5ccb      	ldrb	r3, [r1, r3]
 807ae02:	fa22 f303 	lsr.w	r3, r2, r3
 807ae06:	4a09      	ldr	r2, [pc, #36]	@ (807ae2c <HAL_RCC_ClockConfig+0x1c4>)
 807ae08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 807ae0a:	4b09      	ldr	r3, [pc, #36]	@ (807ae30 <HAL_RCC_ClockConfig+0x1c8>)
 807ae0c:	681b      	ldr	r3, [r3, #0]
 807ae0e:	4618      	mov	r0, r3
 807ae10:	f7fd fd32 	bl	8078878 <HAL_InitTick>

  return HAL_OK;
 807ae14:	2300      	movs	r3, #0
}
 807ae16:	4618      	mov	r0, r3
 807ae18:	3710      	adds	r7, #16
 807ae1a:	46bd      	mov	sp, r7
 807ae1c:	bd80      	pop	{r7, pc}
 807ae1e:	bf00      	nop
 807ae20:	40023c00 	.word	0x40023c00
 807ae24:	40023800 	.word	0x40023800
 807ae28:	0807f080 	.word	0x0807f080
 807ae2c:	20000000 	.word	0x20000000
 807ae30:	20000004 	.word	0x20000004

0807ae34 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 807ae34:	b480      	push	{r7}
 807ae36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 807ae38:	4b03      	ldr	r3, [pc, #12]	@ (807ae48 <HAL_RCC_EnableCSS+0x14>)
 807ae3a:	2201      	movs	r2, #1
 807ae3c:	601a      	str	r2, [r3, #0]
}
 807ae3e:	bf00      	nop
 807ae40:	46bd      	mov	sp, r7
 807ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ae46:	4770      	bx	lr
 807ae48:	4247004c 	.word	0x4247004c

0807ae4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 807ae4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 807ae50:	b090      	sub	sp, #64	@ 0x40
 807ae52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 807ae54:	2300      	movs	r3, #0
 807ae56:	637b      	str	r3, [r7, #52]	@ 0x34
 807ae58:	2300      	movs	r3, #0
 807ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 807ae5c:	2300      	movs	r3, #0
 807ae5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 807ae60:	2300      	movs	r3, #0
 807ae62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 807ae64:	4b59      	ldr	r3, [pc, #356]	@ (807afcc <HAL_RCC_GetSysClockFreq+0x180>)
 807ae66:	689b      	ldr	r3, [r3, #8]
 807ae68:	f003 030c 	and.w	r3, r3, #12
 807ae6c:	2b08      	cmp	r3, #8
 807ae6e:	d00d      	beq.n	807ae8c <HAL_RCC_GetSysClockFreq+0x40>
 807ae70:	2b08      	cmp	r3, #8
 807ae72:	f200 80a1 	bhi.w	807afb8 <HAL_RCC_GetSysClockFreq+0x16c>
 807ae76:	2b00      	cmp	r3, #0
 807ae78:	d002      	beq.n	807ae80 <HAL_RCC_GetSysClockFreq+0x34>
 807ae7a:	2b04      	cmp	r3, #4
 807ae7c:	d003      	beq.n	807ae86 <HAL_RCC_GetSysClockFreq+0x3a>
 807ae7e:	e09b      	b.n	807afb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 807ae80:	4b53      	ldr	r3, [pc, #332]	@ (807afd0 <HAL_RCC_GetSysClockFreq+0x184>)
 807ae82:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 807ae84:	e09b      	b.n	807afbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 807ae86:	4b53      	ldr	r3, [pc, #332]	@ (807afd4 <HAL_RCC_GetSysClockFreq+0x188>)
 807ae88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 807ae8a:	e098      	b.n	807afbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 807ae8c:	4b4f      	ldr	r3, [pc, #316]	@ (807afcc <HAL_RCC_GetSysClockFreq+0x180>)
 807ae8e:	685b      	ldr	r3, [r3, #4]
 807ae90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 807ae94:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 807ae96:	4b4d      	ldr	r3, [pc, #308]	@ (807afcc <HAL_RCC_GetSysClockFreq+0x180>)
 807ae98:	685b      	ldr	r3, [r3, #4]
 807ae9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 807ae9e:	2b00      	cmp	r3, #0
 807aea0:	d028      	beq.n	807aef4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 807aea2:	4b4a      	ldr	r3, [pc, #296]	@ (807afcc <HAL_RCC_GetSysClockFreq+0x180>)
 807aea4:	685b      	ldr	r3, [r3, #4]
 807aea6:	099b      	lsrs	r3, r3, #6
 807aea8:	2200      	movs	r2, #0
 807aeaa:	623b      	str	r3, [r7, #32]
 807aeac:	627a      	str	r2, [r7, #36]	@ 0x24
 807aeae:	6a3b      	ldr	r3, [r7, #32]
 807aeb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 807aeb4:	2100      	movs	r1, #0
 807aeb6:	4b47      	ldr	r3, [pc, #284]	@ (807afd4 <HAL_RCC_GetSysClockFreq+0x188>)
 807aeb8:	fb03 f201 	mul.w	r2, r3, r1
 807aebc:	2300      	movs	r3, #0
 807aebe:	fb00 f303 	mul.w	r3, r0, r3
 807aec2:	4413      	add	r3, r2
 807aec4:	4a43      	ldr	r2, [pc, #268]	@ (807afd4 <HAL_RCC_GetSysClockFreq+0x188>)
 807aec6:	fba0 1202 	umull	r1, r2, r0, r2
 807aeca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 807aecc:	460a      	mov	r2, r1
 807aece:	62ba      	str	r2, [r7, #40]	@ 0x28
 807aed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 807aed2:	4413      	add	r3, r2
 807aed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 807aed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 807aed8:	2200      	movs	r2, #0
 807aeda:	61bb      	str	r3, [r7, #24]
 807aedc:	61fa      	str	r2, [r7, #28]
 807aede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 807aee2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 807aee6:	f7fd f977 	bl	80781d8 <__aeabi_uldivmod>
 807aeea:	4602      	mov	r2, r0
 807aeec:	460b      	mov	r3, r1
 807aeee:	4613      	mov	r3, r2
 807aef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 807aef2:	e053      	b.n	807af9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 807aef4:	4b35      	ldr	r3, [pc, #212]	@ (807afcc <HAL_RCC_GetSysClockFreq+0x180>)
 807aef6:	685b      	ldr	r3, [r3, #4]
 807aef8:	099b      	lsrs	r3, r3, #6
 807aefa:	2200      	movs	r2, #0
 807aefc:	613b      	str	r3, [r7, #16]
 807aefe:	617a      	str	r2, [r7, #20]
 807af00:	693b      	ldr	r3, [r7, #16]
 807af02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 807af06:	f04f 0b00 	mov.w	fp, #0
 807af0a:	4652      	mov	r2, sl
 807af0c:	465b      	mov	r3, fp
 807af0e:	f04f 0000 	mov.w	r0, #0
 807af12:	f04f 0100 	mov.w	r1, #0
 807af16:	0159      	lsls	r1, r3, #5
 807af18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 807af1c:	0150      	lsls	r0, r2, #5
 807af1e:	4602      	mov	r2, r0
 807af20:	460b      	mov	r3, r1
 807af22:	ebb2 080a 	subs.w	r8, r2, sl
 807af26:	eb63 090b 	sbc.w	r9, r3, fp
 807af2a:	f04f 0200 	mov.w	r2, #0
 807af2e:	f04f 0300 	mov.w	r3, #0
 807af32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 807af36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 807af3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 807af3e:	ebb2 0408 	subs.w	r4, r2, r8
 807af42:	eb63 0509 	sbc.w	r5, r3, r9
 807af46:	f04f 0200 	mov.w	r2, #0
 807af4a:	f04f 0300 	mov.w	r3, #0
 807af4e:	00eb      	lsls	r3, r5, #3
 807af50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 807af54:	00e2      	lsls	r2, r4, #3
 807af56:	4614      	mov	r4, r2
 807af58:	461d      	mov	r5, r3
 807af5a:	eb14 030a 	adds.w	r3, r4, sl
 807af5e:	603b      	str	r3, [r7, #0]
 807af60:	eb45 030b 	adc.w	r3, r5, fp
 807af64:	607b      	str	r3, [r7, #4]
 807af66:	f04f 0200 	mov.w	r2, #0
 807af6a:	f04f 0300 	mov.w	r3, #0
 807af6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 807af72:	4629      	mov	r1, r5
 807af74:	028b      	lsls	r3, r1, #10
 807af76:	4621      	mov	r1, r4
 807af78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 807af7c:	4621      	mov	r1, r4
 807af7e:	028a      	lsls	r2, r1, #10
 807af80:	4610      	mov	r0, r2
 807af82:	4619      	mov	r1, r3
 807af84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 807af86:	2200      	movs	r2, #0
 807af88:	60bb      	str	r3, [r7, #8]
 807af8a:	60fa      	str	r2, [r7, #12]
 807af8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 807af90:	f7fd f922 	bl	80781d8 <__aeabi_uldivmod>
 807af94:	4602      	mov	r2, r0
 807af96:	460b      	mov	r3, r1
 807af98:	4613      	mov	r3, r2
 807af9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 807af9c:	4b0b      	ldr	r3, [pc, #44]	@ (807afcc <HAL_RCC_GetSysClockFreq+0x180>)
 807af9e:	685b      	ldr	r3, [r3, #4]
 807afa0:	0c1b      	lsrs	r3, r3, #16
 807afa2:	f003 0303 	and.w	r3, r3, #3
 807afa6:	3301      	adds	r3, #1
 807afa8:	005b      	lsls	r3, r3, #1
 807afaa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 807afac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 807afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 807afb0:	fbb2 f3f3 	udiv	r3, r2, r3
 807afb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 807afb6:	e002      	b.n	807afbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 807afb8:	4b05      	ldr	r3, [pc, #20]	@ (807afd0 <HAL_RCC_GetSysClockFreq+0x184>)
 807afba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 807afbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 807afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 807afc0:	4618      	mov	r0, r3
 807afc2:	3740      	adds	r7, #64	@ 0x40
 807afc4:	46bd      	mov	sp, r7
 807afc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 807afca:	bf00      	nop
 807afcc:	40023800 	.word	0x40023800
 807afd0:	00f42400 	.word	0x00f42400
 807afd4:	017d7840 	.word	0x017d7840

0807afd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 807afd8:	b480      	push	{r7}
 807afda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 807afdc:	4b03      	ldr	r3, [pc, #12]	@ (807afec <HAL_RCC_GetHCLKFreq+0x14>)
 807afde:	681b      	ldr	r3, [r3, #0]
}
 807afe0:	4618      	mov	r0, r3
 807afe2:	46bd      	mov	sp, r7
 807afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 807afe8:	4770      	bx	lr
 807afea:	bf00      	nop
 807afec:	20000000 	.word	0x20000000

0807aff0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 807aff0:	b580      	push	{r7, lr}
 807aff2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 807aff4:	4b06      	ldr	r3, [pc, #24]	@ (807b010 <HAL_RCC_NMI_IRQHandler+0x20>)
 807aff6:	68db      	ldr	r3, [r3, #12]
 807aff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 807affc:	2b80      	cmp	r3, #128	@ 0x80
 807affe:	d104      	bne.n	807b00a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 807b000:	f000 f80a 	bl	807b018 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 807b004:	4b03      	ldr	r3, [pc, #12]	@ (807b014 <HAL_RCC_NMI_IRQHandler+0x24>)
 807b006:	2280      	movs	r2, #128	@ 0x80
 807b008:	701a      	strb	r2, [r3, #0]
  }
}
 807b00a:	bf00      	nop
 807b00c:	bd80      	pop	{r7, pc}
 807b00e:	bf00      	nop
 807b010:	40023800 	.word	0x40023800
 807b014:	4002380e 	.word	0x4002380e

0807b018 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 807b018:	b480      	push	{r7}
 807b01a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 807b01c:	bf00      	nop
 807b01e:	46bd      	mov	sp, r7
 807b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b024:	4770      	bx	lr

0807b026 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 807b026:	b084      	sub	sp, #16
 807b028:	b580      	push	{r7, lr}
 807b02a:	b084      	sub	sp, #16
 807b02c:	af00      	add	r7, sp, #0
 807b02e:	6078      	str	r0, [r7, #4]
 807b030:	f107 001c 	add.w	r0, r7, #28
 807b034:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 807b038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 807b03a:	2b01      	cmp	r3, #1
 807b03c:	d122      	bne.n	807b084 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 807b03e:	687b      	ldr	r3, [r7, #4]
 807b040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b042:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 807b046:	687b      	ldr	r3, [r7, #4]
 807b048:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 807b04a:	687b      	ldr	r3, [r7, #4]
 807b04c:	68db      	ldr	r3, [r3, #12]
 807b04e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 807b052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 807b056:	687a      	ldr	r2, [r7, #4]
 807b058:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 807b05a:	687b      	ldr	r3, [r7, #4]
 807b05c:	68db      	ldr	r3, [r3, #12]
 807b05e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 807b062:	687b      	ldr	r3, [r7, #4]
 807b064:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 807b066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 807b068:	2b01      	cmp	r3, #1
 807b06a:	d105      	bne.n	807b078 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 807b06c:	687b      	ldr	r3, [r7, #4]
 807b06e:	68db      	ldr	r3, [r3, #12]
 807b070:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 807b074:	687b      	ldr	r3, [r7, #4]
 807b076:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 807b078:	6878      	ldr	r0, [r7, #4]
 807b07a:	f001 f9e9 	bl	807c450 <USB_CoreReset>
 807b07e:	4603      	mov	r3, r0
 807b080:	73fb      	strb	r3, [r7, #15]
 807b082:	e01a      	b.n	807b0ba <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 807b084:	687b      	ldr	r3, [r7, #4]
 807b086:	68db      	ldr	r3, [r3, #12]
 807b088:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 807b08c:	687b      	ldr	r3, [r7, #4]
 807b08e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 807b090:	6878      	ldr	r0, [r7, #4]
 807b092:	f001 f9dd 	bl	807c450 <USB_CoreReset>
 807b096:	4603      	mov	r3, r0
 807b098:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 807b09a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 807b09c:	2b00      	cmp	r3, #0
 807b09e:	d106      	bne.n	807b0ae <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 807b0a0:	687b      	ldr	r3, [r7, #4]
 807b0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b0a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 807b0a8:	687b      	ldr	r3, [r7, #4]
 807b0aa:	639a      	str	r2, [r3, #56]	@ 0x38
 807b0ac:	e005      	b.n	807b0ba <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 807b0ae:	687b      	ldr	r3, [r7, #4]
 807b0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b0b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 807b0b6:	687b      	ldr	r3, [r7, #4]
 807b0b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 807b0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 807b0bc:	2b01      	cmp	r3, #1
 807b0be:	d10b      	bne.n	807b0d8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 807b0c0:	687b      	ldr	r3, [r7, #4]
 807b0c2:	689b      	ldr	r3, [r3, #8]
 807b0c4:	f043 0206 	orr.w	r2, r3, #6
 807b0c8:	687b      	ldr	r3, [r7, #4]
 807b0ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 807b0cc:	687b      	ldr	r3, [r7, #4]
 807b0ce:	689b      	ldr	r3, [r3, #8]
 807b0d0:	f043 0220 	orr.w	r2, r3, #32
 807b0d4:	687b      	ldr	r3, [r7, #4]
 807b0d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 807b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 807b0da:	4618      	mov	r0, r3
 807b0dc:	3710      	adds	r7, #16
 807b0de:	46bd      	mov	sp, r7
 807b0e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 807b0e4:	b004      	add	sp, #16
 807b0e6:	4770      	bx	lr

0807b0e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 807b0e8:	b480      	push	{r7}
 807b0ea:	b087      	sub	sp, #28
 807b0ec:	af00      	add	r7, sp, #0
 807b0ee:	60f8      	str	r0, [r7, #12]
 807b0f0:	60b9      	str	r1, [r7, #8]
 807b0f2:	4613      	mov	r3, r2
 807b0f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 807b0f6:	79fb      	ldrb	r3, [r7, #7]
 807b0f8:	2b02      	cmp	r3, #2
 807b0fa:	d165      	bne.n	807b1c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 807b0fc:	68bb      	ldr	r3, [r7, #8]
 807b0fe:	4a41      	ldr	r2, [pc, #260]	@ (807b204 <USB_SetTurnaroundTime+0x11c>)
 807b100:	4293      	cmp	r3, r2
 807b102:	d906      	bls.n	807b112 <USB_SetTurnaroundTime+0x2a>
 807b104:	68bb      	ldr	r3, [r7, #8]
 807b106:	4a40      	ldr	r2, [pc, #256]	@ (807b208 <USB_SetTurnaroundTime+0x120>)
 807b108:	4293      	cmp	r3, r2
 807b10a:	d202      	bcs.n	807b112 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 807b10c:	230f      	movs	r3, #15
 807b10e:	617b      	str	r3, [r7, #20]
 807b110:	e062      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 807b112:	68bb      	ldr	r3, [r7, #8]
 807b114:	4a3c      	ldr	r2, [pc, #240]	@ (807b208 <USB_SetTurnaroundTime+0x120>)
 807b116:	4293      	cmp	r3, r2
 807b118:	d306      	bcc.n	807b128 <USB_SetTurnaroundTime+0x40>
 807b11a:	68bb      	ldr	r3, [r7, #8]
 807b11c:	4a3b      	ldr	r2, [pc, #236]	@ (807b20c <USB_SetTurnaroundTime+0x124>)
 807b11e:	4293      	cmp	r3, r2
 807b120:	d202      	bcs.n	807b128 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 807b122:	230e      	movs	r3, #14
 807b124:	617b      	str	r3, [r7, #20]
 807b126:	e057      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 807b128:	68bb      	ldr	r3, [r7, #8]
 807b12a:	4a38      	ldr	r2, [pc, #224]	@ (807b20c <USB_SetTurnaroundTime+0x124>)
 807b12c:	4293      	cmp	r3, r2
 807b12e:	d306      	bcc.n	807b13e <USB_SetTurnaroundTime+0x56>
 807b130:	68bb      	ldr	r3, [r7, #8]
 807b132:	4a37      	ldr	r2, [pc, #220]	@ (807b210 <USB_SetTurnaroundTime+0x128>)
 807b134:	4293      	cmp	r3, r2
 807b136:	d202      	bcs.n	807b13e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 807b138:	230d      	movs	r3, #13
 807b13a:	617b      	str	r3, [r7, #20]
 807b13c:	e04c      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 807b13e:	68bb      	ldr	r3, [r7, #8]
 807b140:	4a33      	ldr	r2, [pc, #204]	@ (807b210 <USB_SetTurnaroundTime+0x128>)
 807b142:	4293      	cmp	r3, r2
 807b144:	d306      	bcc.n	807b154 <USB_SetTurnaroundTime+0x6c>
 807b146:	68bb      	ldr	r3, [r7, #8]
 807b148:	4a32      	ldr	r2, [pc, #200]	@ (807b214 <USB_SetTurnaroundTime+0x12c>)
 807b14a:	4293      	cmp	r3, r2
 807b14c:	d802      	bhi.n	807b154 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 807b14e:	230c      	movs	r3, #12
 807b150:	617b      	str	r3, [r7, #20]
 807b152:	e041      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 807b154:	68bb      	ldr	r3, [r7, #8]
 807b156:	4a2f      	ldr	r2, [pc, #188]	@ (807b214 <USB_SetTurnaroundTime+0x12c>)
 807b158:	4293      	cmp	r3, r2
 807b15a:	d906      	bls.n	807b16a <USB_SetTurnaroundTime+0x82>
 807b15c:	68bb      	ldr	r3, [r7, #8]
 807b15e:	4a2e      	ldr	r2, [pc, #184]	@ (807b218 <USB_SetTurnaroundTime+0x130>)
 807b160:	4293      	cmp	r3, r2
 807b162:	d802      	bhi.n	807b16a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 807b164:	230b      	movs	r3, #11
 807b166:	617b      	str	r3, [r7, #20]
 807b168:	e036      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 807b16a:	68bb      	ldr	r3, [r7, #8]
 807b16c:	4a2a      	ldr	r2, [pc, #168]	@ (807b218 <USB_SetTurnaroundTime+0x130>)
 807b16e:	4293      	cmp	r3, r2
 807b170:	d906      	bls.n	807b180 <USB_SetTurnaroundTime+0x98>
 807b172:	68bb      	ldr	r3, [r7, #8]
 807b174:	4a29      	ldr	r2, [pc, #164]	@ (807b21c <USB_SetTurnaroundTime+0x134>)
 807b176:	4293      	cmp	r3, r2
 807b178:	d802      	bhi.n	807b180 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 807b17a:	230a      	movs	r3, #10
 807b17c:	617b      	str	r3, [r7, #20]
 807b17e:	e02b      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 807b180:	68bb      	ldr	r3, [r7, #8]
 807b182:	4a26      	ldr	r2, [pc, #152]	@ (807b21c <USB_SetTurnaroundTime+0x134>)
 807b184:	4293      	cmp	r3, r2
 807b186:	d906      	bls.n	807b196 <USB_SetTurnaroundTime+0xae>
 807b188:	68bb      	ldr	r3, [r7, #8]
 807b18a:	4a25      	ldr	r2, [pc, #148]	@ (807b220 <USB_SetTurnaroundTime+0x138>)
 807b18c:	4293      	cmp	r3, r2
 807b18e:	d202      	bcs.n	807b196 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 807b190:	2309      	movs	r3, #9
 807b192:	617b      	str	r3, [r7, #20]
 807b194:	e020      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 807b196:	68bb      	ldr	r3, [r7, #8]
 807b198:	4a21      	ldr	r2, [pc, #132]	@ (807b220 <USB_SetTurnaroundTime+0x138>)
 807b19a:	4293      	cmp	r3, r2
 807b19c:	d306      	bcc.n	807b1ac <USB_SetTurnaroundTime+0xc4>
 807b19e:	68bb      	ldr	r3, [r7, #8]
 807b1a0:	4a20      	ldr	r2, [pc, #128]	@ (807b224 <USB_SetTurnaroundTime+0x13c>)
 807b1a2:	4293      	cmp	r3, r2
 807b1a4:	d802      	bhi.n	807b1ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 807b1a6:	2308      	movs	r3, #8
 807b1a8:	617b      	str	r3, [r7, #20]
 807b1aa:	e015      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 807b1ac:	68bb      	ldr	r3, [r7, #8]
 807b1ae:	4a1d      	ldr	r2, [pc, #116]	@ (807b224 <USB_SetTurnaroundTime+0x13c>)
 807b1b0:	4293      	cmp	r3, r2
 807b1b2:	d906      	bls.n	807b1c2 <USB_SetTurnaroundTime+0xda>
 807b1b4:	68bb      	ldr	r3, [r7, #8]
 807b1b6:	4a1c      	ldr	r2, [pc, #112]	@ (807b228 <USB_SetTurnaroundTime+0x140>)
 807b1b8:	4293      	cmp	r3, r2
 807b1ba:	d202      	bcs.n	807b1c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 807b1bc:	2307      	movs	r3, #7
 807b1be:	617b      	str	r3, [r7, #20]
 807b1c0:	e00a      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 807b1c2:	2306      	movs	r3, #6
 807b1c4:	617b      	str	r3, [r7, #20]
 807b1c6:	e007      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 807b1c8:	79fb      	ldrb	r3, [r7, #7]
 807b1ca:	2b00      	cmp	r3, #0
 807b1cc:	d102      	bne.n	807b1d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 807b1ce:	2309      	movs	r3, #9
 807b1d0:	617b      	str	r3, [r7, #20]
 807b1d2:	e001      	b.n	807b1d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 807b1d4:	2309      	movs	r3, #9
 807b1d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 807b1d8:	68fb      	ldr	r3, [r7, #12]
 807b1da:	68db      	ldr	r3, [r3, #12]
 807b1dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 807b1e0:	68fb      	ldr	r3, [r7, #12]
 807b1e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 807b1e4:	68fb      	ldr	r3, [r7, #12]
 807b1e6:	68da      	ldr	r2, [r3, #12]
 807b1e8:	697b      	ldr	r3, [r7, #20]
 807b1ea:	029b      	lsls	r3, r3, #10
 807b1ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 807b1f0:	431a      	orrs	r2, r3
 807b1f2:	68fb      	ldr	r3, [r7, #12]
 807b1f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 807b1f6:	2300      	movs	r3, #0
}
 807b1f8:	4618      	mov	r0, r3
 807b1fa:	371c      	adds	r7, #28
 807b1fc:	46bd      	mov	sp, r7
 807b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b202:	4770      	bx	lr
 807b204:	00d8acbf 	.word	0x00d8acbf
 807b208:	00e4e1c0 	.word	0x00e4e1c0
 807b20c:	00f42400 	.word	0x00f42400
 807b210:	01067380 	.word	0x01067380
 807b214:	011a499f 	.word	0x011a499f
 807b218:	01312cff 	.word	0x01312cff
 807b21c:	014ca43f 	.word	0x014ca43f
 807b220:	016e3600 	.word	0x016e3600
 807b224:	01a6ab1f 	.word	0x01a6ab1f
 807b228:	01e84800 	.word	0x01e84800

0807b22c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 807b22c:	b480      	push	{r7}
 807b22e:	b083      	sub	sp, #12
 807b230:	af00      	add	r7, sp, #0
 807b232:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 807b234:	687b      	ldr	r3, [r7, #4]
 807b236:	689b      	ldr	r3, [r3, #8]
 807b238:	f043 0201 	orr.w	r2, r3, #1
 807b23c:	687b      	ldr	r3, [r7, #4]
 807b23e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 807b240:	2300      	movs	r3, #0
}
 807b242:	4618      	mov	r0, r3
 807b244:	370c      	adds	r7, #12
 807b246:	46bd      	mov	sp, r7
 807b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b24c:	4770      	bx	lr

0807b24e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 807b24e:	b480      	push	{r7}
 807b250:	b083      	sub	sp, #12
 807b252:	af00      	add	r7, sp, #0
 807b254:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 807b256:	687b      	ldr	r3, [r7, #4]
 807b258:	689b      	ldr	r3, [r3, #8]
 807b25a:	f023 0201 	bic.w	r2, r3, #1
 807b25e:	687b      	ldr	r3, [r7, #4]
 807b260:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 807b262:	2300      	movs	r3, #0
}
 807b264:	4618      	mov	r0, r3
 807b266:	370c      	adds	r7, #12
 807b268:	46bd      	mov	sp, r7
 807b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b26e:	4770      	bx	lr

0807b270 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 807b270:	b580      	push	{r7, lr}
 807b272:	b082      	sub	sp, #8
 807b274:	af00      	add	r7, sp, #0
 807b276:	6078      	str	r0, [r7, #4]
 807b278:	460b      	mov	r3, r1
 807b27a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 807b27c:	687b      	ldr	r3, [r7, #4]
 807b27e:	68db      	ldr	r3, [r3, #12]
 807b280:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 807b284:	687b      	ldr	r3, [r7, #4]
 807b286:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 807b288:	78fb      	ldrb	r3, [r7, #3]
 807b28a:	2b01      	cmp	r3, #1
 807b28c:	d106      	bne.n	807b29c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 807b28e:	687b      	ldr	r3, [r7, #4]
 807b290:	68db      	ldr	r3, [r3, #12]
 807b292:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 807b296:	687b      	ldr	r3, [r7, #4]
 807b298:	60da      	str	r2, [r3, #12]
 807b29a:	e00b      	b.n	807b2b4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 807b29c:	78fb      	ldrb	r3, [r7, #3]
 807b29e:	2b00      	cmp	r3, #0
 807b2a0:	d106      	bne.n	807b2b0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 807b2a2:	687b      	ldr	r3, [r7, #4]
 807b2a4:	68db      	ldr	r3, [r3, #12]
 807b2a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 807b2aa:	687b      	ldr	r3, [r7, #4]
 807b2ac:	60da      	str	r2, [r3, #12]
 807b2ae:	e001      	b.n	807b2b4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 807b2b0:	2301      	movs	r3, #1
 807b2b2:	e003      	b.n	807b2bc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 807b2b4:	2032      	movs	r0, #50	@ 0x32
 807b2b6:	f7fd fb2f 	bl	8078918 <HAL_Delay>

  return HAL_OK;
 807b2ba:	2300      	movs	r3, #0
}
 807b2bc:	4618      	mov	r0, r3
 807b2be:	3708      	adds	r7, #8
 807b2c0:	46bd      	mov	sp, r7
 807b2c2:	bd80      	pop	{r7, pc}

0807b2c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 807b2c4:	b084      	sub	sp, #16
 807b2c6:	b580      	push	{r7, lr}
 807b2c8:	b086      	sub	sp, #24
 807b2ca:	af00      	add	r7, sp, #0
 807b2cc:	6078      	str	r0, [r7, #4]
 807b2ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 807b2d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 807b2d6:	2300      	movs	r3, #0
 807b2d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b2da:	687b      	ldr	r3, [r7, #4]
 807b2dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 807b2de:	2300      	movs	r3, #0
 807b2e0:	613b      	str	r3, [r7, #16]
 807b2e2:	e009      	b.n	807b2f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 807b2e4:	687a      	ldr	r2, [r7, #4]
 807b2e6:	693b      	ldr	r3, [r7, #16]
 807b2e8:	3340      	adds	r3, #64	@ 0x40
 807b2ea:	009b      	lsls	r3, r3, #2
 807b2ec:	4413      	add	r3, r2
 807b2ee:	2200      	movs	r2, #0
 807b2f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 807b2f2:	693b      	ldr	r3, [r7, #16]
 807b2f4:	3301      	adds	r3, #1
 807b2f6:	613b      	str	r3, [r7, #16]
 807b2f8:	693b      	ldr	r3, [r7, #16]
 807b2fa:	2b0e      	cmp	r3, #14
 807b2fc:	d9f2      	bls.n	807b2e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 807b2fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 807b300:	2b00      	cmp	r3, #0
 807b302:	d11c      	bne.n	807b33e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 807b304:	68fb      	ldr	r3, [r7, #12]
 807b306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b30a:	685b      	ldr	r3, [r3, #4]
 807b30c:	68fa      	ldr	r2, [r7, #12]
 807b30e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 807b312:	f043 0302 	orr.w	r3, r3, #2
 807b316:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 807b318:	687b      	ldr	r3, [r7, #4]
 807b31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b31c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 807b320:	687b      	ldr	r3, [r7, #4]
 807b322:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 807b324:	687b      	ldr	r3, [r7, #4]
 807b326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b328:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 807b32c:	687b      	ldr	r3, [r7, #4]
 807b32e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 807b330:	687b      	ldr	r3, [r7, #4]
 807b332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b334:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 807b338:	687b      	ldr	r3, [r7, #4]
 807b33a:	639a      	str	r2, [r3, #56]	@ 0x38
 807b33c:	e00b      	b.n	807b356 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 807b33e:	687b      	ldr	r3, [r7, #4]
 807b340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b342:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 807b346:	687b      	ldr	r3, [r7, #4]
 807b348:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 807b34a:	687b      	ldr	r3, [r7, #4]
 807b34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807b34e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 807b352:	687b      	ldr	r3, [r7, #4]
 807b354:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 807b356:	68fb      	ldr	r3, [r7, #12]
 807b358:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 807b35c:	461a      	mov	r2, r3
 807b35e:	2300      	movs	r3, #0
 807b360:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 807b362:	68fb      	ldr	r3, [r7, #12]
 807b364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b368:	4619      	mov	r1, r3
 807b36a:	68fb      	ldr	r3, [r7, #12]
 807b36c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b370:	461a      	mov	r2, r3
 807b372:	680b      	ldr	r3, [r1, #0]
 807b374:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 807b376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 807b378:	2b01      	cmp	r3, #1
 807b37a:	d10c      	bne.n	807b396 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 807b37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 807b37e:	2b00      	cmp	r3, #0
 807b380:	d104      	bne.n	807b38c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 807b382:	2100      	movs	r1, #0
 807b384:	6878      	ldr	r0, [r7, #4]
 807b386:	f000 f949 	bl	807b61c <USB_SetDevSpeed>
 807b38a:	e008      	b.n	807b39e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 807b38c:	2101      	movs	r1, #1
 807b38e:	6878      	ldr	r0, [r7, #4]
 807b390:	f000 f944 	bl	807b61c <USB_SetDevSpeed>
 807b394:	e003      	b.n	807b39e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 807b396:	2103      	movs	r1, #3
 807b398:	6878      	ldr	r0, [r7, #4]
 807b39a:	f000 f93f 	bl	807b61c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 807b39e:	2110      	movs	r1, #16
 807b3a0:	6878      	ldr	r0, [r7, #4]
 807b3a2:	f000 f8f3 	bl	807b58c <USB_FlushTxFifo>
 807b3a6:	4603      	mov	r3, r0
 807b3a8:	2b00      	cmp	r3, #0
 807b3aa:	d001      	beq.n	807b3b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 807b3ac:	2301      	movs	r3, #1
 807b3ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 807b3b0:	6878      	ldr	r0, [r7, #4]
 807b3b2:	f000 f911 	bl	807b5d8 <USB_FlushRxFifo>
 807b3b6:	4603      	mov	r3, r0
 807b3b8:	2b00      	cmp	r3, #0
 807b3ba:	d001      	beq.n	807b3c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 807b3bc:	2301      	movs	r3, #1
 807b3be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 807b3c0:	68fb      	ldr	r3, [r7, #12]
 807b3c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b3c6:	461a      	mov	r2, r3
 807b3c8:	2300      	movs	r3, #0
 807b3ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 807b3cc:	68fb      	ldr	r3, [r7, #12]
 807b3ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b3d2:	461a      	mov	r2, r3
 807b3d4:	2300      	movs	r3, #0
 807b3d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 807b3d8:	68fb      	ldr	r3, [r7, #12]
 807b3da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b3de:	461a      	mov	r2, r3
 807b3e0:	2300      	movs	r3, #0
 807b3e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b3e4:	2300      	movs	r3, #0
 807b3e6:	613b      	str	r3, [r7, #16]
 807b3e8:	e043      	b.n	807b472 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 807b3ea:	693b      	ldr	r3, [r7, #16]
 807b3ec:	015a      	lsls	r2, r3, #5
 807b3ee:	68fb      	ldr	r3, [r7, #12]
 807b3f0:	4413      	add	r3, r2
 807b3f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b3f6:	681b      	ldr	r3, [r3, #0]
 807b3f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 807b3fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 807b400:	d118      	bne.n	807b434 <USB_DevInit+0x170>
    {
      if (i == 0U)
 807b402:	693b      	ldr	r3, [r7, #16]
 807b404:	2b00      	cmp	r3, #0
 807b406:	d10a      	bne.n	807b41e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 807b408:	693b      	ldr	r3, [r7, #16]
 807b40a:	015a      	lsls	r2, r3, #5
 807b40c:	68fb      	ldr	r3, [r7, #12]
 807b40e:	4413      	add	r3, r2
 807b410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b414:	461a      	mov	r2, r3
 807b416:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 807b41a:	6013      	str	r3, [r2, #0]
 807b41c:	e013      	b.n	807b446 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 807b41e:	693b      	ldr	r3, [r7, #16]
 807b420:	015a      	lsls	r2, r3, #5
 807b422:	68fb      	ldr	r3, [r7, #12]
 807b424:	4413      	add	r3, r2
 807b426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b42a:	461a      	mov	r2, r3
 807b42c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 807b430:	6013      	str	r3, [r2, #0]
 807b432:	e008      	b.n	807b446 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 807b434:	693b      	ldr	r3, [r7, #16]
 807b436:	015a      	lsls	r2, r3, #5
 807b438:	68fb      	ldr	r3, [r7, #12]
 807b43a:	4413      	add	r3, r2
 807b43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b440:	461a      	mov	r2, r3
 807b442:	2300      	movs	r3, #0
 807b444:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 807b446:	693b      	ldr	r3, [r7, #16]
 807b448:	015a      	lsls	r2, r3, #5
 807b44a:	68fb      	ldr	r3, [r7, #12]
 807b44c:	4413      	add	r3, r2
 807b44e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b452:	461a      	mov	r2, r3
 807b454:	2300      	movs	r3, #0
 807b456:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 807b458:	693b      	ldr	r3, [r7, #16]
 807b45a:	015a      	lsls	r2, r3, #5
 807b45c:	68fb      	ldr	r3, [r7, #12]
 807b45e:	4413      	add	r3, r2
 807b460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b464:	461a      	mov	r2, r3
 807b466:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 807b46a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b46c:	693b      	ldr	r3, [r7, #16]
 807b46e:	3301      	adds	r3, #1
 807b470:	613b      	str	r3, [r7, #16]
 807b472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 807b474:	693a      	ldr	r2, [r7, #16]
 807b476:	429a      	cmp	r2, r3
 807b478:	d3b7      	bcc.n	807b3ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b47a:	2300      	movs	r3, #0
 807b47c:	613b      	str	r3, [r7, #16]
 807b47e:	e043      	b.n	807b508 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 807b480:	693b      	ldr	r3, [r7, #16]
 807b482:	015a      	lsls	r2, r3, #5
 807b484:	68fb      	ldr	r3, [r7, #12]
 807b486:	4413      	add	r3, r2
 807b488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b48c:	681b      	ldr	r3, [r3, #0]
 807b48e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 807b492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 807b496:	d118      	bne.n	807b4ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 807b498:	693b      	ldr	r3, [r7, #16]
 807b49a:	2b00      	cmp	r3, #0
 807b49c:	d10a      	bne.n	807b4b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 807b49e:	693b      	ldr	r3, [r7, #16]
 807b4a0:	015a      	lsls	r2, r3, #5
 807b4a2:	68fb      	ldr	r3, [r7, #12]
 807b4a4:	4413      	add	r3, r2
 807b4a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b4aa:	461a      	mov	r2, r3
 807b4ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 807b4b0:	6013      	str	r3, [r2, #0]
 807b4b2:	e013      	b.n	807b4dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 807b4b4:	693b      	ldr	r3, [r7, #16]
 807b4b6:	015a      	lsls	r2, r3, #5
 807b4b8:	68fb      	ldr	r3, [r7, #12]
 807b4ba:	4413      	add	r3, r2
 807b4bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b4c0:	461a      	mov	r2, r3
 807b4c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 807b4c6:	6013      	str	r3, [r2, #0]
 807b4c8:	e008      	b.n	807b4dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 807b4ca:	693b      	ldr	r3, [r7, #16]
 807b4cc:	015a      	lsls	r2, r3, #5
 807b4ce:	68fb      	ldr	r3, [r7, #12]
 807b4d0:	4413      	add	r3, r2
 807b4d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b4d6:	461a      	mov	r2, r3
 807b4d8:	2300      	movs	r3, #0
 807b4da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 807b4dc:	693b      	ldr	r3, [r7, #16]
 807b4de:	015a      	lsls	r2, r3, #5
 807b4e0:	68fb      	ldr	r3, [r7, #12]
 807b4e2:	4413      	add	r3, r2
 807b4e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b4e8:	461a      	mov	r2, r3
 807b4ea:	2300      	movs	r3, #0
 807b4ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 807b4ee:	693b      	ldr	r3, [r7, #16]
 807b4f0:	015a      	lsls	r2, r3, #5
 807b4f2:	68fb      	ldr	r3, [r7, #12]
 807b4f4:	4413      	add	r3, r2
 807b4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b4fa:	461a      	mov	r2, r3
 807b4fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 807b500:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b502:	693b      	ldr	r3, [r7, #16]
 807b504:	3301      	adds	r3, #1
 807b506:	613b      	str	r3, [r7, #16]
 807b508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 807b50a:	693a      	ldr	r2, [r7, #16]
 807b50c:	429a      	cmp	r2, r3
 807b50e:	d3b7      	bcc.n	807b480 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 807b510:	68fb      	ldr	r3, [r7, #12]
 807b512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b516:	691b      	ldr	r3, [r3, #16]
 807b518:	68fa      	ldr	r2, [r7, #12]
 807b51a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 807b51e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 807b522:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 807b524:	687b      	ldr	r3, [r7, #4]
 807b526:	2200      	movs	r2, #0
 807b528:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 807b52a:	687b      	ldr	r3, [r7, #4]
 807b52c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 807b530:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 807b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 807b534:	2b00      	cmp	r3, #0
 807b536:	d105      	bne.n	807b544 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 807b538:	687b      	ldr	r3, [r7, #4]
 807b53a:	699b      	ldr	r3, [r3, #24]
 807b53c:	f043 0210 	orr.w	r2, r3, #16
 807b540:	687b      	ldr	r3, [r7, #4]
 807b542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 807b544:	687b      	ldr	r3, [r7, #4]
 807b546:	699a      	ldr	r2, [r3, #24]
 807b548:	4b0f      	ldr	r3, [pc, #60]	@ (807b588 <USB_DevInit+0x2c4>)
 807b54a:	4313      	orrs	r3, r2
 807b54c:	687a      	ldr	r2, [r7, #4]
 807b54e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 807b550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 807b552:	2b00      	cmp	r3, #0
 807b554:	d005      	beq.n	807b562 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 807b556:	687b      	ldr	r3, [r7, #4]
 807b558:	699b      	ldr	r3, [r3, #24]
 807b55a:	f043 0208 	orr.w	r2, r3, #8
 807b55e:	687b      	ldr	r3, [r7, #4]
 807b560:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 807b562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 807b564:	2b01      	cmp	r3, #1
 807b566:	d107      	bne.n	807b578 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 807b568:	687b      	ldr	r3, [r7, #4]
 807b56a:	699b      	ldr	r3, [r3, #24]
 807b56c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 807b570:	f043 0304 	orr.w	r3, r3, #4
 807b574:	687a      	ldr	r2, [r7, #4]
 807b576:	6193      	str	r3, [r2, #24]
  }

  return ret;
 807b578:	7dfb      	ldrb	r3, [r7, #23]
}
 807b57a:	4618      	mov	r0, r3
 807b57c:	3718      	adds	r7, #24
 807b57e:	46bd      	mov	sp, r7
 807b580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 807b584:	b004      	add	sp, #16
 807b586:	4770      	bx	lr
 807b588:	803c3800 	.word	0x803c3800

0807b58c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 807b58c:	b480      	push	{r7}
 807b58e:	b085      	sub	sp, #20
 807b590:	af00      	add	r7, sp, #0
 807b592:	6078      	str	r0, [r7, #4]
 807b594:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 807b596:	2300      	movs	r3, #0
 807b598:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 807b59a:	683b      	ldr	r3, [r7, #0]
 807b59c:	019b      	lsls	r3, r3, #6
 807b59e:	f043 0220 	orr.w	r2, r3, #32
 807b5a2:	687b      	ldr	r3, [r7, #4]
 807b5a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807b5a6:	68fb      	ldr	r3, [r7, #12]
 807b5a8:	3301      	adds	r3, #1
 807b5aa:	60fb      	str	r3, [r7, #12]
 807b5ac:	68fb      	ldr	r3, [r7, #12]
 807b5ae:	4a09      	ldr	r2, [pc, #36]	@ (807b5d4 <USB_FlushTxFifo+0x48>)
 807b5b0:	4293      	cmp	r3, r2
 807b5b2:	d901      	bls.n	807b5b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 807b5b4:	2303      	movs	r3, #3
 807b5b6:	e006      	b.n	807b5c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 807b5b8:	687b      	ldr	r3, [r7, #4]
 807b5ba:	691b      	ldr	r3, [r3, #16]
 807b5bc:	f003 0320 	and.w	r3, r3, #32
 807b5c0:	2b20      	cmp	r3, #32
 807b5c2:	d0f0      	beq.n	807b5a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 807b5c4:	2300      	movs	r3, #0
}
 807b5c6:	4618      	mov	r0, r3
 807b5c8:	3714      	adds	r7, #20
 807b5ca:	46bd      	mov	sp, r7
 807b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b5d0:	4770      	bx	lr
 807b5d2:	bf00      	nop
 807b5d4:	00030d40 	.word	0x00030d40

0807b5d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 807b5d8:	b480      	push	{r7}
 807b5da:	b085      	sub	sp, #20
 807b5dc:	af00      	add	r7, sp, #0
 807b5de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 807b5e0:	2300      	movs	r3, #0
 807b5e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 807b5e4:	687b      	ldr	r3, [r7, #4]
 807b5e6:	2210      	movs	r2, #16
 807b5e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807b5ea:	68fb      	ldr	r3, [r7, #12]
 807b5ec:	3301      	adds	r3, #1
 807b5ee:	60fb      	str	r3, [r7, #12]
 807b5f0:	68fb      	ldr	r3, [r7, #12]
 807b5f2:	4a09      	ldr	r2, [pc, #36]	@ (807b618 <USB_FlushRxFifo+0x40>)
 807b5f4:	4293      	cmp	r3, r2
 807b5f6:	d901      	bls.n	807b5fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 807b5f8:	2303      	movs	r3, #3
 807b5fa:	e006      	b.n	807b60a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 807b5fc:	687b      	ldr	r3, [r7, #4]
 807b5fe:	691b      	ldr	r3, [r3, #16]
 807b600:	f003 0310 	and.w	r3, r3, #16
 807b604:	2b10      	cmp	r3, #16
 807b606:	d0f0      	beq.n	807b5ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 807b608:	2300      	movs	r3, #0
}
 807b60a:	4618      	mov	r0, r3
 807b60c:	3714      	adds	r7, #20
 807b60e:	46bd      	mov	sp, r7
 807b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b614:	4770      	bx	lr
 807b616:	bf00      	nop
 807b618:	00030d40 	.word	0x00030d40

0807b61c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 807b61c:	b480      	push	{r7}
 807b61e:	b085      	sub	sp, #20
 807b620:	af00      	add	r7, sp, #0
 807b622:	6078      	str	r0, [r7, #4]
 807b624:	460b      	mov	r3, r1
 807b626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b628:	687b      	ldr	r3, [r7, #4]
 807b62a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 807b62c:	68fb      	ldr	r3, [r7, #12]
 807b62e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b632:	681a      	ldr	r2, [r3, #0]
 807b634:	78fb      	ldrb	r3, [r7, #3]
 807b636:	68f9      	ldr	r1, [r7, #12]
 807b638:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 807b63c:	4313      	orrs	r3, r2
 807b63e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 807b640:	2300      	movs	r3, #0
}
 807b642:	4618      	mov	r0, r3
 807b644:	3714      	adds	r7, #20
 807b646:	46bd      	mov	sp, r7
 807b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b64c:	4770      	bx	lr

0807b64e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 807b64e:	b480      	push	{r7}
 807b650:	b087      	sub	sp, #28
 807b652:	af00      	add	r7, sp, #0
 807b654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b656:	687b      	ldr	r3, [r7, #4]
 807b658:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 807b65a:	693b      	ldr	r3, [r7, #16]
 807b65c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b660:	689b      	ldr	r3, [r3, #8]
 807b662:	f003 0306 	and.w	r3, r3, #6
 807b666:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 807b668:	68fb      	ldr	r3, [r7, #12]
 807b66a:	2b00      	cmp	r3, #0
 807b66c:	d102      	bne.n	807b674 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 807b66e:	2300      	movs	r3, #0
 807b670:	75fb      	strb	r3, [r7, #23]
 807b672:	e00a      	b.n	807b68a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 807b674:	68fb      	ldr	r3, [r7, #12]
 807b676:	2b02      	cmp	r3, #2
 807b678:	d002      	beq.n	807b680 <USB_GetDevSpeed+0x32>
 807b67a:	68fb      	ldr	r3, [r7, #12]
 807b67c:	2b06      	cmp	r3, #6
 807b67e:	d102      	bne.n	807b686 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 807b680:	2302      	movs	r3, #2
 807b682:	75fb      	strb	r3, [r7, #23]
 807b684:	e001      	b.n	807b68a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 807b686:	230f      	movs	r3, #15
 807b688:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 807b68a:	7dfb      	ldrb	r3, [r7, #23]
}
 807b68c:	4618      	mov	r0, r3
 807b68e:	371c      	adds	r7, #28
 807b690:	46bd      	mov	sp, r7
 807b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b696:	4770      	bx	lr

0807b698 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807b698:	b480      	push	{r7}
 807b69a:	b085      	sub	sp, #20
 807b69c:	af00      	add	r7, sp, #0
 807b69e:	6078      	str	r0, [r7, #4]
 807b6a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b6a2:	687b      	ldr	r3, [r7, #4]
 807b6a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807b6a6:	683b      	ldr	r3, [r7, #0]
 807b6a8:	781b      	ldrb	r3, [r3, #0]
 807b6aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807b6ac:	683b      	ldr	r3, [r7, #0]
 807b6ae:	785b      	ldrb	r3, [r3, #1]
 807b6b0:	2b01      	cmp	r3, #1
 807b6b2:	d13a      	bne.n	807b72a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 807b6b4:	68fb      	ldr	r3, [r7, #12]
 807b6b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b6ba:	69da      	ldr	r2, [r3, #28]
 807b6bc:	683b      	ldr	r3, [r7, #0]
 807b6be:	781b      	ldrb	r3, [r3, #0]
 807b6c0:	f003 030f 	and.w	r3, r3, #15
 807b6c4:	2101      	movs	r1, #1
 807b6c6:	fa01 f303 	lsl.w	r3, r1, r3
 807b6ca:	b29b      	uxth	r3, r3
 807b6cc:	68f9      	ldr	r1, [r7, #12]
 807b6ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 807b6d2:	4313      	orrs	r3, r2
 807b6d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 807b6d6:	68bb      	ldr	r3, [r7, #8]
 807b6d8:	015a      	lsls	r2, r3, #5
 807b6da:	68fb      	ldr	r3, [r7, #12]
 807b6dc:	4413      	add	r3, r2
 807b6de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b6e2:	681b      	ldr	r3, [r3, #0]
 807b6e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 807b6e8:	2b00      	cmp	r3, #0
 807b6ea:	d155      	bne.n	807b798 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b6ec:	68bb      	ldr	r3, [r7, #8]
 807b6ee:	015a      	lsls	r2, r3, #5
 807b6f0:	68fb      	ldr	r3, [r7, #12]
 807b6f2:	4413      	add	r3, r2
 807b6f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b6f8:	681a      	ldr	r2, [r3, #0]
 807b6fa:	683b      	ldr	r3, [r7, #0]
 807b6fc:	689b      	ldr	r3, [r3, #8]
 807b6fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 807b702:	683b      	ldr	r3, [r7, #0]
 807b704:	78db      	ldrb	r3, [r3, #3]
 807b706:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b708:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 807b70a:	68bb      	ldr	r3, [r7, #8]
 807b70c:	059b      	lsls	r3, r3, #22
 807b70e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b710:	4313      	orrs	r3, r2
 807b712:	68ba      	ldr	r2, [r7, #8]
 807b714:	0151      	lsls	r1, r2, #5
 807b716:	68fa      	ldr	r2, [r7, #12]
 807b718:	440a      	add	r2, r1
 807b71a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b71e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807b722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 807b726:	6013      	str	r3, [r2, #0]
 807b728:	e036      	b.n	807b798 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 807b72a:	68fb      	ldr	r3, [r7, #12]
 807b72c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b730:	69da      	ldr	r2, [r3, #28]
 807b732:	683b      	ldr	r3, [r7, #0]
 807b734:	781b      	ldrb	r3, [r3, #0]
 807b736:	f003 030f 	and.w	r3, r3, #15
 807b73a:	2101      	movs	r1, #1
 807b73c:	fa01 f303 	lsl.w	r3, r1, r3
 807b740:	041b      	lsls	r3, r3, #16
 807b742:	68f9      	ldr	r1, [r7, #12]
 807b744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 807b748:	4313      	orrs	r3, r2
 807b74a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 807b74c:	68bb      	ldr	r3, [r7, #8]
 807b74e:	015a      	lsls	r2, r3, #5
 807b750:	68fb      	ldr	r3, [r7, #12]
 807b752:	4413      	add	r3, r2
 807b754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b758:	681b      	ldr	r3, [r3, #0]
 807b75a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 807b75e:	2b00      	cmp	r3, #0
 807b760:	d11a      	bne.n	807b798 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 807b762:	68bb      	ldr	r3, [r7, #8]
 807b764:	015a      	lsls	r2, r3, #5
 807b766:	68fb      	ldr	r3, [r7, #12]
 807b768:	4413      	add	r3, r2
 807b76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807b76e:	681a      	ldr	r2, [r3, #0]
 807b770:	683b      	ldr	r3, [r7, #0]
 807b772:	689b      	ldr	r3, [r3, #8]
 807b774:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 807b778:	683b      	ldr	r3, [r7, #0]
 807b77a:	78db      	ldrb	r3, [r3, #3]
 807b77c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 807b77e:	430b      	orrs	r3, r1
 807b780:	4313      	orrs	r3, r2
 807b782:	68ba      	ldr	r2, [r7, #8]
 807b784:	0151      	lsls	r1, r2, #5
 807b786:	68fa      	ldr	r2, [r7, #12]
 807b788:	440a      	add	r2, r1
 807b78a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807b78e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807b792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 807b796:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 807b798:	2300      	movs	r3, #0
}
 807b79a:	4618      	mov	r0, r3
 807b79c:	3714      	adds	r7, #20
 807b79e:	46bd      	mov	sp, r7
 807b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b7a4:	4770      	bx	lr
	...

0807b7a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 807b7a8:	b580      	push	{r7, lr}
 807b7aa:	b08a      	sub	sp, #40	@ 0x28
 807b7ac:	af02      	add	r7, sp, #8
 807b7ae:	60f8      	str	r0, [r7, #12]
 807b7b0:	60b9      	str	r1, [r7, #8]
 807b7b2:	4613      	mov	r3, r2
 807b7b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b7b6:	68fb      	ldr	r3, [r7, #12]
 807b7b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 807b7ba:	68bb      	ldr	r3, [r7, #8]
 807b7bc:	781b      	ldrb	r3, [r3, #0]
 807b7be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 807b7c0:	68bb      	ldr	r3, [r7, #8]
 807b7c2:	785b      	ldrb	r3, [r3, #1]
 807b7c4:	2b01      	cmp	r3, #1
 807b7c6:	f040 815c 	bne.w	807ba82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 807b7ca:	68bb      	ldr	r3, [r7, #8]
 807b7cc:	695b      	ldr	r3, [r3, #20]
 807b7ce:	2b00      	cmp	r3, #0
 807b7d0:	d132      	bne.n	807b838 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807b7d2:	69bb      	ldr	r3, [r7, #24]
 807b7d4:	015a      	lsls	r2, r3, #5
 807b7d6:	69fb      	ldr	r3, [r7, #28]
 807b7d8:	4413      	add	r3, r2
 807b7da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b7de:	691b      	ldr	r3, [r3, #16]
 807b7e0:	69ba      	ldr	r2, [r7, #24]
 807b7e2:	0151      	lsls	r1, r2, #5
 807b7e4:	69fa      	ldr	r2, [r7, #28]
 807b7e6:	440a      	add	r2, r1
 807b7e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b7ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 807b7f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 807b7f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807b7f6:	69bb      	ldr	r3, [r7, #24]
 807b7f8:	015a      	lsls	r2, r3, #5
 807b7fa:	69fb      	ldr	r3, [r7, #28]
 807b7fc:	4413      	add	r3, r2
 807b7fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b802:	691b      	ldr	r3, [r3, #16]
 807b804:	69ba      	ldr	r2, [r7, #24]
 807b806:	0151      	lsls	r1, r2, #5
 807b808:	69fa      	ldr	r2, [r7, #28]
 807b80a:	440a      	add	r2, r1
 807b80c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 807b814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807b816:	69bb      	ldr	r3, [r7, #24]
 807b818:	015a      	lsls	r2, r3, #5
 807b81a:	69fb      	ldr	r3, [r7, #28]
 807b81c:	4413      	add	r3, r2
 807b81e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b822:	691b      	ldr	r3, [r3, #16]
 807b824:	69ba      	ldr	r2, [r7, #24]
 807b826:	0151      	lsls	r1, r2, #5
 807b828:	69fa      	ldr	r2, [r7, #28]
 807b82a:	440a      	add	r2, r1
 807b82c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b830:	0cdb      	lsrs	r3, r3, #19
 807b832:	04db      	lsls	r3, r3, #19
 807b834:	6113      	str	r3, [r2, #16]
 807b836:	e074      	b.n	807b922 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807b838:	69bb      	ldr	r3, [r7, #24]
 807b83a:	015a      	lsls	r2, r3, #5
 807b83c:	69fb      	ldr	r3, [r7, #28]
 807b83e:	4413      	add	r3, r2
 807b840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b844:	691b      	ldr	r3, [r3, #16]
 807b846:	69ba      	ldr	r2, [r7, #24]
 807b848:	0151      	lsls	r1, r2, #5
 807b84a:	69fa      	ldr	r2, [r7, #28]
 807b84c:	440a      	add	r2, r1
 807b84e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b852:	0cdb      	lsrs	r3, r3, #19
 807b854:	04db      	lsls	r3, r3, #19
 807b856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807b858:	69bb      	ldr	r3, [r7, #24]
 807b85a:	015a      	lsls	r2, r3, #5
 807b85c:	69fb      	ldr	r3, [r7, #28]
 807b85e:	4413      	add	r3, r2
 807b860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b864:	691b      	ldr	r3, [r3, #16]
 807b866:	69ba      	ldr	r2, [r7, #24]
 807b868:	0151      	lsls	r1, r2, #5
 807b86a:	69fa      	ldr	r2, [r7, #28]
 807b86c:	440a      	add	r2, r1
 807b86e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b872:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 807b876:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 807b87a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 807b87c:	69bb      	ldr	r3, [r7, #24]
 807b87e:	015a      	lsls	r2, r3, #5
 807b880:	69fb      	ldr	r3, [r7, #28]
 807b882:	4413      	add	r3, r2
 807b884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b888:	691a      	ldr	r2, [r3, #16]
 807b88a:	68bb      	ldr	r3, [r7, #8]
 807b88c:	6959      	ldr	r1, [r3, #20]
 807b88e:	68bb      	ldr	r3, [r7, #8]
 807b890:	689b      	ldr	r3, [r3, #8]
 807b892:	440b      	add	r3, r1
 807b894:	1e59      	subs	r1, r3, #1
 807b896:	68bb      	ldr	r3, [r7, #8]
 807b898:	689b      	ldr	r3, [r3, #8]
 807b89a:	fbb1 f3f3 	udiv	r3, r1, r3
 807b89e:	04d9      	lsls	r1, r3, #19
 807b8a0:	4b9d      	ldr	r3, [pc, #628]	@ (807bb18 <USB_EPStartXfer+0x370>)
 807b8a2:	400b      	ands	r3, r1
 807b8a4:	69b9      	ldr	r1, [r7, #24]
 807b8a6:	0148      	lsls	r0, r1, #5
 807b8a8:	69f9      	ldr	r1, [r7, #28]
 807b8aa:	4401      	add	r1, r0
 807b8ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 807b8b0:	4313      	orrs	r3, r2
 807b8b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 807b8b4:	69bb      	ldr	r3, [r7, #24]
 807b8b6:	015a      	lsls	r2, r3, #5
 807b8b8:	69fb      	ldr	r3, [r7, #28]
 807b8ba:	4413      	add	r3, r2
 807b8bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b8c0:	691a      	ldr	r2, [r3, #16]
 807b8c2:	68bb      	ldr	r3, [r7, #8]
 807b8c4:	695b      	ldr	r3, [r3, #20]
 807b8c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807b8ca:	69b9      	ldr	r1, [r7, #24]
 807b8cc:	0148      	lsls	r0, r1, #5
 807b8ce:	69f9      	ldr	r1, [r7, #28]
 807b8d0:	4401      	add	r1, r0
 807b8d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 807b8d6:	4313      	orrs	r3, r2
 807b8d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 807b8da:	68bb      	ldr	r3, [r7, #8]
 807b8dc:	78db      	ldrb	r3, [r3, #3]
 807b8de:	2b01      	cmp	r3, #1
 807b8e0:	d11f      	bne.n	807b922 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 807b8e2:	69bb      	ldr	r3, [r7, #24]
 807b8e4:	015a      	lsls	r2, r3, #5
 807b8e6:	69fb      	ldr	r3, [r7, #28]
 807b8e8:	4413      	add	r3, r2
 807b8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b8ee:	691b      	ldr	r3, [r3, #16]
 807b8f0:	69ba      	ldr	r2, [r7, #24]
 807b8f2:	0151      	lsls	r1, r2, #5
 807b8f4:	69fa      	ldr	r2, [r7, #28]
 807b8f6:	440a      	add	r2, r1
 807b8f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b8fc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 807b900:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 807b902:	69bb      	ldr	r3, [r7, #24]
 807b904:	015a      	lsls	r2, r3, #5
 807b906:	69fb      	ldr	r3, [r7, #28]
 807b908:	4413      	add	r3, r2
 807b90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b90e:	691b      	ldr	r3, [r3, #16]
 807b910:	69ba      	ldr	r2, [r7, #24]
 807b912:	0151      	lsls	r1, r2, #5
 807b914:	69fa      	ldr	r2, [r7, #28]
 807b916:	440a      	add	r2, r1
 807b918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b91c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 807b920:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 807b922:	79fb      	ldrb	r3, [r7, #7]
 807b924:	2b01      	cmp	r3, #1
 807b926:	d14b      	bne.n	807b9c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 807b928:	68bb      	ldr	r3, [r7, #8]
 807b92a:	691b      	ldr	r3, [r3, #16]
 807b92c:	2b00      	cmp	r3, #0
 807b92e:	d009      	beq.n	807b944 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 807b930:	69bb      	ldr	r3, [r7, #24]
 807b932:	015a      	lsls	r2, r3, #5
 807b934:	69fb      	ldr	r3, [r7, #28]
 807b936:	4413      	add	r3, r2
 807b938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b93c:	461a      	mov	r2, r3
 807b93e:	68bb      	ldr	r3, [r7, #8]
 807b940:	691b      	ldr	r3, [r3, #16]
 807b942:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 807b944:	68bb      	ldr	r3, [r7, #8]
 807b946:	78db      	ldrb	r3, [r3, #3]
 807b948:	2b01      	cmp	r3, #1
 807b94a:	d128      	bne.n	807b99e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807b94c:	69fb      	ldr	r3, [r7, #28]
 807b94e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b952:	689b      	ldr	r3, [r3, #8]
 807b954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 807b958:	2b00      	cmp	r3, #0
 807b95a:	d110      	bne.n	807b97e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 807b95c:	69bb      	ldr	r3, [r7, #24]
 807b95e:	015a      	lsls	r2, r3, #5
 807b960:	69fb      	ldr	r3, [r7, #28]
 807b962:	4413      	add	r3, r2
 807b964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b968:	681b      	ldr	r3, [r3, #0]
 807b96a:	69ba      	ldr	r2, [r7, #24]
 807b96c:	0151      	lsls	r1, r2, #5
 807b96e:	69fa      	ldr	r2, [r7, #28]
 807b970:	440a      	add	r2, r1
 807b972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b976:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 807b97a:	6013      	str	r3, [r2, #0]
 807b97c:	e00f      	b.n	807b99e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 807b97e:	69bb      	ldr	r3, [r7, #24]
 807b980:	015a      	lsls	r2, r3, #5
 807b982:	69fb      	ldr	r3, [r7, #28]
 807b984:	4413      	add	r3, r2
 807b986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b98a:	681b      	ldr	r3, [r3, #0]
 807b98c:	69ba      	ldr	r2, [r7, #24]
 807b98e:	0151      	lsls	r1, r2, #5
 807b990:	69fa      	ldr	r2, [r7, #28]
 807b992:	440a      	add	r2, r1
 807b994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807b99c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807b99e:	69bb      	ldr	r3, [r7, #24]
 807b9a0:	015a      	lsls	r2, r3, #5
 807b9a2:	69fb      	ldr	r3, [r7, #28]
 807b9a4:	4413      	add	r3, r2
 807b9a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b9aa:	681b      	ldr	r3, [r3, #0]
 807b9ac:	69ba      	ldr	r2, [r7, #24]
 807b9ae:	0151      	lsls	r1, r2, #5
 807b9b0:	69fa      	ldr	r2, [r7, #28]
 807b9b2:	440a      	add	r2, r1
 807b9b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b9b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 807b9bc:	6013      	str	r3, [r2, #0]
 807b9be:	e12f      	b.n	807bc20 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807b9c0:	69bb      	ldr	r3, [r7, #24]
 807b9c2:	015a      	lsls	r2, r3, #5
 807b9c4:	69fb      	ldr	r3, [r7, #28]
 807b9c6:	4413      	add	r3, r2
 807b9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807b9cc:	681b      	ldr	r3, [r3, #0]
 807b9ce:	69ba      	ldr	r2, [r7, #24]
 807b9d0:	0151      	lsls	r1, r2, #5
 807b9d2:	69fa      	ldr	r2, [r7, #28]
 807b9d4:	440a      	add	r2, r1
 807b9d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807b9da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 807b9de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 807b9e0:	68bb      	ldr	r3, [r7, #8]
 807b9e2:	78db      	ldrb	r3, [r3, #3]
 807b9e4:	2b01      	cmp	r3, #1
 807b9e6:	d015      	beq.n	807ba14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 807b9e8:	68bb      	ldr	r3, [r7, #8]
 807b9ea:	695b      	ldr	r3, [r3, #20]
 807b9ec:	2b00      	cmp	r3, #0
 807b9ee:	f000 8117 	beq.w	807bc20 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807b9f2:	69fb      	ldr	r3, [r7, #28]
 807b9f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807b9f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 807b9fa:	68bb      	ldr	r3, [r7, #8]
 807b9fc:	781b      	ldrb	r3, [r3, #0]
 807b9fe:	f003 030f 	and.w	r3, r3, #15
 807ba02:	2101      	movs	r1, #1
 807ba04:	fa01 f303 	lsl.w	r3, r1, r3
 807ba08:	69f9      	ldr	r1, [r7, #28]
 807ba0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 807ba0e:	4313      	orrs	r3, r2
 807ba10:	634b      	str	r3, [r1, #52]	@ 0x34
 807ba12:	e105      	b.n	807bc20 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807ba14:	69fb      	ldr	r3, [r7, #28]
 807ba16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807ba1a:	689b      	ldr	r3, [r3, #8]
 807ba1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 807ba20:	2b00      	cmp	r3, #0
 807ba22:	d110      	bne.n	807ba46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 807ba24:	69bb      	ldr	r3, [r7, #24]
 807ba26:	015a      	lsls	r2, r3, #5
 807ba28:	69fb      	ldr	r3, [r7, #28]
 807ba2a:	4413      	add	r3, r2
 807ba2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807ba30:	681b      	ldr	r3, [r3, #0]
 807ba32:	69ba      	ldr	r2, [r7, #24]
 807ba34:	0151      	lsls	r1, r2, #5
 807ba36:	69fa      	ldr	r2, [r7, #28]
 807ba38:	440a      	add	r2, r1
 807ba3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807ba3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 807ba42:	6013      	str	r3, [r2, #0]
 807ba44:	e00f      	b.n	807ba66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 807ba46:	69bb      	ldr	r3, [r7, #24]
 807ba48:	015a      	lsls	r2, r3, #5
 807ba4a:	69fb      	ldr	r3, [r7, #28]
 807ba4c:	4413      	add	r3, r2
 807ba4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807ba52:	681b      	ldr	r3, [r3, #0]
 807ba54:	69ba      	ldr	r2, [r7, #24]
 807ba56:	0151      	lsls	r1, r2, #5
 807ba58:	69fa      	ldr	r2, [r7, #28]
 807ba5a:	440a      	add	r2, r1
 807ba5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807ba60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807ba64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 807ba66:	68bb      	ldr	r3, [r7, #8]
 807ba68:	68d9      	ldr	r1, [r3, #12]
 807ba6a:	68bb      	ldr	r3, [r7, #8]
 807ba6c:	781a      	ldrb	r2, [r3, #0]
 807ba6e:	68bb      	ldr	r3, [r7, #8]
 807ba70:	695b      	ldr	r3, [r3, #20]
 807ba72:	b298      	uxth	r0, r3
 807ba74:	79fb      	ldrb	r3, [r7, #7]
 807ba76:	9300      	str	r3, [sp, #0]
 807ba78:	4603      	mov	r3, r0
 807ba7a:	68f8      	ldr	r0, [r7, #12]
 807ba7c:	f000 fa2b 	bl	807bed6 <USB_WritePacket>
 807ba80:	e0ce      	b.n	807bc20 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 807ba82:	69bb      	ldr	r3, [r7, #24]
 807ba84:	015a      	lsls	r2, r3, #5
 807ba86:	69fb      	ldr	r3, [r7, #28]
 807ba88:	4413      	add	r3, r2
 807ba8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807ba8e:	691b      	ldr	r3, [r3, #16]
 807ba90:	69ba      	ldr	r2, [r7, #24]
 807ba92:	0151      	lsls	r1, r2, #5
 807ba94:	69fa      	ldr	r2, [r7, #28]
 807ba96:	440a      	add	r2, r1
 807ba98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807ba9c:	0cdb      	lsrs	r3, r3, #19
 807ba9e:	04db      	lsls	r3, r3, #19
 807baa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807baa2:	69bb      	ldr	r3, [r7, #24]
 807baa4:	015a      	lsls	r2, r3, #5
 807baa6:	69fb      	ldr	r3, [r7, #28]
 807baa8:	4413      	add	r3, r2
 807baaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807baae:	691b      	ldr	r3, [r3, #16]
 807bab0:	69ba      	ldr	r2, [r7, #24]
 807bab2:	0151      	lsls	r1, r2, #5
 807bab4:	69fa      	ldr	r2, [r7, #28]
 807bab6:	440a      	add	r2, r1
 807bab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807babc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 807bac0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 807bac4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 807bac6:	68bb      	ldr	r3, [r7, #8]
 807bac8:	695b      	ldr	r3, [r3, #20]
 807baca:	2b00      	cmp	r3, #0
 807bacc:	d126      	bne.n	807bb1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 807bace:	69bb      	ldr	r3, [r7, #24]
 807bad0:	015a      	lsls	r2, r3, #5
 807bad2:	69fb      	ldr	r3, [r7, #28]
 807bad4:	4413      	add	r3, r2
 807bad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bada:	691a      	ldr	r2, [r3, #16]
 807badc:	68bb      	ldr	r3, [r7, #8]
 807bade:	689b      	ldr	r3, [r3, #8]
 807bae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bae4:	69b9      	ldr	r1, [r7, #24]
 807bae6:	0148      	lsls	r0, r1, #5
 807bae8:	69f9      	ldr	r1, [r7, #28]
 807baea:	4401      	add	r1, r0
 807baec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 807baf0:	4313      	orrs	r3, r2
 807baf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807baf4:	69bb      	ldr	r3, [r7, #24]
 807baf6:	015a      	lsls	r2, r3, #5
 807baf8:	69fb      	ldr	r3, [r7, #28]
 807bafa:	4413      	add	r3, r2
 807bafc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bb00:	691b      	ldr	r3, [r3, #16]
 807bb02:	69ba      	ldr	r2, [r7, #24]
 807bb04:	0151      	lsls	r1, r2, #5
 807bb06:	69fa      	ldr	r2, [r7, #28]
 807bb08:	440a      	add	r2, r1
 807bb0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807bb0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 807bb12:	6113      	str	r3, [r2, #16]
 807bb14:	e036      	b.n	807bb84 <USB_EPStartXfer+0x3dc>
 807bb16:	bf00      	nop
 807bb18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 807bb1c:	68bb      	ldr	r3, [r7, #8]
 807bb1e:	695a      	ldr	r2, [r3, #20]
 807bb20:	68bb      	ldr	r3, [r7, #8]
 807bb22:	689b      	ldr	r3, [r3, #8]
 807bb24:	4413      	add	r3, r2
 807bb26:	1e5a      	subs	r2, r3, #1
 807bb28:	68bb      	ldr	r3, [r7, #8]
 807bb2a:	689b      	ldr	r3, [r3, #8]
 807bb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 807bb30:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 807bb32:	69bb      	ldr	r3, [r7, #24]
 807bb34:	015a      	lsls	r2, r3, #5
 807bb36:	69fb      	ldr	r3, [r7, #28]
 807bb38:	4413      	add	r3, r2
 807bb3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bb3e:	691a      	ldr	r2, [r3, #16]
 807bb40:	8afb      	ldrh	r3, [r7, #22]
 807bb42:	04d9      	lsls	r1, r3, #19
 807bb44:	4b39      	ldr	r3, [pc, #228]	@ (807bc2c <USB_EPStartXfer+0x484>)
 807bb46:	400b      	ands	r3, r1
 807bb48:	69b9      	ldr	r1, [r7, #24]
 807bb4a:	0148      	lsls	r0, r1, #5
 807bb4c:	69f9      	ldr	r1, [r7, #28]
 807bb4e:	4401      	add	r1, r0
 807bb50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 807bb54:	4313      	orrs	r3, r2
 807bb56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 807bb58:	69bb      	ldr	r3, [r7, #24]
 807bb5a:	015a      	lsls	r2, r3, #5
 807bb5c:	69fb      	ldr	r3, [r7, #28]
 807bb5e:	4413      	add	r3, r2
 807bb60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bb64:	691a      	ldr	r2, [r3, #16]
 807bb66:	68bb      	ldr	r3, [r7, #8]
 807bb68:	689b      	ldr	r3, [r3, #8]
 807bb6a:	8af9      	ldrh	r1, [r7, #22]
 807bb6c:	fb01 f303 	mul.w	r3, r1, r3
 807bb70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bb74:	69b9      	ldr	r1, [r7, #24]
 807bb76:	0148      	lsls	r0, r1, #5
 807bb78:	69f9      	ldr	r1, [r7, #28]
 807bb7a:	4401      	add	r1, r0
 807bb7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 807bb80:	4313      	orrs	r3, r2
 807bb82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 807bb84:	79fb      	ldrb	r3, [r7, #7]
 807bb86:	2b01      	cmp	r3, #1
 807bb88:	d10d      	bne.n	807bba6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 807bb8a:	68bb      	ldr	r3, [r7, #8]
 807bb8c:	68db      	ldr	r3, [r3, #12]
 807bb8e:	2b00      	cmp	r3, #0
 807bb90:	d009      	beq.n	807bba6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 807bb92:	68bb      	ldr	r3, [r7, #8]
 807bb94:	68d9      	ldr	r1, [r3, #12]
 807bb96:	69bb      	ldr	r3, [r7, #24]
 807bb98:	015a      	lsls	r2, r3, #5
 807bb9a:	69fb      	ldr	r3, [r7, #28]
 807bb9c:	4413      	add	r3, r2
 807bb9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bba2:	460a      	mov	r2, r1
 807bba4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 807bba6:	68bb      	ldr	r3, [r7, #8]
 807bba8:	78db      	ldrb	r3, [r3, #3]
 807bbaa:	2b01      	cmp	r3, #1
 807bbac:	d128      	bne.n	807bc00 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807bbae:	69fb      	ldr	r3, [r7, #28]
 807bbb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807bbb4:	689b      	ldr	r3, [r3, #8]
 807bbb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 807bbba:	2b00      	cmp	r3, #0
 807bbbc:	d110      	bne.n	807bbe0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 807bbbe:	69bb      	ldr	r3, [r7, #24]
 807bbc0:	015a      	lsls	r2, r3, #5
 807bbc2:	69fb      	ldr	r3, [r7, #28]
 807bbc4:	4413      	add	r3, r2
 807bbc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bbca:	681b      	ldr	r3, [r3, #0]
 807bbcc:	69ba      	ldr	r2, [r7, #24]
 807bbce:	0151      	lsls	r1, r2, #5
 807bbd0:	69fa      	ldr	r2, [r7, #28]
 807bbd2:	440a      	add	r2, r1
 807bbd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807bbd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 807bbdc:	6013      	str	r3, [r2, #0]
 807bbde:	e00f      	b.n	807bc00 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 807bbe0:	69bb      	ldr	r3, [r7, #24]
 807bbe2:	015a      	lsls	r2, r3, #5
 807bbe4:	69fb      	ldr	r3, [r7, #28]
 807bbe6:	4413      	add	r3, r2
 807bbe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bbec:	681b      	ldr	r3, [r3, #0]
 807bbee:	69ba      	ldr	r2, [r7, #24]
 807bbf0:	0151      	lsls	r1, r2, #5
 807bbf2:	69fa      	ldr	r2, [r7, #28]
 807bbf4:	440a      	add	r2, r1
 807bbf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807bbfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807bbfe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807bc00:	69bb      	ldr	r3, [r7, #24]
 807bc02:	015a      	lsls	r2, r3, #5
 807bc04:	69fb      	ldr	r3, [r7, #28]
 807bc06:	4413      	add	r3, r2
 807bc08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bc0c:	681b      	ldr	r3, [r3, #0]
 807bc0e:	69ba      	ldr	r2, [r7, #24]
 807bc10:	0151      	lsls	r1, r2, #5
 807bc12:	69fa      	ldr	r2, [r7, #28]
 807bc14:	440a      	add	r2, r1
 807bc16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807bc1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 807bc1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807bc20:	2300      	movs	r3, #0
}
 807bc22:	4618      	mov	r0, r3
 807bc24:	3720      	adds	r7, #32
 807bc26:	46bd      	mov	sp, r7
 807bc28:	bd80      	pop	{r7, pc}
 807bc2a:	bf00      	nop
 807bc2c:	1ff80000 	.word	0x1ff80000

0807bc30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 807bc30:	b480      	push	{r7}
 807bc32:	b087      	sub	sp, #28
 807bc34:	af00      	add	r7, sp, #0
 807bc36:	60f8      	str	r0, [r7, #12]
 807bc38:	60b9      	str	r1, [r7, #8]
 807bc3a:	4613      	mov	r3, r2
 807bc3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bc3e:	68fb      	ldr	r3, [r7, #12]
 807bc40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 807bc42:	68bb      	ldr	r3, [r7, #8]
 807bc44:	781b      	ldrb	r3, [r3, #0]
 807bc46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 807bc48:	68bb      	ldr	r3, [r7, #8]
 807bc4a:	785b      	ldrb	r3, [r3, #1]
 807bc4c:	2b01      	cmp	r3, #1
 807bc4e:	f040 80cd 	bne.w	807bdec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 807bc52:	68bb      	ldr	r3, [r7, #8]
 807bc54:	695b      	ldr	r3, [r3, #20]
 807bc56:	2b00      	cmp	r3, #0
 807bc58:	d132      	bne.n	807bcc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807bc5a:	693b      	ldr	r3, [r7, #16]
 807bc5c:	015a      	lsls	r2, r3, #5
 807bc5e:	697b      	ldr	r3, [r7, #20]
 807bc60:	4413      	add	r3, r2
 807bc62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bc66:	691b      	ldr	r3, [r3, #16]
 807bc68:	693a      	ldr	r2, [r7, #16]
 807bc6a:	0151      	lsls	r1, r2, #5
 807bc6c:	697a      	ldr	r2, [r7, #20]
 807bc6e:	440a      	add	r2, r1
 807bc70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bc74:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 807bc78:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 807bc7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807bc7e:	693b      	ldr	r3, [r7, #16]
 807bc80:	015a      	lsls	r2, r3, #5
 807bc82:	697b      	ldr	r3, [r7, #20]
 807bc84:	4413      	add	r3, r2
 807bc86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bc8a:	691b      	ldr	r3, [r3, #16]
 807bc8c:	693a      	ldr	r2, [r7, #16]
 807bc8e:	0151      	lsls	r1, r2, #5
 807bc90:	697a      	ldr	r2, [r7, #20]
 807bc92:	440a      	add	r2, r1
 807bc94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bc98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 807bc9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807bc9e:	693b      	ldr	r3, [r7, #16]
 807bca0:	015a      	lsls	r2, r3, #5
 807bca2:	697b      	ldr	r3, [r7, #20]
 807bca4:	4413      	add	r3, r2
 807bca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bcaa:	691b      	ldr	r3, [r3, #16]
 807bcac:	693a      	ldr	r2, [r7, #16]
 807bcae:	0151      	lsls	r1, r2, #5
 807bcb0:	697a      	ldr	r2, [r7, #20]
 807bcb2:	440a      	add	r2, r1
 807bcb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bcb8:	0cdb      	lsrs	r3, r3, #19
 807bcba:	04db      	lsls	r3, r3, #19
 807bcbc:	6113      	str	r3, [r2, #16]
 807bcbe:	e04e      	b.n	807bd5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807bcc0:	693b      	ldr	r3, [r7, #16]
 807bcc2:	015a      	lsls	r2, r3, #5
 807bcc4:	697b      	ldr	r3, [r7, #20]
 807bcc6:	4413      	add	r3, r2
 807bcc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bccc:	691b      	ldr	r3, [r3, #16]
 807bcce:	693a      	ldr	r2, [r7, #16]
 807bcd0:	0151      	lsls	r1, r2, #5
 807bcd2:	697a      	ldr	r2, [r7, #20]
 807bcd4:	440a      	add	r2, r1
 807bcd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bcda:	0cdb      	lsrs	r3, r3, #19
 807bcdc:	04db      	lsls	r3, r3, #19
 807bcde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807bce0:	693b      	ldr	r3, [r7, #16]
 807bce2:	015a      	lsls	r2, r3, #5
 807bce4:	697b      	ldr	r3, [r7, #20]
 807bce6:	4413      	add	r3, r2
 807bce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bcec:	691b      	ldr	r3, [r3, #16]
 807bcee:	693a      	ldr	r2, [r7, #16]
 807bcf0:	0151      	lsls	r1, r2, #5
 807bcf2:	697a      	ldr	r2, [r7, #20]
 807bcf4:	440a      	add	r2, r1
 807bcf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bcfa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 807bcfe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 807bd02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 807bd04:	68bb      	ldr	r3, [r7, #8]
 807bd06:	695a      	ldr	r2, [r3, #20]
 807bd08:	68bb      	ldr	r3, [r7, #8]
 807bd0a:	689b      	ldr	r3, [r3, #8]
 807bd0c:	429a      	cmp	r2, r3
 807bd0e:	d903      	bls.n	807bd18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 807bd10:	68bb      	ldr	r3, [r7, #8]
 807bd12:	689a      	ldr	r2, [r3, #8]
 807bd14:	68bb      	ldr	r3, [r7, #8]
 807bd16:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807bd18:	693b      	ldr	r3, [r7, #16]
 807bd1a:	015a      	lsls	r2, r3, #5
 807bd1c:	697b      	ldr	r3, [r7, #20]
 807bd1e:	4413      	add	r3, r2
 807bd20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bd24:	691b      	ldr	r3, [r3, #16]
 807bd26:	693a      	ldr	r2, [r7, #16]
 807bd28:	0151      	lsls	r1, r2, #5
 807bd2a:	697a      	ldr	r2, [r7, #20]
 807bd2c:	440a      	add	r2, r1
 807bd2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bd32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 807bd36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 807bd38:	693b      	ldr	r3, [r7, #16]
 807bd3a:	015a      	lsls	r2, r3, #5
 807bd3c:	697b      	ldr	r3, [r7, #20]
 807bd3e:	4413      	add	r3, r2
 807bd40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bd44:	691a      	ldr	r2, [r3, #16]
 807bd46:	68bb      	ldr	r3, [r7, #8]
 807bd48:	695b      	ldr	r3, [r3, #20]
 807bd4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bd4e:	6939      	ldr	r1, [r7, #16]
 807bd50:	0148      	lsls	r0, r1, #5
 807bd52:	6979      	ldr	r1, [r7, #20]
 807bd54:	4401      	add	r1, r0
 807bd56:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 807bd5a:	4313      	orrs	r3, r2
 807bd5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 807bd5e:	79fb      	ldrb	r3, [r7, #7]
 807bd60:	2b01      	cmp	r3, #1
 807bd62:	d11e      	bne.n	807bda2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 807bd64:	68bb      	ldr	r3, [r7, #8]
 807bd66:	691b      	ldr	r3, [r3, #16]
 807bd68:	2b00      	cmp	r3, #0
 807bd6a:	d009      	beq.n	807bd80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 807bd6c:	693b      	ldr	r3, [r7, #16]
 807bd6e:	015a      	lsls	r2, r3, #5
 807bd70:	697b      	ldr	r3, [r7, #20]
 807bd72:	4413      	add	r3, r2
 807bd74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bd78:	461a      	mov	r2, r3
 807bd7a:	68bb      	ldr	r3, [r7, #8]
 807bd7c:	691b      	ldr	r3, [r3, #16]
 807bd7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807bd80:	693b      	ldr	r3, [r7, #16]
 807bd82:	015a      	lsls	r2, r3, #5
 807bd84:	697b      	ldr	r3, [r7, #20]
 807bd86:	4413      	add	r3, r2
 807bd88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bd8c:	681b      	ldr	r3, [r3, #0]
 807bd8e:	693a      	ldr	r2, [r7, #16]
 807bd90:	0151      	lsls	r1, r2, #5
 807bd92:	697a      	ldr	r2, [r7, #20]
 807bd94:	440a      	add	r2, r1
 807bd96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bd9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 807bd9e:	6013      	str	r3, [r2, #0]
 807bda0:	e092      	b.n	807bec8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807bda2:	693b      	ldr	r3, [r7, #16]
 807bda4:	015a      	lsls	r2, r3, #5
 807bda6:	697b      	ldr	r3, [r7, #20]
 807bda8:	4413      	add	r3, r2
 807bdaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bdae:	681b      	ldr	r3, [r3, #0]
 807bdb0:	693a      	ldr	r2, [r7, #16]
 807bdb2:	0151      	lsls	r1, r2, #5
 807bdb4:	697a      	ldr	r2, [r7, #20]
 807bdb6:	440a      	add	r2, r1
 807bdb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bdbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 807bdc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 807bdc2:	68bb      	ldr	r3, [r7, #8]
 807bdc4:	695b      	ldr	r3, [r3, #20]
 807bdc6:	2b00      	cmp	r3, #0
 807bdc8:	d07e      	beq.n	807bec8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807bdca:	697b      	ldr	r3, [r7, #20]
 807bdcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807bdd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 807bdd2:	68bb      	ldr	r3, [r7, #8]
 807bdd4:	781b      	ldrb	r3, [r3, #0]
 807bdd6:	f003 030f 	and.w	r3, r3, #15
 807bdda:	2101      	movs	r1, #1
 807bddc:	fa01 f303 	lsl.w	r3, r1, r3
 807bde0:	6979      	ldr	r1, [r7, #20]
 807bde2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 807bde6:	4313      	orrs	r3, r2
 807bde8:	634b      	str	r3, [r1, #52]	@ 0x34
 807bdea:	e06d      	b.n	807bec8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 807bdec:	693b      	ldr	r3, [r7, #16]
 807bdee:	015a      	lsls	r2, r3, #5
 807bdf0:	697b      	ldr	r3, [r7, #20]
 807bdf2:	4413      	add	r3, r2
 807bdf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bdf8:	691b      	ldr	r3, [r3, #16]
 807bdfa:	693a      	ldr	r2, [r7, #16]
 807bdfc:	0151      	lsls	r1, r2, #5
 807bdfe:	697a      	ldr	r2, [r7, #20]
 807be00:	440a      	add	r2, r1
 807be02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807be06:	0cdb      	lsrs	r3, r3, #19
 807be08:	04db      	lsls	r3, r3, #19
 807be0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807be0c:	693b      	ldr	r3, [r7, #16]
 807be0e:	015a      	lsls	r2, r3, #5
 807be10:	697b      	ldr	r3, [r7, #20]
 807be12:	4413      	add	r3, r2
 807be14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807be18:	691b      	ldr	r3, [r3, #16]
 807be1a:	693a      	ldr	r2, [r7, #16]
 807be1c:	0151      	lsls	r1, r2, #5
 807be1e:	697a      	ldr	r2, [r7, #20]
 807be20:	440a      	add	r2, r1
 807be22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807be26:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 807be2a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 807be2e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 807be30:	68bb      	ldr	r3, [r7, #8]
 807be32:	695b      	ldr	r3, [r3, #20]
 807be34:	2b00      	cmp	r3, #0
 807be36:	d003      	beq.n	807be40 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 807be38:	68bb      	ldr	r3, [r7, #8]
 807be3a:	689a      	ldr	r2, [r3, #8]
 807be3c:	68bb      	ldr	r3, [r7, #8]
 807be3e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807be40:	693b      	ldr	r3, [r7, #16]
 807be42:	015a      	lsls	r2, r3, #5
 807be44:	697b      	ldr	r3, [r7, #20]
 807be46:	4413      	add	r3, r2
 807be48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807be4c:	691b      	ldr	r3, [r3, #16]
 807be4e:	693a      	ldr	r2, [r7, #16]
 807be50:	0151      	lsls	r1, r2, #5
 807be52:	697a      	ldr	r2, [r7, #20]
 807be54:	440a      	add	r2, r1
 807be56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807be5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 807be5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 807be60:	693b      	ldr	r3, [r7, #16]
 807be62:	015a      	lsls	r2, r3, #5
 807be64:	697b      	ldr	r3, [r7, #20]
 807be66:	4413      	add	r3, r2
 807be68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807be6c:	691a      	ldr	r2, [r3, #16]
 807be6e:	68bb      	ldr	r3, [r7, #8]
 807be70:	689b      	ldr	r3, [r3, #8]
 807be72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807be76:	6939      	ldr	r1, [r7, #16]
 807be78:	0148      	lsls	r0, r1, #5
 807be7a:	6979      	ldr	r1, [r7, #20]
 807be7c:	4401      	add	r1, r0
 807be7e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 807be82:	4313      	orrs	r3, r2
 807be84:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 807be86:	79fb      	ldrb	r3, [r7, #7]
 807be88:	2b01      	cmp	r3, #1
 807be8a:	d10d      	bne.n	807bea8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 807be8c:	68bb      	ldr	r3, [r7, #8]
 807be8e:	68db      	ldr	r3, [r3, #12]
 807be90:	2b00      	cmp	r3, #0
 807be92:	d009      	beq.n	807bea8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 807be94:	68bb      	ldr	r3, [r7, #8]
 807be96:	68d9      	ldr	r1, [r3, #12]
 807be98:	693b      	ldr	r3, [r7, #16]
 807be9a:	015a      	lsls	r2, r3, #5
 807be9c:	697b      	ldr	r3, [r7, #20]
 807be9e:	4413      	add	r3, r2
 807bea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807bea4:	460a      	mov	r2, r1
 807bea6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807bea8:	693b      	ldr	r3, [r7, #16]
 807beaa:	015a      	lsls	r2, r3, #5
 807beac:	697b      	ldr	r3, [r7, #20]
 807beae:	4413      	add	r3, r2
 807beb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807beb4:	681b      	ldr	r3, [r3, #0]
 807beb6:	693a      	ldr	r2, [r7, #16]
 807beb8:	0151      	lsls	r1, r2, #5
 807beba:	697a      	ldr	r2, [r7, #20]
 807bebc:	440a      	add	r2, r1
 807bebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807bec2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 807bec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807bec8:	2300      	movs	r3, #0
}
 807beca:	4618      	mov	r0, r3
 807becc:	371c      	adds	r7, #28
 807bece:	46bd      	mov	sp, r7
 807bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bed4:	4770      	bx	lr

0807bed6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 807bed6:	b480      	push	{r7}
 807bed8:	b089      	sub	sp, #36	@ 0x24
 807beda:	af00      	add	r7, sp, #0
 807bedc:	60f8      	str	r0, [r7, #12]
 807bede:	60b9      	str	r1, [r7, #8]
 807bee0:	4611      	mov	r1, r2
 807bee2:	461a      	mov	r2, r3
 807bee4:	460b      	mov	r3, r1
 807bee6:	71fb      	strb	r3, [r7, #7]
 807bee8:	4613      	mov	r3, r2
 807beea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807beec:	68fb      	ldr	r3, [r7, #12]
 807beee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 807bef0:	68bb      	ldr	r3, [r7, #8]
 807bef2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 807bef4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 807bef8:	2b00      	cmp	r3, #0
 807befa:	d11a      	bne.n	807bf32 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 807befc:	88bb      	ldrh	r3, [r7, #4]
 807befe:	3303      	adds	r3, #3
 807bf00:	089b      	lsrs	r3, r3, #2
 807bf02:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 807bf04:	2300      	movs	r3, #0
 807bf06:	61bb      	str	r3, [r7, #24]
 807bf08:	e00f      	b.n	807bf2a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 807bf0a:	79fb      	ldrb	r3, [r7, #7]
 807bf0c:	031a      	lsls	r2, r3, #12
 807bf0e:	697b      	ldr	r3, [r7, #20]
 807bf10:	4413      	add	r3, r2
 807bf12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 807bf16:	461a      	mov	r2, r3
 807bf18:	69fb      	ldr	r3, [r7, #28]
 807bf1a:	681b      	ldr	r3, [r3, #0]
 807bf1c:	6013      	str	r3, [r2, #0]
      pSrc++;
 807bf1e:	69fb      	ldr	r3, [r7, #28]
 807bf20:	3304      	adds	r3, #4
 807bf22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 807bf24:	69bb      	ldr	r3, [r7, #24]
 807bf26:	3301      	adds	r3, #1
 807bf28:	61bb      	str	r3, [r7, #24]
 807bf2a:	69ba      	ldr	r2, [r7, #24]
 807bf2c:	693b      	ldr	r3, [r7, #16]
 807bf2e:	429a      	cmp	r2, r3
 807bf30:	d3eb      	bcc.n	807bf0a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 807bf32:	2300      	movs	r3, #0
}
 807bf34:	4618      	mov	r0, r3
 807bf36:	3724      	adds	r7, #36	@ 0x24
 807bf38:	46bd      	mov	sp, r7
 807bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bf3e:	4770      	bx	lr

0807bf40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 807bf40:	b480      	push	{r7}
 807bf42:	b089      	sub	sp, #36	@ 0x24
 807bf44:	af00      	add	r7, sp, #0
 807bf46:	60f8      	str	r0, [r7, #12]
 807bf48:	60b9      	str	r1, [r7, #8]
 807bf4a:	4613      	mov	r3, r2
 807bf4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bf4e:	68fb      	ldr	r3, [r7, #12]
 807bf50:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 807bf52:	68bb      	ldr	r3, [r7, #8]
 807bf54:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 807bf56:	88fb      	ldrh	r3, [r7, #6]
 807bf58:	3303      	adds	r3, #3
 807bf5a:	089b      	lsrs	r3, r3, #2
 807bf5c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 807bf5e:	2300      	movs	r3, #0
 807bf60:	61bb      	str	r3, [r7, #24]
 807bf62:	e00b      	b.n	807bf7c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 807bf64:	697b      	ldr	r3, [r7, #20]
 807bf66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 807bf6a:	681a      	ldr	r2, [r3, #0]
 807bf6c:	69fb      	ldr	r3, [r7, #28]
 807bf6e:	601a      	str	r2, [r3, #0]
    pDest++;
 807bf70:	69fb      	ldr	r3, [r7, #28]
 807bf72:	3304      	adds	r3, #4
 807bf74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 807bf76:	69bb      	ldr	r3, [r7, #24]
 807bf78:	3301      	adds	r3, #1
 807bf7a:	61bb      	str	r3, [r7, #24]
 807bf7c:	69ba      	ldr	r2, [r7, #24]
 807bf7e:	693b      	ldr	r3, [r7, #16]
 807bf80:	429a      	cmp	r2, r3
 807bf82:	d3ef      	bcc.n	807bf64 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 807bf84:	69fb      	ldr	r3, [r7, #28]
}
 807bf86:	4618      	mov	r0, r3
 807bf88:	3724      	adds	r7, #36	@ 0x24
 807bf8a:	46bd      	mov	sp, r7
 807bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bf90:	4770      	bx	lr

0807bf92 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807bf92:	b480      	push	{r7}
 807bf94:	b085      	sub	sp, #20
 807bf96:	af00      	add	r7, sp, #0
 807bf98:	6078      	str	r0, [r7, #4]
 807bf9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bf9c:	687b      	ldr	r3, [r7, #4]
 807bf9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807bfa0:	683b      	ldr	r3, [r7, #0]
 807bfa2:	781b      	ldrb	r3, [r3, #0]
 807bfa4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807bfa6:	683b      	ldr	r3, [r7, #0]
 807bfa8:	785b      	ldrb	r3, [r3, #1]
 807bfaa:	2b01      	cmp	r3, #1
 807bfac:	d12c      	bne.n	807c008 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 807bfae:	68bb      	ldr	r3, [r7, #8]
 807bfb0:	015a      	lsls	r2, r3, #5
 807bfb2:	68fb      	ldr	r3, [r7, #12]
 807bfb4:	4413      	add	r3, r2
 807bfb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bfba:	681b      	ldr	r3, [r3, #0]
 807bfbc:	2b00      	cmp	r3, #0
 807bfbe:	db12      	blt.n	807bfe6 <USB_EPSetStall+0x54>
 807bfc0:	68bb      	ldr	r3, [r7, #8]
 807bfc2:	2b00      	cmp	r3, #0
 807bfc4:	d00f      	beq.n	807bfe6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 807bfc6:	68bb      	ldr	r3, [r7, #8]
 807bfc8:	015a      	lsls	r2, r3, #5
 807bfca:	68fb      	ldr	r3, [r7, #12]
 807bfcc:	4413      	add	r3, r2
 807bfce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bfd2:	681b      	ldr	r3, [r3, #0]
 807bfd4:	68ba      	ldr	r2, [r7, #8]
 807bfd6:	0151      	lsls	r1, r2, #5
 807bfd8:	68fa      	ldr	r2, [r7, #12]
 807bfda:	440a      	add	r2, r1
 807bfdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807bfe0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 807bfe4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 807bfe6:	68bb      	ldr	r3, [r7, #8]
 807bfe8:	015a      	lsls	r2, r3, #5
 807bfea:	68fb      	ldr	r3, [r7, #12]
 807bfec:	4413      	add	r3, r2
 807bfee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807bff2:	681b      	ldr	r3, [r3, #0]
 807bff4:	68ba      	ldr	r2, [r7, #8]
 807bff6:	0151      	lsls	r1, r2, #5
 807bff8:	68fa      	ldr	r2, [r7, #12]
 807bffa:	440a      	add	r2, r1
 807bffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807c000:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 807c004:	6013      	str	r3, [r2, #0]
 807c006:	e02b      	b.n	807c060 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 807c008:	68bb      	ldr	r3, [r7, #8]
 807c00a:	015a      	lsls	r2, r3, #5
 807c00c:	68fb      	ldr	r3, [r7, #12]
 807c00e:	4413      	add	r3, r2
 807c010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c014:	681b      	ldr	r3, [r3, #0]
 807c016:	2b00      	cmp	r3, #0
 807c018:	db12      	blt.n	807c040 <USB_EPSetStall+0xae>
 807c01a:	68bb      	ldr	r3, [r7, #8]
 807c01c:	2b00      	cmp	r3, #0
 807c01e:	d00f      	beq.n	807c040 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 807c020:	68bb      	ldr	r3, [r7, #8]
 807c022:	015a      	lsls	r2, r3, #5
 807c024:	68fb      	ldr	r3, [r7, #12]
 807c026:	4413      	add	r3, r2
 807c028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c02c:	681b      	ldr	r3, [r3, #0]
 807c02e:	68ba      	ldr	r2, [r7, #8]
 807c030:	0151      	lsls	r1, r2, #5
 807c032:	68fa      	ldr	r2, [r7, #12]
 807c034:	440a      	add	r2, r1
 807c036:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c03a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 807c03e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 807c040:	68bb      	ldr	r3, [r7, #8]
 807c042:	015a      	lsls	r2, r3, #5
 807c044:	68fb      	ldr	r3, [r7, #12]
 807c046:	4413      	add	r3, r2
 807c048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c04c:	681b      	ldr	r3, [r3, #0]
 807c04e:	68ba      	ldr	r2, [r7, #8]
 807c050:	0151      	lsls	r1, r2, #5
 807c052:	68fa      	ldr	r2, [r7, #12]
 807c054:	440a      	add	r2, r1
 807c056:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c05a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 807c05e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807c060:	2300      	movs	r3, #0
}
 807c062:	4618      	mov	r0, r3
 807c064:	3714      	adds	r7, #20
 807c066:	46bd      	mov	sp, r7
 807c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c06c:	4770      	bx	lr

0807c06e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807c06e:	b480      	push	{r7}
 807c070:	b085      	sub	sp, #20
 807c072:	af00      	add	r7, sp, #0
 807c074:	6078      	str	r0, [r7, #4]
 807c076:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c078:	687b      	ldr	r3, [r7, #4]
 807c07a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807c07c:	683b      	ldr	r3, [r7, #0]
 807c07e:	781b      	ldrb	r3, [r3, #0]
 807c080:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807c082:	683b      	ldr	r3, [r7, #0]
 807c084:	785b      	ldrb	r3, [r3, #1]
 807c086:	2b01      	cmp	r3, #1
 807c088:	d128      	bne.n	807c0dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 807c08a:	68bb      	ldr	r3, [r7, #8]
 807c08c:	015a      	lsls	r2, r3, #5
 807c08e:	68fb      	ldr	r3, [r7, #12]
 807c090:	4413      	add	r3, r2
 807c092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807c096:	681b      	ldr	r3, [r3, #0]
 807c098:	68ba      	ldr	r2, [r7, #8]
 807c09a:	0151      	lsls	r1, r2, #5
 807c09c:	68fa      	ldr	r2, [r7, #12]
 807c09e:	440a      	add	r2, r1
 807c0a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807c0a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 807c0a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 807c0aa:	683b      	ldr	r3, [r7, #0]
 807c0ac:	78db      	ldrb	r3, [r3, #3]
 807c0ae:	2b03      	cmp	r3, #3
 807c0b0:	d003      	beq.n	807c0ba <USB_EPClearStall+0x4c>
 807c0b2:	683b      	ldr	r3, [r7, #0]
 807c0b4:	78db      	ldrb	r3, [r3, #3]
 807c0b6:	2b02      	cmp	r3, #2
 807c0b8:	d138      	bne.n	807c12c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 807c0ba:	68bb      	ldr	r3, [r7, #8]
 807c0bc:	015a      	lsls	r2, r3, #5
 807c0be:	68fb      	ldr	r3, [r7, #12]
 807c0c0:	4413      	add	r3, r2
 807c0c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807c0c6:	681b      	ldr	r3, [r3, #0]
 807c0c8:	68ba      	ldr	r2, [r7, #8]
 807c0ca:	0151      	lsls	r1, r2, #5
 807c0cc:	68fa      	ldr	r2, [r7, #12]
 807c0ce:	440a      	add	r2, r1
 807c0d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807c0d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807c0d8:	6013      	str	r3, [r2, #0]
 807c0da:	e027      	b.n	807c12c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 807c0dc:	68bb      	ldr	r3, [r7, #8]
 807c0de:	015a      	lsls	r2, r3, #5
 807c0e0:	68fb      	ldr	r3, [r7, #12]
 807c0e2:	4413      	add	r3, r2
 807c0e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c0e8:	681b      	ldr	r3, [r3, #0]
 807c0ea:	68ba      	ldr	r2, [r7, #8]
 807c0ec:	0151      	lsls	r1, r2, #5
 807c0ee:	68fa      	ldr	r2, [r7, #12]
 807c0f0:	440a      	add	r2, r1
 807c0f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c0f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 807c0fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 807c0fc:	683b      	ldr	r3, [r7, #0]
 807c0fe:	78db      	ldrb	r3, [r3, #3]
 807c100:	2b03      	cmp	r3, #3
 807c102:	d003      	beq.n	807c10c <USB_EPClearStall+0x9e>
 807c104:	683b      	ldr	r3, [r7, #0]
 807c106:	78db      	ldrb	r3, [r3, #3]
 807c108:	2b02      	cmp	r3, #2
 807c10a:	d10f      	bne.n	807c12c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 807c10c:	68bb      	ldr	r3, [r7, #8]
 807c10e:	015a      	lsls	r2, r3, #5
 807c110:	68fb      	ldr	r3, [r7, #12]
 807c112:	4413      	add	r3, r2
 807c114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c118:	681b      	ldr	r3, [r3, #0]
 807c11a:	68ba      	ldr	r2, [r7, #8]
 807c11c:	0151      	lsls	r1, r2, #5
 807c11e:	68fa      	ldr	r2, [r7, #12]
 807c120:	440a      	add	r2, r1
 807c122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 807c12a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 807c12c:	2300      	movs	r3, #0
}
 807c12e:	4618      	mov	r0, r3
 807c130:	3714      	adds	r7, #20
 807c132:	46bd      	mov	sp, r7
 807c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c138:	4770      	bx	lr

0807c13a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 807c13a:	b480      	push	{r7}
 807c13c:	b085      	sub	sp, #20
 807c13e:	af00      	add	r7, sp, #0
 807c140:	6078      	str	r0, [r7, #4]
 807c142:	460b      	mov	r3, r1
 807c144:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c146:	687b      	ldr	r3, [r7, #4]
 807c148:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 807c14a:	68fb      	ldr	r3, [r7, #12]
 807c14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c150:	681b      	ldr	r3, [r3, #0]
 807c152:	68fa      	ldr	r2, [r7, #12]
 807c154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 807c158:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 807c15c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 807c15e:	68fb      	ldr	r3, [r7, #12]
 807c160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c164:	681a      	ldr	r2, [r3, #0]
 807c166:	78fb      	ldrb	r3, [r7, #3]
 807c168:	011b      	lsls	r3, r3, #4
 807c16a:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 807c16e:	68f9      	ldr	r1, [r7, #12]
 807c170:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 807c174:	4313      	orrs	r3, r2
 807c176:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 807c178:	2300      	movs	r3, #0
}
 807c17a:	4618      	mov	r0, r3
 807c17c:	3714      	adds	r7, #20
 807c17e:	46bd      	mov	sp, r7
 807c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c184:	4770      	bx	lr

0807c186 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 807c186:	b480      	push	{r7}
 807c188:	b085      	sub	sp, #20
 807c18a:	af00      	add	r7, sp, #0
 807c18c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c18e:	687b      	ldr	r3, [r7, #4]
 807c190:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 807c192:	68fb      	ldr	r3, [r7, #12]
 807c194:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 807c198:	681b      	ldr	r3, [r3, #0]
 807c19a:	68fa      	ldr	r2, [r7, #12]
 807c19c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 807c1a0:	f023 0303 	bic.w	r3, r3, #3
 807c1a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 807c1a6:	68fb      	ldr	r3, [r7, #12]
 807c1a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c1ac:	685b      	ldr	r3, [r3, #4]
 807c1ae:	68fa      	ldr	r2, [r7, #12]
 807c1b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 807c1b4:	f023 0302 	bic.w	r3, r3, #2
 807c1b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c1ba:	2300      	movs	r3, #0
}
 807c1bc:	4618      	mov	r0, r3
 807c1be:	3714      	adds	r7, #20
 807c1c0:	46bd      	mov	sp, r7
 807c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c1c6:	4770      	bx	lr

0807c1c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 807c1c8:	b480      	push	{r7}
 807c1ca:	b085      	sub	sp, #20
 807c1cc:	af00      	add	r7, sp, #0
 807c1ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c1d0:	687b      	ldr	r3, [r7, #4]
 807c1d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 807c1d4:	68fb      	ldr	r3, [r7, #12]
 807c1d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 807c1da:	681b      	ldr	r3, [r3, #0]
 807c1dc:	68fa      	ldr	r2, [r7, #12]
 807c1de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 807c1e2:	f023 0303 	bic.w	r3, r3, #3
 807c1e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 807c1e8:	68fb      	ldr	r3, [r7, #12]
 807c1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c1ee:	685b      	ldr	r3, [r3, #4]
 807c1f0:	68fa      	ldr	r2, [r7, #12]
 807c1f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 807c1f6:	f043 0302 	orr.w	r3, r3, #2
 807c1fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c1fc:	2300      	movs	r3, #0
}
 807c1fe:	4618      	mov	r0, r3
 807c200:	3714      	adds	r7, #20
 807c202:	46bd      	mov	sp, r7
 807c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c208:	4770      	bx	lr

0807c20a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 807c20a:	b480      	push	{r7}
 807c20c:	b085      	sub	sp, #20
 807c20e:	af00      	add	r7, sp, #0
 807c210:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 807c212:	687b      	ldr	r3, [r7, #4]
 807c214:	695b      	ldr	r3, [r3, #20]
 807c216:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 807c218:	687b      	ldr	r3, [r7, #4]
 807c21a:	699b      	ldr	r3, [r3, #24]
 807c21c:	68fa      	ldr	r2, [r7, #12]
 807c21e:	4013      	ands	r3, r2
 807c220:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 807c222:	68fb      	ldr	r3, [r7, #12]
}
 807c224:	4618      	mov	r0, r3
 807c226:	3714      	adds	r7, #20
 807c228:	46bd      	mov	sp, r7
 807c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c22e:	4770      	bx	lr

0807c230 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 807c230:	b480      	push	{r7}
 807c232:	b085      	sub	sp, #20
 807c234:	af00      	add	r7, sp, #0
 807c236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c238:	687b      	ldr	r3, [r7, #4]
 807c23a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 807c23c:	68fb      	ldr	r3, [r7, #12]
 807c23e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c242:	699b      	ldr	r3, [r3, #24]
 807c244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 807c246:	68fb      	ldr	r3, [r7, #12]
 807c248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c24c:	69db      	ldr	r3, [r3, #28]
 807c24e:	68ba      	ldr	r2, [r7, #8]
 807c250:	4013      	ands	r3, r2
 807c252:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 807c254:	68bb      	ldr	r3, [r7, #8]
 807c256:	0c1b      	lsrs	r3, r3, #16
}
 807c258:	4618      	mov	r0, r3
 807c25a:	3714      	adds	r7, #20
 807c25c:	46bd      	mov	sp, r7
 807c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c262:	4770      	bx	lr

0807c264 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 807c264:	b480      	push	{r7}
 807c266:	b085      	sub	sp, #20
 807c268:	af00      	add	r7, sp, #0
 807c26a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c26c:	687b      	ldr	r3, [r7, #4]
 807c26e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 807c270:	68fb      	ldr	r3, [r7, #12]
 807c272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c276:	699b      	ldr	r3, [r3, #24]
 807c278:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 807c27a:	68fb      	ldr	r3, [r7, #12]
 807c27c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c280:	69db      	ldr	r3, [r3, #28]
 807c282:	68ba      	ldr	r2, [r7, #8]
 807c284:	4013      	ands	r3, r2
 807c286:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 807c288:	68bb      	ldr	r3, [r7, #8]
 807c28a:	b29b      	uxth	r3, r3
}
 807c28c:	4618      	mov	r0, r3
 807c28e:	3714      	adds	r7, #20
 807c290:	46bd      	mov	sp, r7
 807c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c296:	4770      	bx	lr

0807c298 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 807c298:	b480      	push	{r7}
 807c29a:	b085      	sub	sp, #20
 807c29c:	af00      	add	r7, sp, #0
 807c29e:	6078      	str	r0, [r7, #4]
 807c2a0:	460b      	mov	r3, r1
 807c2a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c2a4:	687b      	ldr	r3, [r7, #4]
 807c2a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 807c2a8:	78fb      	ldrb	r3, [r7, #3]
 807c2aa:	015a      	lsls	r2, r3, #5
 807c2ac:	68fb      	ldr	r3, [r7, #12]
 807c2ae:	4413      	add	r3, r2
 807c2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c2b4:	689b      	ldr	r3, [r3, #8]
 807c2b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 807c2b8:	68fb      	ldr	r3, [r7, #12]
 807c2ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c2be:	695b      	ldr	r3, [r3, #20]
 807c2c0:	68ba      	ldr	r2, [r7, #8]
 807c2c2:	4013      	ands	r3, r2
 807c2c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 807c2c6:	68bb      	ldr	r3, [r7, #8]
}
 807c2c8:	4618      	mov	r0, r3
 807c2ca:	3714      	adds	r7, #20
 807c2cc:	46bd      	mov	sp, r7
 807c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c2d2:	4770      	bx	lr

0807c2d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 807c2d4:	b480      	push	{r7}
 807c2d6:	b087      	sub	sp, #28
 807c2d8:	af00      	add	r7, sp, #0
 807c2da:	6078      	str	r0, [r7, #4]
 807c2dc:	460b      	mov	r3, r1
 807c2de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c2e0:	687b      	ldr	r3, [r7, #4]
 807c2e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 807c2e4:	697b      	ldr	r3, [r7, #20]
 807c2e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c2ea:	691b      	ldr	r3, [r3, #16]
 807c2ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 807c2ee:	697b      	ldr	r3, [r7, #20]
 807c2f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 807c2f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 807c2f8:	78fb      	ldrb	r3, [r7, #3]
 807c2fa:	f003 030f 	and.w	r3, r3, #15
 807c2fe:	68fa      	ldr	r2, [r7, #12]
 807c300:	fa22 f303 	lsr.w	r3, r2, r3
 807c304:	01db      	lsls	r3, r3, #7
 807c306:	b2db      	uxtb	r3, r3
 807c308:	693a      	ldr	r2, [r7, #16]
 807c30a:	4313      	orrs	r3, r2
 807c30c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 807c30e:	78fb      	ldrb	r3, [r7, #3]
 807c310:	015a      	lsls	r2, r3, #5
 807c312:	697b      	ldr	r3, [r7, #20]
 807c314:	4413      	add	r3, r2
 807c316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807c31a:	689b      	ldr	r3, [r3, #8]
 807c31c:	693a      	ldr	r2, [r7, #16]
 807c31e:	4013      	ands	r3, r2
 807c320:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 807c322:	68bb      	ldr	r3, [r7, #8]
}
 807c324:	4618      	mov	r0, r3
 807c326:	371c      	adds	r7, #28
 807c328:	46bd      	mov	sp, r7
 807c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c32e:	4770      	bx	lr

0807c330 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 807c330:	b480      	push	{r7}
 807c332:	b083      	sub	sp, #12
 807c334:	af00      	add	r7, sp, #0
 807c336:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 807c338:	687b      	ldr	r3, [r7, #4]
 807c33a:	695b      	ldr	r3, [r3, #20]
 807c33c:	f003 0301 	and.w	r3, r3, #1
}
 807c340:	4618      	mov	r0, r3
 807c342:	370c      	adds	r7, #12
 807c344:	46bd      	mov	sp, r7
 807c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c34a:	4770      	bx	lr

0807c34c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 807c34c:	b480      	push	{r7}
 807c34e:	b085      	sub	sp, #20
 807c350:	af00      	add	r7, sp, #0
 807c352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c354:	687b      	ldr	r3, [r7, #4]
 807c356:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 807c358:	68fb      	ldr	r3, [r7, #12]
 807c35a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 807c35e:	681b      	ldr	r3, [r3, #0]
 807c360:	68fa      	ldr	r2, [r7, #12]
 807c362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 807c366:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 807c36a:	f023 0307 	bic.w	r3, r3, #7
 807c36e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 807c370:	68fb      	ldr	r3, [r7, #12]
 807c372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 807c376:	685b      	ldr	r3, [r3, #4]
 807c378:	68fa      	ldr	r2, [r7, #12]
 807c37a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 807c37e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 807c382:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c384:	2300      	movs	r3, #0
}
 807c386:	4618      	mov	r0, r3
 807c388:	3714      	adds	r7, #20
 807c38a:	46bd      	mov	sp, r7
 807c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c390:	4770      	bx	lr
	...

0807c394 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 807c394:	b480      	push	{r7}
 807c396:	b087      	sub	sp, #28
 807c398:	af00      	add	r7, sp, #0
 807c39a:	60f8      	str	r0, [r7, #12]
 807c39c:	460b      	mov	r3, r1
 807c39e:	607a      	str	r2, [r7, #4]
 807c3a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c3a2:	68fb      	ldr	r3, [r7, #12]
 807c3a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807c3a6:	68fb      	ldr	r3, [r7, #12]
 807c3a8:	333c      	adds	r3, #60	@ 0x3c
 807c3aa:	3304      	adds	r3, #4
 807c3ac:	681b      	ldr	r3, [r3, #0]
 807c3ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 807c3b0:	693b      	ldr	r3, [r7, #16]
 807c3b2:	4a26      	ldr	r2, [pc, #152]	@ (807c44c <USB_EP0_OutStart+0xb8>)
 807c3b4:	4293      	cmp	r3, r2
 807c3b6:	d90a      	bls.n	807c3ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 807c3b8:	697b      	ldr	r3, [r7, #20]
 807c3ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c3be:	681b      	ldr	r3, [r3, #0]
 807c3c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 807c3c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 807c3c8:	d101      	bne.n	807c3ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 807c3ca:	2300      	movs	r3, #0
 807c3cc:	e037      	b.n	807c43e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 807c3ce:	697b      	ldr	r3, [r7, #20]
 807c3d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c3d4:	461a      	mov	r2, r3
 807c3d6:	2300      	movs	r3, #0
 807c3d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807c3da:	697b      	ldr	r3, [r7, #20]
 807c3dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c3e0:	691b      	ldr	r3, [r3, #16]
 807c3e2:	697a      	ldr	r2, [r7, #20]
 807c3e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c3e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 807c3ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 807c3ee:	697b      	ldr	r3, [r7, #20]
 807c3f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c3f4:	691b      	ldr	r3, [r3, #16]
 807c3f6:	697a      	ldr	r2, [r7, #20]
 807c3f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c3fc:	f043 0318 	orr.w	r3, r3, #24
 807c400:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 807c402:	697b      	ldr	r3, [r7, #20]
 807c404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c408:	691b      	ldr	r3, [r3, #16]
 807c40a:	697a      	ldr	r2, [r7, #20]
 807c40c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c410:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 807c414:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 807c416:	7afb      	ldrb	r3, [r7, #11]
 807c418:	2b01      	cmp	r3, #1
 807c41a:	d10f      	bne.n	807c43c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 807c41c:	697b      	ldr	r3, [r7, #20]
 807c41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c422:	461a      	mov	r2, r3
 807c424:	687b      	ldr	r3, [r7, #4]
 807c426:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 807c428:	697b      	ldr	r3, [r7, #20]
 807c42a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 807c42e:	681b      	ldr	r3, [r3, #0]
 807c430:	697a      	ldr	r2, [r7, #20]
 807c432:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 807c436:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 807c43a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807c43c:	2300      	movs	r3, #0
}
 807c43e:	4618      	mov	r0, r3
 807c440:	371c      	adds	r7, #28
 807c442:	46bd      	mov	sp, r7
 807c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c448:	4770      	bx	lr
 807c44a:	bf00      	nop
 807c44c:	4f54300a 	.word	0x4f54300a

0807c450 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 807c450:	b480      	push	{r7}
 807c452:	b085      	sub	sp, #20
 807c454:	af00      	add	r7, sp, #0
 807c456:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 807c458:	2300      	movs	r3, #0
 807c45a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 807c45c:	68fb      	ldr	r3, [r7, #12]
 807c45e:	3301      	adds	r3, #1
 807c460:	60fb      	str	r3, [r7, #12]
 807c462:	68fb      	ldr	r3, [r7, #12]
 807c464:	4a13      	ldr	r2, [pc, #76]	@ (807c4b4 <USB_CoreReset+0x64>)
 807c466:	4293      	cmp	r3, r2
 807c468:	d901      	bls.n	807c46e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 807c46a:	2303      	movs	r3, #3
 807c46c:	e01b      	b.n	807c4a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 807c46e:	687b      	ldr	r3, [r7, #4]
 807c470:	691b      	ldr	r3, [r3, #16]
 807c472:	2b00      	cmp	r3, #0
 807c474:	daf2      	bge.n	807c45c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 807c476:	2300      	movs	r3, #0
 807c478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 807c47a:	687b      	ldr	r3, [r7, #4]
 807c47c:	691b      	ldr	r3, [r3, #16]
 807c47e:	f043 0201 	orr.w	r2, r3, #1
 807c482:	687b      	ldr	r3, [r7, #4]
 807c484:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807c486:	68fb      	ldr	r3, [r7, #12]
 807c488:	3301      	adds	r3, #1
 807c48a:	60fb      	str	r3, [r7, #12]
 807c48c:	68fb      	ldr	r3, [r7, #12]
 807c48e:	4a09      	ldr	r2, [pc, #36]	@ (807c4b4 <USB_CoreReset+0x64>)
 807c490:	4293      	cmp	r3, r2
 807c492:	d901      	bls.n	807c498 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 807c494:	2303      	movs	r3, #3
 807c496:	e006      	b.n	807c4a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 807c498:	687b      	ldr	r3, [r7, #4]
 807c49a:	691b      	ldr	r3, [r3, #16]
 807c49c:	f003 0301 	and.w	r3, r3, #1
 807c4a0:	2b01      	cmp	r3, #1
 807c4a2:	d0f0      	beq.n	807c486 <USB_CoreReset+0x36>

  return HAL_OK;
 807c4a4:	2300      	movs	r3, #0
}
 807c4a6:	4618      	mov	r0, r3
 807c4a8:	3714      	adds	r7, #20
 807c4aa:	46bd      	mov	sp, r7
 807c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c4b0:	4770      	bx	lr
 807c4b2:	bf00      	nop
 807c4b4:	00030d40 	.word	0x00030d40

0807c4b8 <__NVIC_SystemReset>:
{
 807c4b8:	b480      	push	{r7}
 807c4ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 807c4bc:	f3bf 8f4f 	dsb	sy
}
 807c4c0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 807c4c2:	4b06      	ldr	r3, [pc, #24]	@ (807c4dc <__NVIC_SystemReset+0x24>)
 807c4c4:	68db      	ldr	r3, [r3, #12]
 807c4c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 807c4ca:	4904      	ldr	r1, [pc, #16]	@ (807c4dc <__NVIC_SystemReset+0x24>)
 807c4cc:	4b04      	ldr	r3, [pc, #16]	@ (807c4e0 <__NVIC_SystemReset+0x28>)
 807c4ce:	4313      	orrs	r3, r2
 807c4d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 807c4d2:	f3bf 8f4f 	dsb	sy
}
 807c4d6:	bf00      	nop
    __NOP();
 807c4d8:	bf00      	nop
 807c4da:	e7fd      	b.n	807c4d8 <__NVIC_SystemReset+0x20>
 807c4dc:	e000ed00 	.word	0xe000ed00
 807c4e0:	05fa0004 	.word	0x05fa0004

0807c4e4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807c4e4:	b580      	push	{r7, lr}
 807c4e6:	b084      	sub	sp, #16
 807c4e8:	af00      	add	r7, sp, #0
 807c4ea:	6078      	str	r0, [r7, #4]
 807c4ec:	460b      	mov	r3, r1
 807c4ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 807c4f0:	f240 401c 	movw	r0, #1052	@ 0x41c
 807c4f4:	f002 fcfe 	bl	807eef4 <USBD_static_malloc>
 807c4f8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 807c4fa:	68fb      	ldr	r3, [r7, #12]
 807c4fc:	2b00      	cmp	r3, #0
 807c4fe:	d105      	bne.n	807c50c <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 807c500:	687b      	ldr	r3, [r7, #4]
 807c502:	2200      	movs	r2, #0
 807c504:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 807c508:	2302      	movs	r3, #2
 807c50a:	e03f      	b.n	807c58c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 807c50c:	687b      	ldr	r3, [r7, #4]
 807c50e:	68fa      	ldr	r2, [r7, #12]
 807c510:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 807c514:	68fb      	ldr	r3, [r7, #12]
 807c516:	2200      	movs	r2, #0
 807c518:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 807c51c:	68fb      	ldr	r3, [r7, #12]
 807c51e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 807c522:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 807c526:	68fb      	ldr	r3, [r7, #12]
 807c528:	2200      	movs	r2, #0
 807c52a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 807c52e:	68fb      	ldr	r3, [r7, #12]
 807c530:	2200      	movs	r2, #0
 807c532:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 807c536:	68fb      	ldr	r3, [r7, #12]
 807c538:	2200      	movs	r2, #0
 807c53a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 807c53e:	68fb      	ldr	r3, [r7, #12]
 807c540:	2202      	movs	r2, #2
 807c542:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 807c546:	68fb      	ldr	r3, [r7, #12]
 807c548:	2200      	movs	r2, #0
 807c54a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 807c54e:	68fb      	ldr	r3, [r7, #12]
 807c550:	2200      	movs	r2, #0
 807c552:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 807c556:	68fb      	ldr	r3, [r7, #12]
 807c558:	2200      	movs	r2, #0
 807c55a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 807c55e:	68fb      	ldr	r3, [r7, #12]
 807c560:	2200      	movs	r2, #0
 807c562:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 807c566:	68fb      	ldr	r3, [r7, #12]
 807c568:	2202      	movs	r2, #2
 807c56a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 807c56e:	68fb      	ldr	r3, [r7, #12]
 807c570:	2200      	movs	r2, #0
 807c572:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 807c576:	687b      	ldr	r3, [r7, #4]
 807c578:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 807c57c:	685b      	ldr	r3, [r3, #4]
 807c57e:	4798      	blx	r3
 807c580:	4603      	mov	r3, r0
 807c582:	2b00      	cmp	r3, #0
 807c584:	d001      	beq.n	807c58a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 807c586:	2303      	movs	r3, #3
 807c588:	e000      	b.n	807c58c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 807c58a:	2300      	movs	r3, #0
}
 807c58c:	4618      	mov	r0, r3
 807c58e:	3710      	adds	r7, #16
 807c590:	46bd      	mov	sp, r7
 807c592:	bd80      	pop	{r7, pc}

0807c594 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807c594:	b580      	push	{r7, lr}
 807c596:	b084      	sub	sp, #16
 807c598:	af00      	add	r7, sp, #0
 807c59a:	6078      	str	r0, [r7, #4]
 807c59c:	460b      	mov	r3, r1
 807c59e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 807c5a0:	687b      	ldr	r3, [r7, #4]
 807c5a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807c5a6:	2b00      	cmp	r3, #0
 807c5a8:	d101      	bne.n	807c5ae <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 807c5aa:	2302      	movs	r3, #2
 807c5ac:	e027      	b.n	807c5fe <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c5ae:	687b      	ldr	r3, [r7, #4]
 807c5b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807c5b4:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 807c5b6:	68fb      	ldr	r3, [r7, #12]
 807c5b8:	2200      	movs	r2, #0
 807c5ba:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 807c5be:	68fb      	ldr	r3, [r7, #12]
 807c5c0:	2200      	movs	r2, #0
 807c5c2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 807c5c6:	68fb      	ldr	r3, [r7, #12]
 807c5c8:	2202      	movs	r2, #2
 807c5ca:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 807c5ce:	68fb      	ldr	r3, [r7, #12]
 807c5d0:	2200      	movs	r2, #0
 807c5d2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 807c5d6:	68fb      	ldr	r3, [r7, #12]
 807c5d8:	2202      	movs	r2, #2
 807c5da:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 807c5de:	687b      	ldr	r3, [r7, #4]
 807c5e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 807c5e4:	689b      	ldr	r3, [r3, #8]
 807c5e6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 807c5e8:	687b      	ldr	r3, [r7, #4]
 807c5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807c5ee:	4618      	mov	r0, r3
 807c5f0:	f002 fc8e 	bl	807ef10 <USBD_static_free>
  pdev->pClassData = NULL;
 807c5f4:	687b      	ldr	r3, [r7, #4]
 807c5f6:	2200      	movs	r2, #0
 807c5f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 807c5fc:	2300      	movs	r3, #0
}
 807c5fe:	4618      	mov	r0, r3
 807c600:	3710      	adds	r7, #16
 807c602:	46bd      	mov	sp, r7
 807c604:	bd80      	pop	{r7, pc}
	...

0807c608 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807c608:	b580      	push	{r7, lr}
 807c60a:	b088      	sub	sp, #32
 807c60c:	af00      	add	r7, sp, #0
 807c60e:	6078      	str	r0, [r7, #4]
 807c610:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c612:	687b      	ldr	r3, [r7, #4]
 807c614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807c618:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 807c61a:	2300      	movs	r3, #0
 807c61c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 807c61e:	2300      	movs	r3, #0
 807c620:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 807c622:	2300      	movs	r3, #0
 807c624:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 807c626:	2300      	movs	r3, #0
 807c628:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 807c62a:	693b      	ldr	r3, [r7, #16]
 807c62c:	2b00      	cmp	r3, #0
 807c62e:	d101      	bne.n	807c634 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 807c630:	2303      	movs	r3, #3
 807c632:	e0d5      	b.n	807c7e0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807c634:	683b      	ldr	r3, [r7, #0]
 807c636:	781b      	ldrb	r3, [r3, #0]
 807c638:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 807c63c:	2b00      	cmp	r3, #0
 807c63e:	d03e      	beq.n	807c6be <USBD_DFU_Setup+0xb6>
 807c640:	2b20      	cmp	r3, #32
 807c642:	f040 80c5 	bne.w	807c7d0 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 807c646:	683b      	ldr	r3, [r7, #0]
 807c648:	785b      	ldrb	r3, [r3, #1]
 807c64a:	2b06      	cmp	r3, #6
 807c64c:	d82f      	bhi.n	807c6ae <USBD_DFU_Setup+0xa6>
 807c64e:	a201      	add	r2, pc, #4	@ (adr r2, 807c654 <USBD_DFU_Setup+0x4c>)
 807c650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807c654:	0807c6a5 	.word	0x0807c6a5
 807c658:	0807c671 	.word	0x0807c671
 807c65c:	0807c67b 	.word	0x0807c67b
 807c660:	0807c685 	.word	0x0807c685
 807c664:	0807c68d 	.word	0x0807c68d
 807c668:	0807c695 	.word	0x0807c695
 807c66c:	0807c69d 	.word	0x0807c69d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 807c670:	6839      	ldr	r1, [r7, #0]
 807c672:	6878      	ldr	r0, [r7, #4]
 807c674:	f000 fa6c 	bl	807cb50 <DFU_Download>
          break;
 807c678:	e020      	b.n	807c6bc <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 807c67a:	6839      	ldr	r1, [r7, #0]
 807c67c:	6878      	ldr	r0, [r7, #4]
 807c67e:	f000 fad3 	bl	807cc28 <DFU_Upload>
          break;
 807c682:	e01b      	b.n	807c6bc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 807c684:	6878      	ldr	r0, [r7, #4]
 807c686:	f000 fba9 	bl	807cddc <DFU_GetStatus>
          break;
 807c68a:	e017      	b.n	807c6bc <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 807c68c:	6878      	ldr	r0, [r7, #4]
 807c68e:	f000 fc5b 	bl	807cf48 <DFU_ClearStatus>
          break;
 807c692:	e013      	b.n	807c6bc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 807c694:	6878      	ldr	r0, [r7, #4]
 807c696:	f000 fcab 	bl	807cff0 <DFU_GetState>
          break;
 807c69a:	e00f      	b.n	807c6bc <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 807c69c:	6878      	ldr	r0, [r7, #4]
 807c69e:	f000 fcbf 	bl	807d020 <DFU_Abort>
          break;
 807c6a2:	e00b      	b.n	807c6bc <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 807c6a4:	6839      	ldr	r1, [r7, #0]
 807c6a6:	6878      	ldr	r0, [r7, #4]
 807c6a8:	f000 f9ee 	bl	807ca88 <DFU_Detach>
          break;
 807c6ac:	e006      	b.n	807c6bc <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 807c6ae:	6839      	ldr	r1, [r7, #0]
 807c6b0:	6878      	ldr	r0, [r7, #4]
 807c6b2:	f001 fdfb 	bl	807e2ac <USBD_CtlError>
          ret = USBD_FAIL;
 807c6b6:	2303      	movs	r3, #3
 807c6b8:	77fb      	strb	r3, [r7, #31]
          break;
 807c6ba:	bf00      	nop
      }
      break;
 807c6bc:	e08f      	b.n	807c7de <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807c6be:	683b      	ldr	r3, [r7, #0]
 807c6c0:	785b      	ldrb	r3, [r3, #1]
 807c6c2:	2b0b      	cmp	r3, #11
 807c6c4:	d87b      	bhi.n	807c7be <USBD_DFU_Setup+0x1b6>
 807c6c6:	a201      	add	r2, pc, #4	@ (adr r2, 807c6cc <USBD_DFU_Setup+0xc4>)
 807c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807c6cc:	0807c6fd 	.word	0x0807c6fd
 807c6d0:	0807c7cd 	.word	0x0807c7cd
 807c6d4:	0807c7bf 	.word	0x0807c7bf
 807c6d8:	0807c7bf 	.word	0x0807c7bf
 807c6dc:	0807c7bf 	.word	0x0807c7bf
 807c6e0:	0807c7bf 	.word	0x0807c7bf
 807c6e4:	0807c727 	.word	0x0807c727
 807c6e8:	0807c7bf 	.word	0x0807c7bf
 807c6ec:	0807c7bf 	.word	0x0807c7bf
 807c6f0:	0807c7bf 	.word	0x0807c7bf
 807c6f4:	0807c751 	.word	0x0807c751
 807c6f8:	0807c77d 	.word	0x0807c77d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c6fc:	687b      	ldr	r3, [r7, #4]
 807c6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807c702:	b2db      	uxtb	r3, r3
 807c704:	2b03      	cmp	r3, #3
 807c706:	d107      	bne.n	807c718 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 807c708:	f107 030e 	add.w	r3, r7, #14
 807c70c:	2202      	movs	r2, #2
 807c70e:	4619      	mov	r1, r3
 807c710:	6878      	ldr	r0, [r7, #4]
 807c712:	f001 fe3c 	bl	807e38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c716:	e05a      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c718:	6839      	ldr	r1, [r7, #0]
 807c71a:	6878      	ldr	r0, [r7, #4]
 807c71c:	f001 fdc6 	bl	807e2ac <USBD_CtlError>
            ret = USBD_FAIL;
 807c720:	2303      	movs	r3, #3
 807c722:	77fb      	strb	r3, [r7, #31]
          break;
 807c724:	e053      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 807c726:	683b      	ldr	r3, [r7, #0]
 807c728:	885b      	ldrh	r3, [r3, #2]
 807c72a:	0a1b      	lsrs	r3, r3, #8
 807c72c:	b29b      	uxth	r3, r3
 807c72e:	2b21      	cmp	r3, #33	@ 0x21
 807c730:	d107      	bne.n	807c742 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 807c732:	4b2d      	ldr	r3, [pc, #180]	@ (807c7e8 <USBD_DFU_Setup+0x1e0>)
 807c734:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 807c736:	683b      	ldr	r3, [r7, #0]
 807c738:	88db      	ldrh	r3, [r3, #6]
 807c73a:	2b09      	cmp	r3, #9
 807c73c:	bf28      	it	cs
 807c73e:	2309      	movcs	r3, #9
 807c740:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 807c742:	8afb      	ldrh	r3, [r7, #22]
 807c744:	461a      	mov	r2, r3
 807c746:	69b9      	ldr	r1, [r7, #24]
 807c748:	6878      	ldr	r0, [r7, #4]
 807c74a:	f001 fe20 	bl	807e38e <USBD_CtlSendData>
          break;
 807c74e:	e03e      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c750:	687b      	ldr	r3, [r7, #4]
 807c752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807c756:	b2db      	uxtb	r3, r3
 807c758:	2b03      	cmp	r3, #3
 807c75a:	d108      	bne.n	807c76e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 807c75c:	693b      	ldr	r3, [r7, #16]
 807c75e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 807c762:	2201      	movs	r2, #1
 807c764:	4619      	mov	r1, r3
 807c766:	6878      	ldr	r0, [r7, #4]
 807c768:	f001 fe11 	bl	807e38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c76c:	e02f      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c76e:	6839      	ldr	r1, [r7, #0]
 807c770:	6878      	ldr	r0, [r7, #4]
 807c772:	f001 fd9b 	bl	807e2ac <USBD_CtlError>
            ret = USBD_FAIL;
 807c776:	2303      	movs	r3, #3
 807c778:	77fb      	strb	r3, [r7, #31]
          break;
 807c77a:	e028      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 807c77c:	683b      	ldr	r3, [r7, #0]
 807c77e:	885b      	ldrh	r3, [r3, #2]
 807c780:	b2db      	uxtb	r3, r3
 807c782:	2b00      	cmp	r3, #0
 807c784:	d114      	bne.n	807c7b0 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c786:	687b      	ldr	r3, [r7, #4]
 807c788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807c78c:	b2db      	uxtb	r3, r3
 807c78e:	2b03      	cmp	r3, #3
 807c790:	d107      	bne.n	807c7a2 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 807c792:	683b      	ldr	r3, [r7, #0]
 807c794:	885b      	ldrh	r3, [r3, #2]
 807c796:	b2db      	uxtb	r3, r3
 807c798:	461a      	mov	r2, r3
 807c79a:	693b      	ldr	r3, [r7, #16]
 807c79c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c7a0:	e015      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 807c7a2:	6839      	ldr	r1, [r7, #0]
 807c7a4:	6878      	ldr	r0, [r7, #4]
 807c7a6:	f001 fd81 	bl	807e2ac <USBD_CtlError>
              ret = USBD_FAIL;
 807c7aa:	2303      	movs	r3, #3
 807c7ac:	77fb      	strb	r3, [r7, #31]
          break;
 807c7ae:	e00e      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c7b0:	6839      	ldr	r1, [r7, #0]
 807c7b2:	6878      	ldr	r0, [r7, #4]
 807c7b4:	f001 fd7a 	bl	807e2ac <USBD_CtlError>
            ret = USBD_FAIL;
 807c7b8:	2303      	movs	r3, #3
 807c7ba:	77fb      	strb	r3, [r7, #31]
          break;
 807c7bc:	e007      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 807c7be:	6839      	ldr	r1, [r7, #0]
 807c7c0:	6878      	ldr	r0, [r7, #4]
 807c7c2:	f001 fd73 	bl	807e2ac <USBD_CtlError>
          ret = USBD_FAIL;
 807c7c6:	2303      	movs	r3, #3
 807c7c8:	77fb      	strb	r3, [r7, #31]
          break;
 807c7ca:	e000      	b.n	807c7ce <USBD_DFU_Setup+0x1c6>
          break;
 807c7cc:	bf00      	nop
      }
      break;
 807c7ce:	e006      	b.n	807c7de <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 807c7d0:	6839      	ldr	r1, [r7, #0]
 807c7d2:	6878      	ldr	r0, [r7, #4]
 807c7d4:	f001 fd6a 	bl	807e2ac <USBD_CtlError>
      ret = USBD_FAIL;
 807c7d8:	2303      	movs	r3, #3
 807c7da:	77fb      	strb	r3, [r7, #31]
      break;
 807c7dc:	bf00      	nop
  }

  return (uint8_t)ret;
 807c7de:	7ffb      	ldrb	r3, [r7, #31]
}
 807c7e0:	4618      	mov	r0, r3
 807c7e2:	3720      	adds	r7, #32
 807c7e4:	46bd      	mov	sp, r7
 807c7e6:	bd80      	pop	{r7, pc}
 807c7e8:	2000005a 	.word	0x2000005a

0807c7ec <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 807c7ec:	b480      	push	{r7}
 807c7ee:	b083      	sub	sp, #12
 807c7f0:	af00      	add	r7, sp, #0
 807c7f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 807c7f4:	687b      	ldr	r3, [r7, #4]
 807c7f6:	221b      	movs	r2, #27
 807c7f8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 807c7fa:	4b03      	ldr	r3, [pc, #12]	@ (807c808 <USBD_DFU_GetCfgDesc+0x1c>)
}
 807c7fc:	4618      	mov	r0, r3
 807c7fe:	370c      	adds	r7, #12
 807c800:	46bd      	mov	sp, r7
 807c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c806:	4770      	bx	lr
 807c808:	20000048 	.word	0x20000048

0807c80c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 807c80c:	b480      	push	{r7}
 807c80e:	b083      	sub	sp, #12
 807c810:	af00      	add	r7, sp, #0
 807c812:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807c814:	2300      	movs	r3, #0
}
 807c816:	4618      	mov	r0, r3
 807c818:	370c      	adds	r7, #12
 807c81a:	46bd      	mov	sp, r7
 807c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c820:	4770      	bx	lr

0807c822 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 807c822:	b580      	push	{r7, lr}
 807c824:	b088      	sub	sp, #32
 807c826:	af00      	add	r7, sp, #0
 807c828:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c82a:	687b      	ldr	r3, [r7, #4]
 807c82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807c830:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807c832:	687b      	ldr	r3, [r7, #4]
 807c834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 807c838:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 807c83a:	69fb      	ldr	r3, [r7, #28]
 807c83c:	2b00      	cmp	r3, #0
 807c83e:	d101      	bne.n	807c844 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 807c840:	2303      	movs	r3, #3
 807c842:	e0ce      	b.n	807c9e2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 807c844:	69fb      	ldr	r3, [r7, #28]
 807c846:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807c84a:	2b04      	cmp	r3, #4
 807c84c:	f040 80bd 	bne.w	807c9ca <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 807c850:	69fb      	ldr	r3, [r7, #28]
 807c852:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 807c856:	2b00      	cmp	r3, #0
 807c858:	d17c      	bne.n	807c954 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 807c85a:	69fb      	ldr	r3, [r7, #28]
 807c85c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807c860:	2b01      	cmp	r3, #1
 807c862:	f000 8093 	beq.w	807c98c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 807c866:	69fb      	ldr	r3, [r7, #28]
 807c868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807c86c:	2b05      	cmp	r3, #5
 807c86e:	d15e      	bne.n	807c92e <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 807c870:	69fb      	ldr	r3, [r7, #28]
 807c872:	781b      	ldrb	r3, [r3, #0]
 807c874:	2b21      	cmp	r3, #33	@ 0x21
 807c876:	d124      	bne.n	807c8c2 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 807c878:	69fb      	ldr	r3, [r7, #28]
 807c87a:	785b      	ldrb	r3, [r3, #1]
 807c87c:	461a      	mov	r2, r3
 807c87e:	69fb      	ldr	r3, [r7, #28]
 807c880:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 807c884:	69fb      	ldr	r3, [r7, #28]
 807c886:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 807c88a:	69fb      	ldr	r3, [r7, #28]
 807c88c:	789b      	ldrb	r3, [r3, #2]
 807c88e:	021b      	lsls	r3, r3, #8
 807c890:	441a      	add	r2, r3
 807c892:	69fb      	ldr	r3, [r7, #28]
 807c894:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 807c898:	69fb      	ldr	r3, [r7, #28]
 807c89a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 807c89e:	69fb      	ldr	r3, [r7, #28]
 807c8a0:	78db      	ldrb	r3, [r3, #3]
 807c8a2:	041b      	lsls	r3, r3, #16
 807c8a4:	441a      	add	r2, r3
 807c8a6:	69fb      	ldr	r3, [r7, #28]
 807c8a8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807c8ac:	69fb      	ldr	r3, [r7, #28]
 807c8ae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 807c8b2:	69fb      	ldr	r3, [r7, #28]
 807c8b4:	791b      	ldrb	r3, [r3, #4]
 807c8b6:	061b      	lsls	r3, r3, #24
 807c8b8:	441a      	add	r2, r3
 807c8ba:	69fb      	ldr	r3, [r7, #28]
 807c8bc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 807c8c0:	e064      	b.n	807c98c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 807c8c2:	69fb      	ldr	r3, [r7, #28]
 807c8c4:	781b      	ldrb	r3, [r3, #0]
 807c8c6:	2b41      	cmp	r3, #65	@ 0x41
 807c8c8:	d12f      	bne.n	807c92a <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 807c8ca:	69fb      	ldr	r3, [r7, #28]
 807c8cc:	785b      	ldrb	r3, [r3, #1]
 807c8ce:	461a      	mov	r2, r3
 807c8d0:	69fb      	ldr	r3, [r7, #28]
 807c8d2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 807c8d6:	69fb      	ldr	r3, [r7, #28]
 807c8d8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 807c8dc:	69fb      	ldr	r3, [r7, #28]
 807c8de:	789b      	ldrb	r3, [r3, #2]
 807c8e0:	021b      	lsls	r3, r3, #8
 807c8e2:	441a      	add	r2, r3
 807c8e4:	69fb      	ldr	r3, [r7, #28]
 807c8e6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 807c8ea:	69fb      	ldr	r3, [r7, #28]
 807c8ec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 807c8f0:	69fb      	ldr	r3, [r7, #28]
 807c8f2:	78db      	ldrb	r3, [r3, #3]
 807c8f4:	041b      	lsls	r3, r3, #16
 807c8f6:	441a      	add	r2, r3
 807c8f8:	69fb      	ldr	r3, [r7, #28]
 807c8fa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807c8fe:	69fb      	ldr	r3, [r7, #28]
 807c900:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 807c904:	69fb      	ldr	r3, [r7, #28]
 807c906:	791b      	ldrb	r3, [r3, #4]
 807c908:	061b      	lsls	r3, r3, #24
 807c90a:	441a      	add	r2, r3
 807c90c:	69fb      	ldr	r3, [r7, #28]
 807c90e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 807c912:	69bb      	ldr	r3, [r7, #24]
 807c914:	68db      	ldr	r3, [r3, #12]
 807c916:	69fa      	ldr	r2, [r7, #28]
 807c918:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 807c91c:	4610      	mov	r0, r2
 807c91e:	4798      	blx	r3
 807c920:	4603      	mov	r3, r0
 807c922:	2b00      	cmp	r3, #0
 807c924:	d032      	beq.n	807c98c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 807c926:	2303      	movs	r3, #3
 807c928:	e05b      	b.n	807c9e2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 807c92a:	2303      	movs	r3, #3
 807c92c:	e059      	b.n	807c9e2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 807c92e:	69fb      	ldr	r3, [r7, #28]
 807c930:	2200      	movs	r2, #0
 807c932:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 807c936:	69fb      	ldr	r3, [r7, #28]
 807c938:	2200      	movs	r2, #0
 807c93a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 807c93e:	2300      	movs	r3, #0
 807c940:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 807c942:	2301      	movs	r3, #1
 807c944:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 807c946:	f107 030c 	add.w	r3, r7, #12
 807c94a:	4619      	mov	r1, r3
 807c94c:	6878      	ldr	r0, [r7, #4]
 807c94e:	f001 fcad 	bl	807e2ac <USBD_CtlError>
 807c952:	e01b      	b.n	807c98c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 807c954:	69fb      	ldr	r3, [r7, #28]
 807c956:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 807c95a:	2b01      	cmp	r3, #1
 807c95c:	d916      	bls.n	807c98c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 807c95e:	69fb      	ldr	r3, [r7, #28]
 807c960:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 807c964:	3b02      	subs	r3, #2
 807c966:	029a      	lsls	r2, r3, #10
 807c968:	69fb      	ldr	r3, [r7, #28]
 807c96a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 807c96e:	4413      	add	r3, r2
 807c970:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 807c972:	69bb      	ldr	r3, [r7, #24]
 807c974:	691b      	ldr	r3, [r3, #16]
 807c976:	69f8      	ldr	r0, [r7, #28]
 807c978:	6979      	ldr	r1, [r7, #20]
 807c97a:	69fa      	ldr	r2, [r7, #28]
 807c97c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 807c980:	4798      	blx	r3
 807c982:	4603      	mov	r3, r0
 807c984:	2b00      	cmp	r3, #0
 807c986:	d001      	beq.n	807c98c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 807c988:	2303      	movs	r3, #3
 807c98a:	e02a      	b.n	807c9e2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 807c98c:	69fb      	ldr	r3, [r7, #28]
 807c98e:	2200      	movs	r2, #0
 807c990:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 807c994:	69fb      	ldr	r3, [r7, #28]
 807c996:	2200      	movs	r2, #0
 807c998:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 807c99c:	69fb      	ldr	r3, [r7, #28]
 807c99e:	2203      	movs	r2, #3
 807c9a0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 807c9a4:	69fb      	ldr	r3, [r7, #28]
 807c9a6:	2200      	movs	r2, #0
 807c9a8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807c9ac:	69fb      	ldr	r3, [r7, #28]
 807c9ae:	2200      	movs	r2, #0
 807c9b0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 807c9b4:	69fb      	ldr	r3, [r7, #28]
 807c9b6:	2200      	movs	r2, #0
 807c9b8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807c9bc:	69fb      	ldr	r3, [r7, #28]
 807c9be:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807c9c2:	69fb      	ldr	r3, [r7, #28]
 807c9c4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 807c9c8:	e00a      	b.n	807c9e0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 807c9ca:	69fb      	ldr	r3, [r7, #28]
 807c9cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807c9d0:	2b07      	cmp	r3, #7
 807c9d2:	d103      	bne.n	807c9dc <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 807c9d4:	6878      	ldr	r0, [r7, #4]
 807c9d6:	f000 fb75 	bl	807d0c4 <DFU_Leave>
 807c9da:	e001      	b.n	807c9e0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 807c9dc:	2303      	movs	r3, #3
 807c9de:	e000      	b.n	807c9e2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 807c9e0:	2300      	movs	r3, #0
}
 807c9e2:	4618      	mov	r0, r3
 807c9e4:	3720      	adds	r7, #32
 807c9e6:	46bd      	mov	sp, r7
 807c9e8:	bd80      	pop	{r7, pc}

0807c9ea <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 807c9ea:	b480      	push	{r7}
 807c9ec:	b083      	sub	sp, #12
 807c9ee:	af00      	add	r7, sp, #0
 807c9f0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807c9f2:	2300      	movs	r3, #0
}
 807c9f4:	4618      	mov	r0, r3
 807c9f6:	370c      	adds	r7, #12
 807c9f8:	46bd      	mov	sp, r7
 807c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c9fe:	4770      	bx	lr

0807ca00 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 807ca00:	b480      	push	{r7}
 807ca02:	b083      	sub	sp, #12
 807ca04:	af00      	add	r7, sp, #0
 807ca06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 807ca08:	687b      	ldr	r3, [r7, #4]
 807ca0a:	220a      	movs	r2, #10
 807ca0c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 807ca0e:	4b03      	ldr	r3, [pc, #12]	@ (807ca1c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 807ca10:	4618      	mov	r0, r3
 807ca12:	370c      	adds	r7, #12
 807ca14:	46bd      	mov	sp, r7
 807ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ca1a:	4770      	bx	lr
 807ca1c:	20000064 	.word	0x20000064

0807ca20 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 807ca20:	b580      	push	{r7, lr}
 807ca22:	b086      	sub	sp, #24
 807ca24:	af00      	add	r7, sp, #0
 807ca26:	60f8      	str	r0, [r7, #12]
 807ca28:	460b      	mov	r3, r1
 807ca2a:	607a      	str	r2, [r7, #4]
 807ca2c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807ca2e:	68fb      	ldr	r3, [r7, #12]
 807ca30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 807ca34:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 807ca36:	7afb      	ldrb	r3, [r7, #11]
 807ca38:	2b06      	cmp	r3, #6
 807ca3a:	d808      	bhi.n	807ca4e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 807ca3c:	697b      	ldr	r3, [r7, #20]
 807ca3e:	681b      	ldr	r3, [r3, #0]
 807ca40:	687a      	ldr	r2, [r7, #4]
 807ca42:	4905      	ldr	r1, [pc, #20]	@ (807ca58 <USBD_DFU_GetUsrStringDesc+0x38>)
 807ca44:	4618      	mov	r0, r3
 807ca46:	f001 fc42 	bl	807e2ce <USBD_GetString>
    return USBD_StrDesc;
 807ca4a:	4b03      	ldr	r3, [pc, #12]	@ (807ca58 <USBD_DFU_GetUsrStringDesc+0x38>)
 807ca4c:	e000      	b.n	807ca50 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 807ca4e:	2300      	movs	r3, #0
  }
}
 807ca50:	4618      	mov	r0, r3
 807ca52:	3718      	adds	r7, #24
 807ca54:	46bd      	mov	sp, r7
 807ca56:	bd80      	pop	{r7, pc}
 807ca58:	2000011c 	.word	0x2000011c

0807ca5c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 807ca5c:	b480      	push	{r7}
 807ca5e:	b083      	sub	sp, #12
 807ca60:	af00      	add	r7, sp, #0
 807ca62:	6078      	str	r0, [r7, #4]
 807ca64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 807ca66:	683b      	ldr	r3, [r7, #0]
 807ca68:	2b00      	cmp	r3, #0
 807ca6a:	d101      	bne.n	807ca70 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 807ca6c:	2303      	movs	r3, #3
 807ca6e:	e004      	b.n	807ca7a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 807ca70:	687b      	ldr	r3, [r7, #4]
 807ca72:	683a      	ldr	r2, [r7, #0]
 807ca74:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 807ca78:	2300      	movs	r3, #0
}
 807ca7a:	4618      	mov	r0, r3
 807ca7c:	370c      	adds	r7, #12
 807ca7e:	46bd      	mov	sp, r7
 807ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ca84:	4770      	bx	lr
	...

0807ca88 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807ca88:	b580      	push	{r7, lr}
 807ca8a:	b084      	sub	sp, #16
 807ca8c:	af00      	add	r7, sp, #0
 807ca8e:	6078      	str	r0, [r7, #4]
 807ca90:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807ca92:	687b      	ldr	r3, [r7, #4]
 807ca94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807ca98:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807ca9a:	68fb      	ldr	r3, [r7, #12]
 807ca9c:	2b00      	cmp	r3, #0
 807ca9e:	d051      	beq.n	807cb44 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807caa0:	68fb      	ldr	r3, [r7, #12]
 807caa2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807caa6:	2b02      	cmp	r3, #2
 807caa8:	d013      	beq.n	807cad2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807caaa:	68fb      	ldr	r3, [r7, #12]
 807caac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807cab0:	2b03      	cmp	r3, #3
 807cab2:	d00e      	beq.n	807cad2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807cab4:	68fb      	ldr	r3, [r7, #12]
 807cab6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807caba:	2b05      	cmp	r3, #5
 807cabc:	d009      	beq.n	807cad2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807cabe:	68fb      	ldr	r3, [r7, #12]
 807cac0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807cac4:	2b06      	cmp	r3, #6
 807cac6:	d004      	beq.n	807cad2 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807cac8:	68fb      	ldr	r3, [r7, #12]
 807caca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807cace:	2b09      	cmp	r3, #9
 807cad0:	d125      	bne.n	807cb1e <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 807cad2:	68fb      	ldr	r3, [r7, #12]
 807cad4:	2202      	movs	r2, #2
 807cad6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 807cada:	68fb      	ldr	r3, [r7, #12]
 807cadc:	2200      	movs	r2, #0
 807cade:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 807cae2:	68fb      	ldr	r3, [r7, #12]
 807cae4:	2200      	movs	r2, #0
 807cae6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807caea:	68fb      	ldr	r3, [r7, #12]
 807caec:	2200      	movs	r2, #0
 807caee:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 807caf2:	68fb      	ldr	r3, [r7, #12]
 807caf4:	2200      	movs	r2, #0
 807caf6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807cafa:	68fb      	ldr	r3, [r7, #12]
 807cafc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cb00:	68fb      	ldr	r3, [r7, #12]
 807cb02:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 807cb06:	68fb      	ldr	r3, [r7, #12]
 807cb08:	2200      	movs	r2, #0
 807cb0a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 807cb0e:	68fb      	ldr	r3, [r7, #12]
 807cb10:	2200      	movs	r2, #0
 807cb12:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 807cb16:	68fb      	ldr	r3, [r7, #12]
 807cb18:	2200      	movs	r2, #0
 807cb1a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 807cb1e:	4b0b      	ldr	r3, [pc, #44]	@ (807cb4c <DFU_Detach+0xc4>)
 807cb20:	7d5b      	ldrb	r3, [r3, #21]
 807cb22:	f003 0310 	and.w	r3, r3, #16
 807cb26:	2b00      	cmp	r3, #0
 807cb28:	d006      	beq.n	807cb38 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 807cb2a:	6878      	ldr	r0, [r7, #4]
 807cb2c:	f000 fb7b 	bl	807d226 <USBD_Stop>
    (void)USBD_Start(pdev);
 807cb30:	6878      	ldr	r0, [r7, #4]
 807cb32:	f000 fb6c 	bl	807d20e <USBD_Start>
 807cb36:	e006      	b.n	807cb46 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 807cb38:	683b      	ldr	r3, [r7, #0]
 807cb3a:	885b      	ldrh	r3, [r3, #2]
 807cb3c:	4618      	mov	r0, r3
 807cb3e:	f7fb feeb 	bl	8078918 <HAL_Delay>
 807cb42:	e000      	b.n	807cb46 <DFU_Detach+0xbe>
    return;
 807cb44:	bf00      	nop
  }
}
 807cb46:	3710      	adds	r7, #16
 807cb48:	46bd      	mov	sp, r7
 807cb4a:	bd80      	pop	{r7, pc}
 807cb4c:	20000048 	.word	0x20000048

0807cb50 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807cb50:	b580      	push	{r7, lr}
 807cb52:	b084      	sub	sp, #16
 807cb54:	af00      	add	r7, sp, #0
 807cb56:	6078      	str	r0, [r7, #4]
 807cb58:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cb5a:	687b      	ldr	r3, [r7, #4]
 807cb5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807cb60:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cb62:	68fb      	ldr	r3, [r7, #12]
 807cb64:	2b00      	cmp	r3, #0
 807cb66:	d05b      	beq.n	807cc20 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 807cb68:	683b      	ldr	r3, [r7, #0]
 807cb6a:	88db      	ldrh	r3, [r3, #6]
 807cb6c:	2b00      	cmp	r3, #0
 807cb6e:	d02d      	beq.n	807cbcc <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 807cb70:	68fb      	ldr	r3, [r7, #12]
 807cb72:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807cb76:	2b02      	cmp	r3, #2
 807cb78:	d004      	beq.n	807cb84 <DFU_Download+0x34>
 807cb7a:	68fb      	ldr	r3, [r7, #12]
 807cb7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807cb80:	2b05      	cmp	r3, #5
 807cb82:	d11e      	bne.n	807cbc2 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 807cb84:	683b      	ldr	r3, [r7, #0]
 807cb86:	885b      	ldrh	r3, [r3, #2]
 807cb88:	461a      	mov	r2, r3
 807cb8a:	68fb      	ldr	r3, [r7, #12]
 807cb8c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 807cb90:	683b      	ldr	r3, [r7, #0]
 807cb92:	88db      	ldrh	r3, [r3, #6]
 807cb94:	461a      	mov	r2, r3
 807cb96:	68fb      	ldr	r3, [r7, #12]
 807cb98:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 807cb9c:	68fb      	ldr	r3, [r7, #12]
 807cb9e:	2203      	movs	r2, #3
 807cba0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 807cba4:	68fb      	ldr	r3, [r7, #12]
 807cba6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cbaa:	68fb      	ldr	r3, [r7, #12]
 807cbac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 807cbb0:	68f9      	ldr	r1, [r7, #12]
 807cbb2:	68fb      	ldr	r3, [r7, #12]
 807cbb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807cbb8:	461a      	mov	r2, r3
 807cbba:	6878      	ldr	r0, [r7, #4]
 807cbbc:	f001 fc13 	bl	807e3e6 <USBD_CtlPrepareRx>
 807cbc0:	e02f      	b.n	807cc22 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cbc2:	6839      	ldr	r1, [r7, #0]
 807cbc4:	6878      	ldr	r0, [r7, #4]
 807cbc6:	f001 fb71 	bl	807e2ac <USBD_CtlError>
 807cbca:	e02a      	b.n	807cc22 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 807cbcc:	68fb      	ldr	r3, [r7, #12]
 807cbce:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807cbd2:	2b05      	cmp	r3, #5
 807cbd4:	d004      	beq.n	807cbe0 <DFU_Download+0x90>
 807cbd6:	68fb      	ldr	r3, [r7, #12]
 807cbd8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807cbdc:	2b02      	cmp	r3, #2
 807cbde:	d11a      	bne.n	807cc16 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 807cbe0:	68fb      	ldr	r3, [r7, #12]
 807cbe2:	2201      	movs	r2, #1
 807cbe4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 807cbe8:	68fb      	ldr	r3, [r7, #12]
 807cbea:	2206      	movs	r2, #6
 807cbec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 807cbf0:	68fb      	ldr	r3, [r7, #12]
 807cbf2:	2200      	movs	r2, #0
 807cbf4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 807cbf8:	68fb      	ldr	r3, [r7, #12]
 807cbfa:	2200      	movs	r2, #0
 807cbfc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 807cc00:	68fb      	ldr	r3, [r7, #12]
 807cc02:	2200      	movs	r2, #0
 807cc04:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 807cc08:	68fb      	ldr	r3, [r7, #12]
 807cc0a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cc0e:	68fb      	ldr	r3, [r7, #12]
 807cc10:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 807cc14:	e005      	b.n	807cc22 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cc16:	6839      	ldr	r1, [r7, #0]
 807cc18:	6878      	ldr	r0, [r7, #4]
 807cc1a:	f001 fb47 	bl	807e2ac <USBD_CtlError>
 807cc1e:	e000      	b.n	807cc22 <DFU_Download+0xd2>
    return;
 807cc20:	bf00      	nop
    }
  }
}
 807cc22:	3710      	adds	r7, #16
 807cc24:	46bd      	mov	sp, r7
 807cc26:	bd80      	pop	{r7, pc}

0807cc28 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807cc28:	b580      	push	{r7, lr}
 807cc2a:	b086      	sub	sp, #24
 807cc2c:	af00      	add	r7, sp, #0
 807cc2e:	6078      	str	r0, [r7, #4]
 807cc30:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cc32:	687b      	ldr	r3, [r7, #4]
 807cc34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807cc38:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807cc3a:	687b      	ldr	r3, [r7, #4]
 807cc3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 807cc40:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 807cc42:	697b      	ldr	r3, [r7, #20]
 807cc44:	2b00      	cmp	r3, #0
 807cc46:	f000 80c4 	beq.w	807cdd2 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 807cc4a:	683b      	ldr	r3, [r7, #0]
 807cc4c:	88db      	ldrh	r3, [r3, #6]
 807cc4e:	2b00      	cmp	r3, #0
 807cc50:	f000 80a8 	beq.w	807cda4 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807cc54:	697b      	ldr	r3, [r7, #20]
 807cc56:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807cc5a:	2b02      	cmp	r3, #2
 807cc5c:	d005      	beq.n	807cc6a <DFU_Upload+0x42>
 807cc5e:	697b      	ldr	r3, [r7, #20]
 807cc60:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807cc64:	2b09      	cmp	r3, #9
 807cc66:	f040 8090 	bne.w	807cd8a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 807cc6a:	683b      	ldr	r3, [r7, #0]
 807cc6c:	885b      	ldrh	r3, [r3, #2]
 807cc6e:	461a      	mov	r2, r3
 807cc70:	697b      	ldr	r3, [r7, #20]
 807cc72:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 807cc76:	683b      	ldr	r3, [r7, #0]
 807cc78:	88db      	ldrh	r3, [r3, #6]
 807cc7a:	461a      	mov	r2, r3
 807cc7c:	697b      	ldr	r3, [r7, #20]
 807cc7e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 807cc82:	697b      	ldr	r3, [r7, #20]
 807cc84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 807cc88:	2b00      	cmp	r3, #0
 807cc8a:	d12c      	bne.n	807cce6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 807cc8c:	697b      	ldr	r3, [r7, #20]
 807cc8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807cc92:	2b03      	cmp	r3, #3
 807cc94:	d901      	bls.n	807cc9a <DFU_Upload+0x72>
 807cc96:	2202      	movs	r2, #2
 807cc98:	e000      	b.n	807cc9c <DFU_Upload+0x74>
 807cc9a:	2209      	movs	r2, #9
 807cc9c:	697b      	ldr	r3, [r7, #20]
 807cc9e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 807cca2:	697b      	ldr	r3, [r7, #20]
 807cca4:	2200      	movs	r2, #0
 807cca6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 807ccaa:	697b      	ldr	r3, [r7, #20]
 807ccac:	2200      	movs	r2, #0
 807ccae:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 807ccb2:	697b      	ldr	r3, [r7, #20]
 807ccb4:	2200      	movs	r2, #0
 807ccb6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ccba:	697b      	ldr	r3, [r7, #20]
 807ccbc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807ccc0:	697b      	ldr	r3, [r7, #20]
 807ccc2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 807ccc6:	697b      	ldr	r3, [r7, #20]
 807ccc8:	2200      	movs	r2, #0
 807ccca:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 807cccc:	697b      	ldr	r3, [r7, #20]
 807ccce:	2221      	movs	r2, #33	@ 0x21
 807ccd0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 807ccd2:	697b      	ldr	r3, [r7, #20]
 807ccd4:	2241      	movs	r2, #65	@ 0x41
 807ccd6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 807ccd8:	697b      	ldr	r3, [r7, #20]
 807ccda:	2203      	movs	r2, #3
 807ccdc:	4619      	mov	r1, r3
 807ccde:	6878      	ldr	r0, [r7, #4]
 807cce0:	f001 fb55 	bl	807e38e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 807cce4:	e076      	b.n	807cdd4 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 807cce6:	697b      	ldr	r3, [r7, #20]
 807cce8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 807ccec:	2b01      	cmp	r3, #1
 807ccee:	d931      	bls.n	807cd54 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 807ccf0:	697b      	ldr	r3, [r7, #20]
 807ccf2:	2209      	movs	r2, #9
 807ccf4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 807ccf8:	697b      	ldr	r3, [r7, #20]
 807ccfa:	2200      	movs	r2, #0
 807ccfc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 807cd00:	697b      	ldr	r3, [r7, #20]
 807cd02:	2200      	movs	r2, #0
 807cd04:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 807cd08:	697b      	ldr	r3, [r7, #20]
 807cd0a:	2200      	movs	r2, #0
 807cd0c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cd10:	697b      	ldr	r3, [r7, #20]
 807cd12:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cd16:	697b      	ldr	r3, [r7, #20]
 807cd18:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 807cd1c:	697b      	ldr	r3, [r7, #20]
 807cd1e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 807cd22:	3b02      	subs	r3, #2
 807cd24:	029a      	lsls	r2, r3, #10
 807cd26:	697b      	ldr	r3, [r7, #20]
 807cd28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 807cd2c:	4413      	add	r3, r2
 807cd2e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 807cd30:	693b      	ldr	r3, [r7, #16]
 807cd32:	695b      	ldr	r3, [r3, #20]
 807cd34:	68f8      	ldr	r0, [r7, #12]
 807cd36:	6979      	ldr	r1, [r7, #20]
 807cd38:	697a      	ldr	r2, [r7, #20]
 807cd3a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 807cd3e:	4798      	blx	r3
 807cd40:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 807cd42:	697b      	ldr	r3, [r7, #20]
 807cd44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807cd48:	461a      	mov	r2, r3
 807cd4a:	68b9      	ldr	r1, [r7, #8]
 807cd4c:	6878      	ldr	r0, [r7, #4]
 807cd4e:	f001 fb1e 	bl	807e38e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 807cd52:	e03f      	b.n	807cdd4 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 807cd54:	697b      	ldr	r3, [r7, #20]
 807cd56:	220f      	movs	r2, #15
 807cd58:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 807cd5c:	697b      	ldr	r3, [r7, #20]
 807cd5e:	2200      	movs	r2, #0
 807cd60:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 807cd64:	697b      	ldr	r3, [r7, #20]
 807cd66:	2200      	movs	r2, #0
 807cd68:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 807cd6c:	697b      	ldr	r3, [r7, #20]
 807cd6e:	2200      	movs	r2, #0
 807cd70:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cd74:	697b      	ldr	r3, [r7, #20]
 807cd76:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cd7a:	697b      	ldr	r3, [r7, #20]
 807cd7c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 807cd80:	6839      	ldr	r1, [r7, #0]
 807cd82:	6878      	ldr	r0, [r7, #4]
 807cd84:	f001 fa92 	bl	807e2ac <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 807cd88:	e024      	b.n	807cdd4 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 807cd8a:	697b      	ldr	r3, [r7, #20]
 807cd8c:	2200      	movs	r2, #0
 807cd8e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 807cd92:	697b      	ldr	r3, [r7, #20]
 807cd94:	2200      	movs	r2, #0
 807cd96:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cd9a:	6839      	ldr	r1, [r7, #0]
 807cd9c:	6878      	ldr	r0, [r7, #4]
 807cd9e:	f001 fa85 	bl	807e2ac <USBD_CtlError>
 807cda2:	e017      	b.n	807cdd4 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807cda4:	697b      	ldr	r3, [r7, #20]
 807cda6:	2202      	movs	r2, #2
 807cda8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 807cdac:	697b      	ldr	r3, [r7, #20]
 807cdae:	2200      	movs	r2, #0
 807cdb0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807cdb4:	697b      	ldr	r3, [r7, #20]
 807cdb6:	2200      	movs	r2, #0
 807cdb8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 807cdbc:	697b      	ldr	r3, [r7, #20]
 807cdbe:	2200      	movs	r2, #0
 807cdc0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807cdc4:	697b      	ldr	r3, [r7, #20]
 807cdc6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cdca:	697b      	ldr	r3, [r7, #20]
 807cdcc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 807cdd0:	e000      	b.n	807cdd4 <DFU_Upload+0x1ac>
    return;
 807cdd2:	bf00      	nop
  }
}
 807cdd4:	3718      	adds	r7, #24
 807cdd6:	46bd      	mov	sp, r7
 807cdd8:	bd80      	pop	{r7, pc}
	...

0807cddc <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 807cddc:	b580      	push	{r7, lr}
 807cdde:	b084      	sub	sp, #16
 807cde0:	af00      	add	r7, sp, #0
 807cde2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cde4:	687b      	ldr	r3, [r7, #4]
 807cde6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807cdea:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807cdec:	687b      	ldr	r3, [r7, #4]
 807cdee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 807cdf2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 807cdf4:	68fb      	ldr	r3, [r7, #12]
 807cdf6:	2b00      	cmp	r3, #0
 807cdf8:	f000 80a0 	beq.w	807cf3c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 807cdfc:	68fb      	ldr	r3, [r7, #12]
 807cdfe:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807ce02:	2b03      	cmp	r3, #3
 807ce04:	d002      	beq.n	807ce0c <DFU_GetStatus+0x30>
 807ce06:	2b06      	cmp	r3, #6
 807ce08:	d051      	beq.n	807ceae <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 807ce0a:	e08e      	b.n	807cf2a <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 807ce0c:	68fb      	ldr	r3, [r7, #12]
 807ce0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807ce12:	2b00      	cmp	r3, #0
 807ce14:	d034      	beq.n	807ce80 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 807ce16:	68fb      	ldr	r3, [r7, #12]
 807ce18:	2204      	movs	r2, #4
 807ce1a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 807ce1e:	68fb      	ldr	r3, [r7, #12]
 807ce20:	2200      	movs	r2, #0
 807ce22:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 807ce26:	68fb      	ldr	r3, [r7, #12]
 807ce28:	2200      	movs	r2, #0
 807ce2a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 807ce2e:	68fb      	ldr	r3, [r7, #12]
 807ce30:	2200      	movs	r2, #0
 807ce32:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ce36:	68fb      	ldr	r3, [r7, #12]
 807ce38:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807ce3c:	68fb      	ldr	r3, [r7, #12]
 807ce3e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 807ce42:	68fb      	ldr	r3, [r7, #12]
 807ce44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 807ce48:	2b00      	cmp	r3, #0
 807ce4a:	d10e      	bne.n	807ce6a <DFU_GetStatus+0x8e>
 807ce4c:	68fb      	ldr	r3, [r7, #12]
 807ce4e:	781b      	ldrb	r3, [r3, #0]
 807ce50:	2b41      	cmp	r3, #65	@ 0x41
 807ce52:	d10a      	bne.n	807ce6a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 807ce54:	68bb      	ldr	r3, [r7, #8]
 807ce56:	699b      	ldr	r3, [r3, #24]
 807ce58:	68fa      	ldr	r2, [r7, #12]
 807ce5a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 807ce5e:	68fa      	ldr	r2, [r7, #12]
 807ce60:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 807ce64:	2100      	movs	r1, #0
 807ce66:	4798      	blx	r3
      break;
 807ce68:	e05f      	b.n	807cf2a <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 807ce6a:	68bb      	ldr	r3, [r7, #8]
 807ce6c:	699b      	ldr	r3, [r3, #24]
 807ce6e:	68fa      	ldr	r2, [r7, #12]
 807ce70:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 807ce74:	68fa      	ldr	r2, [r7, #12]
 807ce76:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 807ce7a:	2101      	movs	r1, #1
 807ce7c:	4798      	blx	r3
      break;
 807ce7e:	e054      	b.n	807cf2a <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 807ce80:	68fb      	ldr	r3, [r7, #12]
 807ce82:	2205      	movs	r2, #5
 807ce84:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 807ce88:	68fb      	ldr	r3, [r7, #12]
 807ce8a:	2200      	movs	r2, #0
 807ce8c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 807ce90:	68fb      	ldr	r3, [r7, #12]
 807ce92:	2200      	movs	r2, #0
 807ce94:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 807ce98:	68fb      	ldr	r3, [r7, #12]
 807ce9a:	2200      	movs	r2, #0
 807ce9c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cea0:	68fb      	ldr	r3, [r7, #12]
 807cea2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cea6:	68fb      	ldr	r3, [r7, #12]
 807cea8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 807ceac:	e03d      	b.n	807cf2a <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 807ceae:	68fb      	ldr	r3, [r7, #12]
 807ceb0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 807ceb4:	2b01      	cmp	r3, #1
 807ceb6:	d116      	bne.n	807cee6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 807ceb8:	68fb      	ldr	r3, [r7, #12]
 807ceba:	2207      	movs	r2, #7
 807cebc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 807cec0:	68fb      	ldr	r3, [r7, #12]
 807cec2:	2201      	movs	r2, #1
 807cec4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 807cec8:	68fb      	ldr	r3, [r7, #12]
 807ceca:	2200      	movs	r2, #0
 807cecc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 807ced0:	68fb      	ldr	r3, [r7, #12]
 807ced2:	2200      	movs	r2, #0
 807ced4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ced8:	68fb      	ldr	r3, [r7, #12]
 807ceda:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cede:	68fb      	ldr	r3, [r7, #12]
 807cee0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 807cee4:	e020      	b.n	807cf28 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 807cee6:	68fb      	ldr	r3, [r7, #12]
 807cee8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 807ceec:	2b00      	cmp	r3, #0
 807ceee:	d11b      	bne.n	807cf28 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 807cef0:	4b14      	ldr	r3, [pc, #80]	@ (807cf44 <DFU_GetStatus+0x168>)
 807cef2:	7d1b      	ldrb	r3, [r3, #20]
 807cef4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 807cef8:	2b00      	cmp	r3, #0
 807cefa:	d015      	beq.n	807cf28 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 807cefc:	68fb      	ldr	r3, [r7, #12]
 807cefe:	2202      	movs	r2, #2
 807cf00:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 807cf04:	68fb      	ldr	r3, [r7, #12]
 807cf06:	2200      	movs	r2, #0
 807cf08:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 807cf0c:	68fb      	ldr	r3, [r7, #12]
 807cf0e:	2200      	movs	r2, #0
 807cf10:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 807cf14:	68fb      	ldr	r3, [r7, #12]
 807cf16:	2200      	movs	r2, #0
 807cf18:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 807cf1c:	68fb      	ldr	r3, [r7, #12]
 807cf1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cf22:	68fb      	ldr	r3, [r7, #12]
 807cf24:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 807cf28:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 807cf2a:	68fb      	ldr	r3, [r7, #12]
 807cf2c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 807cf30:	2206      	movs	r2, #6
 807cf32:	4619      	mov	r1, r3
 807cf34:	6878      	ldr	r0, [r7, #4]
 807cf36:	f001 fa2a 	bl	807e38e <USBD_CtlSendData>
 807cf3a:	e000      	b.n	807cf3e <DFU_GetStatus+0x162>
    return;
 807cf3c:	bf00      	nop
}
 807cf3e:	3710      	adds	r7, #16
 807cf40:	46bd      	mov	sp, r7
 807cf42:	bd80      	pop	{r7, pc}
 807cf44:	20000048 	.word	0x20000048

0807cf48 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 807cf48:	b480      	push	{r7}
 807cf4a:	b085      	sub	sp, #20
 807cf4c:	af00      	add	r7, sp, #0
 807cf4e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cf50:	687b      	ldr	r3, [r7, #4]
 807cf52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807cf56:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cf58:	68fb      	ldr	r3, [r7, #12]
 807cf5a:	2b00      	cmp	r3, #0
 807cf5c:	d042      	beq.n	807cfe4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 807cf5e:	68fb      	ldr	r3, [r7, #12]
 807cf60:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807cf64:	2b0a      	cmp	r3, #10
 807cf66:	d11e      	bne.n	807cfa6 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807cf68:	68fb      	ldr	r3, [r7, #12]
 807cf6a:	2202      	movs	r2, #2
 807cf6c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 807cf70:	68fb      	ldr	r3, [r7, #12]
 807cf72:	2200      	movs	r2, #0
 807cf74:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 807cf78:	68fb      	ldr	r3, [r7, #12]
 807cf7a:	2200      	movs	r2, #0
 807cf7c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807cf80:	68fb      	ldr	r3, [r7, #12]
 807cf82:	2200      	movs	r2, #0
 807cf84:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807cf88:	68fb      	ldr	r3, [r7, #12]
 807cf8a:	2200      	movs	r2, #0
 807cf8c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807cf90:	68fb      	ldr	r3, [r7, #12]
 807cf92:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cf96:	68fb      	ldr	r3, [r7, #12]
 807cf98:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807cf9c:	68fb      	ldr	r3, [r7, #12]
 807cf9e:	2200      	movs	r2, #0
 807cfa0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 807cfa4:	e01f      	b.n	807cfe6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 807cfa6:	68fb      	ldr	r3, [r7, #12]
 807cfa8:	220a      	movs	r2, #10
 807cfaa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 807cfae:	68fb      	ldr	r3, [r7, #12]
 807cfb0:	220e      	movs	r2, #14
 807cfb2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 807cfb6:	68fb      	ldr	r3, [r7, #12]
 807cfb8:	2200      	movs	r2, #0
 807cfba:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807cfbe:	68fb      	ldr	r3, [r7, #12]
 807cfc0:	2200      	movs	r2, #0
 807cfc2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807cfc6:	68fb      	ldr	r3, [r7, #12]
 807cfc8:	2200      	movs	r2, #0
 807cfca:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807cfce:	68fb      	ldr	r3, [r7, #12]
 807cfd0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807cfd4:	68fb      	ldr	r3, [r7, #12]
 807cfd6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807cfda:	68fb      	ldr	r3, [r7, #12]
 807cfdc:	2200      	movs	r2, #0
 807cfde:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 807cfe2:	e000      	b.n	807cfe6 <DFU_ClearStatus+0x9e>
    return;
 807cfe4:	bf00      	nop
  }
}
 807cfe6:	3714      	adds	r7, #20
 807cfe8:	46bd      	mov	sp, r7
 807cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 807cfee:	4770      	bx	lr

0807cff0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 807cff0:	b580      	push	{r7, lr}
 807cff2:	b084      	sub	sp, #16
 807cff4:	af00      	add	r7, sp, #0
 807cff6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cff8:	687b      	ldr	r3, [r7, #4]
 807cffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807cffe:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807d000:	68fb      	ldr	r3, [r7, #12]
 807d002:	2b00      	cmp	r3, #0
 807d004:	d008      	beq.n	807d018 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 807d006:	68fb      	ldr	r3, [r7, #12]
 807d008:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 807d00c:	2201      	movs	r2, #1
 807d00e:	4619      	mov	r1, r3
 807d010:	6878      	ldr	r0, [r7, #4]
 807d012:	f001 f9bc 	bl	807e38e <USBD_CtlSendData>
 807d016:	e000      	b.n	807d01a <DFU_GetState+0x2a>
    return;
 807d018:	bf00      	nop
}
 807d01a:	3710      	adds	r7, #16
 807d01c:	46bd      	mov	sp, r7
 807d01e:	bd80      	pop	{r7, pc}

0807d020 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 807d020:	b480      	push	{r7}
 807d022:	b085      	sub	sp, #20
 807d024:	af00      	add	r7, sp, #0
 807d026:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807d028:	687b      	ldr	r3, [r7, #4]
 807d02a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807d02e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807d030:	68fb      	ldr	r3, [r7, #12]
 807d032:	2b00      	cmp	r3, #0
 807d034:	d03f      	beq.n	807d0b6 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807d036:	68fb      	ldr	r3, [r7, #12]
 807d038:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 807d03c:	2b02      	cmp	r3, #2
 807d03e:	d013      	beq.n	807d068 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807d040:	68fb      	ldr	r3, [r7, #12]
 807d042:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807d046:	2b03      	cmp	r3, #3
 807d048:	d00e      	beq.n	807d068 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807d04a:	68fb      	ldr	r3, [r7, #12]
 807d04c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807d050:	2b05      	cmp	r3, #5
 807d052:	d009      	beq.n	807d068 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807d054:	68fb      	ldr	r3, [r7, #12]
 807d056:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807d05a:	2b06      	cmp	r3, #6
 807d05c:	d004      	beq.n	807d068 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807d05e:	68fb      	ldr	r3, [r7, #12]
 807d060:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807d064:	2b09      	cmp	r3, #9
 807d066:	d127      	bne.n	807d0b8 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807d068:	68fb      	ldr	r3, [r7, #12]
 807d06a:	2202      	movs	r2, #2
 807d06c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 807d070:	68fb      	ldr	r3, [r7, #12]
 807d072:	2200      	movs	r2, #0
 807d074:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 807d078:	68fb      	ldr	r3, [r7, #12]
 807d07a:	2200      	movs	r2, #0
 807d07c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807d080:	68fb      	ldr	r3, [r7, #12]
 807d082:	2200      	movs	r2, #0
 807d084:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807d088:	68fb      	ldr	r3, [r7, #12]
 807d08a:	2200      	movs	r2, #0
 807d08c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d090:	68fb      	ldr	r3, [r7, #12]
 807d092:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807d096:	68fb      	ldr	r3, [r7, #12]
 807d098:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807d09c:	68fb      	ldr	r3, [r7, #12]
 807d09e:	2200      	movs	r2, #0
 807d0a0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 807d0a4:	68fb      	ldr	r3, [r7, #12]
 807d0a6:	2200      	movs	r2, #0
 807d0a8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 807d0ac:	68fb      	ldr	r3, [r7, #12]
 807d0ae:	2200      	movs	r2, #0
 807d0b0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 807d0b4:	e000      	b.n	807d0b8 <DFU_Abort+0x98>
    return;
 807d0b6:	bf00      	nop
  }
}
 807d0b8:	3714      	adds	r7, #20
 807d0ba:	46bd      	mov	sp, r7
 807d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d0c0:	4770      	bx	lr
	...

0807d0c4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 807d0c4:	b580      	push	{r7, lr}
 807d0c6:	b084      	sub	sp, #16
 807d0c8:	af00      	add	r7, sp, #0
 807d0ca:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807d0cc:	687b      	ldr	r3, [r7, #4]
 807d0ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807d0d2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807d0d4:	68fb      	ldr	r3, [r7, #12]
 807d0d6:	2b00      	cmp	r3, #0
 807d0d8:	d03b      	beq.n	807d152 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 807d0da:	68fb      	ldr	r3, [r7, #12]
 807d0dc:	2200      	movs	r2, #0
 807d0de:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 807d0e2:	4b1e      	ldr	r3, [pc, #120]	@ (807d15c <DFU_Leave+0x98>)
 807d0e4:	7d1b      	ldrb	r3, [r3, #20]
 807d0e6:	f003 0304 	and.w	r3, r3, #4
 807d0ea:	2b00      	cmp	r3, #0
 807d0ec:	d016      	beq.n	807d11c <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 807d0ee:	68fb      	ldr	r3, [r7, #12]
 807d0f0:	2206      	movs	r2, #6
 807d0f2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 807d0f6:	68fb      	ldr	r3, [r7, #12]
 807d0f8:	2200      	movs	r2, #0
 807d0fa:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807d0fe:	68fb      	ldr	r3, [r7, #12]
 807d100:	2200      	movs	r2, #0
 807d102:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 807d106:	68fb      	ldr	r3, [r7, #12]
 807d108:	2200      	movs	r2, #0
 807d10a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d10e:	68fb      	ldr	r3, [r7, #12]
 807d110:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807d114:	68fb      	ldr	r3, [r7, #12]
 807d116:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 807d11a:	e01b      	b.n	807d154 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 807d11c:	68fb      	ldr	r3, [r7, #12]
 807d11e:	2208      	movs	r2, #8
 807d120:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 807d124:	68fb      	ldr	r3, [r7, #12]
 807d126:	2200      	movs	r2, #0
 807d128:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 807d12c:	68fb      	ldr	r3, [r7, #12]
 807d12e:	2200      	movs	r2, #0
 807d130:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 807d134:	68fb      	ldr	r3, [r7, #12]
 807d136:	2200      	movs	r2, #0
 807d138:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d13c:	68fb      	ldr	r3, [r7, #12]
 807d13e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 807d142:	68fb      	ldr	r3, [r7, #12]
 807d144:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 807d148:	6878      	ldr	r0, [r7, #4]
 807d14a:	f000 f86c 	bl	807d226 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 807d14e:	f7ff f9b3 	bl	807c4b8 <__NVIC_SystemReset>
    return;
 807d152:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 807d154:	3710      	adds	r7, #16
 807d156:	46bd      	mov	sp, r7
 807d158:	bd80      	pop	{r7, pc}
 807d15a:	bf00      	nop
 807d15c:	20000048 	.word	0x20000048

0807d160 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 807d160:	b580      	push	{r7, lr}
 807d162:	b086      	sub	sp, #24
 807d164:	af00      	add	r7, sp, #0
 807d166:	60f8      	str	r0, [r7, #12]
 807d168:	60b9      	str	r1, [r7, #8]
 807d16a:	4613      	mov	r3, r2
 807d16c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 807d16e:	68fb      	ldr	r3, [r7, #12]
 807d170:	2b00      	cmp	r3, #0
 807d172:	d101      	bne.n	807d178 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 807d174:	2303      	movs	r3, #3
 807d176:	e01f      	b.n	807d1b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 807d178:	68fb      	ldr	r3, [r7, #12]
 807d17a:	2200      	movs	r2, #0
 807d17c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 807d180:	68fb      	ldr	r3, [r7, #12]
 807d182:	2200      	movs	r2, #0
 807d184:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 807d188:	68fb      	ldr	r3, [r7, #12]
 807d18a:	2200      	movs	r2, #0
 807d18c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 807d190:	68bb      	ldr	r3, [r7, #8]
 807d192:	2b00      	cmp	r3, #0
 807d194:	d003      	beq.n	807d19e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 807d196:	68fb      	ldr	r3, [r7, #12]
 807d198:	68ba      	ldr	r2, [r7, #8]
 807d19a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d19e:	68fb      	ldr	r3, [r7, #12]
 807d1a0:	2201      	movs	r2, #1
 807d1a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 807d1a6:	68fb      	ldr	r3, [r7, #12]
 807d1a8:	79fa      	ldrb	r2, [r7, #7]
 807d1aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 807d1ac:	68f8      	ldr	r0, [r7, #12]
 807d1ae:	f001 fd2d 	bl	807ec0c <USBD_LL_Init>
 807d1b2:	4603      	mov	r3, r0
 807d1b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 807d1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 807d1b8:	4618      	mov	r0, r3
 807d1ba:	3718      	adds	r7, #24
 807d1bc:	46bd      	mov	sp, r7
 807d1be:	bd80      	pop	{r7, pc}

0807d1c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 807d1c0:	b580      	push	{r7, lr}
 807d1c2:	b084      	sub	sp, #16
 807d1c4:	af00      	add	r7, sp, #0
 807d1c6:	6078      	str	r0, [r7, #4]
 807d1c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 807d1ca:	2300      	movs	r3, #0
 807d1cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 807d1ce:	683b      	ldr	r3, [r7, #0]
 807d1d0:	2b00      	cmp	r3, #0
 807d1d2:	d101      	bne.n	807d1d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 807d1d4:	2303      	movs	r3, #3
 807d1d6:	e016      	b.n	807d206 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 807d1d8:	687b      	ldr	r3, [r7, #4]
 807d1da:	683a      	ldr	r2, [r7, #0]
 807d1dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 807d1e0:	687b      	ldr	r3, [r7, #4]
 807d1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 807d1e8:	2b00      	cmp	r3, #0
 807d1ea:	d00b      	beq.n	807d204 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 807d1ec:	687b      	ldr	r3, [r7, #4]
 807d1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 807d1f4:	f107 020e 	add.w	r2, r7, #14
 807d1f8:	4610      	mov	r0, r2
 807d1fa:	4798      	blx	r3
 807d1fc:	4602      	mov	r2, r0
 807d1fe:	687b      	ldr	r3, [r7, #4]
 807d200:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 807d204:	2300      	movs	r3, #0
}
 807d206:	4618      	mov	r0, r3
 807d208:	3710      	adds	r7, #16
 807d20a:	46bd      	mov	sp, r7
 807d20c:	bd80      	pop	{r7, pc}

0807d20e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 807d20e:	b580      	push	{r7, lr}
 807d210:	b082      	sub	sp, #8
 807d212:	af00      	add	r7, sp, #0
 807d214:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 807d216:	6878      	ldr	r0, [r7, #4]
 807d218:	f001 fd44 	bl	807eca4 <USBD_LL_Start>
 807d21c:	4603      	mov	r3, r0
}
 807d21e:	4618      	mov	r0, r3
 807d220:	3708      	adds	r7, #8
 807d222:	46bd      	mov	sp, r7
 807d224:	bd80      	pop	{r7, pc}

0807d226 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 807d226:	b580      	push	{r7, lr}
 807d228:	b082      	sub	sp, #8
 807d22a:	af00      	add	r7, sp, #0
 807d22c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 807d22e:	6878      	ldr	r0, [r7, #4]
 807d230:	f001 fd53 	bl	807ecda <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 807d234:	687b      	ldr	r3, [r7, #4]
 807d236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d23a:	2b00      	cmp	r3, #0
 807d23c:	d009      	beq.n	807d252 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d23e:	687b      	ldr	r3, [r7, #4]
 807d240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d244:	685b      	ldr	r3, [r3, #4]
 807d246:	687a      	ldr	r2, [r7, #4]
 807d248:	6852      	ldr	r2, [r2, #4]
 807d24a:	b2d2      	uxtb	r2, r2
 807d24c:	4611      	mov	r1, r2
 807d24e:	6878      	ldr	r0, [r7, #4]
 807d250:	4798      	blx	r3
  }

  return USBD_OK;
 807d252:	2300      	movs	r3, #0
}
 807d254:	4618      	mov	r0, r3
 807d256:	3708      	adds	r7, #8
 807d258:	46bd      	mov	sp, r7
 807d25a:	bd80      	pop	{r7, pc}

0807d25c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 807d25c:	b480      	push	{r7}
 807d25e:	b083      	sub	sp, #12
 807d260:	af00      	add	r7, sp, #0
 807d262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 807d264:	2300      	movs	r3, #0
}
 807d266:	4618      	mov	r0, r3
 807d268:	370c      	adds	r7, #12
 807d26a:	46bd      	mov	sp, r7
 807d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d270:	4770      	bx	lr

0807d272 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807d272:	b580      	push	{r7, lr}
 807d274:	b084      	sub	sp, #16
 807d276:	af00      	add	r7, sp, #0
 807d278:	6078      	str	r0, [r7, #4]
 807d27a:	460b      	mov	r3, r1
 807d27c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 807d27e:	2303      	movs	r3, #3
 807d280:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 807d282:	687b      	ldr	r3, [r7, #4]
 807d284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d288:	2b00      	cmp	r3, #0
 807d28a:	d009      	beq.n	807d2a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 807d28c:	687b      	ldr	r3, [r7, #4]
 807d28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d292:	681b      	ldr	r3, [r3, #0]
 807d294:	78fa      	ldrb	r2, [r7, #3]
 807d296:	4611      	mov	r1, r2
 807d298:	6878      	ldr	r0, [r7, #4]
 807d29a:	4798      	blx	r3
 807d29c:	4603      	mov	r3, r0
 807d29e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 807d2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 807d2a2:	4618      	mov	r0, r3
 807d2a4:	3710      	adds	r7, #16
 807d2a6:	46bd      	mov	sp, r7
 807d2a8:	bd80      	pop	{r7, pc}

0807d2aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807d2aa:	b580      	push	{r7, lr}
 807d2ac:	b082      	sub	sp, #8
 807d2ae:	af00      	add	r7, sp, #0
 807d2b0:	6078      	str	r0, [r7, #4]
 807d2b2:	460b      	mov	r3, r1
 807d2b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 807d2b6:	687b      	ldr	r3, [r7, #4]
 807d2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d2bc:	2b00      	cmp	r3, #0
 807d2be:	d007      	beq.n	807d2d0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 807d2c0:	687b      	ldr	r3, [r7, #4]
 807d2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d2c6:	685b      	ldr	r3, [r3, #4]
 807d2c8:	78fa      	ldrb	r2, [r7, #3]
 807d2ca:	4611      	mov	r1, r2
 807d2cc:	6878      	ldr	r0, [r7, #4]
 807d2ce:	4798      	blx	r3
  }

  return USBD_OK;
 807d2d0:	2300      	movs	r3, #0
}
 807d2d2:	4618      	mov	r0, r3
 807d2d4:	3708      	adds	r7, #8
 807d2d6:	46bd      	mov	sp, r7
 807d2d8:	bd80      	pop	{r7, pc}

0807d2da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 807d2da:	b580      	push	{r7, lr}
 807d2dc:	b084      	sub	sp, #16
 807d2de:	af00      	add	r7, sp, #0
 807d2e0:	6078      	str	r0, [r7, #4]
 807d2e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 807d2e4:	687b      	ldr	r3, [r7, #4]
 807d2e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 807d2ea:	6839      	ldr	r1, [r7, #0]
 807d2ec:	4618      	mov	r0, r3
 807d2ee:	f000 ffa3 	bl	807e238 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 807d2f2:	687b      	ldr	r3, [r7, #4]
 807d2f4:	2201      	movs	r2, #1
 807d2f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 807d2fa:	687b      	ldr	r3, [r7, #4]
 807d2fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 807d300:	461a      	mov	r2, r3
 807d302:	687b      	ldr	r3, [r7, #4]
 807d304:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 807d308:	687b      	ldr	r3, [r7, #4]
 807d30a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 807d30e:	f003 031f 	and.w	r3, r3, #31
 807d312:	2b02      	cmp	r3, #2
 807d314:	d01a      	beq.n	807d34c <USBD_LL_SetupStage+0x72>
 807d316:	2b02      	cmp	r3, #2
 807d318:	d822      	bhi.n	807d360 <USBD_LL_SetupStage+0x86>
 807d31a:	2b00      	cmp	r3, #0
 807d31c:	d002      	beq.n	807d324 <USBD_LL_SetupStage+0x4a>
 807d31e:	2b01      	cmp	r3, #1
 807d320:	d00a      	beq.n	807d338 <USBD_LL_SetupStage+0x5e>
 807d322:	e01d      	b.n	807d360 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 807d324:	687b      	ldr	r3, [r7, #4]
 807d326:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 807d32a:	4619      	mov	r1, r3
 807d32c:	6878      	ldr	r0, [r7, #4]
 807d32e:	f000 fa63 	bl	807d7f8 <USBD_StdDevReq>
 807d332:	4603      	mov	r3, r0
 807d334:	73fb      	strb	r3, [r7, #15]
      break;
 807d336:	e020      	b.n	807d37a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 807d338:	687b      	ldr	r3, [r7, #4]
 807d33a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 807d33e:	4619      	mov	r1, r3
 807d340:	6878      	ldr	r0, [r7, #4]
 807d342:	f000 fac7 	bl	807d8d4 <USBD_StdItfReq>
 807d346:	4603      	mov	r3, r0
 807d348:	73fb      	strb	r3, [r7, #15]
      break;
 807d34a:	e016      	b.n	807d37a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 807d34c:	687b      	ldr	r3, [r7, #4]
 807d34e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 807d352:	4619      	mov	r1, r3
 807d354:	6878      	ldr	r0, [r7, #4]
 807d356:	f000 fb06 	bl	807d966 <USBD_StdEPReq>
 807d35a:	4603      	mov	r3, r0
 807d35c:	73fb      	strb	r3, [r7, #15]
      break;
 807d35e:	e00c      	b.n	807d37a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 807d360:	687b      	ldr	r3, [r7, #4]
 807d362:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 807d366:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 807d36a:	b2db      	uxtb	r3, r3
 807d36c:	4619      	mov	r1, r3
 807d36e:	6878      	ldr	r0, [r7, #4]
 807d370:	f001 fcf4 	bl	807ed5c <USBD_LL_StallEP>
 807d374:	4603      	mov	r3, r0
 807d376:	73fb      	strb	r3, [r7, #15]
      break;
 807d378:	bf00      	nop
  }

  return ret;
 807d37a:	7bfb      	ldrb	r3, [r7, #15]
}
 807d37c:	4618      	mov	r0, r3
 807d37e:	3710      	adds	r7, #16
 807d380:	46bd      	mov	sp, r7
 807d382:	bd80      	pop	{r7, pc}

0807d384 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 807d384:	b580      	push	{r7, lr}
 807d386:	b086      	sub	sp, #24
 807d388:	af00      	add	r7, sp, #0
 807d38a:	60f8      	str	r0, [r7, #12]
 807d38c:	460b      	mov	r3, r1
 807d38e:	607a      	str	r2, [r7, #4]
 807d390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 807d392:	7afb      	ldrb	r3, [r7, #11]
 807d394:	2b00      	cmp	r3, #0
 807d396:	d138      	bne.n	807d40a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 807d398:	68fb      	ldr	r3, [r7, #12]
 807d39a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 807d39e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 807d3a0:	68fb      	ldr	r3, [r7, #12]
 807d3a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 807d3a6:	2b03      	cmp	r3, #3
 807d3a8:	d14a      	bne.n	807d440 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 807d3aa:	693b      	ldr	r3, [r7, #16]
 807d3ac:	689a      	ldr	r2, [r3, #8]
 807d3ae:	693b      	ldr	r3, [r7, #16]
 807d3b0:	68db      	ldr	r3, [r3, #12]
 807d3b2:	429a      	cmp	r2, r3
 807d3b4:	d913      	bls.n	807d3de <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 807d3b6:	693b      	ldr	r3, [r7, #16]
 807d3b8:	689a      	ldr	r2, [r3, #8]
 807d3ba:	693b      	ldr	r3, [r7, #16]
 807d3bc:	68db      	ldr	r3, [r3, #12]
 807d3be:	1ad2      	subs	r2, r2, r3
 807d3c0:	693b      	ldr	r3, [r7, #16]
 807d3c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 807d3c4:	693b      	ldr	r3, [r7, #16]
 807d3c6:	68da      	ldr	r2, [r3, #12]
 807d3c8:	693b      	ldr	r3, [r7, #16]
 807d3ca:	689b      	ldr	r3, [r3, #8]
 807d3cc:	4293      	cmp	r3, r2
 807d3ce:	bf28      	it	cs
 807d3d0:	4613      	movcs	r3, r2
 807d3d2:	461a      	mov	r2, r3
 807d3d4:	6879      	ldr	r1, [r7, #4]
 807d3d6:	68f8      	ldr	r0, [r7, #12]
 807d3d8:	f001 f822 	bl	807e420 <USBD_CtlContinueRx>
 807d3dc:	e030      	b.n	807d440 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d3de:	68fb      	ldr	r3, [r7, #12]
 807d3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d3e4:	b2db      	uxtb	r3, r3
 807d3e6:	2b03      	cmp	r3, #3
 807d3e8:	d10b      	bne.n	807d402 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 807d3ea:	68fb      	ldr	r3, [r7, #12]
 807d3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d3f0:	691b      	ldr	r3, [r3, #16]
 807d3f2:	2b00      	cmp	r3, #0
 807d3f4:	d005      	beq.n	807d402 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 807d3f6:	68fb      	ldr	r3, [r7, #12]
 807d3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d3fc:	691b      	ldr	r3, [r3, #16]
 807d3fe:	68f8      	ldr	r0, [r7, #12]
 807d400:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 807d402:	68f8      	ldr	r0, [r7, #12]
 807d404:	f001 f81d 	bl	807e442 <USBD_CtlSendStatus>
 807d408:	e01a      	b.n	807d440 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d40a:	68fb      	ldr	r3, [r7, #12]
 807d40c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d410:	b2db      	uxtb	r3, r3
 807d412:	2b03      	cmp	r3, #3
 807d414:	d114      	bne.n	807d440 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 807d416:	68fb      	ldr	r3, [r7, #12]
 807d418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d41c:	699b      	ldr	r3, [r3, #24]
 807d41e:	2b00      	cmp	r3, #0
 807d420:	d00e      	beq.n	807d440 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 807d422:	68fb      	ldr	r3, [r7, #12]
 807d424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d428:	699b      	ldr	r3, [r3, #24]
 807d42a:	7afa      	ldrb	r2, [r7, #11]
 807d42c:	4611      	mov	r1, r2
 807d42e:	68f8      	ldr	r0, [r7, #12]
 807d430:	4798      	blx	r3
 807d432:	4603      	mov	r3, r0
 807d434:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 807d436:	7dfb      	ldrb	r3, [r7, #23]
 807d438:	2b00      	cmp	r3, #0
 807d43a:	d001      	beq.n	807d440 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 807d43c:	7dfb      	ldrb	r3, [r7, #23]
 807d43e:	e000      	b.n	807d442 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 807d440:	2300      	movs	r3, #0
}
 807d442:	4618      	mov	r0, r3
 807d444:	3718      	adds	r7, #24
 807d446:	46bd      	mov	sp, r7
 807d448:	bd80      	pop	{r7, pc}

0807d44a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 807d44a:	b580      	push	{r7, lr}
 807d44c:	b086      	sub	sp, #24
 807d44e:	af00      	add	r7, sp, #0
 807d450:	60f8      	str	r0, [r7, #12]
 807d452:	460b      	mov	r3, r1
 807d454:	607a      	str	r2, [r7, #4]
 807d456:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 807d458:	7afb      	ldrb	r3, [r7, #11]
 807d45a:	2b00      	cmp	r3, #0
 807d45c:	d16b      	bne.n	807d536 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 807d45e:	68fb      	ldr	r3, [r7, #12]
 807d460:	3314      	adds	r3, #20
 807d462:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 807d464:	68fb      	ldr	r3, [r7, #12]
 807d466:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 807d46a:	2b02      	cmp	r3, #2
 807d46c:	d156      	bne.n	807d51c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 807d46e:	693b      	ldr	r3, [r7, #16]
 807d470:	689a      	ldr	r2, [r3, #8]
 807d472:	693b      	ldr	r3, [r7, #16]
 807d474:	68db      	ldr	r3, [r3, #12]
 807d476:	429a      	cmp	r2, r3
 807d478:	d914      	bls.n	807d4a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 807d47a:	693b      	ldr	r3, [r7, #16]
 807d47c:	689a      	ldr	r2, [r3, #8]
 807d47e:	693b      	ldr	r3, [r7, #16]
 807d480:	68db      	ldr	r3, [r3, #12]
 807d482:	1ad2      	subs	r2, r2, r3
 807d484:	693b      	ldr	r3, [r7, #16]
 807d486:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 807d488:	693b      	ldr	r3, [r7, #16]
 807d48a:	689b      	ldr	r3, [r3, #8]
 807d48c:	461a      	mov	r2, r3
 807d48e:	6879      	ldr	r1, [r7, #4]
 807d490:	68f8      	ldr	r0, [r7, #12]
 807d492:	f000 ff97 	bl	807e3c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807d496:	2300      	movs	r3, #0
 807d498:	2200      	movs	r2, #0
 807d49a:	2100      	movs	r1, #0
 807d49c:	68f8      	ldr	r0, [r7, #12]
 807d49e:	f001 fd07 	bl	807eeb0 <USBD_LL_PrepareReceive>
 807d4a2:	e03b      	b.n	807d51c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 807d4a4:	693b      	ldr	r3, [r7, #16]
 807d4a6:	68da      	ldr	r2, [r3, #12]
 807d4a8:	693b      	ldr	r3, [r7, #16]
 807d4aa:	689b      	ldr	r3, [r3, #8]
 807d4ac:	429a      	cmp	r2, r3
 807d4ae:	d11c      	bne.n	807d4ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 807d4b0:	693b      	ldr	r3, [r7, #16]
 807d4b2:	685a      	ldr	r2, [r3, #4]
 807d4b4:	693b      	ldr	r3, [r7, #16]
 807d4b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 807d4b8:	429a      	cmp	r2, r3
 807d4ba:	d316      	bcc.n	807d4ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 807d4bc:	693b      	ldr	r3, [r7, #16]
 807d4be:	685a      	ldr	r2, [r3, #4]
 807d4c0:	68fb      	ldr	r3, [r7, #12]
 807d4c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 807d4c6:	429a      	cmp	r2, r3
 807d4c8:	d20f      	bcs.n	807d4ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 807d4ca:	2200      	movs	r2, #0
 807d4cc:	2100      	movs	r1, #0
 807d4ce:	68f8      	ldr	r0, [r7, #12]
 807d4d0:	f000 ff78 	bl	807e3c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 807d4d4:	68fb      	ldr	r3, [r7, #12]
 807d4d6:	2200      	movs	r2, #0
 807d4d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807d4dc:	2300      	movs	r3, #0
 807d4de:	2200      	movs	r2, #0
 807d4e0:	2100      	movs	r1, #0
 807d4e2:	68f8      	ldr	r0, [r7, #12]
 807d4e4:	f001 fce4 	bl	807eeb0 <USBD_LL_PrepareReceive>
 807d4e8:	e018      	b.n	807d51c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d4ea:	68fb      	ldr	r3, [r7, #12]
 807d4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d4f0:	b2db      	uxtb	r3, r3
 807d4f2:	2b03      	cmp	r3, #3
 807d4f4:	d10b      	bne.n	807d50e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 807d4f6:	68fb      	ldr	r3, [r7, #12]
 807d4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d4fc:	68db      	ldr	r3, [r3, #12]
 807d4fe:	2b00      	cmp	r3, #0
 807d500:	d005      	beq.n	807d50e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 807d502:	68fb      	ldr	r3, [r7, #12]
 807d504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d508:	68db      	ldr	r3, [r3, #12]
 807d50a:	68f8      	ldr	r0, [r7, #12]
 807d50c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 807d50e:	2180      	movs	r1, #128	@ 0x80
 807d510:	68f8      	ldr	r0, [r7, #12]
 807d512:	f001 fc23 	bl	807ed5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 807d516:	68f8      	ldr	r0, [r7, #12]
 807d518:	f000 ffa6 	bl	807e468 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 807d51c:	68fb      	ldr	r3, [r7, #12]
 807d51e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 807d522:	2b01      	cmp	r3, #1
 807d524:	d122      	bne.n	807d56c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 807d526:	68f8      	ldr	r0, [r7, #12]
 807d528:	f7ff fe98 	bl	807d25c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 807d52c:	68fb      	ldr	r3, [r7, #12]
 807d52e:	2200      	movs	r2, #0
 807d530:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 807d534:	e01a      	b.n	807d56c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d536:	68fb      	ldr	r3, [r7, #12]
 807d538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d53c:	b2db      	uxtb	r3, r3
 807d53e:	2b03      	cmp	r3, #3
 807d540:	d114      	bne.n	807d56c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 807d542:	68fb      	ldr	r3, [r7, #12]
 807d544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d548:	695b      	ldr	r3, [r3, #20]
 807d54a:	2b00      	cmp	r3, #0
 807d54c:	d00e      	beq.n	807d56c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 807d54e:	68fb      	ldr	r3, [r7, #12]
 807d550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d554:	695b      	ldr	r3, [r3, #20]
 807d556:	7afa      	ldrb	r2, [r7, #11]
 807d558:	4611      	mov	r1, r2
 807d55a:	68f8      	ldr	r0, [r7, #12]
 807d55c:	4798      	blx	r3
 807d55e:	4603      	mov	r3, r0
 807d560:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 807d562:	7dfb      	ldrb	r3, [r7, #23]
 807d564:	2b00      	cmp	r3, #0
 807d566:	d001      	beq.n	807d56c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 807d568:	7dfb      	ldrb	r3, [r7, #23]
 807d56a:	e000      	b.n	807d56e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 807d56c:	2300      	movs	r3, #0
}
 807d56e:	4618      	mov	r0, r3
 807d570:	3718      	adds	r7, #24
 807d572:	46bd      	mov	sp, r7
 807d574:	bd80      	pop	{r7, pc}

0807d576 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 807d576:	b580      	push	{r7, lr}
 807d578:	b082      	sub	sp, #8
 807d57a:	af00      	add	r7, sp, #0
 807d57c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d57e:	687b      	ldr	r3, [r7, #4]
 807d580:	2201      	movs	r2, #1
 807d582:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 807d586:	687b      	ldr	r3, [r7, #4]
 807d588:	2200      	movs	r2, #0
 807d58a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 807d58e:	687b      	ldr	r3, [r7, #4]
 807d590:	2200      	movs	r2, #0
 807d592:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 807d594:	687b      	ldr	r3, [r7, #4]
 807d596:	2200      	movs	r2, #0
 807d598:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 807d59c:	687b      	ldr	r3, [r7, #4]
 807d59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d5a2:	2b00      	cmp	r3, #0
 807d5a4:	d101      	bne.n	807d5aa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 807d5a6:	2303      	movs	r3, #3
 807d5a8:	e02f      	b.n	807d60a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 807d5aa:	687b      	ldr	r3, [r7, #4]
 807d5ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 807d5b0:	2b00      	cmp	r3, #0
 807d5b2:	d00f      	beq.n	807d5d4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 807d5b4:	687b      	ldr	r3, [r7, #4]
 807d5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d5ba:	685b      	ldr	r3, [r3, #4]
 807d5bc:	2b00      	cmp	r3, #0
 807d5be:	d009      	beq.n	807d5d4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d5c0:	687b      	ldr	r3, [r7, #4]
 807d5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d5c6:	685b      	ldr	r3, [r3, #4]
 807d5c8:	687a      	ldr	r2, [r7, #4]
 807d5ca:	6852      	ldr	r2, [r2, #4]
 807d5cc:	b2d2      	uxtb	r2, r2
 807d5ce:	4611      	mov	r1, r2
 807d5d0:	6878      	ldr	r0, [r7, #4]
 807d5d2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 807d5d4:	2340      	movs	r3, #64	@ 0x40
 807d5d6:	2200      	movs	r2, #0
 807d5d8:	2100      	movs	r1, #0
 807d5da:	6878      	ldr	r0, [r7, #4]
 807d5dc:	f001 fb98 	bl	807ed10 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 807d5e0:	687b      	ldr	r3, [r7, #4]
 807d5e2:	2201      	movs	r2, #1
 807d5e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 807d5e8:	687b      	ldr	r3, [r7, #4]
 807d5ea:	2240      	movs	r2, #64	@ 0x40
 807d5ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 807d5f0:	2340      	movs	r3, #64	@ 0x40
 807d5f2:	2200      	movs	r2, #0
 807d5f4:	2180      	movs	r1, #128	@ 0x80
 807d5f6:	6878      	ldr	r0, [r7, #4]
 807d5f8:	f001 fb8a 	bl	807ed10 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 807d5fc:	687b      	ldr	r3, [r7, #4]
 807d5fe:	2201      	movs	r2, #1
 807d600:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 807d602:	687b      	ldr	r3, [r7, #4]
 807d604:	2240      	movs	r2, #64	@ 0x40
 807d606:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 807d608:	2300      	movs	r3, #0
}
 807d60a:	4618      	mov	r0, r3
 807d60c:	3708      	adds	r7, #8
 807d60e:	46bd      	mov	sp, r7
 807d610:	bd80      	pop	{r7, pc}

0807d612 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 807d612:	b480      	push	{r7}
 807d614:	b083      	sub	sp, #12
 807d616:	af00      	add	r7, sp, #0
 807d618:	6078      	str	r0, [r7, #4]
 807d61a:	460b      	mov	r3, r1
 807d61c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 807d61e:	687b      	ldr	r3, [r7, #4]
 807d620:	78fa      	ldrb	r2, [r7, #3]
 807d622:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 807d624:	2300      	movs	r3, #0
}
 807d626:	4618      	mov	r0, r3
 807d628:	370c      	adds	r7, #12
 807d62a:	46bd      	mov	sp, r7
 807d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d630:	4770      	bx	lr

0807d632 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 807d632:	b480      	push	{r7}
 807d634:	b083      	sub	sp, #12
 807d636:	af00      	add	r7, sp, #0
 807d638:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 807d63a:	687b      	ldr	r3, [r7, #4]
 807d63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d640:	b2da      	uxtb	r2, r3
 807d642:	687b      	ldr	r3, [r7, #4]
 807d644:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 807d648:	687b      	ldr	r3, [r7, #4]
 807d64a:	2204      	movs	r2, #4
 807d64c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 807d650:	2300      	movs	r3, #0
}
 807d652:	4618      	mov	r0, r3
 807d654:	370c      	adds	r7, #12
 807d656:	46bd      	mov	sp, r7
 807d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d65c:	4770      	bx	lr

0807d65e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 807d65e:	b480      	push	{r7}
 807d660:	b083      	sub	sp, #12
 807d662:	af00      	add	r7, sp, #0
 807d664:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 807d666:	687b      	ldr	r3, [r7, #4]
 807d668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d66c:	b2db      	uxtb	r3, r3
 807d66e:	2b04      	cmp	r3, #4
 807d670:	d106      	bne.n	807d680 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 807d672:	687b      	ldr	r3, [r7, #4]
 807d674:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 807d678:	b2da      	uxtb	r2, r3
 807d67a:	687b      	ldr	r3, [r7, #4]
 807d67c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 807d680:	2300      	movs	r3, #0
}
 807d682:	4618      	mov	r0, r3
 807d684:	370c      	adds	r7, #12
 807d686:	46bd      	mov	sp, r7
 807d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d68c:	4770      	bx	lr

0807d68e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 807d68e:	b580      	push	{r7, lr}
 807d690:	b082      	sub	sp, #8
 807d692:	af00      	add	r7, sp, #0
 807d694:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 807d696:	687b      	ldr	r3, [r7, #4]
 807d698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d69c:	2b00      	cmp	r3, #0
 807d69e:	d101      	bne.n	807d6a4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 807d6a0:	2303      	movs	r3, #3
 807d6a2:	e012      	b.n	807d6ca <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d6a4:	687b      	ldr	r3, [r7, #4]
 807d6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d6aa:	b2db      	uxtb	r3, r3
 807d6ac:	2b03      	cmp	r3, #3
 807d6ae:	d10b      	bne.n	807d6c8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 807d6b0:	687b      	ldr	r3, [r7, #4]
 807d6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d6b6:	69db      	ldr	r3, [r3, #28]
 807d6b8:	2b00      	cmp	r3, #0
 807d6ba:	d005      	beq.n	807d6c8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 807d6bc:	687b      	ldr	r3, [r7, #4]
 807d6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d6c2:	69db      	ldr	r3, [r3, #28]
 807d6c4:	6878      	ldr	r0, [r7, #4]
 807d6c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d6c8:	2300      	movs	r3, #0
}
 807d6ca:	4618      	mov	r0, r3
 807d6cc:	3708      	adds	r7, #8
 807d6ce:	46bd      	mov	sp, r7
 807d6d0:	bd80      	pop	{r7, pc}

0807d6d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 807d6d2:	b580      	push	{r7, lr}
 807d6d4:	b082      	sub	sp, #8
 807d6d6:	af00      	add	r7, sp, #0
 807d6d8:	6078      	str	r0, [r7, #4]
 807d6da:	460b      	mov	r3, r1
 807d6dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 807d6de:	687b      	ldr	r3, [r7, #4]
 807d6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d6e4:	2b00      	cmp	r3, #0
 807d6e6:	d101      	bne.n	807d6ec <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 807d6e8:	2303      	movs	r3, #3
 807d6ea:	e014      	b.n	807d716 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d6ec:	687b      	ldr	r3, [r7, #4]
 807d6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d6f2:	b2db      	uxtb	r3, r3
 807d6f4:	2b03      	cmp	r3, #3
 807d6f6:	d10d      	bne.n	807d714 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 807d6f8:	687b      	ldr	r3, [r7, #4]
 807d6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d6fe:	6a1b      	ldr	r3, [r3, #32]
 807d700:	2b00      	cmp	r3, #0
 807d702:	d007      	beq.n	807d714 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 807d704:	687b      	ldr	r3, [r7, #4]
 807d706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d70a:	6a1b      	ldr	r3, [r3, #32]
 807d70c:	78fa      	ldrb	r2, [r7, #3]
 807d70e:	4611      	mov	r1, r2
 807d710:	6878      	ldr	r0, [r7, #4]
 807d712:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d714:	2300      	movs	r3, #0
}
 807d716:	4618      	mov	r0, r3
 807d718:	3708      	adds	r7, #8
 807d71a:	46bd      	mov	sp, r7
 807d71c:	bd80      	pop	{r7, pc}

0807d71e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 807d71e:	b580      	push	{r7, lr}
 807d720:	b082      	sub	sp, #8
 807d722:	af00      	add	r7, sp, #0
 807d724:	6078      	str	r0, [r7, #4]
 807d726:	460b      	mov	r3, r1
 807d728:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 807d72a:	687b      	ldr	r3, [r7, #4]
 807d72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d730:	2b00      	cmp	r3, #0
 807d732:	d101      	bne.n	807d738 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 807d734:	2303      	movs	r3, #3
 807d736:	e014      	b.n	807d762 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d738:	687b      	ldr	r3, [r7, #4]
 807d73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d73e:	b2db      	uxtb	r3, r3
 807d740:	2b03      	cmp	r3, #3
 807d742:	d10d      	bne.n	807d760 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 807d744:	687b      	ldr	r3, [r7, #4]
 807d746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 807d74c:	2b00      	cmp	r3, #0
 807d74e:	d007      	beq.n	807d760 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 807d750:	687b      	ldr	r3, [r7, #4]
 807d752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 807d758:	78fa      	ldrb	r2, [r7, #3]
 807d75a:	4611      	mov	r1, r2
 807d75c:	6878      	ldr	r0, [r7, #4]
 807d75e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d760:	2300      	movs	r3, #0
}
 807d762:	4618      	mov	r0, r3
 807d764:	3708      	adds	r7, #8
 807d766:	46bd      	mov	sp, r7
 807d768:	bd80      	pop	{r7, pc}

0807d76a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 807d76a:	b480      	push	{r7}
 807d76c:	b083      	sub	sp, #12
 807d76e:	af00      	add	r7, sp, #0
 807d770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 807d772:	2300      	movs	r3, #0
}
 807d774:	4618      	mov	r0, r3
 807d776:	370c      	adds	r7, #12
 807d778:	46bd      	mov	sp, r7
 807d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d77e:	4770      	bx	lr

0807d780 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 807d780:	b580      	push	{r7, lr}
 807d782:	b082      	sub	sp, #8
 807d784:	af00      	add	r7, sp, #0
 807d786:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d788:	687b      	ldr	r3, [r7, #4]
 807d78a:	2201      	movs	r2, #1
 807d78c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 807d790:	687b      	ldr	r3, [r7, #4]
 807d792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d796:	2b00      	cmp	r3, #0
 807d798:	d009      	beq.n	807d7ae <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d79a:	687b      	ldr	r3, [r7, #4]
 807d79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d7a0:	685b      	ldr	r3, [r3, #4]
 807d7a2:	687a      	ldr	r2, [r7, #4]
 807d7a4:	6852      	ldr	r2, [r2, #4]
 807d7a6:	b2d2      	uxtb	r2, r2
 807d7a8:	4611      	mov	r1, r2
 807d7aa:	6878      	ldr	r0, [r7, #4]
 807d7ac:	4798      	blx	r3
  }

  return USBD_OK;
 807d7ae:	2300      	movs	r3, #0
}
 807d7b0:	4618      	mov	r0, r3
 807d7b2:	3708      	adds	r7, #8
 807d7b4:	46bd      	mov	sp, r7
 807d7b6:	bd80      	pop	{r7, pc}

0807d7b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 807d7b8:	b480      	push	{r7}
 807d7ba:	b087      	sub	sp, #28
 807d7bc:	af00      	add	r7, sp, #0
 807d7be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 807d7c0:	687b      	ldr	r3, [r7, #4]
 807d7c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 807d7c4:	697b      	ldr	r3, [r7, #20]
 807d7c6:	781b      	ldrb	r3, [r3, #0]
 807d7c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 807d7ca:	697b      	ldr	r3, [r7, #20]
 807d7cc:	3301      	adds	r3, #1
 807d7ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 807d7d0:	697b      	ldr	r3, [r7, #20]
 807d7d2:	781b      	ldrb	r3, [r3, #0]
 807d7d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 807d7d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 807d7da:	021b      	lsls	r3, r3, #8
 807d7dc:	b21a      	sxth	r2, r3
 807d7de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 807d7e2:	4313      	orrs	r3, r2
 807d7e4:	b21b      	sxth	r3, r3
 807d7e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 807d7e8:	89fb      	ldrh	r3, [r7, #14]
}
 807d7ea:	4618      	mov	r0, r3
 807d7ec:	371c      	adds	r7, #28
 807d7ee:	46bd      	mov	sp, r7
 807d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d7f4:	4770      	bx	lr
	...

0807d7f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d7f8:	b580      	push	{r7, lr}
 807d7fa:	b084      	sub	sp, #16
 807d7fc:	af00      	add	r7, sp, #0
 807d7fe:	6078      	str	r0, [r7, #4]
 807d800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807d802:	2300      	movs	r3, #0
 807d804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d806:	683b      	ldr	r3, [r7, #0]
 807d808:	781b      	ldrb	r3, [r3, #0]
 807d80a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 807d80e:	2b40      	cmp	r3, #64	@ 0x40
 807d810:	d005      	beq.n	807d81e <USBD_StdDevReq+0x26>
 807d812:	2b40      	cmp	r3, #64	@ 0x40
 807d814:	d853      	bhi.n	807d8be <USBD_StdDevReq+0xc6>
 807d816:	2b00      	cmp	r3, #0
 807d818:	d00b      	beq.n	807d832 <USBD_StdDevReq+0x3a>
 807d81a:	2b20      	cmp	r3, #32
 807d81c:	d14f      	bne.n	807d8be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d81e:	687b      	ldr	r3, [r7, #4]
 807d820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d824:	689b      	ldr	r3, [r3, #8]
 807d826:	6839      	ldr	r1, [r7, #0]
 807d828:	6878      	ldr	r0, [r7, #4]
 807d82a:	4798      	blx	r3
 807d82c:	4603      	mov	r3, r0
 807d82e:	73fb      	strb	r3, [r7, #15]
      break;
 807d830:	e04a      	b.n	807d8c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807d832:	683b      	ldr	r3, [r7, #0]
 807d834:	785b      	ldrb	r3, [r3, #1]
 807d836:	2b09      	cmp	r3, #9
 807d838:	d83b      	bhi.n	807d8b2 <USBD_StdDevReq+0xba>
 807d83a:	a201      	add	r2, pc, #4	@ (adr r2, 807d840 <USBD_StdDevReq+0x48>)
 807d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807d840:	0807d895 	.word	0x0807d895
 807d844:	0807d8a9 	.word	0x0807d8a9
 807d848:	0807d8b3 	.word	0x0807d8b3
 807d84c:	0807d89f 	.word	0x0807d89f
 807d850:	0807d8b3 	.word	0x0807d8b3
 807d854:	0807d873 	.word	0x0807d873
 807d858:	0807d869 	.word	0x0807d869
 807d85c:	0807d8b3 	.word	0x0807d8b3
 807d860:	0807d88b 	.word	0x0807d88b
 807d864:	0807d87d 	.word	0x0807d87d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 807d868:	6839      	ldr	r1, [r7, #0]
 807d86a:	6878      	ldr	r0, [r7, #4]
 807d86c:	f000 f9de 	bl	807dc2c <USBD_GetDescriptor>
          break;
 807d870:	e024      	b.n	807d8bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 807d872:	6839      	ldr	r1, [r7, #0]
 807d874:	6878      	ldr	r0, [r7, #4]
 807d876:	f000 fb55 	bl	807df24 <USBD_SetAddress>
          break;
 807d87a:	e01f      	b.n	807d8bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 807d87c:	6839      	ldr	r1, [r7, #0]
 807d87e:	6878      	ldr	r0, [r7, #4]
 807d880:	f000 fb94 	bl	807dfac <USBD_SetConfig>
 807d884:	4603      	mov	r3, r0
 807d886:	73fb      	strb	r3, [r7, #15]
          break;
 807d888:	e018      	b.n	807d8bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 807d88a:	6839      	ldr	r1, [r7, #0]
 807d88c:	6878      	ldr	r0, [r7, #4]
 807d88e:	f000 fc33 	bl	807e0f8 <USBD_GetConfig>
          break;
 807d892:	e013      	b.n	807d8bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 807d894:	6839      	ldr	r1, [r7, #0]
 807d896:	6878      	ldr	r0, [r7, #4]
 807d898:	f000 fc64 	bl	807e164 <USBD_GetStatus>
          break;
 807d89c:	e00e      	b.n	807d8bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 807d89e:	6839      	ldr	r1, [r7, #0]
 807d8a0:	6878      	ldr	r0, [r7, #4]
 807d8a2:	f000 fc93 	bl	807e1cc <USBD_SetFeature>
          break;
 807d8a6:	e009      	b.n	807d8bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 807d8a8:	6839      	ldr	r1, [r7, #0]
 807d8aa:	6878      	ldr	r0, [r7, #4]
 807d8ac:	f000 fca2 	bl	807e1f4 <USBD_ClrFeature>
          break;
 807d8b0:	e004      	b.n	807d8bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 807d8b2:	6839      	ldr	r1, [r7, #0]
 807d8b4:	6878      	ldr	r0, [r7, #4]
 807d8b6:	f000 fcf9 	bl	807e2ac <USBD_CtlError>
          break;
 807d8ba:	bf00      	nop
      }
      break;
 807d8bc:	e004      	b.n	807d8c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 807d8be:	6839      	ldr	r1, [r7, #0]
 807d8c0:	6878      	ldr	r0, [r7, #4]
 807d8c2:	f000 fcf3 	bl	807e2ac <USBD_CtlError>
      break;
 807d8c6:	bf00      	nop
  }

  return ret;
 807d8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 807d8ca:	4618      	mov	r0, r3
 807d8cc:	3710      	adds	r7, #16
 807d8ce:	46bd      	mov	sp, r7
 807d8d0:	bd80      	pop	{r7, pc}
 807d8d2:	bf00      	nop

0807d8d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d8d4:	b580      	push	{r7, lr}
 807d8d6:	b084      	sub	sp, #16
 807d8d8:	af00      	add	r7, sp, #0
 807d8da:	6078      	str	r0, [r7, #4]
 807d8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807d8de:	2300      	movs	r3, #0
 807d8e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d8e2:	683b      	ldr	r3, [r7, #0]
 807d8e4:	781b      	ldrb	r3, [r3, #0]
 807d8e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 807d8ea:	2b40      	cmp	r3, #64	@ 0x40
 807d8ec:	d005      	beq.n	807d8fa <USBD_StdItfReq+0x26>
 807d8ee:	2b40      	cmp	r3, #64	@ 0x40
 807d8f0:	d82f      	bhi.n	807d952 <USBD_StdItfReq+0x7e>
 807d8f2:	2b00      	cmp	r3, #0
 807d8f4:	d001      	beq.n	807d8fa <USBD_StdItfReq+0x26>
 807d8f6:	2b20      	cmp	r3, #32
 807d8f8:	d12b      	bne.n	807d952 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 807d8fa:	687b      	ldr	r3, [r7, #4]
 807d8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d900:	b2db      	uxtb	r3, r3
 807d902:	3b01      	subs	r3, #1
 807d904:	2b02      	cmp	r3, #2
 807d906:	d81d      	bhi.n	807d944 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 807d908:	683b      	ldr	r3, [r7, #0]
 807d90a:	889b      	ldrh	r3, [r3, #4]
 807d90c:	b2db      	uxtb	r3, r3
 807d90e:	2b01      	cmp	r3, #1
 807d910:	d813      	bhi.n	807d93a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d912:	687b      	ldr	r3, [r7, #4]
 807d914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d918:	689b      	ldr	r3, [r3, #8]
 807d91a:	6839      	ldr	r1, [r7, #0]
 807d91c:	6878      	ldr	r0, [r7, #4]
 807d91e:	4798      	blx	r3
 807d920:	4603      	mov	r3, r0
 807d922:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 807d924:	683b      	ldr	r3, [r7, #0]
 807d926:	88db      	ldrh	r3, [r3, #6]
 807d928:	2b00      	cmp	r3, #0
 807d92a:	d110      	bne.n	807d94e <USBD_StdItfReq+0x7a>
 807d92c:	7bfb      	ldrb	r3, [r7, #15]
 807d92e:	2b00      	cmp	r3, #0
 807d930:	d10d      	bne.n	807d94e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 807d932:	6878      	ldr	r0, [r7, #4]
 807d934:	f000 fd85 	bl	807e442 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 807d938:	e009      	b.n	807d94e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 807d93a:	6839      	ldr	r1, [r7, #0]
 807d93c:	6878      	ldr	r0, [r7, #4]
 807d93e:	f000 fcb5 	bl	807e2ac <USBD_CtlError>
          break;
 807d942:	e004      	b.n	807d94e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 807d944:	6839      	ldr	r1, [r7, #0]
 807d946:	6878      	ldr	r0, [r7, #4]
 807d948:	f000 fcb0 	bl	807e2ac <USBD_CtlError>
          break;
 807d94c:	e000      	b.n	807d950 <USBD_StdItfReq+0x7c>
          break;
 807d94e:	bf00      	nop
      }
      break;
 807d950:	e004      	b.n	807d95c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 807d952:	6839      	ldr	r1, [r7, #0]
 807d954:	6878      	ldr	r0, [r7, #4]
 807d956:	f000 fca9 	bl	807e2ac <USBD_CtlError>
      break;
 807d95a:	bf00      	nop
  }

  return ret;
 807d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 807d95e:	4618      	mov	r0, r3
 807d960:	3710      	adds	r7, #16
 807d962:	46bd      	mov	sp, r7
 807d964:	bd80      	pop	{r7, pc}

0807d966 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d966:	b580      	push	{r7, lr}
 807d968:	b084      	sub	sp, #16
 807d96a:	af00      	add	r7, sp, #0
 807d96c:	6078      	str	r0, [r7, #4]
 807d96e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 807d970:	2300      	movs	r3, #0
 807d972:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 807d974:	683b      	ldr	r3, [r7, #0]
 807d976:	889b      	ldrh	r3, [r3, #4]
 807d978:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d97a:	683b      	ldr	r3, [r7, #0]
 807d97c:	781b      	ldrb	r3, [r3, #0]
 807d97e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 807d982:	2b40      	cmp	r3, #64	@ 0x40
 807d984:	d007      	beq.n	807d996 <USBD_StdEPReq+0x30>
 807d986:	2b40      	cmp	r3, #64	@ 0x40
 807d988:	f200 8145 	bhi.w	807dc16 <USBD_StdEPReq+0x2b0>
 807d98c:	2b00      	cmp	r3, #0
 807d98e:	d00c      	beq.n	807d9aa <USBD_StdEPReq+0x44>
 807d990:	2b20      	cmp	r3, #32
 807d992:	f040 8140 	bne.w	807dc16 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d996:	687b      	ldr	r3, [r7, #4]
 807d998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807d99c:	689b      	ldr	r3, [r3, #8]
 807d99e:	6839      	ldr	r1, [r7, #0]
 807d9a0:	6878      	ldr	r0, [r7, #4]
 807d9a2:	4798      	blx	r3
 807d9a4:	4603      	mov	r3, r0
 807d9a6:	73fb      	strb	r3, [r7, #15]
      break;
 807d9a8:	e13a      	b.n	807dc20 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807d9aa:	683b      	ldr	r3, [r7, #0]
 807d9ac:	785b      	ldrb	r3, [r3, #1]
 807d9ae:	2b03      	cmp	r3, #3
 807d9b0:	d007      	beq.n	807d9c2 <USBD_StdEPReq+0x5c>
 807d9b2:	2b03      	cmp	r3, #3
 807d9b4:	f300 8129 	bgt.w	807dc0a <USBD_StdEPReq+0x2a4>
 807d9b8:	2b00      	cmp	r3, #0
 807d9ba:	d07f      	beq.n	807dabc <USBD_StdEPReq+0x156>
 807d9bc:	2b01      	cmp	r3, #1
 807d9be:	d03c      	beq.n	807da3a <USBD_StdEPReq+0xd4>
 807d9c0:	e123      	b.n	807dc0a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 807d9c2:	687b      	ldr	r3, [r7, #4]
 807d9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807d9c8:	b2db      	uxtb	r3, r3
 807d9ca:	2b02      	cmp	r3, #2
 807d9cc:	d002      	beq.n	807d9d4 <USBD_StdEPReq+0x6e>
 807d9ce:	2b03      	cmp	r3, #3
 807d9d0:	d016      	beq.n	807da00 <USBD_StdEPReq+0x9a>
 807d9d2:	e02c      	b.n	807da2e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807d9d4:	7bbb      	ldrb	r3, [r7, #14]
 807d9d6:	2b00      	cmp	r3, #0
 807d9d8:	d00d      	beq.n	807d9f6 <USBD_StdEPReq+0x90>
 807d9da:	7bbb      	ldrb	r3, [r7, #14]
 807d9dc:	2b80      	cmp	r3, #128	@ 0x80
 807d9de:	d00a      	beq.n	807d9f6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 807d9e0:	7bbb      	ldrb	r3, [r7, #14]
 807d9e2:	4619      	mov	r1, r3
 807d9e4:	6878      	ldr	r0, [r7, #4]
 807d9e6:	f001 f9b9 	bl	807ed5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 807d9ea:	2180      	movs	r1, #128	@ 0x80
 807d9ec:	6878      	ldr	r0, [r7, #4]
 807d9ee:	f001 f9b5 	bl	807ed5c <USBD_LL_StallEP>
 807d9f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807d9f4:	e020      	b.n	807da38 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 807d9f6:	6839      	ldr	r1, [r7, #0]
 807d9f8:	6878      	ldr	r0, [r7, #4]
 807d9fa:	f000 fc57 	bl	807e2ac <USBD_CtlError>
              break;
 807d9fe:	e01b      	b.n	807da38 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 807da00:	683b      	ldr	r3, [r7, #0]
 807da02:	885b      	ldrh	r3, [r3, #2]
 807da04:	2b00      	cmp	r3, #0
 807da06:	d10e      	bne.n	807da26 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 807da08:	7bbb      	ldrb	r3, [r7, #14]
 807da0a:	2b00      	cmp	r3, #0
 807da0c:	d00b      	beq.n	807da26 <USBD_StdEPReq+0xc0>
 807da0e:	7bbb      	ldrb	r3, [r7, #14]
 807da10:	2b80      	cmp	r3, #128	@ 0x80
 807da12:	d008      	beq.n	807da26 <USBD_StdEPReq+0xc0>
 807da14:	683b      	ldr	r3, [r7, #0]
 807da16:	88db      	ldrh	r3, [r3, #6]
 807da18:	2b00      	cmp	r3, #0
 807da1a:	d104      	bne.n	807da26 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 807da1c:	7bbb      	ldrb	r3, [r7, #14]
 807da1e:	4619      	mov	r1, r3
 807da20:	6878      	ldr	r0, [r7, #4]
 807da22:	f001 f99b 	bl	807ed5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 807da26:	6878      	ldr	r0, [r7, #4]
 807da28:	f000 fd0b 	bl	807e442 <USBD_CtlSendStatus>

              break;
 807da2c:	e004      	b.n	807da38 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 807da2e:	6839      	ldr	r1, [r7, #0]
 807da30:	6878      	ldr	r0, [r7, #4]
 807da32:	f000 fc3b 	bl	807e2ac <USBD_CtlError>
              break;
 807da36:	bf00      	nop
          }
          break;
 807da38:	e0ec      	b.n	807dc14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 807da3a:	687b      	ldr	r3, [r7, #4]
 807da3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807da40:	b2db      	uxtb	r3, r3
 807da42:	2b02      	cmp	r3, #2
 807da44:	d002      	beq.n	807da4c <USBD_StdEPReq+0xe6>
 807da46:	2b03      	cmp	r3, #3
 807da48:	d016      	beq.n	807da78 <USBD_StdEPReq+0x112>
 807da4a:	e030      	b.n	807daae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807da4c:	7bbb      	ldrb	r3, [r7, #14]
 807da4e:	2b00      	cmp	r3, #0
 807da50:	d00d      	beq.n	807da6e <USBD_StdEPReq+0x108>
 807da52:	7bbb      	ldrb	r3, [r7, #14]
 807da54:	2b80      	cmp	r3, #128	@ 0x80
 807da56:	d00a      	beq.n	807da6e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 807da58:	7bbb      	ldrb	r3, [r7, #14]
 807da5a:	4619      	mov	r1, r3
 807da5c:	6878      	ldr	r0, [r7, #4]
 807da5e:	f001 f97d 	bl	807ed5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 807da62:	2180      	movs	r1, #128	@ 0x80
 807da64:	6878      	ldr	r0, [r7, #4]
 807da66:	f001 f979 	bl	807ed5c <USBD_LL_StallEP>
 807da6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807da6c:	e025      	b.n	807daba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 807da6e:	6839      	ldr	r1, [r7, #0]
 807da70:	6878      	ldr	r0, [r7, #4]
 807da72:	f000 fc1b 	bl	807e2ac <USBD_CtlError>
              break;
 807da76:	e020      	b.n	807daba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 807da78:	683b      	ldr	r3, [r7, #0]
 807da7a:	885b      	ldrh	r3, [r3, #2]
 807da7c:	2b00      	cmp	r3, #0
 807da7e:	d11b      	bne.n	807dab8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 807da80:	7bbb      	ldrb	r3, [r7, #14]
 807da82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 807da86:	2b00      	cmp	r3, #0
 807da88:	d004      	beq.n	807da94 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 807da8a:	7bbb      	ldrb	r3, [r7, #14]
 807da8c:	4619      	mov	r1, r3
 807da8e:	6878      	ldr	r0, [r7, #4]
 807da90:	f001 f983 	bl	807ed9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 807da94:	6878      	ldr	r0, [r7, #4]
 807da96:	f000 fcd4 	bl	807e442 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807da9a:	687b      	ldr	r3, [r7, #4]
 807da9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807daa0:	689b      	ldr	r3, [r3, #8]
 807daa2:	6839      	ldr	r1, [r7, #0]
 807daa4:	6878      	ldr	r0, [r7, #4]
 807daa6:	4798      	blx	r3
 807daa8:	4603      	mov	r3, r0
 807daaa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 807daac:	e004      	b.n	807dab8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 807daae:	6839      	ldr	r1, [r7, #0]
 807dab0:	6878      	ldr	r0, [r7, #4]
 807dab2:	f000 fbfb 	bl	807e2ac <USBD_CtlError>
              break;
 807dab6:	e000      	b.n	807daba <USBD_StdEPReq+0x154>
              break;
 807dab8:	bf00      	nop
          }
          break;
 807daba:	e0ab      	b.n	807dc14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 807dabc:	687b      	ldr	r3, [r7, #4]
 807dabe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807dac2:	b2db      	uxtb	r3, r3
 807dac4:	2b02      	cmp	r3, #2
 807dac6:	d002      	beq.n	807dace <USBD_StdEPReq+0x168>
 807dac8:	2b03      	cmp	r3, #3
 807daca:	d032      	beq.n	807db32 <USBD_StdEPReq+0x1cc>
 807dacc:	e097      	b.n	807dbfe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807dace:	7bbb      	ldrb	r3, [r7, #14]
 807dad0:	2b00      	cmp	r3, #0
 807dad2:	d007      	beq.n	807dae4 <USBD_StdEPReq+0x17e>
 807dad4:	7bbb      	ldrb	r3, [r7, #14]
 807dad6:	2b80      	cmp	r3, #128	@ 0x80
 807dad8:	d004      	beq.n	807dae4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 807dada:	6839      	ldr	r1, [r7, #0]
 807dadc:	6878      	ldr	r0, [r7, #4]
 807dade:	f000 fbe5 	bl	807e2ac <USBD_CtlError>
                break;
 807dae2:	e091      	b.n	807dc08 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807dae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807dae8:	2b00      	cmp	r3, #0
 807daea:	da0b      	bge.n	807db04 <USBD_StdEPReq+0x19e>
 807daec:	7bbb      	ldrb	r3, [r7, #14]
 807daee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 807daf2:	4613      	mov	r3, r2
 807daf4:	009b      	lsls	r3, r3, #2
 807daf6:	4413      	add	r3, r2
 807daf8:	009b      	lsls	r3, r3, #2
 807dafa:	3310      	adds	r3, #16
 807dafc:	687a      	ldr	r2, [r7, #4]
 807dafe:	4413      	add	r3, r2
 807db00:	3304      	adds	r3, #4
 807db02:	e00b      	b.n	807db1c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807db04:	7bbb      	ldrb	r3, [r7, #14]
 807db06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807db0a:	4613      	mov	r3, r2
 807db0c:	009b      	lsls	r3, r3, #2
 807db0e:	4413      	add	r3, r2
 807db10:	009b      	lsls	r3, r3, #2
 807db12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 807db16:	687a      	ldr	r2, [r7, #4]
 807db18:	4413      	add	r3, r2
 807db1a:	3304      	adds	r3, #4
 807db1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 807db1e:	68bb      	ldr	r3, [r7, #8]
 807db20:	2200      	movs	r2, #0
 807db22:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 807db24:	68bb      	ldr	r3, [r7, #8]
 807db26:	2202      	movs	r2, #2
 807db28:	4619      	mov	r1, r3
 807db2a:	6878      	ldr	r0, [r7, #4]
 807db2c:	f000 fc2f 	bl	807e38e <USBD_CtlSendData>
              break;
 807db30:	e06a      	b.n	807dc08 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 807db32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807db36:	2b00      	cmp	r3, #0
 807db38:	da11      	bge.n	807db5e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 807db3a:	7bbb      	ldrb	r3, [r7, #14]
 807db3c:	f003 020f 	and.w	r2, r3, #15
 807db40:	6879      	ldr	r1, [r7, #4]
 807db42:	4613      	mov	r3, r2
 807db44:	009b      	lsls	r3, r3, #2
 807db46:	4413      	add	r3, r2
 807db48:	009b      	lsls	r3, r3, #2
 807db4a:	440b      	add	r3, r1
 807db4c:	3324      	adds	r3, #36	@ 0x24
 807db4e:	881b      	ldrh	r3, [r3, #0]
 807db50:	2b00      	cmp	r3, #0
 807db52:	d117      	bne.n	807db84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 807db54:	6839      	ldr	r1, [r7, #0]
 807db56:	6878      	ldr	r0, [r7, #4]
 807db58:	f000 fba8 	bl	807e2ac <USBD_CtlError>
                  break;
 807db5c:	e054      	b.n	807dc08 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 807db5e:	7bbb      	ldrb	r3, [r7, #14]
 807db60:	f003 020f 	and.w	r2, r3, #15
 807db64:	6879      	ldr	r1, [r7, #4]
 807db66:	4613      	mov	r3, r2
 807db68:	009b      	lsls	r3, r3, #2
 807db6a:	4413      	add	r3, r2
 807db6c:	009b      	lsls	r3, r3, #2
 807db6e:	440b      	add	r3, r1
 807db70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 807db74:	881b      	ldrh	r3, [r3, #0]
 807db76:	2b00      	cmp	r3, #0
 807db78:	d104      	bne.n	807db84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 807db7a:	6839      	ldr	r1, [r7, #0]
 807db7c:	6878      	ldr	r0, [r7, #4]
 807db7e:	f000 fb95 	bl	807e2ac <USBD_CtlError>
                  break;
 807db82:	e041      	b.n	807dc08 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807db84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807db88:	2b00      	cmp	r3, #0
 807db8a:	da0b      	bge.n	807dba4 <USBD_StdEPReq+0x23e>
 807db8c:	7bbb      	ldrb	r3, [r7, #14]
 807db8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 807db92:	4613      	mov	r3, r2
 807db94:	009b      	lsls	r3, r3, #2
 807db96:	4413      	add	r3, r2
 807db98:	009b      	lsls	r3, r3, #2
 807db9a:	3310      	adds	r3, #16
 807db9c:	687a      	ldr	r2, [r7, #4]
 807db9e:	4413      	add	r3, r2
 807dba0:	3304      	adds	r3, #4
 807dba2:	e00b      	b.n	807dbbc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807dba4:	7bbb      	ldrb	r3, [r7, #14]
 807dba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807dbaa:	4613      	mov	r3, r2
 807dbac:	009b      	lsls	r3, r3, #2
 807dbae:	4413      	add	r3, r2
 807dbb0:	009b      	lsls	r3, r3, #2
 807dbb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 807dbb6:	687a      	ldr	r2, [r7, #4]
 807dbb8:	4413      	add	r3, r2
 807dbba:	3304      	adds	r3, #4
 807dbbc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 807dbbe:	7bbb      	ldrb	r3, [r7, #14]
 807dbc0:	2b00      	cmp	r3, #0
 807dbc2:	d002      	beq.n	807dbca <USBD_StdEPReq+0x264>
 807dbc4:	7bbb      	ldrb	r3, [r7, #14]
 807dbc6:	2b80      	cmp	r3, #128	@ 0x80
 807dbc8:	d103      	bne.n	807dbd2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 807dbca:	68bb      	ldr	r3, [r7, #8]
 807dbcc:	2200      	movs	r2, #0
 807dbce:	601a      	str	r2, [r3, #0]
 807dbd0:	e00e      	b.n	807dbf0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 807dbd2:	7bbb      	ldrb	r3, [r7, #14]
 807dbd4:	4619      	mov	r1, r3
 807dbd6:	6878      	ldr	r0, [r7, #4]
 807dbd8:	f001 f8fe 	bl	807edd8 <USBD_LL_IsStallEP>
 807dbdc:	4603      	mov	r3, r0
 807dbde:	2b00      	cmp	r3, #0
 807dbe0:	d003      	beq.n	807dbea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 807dbe2:	68bb      	ldr	r3, [r7, #8]
 807dbe4:	2201      	movs	r2, #1
 807dbe6:	601a      	str	r2, [r3, #0]
 807dbe8:	e002      	b.n	807dbf0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 807dbea:	68bb      	ldr	r3, [r7, #8]
 807dbec:	2200      	movs	r2, #0
 807dbee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 807dbf0:	68bb      	ldr	r3, [r7, #8]
 807dbf2:	2202      	movs	r2, #2
 807dbf4:	4619      	mov	r1, r3
 807dbf6:	6878      	ldr	r0, [r7, #4]
 807dbf8:	f000 fbc9 	bl	807e38e <USBD_CtlSendData>
              break;
 807dbfc:	e004      	b.n	807dc08 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 807dbfe:	6839      	ldr	r1, [r7, #0]
 807dc00:	6878      	ldr	r0, [r7, #4]
 807dc02:	f000 fb53 	bl	807e2ac <USBD_CtlError>
              break;
 807dc06:	bf00      	nop
          }
          break;
 807dc08:	e004      	b.n	807dc14 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 807dc0a:	6839      	ldr	r1, [r7, #0]
 807dc0c:	6878      	ldr	r0, [r7, #4]
 807dc0e:	f000 fb4d 	bl	807e2ac <USBD_CtlError>
          break;
 807dc12:	bf00      	nop
      }
      break;
 807dc14:	e004      	b.n	807dc20 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 807dc16:	6839      	ldr	r1, [r7, #0]
 807dc18:	6878      	ldr	r0, [r7, #4]
 807dc1a:	f000 fb47 	bl	807e2ac <USBD_CtlError>
      break;
 807dc1e:	bf00      	nop
  }

  return ret;
 807dc20:	7bfb      	ldrb	r3, [r7, #15]
}
 807dc22:	4618      	mov	r0, r3
 807dc24:	3710      	adds	r7, #16
 807dc26:	46bd      	mov	sp, r7
 807dc28:	bd80      	pop	{r7, pc}
	...

0807dc2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807dc2c:	b580      	push	{r7, lr}
 807dc2e:	b084      	sub	sp, #16
 807dc30:	af00      	add	r7, sp, #0
 807dc32:	6078      	str	r0, [r7, #4]
 807dc34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 807dc36:	2300      	movs	r3, #0
 807dc38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 807dc3a:	2300      	movs	r3, #0
 807dc3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 807dc3e:	2300      	movs	r3, #0
 807dc40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 807dc42:	683b      	ldr	r3, [r7, #0]
 807dc44:	885b      	ldrh	r3, [r3, #2]
 807dc46:	0a1b      	lsrs	r3, r3, #8
 807dc48:	b29b      	uxth	r3, r3
 807dc4a:	3b01      	subs	r3, #1
 807dc4c:	2b06      	cmp	r3, #6
 807dc4e:	f200 813b 	bhi.w	807dec8 <USBD_GetDescriptor+0x29c>
 807dc52:	a201      	add	r2, pc, #4	@ (adr r2, 807dc58 <USBD_GetDescriptor+0x2c>)
 807dc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807dc58:	0807dc75 	.word	0x0807dc75
 807dc5c:	0807dc8d 	.word	0x0807dc8d
 807dc60:	0807dccd 	.word	0x0807dccd
 807dc64:	0807dec9 	.word	0x0807dec9
 807dc68:	0807dec9 	.word	0x0807dec9
 807dc6c:	0807de69 	.word	0x0807de69
 807dc70:	0807de95 	.word	0x0807de95
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 807dc74:	687b      	ldr	r3, [r7, #4]
 807dc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dc7a:	681b      	ldr	r3, [r3, #0]
 807dc7c:	687a      	ldr	r2, [r7, #4]
 807dc7e:	7c12      	ldrb	r2, [r2, #16]
 807dc80:	f107 0108 	add.w	r1, r7, #8
 807dc84:	4610      	mov	r0, r2
 807dc86:	4798      	blx	r3
 807dc88:	60f8      	str	r0, [r7, #12]
      break;
 807dc8a:	e125      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807dc8c:	687b      	ldr	r3, [r7, #4]
 807dc8e:	7c1b      	ldrb	r3, [r3, #16]
 807dc90:	2b00      	cmp	r3, #0
 807dc92:	d10d      	bne.n	807dcb0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 807dc94:	687b      	ldr	r3, [r7, #4]
 807dc96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807dc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 807dc9c:	f107 0208 	add.w	r2, r7, #8
 807dca0:	4610      	mov	r0, r2
 807dca2:	4798      	blx	r3
 807dca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807dca6:	68fb      	ldr	r3, [r7, #12]
 807dca8:	3301      	adds	r3, #1
 807dcaa:	2202      	movs	r2, #2
 807dcac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 807dcae:	e113      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 807dcb0:	687b      	ldr	r3, [r7, #4]
 807dcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807dcb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 807dcb8:	f107 0208 	add.w	r2, r7, #8
 807dcbc:	4610      	mov	r0, r2
 807dcbe:	4798      	blx	r3
 807dcc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807dcc2:	68fb      	ldr	r3, [r7, #12]
 807dcc4:	3301      	adds	r3, #1
 807dcc6:	2202      	movs	r2, #2
 807dcc8:	701a      	strb	r2, [r3, #0]
      break;
 807dcca:	e105      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 807dccc:	683b      	ldr	r3, [r7, #0]
 807dcce:	885b      	ldrh	r3, [r3, #2]
 807dcd0:	b2db      	uxtb	r3, r3
 807dcd2:	2b05      	cmp	r3, #5
 807dcd4:	f200 80ac 	bhi.w	807de30 <USBD_GetDescriptor+0x204>
 807dcd8:	a201      	add	r2, pc, #4	@ (adr r2, 807dce0 <USBD_GetDescriptor+0xb4>)
 807dcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807dcde:	bf00      	nop
 807dce0:	0807dcf9 	.word	0x0807dcf9
 807dce4:	0807dd2d 	.word	0x0807dd2d
 807dce8:	0807dd61 	.word	0x0807dd61
 807dcec:	0807dd95 	.word	0x0807dd95
 807dcf0:	0807ddc9 	.word	0x0807ddc9
 807dcf4:	0807ddfd 	.word	0x0807ddfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 807dcf8:	687b      	ldr	r3, [r7, #4]
 807dcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dcfe:	685b      	ldr	r3, [r3, #4]
 807dd00:	2b00      	cmp	r3, #0
 807dd02:	d00b      	beq.n	807dd1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 807dd04:	687b      	ldr	r3, [r7, #4]
 807dd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dd0a:	685b      	ldr	r3, [r3, #4]
 807dd0c:	687a      	ldr	r2, [r7, #4]
 807dd0e:	7c12      	ldrb	r2, [r2, #16]
 807dd10:	f107 0108 	add.w	r1, r7, #8
 807dd14:	4610      	mov	r0, r2
 807dd16:	4798      	blx	r3
 807dd18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd1a:	e0a4      	b.n	807de66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd1c:	6839      	ldr	r1, [r7, #0]
 807dd1e:	6878      	ldr	r0, [r7, #4]
 807dd20:	f000 fac4 	bl	807e2ac <USBD_CtlError>
            err++;
 807dd24:	7afb      	ldrb	r3, [r7, #11]
 807dd26:	3301      	adds	r3, #1
 807dd28:	72fb      	strb	r3, [r7, #11]
          break;
 807dd2a:	e09c      	b.n	807de66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 807dd2c:	687b      	ldr	r3, [r7, #4]
 807dd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dd32:	689b      	ldr	r3, [r3, #8]
 807dd34:	2b00      	cmp	r3, #0
 807dd36:	d00b      	beq.n	807dd50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 807dd38:	687b      	ldr	r3, [r7, #4]
 807dd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dd3e:	689b      	ldr	r3, [r3, #8]
 807dd40:	687a      	ldr	r2, [r7, #4]
 807dd42:	7c12      	ldrb	r2, [r2, #16]
 807dd44:	f107 0108 	add.w	r1, r7, #8
 807dd48:	4610      	mov	r0, r2
 807dd4a:	4798      	blx	r3
 807dd4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd4e:	e08a      	b.n	807de66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd50:	6839      	ldr	r1, [r7, #0]
 807dd52:	6878      	ldr	r0, [r7, #4]
 807dd54:	f000 faaa 	bl	807e2ac <USBD_CtlError>
            err++;
 807dd58:	7afb      	ldrb	r3, [r7, #11]
 807dd5a:	3301      	adds	r3, #1
 807dd5c:	72fb      	strb	r3, [r7, #11]
          break;
 807dd5e:	e082      	b.n	807de66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 807dd60:	687b      	ldr	r3, [r7, #4]
 807dd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dd66:	68db      	ldr	r3, [r3, #12]
 807dd68:	2b00      	cmp	r3, #0
 807dd6a:	d00b      	beq.n	807dd84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 807dd6c:	687b      	ldr	r3, [r7, #4]
 807dd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dd72:	68db      	ldr	r3, [r3, #12]
 807dd74:	687a      	ldr	r2, [r7, #4]
 807dd76:	7c12      	ldrb	r2, [r2, #16]
 807dd78:	f107 0108 	add.w	r1, r7, #8
 807dd7c:	4610      	mov	r0, r2
 807dd7e:	4798      	blx	r3
 807dd80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd82:	e070      	b.n	807de66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd84:	6839      	ldr	r1, [r7, #0]
 807dd86:	6878      	ldr	r0, [r7, #4]
 807dd88:	f000 fa90 	bl	807e2ac <USBD_CtlError>
            err++;
 807dd8c:	7afb      	ldrb	r3, [r7, #11]
 807dd8e:	3301      	adds	r3, #1
 807dd90:	72fb      	strb	r3, [r7, #11]
          break;
 807dd92:	e068      	b.n	807de66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 807dd94:	687b      	ldr	r3, [r7, #4]
 807dd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dd9a:	691b      	ldr	r3, [r3, #16]
 807dd9c:	2b00      	cmp	r3, #0
 807dd9e:	d00b      	beq.n	807ddb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 807dda0:	687b      	ldr	r3, [r7, #4]
 807dda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807dda6:	691b      	ldr	r3, [r3, #16]
 807dda8:	687a      	ldr	r2, [r7, #4]
 807ddaa:	7c12      	ldrb	r2, [r2, #16]
 807ddac:	f107 0108 	add.w	r1, r7, #8
 807ddb0:	4610      	mov	r0, r2
 807ddb2:	4798      	blx	r3
 807ddb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807ddb6:	e056      	b.n	807de66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807ddb8:	6839      	ldr	r1, [r7, #0]
 807ddba:	6878      	ldr	r0, [r7, #4]
 807ddbc:	f000 fa76 	bl	807e2ac <USBD_CtlError>
            err++;
 807ddc0:	7afb      	ldrb	r3, [r7, #11]
 807ddc2:	3301      	adds	r3, #1
 807ddc4:	72fb      	strb	r3, [r7, #11]
          break;
 807ddc6:	e04e      	b.n	807de66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 807ddc8:	687b      	ldr	r3, [r7, #4]
 807ddca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807ddce:	695b      	ldr	r3, [r3, #20]
 807ddd0:	2b00      	cmp	r3, #0
 807ddd2:	d00b      	beq.n	807ddec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 807ddd4:	687b      	ldr	r3, [r7, #4]
 807ddd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807ddda:	695b      	ldr	r3, [r3, #20]
 807dddc:	687a      	ldr	r2, [r7, #4]
 807ddde:	7c12      	ldrb	r2, [r2, #16]
 807dde0:	f107 0108 	add.w	r1, r7, #8
 807dde4:	4610      	mov	r0, r2
 807dde6:	4798      	blx	r3
 807dde8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807ddea:	e03c      	b.n	807de66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807ddec:	6839      	ldr	r1, [r7, #0]
 807ddee:	6878      	ldr	r0, [r7, #4]
 807ddf0:	f000 fa5c 	bl	807e2ac <USBD_CtlError>
            err++;
 807ddf4:	7afb      	ldrb	r3, [r7, #11]
 807ddf6:	3301      	adds	r3, #1
 807ddf8:	72fb      	strb	r3, [r7, #11]
          break;
 807ddfa:	e034      	b.n	807de66 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 807ddfc:	687b      	ldr	r3, [r7, #4]
 807ddfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807de02:	699b      	ldr	r3, [r3, #24]
 807de04:	2b00      	cmp	r3, #0
 807de06:	d00b      	beq.n	807de20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 807de08:	687b      	ldr	r3, [r7, #4]
 807de0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 807de0e:	699b      	ldr	r3, [r3, #24]
 807de10:	687a      	ldr	r2, [r7, #4]
 807de12:	7c12      	ldrb	r2, [r2, #16]
 807de14:	f107 0108 	add.w	r1, r7, #8
 807de18:	4610      	mov	r0, r2
 807de1a:	4798      	blx	r3
 807de1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807de1e:	e022      	b.n	807de66 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807de20:	6839      	ldr	r1, [r7, #0]
 807de22:	6878      	ldr	r0, [r7, #4]
 807de24:	f000 fa42 	bl	807e2ac <USBD_CtlError>
            err++;
 807de28:	7afb      	ldrb	r3, [r7, #11]
 807de2a:	3301      	adds	r3, #1
 807de2c:	72fb      	strb	r3, [r7, #11]
          break;
 807de2e:	e01a      	b.n	807de66 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 807de30:	687b      	ldr	r3, [r7, #4]
 807de32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807de36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807de38:	2b00      	cmp	r3, #0
 807de3a:	d00c      	beq.n	807de56 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 807de3c:	687b      	ldr	r3, [r7, #4]
 807de3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807de42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 807de44:	683a      	ldr	r2, [r7, #0]
 807de46:	8852      	ldrh	r2, [r2, #2]
 807de48:	b2d1      	uxtb	r1, r2
 807de4a:	f107 0208 	add.w	r2, r7, #8
 807de4e:	6878      	ldr	r0, [r7, #4]
 807de50:	4798      	blx	r3
 807de52:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 807de54:	e006      	b.n	807de64 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 807de56:	6839      	ldr	r1, [r7, #0]
 807de58:	6878      	ldr	r0, [r7, #4]
 807de5a:	f000 fa27 	bl	807e2ac <USBD_CtlError>
            err++;
 807de5e:	7afb      	ldrb	r3, [r7, #11]
 807de60:	3301      	adds	r3, #1
 807de62:	72fb      	strb	r3, [r7, #11]
          break;
 807de64:	bf00      	nop
      }
      break;
 807de66:	e037      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807de68:	687b      	ldr	r3, [r7, #4]
 807de6a:	7c1b      	ldrb	r3, [r3, #16]
 807de6c:	2b00      	cmp	r3, #0
 807de6e:	d109      	bne.n	807de84 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 807de70:	687b      	ldr	r3, [r7, #4]
 807de72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807de76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 807de78:	f107 0208 	add.w	r2, r7, #8
 807de7c:	4610      	mov	r0, r2
 807de7e:	4798      	blx	r3
 807de80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807de82:	e029      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 807de84:	6839      	ldr	r1, [r7, #0]
 807de86:	6878      	ldr	r0, [r7, #4]
 807de88:	f000 fa10 	bl	807e2ac <USBD_CtlError>
        err++;
 807de8c:	7afb      	ldrb	r3, [r7, #11]
 807de8e:	3301      	adds	r3, #1
 807de90:	72fb      	strb	r3, [r7, #11]
      break;
 807de92:	e021      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807de94:	687b      	ldr	r3, [r7, #4]
 807de96:	7c1b      	ldrb	r3, [r3, #16]
 807de98:	2b00      	cmp	r3, #0
 807de9a:	d10d      	bne.n	807deb8 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 807de9c:	687b      	ldr	r3, [r7, #4]
 807de9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 807dea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807dea4:	f107 0208 	add.w	r2, r7, #8
 807dea8:	4610      	mov	r0, r2
 807deaa:	4798      	blx	r3
 807deac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 807deae:	68fb      	ldr	r3, [r7, #12]
 807deb0:	3301      	adds	r3, #1
 807deb2:	2207      	movs	r2, #7
 807deb4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807deb6:	e00f      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 807deb8:	6839      	ldr	r1, [r7, #0]
 807deba:	6878      	ldr	r0, [r7, #4]
 807debc:	f000 f9f6 	bl	807e2ac <USBD_CtlError>
        err++;
 807dec0:	7afb      	ldrb	r3, [r7, #11]
 807dec2:	3301      	adds	r3, #1
 807dec4:	72fb      	strb	r3, [r7, #11]
      break;
 807dec6:	e007      	b.n	807ded8 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 807dec8:	6839      	ldr	r1, [r7, #0]
 807deca:	6878      	ldr	r0, [r7, #4]
 807decc:	f000 f9ee 	bl	807e2ac <USBD_CtlError>
      err++;
 807ded0:	7afb      	ldrb	r3, [r7, #11]
 807ded2:	3301      	adds	r3, #1
 807ded4:	72fb      	strb	r3, [r7, #11]
      break;
 807ded6:	bf00      	nop
  }

  if (err != 0U)
 807ded8:	7afb      	ldrb	r3, [r7, #11]
 807deda:	2b00      	cmp	r3, #0
 807dedc:	d11e      	bne.n	807df1c <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 807dede:	683b      	ldr	r3, [r7, #0]
 807dee0:	88db      	ldrh	r3, [r3, #6]
 807dee2:	2b00      	cmp	r3, #0
 807dee4:	d016      	beq.n	807df14 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 807dee6:	893b      	ldrh	r3, [r7, #8]
 807dee8:	2b00      	cmp	r3, #0
 807deea:	d00e      	beq.n	807df0a <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 807deec:	683b      	ldr	r3, [r7, #0]
 807deee:	88da      	ldrh	r2, [r3, #6]
 807def0:	893b      	ldrh	r3, [r7, #8]
 807def2:	4293      	cmp	r3, r2
 807def4:	bf28      	it	cs
 807def6:	4613      	movcs	r3, r2
 807def8:	b29b      	uxth	r3, r3
 807defa:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 807defc:	893b      	ldrh	r3, [r7, #8]
 807defe:	461a      	mov	r2, r3
 807df00:	68f9      	ldr	r1, [r7, #12]
 807df02:	6878      	ldr	r0, [r7, #4]
 807df04:	f000 fa43 	bl	807e38e <USBD_CtlSendData>
 807df08:	e009      	b.n	807df1e <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 807df0a:	6839      	ldr	r1, [r7, #0]
 807df0c:	6878      	ldr	r0, [r7, #4]
 807df0e:	f000 f9cd 	bl	807e2ac <USBD_CtlError>
 807df12:	e004      	b.n	807df1e <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 807df14:	6878      	ldr	r0, [r7, #4]
 807df16:	f000 fa94 	bl	807e442 <USBD_CtlSendStatus>
 807df1a:	e000      	b.n	807df1e <USBD_GetDescriptor+0x2f2>
    return;
 807df1c:	bf00      	nop
  }
}
 807df1e:	3710      	adds	r7, #16
 807df20:	46bd      	mov	sp, r7
 807df22:	bd80      	pop	{r7, pc}

0807df24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807df24:	b580      	push	{r7, lr}
 807df26:	b084      	sub	sp, #16
 807df28:	af00      	add	r7, sp, #0
 807df2a:	6078      	str	r0, [r7, #4]
 807df2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 807df2e:	683b      	ldr	r3, [r7, #0]
 807df30:	889b      	ldrh	r3, [r3, #4]
 807df32:	2b00      	cmp	r3, #0
 807df34:	d131      	bne.n	807df9a <USBD_SetAddress+0x76>
 807df36:	683b      	ldr	r3, [r7, #0]
 807df38:	88db      	ldrh	r3, [r3, #6]
 807df3a:	2b00      	cmp	r3, #0
 807df3c:	d12d      	bne.n	807df9a <USBD_SetAddress+0x76>
 807df3e:	683b      	ldr	r3, [r7, #0]
 807df40:	885b      	ldrh	r3, [r3, #2]
 807df42:	2b7f      	cmp	r3, #127	@ 0x7f
 807df44:	d829      	bhi.n	807df9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 807df46:	683b      	ldr	r3, [r7, #0]
 807df48:	885b      	ldrh	r3, [r3, #2]
 807df4a:	b2db      	uxtb	r3, r3
 807df4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 807df50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df52:	687b      	ldr	r3, [r7, #4]
 807df54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807df58:	b2db      	uxtb	r3, r3
 807df5a:	2b03      	cmp	r3, #3
 807df5c:	d104      	bne.n	807df68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 807df5e:	6839      	ldr	r1, [r7, #0]
 807df60:	6878      	ldr	r0, [r7, #4]
 807df62:	f000 f9a3 	bl	807e2ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df66:	e01d      	b.n	807dfa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 807df68:	687b      	ldr	r3, [r7, #4]
 807df6a:	7bfa      	ldrb	r2, [r7, #15]
 807df6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 807df70:	7bfb      	ldrb	r3, [r7, #15]
 807df72:	4619      	mov	r1, r3
 807df74:	6878      	ldr	r0, [r7, #4]
 807df76:	f000 ff5b 	bl	807ee30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 807df7a:	6878      	ldr	r0, [r7, #4]
 807df7c:	f000 fa61 	bl	807e442 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 807df80:	7bfb      	ldrb	r3, [r7, #15]
 807df82:	2b00      	cmp	r3, #0
 807df84:	d004      	beq.n	807df90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 807df86:	687b      	ldr	r3, [r7, #4]
 807df88:	2202      	movs	r2, #2
 807df8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df8e:	e009      	b.n	807dfa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 807df90:	687b      	ldr	r3, [r7, #4]
 807df92:	2201      	movs	r2, #1
 807df94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df98:	e004      	b.n	807dfa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 807df9a:	6839      	ldr	r1, [r7, #0]
 807df9c:	6878      	ldr	r0, [r7, #4]
 807df9e:	f000 f985 	bl	807e2ac <USBD_CtlError>
  }
}
 807dfa2:	bf00      	nop
 807dfa4:	bf00      	nop
 807dfa6:	3710      	adds	r7, #16
 807dfa8:	46bd      	mov	sp, r7
 807dfaa:	bd80      	pop	{r7, pc}

0807dfac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807dfac:	b580      	push	{r7, lr}
 807dfae:	b084      	sub	sp, #16
 807dfb0:	af00      	add	r7, sp, #0
 807dfb2:	6078      	str	r0, [r7, #4]
 807dfb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807dfb6:	2300      	movs	r3, #0
 807dfb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 807dfba:	683b      	ldr	r3, [r7, #0]
 807dfbc:	885b      	ldrh	r3, [r3, #2]
 807dfbe:	b2da      	uxtb	r2, r3
 807dfc0:	4b4c      	ldr	r3, [pc, #304]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807dfc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 807dfc4:	4b4b      	ldr	r3, [pc, #300]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807dfc6:	781b      	ldrb	r3, [r3, #0]
 807dfc8:	2b01      	cmp	r3, #1
 807dfca:	d905      	bls.n	807dfd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 807dfcc:	6839      	ldr	r1, [r7, #0]
 807dfce:	6878      	ldr	r0, [r7, #4]
 807dfd0:	f000 f96c 	bl	807e2ac <USBD_CtlError>
    return USBD_FAIL;
 807dfd4:	2303      	movs	r3, #3
 807dfd6:	e088      	b.n	807e0ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 807dfd8:	687b      	ldr	r3, [r7, #4]
 807dfda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807dfde:	b2db      	uxtb	r3, r3
 807dfe0:	2b02      	cmp	r3, #2
 807dfe2:	d002      	beq.n	807dfea <USBD_SetConfig+0x3e>
 807dfe4:	2b03      	cmp	r3, #3
 807dfe6:	d025      	beq.n	807e034 <USBD_SetConfig+0x88>
 807dfe8:	e071      	b.n	807e0ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 807dfea:	4b42      	ldr	r3, [pc, #264]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807dfec:	781b      	ldrb	r3, [r3, #0]
 807dfee:	2b00      	cmp	r3, #0
 807dff0:	d01c      	beq.n	807e02c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 807dff2:	4b40      	ldr	r3, [pc, #256]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807dff4:	781b      	ldrb	r3, [r3, #0]
 807dff6:	461a      	mov	r2, r3
 807dff8:	687b      	ldr	r3, [r7, #4]
 807dffa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 807dffc:	4b3d      	ldr	r3, [pc, #244]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807dffe:	781b      	ldrb	r3, [r3, #0]
 807e000:	4619      	mov	r1, r3
 807e002:	6878      	ldr	r0, [r7, #4]
 807e004:	f7ff f935 	bl	807d272 <USBD_SetClassConfig>
 807e008:	4603      	mov	r3, r0
 807e00a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 807e00c:	7bfb      	ldrb	r3, [r7, #15]
 807e00e:	2b00      	cmp	r3, #0
 807e010:	d004      	beq.n	807e01c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 807e012:	6839      	ldr	r1, [r7, #0]
 807e014:	6878      	ldr	r0, [r7, #4]
 807e016:	f000 f949 	bl	807e2ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 807e01a:	e065      	b.n	807e0e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 807e01c:	6878      	ldr	r0, [r7, #4]
 807e01e:	f000 fa10 	bl	807e442 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 807e022:	687b      	ldr	r3, [r7, #4]
 807e024:	2203      	movs	r2, #3
 807e026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 807e02a:	e05d      	b.n	807e0e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 807e02c:	6878      	ldr	r0, [r7, #4]
 807e02e:	f000 fa08 	bl	807e442 <USBD_CtlSendStatus>
      break;
 807e032:	e059      	b.n	807e0e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 807e034:	4b2f      	ldr	r3, [pc, #188]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807e036:	781b      	ldrb	r3, [r3, #0]
 807e038:	2b00      	cmp	r3, #0
 807e03a:	d112      	bne.n	807e062 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 807e03c:	687b      	ldr	r3, [r7, #4]
 807e03e:	2202      	movs	r2, #2
 807e040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 807e044:	4b2b      	ldr	r3, [pc, #172]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807e046:	781b      	ldrb	r3, [r3, #0]
 807e048:	461a      	mov	r2, r3
 807e04a:	687b      	ldr	r3, [r7, #4]
 807e04c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 807e04e:	4b29      	ldr	r3, [pc, #164]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807e050:	781b      	ldrb	r3, [r3, #0]
 807e052:	4619      	mov	r1, r3
 807e054:	6878      	ldr	r0, [r7, #4]
 807e056:	f7ff f928 	bl	807d2aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 807e05a:	6878      	ldr	r0, [r7, #4]
 807e05c:	f000 f9f1 	bl	807e442 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 807e060:	e042      	b.n	807e0e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 807e062:	4b24      	ldr	r3, [pc, #144]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807e064:	781b      	ldrb	r3, [r3, #0]
 807e066:	461a      	mov	r2, r3
 807e068:	687b      	ldr	r3, [r7, #4]
 807e06a:	685b      	ldr	r3, [r3, #4]
 807e06c:	429a      	cmp	r2, r3
 807e06e:	d02a      	beq.n	807e0c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 807e070:	687b      	ldr	r3, [r7, #4]
 807e072:	685b      	ldr	r3, [r3, #4]
 807e074:	b2db      	uxtb	r3, r3
 807e076:	4619      	mov	r1, r3
 807e078:	6878      	ldr	r0, [r7, #4]
 807e07a:	f7ff f916 	bl	807d2aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 807e07e:	4b1d      	ldr	r3, [pc, #116]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807e080:	781b      	ldrb	r3, [r3, #0]
 807e082:	461a      	mov	r2, r3
 807e084:	687b      	ldr	r3, [r7, #4]
 807e086:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 807e088:	4b1a      	ldr	r3, [pc, #104]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807e08a:	781b      	ldrb	r3, [r3, #0]
 807e08c:	4619      	mov	r1, r3
 807e08e:	6878      	ldr	r0, [r7, #4]
 807e090:	f7ff f8ef 	bl	807d272 <USBD_SetClassConfig>
 807e094:	4603      	mov	r3, r0
 807e096:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 807e098:	7bfb      	ldrb	r3, [r7, #15]
 807e09a:	2b00      	cmp	r3, #0
 807e09c:	d00f      	beq.n	807e0be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 807e09e:	6839      	ldr	r1, [r7, #0]
 807e0a0:	6878      	ldr	r0, [r7, #4]
 807e0a2:	f000 f903 	bl	807e2ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 807e0a6:	687b      	ldr	r3, [r7, #4]
 807e0a8:	685b      	ldr	r3, [r3, #4]
 807e0aa:	b2db      	uxtb	r3, r3
 807e0ac:	4619      	mov	r1, r3
 807e0ae:	6878      	ldr	r0, [r7, #4]
 807e0b0:	f7ff f8fb 	bl	807d2aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 807e0b4:	687b      	ldr	r3, [r7, #4]
 807e0b6:	2202      	movs	r2, #2
 807e0b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 807e0bc:	e014      	b.n	807e0e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 807e0be:	6878      	ldr	r0, [r7, #4]
 807e0c0:	f000 f9bf 	bl	807e442 <USBD_CtlSendStatus>
      break;
 807e0c4:	e010      	b.n	807e0e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 807e0c6:	6878      	ldr	r0, [r7, #4]
 807e0c8:	f000 f9bb 	bl	807e442 <USBD_CtlSendStatus>
      break;
 807e0cc:	e00c      	b.n	807e0e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 807e0ce:	6839      	ldr	r1, [r7, #0]
 807e0d0:	6878      	ldr	r0, [r7, #4]
 807e0d2:	f000 f8eb 	bl	807e2ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 807e0d6:	4b07      	ldr	r3, [pc, #28]	@ (807e0f4 <USBD_SetConfig+0x148>)
 807e0d8:	781b      	ldrb	r3, [r3, #0]
 807e0da:	4619      	mov	r1, r3
 807e0dc:	6878      	ldr	r0, [r7, #4]
 807e0de:	f7ff f8e4 	bl	807d2aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 807e0e2:	2303      	movs	r3, #3
 807e0e4:	73fb      	strb	r3, [r7, #15]
      break;
 807e0e6:	bf00      	nop
  }

  return ret;
 807e0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 807e0ea:	4618      	mov	r0, r3
 807e0ec:	3710      	adds	r7, #16
 807e0ee:	46bd      	mov	sp, r7
 807e0f0:	bd80      	pop	{r7, pc}
 807e0f2:	bf00      	nop
 807e0f4:	2000021b 	.word	0x2000021b

0807e0f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e0f8:	b580      	push	{r7, lr}
 807e0fa:	b082      	sub	sp, #8
 807e0fc:	af00      	add	r7, sp, #0
 807e0fe:	6078      	str	r0, [r7, #4]
 807e100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 807e102:	683b      	ldr	r3, [r7, #0]
 807e104:	88db      	ldrh	r3, [r3, #6]
 807e106:	2b01      	cmp	r3, #1
 807e108:	d004      	beq.n	807e114 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 807e10a:	6839      	ldr	r1, [r7, #0]
 807e10c:	6878      	ldr	r0, [r7, #4]
 807e10e:	f000 f8cd 	bl	807e2ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 807e112:	e023      	b.n	807e15c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 807e114:	687b      	ldr	r3, [r7, #4]
 807e116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807e11a:	b2db      	uxtb	r3, r3
 807e11c:	2b02      	cmp	r3, #2
 807e11e:	dc02      	bgt.n	807e126 <USBD_GetConfig+0x2e>
 807e120:	2b00      	cmp	r3, #0
 807e122:	dc03      	bgt.n	807e12c <USBD_GetConfig+0x34>
 807e124:	e015      	b.n	807e152 <USBD_GetConfig+0x5a>
 807e126:	2b03      	cmp	r3, #3
 807e128:	d00b      	beq.n	807e142 <USBD_GetConfig+0x4a>
 807e12a:	e012      	b.n	807e152 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 807e12c:	687b      	ldr	r3, [r7, #4]
 807e12e:	2200      	movs	r2, #0
 807e130:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 807e132:	687b      	ldr	r3, [r7, #4]
 807e134:	3308      	adds	r3, #8
 807e136:	2201      	movs	r2, #1
 807e138:	4619      	mov	r1, r3
 807e13a:	6878      	ldr	r0, [r7, #4]
 807e13c:	f000 f927 	bl	807e38e <USBD_CtlSendData>
        break;
 807e140:	e00c      	b.n	807e15c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 807e142:	687b      	ldr	r3, [r7, #4]
 807e144:	3304      	adds	r3, #4
 807e146:	2201      	movs	r2, #1
 807e148:	4619      	mov	r1, r3
 807e14a:	6878      	ldr	r0, [r7, #4]
 807e14c:	f000 f91f 	bl	807e38e <USBD_CtlSendData>
        break;
 807e150:	e004      	b.n	807e15c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 807e152:	6839      	ldr	r1, [r7, #0]
 807e154:	6878      	ldr	r0, [r7, #4]
 807e156:	f000 f8a9 	bl	807e2ac <USBD_CtlError>
        break;
 807e15a:	bf00      	nop
}
 807e15c:	bf00      	nop
 807e15e:	3708      	adds	r7, #8
 807e160:	46bd      	mov	sp, r7
 807e162:	bd80      	pop	{r7, pc}

0807e164 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e164:	b580      	push	{r7, lr}
 807e166:	b082      	sub	sp, #8
 807e168:	af00      	add	r7, sp, #0
 807e16a:	6078      	str	r0, [r7, #4]
 807e16c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 807e16e:	687b      	ldr	r3, [r7, #4]
 807e170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807e174:	b2db      	uxtb	r3, r3
 807e176:	3b01      	subs	r3, #1
 807e178:	2b02      	cmp	r3, #2
 807e17a:	d81e      	bhi.n	807e1ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 807e17c:	683b      	ldr	r3, [r7, #0]
 807e17e:	88db      	ldrh	r3, [r3, #6]
 807e180:	2b02      	cmp	r3, #2
 807e182:	d004      	beq.n	807e18e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 807e184:	6839      	ldr	r1, [r7, #0]
 807e186:	6878      	ldr	r0, [r7, #4]
 807e188:	f000 f890 	bl	807e2ac <USBD_CtlError>
        break;
 807e18c:	e01a      	b.n	807e1c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 807e18e:	687b      	ldr	r3, [r7, #4]
 807e190:	2201      	movs	r2, #1
 807e192:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 807e194:	687b      	ldr	r3, [r7, #4]
 807e196:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 807e19a:	2b00      	cmp	r3, #0
 807e19c:	d005      	beq.n	807e1aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 807e19e:	687b      	ldr	r3, [r7, #4]
 807e1a0:	68db      	ldr	r3, [r3, #12]
 807e1a2:	f043 0202 	orr.w	r2, r3, #2
 807e1a6:	687b      	ldr	r3, [r7, #4]
 807e1a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 807e1aa:	687b      	ldr	r3, [r7, #4]
 807e1ac:	330c      	adds	r3, #12
 807e1ae:	2202      	movs	r2, #2
 807e1b0:	4619      	mov	r1, r3
 807e1b2:	6878      	ldr	r0, [r7, #4]
 807e1b4:	f000 f8eb 	bl	807e38e <USBD_CtlSendData>
      break;
 807e1b8:	e004      	b.n	807e1c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 807e1ba:	6839      	ldr	r1, [r7, #0]
 807e1bc:	6878      	ldr	r0, [r7, #4]
 807e1be:	f000 f875 	bl	807e2ac <USBD_CtlError>
      break;
 807e1c2:	bf00      	nop
  }
}
 807e1c4:	bf00      	nop
 807e1c6:	3708      	adds	r7, #8
 807e1c8:	46bd      	mov	sp, r7
 807e1ca:	bd80      	pop	{r7, pc}

0807e1cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e1cc:	b580      	push	{r7, lr}
 807e1ce:	b082      	sub	sp, #8
 807e1d0:	af00      	add	r7, sp, #0
 807e1d2:	6078      	str	r0, [r7, #4]
 807e1d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 807e1d6:	683b      	ldr	r3, [r7, #0]
 807e1d8:	885b      	ldrh	r3, [r3, #2]
 807e1da:	2b01      	cmp	r3, #1
 807e1dc:	d106      	bne.n	807e1ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 807e1de:	687b      	ldr	r3, [r7, #4]
 807e1e0:	2201      	movs	r2, #1
 807e1e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 807e1e6:	6878      	ldr	r0, [r7, #4]
 807e1e8:	f000 f92b 	bl	807e442 <USBD_CtlSendStatus>
  }
}
 807e1ec:	bf00      	nop
 807e1ee:	3708      	adds	r7, #8
 807e1f0:	46bd      	mov	sp, r7
 807e1f2:	bd80      	pop	{r7, pc}

0807e1f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e1f4:	b580      	push	{r7, lr}
 807e1f6:	b082      	sub	sp, #8
 807e1f8:	af00      	add	r7, sp, #0
 807e1fa:	6078      	str	r0, [r7, #4]
 807e1fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 807e1fe:	687b      	ldr	r3, [r7, #4]
 807e200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 807e204:	b2db      	uxtb	r3, r3
 807e206:	3b01      	subs	r3, #1
 807e208:	2b02      	cmp	r3, #2
 807e20a:	d80b      	bhi.n	807e224 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 807e20c:	683b      	ldr	r3, [r7, #0]
 807e20e:	885b      	ldrh	r3, [r3, #2]
 807e210:	2b01      	cmp	r3, #1
 807e212:	d10c      	bne.n	807e22e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 807e214:	687b      	ldr	r3, [r7, #4]
 807e216:	2200      	movs	r2, #0
 807e218:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 807e21c:	6878      	ldr	r0, [r7, #4]
 807e21e:	f000 f910 	bl	807e442 <USBD_CtlSendStatus>
      }
      break;
 807e222:	e004      	b.n	807e22e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 807e224:	6839      	ldr	r1, [r7, #0]
 807e226:	6878      	ldr	r0, [r7, #4]
 807e228:	f000 f840 	bl	807e2ac <USBD_CtlError>
      break;
 807e22c:	e000      	b.n	807e230 <USBD_ClrFeature+0x3c>
      break;
 807e22e:	bf00      	nop
  }
}
 807e230:	bf00      	nop
 807e232:	3708      	adds	r7, #8
 807e234:	46bd      	mov	sp, r7
 807e236:	bd80      	pop	{r7, pc}

0807e238 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 807e238:	b580      	push	{r7, lr}
 807e23a:	b084      	sub	sp, #16
 807e23c:	af00      	add	r7, sp, #0
 807e23e:	6078      	str	r0, [r7, #4]
 807e240:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 807e242:	683b      	ldr	r3, [r7, #0]
 807e244:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 807e246:	68fb      	ldr	r3, [r7, #12]
 807e248:	781a      	ldrb	r2, [r3, #0]
 807e24a:	687b      	ldr	r3, [r7, #4]
 807e24c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 807e24e:	68fb      	ldr	r3, [r7, #12]
 807e250:	3301      	adds	r3, #1
 807e252:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 807e254:	68fb      	ldr	r3, [r7, #12]
 807e256:	781a      	ldrb	r2, [r3, #0]
 807e258:	687b      	ldr	r3, [r7, #4]
 807e25a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 807e25c:	68fb      	ldr	r3, [r7, #12]
 807e25e:	3301      	adds	r3, #1
 807e260:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 807e262:	68f8      	ldr	r0, [r7, #12]
 807e264:	f7ff faa8 	bl	807d7b8 <SWAPBYTE>
 807e268:	4603      	mov	r3, r0
 807e26a:	461a      	mov	r2, r3
 807e26c:	687b      	ldr	r3, [r7, #4]
 807e26e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 807e270:	68fb      	ldr	r3, [r7, #12]
 807e272:	3301      	adds	r3, #1
 807e274:	60fb      	str	r3, [r7, #12]
  pbuff++;
 807e276:	68fb      	ldr	r3, [r7, #12]
 807e278:	3301      	adds	r3, #1
 807e27a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 807e27c:	68f8      	ldr	r0, [r7, #12]
 807e27e:	f7ff fa9b 	bl	807d7b8 <SWAPBYTE>
 807e282:	4603      	mov	r3, r0
 807e284:	461a      	mov	r2, r3
 807e286:	687b      	ldr	r3, [r7, #4]
 807e288:	809a      	strh	r2, [r3, #4]

  pbuff++;
 807e28a:	68fb      	ldr	r3, [r7, #12]
 807e28c:	3301      	adds	r3, #1
 807e28e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 807e290:	68fb      	ldr	r3, [r7, #12]
 807e292:	3301      	adds	r3, #1
 807e294:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 807e296:	68f8      	ldr	r0, [r7, #12]
 807e298:	f7ff fa8e 	bl	807d7b8 <SWAPBYTE>
 807e29c:	4603      	mov	r3, r0
 807e29e:	461a      	mov	r2, r3
 807e2a0:	687b      	ldr	r3, [r7, #4]
 807e2a2:	80da      	strh	r2, [r3, #6]
}
 807e2a4:	bf00      	nop
 807e2a6:	3710      	adds	r7, #16
 807e2a8:	46bd      	mov	sp, r7
 807e2aa:	bd80      	pop	{r7, pc}

0807e2ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e2ac:	b580      	push	{r7, lr}
 807e2ae:	b082      	sub	sp, #8
 807e2b0:	af00      	add	r7, sp, #0
 807e2b2:	6078      	str	r0, [r7, #4]
 807e2b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 807e2b6:	2180      	movs	r1, #128	@ 0x80
 807e2b8:	6878      	ldr	r0, [r7, #4]
 807e2ba:	f000 fd4f 	bl	807ed5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 807e2be:	2100      	movs	r1, #0
 807e2c0:	6878      	ldr	r0, [r7, #4]
 807e2c2:	f000 fd4b 	bl	807ed5c <USBD_LL_StallEP>
}
 807e2c6:	bf00      	nop
 807e2c8:	3708      	adds	r7, #8
 807e2ca:	46bd      	mov	sp, r7
 807e2cc:	bd80      	pop	{r7, pc}

0807e2ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 807e2ce:	b580      	push	{r7, lr}
 807e2d0:	b086      	sub	sp, #24
 807e2d2:	af00      	add	r7, sp, #0
 807e2d4:	60f8      	str	r0, [r7, #12]
 807e2d6:	60b9      	str	r1, [r7, #8]
 807e2d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 807e2da:	2300      	movs	r3, #0
 807e2dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 807e2de:	68fb      	ldr	r3, [r7, #12]
 807e2e0:	2b00      	cmp	r3, #0
 807e2e2:	d036      	beq.n	807e352 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 807e2e4:	68fb      	ldr	r3, [r7, #12]
 807e2e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 807e2e8:	6938      	ldr	r0, [r7, #16]
 807e2ea:	f000 f836 	bl	807e35a <USBD_GetLen>
 807e2ee:	4603      	mov	r3, r0
 807e2f0:	3301      	adds	r3, #1
 807e2f2:	b29b      	uxth	r3, r3
 807e2f4:	005b      	lsls	r3, r3, #1
 807e2f6:	b29a      	uxth	r2, r3
 807e2f8:	687b      	ldr	r3, [r7, #4]
 807e2fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 807e2fc:	7dfb      	ldrb	r3, [r7, #23]
 807e2fe:	68ba      	ldr	r2, [r7, #8]
 807e300:	4413      	add	r3, r2
 807e302:	687a      	ldr	r2, [r7, #4]
 807e304:	7812      	ldrb	r2, [r2, #0]
 807e306:	701a      	strb	r2, [r3, #0]
  idx++;
 807e308:	7dfb      	ldrb	r3, [r7, #23]
 807e30a:	3301      	adds	r3, #1
 807e30c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 807e30e:	7dfb      	ldrb	r3, [r7, #23]
 807e310:	68ba      	ldr	r2, [r7, #8]
 807e312:	4413      	add	r3, r2
 807e314:	2203      	movs	r2, #3
 807e316:	701a      	strb	r2, [r3, #0]
  idx++;
 807e318:	7dfb      	ldrb	r3, [r7, #23]
 807e31a:	3301      	adds	r3, #1
 807e31c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 807e31e:	e013      	b.n	807e348 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 807e320:	7dfb      	ldrb	r3, [r7, #23]
 807e322:	68ba      	ldr	r2, [r7, #8]
 807e324:	4413      	add	r3, r2
 807e326:	693a      	ldr	r2, [r7, #16]
 807e328:	7812      	ldrb	r2, [r2, #0]
 807e32a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 807e32c:	693b      	ldr	r3, [r7, #16]
 807e32e:	3301      	adds	r3, #1
 807e330:	613b      	str	r3, [r7, #16]
    idx++;
 807e332:	7dfb      	ldrb	r3, [r7, #23]
 807e334:	3301      	adds	r3, #1
 807e336:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 807e338:	7dfb      	ldrb	r3, [r7, #23]
 807e33a:	68ba      	ldr	r2, [r7, #8]
 807e33c:	4413      	add	r3, r2
 807e33e:	2200      	movs	r2, #0
 807e340:	701a      	strb	r2, [r3, #0]
    idx++;
 807e342:	7dfb      	ldrb	r3, [r7, #23]
 807e344:	3301      	adds	r3, #1
 807e346:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 807e348:	693b      	ldr	r3, [r7, #16]
 807e34a:	781b      	ldrb	r3, [r3, #0]
 807e34c:	2b00      	cmp	r3, #0
 807e34e:	d1e7      	bne.n	807e320 <USBD_GetString+0x52>
 807e350:	e000      	b.n	807e354 <USBD_GetString+0x86>
    return;
 807e352:	bf00      	nop
  }
}
 807e354:	3718      	adds	r7, #24
 807e356:	46bd      	mov	sp, r7
 807e358:	bd80      	pop	{r7, pc}

0807e35a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 807e35a:	b480      	push	{r7}
 807e35c:	b085      	sub	sp, #20
 807e35e:	af00      	add	r7, sp, #0
 807e360:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 807e362:	2300      	movs	r3, #0
 807e364:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 807e366:	687b      	ldr	r3, [r7, #4]
 807e368:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 807e36a:	e005      	b.n	807e378 <USBD_GetLen+0x1e>
  {
    len++;
 807e36c:	7bfb      	ldrb	r3, [r7, #15]
 807e36e:	3301      	adds	r3, #1
 807e370:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 807e372:	68bb      	ldr	r3, [r7, #8]
 807e374:	3301      	adds	r3, #1
 807e376:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 807e378:	68bb      	ldr	r3, [r7, #8]
 807e37a:	781b      	ldrb	r3, [r3, #0]
 807e37c:	2b00      	cmp	r3, #0
 807e37e:	d1f5      	bne.n	807e36c <USBD_GetLen+0x12>
  }

  return len;
 807e380:	7bfb      	ldrb	r3, [r7, #15]
}
 807e382:	4618      	mov	r0, r3
 807e384:	3714      	adds	r7, #20
 807e386:	46bd      	mov	sp, r7
 807e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e38c:	4770      	bx	lr

0807e38e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 807e38e:	b580      	push	{r7, lr}
 807e390:	b084      	sub	sp, #16
 807e392:	af00      	add	r7, sp, #0
 807e394:	60f8      	str	r0, [r7, #12]
 807e396:	60b9      	str	r1, [r7, #8]
 807e398:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 807e39a:	68fb      	ldr	r3, [r7, #12]
 807e39c:	2202      	movs	r2, #2
 807e39e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 807e3a2:	68fb      	ldr	r3, [r7, #12]
 807e3a4:	687a      	ldr	r2, [r7, #4]
 807e3a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 807e3a8:	68fb      	ldr	r3, [r7, #12]
 807e3aa:	687a      	ldr	r2, [r7, #4]
 807e3ac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 807e3ae:	687b      	ldr	r3, [r7, #4]
 807e3b0:	68ba      	ldr	r2, [r7, #8]
 807e3b2:	2100      	movs	r1, #0
 807e3b4:	68f8      	ldr	r0, [r7, #12]
 807e3b6:	f000 fd5a 	bl	807ee6e <USBD_LL_Transmit>

  return USBD_OK;
 807e3ba:	2300      	movs	r3, #0
}
 807e3bc:	4618      	mov	r0, r3
 807e3be:	3710      	adds	r7, #16
 807e3c0:	46bd      	mov	sp, r7
 807e3c2:	bd80      	pop	{r7, pc}

0807e3c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 807e3c4:	b580      	push	{r7, lr}
 807e3c6:	b084      	sub	sp, #16
 807e3c8:	af00      	add	r7, sp, #0
 807e3ca:	60f8      	str	r0, [r7, #12]
 807e3cc:	60b9      	str	r1, [r7, #8]
 807e3ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 807e3d0:	687b      	ldr	r3, [r7, #4]
 807e3d2:	68ba      	ldr	r2, [r7, #8]
 807e3d4:	2100      	movs	r1, #0
 807e3d6:	68f8      	ldr	r0, [r7, #12]
 807e3d8:	f000 fd49 	bl	807ee6e <USBD_LL_Transmit>

  return USBD_OK;
 807e3dc:	2300      	movs	r3, #0
}
 807e3de:	4618      	mov	r0, r3
 807e3e0:	3710      	adds	r7, #16
 807e3e2:	46bd      	mov	sp, r7
 807e3e4:	bd80      	pop	{r7, pc}

0807e3e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 807e3e6:	b580      	push	{r7, lr}
 807e3e8:	b084      	sub	sp, #16
 807e3ea:	af00      	add	r7, sp, #0
 807e3ec:	60f8      	str	r0, [r7, #12]
 807e3ee:	60b9      	str	r1, [r7, #8]
 807e3f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 807e3f2:	68fb      	ldr	r3, [r7, #12]
 807e3f4:	2203      	movs	r2, #3
 807e3f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 807e3fa:	68fb      	ldr	r3, [r7, #12]
 807e3fc:	687a      	ldr	r2, [r7, #4]
 807e3fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 807e402:	68fb      	ldr	r3, [r7, #12]
 807e404:	687a      	ldr	r2, [r7, #4]
 807e406:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 807e40a:	687b      	ldr	r3, [r7, #4]
 807e40c:	68ba      	ldr	r2, [r7, #8]
 807e40e:	2100      	movs	r1, #0
 807e410:	68f8      	ldr	r0, [r7, #12]
 807e412:	f000 fd4d 	bl	807eeb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e416:	2300      	movs	r3, #0
}
 807e418:	4618      	mov	r0, r3
 807e41a:	3710      	adds	r7, #16
 807e41c:	46bd      	mov	sp, r7
 807e41e:	bd80      	pop	{r7, pc}

0807e420 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 807e420:	b580      	push	{r7, lr}
 807e422:	b084      	sub	sp, #16
 807e424:	af00      	add	r7, sp, #0
 807e426:	60f8      	str	r0, [r7, #12]
 807e428:	60b9      	str	r1, [r7, #8]
 807e42a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 807e42c:	687b      	ldr	r3, [r7, #4]
 807e42e:	68ba      	ldr	r2, [r7, #8]
 807e430:	2100      	movs	r1, #0
 807e432:	68f8      	ldr	r0, [r7, #12]
 807e434:	f000 fd3c 	bl	807eeb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e438:	2300      	movs	r3, #0
}
 807e43a:	4618      	mov	r0, r3
 807e43c:	3710      	adds	r7, #16
 807e43e:	46bd      	mov	sp, r7
 807e440:	bd80      	pop	{r7, pc}

0807e442 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 807e442:	b580      	push	{r7, lr}
 807e444:	b082      	sub	sp, #8
 807e446:	af00      	add	r7, sp, #0
 807e448:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 807e44a:	687b      	ldr	r3, [r7, #4]
 807e44c:	2204      	movs	r2, #4
 807e44e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 807e452:	2300      	movs	r3, #0
 807e454:	2200      	movs	r2, #0
 807e456:	2100      	movs	r1, #0
 807e458:	6878      	ldr	r0, [r7, #4]
 807e45a:	f000 fd08 	bl	807ee6e <USBD_LL_Transmit>

  return USBD_OK;
 807e45e:	2300      	movs	r3, #0
}
 807e460:	4618      	mov	r0, r3
 807e462:	3708      	adds	r7, #8
 807e464:	46bd      	mov	sp, r7
 807e466:	bd80      	pop	{r7, pc}

0807e468 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 807e468:	b580      	push	{r7, lr}
 807e46a:	b082      	sub	sp, #8
 807e46c:	af00      	add	r7, sp, #0
 807e46e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 807e470:	687b      	ldr	r3, [r7, #4]
 807e472:	2205      	movs	r2, #5
 807e474:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807e478:	2300      	movs	r3, #0
 807e47a:	2200      	movs	r2, #0
 807e47c:	2100      	movs	r1, #0
 807e47e:	6878      	ldr	r0, [r7, #4]
 807e480:	f000 fd16 	bl	807eeb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e484:	2300      	movs	r3, #0
}
 807e486:	4618      	mov	r0, r3
 807e488:	3708      	adds	r7, #8
 807e48a:	46bd      	mov	sp, r7
 807e48c:	bd80      	pop	{r7, pc}

0807e48e <dfu_test>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void dfu_test(void)
{
 807e48e:	b480      	push	{r7}
 807e490:	af00      	add	r7, sp, #0

}
 807e492:	bf00      	nop
 807e494:	46bd      	mov	sp, r7
 807e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e49a:	4770      	bx	lr

0807e49c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 807e49c:	b580      	push	{r7, lr}
 807e49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 807e4a0:	2200      	movs	r2, #0
 807e4a2:	4912      	ldr	r1, [pc, #72]	@ (807e4ec <MX_USB_DEVICE_Init+0x50>)
 807e4a4:	4812      	ldr	r0, [pc, #72]	@ (807e4f0 <MX_USB_DEVICE_Init+0x54>)
 807e4a6:	f7fe fe5b 	bl	807d160 <USBD_Init>
 807e4aa:	4603      	mov	r3, r0
 807e4ac:	2b00      	cmp	r3, #0
 807e4ae:	d001      	beq.n	807e4b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 807e4b0:	f7fa f916 	bl	80786e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 807e4b4:	490f      	ldr	r1, [pc, #60]	@ (807e4f4 <MX_USB_DEVICE_Init+0x58>)
 807e4b6:	480e      	ldr	r0, [pc, #56]	@ (807e4f0 <MX_USB_DEVICE_Init+0x54>)
 807e4b8:	f7fe fe82 	bl	807d1c0 <USBD_RegisterClass>
 807e4bc:	4603      	mov	r3, r0
 807e4be:	2b00      	cmp	r3, #0
 807e4c0:	d001      	beq.n	807e4c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 807e4c2:	f7fa f90d 	bl	80786e0 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 807e4c6:	490c      	ldr	r1, [pc, #48]	@ (807e4f8 <MX_USB_DEVICE_Init+0x5c>)
 807e4c8:	4809      	ldr	r0, [pc, #36]	@ (807e4f0 <MX_USB_DEVICE_Init+0x54>)
 807e4ca:	f7fe fac7 	bl	807ca5c <USBD_DFU_RegisterMedia>
 807e4ce:	4603      	mov	r3, r0
 807e4d0:	2b00      	cmp	r3, #0
 807e4d2:	d001      	beq.n	807e4d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 807e4d4:	f7fa f904 	bl	80786e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 807e4d8:	4805      	ldr	r0, [pc, #20]	@ (807e4f0 <MX_USB_DEVICE_Init+0x54>)
 807e4da:	f7fe fe98 	bl	807d20e <USBD_Start>
 807e4de:	4603      	mov	r3, r0
 807e4e0:	2b00      	cmp	r3, #0
 807e4e2:	d001      	beq.n	807e4e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 807e4e4:	f7fa f8fc 	bl	80786e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 807e4e8:	bf00      	nop
 807e4ea:	bd80      	pop	{r7, pc}
 807e4ec:	20000070 	.word	0x20000070
 807e4f0:	2000021c 	.word	0x2000021c
 807e4f4:	2000000c 	.word	0x2000000c
 807e4f8:	200000c0 	.word	0x200000c0

0807e4fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e4fc:	b480      	push	{r7}
 807e4fe:	b083      	sub	sp, #12
 807e500:	af00      	add	r7, sp, #0
 807e502:	4603      	mov	r3, r0
 807e504:	6039      	str	r1, [r7, #0]
 807e506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 807e508:	683b      	ldr	r3, [r7, #0]
 807e50a:	2212      	movs	r2, #18
 807e50c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 807e50e:	4b03      	ldr	r3, [pc, #12]	@ (807e51c <USBD_FS_DeviceDescriptor+0x20>)
}
 807e510:	4618      	mov	r0, r3
 807e512:	370c      	adds	r7, #12
 807e514:	46bd      	mov	sp, r7
 807e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e51a:	4770      	bx	lr
 807e51c:	2000008c 	.word	0x2000008c

0807e520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e520:	b480      	push	{r7}
 807e522:	b083      	sub	sp, #12
 807e524:	af00      	add	r7, sp, #0
 807e526:	4603      	mov	r3, r0
 807e528:	6039      	str	r1, [r7, #0]
 807e52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 807e52c:	683b      	ldr	r3, [r7, #0]
 807e52e:	2204      	movs	r2, #4
 807e530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 807e532:	4b03      	ldr	r3, [pc, #12]	@ (807e540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 807e534:	4618      	mov	r0, r3
 807e536:	370c      	adds	r7, #12
 807e538:	46bd      	mov	sp, r7
 807e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e53e:	4770      	bx	lr
 807e540:	200000a0 	.word	0x200000a0

0807e544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e544:	b580      	push	{r7, lr}
 807e546:	b082      	sub	sp, #8
 807e548:	af00      	add	r7, sp, #0
 807e54a:	4603      	mov	r3, r0
 807e54c:	6039      	str	r1, [r7, #0]
 807e54e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 807e550:	79fb      	ldrb	r3, [r7, #7]
 807e552:	2b00      	cmp	r3, #0
 807e554:	d105      	bne.n	807e562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 807e556:	683a      	ldr	r2, [r7, #0]
 807e558:	4907      	ldr	r1, [pc, #28]	@ (807e578 <USBD_FS_ProductStrDescriptor+0x34>)
 807e55a:	4808      	ldr	r0, [pc, #32]	@ (807e57c <USBD_FS_ProductStrDescriptor+0x38>)
 807e55c:	f7ff feb7 	bl	807e2ce <USBD_GetString>
 807e560:	e004      	b.n	807e56c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 807e562:	683a      	ldr	r2, [r7, #0]
 807e564:	4904      	ldr	r1, [pc, #16]	@ (807e578 <USBD_FS_ProductStrDescriptor+0x34>)
 807e566:	4805      	ldr	r0, [pc, #20]	@ (807e57c <USBD_FS_ProductStrDescriptor+0x38>)
 807e568:	f7ff feb1 	bl	807e2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 807e56c:	4b02      	ldr	r3, [pc, #8]	@ (807e578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 807e56e:	4618      	mov	r0, r3
 807e570:	3708      	adds	r7, #8
 807e572:	46bd      	mov	sp, r7
 807e574:	bd80      	pop	{r7, pc}
 807e576:	bf00      	nop
 807e578:	200004ec 	.word	0x200004ec
 807e57c:	0807efec 	.word	0x0807efec

0807e580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e580:	b580      	push	{r7, lr}
 807e582:	b082      	sub	sp, #8
 807e584:	af00      	add	r7, sp, #0
 807e586:	4603      	mov	r3, r0
 807e588:	6039      	str	r1, [r7, #0]
 807e58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 807e58c:	683a      	ldr	r2, [r7, #0]
 807e58e:	4904      	ldr	r1, [pc, #16]	@ (807e5a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 807e590:	4804      	ldr	r0, [pc, #16]	@ (807e5a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 807e592:	f7ff fe9c 	bl	807e2ce <USBD_GetString>
  return USBD_StrDesc;
 807e596:	4b02      	ldr	r3, [pc, #8]	@ (807e5a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 807e598:	4618      	mov	r0, r3
 807e59a:	3708      	adds	r7, #8
 807e59c:	46bd      	mov	sp, r7
 807e59e:	bd80      	pop	{r7, pc}
 807e5a0:	200004ec 	.word	0x200004ec
 807e5a4:	0807effc 	.word	0x0807effc

0807e5a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e5a8:	b580      	push	{r7, lr}
 807e5aa:	b082      	sub	sp, #8
 807e5ac:	af00      	add	r7, sp, #0
 807e5ae:	4603      	mov	r3, r0
 807e5b0:	6039      	str	r1, [r7, #0]
 807e5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 807e5b4:	683b      	ldr	r3, [r7, #0]
 807e5b6:	221a      	movs	r2, #26
 807e5b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 807e5ba:	f000 f843 	bl	807e644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 807e5be:	4b02      	ldr	r3, [pc, #8]	@ (807e5c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 807e5c0:	4618      	mov	r0, r3
 807e5c2:	3708      	adds	r7, #8
 807e5c4:	46bd      	mov	sp, r7
 807e5c6:	bd80      	pop	{r7, pc}
 807e5c8:	200000a4 	.word	0x200000a4

0807e5cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e5cc:	b580      	push	{r7, lr}
 807e5ce:	b082      	sub	sp, #8
 807e5d0:	af00      	add	r7, sp, #0
 807e5d2:	4603      	mov	r3, r0
 807e5d4:	6039      	str	r1, [r7, #0]
 807e5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 807e5d8:	79fb      	ldrb	r3, [r7, #7]
 807e5da:	2b00      	cmp	r3, #0
 807e5dc:	d105      	bne.n	807e5ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 807e5de:	683a      	ldr	r2, [r7, #0]
 807e5e0:	4907      	ldr	r1, [pc, #28]	@ (807e600 <USBD_FS_ConfigStrDescriptor+0x34>)
 807e5e2:	4808      	ldr	r0, [pc, #32]	@ (807e604 <USBD_FS_ConfigStrDescriptor+0x38>)
 807e5e4:	f7ff fe73 	bl	807e2ce <USBD_GetString>
 807e5e8:	e004      	b.n	807e5f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 807e5ea:	683a      	ldr	r2, [r7, #0]
 807e5ec:	4904      	ldr	r1, [pc, #16]	@ (807e600 <USBD_FS_ConfigStrDescriptor+0x34>)
 807e5ee:	4805      	ldr	r0, [pc, #20]	@ (807e604 <USBD_FS_ConfigStrDescriptor+0x38>)
 807e5f0:	f7ff fe6d 	bl	807e2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 807e5f4:	4b02      	ldr	r3, [pc, #8]	@ (807e600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 807e5f6:	4618      	mov	r0, r3
 807e5f8:	3708      	adds	r7, #8
 807e5fa:	46bd      	mov	sp, r7
 807e5fc:	bd80      	pop	{r7, pc}
 807e5fe:	bf00      	nop
 807e600:	200004ec 	.word	0x200004ec
 807e604:	0807f004 	.word	0x0807f004

0807e608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e608:	b580      	push	{r7, lr}
 807e60a:	b082      	sub	sp, #8
 807e60c:	af00      	add	r7, sp, #0
 807e60e:	4603      	mov	r3, r0
 807e610:	6039      	str	r1, [r7, #0]
 807e612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 807e614:	79fb      	ldrb	r3, [r7, #7]
 807e616:	2b00      	cmp	r3, #0
 807e618:	d105      	bne.n	807e626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 807e61a:	683a      	ldr	r2, [r7, #0]
 807e61c:	4907      	ldr	r1, [pc, #28]	@ (807e63c <USBD_FS_InterfaceStrDescriptor+0x34>)
 807e61e:	4808      	ldr	r0, [pc, #32]	@ (807e640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 807e620:	f7ff fe55 	bl	807e2ce <USBD_GetString>
 807e624:	e004      	b.n	807e630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 807e626:	683a      	ldr	r2, [r7, #0]
 807e628:	4904      	ldr	r1, [pc, #16]	@ (807e63c <USBD_FS_InterfaceStrDescriptor+0x34>)
 807e62a:	4805      	ldr	r0, [pc, #20]	@ (807e640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 807e62c:	f7ff fe4f 	bl	807e2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 807e630:	4b02      	ldr	r3, [pc, #8]	@ (807e63c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 807e632:	4618      	mov	r0, r3
 807e634:	3708      	adds	r7, #8
 807e636:	46bd      	mov	sp, r7
 807e638:	bd80      	pop	{r7, pc}
 807e63a:	bf00      	nop
 807e63c:	200004ec 	.word	0x200004ec
 807e640:	0807f010 	.word	0x0807f010

0807e644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 807e644:	b580      	push	{r7, lr}
 807e646:	b084      	sub	sp, #16
 807e648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 807e64a:	4b0f      	ldr	r3, [pc, #60]	@ (807e688 <Get_SerialNum+0x44>)
 807e64c:	681b      	ldr	r3, [r3, #0]
 807e64e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 807e650:	4b0e      	ldr	r3, [pc, #56]	@ (807e68c <Get_SerialNum+0x48>)
 807e652:	681b      	ldr	r3, [r3, #0]
 807e654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 807e656:	4b0e      	ldr	r3, [pc, #56]	@ (807e690 <Get_SerialNum+0x4c>)
 807e658:	681b      	ldr	r3, [r3, #0]
 807e65a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 807e65c:	68fa      	ldr	r2, [r7, #12]
 807e65e:	687b      	ldr	r3, [r7, #4]
 807e660:	4413      	add	r3, r2
 807e662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 807e664:	68fb      	ldr	r3, [r7, #12]
 807e666:	2b00      	cmp	r3, #0
 807e668:	d009      	beq.n	807e67e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 807e66a:	2208      	movs	r2, #8
 807e66c:	4909      	ldr	r1, [pc, #36]	@ (807e694 <Get_SerialNum+0x50>)
 807e66e:	68f8      	ldr	r0, [r7, #12]
 807e670:	f000 f814 	bl	807e69c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 807e674:	2204      	movs	r2, #4
 807e676:	4908      	ldr	r1, [pc, #32]	@ (807e698 <Get_SerialNum+0x54>)
 807e678:	68b8      	ldr	r0, [r7, #8]
 807e67a:	f000 f80f 	bl	807e69c <IntToUnicode>
  }
}
 807e67e:	bf00      	nop
 807e680:	3710      	adds	r7, #16
 807e682:	46bd      	mov	sp, r7
 807e684:	bd80      	pop	{r7, pc}
 807e686:	bf00      	nop
 807e688:	1fff7a10 	.word	0x1fff7a10
 807e68c:	1fff7a14 	.word	0x1fff7a14
 807e690:	1fff7a18 	.word	0x1fff7a18
 807e694:	200000a6 	.word	0x200000a6
 807e698:	200000b6 	.word	0x200000b6

0807e69c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 807e69c:	b480      	push	{r7}
 807e69e:	b087      	sub	sp, #28
 807e6a0:	af00      	add	r7, sp, #0
 807e6a2:	60f8      	str	r0, [r7, #12]
 807e6a4:	60b9      	str	r1, [r7, #8]
 807e6a6:	4613      	mov	r3, r2
 807e6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 807e6aa:	2300      	movs	r3, #0
 807e6ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 807e6ae:	2300      	movs	r3, #0
 807e6b0:	75fb      	strb	r3, [r7, #23]
 807e6b2:	e027      	b.n	807e704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 807e6b4:	68fb      	ldr	r3, [r7, #12]
 807e6b6:	0f1b      	lsrs	r3, r3, #28
 807e6b8:	2b09      	cmp	r3, #9
 807e6ba:	d80b      	bhi.n	807e6d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 807e6bc:	68fb      	ldr	r3, [r7, #12]
 807e6be:	0f1b      	lsrs	r3, r3, #28
 807e6c0:	b2da      	uxtb	r2, r3
 807e6c2:	7dfb      	ldrb	r3, [r7, #23]
 807e6c4:	005b      	lsls	r3, r3, #1
 807e6c6:	4619      	mov	r1, r3
 807e6c8:	68bb      	ldr	r3, [r7, #8]
 807e6ca:	440b      	add	r3, r1
 807e6cc:	3230      	adds	r2, #48	@ 0x30
 807e6ce:	b2d2      	uxtb	r2, r2
 807e6d0:	701a      	strb	r2, [r3, #0]
 807e6d2:	e00a      	b.n	807e6ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 807e6d4:	68fb      	ldr	r3, [r7, #12]
 807e6d6:	0f1b      	lsrs	r3, r3, #28
 807e6d8:	b2da      	uxtb	r2, r3
 807e6da:	7dfb      	ldrb	r3, [r7, #23]
 807e6dc:	005b      	lsls	r3, r3, #1
 807e6de:	4619      	mov	r1, r3
 807e6e0:	68bb      	ldr	r3, [r7, #8]
 807e6e2:	440b      	add	r3, r1
 807e6e4:	3237      	adds	r2, #55	@ 0x37
 807e6e6:	b2d2      	uxtb	r2, r2
 807e6e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 807e6ea:	68fb      	ldr	r3, [r7, #12]
 807e6ec:	011b      	lsls	r3, r3, #4
 807e6ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 807e6f0:	7dfb      	ldrb	r3, [r7, #23]
 807e6f2:	005b      	lsls	r3, r3, #1
 807e6f4:	3301      	adds	r3, #1
 807e6f6:	68ba      	ldr	r2, [r7, #8]
 807e6f8:	4413      	add	r3, r2
 807e6fa:	2200      	movs	r2, #0
 807e6fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 807e6fe:	7dfb      	ldrb	r3, [r7, #23]
 807e700:	3301      	adds	r3, #1
 807e702:	75fb      	strb	r3, [r7, #23]
 807e704:	7dfa      	ldrb	r2, [r7, #23]
 807e706:	79fb      	ldrb	r3, [r7, #7]
 807e708:	429a      	cmp	r2, r3
 807e70a:	d3d3      	bcc.n	807e6b4 <IntToUnicode+0x18>
  }
}
 807e70c:	bf00      	nop
 807e70e:	bf00      	nop
 807e710:	371c      	adds	r7, #28
 807e712:	46bd      	mov	sp, r7
 807e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e718:	4770      	bx	lr

0807e71a <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 807e71a:	b580      	push	{r7, lr}
 807e71c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
	HAL_FLASH_Unlock();
 807e71e:	f7fa fa85 	bl	8078c2c <HAL_FLASH_Unlock>
  return (USBD_OK);
 807e722:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 807e724:	4618      	mov	r0, r3
 807e726:	bd80      	pop	{r7, pc}

0807e728 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 807e728:	b580      	push	{r7, lr}
 807e72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_FLASH_Lock();
 807e72c:	f7fa faa0 	bl	8078c70 <HAL_FLASH_Lock>
  return (USBD_OK);
 807e730:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 807e732:	4618      	mov	r0, r3
 807e734:	bd80      	pop	{r7, pc}

0807e736 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 807e736:	b580      	push	{r7, lr}
 807e738:	b08a      	sub	sp, #40	@ 0x28
 807e73a:	af00      	add	r7, sp, #0
 807e73c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
	uint32_t startsector = 0, sectorerror = 0;
 807e73e:	2300      	movs	r3, #0
 807e740:	627b      	str	r3, [r7, #36]	@ 0x24
 807e742:	2300      	movs	r3, #0
 807e744:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef eraseinitstruct;

	startsector = GetSector(Add);
 807e746:	6878      	ldr	r0, [r7, #4]
 807e748:	f000 f8aa 	bl	807e8a0 <GetSector>
 807e74c:	6278      	str	r0, [r7, #36]	@ 0x24
	  eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 807e74e:	2300      	movs	r3, #0
 807e750:	60bb      	str	r3, [r7, #8]
	  eraseinitstruct.Banks = GetBank(Add);
 807e752:	6878      	ldr	r0, [r7, #4]
 807e754:	f000 f90e 	bl	807e974 <GetBank>
 807e758:	4603      	mov	r3, r0
 807e75a:	60fb      	str	r3, [r7, #12]
	  eraseinitstruct.Sector = startsector;
 807e75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 807e75e:	613b      	str	r3, [r7, #16]
	  eraseinitstruct.NbSectors = 1;
 807e760:	2301      	movs	r3, #1
 807e762:	617b      	str	r3, [r7, #20]
	  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 807e764:	2302      	movs	r3, #2
 807e766:	61bb      	str	r3, [r7, #24]
	  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 807e768:	f107 021c 	add.w	r2, r7, #28
 807e76c:	f107 0308 	add.w	r3, r7, #8
 807e770:	4611      	mov	r1, r2
 807e772:	4618      	mov	r0, r3
 807e774:	f7fa fbcc 	bl	8078f10 <HAL_FLASHEx_Erase>
 807e778:	4603      	mov	r3, r0
 807e77a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  if (status != HAL_OK)
 807e77e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 807e782:	2b00      	cmp	r3, #0
 807e784:	d001      	beq.n	807e78a <MEM_If_Erase_FS+0x54>
	    {
	      return 1;
 807e786:	2301      	movs	r3, #1
 807e788:	e000      	b.n	807e78c <MEM_If_Erase_FS+0x56>
	    }
  return (USBD_OK);
 807e78a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 807e78c:	4618      	mov	r0, r3
 807e78e:	3728      	adds	r7, #40	@ 0x28
 807e790:	46bd      	mov	sp, r7
 807e792:	bd80      	pop	{r7, pc}

0807e794 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 807e794:	b5b0      	push	{r4, r5, r7, lr}
 807e796:	b086      	sub	sp, #24
 807e798:	af00      	add	r7, sp, #0
 807e79a:	60f8      	str	r0, [r7, #12]
 807e79c:	60b9      	str	r1, [r7, #8]
 807e79e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
	uint32_t i = 0;
 807e7a0:	2300      	movs	r3, #0
 807e7a2:	617b      	str	r3, [r7, #20]

	  for (i = 0; i < Len; i += 4)
 807e7a4:	2300      	movs	r3, #0
 807e7a6:	617b      	str	r3, [r7, #20]
 807e7a8:	e023      	b.n	807e7f2 <MEM_If_Write_FS+0x5e>
	  {
	    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
	     * be done by byte */
	    if (HAL_FLASH_Program
	        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (dest + i),
 807e7aa:	68ba      	ldr	r2, [r7, #8]
 807e7ac:	697b      	ldr	r3, [r7, #20]
 807e7ae:	4413      	add	r3, r2
	    if (HAL_FLASH_Program
 807e7b0:	4619      	mov	r1, r3
	         *(uint32_t *) (src + i)) == HAL_OK)
 807e7b2:	68fa      	ldr	r2, [r7, #12]
 807e7b4:	697b      	ldr	r3, [r7, #20]
 807e7b6:	4413      	add	r3, r2
 807e7b8:	681b      	ldr	r3, [r3, #0]
	    if (HAL_FLASH_Program
 807e7ba:	2200      	movs	r2, #0
 807e7bc:	461c      	mov	r4, r3
 807e7be:	4615      	mov	r5, r2
 807e7c0:	4622      	mov	r2, r4
 807e7c2:	462b      	mov	r3, r5
 807e7c4:	2002      	movs	r0, #2
 807e7c6:	f7fa f9dd 	bl	8078b84 <HAL_FLASH_Program>
 807e7ca:	4603      	mov	r3, r0
 807e7cc:	2b00      	cmp	r3, #0
 807e7ce:	d10b      	bne.n	807e7e8 <MEM_If_Write_FS+0x54>
	    {
	      /* Check the written value */
	      if (*(uint32_t *) (src + i) != *(uint32_t *) (dest + i))
 807e7d0:	68fa      	ldr	r2, [r7, #12]
 807e7d2:	697b      	ldr	r3, [r7, #20]
 807e7d4:	4413      	add	r3, r2
 807e7d6:	681a      	ldr	r2, [r3, #0]
 807e7d8:	68b9      	ldr	r1, [r7, #8]
 807e7da:	697b      	ldr	r3, [r7, #20]
 807e7dc:	440b      	add	r3, r1
 807e7de:	681b      	ldr	r3, [r3, #0]
 807e7e0:	429a      	cmp	r2, r3
 807e7e2:	d003      	beq.n	807e7ec <MEM_If_Write_FS+0x58>
	      {
	        /* Flash content doesn't match SRAM content */
	        return 2;
 807e7e4:	2302      	movs	r3, #2
 807e7e6:	e009      	b.n	807e7fc <MEM_If_Write_FS+0x68>
	      }
	    }
	    else
	    {
	      /* Error occurred while writing data in Flash memory */
	      return 1;
 807e7e8:	2301      	movs	r3, #1
 807e7ea:	e007      	b.n	807e7fc <MEM_If_Write_FS+0x68>
	  for (i = 0; i < Len; i += 4)
 807e7ec:	697b      	ldr	r3, [r7, #20]
 807e7ee:	3304      	adds	r3, #4
 807e7f0:	617b      	str	r3, [r7, #20]
 807e7f2:	697a      	ldr	r2, [r7, #20]
 807e7f4:	687b      	ldr	r3, [r7, #4]
 807e7f6:	429a      	cmp	r2, r3
 807e7f8:	d3d7      	bcc.n	807e7aa <MEM_If_Write_FS+0x16>
	    }
	  }
  return (USBD_OK);
 807e7fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 807e7fc:	4618      	mov	r0, r3
 807e7fe:	3718      	adds	r7, #24
 807e800:	46bd      	mov	sp, r7
 807e802:	bdb0      	pop	{r4, r5, r7, pc}

0807e804 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 807e804:	b480      	push	{r7}
 807e806:	b087      	sub	sp, #28
 807e808:	af00      	add	r7, sp, #0
 807e80a:	60f8      	str	r0, [r7, #12]
 807e80c:	60b9      	str	r1, [r7, #8]
 807e80e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
	uint32_t i = 0;
 807e810:	2300      	movs	r3, #0
 807e812:	617b      	str	r3, [r7, #20]
	  uint8_t *psrc = src;
 807e814:	68fb      	ldr	r3, [r7, #12]
 807e816:	613b      	str	r3, [r7, #16]

	  for (i = 0; i < Len; i++)
 807e818:	2300      	movs	r3, #0
 807e81a:	617b      	str	r3, [r7, #20]
 807e81c:	e00a      	b.n	807e834 <MEM_If_Read_FS+0x30>
	  {
	    dest[i] = *psrc++;
 807e81e:	693b      	ldr	r3, [r7, #16]
 807e820:	1c5a      	adds	r2, r3, #1
 807e822:	613a      	str	r2, [r7, #16]
 807e824:	68b9      	ldr	r1, [r7, #8]
 807e826:	697a      	ldr	r2, [r7, #20]
 807e828:	440a      	add	r2, r1
 807e82a:	781b      	ldrb	r3, [r3, #0]
 807e82c:	7013      	strb	r3, [r2, #0]
	  for (i = 0; i < Len; i++)
 807e82e:	697b      	ldr	r3, [r7, #20]
 807e830:	3301      	adds	r3, #1
 807e832:	617b      	str	r3, [r7, #20]
 807e834:	697a      	ldr	r2, [r7, #20]
 807e836:	687b      	ldr	r3, [r7, #4]
 807e838:	429a      	cmp	r2, r3
 807e83a:	d3f0      	bcc.n	807e81e <MEM_If_Read_FS+0x1a>
	  }
	  /* Return a valid address to avoid HardFault */
	  return (uint8_t *) (dest);
 807e83c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END 4 */
}
 807e83e:	4618      	mov	r0, r3
 807e840:	371c      	adds	r7, #28
 807e842:	46bd      	mov	sp, r7
 807e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e848:	4770      	bx	lr

0807e84a <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 807e84a:	b480      	push	{r7}
 807e84c:	b085      	sub	sp, #20
 807e84e:	af00      	add	r7, sp, #0
 807e850:	60f8      	str	r0, [r7, #12]
 807e852:	460b      	mov	r3, r1
 807e854:	607a      	str	r2, [r7, #4]
 807e856:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
	switch (Cmd)
 807e858:	7afb      	ldrb	r3, [r7, #11]
 807e85a:	2b01      	cmp	r3, #1
 807e85c:	d10c      	bne.n	807e878 <MEM_If_GetStatus_FS+0x2e>
	  {
	  case DFU_MEDIA_PROGRAM:
	    buffer[1] = (uint8_t) FLASH_PROGRAM_TIME;
 807e85e:	687b      	ldr	r3, [r7, #4]
 807e860:	3301      	adds	r3, #1
 807e862:	2232      	movs	r2, #50	@ 0x32
 807e864:	701a      	strb	r2, [r3, #0]
	    buffer[2] = (uint8_t) (FLASH_PROGRAM_TIME << 8);
 807e866:	687b      	ldr	r3, [r7, #4]
 807e868:	3302      	adds	r3, #2
 807e86a:	2200      	movs	r2, #0
 807e86c:	701a      	strb	r2, [r3, #0]
	    buffer[3] = 0;
 807e86e:	687b      	ldr	r3, [r7, #4]
 807e870:	3303      	adds	r3, #3
 807e872:	2200      	movs	r2, #0
 807e874:	701a      	strb	r2, [r3, #0]
	    break;
 807e876:	e00c      	b.n	807e892 <MEM_If_GetStatus_FS+0x48>

	  case DFU_MEDIA_ERASE:
	  default:
	    buffer[1] = (uint8_t) FLASH_ERASE_TIME;
 807e878:	687b      	ldr	r3, [r7, #4]
 807e87a:	3301      	adds	r3, #1
 807e87c:	2232      	movs	r2, #50	@ 0x32
 807e87e:	701a      	strb	r2, [r3, #0]
	    buffer[2] = (uint8_t) (FLASH_ERASE_TIME << 8);
 807e880:	687b      	ldr	r3, [r7, #4]
 807e882:	3302      	adds	r3, #2
 807e884:	2200      	movs	r2, #0
 807e886:	701a      	strb	r2, [r3, #0]
	    buffer[3] = 0;
 807e888:	687b      	ldr	r3, [r7, #4]
 807e88a:	3303      	adds	r3, #3
 807e88c:	2200      	movs	r2, #0
 807e88e:	701a      	strb	r2, [r3, #0]
	    break;
 807e890:	bf00      	nop
	  }
  return (USBD_OK);
 807e892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 807e894:	4618      	mov	r0, r3
 807e896:	3714      	adds	r7, #20
 807e898:	46bd      	mov	sp, r7
 807e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e89e:	4770      	bx	lr

0807e8a0 <GetSector>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static uint32_t GetSector(uint32_t Address)
{
 807e8a0:	b480      	push	{r7}
 807e8a2:	b085      	sub	sp, #20
 807e8a4:	af00      	add	r7, sp, #0
 807e8a6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 807e8a8:	2300      	movs	r3, #0
 807e8aa:	60fb      	str	r3, [r7, #12]

  if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 807e8ac:	687b      	ldr	r3, [r7, #4]
 807e8ae:	4a2a      	ldr	r2, [pc, #168]	@ (807e958 <GetSector+0xb8>)
 807e8b0:	4293      	cmp	r3, r2
 807e8b2:	d206      	bcs.n	807e8c2 <GetSector+0x22>
 807e8b4:	687b      	ldr	r3, [r7, #4]
 807e8b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 807e8ba:	d302      	bcc.n	807e8c2 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 807e8bc:	2300      	movs	r3, #0
 807e8be:	60fb      	str	r3, [r7, #12]
 807e8c0:	e043      	b.n	807e94a <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 807e8c2:	687b      	ldr	r3, [r7, #4]
 807e8c4:	4a25      	ldr	r2, [pc, #148]	@ (807e95c <GetSector+0xbc>)
 807e8c6:	4293      	cmp	r3, r2
 807e8c8:	d206      	bcs.n	807e8d8 <GetSector+0x38>
 807e8ca:	687b      	ldr	r3, [r7, #4]
 807e8cc:	4a22      	ldr	r2, [pc, #136]	@ (807e958 <GetSector+0xb8>)
 807e8ce:	4293      	cmp	r3, r2
 807e8d0:	d302      	bcc.n	807e8d8 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 807e8d2:	2301      	movs	r3, #1
 807e8d4:	60fb      	str	r3, [r7, #12]
 807e8d6:	e038      	b.n	807e94a <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 807e8d8:	687b      	ldr	r3, [r7, #4]
 807e8da:	4a21      	ldr	r2, [pc, #132]	@ (807e960 <GetSector+0xc0>)
 807e8dc:	4293      	cmp	r3, r2
 807e8de:	d206      	bcs.n	807e8ee <GetSector+0x4e>
 807e8e0:	687b      	ldr	r3, [r7, #4]
 807e8e2:	4a1e      	ldr	r2, [pc, #120]	@ (807e95c <GetSector+0xbc>)
 807e8e4:	4293      	cmp	r3, r2
 807e8e6:	d302      	bcc.n	807e8ee <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 807e8e8:	2302      	movs	r3, #2
 807e8ea:	60fb      	str	r3, [r7, #12]
 807e8ec:	e02d      	b.n	807e94a <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 807e8ee:	687b      	ldr	r3, [r7, #4]
 807e8f0:	4a1c      	ldr	r2, [pc, #112]	@ (807e964 <GetSector+0xc4>)
 807e8f2:	4293      	cmp	r3, r2
 807e8f4:	d806      	bhi.n	807e904 <GetSector+0x64>
 807e8f6:	687b      	ldr	r3, [r7, #4]
 807e8f8:	4a19      	ldr	r2, [pc, #100]	@ (807e960 <GetSector+0xc0>)
 807e8fa:	4293      	cmp	r3, r2
 807e8fc:	d302      	bcc.n	807e904 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 807e8fe:	2303      	movs	r3, #3
 807e900:	60fb      	str	r3, [r7, #12]
 807e902:	e022      	b.n	807e94a <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 807e904:	687b      	ldr	r3, [r7, #4]
 807e906:	4a18      	ldr	r2, [pc, #96]	@ (807e968 <GetSector+0xc8>)
 807e908:	4293      	cmp	r3, r2
 807e90a:	d806      	bhi.n	807e91a <GetSector+0x7a>
 807e90c:	687b      	ldr	r3, [r7, #4]
 807e90e:	4a15      	ldr	r2, [pc, #84]	@ (807e964 <GetSector+0xc4>)
 807e910:	4293      	cmp	r3, r2
 807e912:	d902      	bls.n	807e91a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 807e914:	2304      	movs	r3, #4
 807e916:	60fb      	str	r3, [r7, #12]
 807e918:	e017      	b.n	807e94a <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 807e91a:	687b      	ldr	r3, [r7, #4]
 807e91c:	4a13      	ldr	r2, [pc, #76]	@ (807e96c <GetSector+0xcc>)
 807e91e:	4293      	cmp	r3, r2
 807e920:	d806      	bhi.n	807e930 <GetSector+0x90>
 807e922:	687b      	ldr	r3, [r7, #4]
 807e924:	4a10      	ldr	r2, [pc, #64]	@ (807e968 <GetSector+0xc8>)
 807e926:	4293      	cmp	r3, r2
 807e928:	d902      	bls.n	807e930 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 807e92a:	2305      	movs	r3, #5
 807e92c:	60fb      	str	r3, [r7, #12]
 807e92e:	e00c      	b.n	807e94a <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 807e930:	687b      	ldr	r3, [r7, #4]
 807e932:	4a0f      	ldr	r2, [pc, #60]	@ (807e970 <GetSector+0xd0>)
 807e934:	4293      	cmp	r3, r2
 807e936:	d806      	bhi.n	807e946 <GetSector+0xa6>
 807e938:	687b      	ldr	r3, [r7, #4]
 807e93a:	4a0c      	ldr	r2, [pc, #48]	@ (807e96c <GetSector+0xcc>)
 807e93c:	4293      	cmp	r3, r2
 807e93e:	d902      	bls.n	807e946 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 807e940:	2306      	movs	r3, #6
 807e942:	60fb      	str	r3, [r7, #12]
 807e944:	e001      	b.n	807e94a <GetSector+0xaa>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 807e946:	2307      	movs	r3, #7
 807e948:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 807e94a:	68fb      	ldr	r3, [r7, #12]
}
 807e94c:	4618      	mov	r0, r3
 807e94e:	3714      	adds	r7, #20
 807e950:	46bd      	mov	sp, r7
 807e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e956:	4770      	bx	lr
 807e958:	08004000 	.word	0x08004000
 807e95c:	08008000 	.word	0x08008000
 807e960:	0800c000 	.word	0x0800c000
 807e964:	0800ffff 	.word	0x0800ffff
 807e968:	0801ffff 	.word	0x0801ffff
 807e96c:	0803ffff 	.word	0x0803ffff
 807e970:	0805ffff 	.word	0x0805ffff

0807e974 <GetBank>:

static uint32_t GetBank(uint32_t Addr)
{
 807e974:	b480      	push	{r7}
 807e976:	b085      	sub	sp, #20
 807e978:	af00      	add	r7, sp, #0
 807e97a:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0;
 807e97c:	2300      	movs	r3, #0
 807e97e:	60fb      	str	r3, [r7, #12]

  /* Sector in bank 1 */
  bank = FLASH_BANK_1;
 807e980:	2301      	movs	r3, #1
 807e982:	60fb      	str	r3, [r7, #12]
  return bank;
 807e984:	68fb      	ldr	r3, [r7, #12]
}
 807e986:	4618      	mov	r0, r3
 807e988:	3714      	adds	r7, #20
 807e98a:	46bd      	mov	sp, r7
 807e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e990:	4770      	bx	lr
	...

0807e994 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 807e994:	b580      	push	{r7, lr}
 807e996:	b08a      	sub	sp, #40	@ 0x28
 807e998:	af00      	add	r7, sp, #0
 807e99a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 807e99c:	f107 0314 	add.w	r3, r7, #20
 807e9a0:	2200      	movs	r2, #0
 807e9a2:	601a      	str	r2, [r3, #0]
 807e9a4:	605a      	str	r2, [r3, #4]
 807e9a6:	609a      	str	r2, [r3, #8]
 807e9a8:	60da      	str	r2, [r3, #12]
 807e9aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 807e9ac:	687b      	ldr	r3, [r7, #4]
 807e9ae:	681b      	ldr	r3, [r3, #0]
 807e9b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 807e9b4:	d13a      	bne.n	807ea2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 807e9b6:	2300      	movs	r3, #0
 807e9b8:	613b      	str	r3, [r7, #16]
 807e9ba:	4b1e      	ldr	r3, [pc, #120]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807e9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807e9be:	4a1d      	ldr	r2, [pc, #116]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807e9c0:	f043 0301 	orr.w	r3, r3, #1
 807e9c4:	6313      	str	r3, [r2, #48]	@ 0x30
 807e9c6:	4b1b      	ldr	r3, [pc, #108]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807e9c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 807e9ca:	f003 0301 	and.w	r3, r3, #1
 807e9ce:	613b      	str	r3, [r7, #16]
 807e9d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 807e9d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 807e9d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807e9d8:	2302      	movs	r3, #2
 807e9da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 807e9dc:	2300      	movs	r3, #0
 807e9de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 807e9e0:	2303      	movs	r3, #3
 807e9e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 807e9e4:	230a      	movs	r3, #10
 807e9e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 807e9e8:	f107 0314 	add.w	r3, r7, #20
 807e9ec:	4619      	mov	r1, r3
 807e9ee:	4812      	ldr	r0, [pc, #72]	@ (807ea38 <HAL_PCD_MspInit+0xa4>)
 807e9f0:	f7fa fbb0 	bl	8079154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 807e9f4:	4b0f      	ldr	r3, [pc, #60]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807e9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 807e9f8:	4a0e      	ldr	r2, [pc, #56]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807e9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 807e9fe:	6353      	str	r3, [r2, #52]	@ 0x34
 807ea00:	2300      	movs	r3, #0
 807ea02:	60fb      	str	r3, [r7, #12]
 807ea04:	4b0b      	ldr	r3, [pc, #44]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807ea06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 807ea08:	4a0a      	ldr	r2, [pc, #40]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807ea0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 807ea0e:	6453      	str	r3, [r2, #68]	@ 0x44
 807ea10:	4b08      	ldr	r3, [pc, #32]	@ (807ea34 <HAL_PCD_MspInit+0xa0>)
 807ea12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 807ea14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 807ea18:	60fb      	str	r3, [r7, #12]
 807ea1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 807ea1c:	2200      	movs	r2, #0
 807ea1e:	2100      	movs	r1, #0
 807ea20:	2043      	movs	r0, #67	@ 0x43
 807ea22:	f7fa f878 	bl	8078b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 807ea26:	2043      	movs	r0, #67	@ 0x43
 807ea28:	f7fa f891 	bl	8078b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 807ea2c:	bf00      	nop
 807ea2e:	3728      	adds	r7, #40	@ 0x28
 807ea30:	46bd      	mov	sp, r7
 807ea32:	bd80      	pop	{r7, pc}
 807ea34:	40023800 	.word	0x40023800
 807ea38:	40020000 	.word	0x40020000

0807ea3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea3c:	b580      	push	{r7, lr}
 807ea3e:	b082      	sub	sp, #8
 807ea40:	af00      	add	r7, sp, #0
 807ea42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 807ea44:	687b      	ldr	r3, [r7, #4]
 807ea46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 807ea4a:	687b      	ldr	r3, [r7, #4]
 807ea4c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 807ea50:	4619      	mov	r1, r3
 807ea52:	4610      	mov	r0, r2
 807ea54:	f7fe fc41 	bl	807d2da <USBD_LL_SetupStage>
}
 807ea58:	bf00      	nop
 807ea5a:	3708      	adds	r7, #8
 807ea5c:	46bd      	mov	sp, r7
 807ea5e:	bd80      	pop	{r7, pc}

0807ea60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea60:	b580      	push	{r7, lr}
 807ea62:	b082      	sub	sp, #8
 807ea64:	af00      	add	r7, sp, #0
 807ea66:	6078      	str	r0, [r7, #4]
 807ea68:	460b      	mov	r3, r1
 807ea6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 807ea6c:	687b      	ldr	r3, [r7, #4]
 807ea6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 807ea72:	78fa      	ldrb	r2, [r7, #3]
 807ea74:	6879      	ldr	r1, [r7, #4]
 807ea76:	4613      	mov	r3, r2
 807ea78:	00db      	lsls	r3, r3, #3
 807ea7a:	1a9b      	subs	r3, r3, r2
 807ea7c:	009b      	lsls	r3, r3, #2
 807ea7e:	440b      	add	r3, r1
 807ea80:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 807ea84:	681a      	ldr	r2, [r3, #0]
 807ea86:	78fb      	ldrb	r3, [r7, #3]
 807ea88:	4619      	mov	r1, r3
 807ea8a:	f7fe fc7b 	bl	807d384 <USBD_LL_DataOutStage>
}
 807ea8e:	bf00      	nop
 807ea90:	3708      	adds	r7, #8
 807ea92:	46bd      	mov	sp, r7
 807ea94:	bd80      	pop	{r7, pc}

0807ea96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea96:	b580      	push	{r7, lr}
 807ea98:	b082      	sub	sp, #8
 807ea9a:	af00      	add	r7, sp, #0
 807ea9c:	6078      	str	r0, [r7, #4]
 807ea9e:	460b      	mov	r3, r1
 807eaa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 807eaa2:	687b      	ldr	r3, [r7, #4]
 807eaa4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 807eaa8:	78fa      	ldrb	r2, [r7, #3]
 807eaaa:	6879      	ldr	r1, [r7, #4]
 807eaac:	4613      	mov	r3, r2
 807eaae:	00db      	lsls	r3, r3, #3
 807eab0:	1a9b      	subs	r3, r3, r2
 807eab2:	009b      	lsls	r3, r3, #2
 807eab4:	440b      	add	r3, r1
 807eab6:	3348      	adds	r3, #72	@ 0x48
 807eab8:	681a      	ldr	r2, [r3, #0]
 807eaba:	78fb      	ldrb	r3, [r7, #3]
 807eabc:	4619      	mov	r1, r3
 807eabe:	f7fe fcc4 	bl	807d44a <USBD_LL_DataInStage>
}
 807eac2:	bf00      	nop
 807eac4:	3708      	adds	r7, #8
 807eac6:	46bd      	mov	sp, r7
 807eac8:	bd80      	pop	{r7, pc}

0807eaca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eaca:	b580      	push	{r7, lr}
 807eacc:	b082      	sub	sp, #8
 807eace:	af00      	add	r7, sp, #0
 807ead0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 807ead2:	687b      	ldr	r3, [r7, #4]
 807ead4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807ead8:	4618      	mov	r0, r3
 807eada:	f7fe fdd8 	bl	807d68e <USBD_LL_SOF>
}
 807eade:	bf00      	nop
 807eae0:	3708      	adds	r7, #8
 807eae2:	46bd      	mov	sp, r7
 807eae4:	bd80      	pop	{r7, pc}

0807eae6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eae6:	b580      	push	{r7, lr}
 807eae8:	b084      	sub	sp, #16
 807eaea:	af00      	add	r7, sp, #0
 807eaec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 807eaee:	2301      	movs	r3, #1
 807eaf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 807eaf2:	687b      	ldr	r3, [r7, #4]
 807eaf4:	68db      	ldr	r3, [r3, #12]
 807eaf6:	2b02      	cmp	r3, #2
 807eaf8:	d001      	beq.n	807eafe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 807eafa:	f7f9 fdf1 	bl	80786e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 807eafe:	687b      	ldr	r3, [r7, #4]
 807eb00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807eb04:	7bfa      	ldrb	r2, [r7, #15]
 807eb06:	4611      	mov	r1, r2
 807eb08:	4618      	mov	r0, r3
 807eb0a:	f7fe fd82 	bl	807d612 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 807eb0e:	687b      	ldr	r3, [r7, #4]
 807eb10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807eb14:	4618      	mov	r0, r3
 807eb16:	f7fe fd2e 	bl	807d576 <USBD_LL_Reset>
}
 807eb1a:	bf00      	nop
 807eb1c:	3710      	adds	r7, #16
 807eb1e:	46bd      	mov	sp, r7
 807eb20:	bd80      	pop	{r7, pc}
	...

0807eb24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb24:	b580      	push	{r7, lr}
 807eb26:	b082      	sub	sp, #8
 807eb28:	af00      	add	r7, sp, #0
 807eb2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 807eb2c:	687b      	ldr	r3, [r7, #4]
 807eb2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807eb32:	4618      	mov	r0, r3
 807eb34:	f7fe fd7d 	bl	807d632 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 807eb38:	687b      	ldr	r3, [r7, #4]
 807eb3a:	681b      	ldr	r3, [r3, #0]
 807eb3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 807eb40:	681b      	ldr	r3, [r3, #0]
 807eb42:	687a      	ldr	r2, [r7, #4]
 807eb44:	6812      	ldr	r2, [r2, #0]
 807eb46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 807eb4a:	f043 0301 	orr.w	r3, r3, #1
 807eb4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 807eb50:	687b      	ldr	r3, [r7, #4]
 807eb52:	6a1b      	ldr	r3, [r3, #32]
 807eb54:	2b00      	cmp	r3, #0
 807eb56:	d005      	beq.n	807eb64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 807eb58:	4b04      	ldr	r3, [pc, #16]	@ (807eb6c <HAL_PCD_SuspendCallback+0x48>)
 807eb5a:	691b      	ldr	r3, [r3, #16]
 807eb5c:	4a03      	ldr	r2, [pc, #12]	@ (807eb6c <HAL_PCD_SuspendCallback+0x48>)
 807eb5e:	f043 0306 	orr.w	r3, r3, #6
 807eb62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 807eb64:	bf00      	nop
 807eb66:	3708      	adds	r7, #8
 807eb68:	46bd      	mov	sp, r7
 807eb6a:	bd80      	pop	{r7, pc}
 807eb6c:	e000ed00 	.word	0xe000ed00

0807eb70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb70:	b580      	push	{r7, lr}
 807eb72:	b082      	sub	sp, #8
 807eb74:	af00      	add	r7, sp, #0
 807eb76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 807eb78:	687b      	ldr	r3, [r7, #4]
 807eb7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807eb7e:	4618      	mov	r0, r3
 807eb80:	f7fe fd6d 	bl	807d65e <USBD_LL_Resume>
}
 807eb84:	bf00      	nop
 807eb86:	3708      	adds	r7, #8
 807eb88:	46bd      	mov	sp, r7
 807eb8a:	bd80      	pop	{r7, pc}

0807eb8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb8c:	b580      	push	{r7, lr}
 807eb8e:	b082      	sub	sp, #8
 807eb90:	af00      	add	r7, sp, #0
 807eb92:	6078      	str	r0, [r7, #4]
 807eb94:	460b      	mov	r3, r1
 807eb96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807eb98:	687b      	ldr	r3, [r7, #4]
 807eb9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807eb9e:	78fa      	ldrb	r2, [r7, #3]
 807eba0:	4611      	mov	r1, r2
 807eba2:	4618      	mov	r0, r3
 807eba4:	f7fe fdbb 	bl	807d71e <USBD_LL_IsoOUTIncomplete>
}
 807eba8:	bf00      	nop
 807ebaa:	3708      	adds	r7, #8
 807ebac:	46bd      	mov	sp, r7
 807ebae:	bd80      	pop	{r7, pc}

0807ebb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ebb0:	b580      	push	{r7, lr}
 807ebb2:	b082      	sub	sp, #8
 807ebb4:	af00      	add	r7, sp, #0
 807ebb6:	6078      	str	r0, [r7, #4]
 807ebb8:	460b      	mov	r3, r1
 807ebba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807ebbc:	687b      	ldr	r3, [r7, #4]
 807ebbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807ebc2:	78fa      	ldrb	r2, [r7, #3]
 807ebc4:	4611      	mov	r1, r2
 807ebc6:	4618      	mov	r0, r3
 807ebc8:	f7fe fd83 	bl	807d6d2 <USBD_LL_IsoINIncomplete>
}
 807ebcc:	bf00      	nop
 807ebce:	3708      	adds	r7, #8
 807ebd0:	46bd      	mov	sp, r7
 807ebd2:	bd80      	pop	{r7, pc}

0807ebd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ebd4:	b580      	push	{r7, lr}
 807ebd6:	b082      	sub	sp, #8
 807ebd8:	af00      	add	r7, sp, #0
 807ebda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 807ebdc:	687b      	ldr	r3, [r7, #4]
 807ebde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807ebe2:	4618      	mov	r0, r3
 807ebe4:	f7fe fdc1 	bl	807d76a <USBD_LL_DevConnected>
}
 807ebe8:	bf00      	nop
 807ebea:	3708      	adds	r7, #8
 807ebec:	46bd      	mov	sp, r7
 807ebee:	bd80      	pop	{r7, pc}

0807ebf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ebf0:	b580      	push	{r7, lr}
 807ebf2:	b082      	sub	sp, #8
 807ebf4:	af00      	add	r7, sp, #0
 807ebf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 807ebf8:	687b      	ldr	r3, [r7, #4]
 807ebfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 807ebfe:	4618      	mov	r0, r3
 807ec00:	f7fe fdbe 	bl	807d780 <USBD_LL_DevDisconnected>
}
 807ec04:	bf00      	nop
 807ec06:	3708      	adds	r7, #8
 807ec08:	46bd      	mov	sp, r7
 807ec0a:	bd80      	pop	{r7, pc}

0807ec0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 807ec0c:	b580      	push	{r7, lr}
 807ec0e:	b082      	sub	sp, #8
 807ec10:	af00      	add	r7, sp, #0
 807ec12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 807ec14:	687b      	ldr	r3, [r7, #4]
 807ec16:	781b      	ldrb	r3, [r3, #0]
 807ec18:	2b00      	cmp	r3, #0
 807ec1a:	d13c      	bne.n	807ec96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 807ec1c:	4a20      	ldr	r2, [pc, #128]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec1e:	687b      	ldr	r3, [r7, #4]
 807ec20:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 807ec24:	687b      	ldr	r3, [r7, #4]
 807ec26:	4a1e      	ldr	r2, [pc, #120]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 807ec2c:	4b1c      	ldr	r3, [pc, #112]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 807ec32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 807ec34:	4b1a      	ldr	r3, [pc, #104]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec36:	2204      	movs	r2, #4
 807ec38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 807ec3a:	4b19      	ldr	r3, [pc, #100]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec3c:	2202      	movs	r2, #2
 807ec3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 807ec40:	4b17      	ldr	r3, [pc, #92]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec42:	2200      	movs	r2, #0
 807ec44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 807ec46:	4b16      	ldr	r3, [pc, #88]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec48:	2202      	movs	r2, #2
 807ec4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 807ec4c:	4b14      	ldr	r3, [pc, #80]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec4e:	2200      	movs	r2, #0
 807ec50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 807ec52:	4b13      	ldr	r3, [pc, #76]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec54:	2200      	movs	r2, #0
 807ec56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 807ec58:	4b11      	ldr	r3, [pc, #68]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec5a:	2200      	movs	r2, #0
 807ec5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 807ec5e:	4b10      	ldr	r3, [pc, #64]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec60:	2200      	movs	r2, #0
 807ec62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 807ec64:	4b0e      	ldr	r3, [pc, #56]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec66:	2200      	movs	r2, #0
 807ec68:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 807ec6a:	480d      	ldr	r0, [pc, #52]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec6c:	f7fa fc29 	bl	80794c2 <HAL_PCD_Init>
 807ec70:	4603      	mov	r3, r0
 807ec72:	2b00      	cmp	r3, #0
 807ec74:	d001      	beq.n	807ec7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 807ec76:	f7f9 fd33 	bl	80786e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 807ec7a:	2180      	movs	r1, #128	@ 0x80
 807ec7c:	4808      	ldr	r0, [pc, #32]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec7e:	f7fb fd5e 	bl	807a73e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 807ec82:	2240      	movs	r2, #64	@ 0x40
 807ec84:	2100      	movs	r1, #0
 807ec86:	4806      	ldr	r0, [pc, #24]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec88:	f7fb fd12 	bl	807a6b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 807ec8c:	2280      	movs	r2, #128	@ 0x80
 807ec8e:	2101      	movs	r1, #1
 807ec90:	4803      	ldr	r0, [pc, #12]	@ (807eca0 <USBD_LL_Init+0x94>)
 807ec92:	f7fb fd0d 	bl	807a6b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 807ec96:	2300      	movs	r3, #0
}
 807ec98:	4618      	mov	r0, r3
 807ec9a:	3708      	adds	r7, #8
 807ec9c:	46bd      	mov	sp, r7
 807ec9e:	bd80      	pop	{r7, pc}
 807eca0:	200006ec 	.word	0x200006ec

0807eca4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 807eca4:	b580      	push	{r7, lr}
 807eca6:	b084      	sub	sp, #16
 807eca8:	af00      	add	r7, sp, #0
 807ecaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ecac:	2300      	movs	r3, #0
 807ecae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ecb0:	2300      	movs	r3, #0
 807ecb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 807ecb4:	687b      	ldr	r3, [r7, #4]
 807ecb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 807ecba:	4618      	mov	r0, r3
 807ecbc:	f7fa fd1e 	bl	80796fc <HAL_PCD_Start>
 807ecc0:	4603      	mov	r3, r0
 807ecc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ecc4:	7bfb      	ldrb	r3, [r7, #15]
 807ecc6:	4618      	mov	r0, r3
 807ecc8:	f000 f92c 	bl	807ef24 <USBD_Get_USB_Status>
 807eccc:	4603      	mov	r3, r0
 807ecce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ecd0:	7bbb      	ldrb	r3, [r7, #14]
}
 807ecd2:	4618      	mov	r0, r3
 807ecd4:	3710      	adds	r7, #16
 807ecd6:	46bd      	mov	sp, r7
 807ecd8:	bd80      	pop	{r7, pc}

0807ecda <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 807ecda:	b580      	push	{r7, lr}
 807ecdc:	b084      	sub	sp, #16
 807ecde:	af00      	add	r7, sp, #0
 807ece0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ece2:	2300      	movs	r3, #0
 807ece4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ece6:	2300      	movs	r3, #0
 807ece8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 807ecea:	687b      	ldr	r3, [r7, #4]
 807ecec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 807ecf0:	4618      	mov	r0, r3
 807ecf2:	f7fa fd36 	bl	8079762 <HAL_PCD_Stop>
 807ecf6:	4603      	mov	r3, r0
 807ecf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ecfa:	7bfb      	ldrb	r3, [r7, #15]
 807ecfc:	4618      	mov	r0, r3
 807ecfe:	f000 f911 	bl	807ef24 <USBD_Get_USB_Status>
 807ed02:	4603      	mov	r3, r0
 807ed04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed06:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed08:	4618      	mov	r0, r3
 807ed0a:	3710      	adds	r7, #16
 807ed0c:	46bd      	mov	sp, r7
 807ed0e:	bd80      	pop	{r7, pc}

0807ed10 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 807ed10:	b580      	push	{r7, lr}
 807ed12:	b084      	sub	sp, #16
 807ed14:	af00      	add	r7, sp, #0
 807ed16:	6078      	str	r0, [r7, #4]
 807ed18:	4608      	mov	r0, r1
 807ed1a:	4611      	mov	r1, r2
 807ed1c:	461a      	mov	r2, r3
 807ed1e:	4603      	mov	r3, r0
 807ed20:	70fb      	strb	r3, [r7, #3]
 807ed22:	460b      	mov	r3, r1
 807ed24:	70bb      	strb	r3, [r7, #2]
 807ed26:	4613      	mov	r3, r2
 807ed28:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ed2a:	2300      	movs	r3, #0
 807ed2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ed2e:	2300      	movs	r3, #0
 807ed30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 807ed32:	687b      	ldr	r3, [r7, #4]
 807ed34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 807ed38:	78bb      	ldrb	r3, [r7, #2]
 807ed3a:	883a      	ldrh	r2, [r7, #0]
 807ed3c:	78f9      	ldrb	r1, [r7, #3]
 807ed3e:	f7fb f920 	bl	8079f82 <HAL_PCD_EP_Open>
 807ed42:	4603      	mov	r3, r0
 807ed44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ed46:	7bfb      	ldrb	r3, [r7, #15]
 807ed48:	4618      	mov	r0, r3
 807ed4a:	f000 f8eb 	bl	807ef24 <USBD_Get_USB_Status>
 807ed4e:	4603      	mov	r3, r0
 807ed50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed52:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed54:	4618      	mov	r0, r3
 807ed56:	3710      	adds	r7, #16
 807ed58:	46bd      	mov	sp, r7
 807ed5a:	bd80      	pop	{r7, pc}

0807ed5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807ed5c:	b580      	push	{r7, lr}
 807ed5e:	b084      	sub	sp, #16
 807ed60:	af00      	add	r7, sp, #0
 807ed62:	6078      	str	r0, [r7, #4]
 807ed64:	460b      	mov	r3, r1
 807ed66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ed68:	2300      	movs	r3, #0
 807ed6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ed6c:	2300      	movs	r3, #0
 807ed6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 807ed70:	687b      	ldr	r3, [r7, #4]
 807ed72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 807ed76:	78fa      	ldrb	r2, [r7, #3]
 807ed78:	4611      	mov	r1, r2
 807ed7a:	4618      	mov	r0, r3
 807ed7c:	f7fb f9fe 	bl	807a17c <HAL_PCD_EP_SetStall>
 807ed80:	4603      	mov	r3, r0
 807ed82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ed84:	7bfb      	ldrb	r3, [r7, #15]
 807ed86:	4618      	mov	r0, r3
 807ed88:	f000 f8cc 	bl	807ef24 <USBD_Get_USB_Status>
 807ed8c:	4603      	mov	r3, r0
 807ed8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed90:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed92:	4618      	mov	r0, r3
 807ed94:	3710      	adds	r7, #16
 807ed96:	46bd      	mov	sp, r7
 807ed98:	bd80      	pop	{r7, pc}

0807ed9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807ed9a:	b580      	push	{r7, lr}
 807ed9c:	b084      	sub	sp, #16
 807ed9e:	af00      	add	r7, sp, #0
 807eda0:	6078      	str	r0, [r7, #4]
 807eda2:	460b      	mov	r3, r1
 807eda4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807eda6:	2300      	movs	r3, #0
 807eda8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807edaa:	2300      	movs	r3, #0
 807edac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 807edae:	687b      	ldr	r3, [r7, #4]
 807edb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 807edb4:	78fa      	ldrb	r2, [r7, #3]
 807edb6:	4611      	mov	r1, r2
 807edb8:	4618      	mov	r0, r3
 807edba:	f7fb fa43 	bl	807a244 <HAL_PCD_EP_ClrStall>
 807edbe:	4603      	mov	r3, r0
 807edc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807edc2:	7bfb      	ldrb	r3, [r7, #15]
 807edc4:	4618      	mov	r0, r3
 807edc6:	f000 f8ad 	bl	807ef24 <USBD_Get_USB_Status>
 807edca:	4603      	mov	r3, r0
 807edcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807edce:	7bbb      	ldrb	r3, [r7, #14]
}
 807edd0:	4618      	mov	r0, r3
 807edd2:	3710      	adds	r7, #16
 807edd4:	46bd      	mov	sp, r7
 807edd6:	bd80      	pop	{r7, pc}

0807edd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807edd8:	b480      	push	{r7}
 807edda:	b085      	sub	sp, #20
 807eddc:	af00      	add	r7, sp, #0
 807edde:	6078      	str	r0, [r7, #4]
 807ede0:	460b      	mov	r3, r1
 807ede2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 807ede4:	687b      	ldr	r3, [r7, #4]
 807ede6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 807edea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 807edec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807edf0:	2b00      	cmp	r3, #0
 807edf2:	da0b      	bge.n	807ee0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 807edf4:	78fb      	ldrb	r3, [r7, #3]
 807edf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 807edfa:	68f9      	ldr	r1, [r7, #12]
 807edfc:	4613      	mov	r3, r2
 807edfe:	00db      	lsls	r3, r3, #3
 807ee00:	1a9b      	subs	r3, r3, r2
 807ee02:	009b      	lsls	r3, r3, #2
 807ee04:	440b      	add	r3, r1
 807ee06:	333e      	adds	r3, #62	@ 0x3e
 807ee08:	781b      	ldrb	r3, [r3, #0]
 807ee0a:	e00b      	b.n	807ee24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 807ee0c:	78fb      	ldrb	r3, [r7, #3]
 807ee0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 807ee12:	68f9      	ldr	r1, [r7, #12]
 807ee14:	4613      	mov	r3, r2
 807ee16:	00db      	lsls	r3, r3, #3
 807ee18:	1a9b      	subs	r3, r3, r2
 807ee1a:	009b      	lsls	r3, r3, #2
 807ee1c:	440b      	add	r3, r1
 807ee1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 807ee22:	781b      	ldrb	r3, [r3, #0]
  }
}
 807ee24:	4618      	mov	r0, r3
 807ee26:	3714      	adds	r7, #20
 807ee28:	46bd      	mov	sp, r7
 807ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ee2e:	4770      	bx	lr

0807ee30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 807ee30:	b580      	push	{r7, lr}
 807ee32:	b084      	sub	sp, #16
 807ee34:	af00      	add	r7, sp, #0
 807ee36:	6078      	str	r0, [r7, #4]
 807ee38:	460b      	mov	r3, r1
 807ee3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ee3c:	2300      	movs	r3, #0
 807ee3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ee40:	2300      	movs	r3, #0
 807ee42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 807ee44:	687b      	ldr	r3, [r7, #4]
 807ee46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 807ee4a:	78fa      	ldrb	r2, [r7, #3]
 807ee4c:	4611      	mov	r1, r2
 807ee4e:	4618      	mov	r0, r3
 807ee50:	f7fb f872 	bl	8079f38 <HAL_PCD_SetAddress>
 807ee54:	4603      	mov	r3, r0
 807ee56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ee58:	7bfb      	ldrb	r3, [r7, #15]
 807ee5a:	4618      	mov	r0, r3
 807ee5c:	f000 f862 	bl	807ef24 <USBD_Get_USB_Status>
 807ee60:	4603      	mov	r3, r0
 807ee62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ee64:	7bbb      	ldrb	r3, [r7, #14]
}
 807ee66:	4618      	mov	r0, r3
 807ee68:	3710      	adds	r7, #16
 807ee6a:	46bd      	mov	sp, r7
 807ee6c:	bd80      	pop	{r7, pc}

0807ee6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 807ee6e:	b580      	push	{r7, lr}
 807ee70:	b086      	sub	sp, #24
 807ee72:	af00      	add	r7, sp, #0
 807ee74:	60f8      	str	r0, [r7, #12]
 807ee76:	607a      	str	r2, [r7, #4]
 807ee78:	603b      	str	r3, [r7, #0]
 807ee7a:	460b      	mov	r3, r1
 807ee7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ee7e:	2300      	movs	r3, #0
 807ee80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ee82:	2300      	movs	r3, #0
 807ee84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 807ee86:	68fb      	ldr	r3, [r7, #12]
 807ee88:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 807ee8c:	7af9      	ldrb	r1, [r7, #11]
 807ee8e:	683b      	ldr	r3, [r7, #0]
 807ee90:	687a      	ldr	r2, [r7, #4]
 807ee92:	f7fb f929 	bl	807a0e8 <HAL_PCD_EP_Transmit>
 807ee96:	4603      	mov	r3, r0
 807ee98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ee9a:	7dfb      	ldrb	r3, [r7, #23]
 807ee9c:	4618      	mov	r0, r3
 807ee9e:	f000 f841 	bl	807ef24 <USBD_Get_USB_Status>
 807eea2:	4603      	mov	r3, r0
 807eea4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 807eea6:	7dbb      	ldrb	r3, [r7, #22]
}
 807eea8:	4618      	mov	r0, r3
 807eeaa:	3718      	adds	r7, #24
 807eeac:	46bd      	mov	sp, r7
 807eeae:	bd80      	pop	{r7, pc}

0807eeb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 807eeb0:	b580      	push	{r7, lr}
 807eeb2:	b086      	sub	sp, #24
 807eeb4:	af00      	add	r7, sp, #0
 807eeb6:	60f8      	str	r0, [r7, #12]
 807eeb8:	607a      	str	r2, [r7, #4]
 807eeba:	603b      	str	r3, [r7, #0]
 807eebc:	460b      	mov	r3, r1
 807eebe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807eec0:	2300      	movs	r3, #0
 807eec2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807eec4:	2300      	movs	r3, #0
 807eec6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 807eec8:	68fb      	ldr	r3, [r7, #12]
 807eeca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 807eece:	7af9      	ldrb	r1, [r7, #11]
 807eed0:	683b      	ldr	r3, [r7, #0]
 807eed2:	687a      	ldr	r2, [r7, #4]
 807eed4:	f7fb f8bd 	bl	807a052 <HAL_PCD_EP_Receive>
 807eed8:	4603      	mov	r3, r0
 807eeda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807eedc:	7dfb      	ldrb	r3, [r7, #23]
 807eede:	4618      	mov	r0, r3
 807eee0:	f000 f820 	bl	807ef24 <USBD_Get_USB_Status>
 807eee4:	4603      	mov	r3, r0
 807eee6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 807eee8:	7dbb      	ldrb	r3, [r7, #22]
}
 807eeea:	4618      	mov	r0, r3
 807eeec:	3718      	adds	r7, #24
 807eeee:	46bd      	mov	sp, r7
 807eef0:	bd80      	pop	{r7, pc}
	...

0807eef4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 807eef4:	b480      	push	{r7}
 807eef6:	b083      	sub	sp, #12
 807eef8:	af00      	add	r7, sp, #0
 807eefa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 807eefc:	4b03      	ldr	r3, [pc, #12]	@ (807ef0c <USBD_static_malloc+0x18>)
}
 807eefe:	4618      	mov	r0, r3
 807ef00:	370c      	adds	r7, #12
 807ef02:	46bd      	mov	sp, r7
 807ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ef08:	4770      	bx	lr
 807ef0a:	bf00      	nop
 807ef0c:	20000af4 	.word	0x20000af4

0807ef10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 807ef10:	b480      	push	{r7}
 807ef12:	b083      	sub	sp, #12
 807ef14:	af00      	add	r7, sp, #0
 807ef16:	6078      	str	r0, [r7, #4]

}
 807ef18:	bf00      	nop
 807ef1a:	370c      	adds	r7, #12
 807ef1c:	46bd      	mov	sp, r7
 807ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ef22:	4770      	bx	lr

0807ef24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 807ef24:	b480      	push	{r7}
 807ef26:	b085      	sub	sp, #20
 807ef28:	af00      	add	r7, sp, #0
 807ef2a:	4603      	mov	r3, r0
 807ef2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ef2e:	2300      	movs	r3, #0
 807ef30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 807ef32:	79fb      	ldrb	r3, [r7, #7]
 807ef34:	2b03      	cmp	r3, #3
 807ef36:	d817      	bhi.n	807ef68 <USBD_Get_USB_Status+0x44>
 807ef38:	a201      	add	r2, pc, #4	@ (adr r2, 807ef40 <USBD_Get_USB_Status+0x1c>)
 807ef3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807ef3e:	bf00      	nop
 807ef40:	0807ef51 	.word	0x0807ef51
 807ef44:	0807ef57 	.word	0x0807ef57
 807ef48:	0807ef5d 	.word	0x0807ef5d
 807ef4c:	0807ef63 	.word	0x0807ef63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 807ef50:	2300      	movs	r3, #0
 807ef52:	73fb      	strb	r3, [r7, #15]
    break;
 807ef54:	e00b      	b.n	807ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 807ef56:	2303      	movs	r3, #3
 807ef58:	73fb      	strb	r3, [r7, #15]
    break;
 807ef5a:	e008      	b.n	807ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 807ef5c:	2301      	movs	r3, #1
 807ef5e:	73fb      	strb	r3, [r7, #15]
    break;
 807ef60:	e005      	b.n	807ef6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 807ef62:	2303      	movs	r3, #3
 807ef64:	73fb      	strb	r3, [r7, #15]
    break;
 807ef66:	e002      	b.n	807ef6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 807ef68:	2303      	movs	r3, #3
 807ef6a:	73fb      	strb	r3, [r7, #15]
    break;
 807ef6c:	bf00      	nop
  }
  return usb_status;
 807ef6e:	7bfb      	ldrb	r3, [r7, #15]
}
 807ef70:	4618      	mov	r0, r3
 807ef72:	3714      	adds	r7, #20
 807ef74:	46bd      	mov	sp, r7
 807ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ef7a:	4770      	bx	lr

0807ef7c <memset>:
 807ef7c:	4402      	add	r2, r0
 807ef7e:	4603      	mov	r3, r0
 807ef80:	4293      	cmp	r3, r2
 807ef82:	d100      	bne.n	807ef86 <memset+0xa>
 807ef84:	4770      	bx	lr
 807ef86:	f803 1b01 	strb.w	r1, [r3], #1
 807ef8a:	e7f9      	b.n	807ef80 <memset+0x4>

0807ef8c <__libc_init_array>:
 807ef8c:	b570      	push	{r4, r5, r6, lr}
 807ef8e:	4d0d      	ldr	r5, [pc, #52]	@ (807efc4 <__libc_init_array+0x38>)
 807ef90:	4c0d      	ldr	r4, [pc, #52]	@ (807efc8 <__libc_init_array+0x3c>)
 807ef92:	1b64      	subs	r4, r4, r5
 807ef94:	10a4      	asrs	r4, r4, #2
 807ef96:	2600      	movs	r6, #0
 807ef98:	42a6      	cmp	r6, r4
 807ef9a:	d109      	bne.n	807efb0 <__libc_init_array+0x24>
 807ef9c:	4d0b      	ldr	r5, [pc, #44]	@ (807efcc <__libc_init_array+0x40>)
 807ef9e:	4c0c      	ldr	r4, [pc, #48]	@ (807efd0 <__libc_init_array+0x44>)
 807efa0:	f000 f818 	bl	807efd4 <_init>
 807efa4:	1b64      	subs	r4, r4, r5
 807efa6:	10a4      	asrs	r4, r4, #2
 807efa8:	2600      	movs	r6, #0
 807efaa:	42a6      	cmp	r6, r4
 807efac:	d105      	bne.n	807efba <__libc_init_array+0x2e>
 807efae:	bd70      	pop	{r4, r5, r6, pc}
 807efb0:	f855 3b04 	ldr.w	r3, [r5], #4
 807efb4:	4798      	blx	r3
 807efb6:	3601      	adds	r6, #1
 807efb8:	e7ee      	b.n	807ef98 <__libc_init_array+0xc>
 807efba:	f855 3b04 	ldr.w	r3, [r5], #4
 807efbe:	4798      	blx	r3
 807efc0:	3601      	adds	r6, #1
 807efc2:	e7f2      	b.n	807efaa <__libc_init_array+0x1e>
 807efc4:	0807f098 	.word	0x0807f098
 807efc8:	0807f098 	.word	0x0807f098
 807efcc:	0807f098 	.word	0x0807f098
 807efd0:	0807f09c 	.word	0x0807f09c

0807efd4 <_init>:
 807efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807efd6:	bf00      	nop
 807efd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807efda:	bc08      	pop	{r3}
 807efdc:	469e      	mov	lr, r3
 807efde:	4770      	bx	lr

0807efe0 <_fini>:
 807efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807efe2:	bf00      	nop
 807efe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807efe6:	bc08      	pop	{r3}
 807efe8:	469e      	mov	lr, r3
 807efea:	4770      	bx	lr
