
dfu2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08078000  08078000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e1c  08078198  08078198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0807efb4  0807efb4  0000efb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807f058  0807f058  000100dc  2**0
                  CONTENTS
  4 .ARM          00000008  0807f058  0807f058  0000f058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807f060  0807f060  000100dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807f060  0807f060  0000f060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807f064  0807f064  0000f064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0807f068  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  200000dc  0807f144  000100dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0807f144  00010f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de4f  00000000  00000000  0001010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d98  00000000  00000000  0001df5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00020cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00021998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ef  00000000  00000000  000224e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe3e  00000000  00000000  0003aacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872bf  00000000  00000000  0004a90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  000d1c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08078198 <__do_global_dtors_aux>:
 8078198:	b510      	push	{r4, lr}
 807819a:	4c05      	ldr	r4, [pc, #20]	; (80781b0 <__do_global_dtors_aux+0x18>)
 807819c:	7823      	ldrb	r3, [r4, #0]
 807819e:	b933      	cbnz	r3, 80781ae <__do_global_dtors_aux+0x16>
 80781a0:	4b04      	ldr	r3, [pc, #16]	; (80781b4 <__do_global_dtors_aux+0x1c>)
 80781a2:	b113      	cbz	r3, 80781aa <__do_global_dtors_aux+0x12>
 80781a4:	4804      	ldr	r0, [pc, #16]	; (80781b8 <__do_global_dtors_aux+0x20>)
 80781a6:	f3af 8000 	nop.w
 80781aa:	2301      	movs	r3, #1
 80781ac:	7023      	strb	r3, [r4, #0]
 80781ae:	bd10      	pop	{r4, pc}
 80781b0:	200000dc 	.word	0x200000dc
 80781b4:	00000000 	.word	0x00000000
 80781b8:	0807ef9c 	.word	0x0807ef9c

080781bc <frame_dummy>:
 80781bc:	b508      	push	{r3, lr}
 80781be:	4b03      	ldr	r3, [pc, #12]	; (80781cc <frame_dummy+0x10>)
 80781c0:	b11b      	cbz	r3, 80781ca <frame_dummy+0xe>
 80781c2:	4903      	ldr	r1, [pc, #12]	; (80781d0 <frame_dummy+0x14>)
 80781c4:	4803      	ldr	r0, [pc, #12]	; (80781d4 <frame_dummy+0x18>)
 80781c6:	f3af 8000 	nop.w
 80781ca:	bd08      	pop	{r3, pc}
 80781cc:	00000000 	.word	0x00000000
 80781d0:	200000e0 	.word	0x200000e0
 80781d4:	0807ef9c 	.word	0x0807ef9c

080781d8 <__aeabi_uldivmod>:
 80781d8:	b953      	cbnz	r3, 80781f0 <__aeabi_uldivmod+0x18>
 80781da:	b94a      	cbnz	r2, 80781f0 <__aeabi_uldivmod+0x18>
 80781dc:	2900      	cmp	r1, #0
 80781de:	bf08      	it	eq
 80781e0:	2800      	cmpeq	r0, #0
 80781e2:	bf1c      	itt	ne
 80781e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80781e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80781ec:	f000 b974 	b.w	80784d8 <__aeabi_idiv0>
 80781f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80781f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80781f8:	f000 f806 	bl	8078208 <__udivmoddi4>
 80781fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8078200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8078204:	b004      	add	sp, #16
 8078206:	4770      	bx	lr

08078208 <__udivmoddi4>:
 8078208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 807820c:	9d08      	ldr	r5, [sp, #32]
 807820e:	4604      	mov	r4, r0
 8078210:	468e      	mov	lr, r1
 8078212:	2b00      	cmp	r3, #0
 8078214:	d14d      	bne.n	80782b2 <__udivmoddi4+0xaa>
 8078216:	428a      	cmp	r2, r1
 8078218:	4694      	mov	ip, r2
 807821a:	d969      	bls.n	80782f0 <__udivmoddi4+0xe8>
 807821c:	fab2 f282 	clz	r2, r2
 8078220:	b152      	cbz	r2, 8078238 <__udivmoddi4+0x30>
 8078222:	fa01 f302 	lsl.w	r3, r1, r2
 8078226:	f1c2 0120 	rsb	r1, r2, #32
 807822a:	fa20 f101 	lsr.w	r1, r0, r1
 807822e:	fa0c fc02 	lsl.w	ip, ip, r2
 8078232:	ea41 0e03 	orr.w	lr, r1, r3
 8078236:	4094      	lsls	r4, r2
 8078238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 807823c:	0c21      	lsrs	r1, r4, #16
 807823e:	fbbe f6f8 	udiv	r6, lr, r8
 8078242:	fa1f f78c 	uxth.w	r7, ip
 8078246:	fb08 e316 	mls	r3, r8, r6, lr
 807824a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 807824e:	fb06 f107 	mul.w	r1, r6, r7
 8078252:	4299      	cmp	r1, r3
 8078254:	d90a      	bls.n	807826c <__udivmoddi4+0x64>
 8078256:	eb1c 0303 	adds.w	r3, ip, r3
 807825a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 807825e:	f080 811f 	bcs.w	80784a0 <__udivmoddi4+0x298>
 8078262:	4299      	cmp	r1, r3
 8078264:	f240 811c 	bls.w	80784a0 <__udivmoddi4+0x298>
 8078268:	3e02      	subs	r6, #2
 807826a:	4463      	add	r3, ip
 807826c:	1a5b      	subs	r3, r3, r1
 807826e:	b2a4      	uxth	r4, r4
 8078270:	fbb3 f0f8 	udiv	r0, r3, r8
 8078274:	fb08 3310 	mls	r3, r8, r0, r3
 8078278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 807827c:	fb00 f707 	mul.w	r7, r0, r7
 8078280:	42a7      	cmp	r7, r4
 8078282:	d90a      	bls.n	807829a <__udivmoddi4+0x92>
 8078284:	eb1c 0404 	adds.w	r4, ip, r4
 8078288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 807828c:	f080 810a 	bcs.w	80784a4 <__udivmoddi4+0x29c>
 8078290:	42a7      	cmp	r7, r4
 8078292:	f240 8107 	bls.w	80784a4 <__udivmoddi4+0x29c>
 8078296:	4464      	add	r4, ip
 8078298:	3802      	subs	r0, #2
 807829a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 807829e:	1be4      	subs	r4, r4, r7
 80782a0:	2600      	movs	r6, #0
 80782a2:	b11d      	cbz	r5, 80782ac <__udivmoddi4+0xa4>
 80782a4:	40d4      	lsrs	r4, r2
 80782a6:	2300      	movs	r3, #0
 80782a8:	e9c5 4300 	strd	r4, r3, [r5]
 80782ac:	4631      	mov	r1, r6
 80782ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80782b2:	428b      	cmp	r3, r1
 80782b4:	d909      	bls.n	80782ca <__udivmoddi4+0xc2>
 80782b6:	2d00      	cmp	r5, #0
 80782b8:	f000 80ef 	beq.w	807849a <__udivmoddi4+0x292>
 80782bc:	2600      	movs	r6, #0
 80782be:	e9c5 0100 	strd	r0, r1, [r5]
 80782c2:	4630      	mov	r0, r6
 80782c4:	4631      	mov	r1, r6
 80782c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80782ca:	fab3 f683 	clz	r6, r3
 80782ce:	2e00      	cmp	r6, #0
 80782d0:	d14a      	bne.n	8078368 <__udivmoddi4+0x160>
 80782d2:	428b      	cmp	r3, r1
 80782d4:	d302      	bcc.n	80782dc <__udivmoddi4+0xd4>
 80782d6:	4282      	cmp	r2, r0
 80782d8:	f200 80f9 	bhi.w	80784ce <__udivmoddi4+0x2c6>
 80782dc:	1a84      	subs	r4, r0, r2
 80782de:	eb61 0303 	sbc.w	r3, r1, r3
 80782e2:	2001      	movs	r0, #1
 80782e4:	469e      	mov	lr, r3
 80782e6:	2d00      	cmp	r5, #0
 80782e8:	d0e0      	beq.n	80782ac <__udivmoddi4+0xa4>
 80782ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80782ee:	e7dd      	b.n	80782ac <__udivmoddi4+0xa4>
 80782f0:	b902      	cbnz	r2, 80782f4 <__udivmoddi4+0xec>
 80782f2:	deff      	udf	#255	; 0xff
 80782f4:	fab2 f282 	clz	r2, r2
 80782f8:	2a00      	cmp	r2, #0
 80782fa:	f040 8092 	bne.w	8078422 <__udivmoddi4+0x21a>
 80782fe:	eba1 010c 	sub.w	r1, r1, ip
 8078302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8078306:	fa1f fe8c 	uxth.w	lr, ip
 807830a:	2601      	movs	r6, #1
 807830c:	0c20      	lsrs	r0, r4, #16
 807830e:	fbb1 f3f7 	udiv	r3, r1, r7
 8078312:	fb07 1113 	mls	r1, r7, r3, r1
 8078316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 807831a:	fb0e f003 	mul.w	r0, lr, r3
 807831e:	4288      	cmp	r0, r1
 8078320:	d908      	bls.n	8078334 <__udivmoddi4+0x12c>
 8078322:	eb1c 0101 	adds.w	r1, ip, r1
 8078326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 807832a:	d202      	bcs.n	8078332 <__udivmoddi4+0x12a>
 807832c:	4288      	cmp	r0, r1
 807832e:	f200 80cb 	bhi.w	80784c8 <__udivmoddi4+0x2c0>
 8078332:	4643      	mov	r3, r8
 8078334:	1a09      	subs	r1, r1, r0
 8078336:	b2a4      	uxth	r4, r4
 8078338:	fbb1 f0f7 	udiv	r0, r1, r7
 807833c:	fb07 1110 	mls	r1, r7, r0, r1
 8078340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8078344:	fb0e fe00 	mul.w	lr, lr, r0
 8078348:	45a6      	cmp	lr, r4
 807834a:	d908      	bls.n	807835e <__udivmoddi4+0x156>
 807834c:	eb1c 0404 	adds.w	r4, ip, r4
 8078350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8078354:	d202      	bcs.n	807835c <__udivmoddi4+0x154>
 8078356:	45a6      	cmp	lr, r4
 8078358:	f200 80bb 	bhi.w	80784d2 <__udivmoddi4+0x2ca>
 807835c:	4608      	mov	r0, r1
 807835e:	eba4 040e 	sub.w	r4, r4, lr
 8078362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8078366:	e79c      	b.n	80782a2 <__udivmoddi4+0x9a>
 8078368:	f1c6 0720 	rsb	r7, r6, #32
 807836c:	40b3      	lsls	r3, r6
 807836e:	fa22 fc07 	lsr.w	ip, r2, r7
 8078372:	ea4c 0c03 	orr.w	ip, ip, r3
 8078376:	fa20 f407 	lsr.w	r4, r0, r7
 807837a:	fa01 f306 	lsl.w	r3, r1, r6
 807837e:	431c      	orrs	r4, r3
 8078380:	40f9      	lsrs	r1, r7
 8078382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8078386:	fa00 f306 	lsl.w	r3, r0, r6
 807838a:	fbb1 f8f9 	udiv	r8, r1, r9
 807838e:	0c20      	lsrs	r0, r4, #16
 8078390:	fa1f fe8c 	uxth.w	lr, ip
 8078394:	fb09 1118 	mls	r1, r9, r8, r1
 8078398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 807839c:	fb08 f00e 	mul.w	r0, r8, lr
 80783a0:	4288      	cmp	r0, r1
 80783a2:	fa02 f206 	lsl.w	r2, r2, r6
 80783a6:	d90b      	bls.n	80783c0 <__udivmoddi4+0x1b8>
 80783a8:	eb1c 0101 	adds.w	r1, ip, r1
 80783ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80783b0:	f080 8088 	bcs.w	80784c4 <__udivmoddi4+0x2bc>
 80783b4:	4288      	cmp	r0, r1
 80783b6:	f240 8085 	bls.w	80784c4 <__udivmoddi4+0x2bc>
 80783ba:	f1a8 0802 	sub.w	r8, r8, #2
 80783be:	4461      	add	r1, ip
 80783c0:	1a09      	subs	r1, r1, r0
 80783c2:	b2a4      	uxth	r4, r4
 80783c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80783c8:	fb09 1110 	mls	r1, r9, r0, r1
 80783cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80783d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80783d4:	458e      	cmp	lr, r1
 80783d6:	d908      	bls.n	80783ea <__udivmoddi4+0x1e2>
 80783d8:	eb1c 0101 	adds.w	r1, ip, r1
 80783dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80783e0:	d26c      	bcs.n	80784bc <__udivmoddi4+0x2b4>
 80783e2:	458e      	cmp	lr, r1
 80783e4:	d96a      	bls.n	80784bc <__udivmoddi4+0x2b4>
 80783e6:	3802      	subs	r0, #2
 80783e8:	4461      	add	r1, ip
 80783ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80783ee:	fba0 9402 	umull	r9, r4, r0, r2
 80783f2:	eba1 010e 	sub.w	r1, r1, lr
 80783f6:	42a1      	cmp	r1, r4
 80783f8:	46c8      	mov	r8, r9
 80783fa:	46a6      	mov	lr, r4
 80783fc:	d356      	bcc.n	80784ac <__udivmoddi4+0x2a4>
 80783fe:	d053      	beq.n	80784a8 <__udivmoddi4+0x2a0>
 8078400:	b15d      	cbz	r5, 807841a <__udivmoddi4+0x212>
 8078402:	ebb3 0208 	subs.w	r2, r3, r8
 8078406:	eb61 010e 	sbc.w	r1, r1, lr
 807840a:	fa01 f707 	lsl.w	r7, r1, r7
 807840e:	fa22 f306 	lsr.w	r3, r2, r6
 8078412:	40f1      	lsrs	r1, r6
 8078414:	431f      	orrs	r7, r3
 8078416:	e9c5 7100 	strd	r7, r1, [r5]
 807841a:	2600      	movs	r6, #0
 807841c:	4631      	mov	r1, r6
 807841e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8078422:	f1c2 0320 	rsb	r3, r2, #32
 8078426:	40d8      	lsrs	r0, r3
 8078428:	fa0c fc02 	lsl.w	ip, ip, r2
 807842c:	fa21 f303 	lsr.w	r3, r1, r3
 8078430:	4091      	lsls	r1, r2
 8078432:	4301      	orrs	r1, r0
 8078434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8078438:	fa1f fe8c 	uxth.w	lr, ip
 807843c:	fbb3 f0f7 	udiv	r0, r3, r7
 8078440:	fb07 3610 	mls	r6, r7, r0, r3
 8078444:	0c0b      	lsrs	r3, r1, #16
 8078446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 807844a:	fb00 f60e 	mul.w	r6, r0, lr
 807844e:	429e      	cmp	r6, r3
 8078450:	fa04 f402 	lsl.w	r4, r4, r2
 8078454:	d908      	bls.n	8078468 <__udivmoddi4+0x260>
 8078456:	eb1c 0303 	adds.w	r3, ip, r3
 807845a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 807845e:	d22f      	bcs.n	80784c0 <__udivmoddi4+0x2b8>
 8078460:	429e      	cmp	r6, r3
 8078462:	d92d      	bls.n	80784c0 <__udivmoddi4+0x2b8>
 8078464:	3802      	subs	r0, #2
 8078466:	4463      	add	r3, ip
 8078468:	1b9b      	subs	r3, r3, r6
 807846a:	b289      	uxth	r1, r1
 807846c:	fbb3 f6f7 	udiv	r6, r3, r7
 8078470:	fb07 3316 	mls	r3, r7, r6, r3
 8078474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8078478:	fb06 f30e 	mul.w	r3, r6, lr
 807847c:	428b      	cmp	r3, r1
 807847e:	d908      	bls.n	8078492 <__udivmoddi4+0x28a>
 8078480:	eb1c 0101 	adds.w	r1, ip, r1
 8078484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8078488:	d216      	bcs.n	80784b8 <__udivmoddi4+0x2b0>
 807848a:	428b      	cmp	r3, r1
 807848c:	d914      	bls.n	80784b8 <__udivmoddi4+0x2b0>
 807848e:	3e02      	subs	r6, #2
 8078490:	4461      	add	r1, ip
 8078492:	1ac9      	subs	r1, r1, r3
 8078494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8078498:	e738      	b.n	807830c <__udivmoddi4+0x104>
 807849a:	462e      	mov	r6, r5
 807849c:	4628      	mov	r0, r5
 807849e:	e705      	b.n	80782ac <__udivmoddi4+0xa4>
 80784a0:	4606      	mov	r6, r0
 80784a2:	e6e3      	b.n	807826c <__udivmoddi4+0x64>
 80784a4:	4618      	mov	r0, r3
 80784a6:	e6f8      	b.n	807829a <__udivmoddi4+0x92>
 80784a8:	454b      	cmp	r3, r9
 80784aa:	d2a9      	bcs.n	8078400 <__udivmoddi4+0x1f8>
 80784ac:	ebb9 0802 	subs.w	r8, r9, r2
 80784b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80784b4:	3801      	subs	r0, #1
 80784b6:	e7a3      	b.n	8078400 <__udivmoddi4+0x1f8>
 80784b8:	4646      	mov	r6, r8
 80784ba:	e7ea      	b.n	8078492 <__udivmoddi4+0x28a>
 80784bc:	4620      	mov	r0, r4
 80784be:	e794      	b.n	80783ea <__udivmoddi4+0x1e2>
 80784c0:	4640      	mov	r0, r8
 80784c2:	e7d1      	b.n	8078468 <__udivmoddi4+0x260>
 80784c4:	46d0      	mov	r8, sl
 80784c6:	e77b      	b.n	80783c0 <__udivmoddi4+0x1b8>
 80784c8:	3b02      	subs	r3, #2
 80784ca:	4461      	add	r1, ip
 80784cc:	e732      	b.n	8078334 <__udivmoddi4+0x12c>
 80784ce:	4630      	mov	r0, r6
 80784d0:	e709      	b.n	80782e6 <__udivmoddi4+0xde>
 80784d2:	4464      	add	r4, ip
 80784d4:	3802      	subs	r0, #2
 80784d6:	e742      	b.n	807835e <__udivmoddi4+0x156>

080784d8 <__aeabi_idiv0>:
 80784d8:	4770      	bx	lr
 80784da:	bf00      	nop

080784dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80784dc:	b580      	push	{r7, lr}
 80784de:	b082      	sub	sp, #8
 80784e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80784e2:	f000 f98d 	bl	8078800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80784e6:	f000 f82b 	bl	8078540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80784ea:	f000 f893 	bl	8078614 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80784ee:	f005 ffb9 	bl	807e464 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MX_USB_DEVICE_Init();
 80784f2:	f005 ffb7 	bl	807e464 <MX_USB_DEVICE_Init>

  dfu_test();
 80784f6:	f005 ffae 	bl	807e456 <dfu_test>

  uint32_t now = 0, then = 0;
 80784fa:	2300      	movs	r3, #0
 80784fc:	603b      	str	r3, [r7, #0]
 80784fe:	2300      	movs	r3, #0
 8078500:	607b      	str	r3, [r7, #4]

  while (1)
  {

	now = HAL_GetTick();
 8078502:	f000 f9e3 	bl	80788cc <HAL_GetTick>
 8078506:	6038      	str	r0, [r7, #0]
	if (now % 50 == 0 && now != then)
 8078508:	683a      	ldr	r2, [r7, #0]
 807850a:	4b0b      	ldr	r3, [pc, #44]	; (8078538 <main+0x5c>)
 807850c:	fba3 1302 	umull	r1, r3, r3, r2
 8078510:	091b      	lsrs	r3, r3, #4
 8078512:	2132      	movs	r1, #50	; 0x32
 8078514:	fb01 f303 	mul.w	r3, r1, r3
 8078518:	1ad3      	subs	r3, r2, r3
 807851a:	2b00      	cmp	r3, #0
 807851c:	d1f1      	bne.n	8078502 <main+0x26>
 807851e:	683a      	ldr	r2, [r7, #0]
 8078520:	687b      	ldr	r3, [r7, #4]
 8078522:	429a      	cmp	r2, r3
 8078524:	d0ed      	beq.n	8078502 <main+0x26>
	{

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8078526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 807852a:	4804      	ldr	r0, [pc, #16]	; (807853c <main+0x60>)
 807852c:	f000 ff95 	bl	807945a <HAL_GPIO_TogglePin>

		then = now;
 8078530:	683b      	ldr	r3, [r7, #0]
 8078532:	607b      	str	r3, [r7, #4]
	now = HAL_GetTick();
 8078534:	e7e5      	b.n	8078502 <main+0x26>
 8078536:	bf00      	nop
 8078538:	51eb851f 	.word	0x51eb851f
 807853c:	40020800 	.word	0x40020800

08078540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8078540:	b580      	push	{r7, lr}
 8078542:	b094      	sub	sp, #80	; 0x50
 8078544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8078546:	f107 0320 	add.w	r3, r7, #32
 807854a:	2230      	movs	r2, #48	; 0x30
 807854c:	2100      	movs	r1, #0
 807854e:	4618      	mov	r0, r3
 8078550:	f006 fd1c 	bl	807ef8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8078554:	f107 030c 	add.w	r3, r7, #12
 8078558:	2200      	movs	r2, #0
 807855a:	601a      	str	r2, [r3, #0]
 807855c:	605a      	str	r2, [r3, #4]
 807855e:	609a      	str	r2, [r3, #8]
 8078560:	60da      	str	r2, [r3, #12]
 8078562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8078564:	2300      	movs	r3, #0
 8078566:	60bb      	str	r3, [r7, #8]
 8078568:	4b28      	ldr	r3, [pc, #160]	; (807860c <SystemClock_Config+0xcc>)
 807856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807856c:	4a27      	ldr	r2, [pc, #156]	; (807860c <SystemClock_Config+0xcc>)
 807856e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8078572:	6413      	str	r3, [r2, #64]	; 0x40
 8078574:	4b25      	ldr	r3, [pc, #148]	; (807860c <SystemClock_Config+0xcc>)
 8078576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8078578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 807857c:	60bb      	str	r3, [r7, #8]
 807857e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8078580:	2300      	movs	r3, #0
 8078582:	607b      	str	r3, [r7, #4]
 8078584:	4b22      	ldr	r3, [pc, #136]	; (8078610 <SystemClock_Config+0xd0>)
 8078586:	681b      	ldr	r3, [r3, #0]
 8078588:	4a21      	ldr	r2, [pc, #132]	; (8078610 <SystemClock_Config+0xd0>)
 807858a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 807858e:	6013      	str	r3, [r2, #0]
 8078590:	4b1f      	ldr	r3, [pc, #124]	; (8078610 <SystemClock_Config+0xd0>)
 8078592:	681b      	ldr	r3, [r3, #0]
 8078594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8078598:	607b      	str	r3, [r7, #4]
 807859a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 807859c:	2301      	movs	r3, #1
 807859e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80785a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80785a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80785a6:	2302      	movs	r3, #2
 80785a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80785aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80785ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80785b0:	2319      	movs	r3, #25
 80785b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80785b4:	23c0      	movs	r3, #192	; 0xc0
 80785b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80785b8:	2302      	movs	r3, #2
 80785ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80785bc:	2304      	movs	r3, #4
 80785be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80785c0:	f107 0320 	add.w	r3, r7, #32
 80785c4:	4618      	mov	r0, r3
 80785c6:	f002 f8bd 	bl	807a744 <HAL_RCC_OscConfig>
 80785ca:	4603      	mov	r3, r0
 80785cc:	2b00      	cmp	r3, #0
 80785ce:	d001      	beq.n	80785d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80785d0:	f000 f872 	bl	80786b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80785d4:	230f      	movs	r3, #15
 80785d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80785d8:	2302      	movs	r3, #2
 80785da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80785dc:	2300      	movs	r3, #0
 80785de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80785e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80785e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80785e6:	2300      	movs	r3, #0
 80785e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80785ea:	f107 030c 	add.w	r3, r7, #12
 80785ee:	2103      	movs	r1, #3
 80785f0:	4618      	mov	r0, r3
 80785f2:	f002 fb1f 	bl	807ac34 <HAL_RCC_ClockConfig>
 80785f6:	4603      	mov	r3, r0
 80785f8:	2b00      	cmp	r3, #0
 80785fa:	d001      	beq.n	8078600 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80785fc:	f000 f85c 	bl	80786b8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8078600:	f002 fbfe 	bl	807ae00 <HAL_RCC_EnableCSS>
}
 8078604:	bf00      	nop
 8078606:	3750      	adds	r7, #80	; 0x50
 8078608:	46bd      	mov	sp, r7
 807860a:	bd80      	pop	{r7, pc}
 807860c:	40023800 	.word	0x40023800
 8078610:	40007000 	.word	0x40007000

08078614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8078614:	b580      	push	{r7, lr}
 8078616:	b088      	sub	sp, #32
 8078618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 807861a:	f107 030c 	add.w	r3, r7, #12
 807861e:	2200      	movs	r2, #0
 8078620:	601a      	str	r2, [r3, #0]
 8078622:	605a      	str	r2, [r3, #4]
 8078624:	609a      	str	r2, [r3, #8]
 8078626:	60da      	str	r2, [r3, #12]
 8078628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 807862a:	2300      	movs	r3, #0
 807862c:	60bb      	str	r3, [r7, #8]
 807862e:	4b20      	ldr	r3, [pc, #128]	; (80786b0 <MX_GPIO_Init+0x9c>)
 8078630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8078632:	4a1f      	ldr	r2, [pc, #124]	; (80786b0 <MX_GPIO_Init+0x9c>)
 8078634:	f043 0304 	orr.w	r3, r3, #4
 8078638:	6313      	str	r3, [r2, #48]	; 0x30
 807863a:	4b1d      	ldr	r3, [pc, #116]	; (80786b0 <MX_GPIO_Init+0x9c>)
 807863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807863e:	f003 0304 	and.w	r3, r3, #4
 8078642:	60bb      	str	r3, [r7, #8]
 8078644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8078646:	2300      	movs	r3, #0
 8078648:	607b      	str	r3, [r7, #4]
 807864a:	4b19      	ldr	r3, [pc, #100]	; (80786b0 <MX_GPIO_Init+0x9c>)
 807864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807864e:	4a18      	ldr	r2, [pc, #96]	; (80786b0 <MX_GPIO_Init+0x9c>)
 8078650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8078654:	6313      	str	r3, [r2, #48]	; 0x30
 8078656:	4b16      	ldr	r3, [pc, #88]	; (80786b0 <MX_GPIO_Init+0x9c>)
 8078658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807865a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 807865e:	607b      	str	r3, [r7, #4]
 8078660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8078662:	2300      	movs	r3, #0
 8078664:	603b      	str	r3, [r7, #0]
 8078666:	4b12      	ldr	r3, [pc, #72]	; (80786b0 <MX_GPIO_Init+0x9c>)
 8078668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807866a:	4a11      	ldr	r2, [pc, #68]	; (80786b0 <MX_GPIO_Init+0x9c>)
 807866c:	f043 0301 	orr.w	r3, r3, #1
 8078670:	6313      	str	r3, [r2, #48]	; 0x30
 8078672:	4b0f      	ldr	r3, [pc, #60]	; (80786b0 <MX_GPIO_Init+0x9c>)
 8078674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8078676:	f003 0301 	and.w	r3, r3, #1
 807867a:	603b      	str	r3, [r7, #0]
 807867c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 807867e:	2201      	movs	r2, #1
 8078680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8078684:	480b      	ldr	r0, [pc, #44]	; (80786b4 <MX_GPIO_Init+0xa0>)
 8078686:	f000 fecf 	bl	8079428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 807868a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 807868e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8078690:	2311      	movs	r3, #17
 8078692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8078694:	2300      	movs	r3, #0
 8078696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8078698:	2300      	movs	r3, #0
 807869a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 807869c:	f107 030c 	add.w	r3, r7, #12
 80786a0:	4619      	mov	r1, r3
 80786a2:	4804      	ldr	r0, [pc, #16]	; (80786b4 <MX_GPIO_Init+0xa0>)
 80786a4:	f000 fd3c 	bl	8079120 <HAL_GPIO_Init>

}
 80786a8:	bf00      	nop
 80786aa:	3720      	adds	r7, #32
 80786ac:	46bd      	mov	sp, r7
 80786ae:	bd80      	pop	{r7, pc}
 80786b0:	40023800 	.word	0x40023800
 80786b4:	40020800 	.word	0x40020800

080786b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80786b8:	b480      	push	{r7}
 80786ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80786bc:	b672      	cpsid	i
}
 80786be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80786c0:	e7fe      	b.n	80786c0 <Error_Handler+0x8>
	...

080786c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80786c4:	b480      	push	{r7}
 80786c6:	b083      	sub	sp, #12
 80786c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80786ca:	2300      	movs	r3, #0
 80786cc:	607b      	str	r3, [r7, #4]
 80786ce:	4b10      	ldr	r3, [pc, #64]	; (8078710 <HAL_MspInit+0x4c>)
 80786d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80786d2:	4a0f      	ldr	r2, [pc, #60]	; (8078710 <HAL_MspInit+0x4c>)
 80786d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80786d8:	6453      	str	r3, [r2, #68]	; 0x44
 80786da:	4b0d      	ldr	r3, [pc, #52]	; (8078710 <HAL_MspInit+0x4c>)
 80786dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80786de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80786e2:	607b      	str	r3, [r7, #4]
 80786e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80786e6:	2300      	movs	r3, #0
 80786e8:	603b      	str	r3, [r7, #0]
 80786ea:	4b09      	ldr	r3, [pc, #36]	; (8078710 <HAL_MspInit+0x4c>)
 80786ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80786ee:	4a08      	ldr	r2, [pc, #32]	; (8078710 <HAL_MspInit+0x4c>)
 80786f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80786f4:	6413      	str	r3, [r2, #64]	; 0x40
 80786f6:	4b06      	ldr	r3, [pc, #24]	; (8078710 <HAL_MspInit+0x4c>)
 80786f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80786fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80786fe:	603b      	str	r3, [r7, #0]
 8078700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8078702:	bf00      	nop
 8078704:	370c      	adds	r7, #12
 8078706:	46bd      	mov	sp, r7
 8078708:	f85d 7b04 	ldr.w	r7, [sp], #4
 807870c:	4770      	bx	lr
 807870e:	bf00      	nop
 8078710:	40023800 	.word	0x40023800

08078714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8078714:	b580      	push	{r7, lr}
 8078716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8078718:	f002 fc50 	bl	807afbc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 807871c:	e7fe      	b.n	807871c <NMI_Handler+0x8>

0807871e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 807871e:	b480      	push	{r7}
 8078720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8078722:	e7fe      	b.n	8078722 <HardFault_Handler+0x4>

08078724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8078724:	b480      	push	{r7}
 8078726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8078728:	e7fe      	b.n	8078728 <MemManage_Handler+0x4>

0807872a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 807872a:	b480      	push	{r7}
 807872c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 807872e:	e7fe      	b.n	807872e <BusFault_Handler+0x4>

08078730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8078730:	b480      	push	{r7}
 8078732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8078734:	e7fe      	b.n	8078734 <UsageFault_Handler+0x4>

08078736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8078736:	b480      	push	{r7}
 8078738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 807873a:	bf00      	nop
 807873c:	46bd      	mov	sp, r7
 807873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078742:	4770      	bx	lr

08078744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8078744:	b480      	push	{r7}
 8078746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8078748:	bf00      	nop
 807874a:	46bd      	mov	sp, r7
 807874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078750:	4770      	bx	lr

08078752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8078752:	b480      	push	{r7}
 8078754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8078756:	bf00      	nop
 8078758:	46bd      	mov	sp, r7
 807875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807875e:	4770      	bx	lr

08078760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8078760:	b580      	push	{r7, lr}
 8078762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8078764:	f000 f89e 	bl	80788a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8078768:	bf00      	nop
 807876a:	bd80      	pop	{r7, pc}

0807876c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 807876c:	b580      	push	{r7, lr}
 807876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8078770:	4802      	ldr	r0, [pc, #8]	; (807877c <OTG_FS_IRQHandler+0x10>)
 8078772:	f001 f815 	bl	80797a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8078776:	bf00      	nop
 8078778:	bd80      	pop	{r7, pc}
 807877a:	bf00      	nop
 807877c:	200006ec 	.word	0x200006ec

08078780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8078780:	b480      	push	{r7}
 8078782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8078784:	4b07      	ldr	r3, [pc, #28]	; (80787a4 <SystemInit+0x24>)
 8078786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807878a:	4a06      	ldr	r2, [pc, #24]	; (80787a4 <SystemInit+0x24>)
 807878c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8078790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8078794:	4b03      	ldr	r3, [pc, #12]	; (80787a4 <SystemInit+0x24>)
 8078796:	4a04      	ldr	r2, [pc, #16]	; (80787a8 <SystemInit+0x28>)
 8078798:	609a      	str	r2, [r3, #8]
#endif
}
 807879a:	bf00      	nop
 807879c:	46bd      	mov	sp, r7
 807879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80787a2:	4770      	bx	lr
 80787a4:	e000ed00 	.word	0xe000ed00
 80787a8:	08078000 	.word	0x08078000

080787ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80787ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80787e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80787b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80787b2:	e003      	b.n	80787bc <LoopCopyDataInit>

080787b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80787b4:	4b0c      	ldr	r3, [pc, #48]	; (80787e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80787b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80787b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80787ba:	3104      	adds	r1, #4

080787bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80787bc:	480b      	ldr	r0, [pc, #44]	; (80787ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80787be:	4b0c      	ldr	r3, [pc, #48]	; (80787f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80787c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80787c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80787c4:	d3f6      	bcc.n	80787b4 <CopyDataInit>
  ldr  r2, =_sbss
 80787c6:	4a0b      	ldr	r2, [pc, #44]	; (80787f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80787c8:	e002      	b.n	80787d0 <LoopFillZerobss>

080787ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80787ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80787cc:	f842 3b04 	str.w	r3, [r2], #4

080787d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80787d0:	4b09      	ldr	r3, [pc, #36]	; (80787f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80787d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80787d4:	d3f9      	bcc.n	80787ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80787d6:	f7ff ffd3 	bl	8078780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80787da:	f006 fbb3 	bl	807ef44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80787de:	f7ff fe7d 	bl	80784dc <main>
  bx  lr    
 80787e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80787e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80787e8:	0807f068 	.word	0x0807f068
  ldr  r0, =_sdata
 80787ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80787f0:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 80787f4:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 80787f8:	20000f14 	.word	0x20000f14

080787fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80787fc:	e7fe      	b.n	80787fc <ADC_IRQHandler>
	...

08078800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8078800:	b580      	push	{r7, lr}
 8078802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8078804:	4b0e      	ldr	r3, [pc, #56]	; (8078840 <HAL_Init+0x40>)
 8078806:	681b      	ldr	r3, [r3, #0]
 8078808:	4a0d      	ldr	r2, [pc, #52]	; (8078840 <HAL_Init+0x40>)
 807880a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 807880e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8078810:	4b0b      	ldr	r3, [pc, #44]	; (8078840 <HAL_Init+0x40>)
 8078812:	681b      	ldr	r3, [r3, #0]
 8078814:	4a0a      	ldr	r2, [pc, #40]	; (8078840 <HAL_Init+0x40>)
 8078816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 807881a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 807881c:	4b08      	ldr	r3, [pc, #32]	; (8078840 <HAL_Init+0x40>)
 807881e:	681b      	ldr	r3, [r3, #0]
 8078820:	4a07      	ldr	r2, [pc, #28]	; (8078840 <HAL_Init+0x40>)
 8078822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8078826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8078828:	2003      	movs	r0, #3
 807882a:	f000 f94f 	bl	8078acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 807882e:	2000      	movs	r0, #0
 8078830:	f000 f808 	bl	8078844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8078834:	f7ff ff46 	bl	80786c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8078838:	2300      	movs	r3, #0
}
 807883a:	4618      	mov	r0, r3
 807883c:	bd80      	pop	{r7, pc}
 807883e:	bf00      	nop
 8078840:	40023c00 	.word	0x40023c00

08078844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8078844:	b580      	push	{r7, lr}
 8078846:	b082      	sub	sp, #8
 8078848:	af00      	add	r7, sp, #0
 807884a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 807884c:	4b12      	ldr	r3, [pc, #72]	; (8078898 <HAL_InitTick+0x54>)
 807884e:	681a      	ldr	r2, [r3, #0]
 8078850:	4b12      	ldr	r3, [pc, #72]	; (807889c <HAL_InitTick+0x58>)
 8078852:	781b      	ldrb	r3, [r3, #0]
 8078854:	4619      	mov	r1, r3
 8078856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 807885a:	fbb3 f3f1 	udiv	r3, r3, r1
 807885e:	fbb2 f3f3 	udiv	r3, r2, r3
 8078862:	4618      	mov	r0, r3
 8078864:	f000 f967 	bl	8078b36 <HAL_SYSTICK_Config>
 8078868:	4603      	mov	r3, r0
 807886a:	2b00      	cmp	r3, #0
 807886c:	d001      	beq.n	8078872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 807886e:	2301      	movs	r3, #1
 8078870:	e00e      	b.n	8078890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8078872:	687b      	ldr	r3, [r7, #4]
 8078874:	2b0f      	cmp	r3, #15
 8078876:	d80a      	bhi.n	807888e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8078878:	2200      	movs	r2, #0
 807887a:	6879      	ldr	r1, [r7, #4]
 807887c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8078880:	f000 f92f 	bl	8078ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8078884:	4a06      	ldr	r2, [pc, #24]	; (80788a0 <HAL_InitTick+0x5c>)
 8078886:	687b      	ldr	r3, [r7, #4]
 8078888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 807888a:	2300      	movs	r3, #0
 807888c:	e000      	b.n	8078890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 807888e:	2301      	movs	r3, #1
}
 8078890:	4618      	mov	r0, r3
 8078892:	3708      	adds	r7, #8
 8078894:	46bd      	mov	sp, r7
 8078896:	bd80      	pop	{r7, pc}
 8078898:	20000000 	.word	0x20000000
 807889c:	20000008 	.word	0x20000008
 80788a0:	20000004 	.word	0x20000004

080788a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80788a4:	b480      	push	{r7}
 80788a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80788a8:	4b06      	ldr	r3, [pc, #24]	; (80788c4 <HAL_IncTick+0x20>)
 80788aa:	781b      	ldrb	r3, [r3, #0]
 80788ac:	461a      	mov	r2, r3
 80788ae:	4b06      	ldr	r3, [pc, #24]	; (80788c8 <HAL_IncTick+0x24>)
 80788b0:	681b      	ldr	r3, [r3, #0]
 80788b2:	4413      	add	r3, r2
 80788b4:	4a04      	ldr	r2, [pc, #16]	; (80788c8 <HAL_IncTick+0x24>)
 80788b6:	6013      	str	r3, [r2, #0]
}
 80788b8:	bf00      	nop
 80788ba:	46bd      	mov	sp, r7
 80788bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80788c0:	4770      	bx	lr
 80788c2:	bf00      	nop
 80788c4:	20000008 	.word	0x20000008
 80788c8:	200000f8 	.word	0x200000f8

080788cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80788cc:	b480      	push	{r7}
 80788ce:	af00      	add	r7, sp, #0
  return uwTick;
 80788d0:	4b03      	ldr	r3, [pc, #12]	; (80788e0 <HAL_GetTick+0x14>)
 80788d2:	681b      	ldr	r3, [r3, #0]
}
 80788d4:	4618      	mov	r0, r3
 80788d6:	46bd      	mov	sp, r7
 80788d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80788dc:	4770      	bx	lr
 80788de:	bf00      	nop
 80788e0:	200000f8 	.word	0x200000f8

080788e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80788e4:	b580      	push	{r7, lr}
 80788e6:	b084      	sub	sp, #16
 80788e8:	af00      	add	r7, sp, #0
 80788ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80788ec:	f7ff ffee 	bl	80788cc <HAL_GetTick>
 80788f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80788f2:	687b      	ldr	r3, [r7, #4]
 80788f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80788f6:	68fb      	ldr	r3, [r7, #12]
 80788f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80788fc:	d005      	beq.n	807890a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80788fe:	4b0a      	ldr	r3, [pc, #40]	; (8078928 <HAL_Delay+0x44>)
 8078900:	781b      	ldrb	r3, [r3, #0]
 8078902:	461a      	mov	r2, r3
 8078904:	68fb      	ldr	r3, [r7, #12]
 8078906:	4413      	add	r3, r2
 8078908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 807890a:	bf00      	nop
 807890c:	f7ff ffde 	bl	80788cc <HAL_GetTick>
 8078910:	4602      	mov	r2, r0
 8078912:	68bb      	ldr	r3, [r7, #8]
 8078914:	1ad3      	subs	r3, r2, r3
 8078916:	68fa      	ldr	r2, [r7, #12]
 8078918:	429a      	cmp	r2, r3
 807891a:	d8f7      	bhi.n	807890c <HAL_Delay+0x28>
  {
  }
}
 807891c:	bf00      	nop
 807891e:	bf00      	nop
 8078920:	3710      	adds	r7, #16
 8078922:	46bd      	mov	sp, r7
 8078924:	bd80      	pop	{r7, pc}
 8078926:	bf00      	nop
 8078928:	20000008 	.word	0x20000008

0807892c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 807892c:	b480      	push	{r7}
 807892e:	b085      	sub	sp, #20
 8078930:	af00      	add	r7, sp, #0
 8078932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8078934:	687b      	ldr	r3, [r7, #4]
 8078936:	f003 0307 	and.w	r3, r3, #7
 807893a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 807893c:	4b0c      	ldr	r3, [pc, #48]	; (8078970 <__NVIC_SetPriorityGrouping+0x44>)
 807893e:	68db      	ldr	r3, [r3, #12]
 8078940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8078942:	68ba      	ldr	r2, [r7, #8]
 8078944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8078948:	4013      	ands	r3, r2
 807894a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 807894c:	68fb      	ldr	r3, [r7, #12]
 807894e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8078950:	68bb      	ldr	r3, [r7, #8]
 8078952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8078954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8078958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 807895c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 807895e:	4a04      	ldr	r2, [pc, #16]	; (8078970 <__NVIC_SetPriorityGrouping+0x44>)
 8078960:	68bb      	ldr	r3, [r7, #8]
 8078962:	60d3      	str	r3, [r2, #12]
}
 8078964:	bf00      	nop
 8078966:	3714      	adds	r7, #20
 8078968:	46bd      	mov	sp, r7
 807896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807896e:	4770      	bx	lr
 8078970:	e000ed00 	.word	0xe000ed00

08078974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8078974:	b480      	push	{r7}
 8078976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8078978:	4b04      	ldr	r3, [pc, #16]	; (807898c <__NVIC_GetPriorityGrouping+0x18>)
 807897a:	68db      	ldr	r3, [r3, #12]
 807897c:	0a1b      	lsrs	r3, r3, #8
 807897e:	f003 0307 	and.w	r3, r3, #7
}
 8078982:	4618      	mov	r0, r3
 8078984:	46bd      	mov	sp, r7
 8078986:	f85d 7b04 	ldr.w	r7, [sp], #4
 807898a:	4770      	bx	lr
 807898c:	e000ed00 	.word	0xe000ed00

08078990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8078990:	b480      	push	{r7}
 8078992:	b083      	sub	sp, #12
 8078994:	af00      	add	r7, sp, #0
 8078996:	4603      	mov	r3, r0
 8078998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 807899a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 807899e:	2b00      	cmp	r3, #0
 80789a0:	db0b      	blt.n	80789ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80789a2:	79fb      	ldrb	r3, [r7, #7]
 80789a4:	f003 021f 	and.w	r2, r3, #31
 80789a8:	4907      	ldr	r1, [pc, #28]	; (80789c8 <__NVIC_EnableIRQ+0x38>)
 80789aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789ae:	095b      	lsrs	r3, r3, #5
 80789b0:	2001      	movs	r0, #1
 80789b2:	fa00 f202 	lsl.w	r2, r0, r2
 80789b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80789ba:	bf00      	nop
 80789bc:	370c      	adds	r7, #12
 80789be:	46bd      	mov	sp, r7
 80789c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80789c4:	4770      	bx	lr
 80789c6:	bf00      	nop
 80789c8:	e000e100 	.word	0xe000e100

080789cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80789cc:	b480      	push	{r7}
 80789ce:	b083      	sub	sp, #12
 80789d0:	af00      	add	r7, sp, #0
 80789d2:	4603      	mov	r3, r0
 80789d4:	6039      	str	r1, [r7, #0]
 80789d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80789d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789dc:	2b00      	cmp	r3, #0
 80789de:	db0a      	blt.n	80789f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80789e0:	683b      	ldr	r3, [r7, #0]
 80789e2:	b2da      	uxtb	r2, r3
 80789e4:	490c      	ldr	r1, [pc, #48]	; (8078a18 <__NVIC_SetPriority+0x4c>)
 80789e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80789ea:	0112      	lsls	r2, r2, #4
 80789ec:	b2d2      	uxtb	r2, r2
 80789ee:	440b      	add	r3, r1
 80789f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80789f4:	e00a      	b.n	8078a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80789f6:	683b      	ldr	r3, [r7, #0]
 80789f8:	b2da      	uxtb	r2, r3
 80789fa:	4908      	ldr	r1, [pc, #32]	; (8078a1c <__NVIC_SetPriority+0x50>)
 80789fc:	79fb      	ldrb	r3, [r7, #7]
 80789fe:	f003 030f 	and.w	r3, r3, #15
 8078a02:	3b04      	subs	r3, #4
 8078a04:	0112      	lsls	r2, r2, #4
 8078a06:	b2d2      	uxtb	r2, r2
 8078a08:	440b      	add	r3, r1
 8078a0a:	761a      	strb	r2, [r3, #24]
}
 8078a0c:	bf00      	nop
 8078a0e:	370c      	adds	r7, #12
 8078a10:	46bd      	mov	sp, r7
 8078a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078a16:	4770      	bx	lr
 8078a18:	e000e100 	.word	0xe000e100
 8078a1c:	e000ed00 	.word	0xe000ed00

08078a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8078a20:	b480      	push	{r7}
 8078a22:	b089      	sub	sp, #36	; 0x24
 8078a24:	af00      	add	r7, sp, #0
 8078a26:	60f8      	str	r0, [r7, #12]
 8078a28:	60b9      	str	r1, [r7, #8]
 8078a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8078a2c:	68fb      	ldr	r3, [r7, #12]
 8078a2e:	f003 0307 	and.w	r3, r3, #7
 8078a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8078a34:	69fb      	ldr	r3, [r7, #28]
 8078a36:	f1c3 0307 	rsb	r3, r3, #7
 8078a3a:	2b04      	cmp	r3, #4
 8078a3c:	bf28      	it	cs
 8078a3e:	2304      	movcs	r3, #4
 8078a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8078a42:	69fb      	ldr	r3, [r7, #28]
 8078a44:	3304      	adds	r3, #4
 8078a46:	2b06      	cmp	r3, #6
 8078a48:	d902      	bls.n	8078a50 <NVIC_EncodePriority+0x30>
 8078a4a:	69fb      	ldr	r3, [r7, #28]
 8078a4c:	3b03      	subs	r3, #3
 8078a4e:	e000      	b.n	8078a52 <NVIC_EncodePriority+0x32>
 8078a50:	2300      	movs	r3, #0
 8078a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8078a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8078a58:	69bb      	ldr	r3, [r7, #24]
 8078a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8078a5e:	43da      	mvns	r2, r3
 8078a60:	68bb      	ldr	r3, [r7, #8]
 8078a62:	401a      	ands	r2, r3
 8078a64:	697b      	ldr	r3, [r7, #20]
 8078a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8078a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8078a6c:	697b      	ldr	r3, [r7, #20]
 8078a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8078a72:	43d9      	mvns	r1, r3
 8078a74:	687b      	ldr	r3, [r7, #4]
 8078a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8078a78:	4313      	orrs	r3, r2
         );
}
 8078a7a:	4618      	mov	r0, r3
 8078a7c:	3724      	adds	r7, #36	; 0x24
 8078a7e:	46bd      	mov	sp, r7
 8078a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078a84:	4770      	bx	lr
	...

08078a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8078a88:	b580      	push	{r7, lr}
 8078a8a:	b082      	sub	sp, #8
 8078a8c:	af00      	add	r7, sp, #0
 8078a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8078a90:	687b      	ldr	r3, [r7, #4]
 8078a92:	3b01      	subs	r3, #1
 8078a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8078a98:	d301      	bcc.n	8078a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8078a9a:	2301      	movs	r3, #1
 8078a9c:	e00f      	b.n	8078abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8078a9e:	4a0a      	ldr	r2, [pc, #40]	; (8078ac8 <SysTick_Config+0x40>)
 8078aa0:	687b      	ldr	r3, [r7, #4]
 8078aa2:	3b01      	subs	r3, #1
 8078aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8078aa6:	210f      	movs	r1, #15
 8078aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8078aac:	f7ff ff8e 	bl	80789cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8078ab0:	4b05      	ldr	r3, [pc, #20]	; (8078ac8 <SysTick_Config+0x40>)
 8078ab2:	2200      	movs	r2, #0
 8078ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8078ab6:	4b04      	ldr	r3, [pc, #16]	; (8078ac8 <SysTick_Config+0x40>)
 8078ab8:	2207      	movs	r2, #7
 8078aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8078abc:	2300      	movs	r3, #0
}
 8078abe:	4618      	mov	r0, r3
 8078ac0:	3708      	adds	r7, #8
 8078ac2:	46bd      	mov	sp, r7
 8078ac4:	bd80      	pop	{r7, pc}
 8078ac6:	bf00      	nop
 8078ac8:	e000e010 	.word	0xe000e010

08078acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8078acc:	b580      	push	{r7, lr}
 8078ace:	b082      	sub	sp, #8
 8078ad0:	af00      	add	r7, sp, #0
 8078ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8078ad4:	6878      	ldr	r0, [r7, #4]
 8078ad6:	f7ff ff29 	bl	807892c <__NVIC_SetPriorityGrouping>
}
 8078ada:	bf00      	nop
 8078adc:	3708      	adds	r7, #8
 8078ade:	46bd      	mov	sp, r7
 8078ae0:	bd80      	pop	{r7, pc}

08078ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8078ae2:	b580      	push	{r7, lr}
 8078ae4:	b086      	sub	sp, #24
 8078ae6:	af00      	add	r7, sp, #0
 8078ae8:	4603      	mov	r3, r0
 8078aea:	60b9      	str	r1, [r7, #8]
 8078aec:	607a      	str	r2, [r7, #4]
 8078aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8078af0:	2300      	movs	r3, #0
 8078af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8078af4:	f7ff ff3e 	bl	8078974 <__NVIC_GetPriorityGrouping>
 8078af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8078afa:	687a      	ldr	r2, [r7, #4]
 8078afc:	68b9      	ldr	r1, [r7, #8]
 8078afe:	6978      	ldr	r0, [r7, #20]
 8078b00:	f7ff ff8e 	bl	8078a20 <NVIC_EncodePriority>
 8078b04:	4602      	mov	r2, r0
 8078b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8078b0a:	4611      	mov	r1, r2
 8078b0c:	4618      	mov	r0, r3
 8078b0e:	f7ff ff5d 	bl	80789cc <__NVIC_SetPriority>
}
 8078b12:	bf00      	nop
 8078b14:	3718      	adds	r7, #24
 8078b16:	46bd      	mov	sp, r7
 8078b18:	bd80      	pop	{r7, pc}

08078b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8078b1a:	b580      	push	{r7, lr}
 8078b1c:	b082      	sub	sp, #8
 8078b1e:	af00      	add	r7, sp, #0
 8078b20:	4603      	mov	r3, r0
 8078b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8078b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8078b28:	4618      	mov	r0, r3
 8078b2a:	f7ff ff31 	bl	8078990 <__NVIC_EnableIRQ>
}
 8078b2e:	bf00      	nop
 8078b30:	3708      	adds	r7, #8
 8078b32:	46bd      	mov	sp, r7
 8078b34:	bd80      	pop	{r7, pc}

08078b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8078b36:	b580      	push	{r7, lr}
 8078b38:	b082      	sub	sp, #8
 8078b3a:	af00      	add	r7, sp, #0
 8078b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8078b3e:	6878      	ldr	r0, [r7, #4]
 8078b40:	f7ff ffa2 	bl	8078a88 <SysTick_Config>
 8078b44:	4603      	mov	r3, r0
}
 8078b46:	4618      	mov	r0, r3
 8078b48:	3708      	adds	r7, #8
 8078b4a:	46bd      	mov	sp, r7
 8078b4c:	bd80      	pop	{r7, pc}
	...

08078b50 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8078b50:	b580      	push	{r7, lr}
 8078b52:	b086      	sub	sp, #24
 8078b54:	af00      	add	r7, sp, #0
 8078b56:	60f8      	str	r0, [r7, #12]
 8078b58:	60b9      	str	r1, [r7, #8]
 8078b5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8078b5e:	2301      	movs	r3, #1
 8078b60:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8078b62:	4b23      	ldr	r3, [pc, #140]	; (8078bf0 <HAL_FLASH_Program+0xa0>)
 8078b64:	7e1b      	ldrb	r3, [r3, #24]
 8078b66:	2b01      	cmp	r3, #1
 8078b68:	d101      	bne.n	8078b6e <HAL_FLASH_Program+0x1e>
 8078b6a:	2302      	movs	r3, #2
 8078b6c:	e03b      	b.n	8078be6 <HAL_FLASH_Program+0x96>
 8078b6e:	4b20      	ldr	r3, [pc, #128]	; (8078bf0 <HAL_FLASH_Program+0xa0>)
 8078b70:	2201      	movs	r2, #1
 8078b72:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078b74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078b78:	f000 f870 	bl	8078c5c <FLASH_WaitForLastOperation>
 8078b7c:	4603      	mov	r3, r0
 8078b7e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8078b80:	7dfb      	ldrb	r3, [r7, #23]
 8078b82:	2b00      	cmp	r3, #0
 8078b84:	d12b      	bne.n	8078bde <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8078b86:	68fb      	ldr	r3, [r7, #12]
 8078b88:	2b00      	cmp	r3, #0
 8078b8a:	d105      	bne.n	8078b98 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8078b8c:	783b      	ldrb	r3, [r7, #0]
 8078b8e:	4619      	mov	r1, r3
 8078b90:	68b8      	ldr	r0, [r7, #8]
 8078b92:	f000 f91b 	bl	8078dcc <FLASH_Program_Byte>
 8078b96:	e016      	b.n	8078bc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8078b98:	68fb      	ldr	r3, [r7, #12]
 8078b9a:	2b01      	cmp	r3, #1
 8078b9c:	d105      	bne.n	8078baa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8078b9e:	883b      	ldrh	r3, [r7, #0]
 8078ba0:	4619      	mov	r1, r3
 8078ba2:	68b8      	ldr	r0, [r7, #8]
 8078ba4:	f000 f8ee 	bl	8078d84 <FLASH_Program_HalfWord>
 8078ba8:	e00d      	b.n	8078bc6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8078baa:	68fb      	ldr	r3, [r7, #12]
 8078bac:	2b02      	cmp	r3, #2
 8078bae:	d105      	bne.n	8078bbc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8078bb0:	683b      	ldr	r3, [r7, #0]
 8078bb2:	4619      	mov	r1, r3
 8078bb4:	68b8      	ldr	r0, [r7, #8]
 8078bb6:	f000 f8c3 	bl	8078d40 <FLASH_Program_Word>
 8078bba:	e004      	b.n	8078bc6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8078bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8078bc0:	68b8      	ldr	r0, [r7, #8]
 8078bc2:	f000 f88b 	bl	8078cdc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078bc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078bca:	f000 f847 	bl	8078c5c <FLASH_WaitForLastOperation>
 8078bce:	4603      	mov	r3, r0
 8078bd0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8078bd2:	4b08      	ldr	r3, [pc, #32]	; (8078bf4 <HAL_FLASH_Program+0xa4>)
 8078bd4:	691b      	ldr	r3, [r3, #16]
 8078bd6:	4a07      	ldr	r2, [pc, #28]	; (8078bf4 <HAL_FLASH_Program+0xa4>)
 8078bd8:	f023 0301 	bic.w	r3, r3, #1
 8078bdc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8078bde:	4b04      	ldr	r3, [pc, #16]	; (8078bf0 <HAL_FLASH_Program+0xa0>)
 8078be0:	2200      	movs	r2, #0
 8078be2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8078be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8078be6:	4618      	mov	r0, r3
 8078be8:	3718      	adds	r7, #24
 8078bea:	46bd      	mov	sp, r7
 8078bec:	bd80      	pop	{r7, pc}
 8078bee:	bf00      	nop
 8078bf0:	200000fc 	.word	0x200000fc
 8078bf4:	40023c00 	.word	0x40023c00

08078bf8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8078bf8:	b480      	push	{r7}
 8078bfa:	b083      	sub	sp, #12
 8078bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8078bfe:	2300      	movs	r3, #0
 8078c00:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8078c02:	4b0b      	ldr	r3, [pc, #44]	; (8078c30 <HAL_FLASH_Unlock+0x38>)
 8078c04:	691b      	ldr	r3, [r3, #16]
 8078c06:	2b00      	cmp	r3, #0
 8078c08:	da0b      	bge.n	8078c22 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8078c0a:	4b09      	ldr	r3, [pc, #36]	; (8078c30 <HAL_FLASH_Unlock+0x38>)
 8078c0c:	4a09      	ldr	r2, [pc, #36]	; (8078c34 <HAL_FLASH_Unlock+0x3c>)
 8078c0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8078c10:	4b07      	ldr	r3, [pc, #28]	; (8078c30 <HAL_FLASH_Unlock+0x38>)
 8078c12:	4a09      	ldr	r2, [pc, #36]	; (8078c38 <HAL_FLASH_Unlock+0x40>)
 8078c14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8078c16:	4b06      	ldr	r3, [pc, #24]	; (8078c30 <HAL_FLASH_Unlock+0x38>)
 8078c18:	691b      	ldr	r3, [r3, #16]
 8078c1a:	2b00      	cmp	r3, #0
 8078c1c:	da01      	bge.n	8078c22 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8078c1e:	2301      	movs	r3, #1
 8078c20:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8078c22:	79fb      	ldrb	r3, [r7, #7]
}
 8078c24:	4618      	mov	r0, r3
 8078c26:	370c      	adds	r7, #12
 8078c28:	46bd      	mov	sp, r7
 8078c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078c2e:	4770      	bx	lr
 8078c30:	40023c00 	.word	0x40023c00
 8078c34:	45670123 	.word	0x45670123
 8078c38:	cdef89ab 	.word	0xcdef89ab

08078c3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8078c3c:	b480      	push	{r7}
 8078c3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8078c40:	4b05      	ldr	r3, [pc, #20]	; (8078c58 <HAL_FLASH_Lock+0x1c>)
 8078c42:	691b      	ldr	r3, [r3, #16]
 8078c44:	4a04      	ldr	r2, [pc, #16]	; (8078c58 <HAL_FLASH_Lock+0x1c>)
 8078c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8078c4a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8078c4c:	2300      	movs	r3, #0
}
 8078c4e:	4618      	mov	r0, r3
 8078c50:	46bd      	mov	sp, r7
 8078c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078c56:	4770      	bx	lr
 8078c58:	40023c00 	.word	0x40023c00

08078c5c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8078c5c:	b580      	push	{r7, lr}
 8078c5e:	b084      	sub	sp, #16
 8078c60:	af00      	add	r7, sp, #0
 8078c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8078c64:	2300      	movs	r3, #0
 8078c66:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8078c68:	4b1a      	ldr	r3, [pc, #104]	; (8078cd4 <FLASH_WaitForLastOperation+0x78>)
 8078c6a:	2200      	movs	r2, #0
 8078c6c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8078c6e:	f7ff fe2d 	bl	80788cc <HAL_GetTick>
 8078c72:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8078c74:	e010      	b.n	8078c98 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8078c76:	687b      	ldr	r3, [r7, #4]
 8078c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8078c7c:	d00c      	beq.n	8078c98 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8078c7e:	687b      	ldr	r3, [r7, #4]
 8078c80:	2b00      	cmp	r3, #0
 8078c82:	d007      	beq.n	8078c94 <FLASH_WaitForLastOperation+0x38>
 8078c84:	f7ff fe22 	bl	80788cc <HAL_GetTick>
 8078c88:	4602      	mov	r2, r0
 8078c8a:	68fb      	ldr	r3, [r7, #12]
 8078c8c:	1ad3      	subs	r3, r2, r3
 8078c8e:	687a      	ldr	r2, [r7, #4]
 8078c90:	429a      	cmp	r2, r3
 8078c92:	d201      	bcs.n	8078c98 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8078c94:	2303      	movs	r3, #3
 8078c96:	e019      	b.n	8078ccc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8078c98:	4b0f      	ldr	r3, [pc, #60]	; (8078cd8 <FLASH_WaitForLastOperation+0x7c>)
 8078c9a:	68db      	ldr	r3, [r3, #12]
 8078c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8078ca0:	2b00      	cmp	r3, #0
 8078ca2:	d1e8      	bne.n	8078c76 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8078ca4:	4b0c      	ldr	r3, [pc, #48]	; (8078cd8 <FLASH_WaitForLastOperation+0x7c>)
 8078ca6:	68db      	ldr	r3, [r3, #12]
 8078ca8:	f003 0301 	and.w	r3, r3, #1
 8078cac:	2b00      	cmp	r3, #0
 8078cae:	d002      	beq.n	8078cb6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8078cb0:	4b09      	ldr	r3, [pc, #36]	; (8078cd8 <FLASH_WaitForLastOperation+0x7c>)
 8078cb2:	2201      	movs	r2, #1
 8078cb4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8078cb6:	4b08      	ldr	r3, [pc, #32]	; (8078cd8 <FLASH_WaitForLastOperation+0x7c>)
 8078cb8:	68db      	ldr	r3, [r3, #12]
 8078cba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8078cbe:	2b00      	cmp	r3, #0
 8078cc0:	d003      	beq.n	8078cca <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8078cc2:	f000 f8a5 	bl	8078e10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8078cc6:	2301      	movs	r3, #1
 8078cc8:	e000      	b.n	8078ccc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8078cca:	2300      	movs	r3, #0
  
}  
 8078ccc:	4618      	mov	r0, r3
 8078cce:	3710      	adds	r7, #16
 8078cd0:	46bd      	mov	sp, r7
 8078cd2:	bd80      	pop	{r7, pc}
 8078cd4:	200000fc 	.word	0x200000fc
 8078cd8:	40023c00 	.word	0x40023c00

08078cdc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8078cdc:	b480      	push	{r7}
 8078cde:	b085      	sub	sp, #20
 8078ce0:	af00      	add	r7, sp, #0
 8078ce2:	60f8      	str	r0, [r7, #12]
 8078ce4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078ce8:	4b14      	ldr	r3, [pc, #80]	; (8078d3c <FLASH_Program_DoubleWord+0x60>)
 8078cea:	691b      	ldr	r3, [r3, #16]
 8078cec:	4a13      	ldr	r2, [pc, #76]	; (8078d3c <FLASH_Program_DoubleWord+0x60>)
 8078cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078cf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8078cf4:	4b11      	ldr	r3, [pc, #68]	; (8078d3c <FLASH_Program_DoubleWord+0x60>)
 8078cf6:	691b      	ldr	r3, [r3, #16]
 8078cf8:	4a10      	ldr	r2, [pc, #64]	; (8078d3c <FLASH_Program_DoubleWord+0x60>)
 8078cfa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8078cfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078d00:	4b0e      	ldr	r3, [pc, #56]	; (8078d3c <FLASH_Program_DoubleWord+0x60>)
 8078d02:	691b      	ldr	r3, [r3, #16]
 8078d04:	4a0d      	ldr	r2, [pc, #52]	; (8078d3c <FLASH_Program_DoubleWord+0x60>)
 8078d06:	f043 0301 	orr.w	r3, r3, #1
 8078d0a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8078d0c:	68fb      	ldr	r3, [r7, #12]
 8078d0e:	683a      	ldr	r2, [r7, #0]
 8078d10:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8078d12:	f3bf 8f6f 	isb	sy
}
 8078d16:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8078d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8078d1c:	f04f 0200 	mov.w	r2, #0
 8078d20:	f04f 0300 	mov.w	r3, #0
 8078d24:	000a      	movs	r2, r1
 8078d26:	2300      	movs	r3, #0
 8078d28:	68f9      	ldr	r1, [r7, #12]
 8078d2a:	3104      	adds	r1, #4
 8078d2c:	4613      	mov	r3, r2
 8078d2e:	600b      	str	r3, [r1, #0]
}
 8078d30:	bf00      	nop
 8078d32:	3714      	adds	r7, #20
 8078d34:	46bd      	mov	sp, r7
 8078d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078d3a:	4770      	bx	lr
 8078d3c:	40023c00 	.word	0x40023c00

08078d40 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8078d40:	b480      	push	{r7}
 8078d42:	b083      	sub	sp, #12
 8078d44:	af00      	add	r7, sp, #0
 8078d46:	6078      	str	r0, [r7, #4]
 8078d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078d4a:	4b0d      	ldr	r3, [pc, #52]	; (8078d80 <FLASH_Program_Word+0x40>)
 8078d4c:	691b      	ldr	r3, [r3, #16]
 8078d4e:	4a0c      	ldr	r2, [pc, #48]	; (8078d80 <FLASH_Program_Word+0x40>)
 8078d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078d54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8078d56:	4b0a      	ldr	r3, [pc, #40]	; (8078d80 <FLASH_Program_Word+0x40>)
 8078d58:	691b      	ldr	r3, [r3, #16]
 8078d5a:	4a09      	ldr	r2, [pc, #36]	; (8078d80 <FLASH_Program_Word+0x40>)
 8078d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8078d60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078d62:	4b07      	ldr	r3, [pc, #28]	; (8078d80 <FLASH_Program_Word+0x40>)
 8078d64:	691b      	ldr	r3, [r3, #16]
 8078d66:	4a06      	ldr	r2, [pc, #24]	; (8078d80 <FLASH_Program_Word+0x40>)
 8078d68:	f043 0301 	orr.w	r3, r3, #1
 8078d6c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8078d6e:	687b      	ldr	r3, [r7, #4]
 8078d70:	683a      	ldr	r2, [r7, #0]
 8078d72:	601a      	str	r2, [r3, #0]
}
 8078d74:	bf00      	nop
 8078d76:	370c      	adds	r7, #12
 8078d78:	46bd      	mov	sp, r7
 8078d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078d7e:	4770      	bx	lr
 8078d80:	40023c00 	.word	0x40023c00

08078d84 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8078d84:	b480      	push	{r7}
 8078d86:	b083      	sub	sp, #12
 8078d88:	af00      	add	r7, sp, #0
 8078d8a:	6078      	str	r0, [r7, #4]
 8078d8c:	460b      	mov	r3, r1
 8078d8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078d90:	4b0d      	ldr	r3, [pc, #52]	; (8078dc8 <FLASH_Program_HalfWord+0x44>)
 8078d92:	691b      	ldr	r3, [r3, #16]
 8078d94:	4a0c      	ldr	r2, [pc, #48]	; (8078dc8 <FLASH_Program_HalfWord+0x44>)
 8078d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8078d9c:	4b0a      	ldr	r3, [pc, #40]	; (8078dc8 <FLASH_Program_HalfWord+0x44>)
 8078d9e:	691b      	ldr	r3, [r3, #16]
 8078da0:	4a09      	ldr	r2, [pc, #36]	; (8078dc8 <FLASH_Program_HalfWord+0x44>)
 8078da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8078da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078da8:	4b07      	ldr	r3, [pc, #28]	; (8078dc8 <FLASH_Program_HalfWord+0x44>)
 8078daa:	691b      	ldr	r3, [r3, #16]
 8078dac:	4a06      	ldr	r2, [pc, #24]	; (8078dc8 <FLASH_Program_HalfWord+0x44>)
 8078dae:	f043 0301 	orr.w	r3, r3, #1
 8078db2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8078db4:	687b      	ldr	r3, [r7, #4]
 8078db6:	887a      	ldrh	r2, [r7, #2]
 8078db8:	801a      	strh	r2, [r3, #0]
}
 8078dba:	bf00      	nop
 8078dbc:	370c      	adds	r7, #12
 8078dbe:	46bd      	mov	sp, r7
 8078dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078dc4:	4770      	bx	lr
 8078dc6:	bf00      	nop
 8078dc8:	40023c00 	.word	0x40023c00

08078dcc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8078dcc:	b480      	push	{r7}
 8078dce:	b083      	sub	sp, #12
 8078dd0:	af00      	add	r7, sp, #0
 8078dd2:	6078      	str	r0, [r7, #4]
 8078dd4:	460b      	mov	r3, r1
 8078dd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078dd8:	4b0c      	ldr	r3, [pc, #48]	; (8078e0c <FLASH_Program_Byte+0x40>)
 8078dda:	691b      	ldr	r3, [r3, #16]
 8078ddc:	4a0b      	ldr	r2, [pc, #44]	; (8078e0c <FLASH_Program_Byte+0x40>)
 8078dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078de2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8078de4:	4b09      	ldr	r3, [pc, #36]	; (8078e0c <FLASH_Program_Byte+0x40>)
 8078de6:	4a09      	ldr	r2, [pc, #36]	; (8078e0c <FLASH_Program_Byte+0x40>)
 8078de8:	691b      	ldr	r3, [r3, #16]
 8078dea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8078dec:	4b07      	ldr	r3, [pc, #28]	; (8078e0c <FLASH_Program_Byte+0x40>)
 8078dee:	691b      	ldr	r3, [r3, #16]
 8078df0:	4a06      	ldr	r2, [pc, #24]	; (8078e0c <FLASH_Program_Byte+0x40>)
 8078df2:	f043 0301 	orr.w	r3, r3, #1
 8078df6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8078df8:	687b      	ldr	r3, [r7, #4]
 8078dfa:	78fa      	ldrb	r2, [r7, #3]
 8078dfc:	701a      	strb	r2, [r3, #0]
}
 8078dfe:	bf00      	nop
 8078e00:	370c      	adds	r7, #12
 8078e02:	46bd      	mov	sp, r7
 8078e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078e08:	4770      	bx	lr
 8078e0a:	bf00      	nop
 8078e0c:	40023c00 	.word	0x40023c00

08078e10 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8078e10:	b480      	push	{r7}
 8078e12:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8078e14:	4b2f      	ldr	r3, [pc, #188]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e16:	68db      	ldr	r3, [r3, #12]
 8078e18:	f003 0310 	and.w	r3, r3, #16
 8078e1c:	2b00      	cmp	r3, #0
 8078e1e:	d008      	beq.n	8078e32 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8078e20:	4b2d      	ldr	r3, [pc, #180]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e22:	69db      	ldr	r3, [r3, #28]
 8078e24:	f043 0310 	orr.w	r3, r3, #16
 8078e28:	4a2b      	ldr	r2, [pc, #172]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e2a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8078e2c:	4b29      	ldr	r3, [pc, #164]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e2e:	2210      	movs	r2, #16
 8078e30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8078e32:	4b28      	ldr	r3, [pc, #160]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e34:	68db      	ldr	r3, [r3, #12]
 8078e36:	f003 0320 	and.w	r3, r3, #32
 8078e3a:	2b00      	cmp	r3, #0
 8078e3c:	d008      	beq.n	8078e50 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8078e3e:	4b26      	ldr	r3, [pc, #152]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e40:	69db      	ldr	r3, [r3, #28]
 8078e42:	f043 0308 	orr.w	r3, r3, #8
 8078e46:	4a24      	ldr	r2, [pc, #144]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e48:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8078e4a:	4b22      	ldr	r3, [pc, #136]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e4c:	2220      	movs	r2, #32
 8078e4e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8078e50:	4b20      	ldr	r3, [pc, #128]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e52:	68db      	ldr	r3, [r3, #12]
 8078e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8078e58:	2b00      	cmp	r3, #0
 8078e5a:	d008      	beq.n	8078e6e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8078e5c:	4b1e      	ldr	r3, [pc, #120]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e5e:	69db      	ldr	r3, [r3, #28]
 8078e60:	f043 0304 	orr.w	r3, r3, #4
 8078e64:	4a1c      	ldr	r2, [pc, #112]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8078e68:	4b1a      	ldr	r3, [pc, #104]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e6a:	2240      	movs	r2, #64	; 0x40
 8078e6c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8078e6e:	4b19      	ldr	r3, [pc, #100]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e70:	68db      	ldr	r3, [r3, #12]
 8078e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8078e76:	2b00      	cmp	r3, #0
 8078e78:	d008      	beq.n	8078e8c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8078e7a:	4b17      	ldr	r3, [pc, #92]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e7c:	69db      	ldr	r3, [r3, #28]
 8078e7e:	f043 0302 	orr.w	r3, r3, #2
 8078e82:	4a15      	ldr	r2, [pc, #84]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e84:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8078e86:	4b13      	ldr	r3, [pc, #76]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e88:	2280      	movs	r2, #128	; 0x80
 8078e8a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8078e8c:	4b11      	ldr	r3, [pc, #68]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078e8e:	68db      	ldr	r3, [r3, #12]
 8078e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8078e94:	2b00      	cmp	r3, #0
 8078e96:	d009      	beq.n	8078eac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8078e98:	4b0f      	ldr	r3, [pc, #60]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078e9a:	69db      	ldr	r3, [r3, #28]
 8078e9c:	f043 0301 	orr.w	r3, r3, #1
 8078ea0:	4a0d      	ldr	r2, [pc, #52]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078ea2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8078ea4:	4b0b      	ldr	r3, [pc, #44]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8078eaa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8078eac:	4b09      	ldr	r3, [pc, #36]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078eae:	68db      	ldr	r3, [r3, #12]
 8078eb0:	f003 0302 	and.w	r3, r3, #2
 8078eb4:	2b00      	cmp	r3, #0
 8078eb6:	d008      	beq.n	8078eca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8078eb8:	4b07      	ldr	r3, [pc, #28]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078eba:	69db      	ldr	r3, [r3, #28]
 8078ebc:	f043 0320 	orr.w	r3, r3, #32
 8078ec0:	4a05      	ldr	r2, [pc, #20]	; (8078ed8 <FLASH_SetErrorCode+0xc8>)
 8078ec2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8078ec4:	4b03      	ldr	r3, [pc, #12]	; (8078ed4 <FLASH_SetErrorCode+0xc4>)
 8078ec6:	2202      	movs	r2, #2
 8078ec8:	60da      	str	r2, [r3, #12]
  }
}
 8078eca:	bf00      	nop
 8078ecc:	46bd      	mov	sp, r7
 8078ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078ed2:	4770      	bx	lr
 8078ed4:	40023c00 	.word	0x40023c00
 8078ed8:	200000fc 	.word	0x200000fc

08078edc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8078edc:	b580      	push	{r7, lr}
 8078ede:	b084      	sub	sp, #16
 8078ee0:	af00      	add	r7, sp, #0
 8078ee2:	6078      	str	r0, [r7, #4]
 8078ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8078ee6:	2301      	movs	r3, #1
 8078ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8078eea:	2300      	movs	r3, #0
 8078eec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8078eee:	4b31      	ldr	r3, [pc, #196]	; (8078fb4 <HAL_FLASHEx_Erase+0xd8>)
 8078ef0:	7e1b      	ldrb	r3, [r3, #24]
 8078ef2:	2b01      	cmp	r3, #1
 8078ef4:	d101      	bne.n	8078efa <HAL_FLASHEx_Erase+0x1e>
 8078ef6:	2302      	movs	r3, #2
 8078ef8:	e058      	b.n	8078fac <HAL_FLASHEx_Erase+0xd0>
 8078efa:	4b2e      	ldr	r3, [pc, #184]	; (8078fb4 <HAL_FLASHEx_Erase+0xd8>)
 8078efc:	2201      	movs	r2, #1
 8078efe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078f04:	f7ff feaa 	bl	8078c5c <FLASH_WaitForLastOperation>
 8078f08:	4603      	mov	r3, r0
 8078f0a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8078f0c:	7bfb      	ldrb	r3, [r7, #15]
 8078f0e:	2b00      	cmp	r3, #0
 8078f10:	d148      	bne.n	8078fa4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8078f12:	683b      	ldr	r3, [r7, #0]
 8078f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8078f18:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8078f1a:	687b      	ldr	r3, [r7, #4]
 8078f1c:	681b      	ldr	r3, [r3, #0]
 8078f1e:	2b01      	cmp	r3, #1
 8078f20:	d115      	bne.n	8078f4e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8078f22:	687b      	ldr	r3, [r7, #4]
 8078f24:	691b      	ldr	r3, [r3, #16]
 8078f26:	b2da      	uxtb	r2, r3
 8078f28:	687b      	ldr	r3, [r7, #4]
 8078f2a:	685b      	ldr	r3, [r3, #4]
 8078f2c:	4619      	mov	r1, r3
 8078f2e:	4610      	mov	r0, r2
 8078f30:	f000 f844 	bl	8078fbc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078f38:	f7ff fe90 	bl	8078c5c <FLASH_WaitForLastOperation>
 8078f3c:	4603      	mov	r3, r0
 8078f3e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8078f40:	4b1d      	ldr	r3, [pc, #116]	; (8078fb8 <HAL_FLASHEx_Erase+0xdc>)
 8078f42:	691b      	ldr	r3, [r3, #16]
 8078f44:	4a1c      	ldr	r2, [pc, #112]	; (8078fb8 <HAL_FLASHEx_Erase+0xdc>)
 8078f46:	f023 0304 	bic.w	r3, r3, #4
 8078f4a:	6113      	str	r3, [r2, #16]
 8078f4c:	e028      	b.n	8078fa0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8078f4e:	687b      	ldr	r3, [r7, #4]
 8078f50:	689b      	ldr	r3, [r3, #8]
 8078f52:	60bb      	str	r3, [r7, #8]
 8078f54:	e01c      	b.n	8078f90 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8078f56:	687b      	ldr	r3, [r7, #4]
 8078f58:	691b      	ldr	r3, [r3, #16]
 8078f5a:	b2db      	uxtb	r3, r3
 8078f5c:	4619      	mov	r1, r3
 8078f5e:	68b8      	ldr	r0, [r7, #8]
 8078f60:	f000 f850 	bl	8079004 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8078f64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8078f68:	f7ff fe78 	bl	8078c5c <FLASH_WaitForLastOperation>
 8078f6c:	4603      	mov	r3, r0
 8078f6e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8078f70:	4b11      	ldr	r3, [pc, #68]	; (8078fb8 <HAL_FLASHEx_Erase+0xdc>)
 8078f72:	691b      	ldr	r3, [r3, #16]
 8078f74:	4a10      	ldr	r2, [pc, #64]	; (8078fb8 <HAL_FLASHEx_Erase+0xdc>)
 8078f76:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8078f7a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8078f7c:	7bfb      	ldrb	r3, [r7, #15]
 8078f7e:	2b00      	cmp	r3, #0
 8078f80:	d003      	beq.n	8078f8a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8078f82:	683b      	ldr	r3, [r7, #0]
 8078f84:	68ba      	ldr	r2, [r7, #8]
 8078f86:	601a      	str	r2, [r3, #0]
          break;
 8078f88:	e00a      	b.n	8078fa0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8078f8a:	68bb      	ldr	r3, [r7, #8]
 8078f8c:	3301      	adds	r3, #1
 8078f8e:	60bb      	str	r3, [r7, #8]
 8078f90:	687b      	ldr	r3, [r7, #4]
 8078f92:	68da      	ldr	r2, [r3, #12]
 8078f94:	687b      	ldr	r3, [r7, #4]
 8078f96:	689b      	ldr	r3, [r3, #8]
 8078f98:	4413      	add	r3, r2
 8078f9a:	68ba      	ldr	r2, [r7, #8]
 8078f9c:	429a      	cmp	r2, r3
 8078f9e:	d3da      	bcc.n	8078f56 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8078fa0:	f000 f878 	bl	8079094 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8078fa4:	4b03      	ldr	r3, [pc, #12]	; (8078fb4 <HAL_FLASHEx_Erase+0xd8>)
 8078fa6:	2200      	movs	r2, #0
 8078fa8:	761a      	strb	r2, [r3, #24]

  return status;
 8078faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8078fac:	4618      	mov	r0, r3
 8078fae:	3710      	adds	r7, #16
 8078fb0:	46bd      	mov	sp, r7
 8078fb2:	bd80      	pop	{r7, pc}
 8078fb4:	200000fc 	.word	0x200000fc
 8078fb8:	40023c00 	.word	0x40023c00

08078fbc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8078fbc:	b480      	push	{r7}
 8078fbe:	b083      	sub	sp, #12
 8078fc0:	af00      	add	r7, sp, #0
 8078fc2:	4603      	mov	r3, r0
 8078fc4:	6039      	str	r1, [r7, #0]
 8078fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8078fc8:	4b0d      	ldr	r3, [pc, #52]	; (8079000 <FLASH_MassErase+0x44>)
 8078fca:	691b      	ldr	r3, [r3, #16]
 8078fcc:	4a0c      	ldr	r2, [pc, #48]	; (8079000 <FLASH_MassErase+0x44>)
 8078fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8078fd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8078fd4:	4b0a      	ldr	r3, [pc, #40]	; (8079000 <FLASH_MassErase+0x44>)
 8078fd6:	691b      	ldr	r3, [r3, #16]
 8078fd8:	4a09      	ldr	r2, [pc, #36]	; (8079000 <FLASH_MassErase+0x44>)
 8078fda:	f043 0304 	orr.w	r3, r3, #4
 8078fde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8078fe0:	4b07      	ldr	r3, [pc, #28]	; (8079000 <FLASH_MassErase+0x44>)
 8078fe2:	691a      	ldr	r2, [r3, #16]
 8078fe4:	79fb      	ldrb	r3, [r7, #7]
 8078fe6:	021b      	lsls	r3, r3, #8
 8078fe8:	4313      	orrs	r3, r2
 8078fea:	4a05      	ldr	r2, [pc, #20]	; (8079000 <FLASH_MassErase+0x44>)
 8078fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8078ff0:	6113      	str	r3, [r2, #16]
}
 8078ff2:	bf00      	nop
 8078ff4:	370c      	adds	r7, #12
 8078ff6:	46bd      	mov	sp, r7
 8078ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078ffc:	4770      	bx	lr
 8078ffe:	bf00      	nop
 8079000:	40023c00 	.word	0x40023c00

08079004 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8079004:	b480      	push	{r7}
 8079006:	b085      	sub	sp, #20
 8079008:	af00      	add	r7, sp, #0
 807900a:	6078      	str	r0, [r7, #4]
 807900c:	460b      	mov	r3, r1
 807900e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8079010:	2300      	movs	r3, #0
 8079012:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8079014:	78fb      	ldrb	r3, [r7, #3]
 8079016:	2b00      	cmp	r3, #0
 8079018:	d102      	bne.n	8079020 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 807901a:	2300      	movs	r3, #0
 807901c:	60fb      	str	r3, [r7, #12]
 807901e:	e010      	b.n	8079042 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8079020:	78fb      	ldrb	r3, [r7, #3]
 8079022:	2b01      	cmp	r3, #1
 8079024:	d103      	bne.n	807902e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8079026:	f44f 7380 	mov.w	r3, #256	; 0x100
 807902a:	60fb      	str	r3, [r7, #12]
 807902c:	e009      	b.n	8079042 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 807902e:	78fb      	ldrb	r3, [r7, #3]
 8079030:	2b02      	cmp	r3, #2
 8079032:	d103      	bne.n	807903c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8079034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8079038:	60fb      	str	r3, [r7, #12]
 807903a:	e002      	b.n	8079042 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 807903c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8079040:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8079042:	4b13      	ldr	r3, [pc, #76]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 8079044:	691b      	ldr	r3, [r3, #16]
 8079046:	4a12      	ldr	r2, [pc, #72]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 8079048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 807904c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 807904e:	4b10      	ldr	r3, [pc, #64]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 8079050:	691a      	ldr	r2, [r3, #16]
 8079052:	490f      	ldr	r1, [pc, #60]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 8079054:	68fb      	ldr	r3, [r7, #12]
 8079056:	4313      	orrs	r3, r2
 8079058:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 807905a:	4b0d      	ldr	r3, [pc, #52]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 807905c:	691b      	ldr	r3, [r3, #16]
 807905e:	4a0c      	ldr	r2, [pc, #48]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 8079060:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8079064:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8079066:	4b0a      	ldr	r3, [pc, #40]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 8079068:	691a      	ldr	r2, [r3, #16]
 807906a:	687b      	ldr	r3, [r7, #4]
 807906c:	00db      	lsls	r3, r3, #3
 807906e:	4313      	orrs	r3, r2
 8079070:	4a07      	ldr	r2, [pc, #28]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 8079072:	f043 0302 	orr.w	r3, r3, #2
 8079076:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8079078:	4b05      	ldr	r3, [pc, #20]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 807907a:	691b      	ldr	r3, [r3, #16]
 807907c:	4a04      	ldr	r2, [pc, #16]	; (8079090 <FLASH_Erase_Sector+0x8c>)
 807907e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8079082:	6113      	str	r3, [r2, #16]
}
 8079084:	bf00      	nop
 8079086:	3714      	adds	r7, #20
 8079088:	46bd      	mov	sp, r7
 807908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807908e:	4770      	bx	lr
 8079090:	40023c00 	.word	0x40023c00

08079094 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8079094:	b480      	push	{r7}
 8079096:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8079098:	4b20      	ldr	r3, [pc, #128]	; (807911c <FLASH_FlushCaches+0x88>)
 807909a:	681b      	ldr	r3, [r3, #0]
 807909c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80790a0:	2b00      	cmp	r3, #0
 80790a2:	d017      	beq.n	80790d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80790a4:	4b1d      	ldr	r3, [pc, #116]	; (807911c <FLASH_FlushCaches+0x88>)
 80790a6:	681b      	ldr	r3, [r3, #0]
 80790a8:	4a1c      	ldr	r2, [pc, #112]	; (807911c <FLASH_FlushCaches+0x88>)
 80790aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80790ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80790b0:	4b1a      	ldr	r3, [pc, #104]	; (807911c <FLASH_FlushCaches+0x88>)
 80790b2:	681b      	ldr	r3, [r3, #0]
 80790b4:	4a19      	ldr	r2, [pc, #100]	; (807911c <FLASH_FlushCaches+0x88>)
 80790b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80790ba:	6013      	str	r3, [r2, #0]
 80790bc:	4b17      	ldr	r3, [pc, #92]	; (807911c <FLASH_FlushCaches+0x88>)
 80790be:	681b      	ldr	r3, [r3, #0]
 80790c0:	4a16      	ldr	r2, [pc, #88]	; (807911c <FLASH_FlushCaches+0x88>)
 80790c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80790c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80790c8:	4b14      	ldr	r3, [pc, #80]	; (807911c <FLASH_FlushCaches+0x88>)
 80790ca:	681b      	ldr	r3, [r3, #0]
 80790cc:	4a13      	ldr	r2, [pc, #76]	; (807911c <FLASH_FlushCaches+0x88>)
 80790ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80790d2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80790d4:	4b11      	ldr	r3, [pc, #68]	; (807911c <FLASH_FlushCaches+0x88>)
 80790d6:	681b      	ldr	r3, [r3, #0]
 80790d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80790dc:	2b00      	cmp	r3, #0
 80790de:	d017      	beq.n	8079110 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80790e0:	4b0e      	ldr	r3, [pc, #56]	; (807911c <FLASH_FlushCaches+0x88>)
 80790e2:	681b      	ldr	r3, [r3, #0]
 80790e4:	4a0d      	ldr	r2, [pc, #52]	; (807911c <FLASH_FlushCaches+0x88>)
 80790e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80790ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80790ec:	4b0b      	ldr	r3, [pc, #44]	; (807911c <FLASH_FlushCaches+0x88>)
 80790ee:	681b      	ldr	r3, [r3, #0]
 80790f0:	4a0a      	ldr	r2, [pc, #40]	; (807911c <FLASH_FlushCaches+0x88>)
 80790f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80790f6:	6013      	str	r3, [r2, #0]
 80790f8:	4b08      	ldr	r3, [pc, #32]	; (807911c <FLASH_FlushCaches+0x88>)
 80790fa:	681b      	ldr	r3, [r3, #0]
 80790fc:	4a07      	ldr	r2, [pc, #28]	; (807911c <FLASH_FlushCaches+0x88>)
 80790fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8079102:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8079104:	4b05      	ldr	r3, [pc, #20]	; (807911c <FLASH_FlushCaches+0x88>)
 8079106:	681b      	ldr	r3, [r3, #0]
 8079108:	4a04      	ldr	r2, [pc, #16]	; (807911c <FLASH_FlushCaches+0x88>)
 807910a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 807910e:	6013      	str	r3, [r2, #0]
  }
}
 8079110:	bf00      	nop
 8079112:	46bd      	mov	sp, r7
 8079114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8079118:	4770      	bx	lr
 807911a:	bf00      	nop
 807911c:	40023c00 	.word	0x40023c00

08079120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8079120:	b480      	push	{r7}
 8079122:	b089      	sub	sp, #36	; 0x24
 8079124:	af00      	add	r7, sp, #0
 8079126:	6078      	str	r0, [r7, #4]
 8079128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 807912a:	2300      	movs	r3, #0
 807912c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 807912e:	2300      	movs	r3, #0
 8079130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8079132:	2300      	movs	r3, #0
 8079134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8079136:	2300      	movs	r3, #0
 8079138:	61fb      	str	r3, [r7, #28]
 807913a:	e159      	b.n	80793f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 807913c:	2201      	movs	r2, #1
 807913e:	69fb      	ldr	r3, [r7, #28]
 8079140:	fa02 f303 	lsl.w	r3, r2, r3
 8079144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8079146:	683b      	ldr	r3, [r7, #0]
 8079148:	681b      	ldr	r3, [r3, #0]
 807914a:	697a      	ldr	r2, [r7, #20]
 807914c:	4013      	ands	r3, r2
 807914e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8079150:	693a      	ldr	r2, [r7, #16]
 8079152:	697b      	ldr	r3, [r7, #20]
 8079154:	429a      	cmp	r2, r3
 8079156:	f040 8148 	bne.w	80793ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 807915a:	683b      	ldr	r3, [r7, #0]
 807915c:	685b      	ldr	r3, [r3, #4]
 807915e:	f003 0303 	and.w	r3, r3, #3
 8079162:	2b01      	cmp	r3, #1
 8079164:	d005      	beq.n	8079172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8079166:	683b      	ldr	r3, [r7, #0]
 8079168:	685b      	ldr	r3, [r3, #4]
 807916a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 807916e:	2b02      	cmp	r3, #2
 8079170:	d130      	bne.n	80791d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8079172:	687b      	ldr	r3, [r7, #4]
 8079174:	689b      	ldr	r3, [r3, #8]
 8079176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8079178:	69fb      	ldr	r3, [r7, #28]
 807917a:	005b      	lsls	r3, r3, #1
 807917c:	2203      	movs	r2, #3
 807917e:	fa02 f303 	lsl.w	r3, r2, r3
 8079182:	43db      	mvns	r3, r3
 8079184:	69ba      	ldr	r2, [r7, #24]
 8079186:	4013      	ands	r3, r2
 8079188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 807918a:	683b      	ldr	r3, [r7, #0]
 807918c:	68da      	ldr	r2, [r3, #12]
 807918e:	69fb      	ldr	r3, [r7, #28]
 8079190:	005b      	lsls	r3, r3, #1
 8079192:	fa02 f303 	lsl.w	r3, r2, r3
 8079196:	69ba      	ldr	r2, [r7, #24]
 8079198:	4313      	orrs	r3, r2
 807919a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 807919c:	687b      	ldr	r3, [r7, #4]
 807919e:	69ba      	ldr	r2, [r7, #24]
 80791a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80791a2:	687b      	ldr	r3, [r7, #4]
 80791a4:	685b      	ldr	r3, [r3, #4]
 80791a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80791a8:	2201      	movs	r2, #1
 80791aa:	69fb      	ldr	r3, [r7, #28]
 80791ac:	fa02 f303 	lsl.w	r3, r2, r3
 80791b0:	43db      	mvns	r3, r3
 80791b2:	69ba      	ldr	r2, [r7, #24]
 80791b4:	4013      	ands	r3, r2
 80791b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80791b8:	683b      	ldr	r3, [r7, #0]
 80791ba:	685b      	ldr	r3, [r3, #4]
 80791bc:	091b      	lsrs	r3, r3, #4
 80791be:	f003 0201 	and.w	r2, r3, #1
 80791c2:	69fb      	ldr	r3, [r7, #28]
 80791c4:	fa02 f303 	lsl.w	r3, r2, r3
 80791c8:	69ba      	ldr	r2, [r7, #24]
 80791ca:	4313      	orrs	r3, r2
 80791cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80791ce:	687b      	ldr	r3, [r7, #4]
 80791d0:	69ba      	ldr	r2, [r7, #24]
 80791d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80791d4:	683b      	ldr	r3, [r7, #0]
 80791d6:	685b      	ldr	r3, [r3, #4]
 80791d8:	f003 0303 	and.w	r3, r3, #3
 80791dc:	2b03      	cmp	r3, #3
 80791de:	d017      	beq.n	8079210 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80791e0:	687b      	ldr	r3, [r7, #4]
 80791e2:	68db      	ldr	r3, [r3, #12]
 80791e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80791e6:	69fb      	ldr	r3, [r7, #28]
 80791e8:	005b      	lsls	r3, r3, #1
 80791ea:	2203      	movs	r2, #3
 80791ec:	fa02 f303 	lsl.w	r3, r2, r3
 80791f0:	43db      	mvns	r3, r3
 80791f2:	69ba      	ldr	r2, [r7, #24]
 80791f4:	4013      	ands	r3, r2
 80791f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80791f8:	683b      	ldr	r3, [r7, #0]
 80791fa:	689a      	ldr	r2, [r3, #8]
 80791fc:	69fb      	ldr	r3, [r7, #28]
 80791fe:	005b      	lsls	r3, r3, #1
 8079200:	fa02 f303 	lsl.w	r3, r2, r3
 8079204:	69ba      	ldr	r2, [r7, #24]
 8079206:	4313      	orrs	r3, r2
 8079208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 807920a:	687b      	ldr	r3, [r7, #4]
 807920c:	69ba      	ldr	r2, [r7, #24]
 807920e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8079210:	683b      	ldr	r3, [r7, #0]
 8079212:	685b      	ldr	r3, [r3, #4]
 8079214:	f003 0303 	and.w	r3, r3, #3
 8079218:	2b02      	cmp	r3, #2
 807921a:	d123      	bne.n	8079264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 807921c:	69fb      	ldr	r3, [r7, #28]
 807921e:	08da      	lsrs	r2, r3, #3
 8079220:	687b      	ldr	r3, [r7, #4]
 8079222:	3208      	adds	r2, #8
 8079224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8079228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 807922a:	69fb      	ldr	r3, [r7, #28]
 807922c:	f003 0307 	and.w	r3, r3, #7
 8079230:	009b      	lsls	r3, r3, #2
 8079232:	220f      	movs	r2, #15
 8079234:	fa02 f303 	lsl.w	r3, r2, r3
 8079238:	43db      	mvns	r3, r3
 807923a:	69ba      	ldr	r2, [r7, #24]
 807923c:	4013      	ands	r3, r2
 807923e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8079240:	683b      	ldr	r3, [r7, #0]
 8079242:	691a      	ldr	r2, [r3, #16]
 8079244:	69fb      	ldr	r3, [r7, #28]
 8079246:	f003 0307 	and.w	r3, r3, #7
 807924a:	009b      	lsls	r3, r3, #2
 807924c:	fa02 f303 	lsl.w	r3, r2, r3
 8079250:	69ba      	ldr	r2, [r7, #24]
 8079252:	4313      	orrs	r3, r2
 8079254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8079256:	69fb      	ldr	r3, [r7, #28]
 8079258:	08da      	lsrs	r2, r3, #3
 807925a:	687b      	ldr	r3, [r7, #4]
 807925c:	3208      	adds	r2, #8
 807925e:	69b9      	ldr	r1, [r7, #24]
 8079260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8079264:	687b      	ldr	r3, [r7, #4]
 8079266:	681b      	ldr	r3, [r3, #0]
 8079268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 807926a:	69fb      	ldr	r3, [r7, #28]
 807926c:	005b      	lsls	r3, r3, #1
 807926e:	2203      	movs	r2, #3
 8079270:	fa02 f303 	lsl.w	r3, r2, r3
 8079274:	43db      	mvns	r3, r3
 8079276:	69ba      	ldr	r2, [r7, #24]
 8079278:	4013      	ands	r3, r2
 807927a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 807927c:	683b      	ldr	r3, [r7, #0]
 807927e:	685b      	ldr	r3, [r3, #4]
 8079280:	f003 0203 	and.w	r2, r3, #3
 8079284:	69fb      	ldr	r3, [r7, #28]
 8079286:	005b      	lsls	r3, r3, #1
 8079288:	fa02 f303 	lsl.w	r3, r2, r3
 807928c:	69ba      	ldr	r2, [r7, #24]
 807928e:	4313      	orrs	r3, r2
 8079290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8079292:	687b      	ldr	r3, [r7, #4]
 8079294:	69ba      	ldr	r2, [r7, #24]
 8079296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8079298:	683b      	ldr	r3, [r7, #0]
 807929a:	685b      	ldr	r3, [r3, #4]
 807929c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80792a0:	2b00      	cmp	r3, #0
 80792a2:	f000 80a2 	beq.w	80793ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80792a6:	2300      	movs	r3, #0
 80792a8:	60fb      	str	r3, [r7, #12]
 80792aa:	4b57      	ldr	r3, [pc, #348]	; (8079408 <HAL_GPIO_Init+0x2e8>)
 80792ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80792ae:	4a56      	ldr	r2, [pc, #344]	; (8079408 <HAL_GPIO_Init+0x2e8>)
 80792b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80792b4:	6453      	str	r3, [r2, #68]	; 0x44
 80792b6:	4b54      	ldr	r3, [pc, #336]	; (8079408 <HAL_GPIO_Init+0x2e8>)
 80792b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80792ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80792be:	60fb      	str	r3, [r7, #12]
 80792c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80792c2:	4a52      	ldr	r2, [pc, #328]	; (807940c <HAL_GPIO_Init+0x2ec>)
 80792c4:	69fb      	ldr	r3, [r7, #28]
 80792c6:	089b      	lsrs	r3, r3, #2
 80792c8:	3302      	adds	r3, #2
 80792ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80792ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80792d0:	69fb      	ldr	r3, [r7, #28]
 80792d2:	f003 0303 	and.w	r3, r3, #3
 80792d6:	009b      	lsls	r3, r3, #2
 80792d8:	220f      	movs	r2, #15
 80792da:	fa02 f303 	lsl.w	r3, r2, r3
 80792de:	43db      	mvns	r3, r3
 80792e0:	69ba      	ldr	r2, [r7, #24]
 80792e2:	4013      	ands	r3, r2
 80792e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80792e6:	687b      	ldr	r3, [r7, #4]
 80792e8:	4a49      	ldr	r2, [pc, #292]	; (8079410 <HAL_GPIO_Init+0x2f0>)
 80792ea:	4293      	cmp	r3, r2
 80792ec:	d019      	beq.n	8079322 <HAL_GPIO_Init+0x202>
 80792ee:	687b      	ldr	r3, [r7, #4]
 80792f0:	4a48      	ldr	r2, [pc, #288]	; (8079414 <HAL_GPIO_Init+0x2f4>)
 80792f2:	4293      	cmp	r3, r2
 80792f4:	d013      	beq.n	807931e <HAL_GPIO_Init+0x1fe>
 80792f6:	687b      	ldr	r3, [r7, #4]
 80792f8:	4a47      	ldr	r2, [pc, #284]	; (8079418 <HAL_GPIO_Init+0x2f8>)
 80792fa:	4293      	cmp	r3, r2
 80792fc:	d00d      	beq.n	807931a <HAL_GPIO_Init+0x1fa>
 80792fe:	687b      	ldr	r3, [r7, #4]
 8079300:	4a46      	ldr	r2, [pc, #280]	; (807941c <HAL_GPIO_Init+0x2fc>)
 8079302:	4293      	cmp	r3, r2
 8079304:	d007      	beq.n	8079316 <HAL_GPIO_Init+0x1f6>
 8079306:	687b      	ldr	r3, [r7, #4]
 8079308:	4a45      	ldr	r2, [pc, #276]	; (8079420 <HAL_GPIO_Init+0x300>)
 807930a:	4293      	cmp	r3, r2
 807930c:	d101      	bne.n	8079312 <HAL_GPIO_Init+0x1f2>
 807930e:	2304      	movs	r3, #4
 8079310:	e008      	b.n	8079324 <HAL_GPIO_Init+0x204>
 8079312:	2307      	movs	r3, #7
 8079314:	e006      	b.n	8079324 <HAL_GPIO_Init+0x204>
 8079316:	2303      	movs	r3, #3
 8079318:	e004      	b.n	8079324 <HAL_GPIO_Init+0x204>
 807931a:	2302      	movs	r3, #2
 807931c:	e002      	b.n	8079324 <HAL_GPIO_Init+0x204>
 807931e:	2301      	movs	r3, #1
 8079320:	e000      	b.n	8079324 <HAL_GPIO_Init+0x204>
 8079322:	2300      	movs	r3, #0
 8079324:	69fa      	ldr	r2, [r7, #28]
 8079326:	f002 0203 	and.w	r2, r2, #3
 807932a:	0092      	lsls	r2, r2, #2
 807932c:	4093      	lsls	r3, r2
 807932e:	69ba      	ldr	r2, [r7, #24]
 8079330:	4313      	orrs	r3, r2
 8079332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8079334:	4935      	ldr	r1, [pc, #212]	; (807940c <HAL_GPIO_Init+0x2ec>)
 8079336:	69fb      	ldr	r3, [r7, #28]
 8079338:	089b      	lsrs	r3, r3, #2
 807933a:	3302      	adds	r3, #2
 807933c:	69ba      	ldr	r2, [r7, #24]
 807933e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8079342:	4b38      	ldr	r3, [pc, #224]	; (8079424 <HAL_GPIO_Init+0x304>)
 8079344:	681b      	ldr	r3, [r3, #0]
 8079346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8079348:	693b      	ldr	r3, [r7, #16]
 807934a:	43db      	mvns	r3, r3
 807934c:	69ba      	ldr	r2, [r7, #24]
 807934e:	4013      	ands	r3, r2
 8079350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8079352:	683b      	ldr	r3, [r7, #0]
 8079354:	685b      	ldr	r3, [r3, #4]
 8079356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 807935a:	2b00      	cmp	r3, #0
 807935c:	d003      	beq.n	8079366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 807935e:	69ba      	ldr	r2, [r7, #24]
 8079360:	693b      	ldr	r3, [r7, #16]
 8079362:	4313      	orrs	r3, r2
 8079364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8079366:	4a2f      	ldr	r2, [pc, #188]	; (8079424 <HAL_GPIO_Init+0x304>)
 8079368:	69bb      	ldr	r3, [r7, #24]
 807936a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 807936c:	4b2d      	ldr	r3, [pc, #180]	; (8079424 <HAL_GPIO_Init+0x304>)
 807936e:	685b      	ldr	r3, [r3, #4]
 8079370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8079372:	693b      	ldr	r3, [r7, #16]
 8079374:	43db      	mvns	r3, r3
 8079376:	69ba      	ldr	r2, [r7, #24]
 8079378:	4013      	ands	r3, r2
 807937a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 807937c:	683b      	ldr	r3, [r7, #0]
 807937e:	685b      	ldr	r3, [r3, #4]
 8079380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8079384:	2b00      	cmp	r3, #0
 8079386:	d003      	beq.n	8079390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8079388:	69ba      	ldr	r2, [r7, #24]
 807938a:	693b      	ldr	r3, [r7, #16]
 807938c:	4313      	orrs	r3, r2
 807938e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8079390:	4a24      	ldr	r2, [pc, #144]	; (8079424 <HAL_GPIO_Init+0x304>)
 8079392:	69bb      	ldr	r3, [r7, #24]
 8079394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8079396:	4b23      	ldr	r3, [pc, #140]	; (8079424 <HAL_GPIO_Init+0x304>)
 8079398:	689b      	ldr	r3, [r3, #8]
 807939a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 807939c:	693b      	ldr	r3, [r7, #16]
 807939e:	43db      	mvns	r3, r3
 80793a0:	69ba      	ldr	r2, [r7, #24]
 80793a2:	4013      	ands	r3, r2
 80793a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80793a6:	683b      	ldr	r3, [r7, #0]
 80793a8:	685b      	ldr	r3, [r3, #4]
 80793aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80793ae:	2b00      	cmp	r3, #0
 80793b0:	d003      	beq.n	80793ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80793b2:	69ba      	ldr	r2, [r7, #24]
 80793b4:	693b      	ldr	r3, [r7, #16]
 80793b6:	4313      	orrs	r3, r2
 80793b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80793ba:	4a1a      	ldr	r2, [pc, #104]	; (8079424 <HAL_GPIO_Init+0x304>)
 80793bc:	69bb      	ldr	r3, [r7, #24]
 80793be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80793c0:	4b18      	ldr	r3, [pc, #96]	; (8079424 <HAL_GPIO_Init+0x304>)
 80793c2:	68db      	ldr	r3, [r3, #12]
 80793c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80793c6:	693b      	ldr	r3, [r7, #16]
 80793c8:	43db      	mvns	r3, r3
 80793ca:	69ba      	ldr	r2, [r7, #24]
 80793cc:	4013      	ands	r3, r2
 80793ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80793d0:	683b      	ldr	r3, [r7, #0]
 80793d2:	685b      	ldr	r3, [r3, #4]
 80793d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80793d8:	2b00      	cmp	r3, #0
 80793da:	d003      	beq.n	80793e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80793dc:	69ba      	ldr	r2, [r7, #24]
 80793de:	693b      	ldr	r3, [r7, #16]
 80793e0:	4313      	orrs	r3, r2
 80793e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80793e4:	4a0f      	ldr	r2, [pc, #60]	; (8079424 <HAL_GPIO_Init+0x304>)
 80793e6:	69bb      	ldr	r3, [r7, #24]
 80793e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80793ea:	69fb      	ldr	r3, [r7, #28]
 80793ec:	3301      	adds	r3, #1
 80793ee:	61fb      	str	r3, [r7, #28]
 80793f0:	69fb      	ldr	r3, [r7, #28]
 80793f2:	2b0f      	cmp	r3, #15
 80793f4:	f67f aea2 	bls.w	807913c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80793f8:	bf00      	nop
 80793fa:	bf00      	nop
 80793fc:	3724      	adds	r7, #36	; 0x24
 80793fe:	46bd      	mov	sp, r7
 8079400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8079404:	4770      	bx	lr
 8079406:	bf00      	nop
 8079408:	40023800 	.word	0x40023800
 807940c:	40013800 	.word	0x40013800
 8079410:	40020000 	.word	0x40020000
 8079414:	40020400 	.word	0x40020400
 8079418:	40020800 	.word	0x40020800
 807941c:	40020c00 	.word	0x40020c00
 8079420:	40021000 	.word	0x40021000
 8079424:	40013c00 	.word	0x40013c00

08079428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8079428:	b480      	push	{r7}
 807942a:	b083      	sub	sp, #12
 807942c:	af00      	add	r7, sp, #0
 807942e:	6078      	str	r0, [r7, #4]
 8079430:	460b      	mov	r3, r1
 8079432:	807b      	strh	r3, [r7, #2]
 8079434:	4613      	mov	r3, r2
 8079436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8079438:	787b      	ldrb	r3, [r7, #1]
 807943a:	2b00      	cmp	r3, #0
 807943c:	d003      	beq.n	8079446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 807943e:	887a      	ldrh	r2, [r7, #2]
 8079440:	687b      	ldr	r3, [r7, #4]
 8079442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8079444:	e003      	b.n	807944e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8079446:	887b      	ldrh	r3, [r7, #2]
 8079448:	041a      	lsls	r2, r3, #16
 807944a:	687b      	ldr	r3, [r7, #4]
 807944c:	619a      	str	r2, [r3, #24]
}
 807944e:	bf00      	nop
 8079450:	370c      	adds	r7, #12
 8079452:	46bd      	mov	sp, r7
 8079454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8079458:	4770      	bx	lr

0807945a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 807945a:	b480      	push	{r7}
 807945c:	b085      	sub	sp, #20
 807945e:	af00      	add	r7, sp, #0
 8079460:	6078      	str	r0, [r7, #4]
 8079462:	460b      	mov	r3, r1
 8079464:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8079466:	687b      	ldr	r3, [r7, #4]
 8079468:	695b      	ldr	r3, [r3, #20]
 807946a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 807946c:	887a      	ldrh	r2, [r7, #2]
 807946e:	68fb      	ldr	r3, [r7, #12]
 8079470:	4013      	ands	r3, r2
 8079472:	041a      	lsls	r2, r3, #16
 8079474:	68fb      	ldr	r3, [r7, #12]
 8079476:	43d9      	mvns	r1, r3
 8079478:	887b      	ldrh	r3, [r7, #2]
 807947a:	400b      	ands	r3, r1
 807947c:	431a      	orrs	r2, r3
 807947e:	687b      	ldr	r3, [r7, #4]
 8079480:	619a      	str	r2, [r3, #24]
}
 8079482:	bf00      	nop
 8079484:	3714      	adds	r7, #20
 8079486:	46bd      	mov	sp, r7
 8079488:	f85d 7b04 	ldr.w	r7, [sp], #4
 807948c:	4770      	bx	lr

0807948e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 807948e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8079490:	b08f      	sub	sp, #60	; 0x3c
 8079492:	af0a      	add	r7, sp, #40	; 0x28
 8079494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8079496:	687b      	ldr	r3, [r7, #4]
 8079498:	2b00      	cmp	r3, #0
 807949a:	d101      	bne.n	80794a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 807949c:	2301      	movs	r3, #1
 807949e:	e10f      	b.n	80796c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80794a0:	687b      	ldr	r3, [r7, #4]
 80794a2:	681b      	ldr	r3, [r3, #0]
 80794a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80794a6:	687b      	ldr	r3, [r7, #4]
 80794a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80794ac:	b2db      	uxtb	r3, r3
 80794ae:	2b00      	cmp	r3, #0
 80794b0:	d106      	bne.n	80794c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80794b2:	687b      	ldr	r3, [r7, #4]
 80794b4:	2200      	movs	r2, #0
 80794b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80794ba:	6878      	ldr	r0, [r7, #4]
 80794bc:	f005 fa4e 	bl	807e95c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80794c0:	687b      	ldr	r3, [r7, #4]
 80794c2:	2203      	movs	r2, #3
 80794c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80794c8:	68bb      	ldr	r3, [r7, #8]
 80794ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80794cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80794d0:	2b00      	cmp	r3, #0
 80794d2:	d102      	bne.n	80794da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80794d4:	687b      	ldr	r3, [r7, #4]
 80794d6:	2200      	movs	r2, #0
 80794d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80794da:	687b      	ldr	r3, [r7, #4]
 80794dc:	681b      	ldr	r3, [r3, #0]
 80794de:	4618      	mov	r0, r3
 80794e0:	f001 fe9b 	bl	807b21a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80794e4:	687b      	ldr	r3, [r7, #4]
 80794e6:	681b      	ldr	r3, [r3, #0]
 80794e8:	603b      	str	r3, [r7, #0]
 80794ea:	687e      	ldr	r6, [r7, #4]
 80794ec:	466d      	mov	r5, sp
 80794ee:	f106 0410 	add.w	r4, r6, #16
 80794f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80794f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80794f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80794f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80794fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80794fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8079502:	1d33      	adds	r3, r6, #4
 8079504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8079506:	6838      	ldr	r0, [r7, #0]
 8079508:	f001 fd73 	bl	807aff2 <USB_CoreInit>
 807950c:	4603      	mov	r3, r0
 807950e:	2b00      	cmp	r3, #0
 8079510:	d005      	beq.n	807951e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8079512:	687b      	ldr	r3, [r7, #4]
 8079514:	2202      	movs	r2, #2
 8079516:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 807951a:	2301      	movs	r3, #1
 807951c:	e0d0      	b.n	80796c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 807951e:	687b      	ldr	r3, [r7, #4]
 8079520:	681b      	ldr	r3, [r3, #0]
 8079522:	2100      	movs	r1, #0
 8079524:	4618      	mov	r0, r3
 8079526:	f001 fe89 	bl	807b23c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807952a:	2300      	movs	r3, #0
 807952c:	73fb      	strb	r3, [r7, #15]
 807952e:	e04a      	b.n	80795c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8079530:	7bfa      	ldrb	r2, [r7, #15]
 8079532:	6879      	ldr	r1, [r7, #4]
 8079534:	4613      	mov	r3, r2
 8079536:	00db      	lsls	r3, r3, #3
 8079538:	1a9b      	subs	r3, r3, r2
 807953a:	009b      	lsls	r3, r3, #2
 807953c:	440b      	add	r3, r1
 807953e:	333d      	adds	r3, #61	; 0x3d
 8079540:	2201      	movs	r2, #1
 8079542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8079544:	7bfa      	ldrb	r2, [r7, #15]
 8079546:	6879      	ldr	r1, [r7, #4]
 8079548:	4613      	mov	r3, r2
 807954a:	00db      	lsls	r3, r3, #3
 807954c:	1a9b      	subs	r3, r3, r2
 807954e:	009b      	lsls	r3, r3, #2
 8079550:	440b      	add	r3, r1
 8079552:	333c      	adds	r3, #60	; 0x3c
 8079554:	7bfa      	ldrb	r2, [r7, #15]
 8079556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8079558:	7bfa      	ldrb	r2, [r7, #15]
 807955a:	7bfb      	ldrb	r3, [r7, #15]
 807955c:	b298      	uxth	r0, r3
 807955e:	6879      	ldr	r1, [r7, #4]
 8079560:	4613      	mov	r3, r2
 8079562:	00db      	lsls	r3, r3, #3
 8079564:	1a9b      	subs	r3, r3, r2
 8079566:	009b      	lsls	r3, r3, #2
 8079568:	440b      	add	r3, r1
 807956a:	3342      	adds	r3, #66	; 0x42
 807956c:	4602      	mov	r2, r0
 807956e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8079570:	7bfa      	ldrb	r2, [r7, #15]
 8079572:	6879      	ldr	r1, [r7, #4]
 8079574:	4613      	mov	r3, r2
 8079576:	00db      	lsls	r3, r3, #3
 8079578:	1a9b      	subs	r3, r3, r2
 807957a:	009b      	lsls	r3, r3, #2
 807957c:	440b      	add	r3, r1
 807957e:	333f      	adds	r3, #63	; 0x3f
 8079580:	2200      	movs	r2, #0
 8079582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8079584:	7bfa      	ldrb	r2, [r7, #15]
 8079586:	6879      	ldr	r1, [r7, #4]
 8079588:	4613      	mov	r3, r2
 807958a:	00db      	lsls	r3, r3, #3
 807958c:	1a9b      	subs	r3, r3, r2
 807958e:	009b      	lsls	r3, r3, #2
 8079590:	440b      	add	r3, r1
 8079592:	3344      	adds	r3, #68	; 0x44
 8079594:	2200      	movs	r2, #0
 8079596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8079598:	7bfa      	ldrb	r2, [r7, #15]
 807959a:	6879      	ldr	r1, [r7, #4]
 807959c:	4613      	mov	r3, r2
 807959e:	00db      	lsls	r3, r3, #3
 80795a0:	1a9b      	subs	r3, r3, r2
 80795a2:	009b      	lsls	r3, r3, #2
 80795a4:	440b      	add	r3, r1
 80795a6:	3348      	adds	r3, #72	; 0x48
 80795a8:	2200      	movs	r2, #0
 80795aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80795ac:	7bfa      	ldrb	r2, [r7, #15]
 80795ae:	6879      	ldr	r1, [r7, #4]
 80795b0:	4613      	mov	r3, r2
 80795b2:	00db      	lsls	r3, r3, #3
 80795b4:	1a9b      	subs	r3, r3, r2
 80795b6:	009b      	lsls	r3, r3, #2
 80795b8:	440b      	add	r3, r1
 80795ba:	3350      	adds	r3, #80	; 0x50
 80795bc:	2200      	movs	r2, #0
 80795be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80795c0:	7bfb      	ldrb	r3, [r7, #15]
 80795c2:	3301      	adds	r3, #1
 80795c4:	73fb      	strb	r3, [r7, #15]
 80795c6:	7bfa      	ldrb	r2, [r7, #15]
 80795c8:	687b      	ldr	r3, [r7, #4]
 80795ca:	685b      	ldr	r3, [r3, #4]
 80795cc:	429a      	cmp	r2, r3
 80795ce:	d3af      	bcc.n	8079530 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80795d0:	2300      	movs	r3, #0
 80795d2:	73fb      	strb	r3, [r7, #15]
 80795d4:	e044      	b.n	8079660 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80795d6:	7bfa      	ldrb	r2, [r7, #15]
 80795d8:	6879      	ldr	r1, [r7, #4]
 80795da:	4613      	mov	r3, r2
 80795dc:	00db      	lsls	r3, r3, #3
 80795de:	1a9b      	subs	r3, r3, r2
 80795e0:	009b      	lsls	r3, r3, #2
 80795e2:	440b      	add	r3, r1
 80795e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80795e8:	2200      	movs	r2, #0
 80795ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80795ec:	7bfa      	ldrb	r2, [r7, #15]
 80795ee:	6879      	ldr	r1, [r7, #4]
 80795f0:	4613      	mov	r3, r2
 80795f2:	00db      	lsls	r3, r3, #3
 80795f4:	1a9b      	subs	r3, r3, r2
 80795f6:	009b      	lsls	r3, r3, #2
 80795f8:	440b      	add	r3, r1
 80795fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80795fe:	7bfa      	ldrb	r2, [r7, #15]
 8079600:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8079602:	7bfa      	ldrb	r2, [r7, #15]
 8079604:	6879      	ldr	r1, [r7, #4]
 8079606:	4613      	mov	r3, r2
 8079608:	00db      	lsls	r3, r3, #3
 807960a:	1a9b      	subs	r3, r3, r2
 807960c:	009b      	lsls	r3, r3, #2
 807960e:	440b      	add	r3, r1
 8079610:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8079614:	2200      	movs	r2, #0
 8079616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8079618:	7bfa      	ldrb	r2, [r7, #15]
 807961a:	6879      	ldr	r1, [r7, #4]
 807961c:	4613      	mov	r3, r2
 807961e:	00db      	lsls	r3, r3, #3
 8079620:	1a9b      	subs	r3, r3, r2
 8079622:	009b      	lsls	r3, r3, #2
 8079624:	440b      	add	r3, r1
 8079626:	f503 7301 	add.w	r3, r3, #516	; 0x204
 807962a:	2200      	movs	r2, #0
 807962c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 807962e:	7bfa      	ldrb	r2, [r7, #15]
 8079630:	6879      	ldr	r1, [r7, #4]
 8079632:	4613      	mov	r3, r2
 8079634:	00db      	lsls	r3, r3, #3
 8079636:	1a9b      	subs	r3, r3, r2
 8079638:	009b      	lsls	r3, r3, #2
 807963a:	440b      	add	r3, r1
 807963c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8079640:	2200      	movs	r2, #0
 8079642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8079644:	7bfa      	ldrb	r2, [r7, #15]
 8079646:	6879      	ldr	r1, [r7, #4]
 8079648:	4613      	mov	r3, r2
 807964a:	00db      	lsls	r3, r3, #3
 807964c:	1a9b      	subs	r3, r3, r2
 807964e:	009b      	lsls	r3, r3, #2
 8079650:	440b      	add	r3, r1
 8079652:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8079656:	2200      	movs	r2, #0
 8079658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807965a:	7bfb      	ldrb	r3, [r7, #15]
 807965c:	3301      	adds	r3, #1
 807965e:	73fb      	strb	r3, [r7, #15]
 8079660:	7bfa      	ldrb	r2, [r7, #15]
 8079662:	687b      	ldr	r3, [r7, #4]
 8079664:	685b      	ldr	r3, [r3, #4]
 8079666:	429a      	cmp	r2, r3
 8079668:	d3b5      	bcc.n	80795d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 807966a:	687b      	ldr	r3, [r7, #4]
 807966c:	681b      	ldr	r3, [r3, #0]
 807966e:	603b      	str	r3, [r7, #0]
 8079670:	687e      	ldr	r6, [r7, #4]
 8079672:	466d      	mov	r5, sp
 8079674:	f106 0410 	add.w	r4, r6, #16
 8079678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 807967a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 807967c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 807967e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8079680:	e894 0003 	ldmia.w	r4, {r0, r1}
 8079684:	e885 0003 	stmia.w	r5, {r0, r1}
 8079688:	1d33      	adds	r3, r6, #4
 807968a:	cb0e      	ldmia	r3, {r1, r2, r3}
 807968c:	6838      	ldr	r0, [r7, #0]
 807968e:	f001 fdff 	bl	807b290 <USB_DevInit>
 8079692:	4603      	mov	r3, r0
 8079694:	2b00      	cmp	r3, #0
 8079696:	d005      	beq.n	80796a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8079698:	687b      	ldr	r3, [r7, #4]
 807969a:	2202      	movs	r2, #2
 807969c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80796a0:	2301      	movs	r3, #1
 80796a2:	e00d      	b.n	80796c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80796a4:	687b      	ldr	r3, [r7, #4]
 80796a6:	2200      	movs	r2, #0
 80796a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80796ac:	687b      	ldr	r3, [r7, #4]
 80796ae:	2201      	movs	r2, #1
 80796b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80796b4:	687b      	ldr	r3, [r7, #4]
 80796b6:	681b      	ldr	r3, [r3, #0]
 80796b8:	4618      	mov	r0, r3
 80796ba:	f002 fd6b 	bl	807c194 <USB_DevDisconnect>

  return HAL_OK;
 80796be:	2300      	movs	r3, #0
}
 80796c0:	4618      	mov	r0, r3
 80796c2:	3714      	adds	r7, #20
 80796c4:	46bd      	mov	sp, r7
 80796c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080796c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80796c8:	b580      	push	{r7, lr}
 80796ca:	b084      	sub	sp, #16
 80796cc:	af00      	add	r7, sp, #0
 80796ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80796d0:	687b      	ldr	r3, [r7, #4]
 80796d2:	681b      	ldr	r3, [r3, #0]
 80796d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80796d6:	687b      	ldr	r3, [r7, #4]
 80796d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80796dc:	2b01      	cmp	r3, #1
 80796de:	d101      	bne.n	80796e4 <HAL_PCD_Start+0x1c>
 80796e0:	2302      	movs	r3, #2
 80796e2:	e020      	b.n	8079726 <HAL_PCD_Start+0x5e>
 80796e4:	687b      	ldr	r3, [r7, #4]
 80796e6:	2201      	movs	r2, #1
 80796e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80796ec:	687b      	ldr	r3, [r7, #4]
 80796ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80796f0:	2b01      	cmp	r3, #1
 80796f2:	d109      	bne.n	8079708 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80796f4:	687b      	ldr	r3, [r7, #4]
 80796f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80796f8:	2b01      	cmp	r3, #1
 80796fa:	d005      	beq.n	8079708 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80796fc:	68fb      	ldr	r3, [r7, #12]
 80796fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8079700:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8079704:	68fb      	ldr	r3, [r7, #12]
 8079706:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8079708:	687b      	ldr	r3, [r7, #4]
 807970a:	681b      	ldr	r3, [r3, #0]
 807970c:	4618      	mov	r0, r3
 807970e:	f001 fd73 	bl	807b1f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8079712:	687b      	ldr	r3, [r7, #4]
 8079714:	681b      	ldr	r3, [r3, #0]
 8079716:	4618      	mov	r0, r3
 8079718:	f002 fd1b 	bl	807c152 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 807971c:	687b      	ldr	r3, [r7, #4]
 807971e:	2200      	movs	r2, #0
 8079720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8079724:	2300      	movs	r3, #0
}
 8079726:	4618      	mov	r0, r3
 8079728:	3710      	adds	r7, #16
 807972a:	46bd      	mov	sp, r7
 807972c:	bd80      	pop	{r7, pc}

0807972e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 807972e:	b580      	push	{r7, lr}
 8079730:	b084      	sub	sp, #16
 8079732:	af00      	add	r7, sp, #0
 8079734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8079736:	687b      	ldr	r3, [r7, #4]
 8079738:	681b      	ldr	r3, [r3, #0]
 807973a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 807973c:	687b      	ldr	r3, [r7, #4]
 807973e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8079742:	2b01      	cmp	r3, #1
 8079744:	d101      	bne.n	807974a <HAL_PCD_Stop+0x1c>
 8079746:	2302      	movs	r3, #2
 8079748:	e026      	b.n	8079798 <HAL_PCD_Stop+0x6a>
 807974a:	687b      	ldr	r3, [r7, #4]
 807974c:	2201      	movs	r2, #1
 807974e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8079752:	687b      	ldr	r3, [r7, #4]
 8079754:	681b      	ldr	r3, [r3, #0]
 8079756:	4618      	mov	r0, r3
 8079758:	f001 fd5f 	bl	807b21a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 807975c:	687b      	ldr	r3, [r7, #4]
 807975e:	681b      	ldr	r3, [r3, #0]
 8079760:	4618      	mov	r0, r3
 8079762:	f002 fd17 	bl	807c194 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8079766:	687b      	ldr	r3, [r7, #4]
 8079768:	681b      	ldr	r3, [r3, #0]
 807976a:	2110      	movs	r1, #16
 807976c:	4618      	mov	r0, r3
 807976e:	f001 fef3 	bl	807b558 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8079772:	687b      	ldr	r3, [r7, #4]
 8079774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8079776:	2b01      	cmp	r3, #1
 8079778:	d109      	bne.n	807978e <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 807977a:	687b      	ldr	r3, [r7, #4]
 807977c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 807977e:	2b01      	cmp	r3, #1
 8079780:	d005      	beq.n	807978e <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8079782:	68fb      	ldr	r3, [r7, #12]
 8079784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8079786:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 807978a:	68fb      	ldr	r3, [r7, #12]
 807978c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 807978e:	687b      	ldr	r3, [r7, #4]
 8079790:	2200      	movs	r2, #0
 8079792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8079796:	2300      	movs	r3, #0
}
 8079798:	4618      	mov	r0, r3
 807979a:	3710      	adds	r7, #16
 807979c:	46bd      	mov	sp, r7
 807979e:	bd80      	pop	{r7, pc}

080797a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80797a0:	b590      	push	{r4, r7, lr}
 80797a2:	b08d      	sub	sp, #52	; 0x34
 80797a4:	af00      	add	r7, sp, #0
 80797a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80797a8:	687b      	ldr	r3, [r7, #4]
 80797aa:	681b      	ldr	r3, [r3, #0]
 80797ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80797ae:	6a3b      	ldr	r3, [r7, #32]
 80797b0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80797b2:	687b      	ldr	r3, [r7, #4]
 80797b4:	681b      	ldr	r3, [r3, #0]
 80797b6:	4618      	mov	r0, r3
 80797b8:	f002 fda0 	bl	807c2fc <USB_GetMode>
 80797bc:	4603      	mov	r3, r0
 80797be:	2b00      	cmp	r3, #0
 80797c0:	f040 839d 	bne.w	8079efe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80797c4:	687b      	ldr	r3, [r7, #4]
 80797c6:	681b      	ldr	r3, [r3, #0]
 80797c8:	4618      	mov	r0, r3
 80797ca:	f002 fd04 	bl	807c1d6 <USB_ReadInterrupts>
 80797ce:	4603      	mov	r3, r0
 80797d0:	2b00      	cmp	r3, #0
 80797d2:	f000 8393 	beq.w	8079efc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80797d6:	687b      	ldr	r3, [r7, #4]
 80797d8:	681b      	ldr	r3, [r3, #0]
 80797da:	4618      	mov	r0, r3
 80797dc:	f002 fcfb 	bl	807c1d6 <USB_ReadInterrupts>
 80797e0:	4603      	mov	r3, r0
 80797e2:	f003 0302 	and.w	r3, r3, #2
 80797e6:	2b02      	cmp	r3, #2
 80797e8:	d107      	bne.n	80797fa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80797ea:	687b      	ldr	r3, [r7, #4]
 80797ec:	681b      	ldr	r3, [r3, #0]
 80797ee:	695a      	ldr	r2, [r3, #20]
 80797f0:	687b      	ldr	r3, [r7, #4]
 80797f2:	681b      	ldr	r3, [r3, #0]
 80797f4:	f002 0202 	and.w	r2, r2, #2
 80797f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80797fa:	687b      	ldr	r3, [r7, #4]
 80797fc:	681b      	ldr	r3, [r3, #0]
 80797fe:	4618      	mov	r0, r3
 8079800:	f002 fce9 	bl	807c1d6 <USB_ReadInterrupts>
 8079804:	4603      	mov	r3, r0
 8079806:	f003 0310 	and.w	r3, r3, #16
 807980a:	2b10      	cmp	r3, #16
 807980c:	d161      	bne.n	80798d2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 807980e:	687b      	ldr	r3, [r7, #4]
 8079810:	681b      	ldr	r3, [r3, #0]
 8079812:	699a      	ldr	r2, [r3, #24]
 8079814:	687b      	ldr	r3, [r7, #4]
 8079816:	681b      	ldr	r3, [r3, #0]
 8079818:	f022 0210 	bic.w	r2, r2, #16
 807981c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 807981e:	6a3b      	ldr	r3, [r7, #32]
 8079820:	6a1b      	ldr	r3, [r3, #32]
 8079822:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8079824:	69bb      	ldr	r3, [r7, #24]
 8079826:	f003 020f 	and.w	r2, r3, #15
 807982a:	4613      	mov	r3, r2
 807982c:	00db      	lsls	r3, r3, #3
 807982e:	1a9b      	subs	r3, r3, r2
 8079830:	009b      	lsls	r3, r3, #2
 8079832:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8079836:	687a      	ldr	r2, [r7, #4]
 8079838:	4413      	add	r3, r2
 807983a:	3304      	adds	r3, #4
 807983c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 807983e:	69bb      	ldr	r3, [r7, #24]
 8079840:	0c5b      	lsrs	r3, r3, #17
 8079842:	f003 030f 	and.w	r3, r3, #15
 8079846:	2b02      	cmp	r3, #2
 8079848:	d124      	bne.n	8079894 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 807984a:	69ba      	ldr	r2, [r7, #24]
 807984c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8079850:	4013      	ands	r3, r2
 8079852:	2b00      	cmp	r3, #0
 8079854:	d035      	beq.n	80798c2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8079856:	697b      	ldr	r3, [r7, #20]
 8079858:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 807985a:	69bb      	ldr	r3, [r7, #24]
 807985c:	091b      	lsrs	r3, r3, #4
 807985e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8079860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8079864:	b29b      	uxth	r3, r3
 8079866:	461a      	mov	r2, r3
 8079868:	6a38      	ldr	r0, [r7, #32]
 807986a:	f002 fb4f 	bl	807bf0c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 807986e:	697b      	ldr	r3, [r7, #20]
 8079870:	68da      	ldr	r2, [r3, #12]
 8079872:	69bb      	ldr	r3, [r7, #24]
 8079874:	091b      	lsrs	r3, r3, #4
 8079876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 807987a:	441a      	add	r2, r3
 807987c:	697b      	ldr	r3, [r7, #20]
 807987e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8079880:	697b      	ldr	r3, [r7, #20]
 8079882:	699a      	ldr	r2, [r3, #24]
 8079884:	69bb      	ldr	r3, [r7, #24]
 8079886:	091b      	lsrs	r3, r3, #4
 8079888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 807988c:	441a      	add	r2, r3
 807988e:	697b      	ldr	r3, [r7, #20]
 8079890:	619a      	str	r2, [r3, #24]
 8079892:	e016      	b.n	80798c2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8079894:	69bb      	ldr	r3, [r7, #24]
 8079896:	0c5b      	lsrs	r3, r3, #17
 8079898:	f003 030f 	and.w	r3, r3, #15
 807989c:	2b06      	cmp	r3, #6
 807989e:	d110      	bne.n	80798c2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80798a0:	687b      	ldr	r3, [r7, #4]
 80798a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80798a6:	2208      	movs	r2, #8
 80798a8:	4619      	mov	r1, r3
 80798aa:	6a38      	ldr	r0, [r7, #32]
 80798ac:	f002 fb2e 	bl	807bf0c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80798b0:	697b      	ldr	r3, [r7, #20]
 80798b2:	699a      	ldr	r2, [r3, #24]
 80798b4:	69bb      	ldr	r3, [r7, #24]
 80798b6:	091b      	lsrs	r3, r3, #4
 80798b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80798bc:	441a      	add	r2, r3
 80798be:	697b      	ldr	r3, [r7, #20]
 80798c0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80798c2:	687b      	ldr	r3, [r7, #4]
 80798c4:	681b      	ldr	r3, [r3, #0]
 80798c6:	699a      	ldr	r2, [r3, #24]
 80798c8:	687b      	ldr	r3, [r7, #4]
 80798ca:	681b      	ldr	r3, [r3, #0]
 80798cc:	f042 0210 	orr.w	r2, r2, #16
 80798d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80798d2:	687b      	ldr	r3, [r7, #4]
 80798d4:	681b      	ldr	r3, [r3, #0]
 80798d6:	4618      	mov	r0, r3
 80798d8:	f002 fc7d 	bl	807c1d6 <USB_ReadInterrupts>
 80798dc:	4603      	mov	r3, r0
 80798de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80798e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80798e6:	d16e      	bne.n	80799c6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80798e8:	2300      	movs	r3, #0
 80798ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80798ec:	687b      	ldr	r3, [r7, #4]
 80798ee:	681b      	ldr	r3, [r3, #0]
 80798f0:	4618      	mov	r0, r3
 80798f2:	f002 fc83 	bl	807c1fc <USB_ReadDevAllOutEpInterrupt>
 80798f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80798f8:	e062      	b.n	80799c0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80798fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80798fc:	f003 0301 	and.w	r3, r3, #1
 8079900:	2b00      	cmp	r3, #0
 8079902:	d057      	beq.n	80799b4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8079904:	687b      	ldr	r3, [r7, #4]
 8079906:	681b      	ldr	r3, [r3, #0]
 8079908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807990a:	b2d2      	uxtb	r2, r2
 807990c:	4611      	mov	r1, r2
 807990e:	4618      	mov	r0, r3
 8079910:	f002 fca8 	bl	807c264 <USB_ReadDevOutEPInterrupt>
 8079914:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8079916:	693b      	ldr	r3, [r7, #16]
 8079918:	f003 0301 	and.w	r3, r3, #1
 807991c:	2b00      	cmp	r3, #0
 807991e:	d00c      	beq.n	807993a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8079920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079922:	015a      	lsls	r2, r3, #5
 8079924:	69fb      	ldr	r3, [r7, #28]
 8079926:	4413      	add	r3, r2
 8079928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807992c:	461a      	mov	r2, r3
 807992e:	2301      	movs	r3, #1
 8079930:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8079932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8079934:	6878      	ldr	r0, [r7, #4]
 8079936:	f000 fd4f 	bl	807a3d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 807993a:	693b      	ldr	r3, [r7, #16]
 807993c:	f003 0308 	and.w	r3, r3, #8
 8079940:	2b00      	cmp	r3, #0
 8079942:	d00c      	beq.n	807995e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8079944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079946:	015a      	lsls	r2, r3, #5
 8079948:	69fb      	ldr	r3, [r7, #28]
 807994a:	4413      	add	r3, r2
 807994c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079950:	461a      	mov	r2, r3
 8079952:	2308      	movs	r3, #8
 8079954:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8079956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8079958:	6878      	ldr	r0, [r7, #4]
 807995a:	f000 fe49 	bl	807a5f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 807995e:	693b      	ldr	r3, [r7, #16]
 8079960:	f003 0310 	and.w	r3, r3, #16
 8079964:	2b00      	cmp	r3, #0
 8079966:	d008      	beq.n	807997a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8079968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807996a:	015a      	lsls	r2, r3, #5
 807996c:	69fb      	ldr	r3, [r7, #28]
 807996e:	4413      	add	r3, r2
 8079970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079974:	461a      	mov	r2, r3
 8079976:	2310      	movs	r3, #16
 8079978:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 807997a:	693b      	ldr	r3, [r7, #16]
 807997c:	f003 0320 	and.w	r3, r3, #32
 8079980:	2b00      	cmp	r3, #0
 8079982:	d008      	beq.n	8079996 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8079984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079986:	015a      	lsls	r2, r3, #5
 8079988:	69fb      	ldr	r3, [r7, #28]
 807998a:	4413      	add	r3, r2
 807998c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079990:	461a      	mov	r2, r3
 8079992:	2320      	movs	r3, #32
 8079994:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8079996:	693b      	ldr	r3, [r7, #16]
 8079998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 807999c:	2b00      	cmp	r3, #0
 807999e:	d009      	beq.n	80799b4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80799a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80799a2:	015a      	lsls	r2, r3, #5
 80799a4:	69fb      	ldr	r3, [r7, #28]
 80799a6:	4413      	add	r3, r2
 80799a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80799ac:	461a      	mov	r2, r3
 80799ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80799b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80799b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80799b6:	3301      	adds	r3, #1
 80799b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80799ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80799bc:	085b      	lsrs	r3, r3, #1
 80799be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80799c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80799c2:	2b00      	cmp	r3, #0
 80799c4:	d199      	bne.n	80798fa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80799c6:	687b      	ldr	r3, [r7, #4]
 80799c8:	681b      	ldr	r3, [r3, #0]
 80799ca:	4618      	mov	r0, r3
 80799cc:	f002 fc03 	bl	807c1d6 <USB_ReadInterrupts>
 80799d0:	4603      	mov	r3, r0
 80799d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80799d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80799da:	f040 80c0 	bne.w	8079b5e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80799de:	687b      	ldr	r3, [r7, #4]
 80799e0:	681b      	ldr	r3, [r3, #0]
 80799e2:	4618      	mov	r0, r3
 80799e4:	f002 fc24 	bl	807c230 <USB_ReadDevAllInEpInterrupt>
 80799e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80799ea:	2300      	movs	r3, #0
 80799ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80799ee:	e0b2      	b.n	8079b56 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80799f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80799f2:	f003 0301 	and.w	r3, r3, #1
 80799f6:	2b00      	cmp	r3, #0
 80799f8:	f000 80a7 	beq.w	8079b4a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80799fc:	687b      	ldr	r3, [r7, #4]
 80799fe:	681b      	ldr	r3, [r3, #0]
 8079a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a02:	b2d2      	uxtb	r2, r2
 8079a04:	4611      	mov	r1, r2
 8079a06:	4618      	mov	r0, r3
 8079a08:	f002 fc4a 	bl	807c2a0 <USB_ReadDevInEPInterrupt>
 8079a0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8079a0e:	693b      	ldr	r3, [r7, #16]
 8079a10:	f003 0301 	and.w	r3, r3, #1
 8079a14:	2b00      	cmp	r3, #0
 8079a16:	d057      	beq.n	8079ac8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8079a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079a1a:	f003 030f 	and.w	r3, r3, #15
 8079a1e:	2201      	movs	r2, #1
 8079a20:	fa02 f303 	lsl.w	r3, r2, r3
 8079a24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8079a26:	69fb      	ldr	r3, [r7, #28]
 8079a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8079a2e:	68fb      	ldr	r3, [r7, #12]
 8079a30:	43db      	mvns	r3, r3
 8079a32:	69f9      	ldr	r1, [r7, #28]
 8079a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8079a38:	4013      	ands	r3, r2
 8079a3a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8079a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079a3e:	015a      	lsls	r2, r3, #5
 8079a40:	69fb      	ldr	r3, [r7, #28]
 8079a42:	4413      	add	r3, r2
 8079a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079a48:	461a      	mov	r2, r3
 8079a4a:	2301      	movs	r3, #1
 8079a4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8079a4e:	687b      	ldr	r3, [r7, #4]
 8079a50:	691b      	ldr	r3, [r3, #16]
 8079a52:	2b01      	cmp	r3, #1
 8079a54:	d132      	bne.n	8079abc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8079a56:	6879      	ldr	r1, [r7, #4]
 8079a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a5a:	4613      	mov	r3, r2
 8079a5c:	00db      	lsls	r3, r3, #3
 8079a5e:	1a9b      	subs	r3, r3, r2
 8079a60:	009b      	lsls	r3, r3, #2
 8079a62:	440b      	add	r3, r1
 8079a64:	3348      	adds	r3, #72	; 0x48
 8079a66:	6819      	ldr	r1, [r3, #0]
 8079a68:	6878      	ldr	r0, [r7, #4]
 8079a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a6c:	4613      	mov	r3, r2
 8079a6e:	00db      	lsls	r3, r3, #3
 8079a70:	1a9b      	subs	r3, r3, r2
 8079a72:	009b      	lsls	r3, r3, #2
 8079a74:	4403      	add	r3, r0
 8079a76:	3344      	adds	r3, #68	; 0x44
 8079a78:	681b      	ldr	r3, [r3, #0]
 8079a7a:	4419      	add	r1, r3
 8079a7c:	6878      	ldr	r0, [r7, #4]
 8079a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a80:	4613      	mov	r3, r2
 8079a82:	00db      	lsls	r3, r3, #3
 8079a84:	1a9b      	subs	r3, r3, r2
 8079a86:	009b      	lsls	r3, r3, #2
 8079a88:	4403      	add	r3, r0
 8079a8a:	3348      	adds	r3, #72	; 0x48
 8079a8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8079a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079a90:	2b00      	cmp	r3, #0
 8079a92:	d113      	bne.n	8079abc <HAL_PCD_IRQHandler+0x31c>
 8079a94:	6879      	ldr	r1, [r7, #4]
 8079a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8079a98:	4613      	mov	r3, r2
 8079a9a:	00db      	lsls	r3, r3, #3
 8079a9c:	1a9b      	subs	r3, r3, r2
 8079a9e:	009b      	lsls	r3, r3, #2
 8079aa0:	440b      	add	r3, r1
 8079aa2:	3350      	adds	r3, #80	; 0x50
 8079aa4:	681b      	ldr	r3, [r3, #0]
 8079aa6:	2b00      	cmp	r3, #0
 8079aa8:	d108      	bne.n	8079abc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8079aaa:	687b      	ldr	r3, [r7, #4]
 8079aac:	6818      	ldr	r0, [r3, #0]
 8079aae:	687b      	ldr	r3, [r7, #4]
 8079ab0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8079ab4:	461a      	mov	r2, r3
 8079ab6:	2101      	movs	r1, #1
 8079ab8:	f002 fc52 	bl	807c360 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8079abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079abe:	b2db      	uxtb	r3, r3
 8079ac0:	4619      	mov	r1, r3
 8079ac2:	6878      	ldr	r0, [r7, #4]
 8079ac4:	f004 ffcb 	bl	807ea5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8079ac8:	693b      	ldr	r3, [r7, #16]
 8079aca:	f003 0308 	and.w	r3, r3, #8
 8079ace:	2b00      	cmp	r3, #0
 8079ad0:	d008      	beq.n	8079ae4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8079ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079ad4:	015a      	lsls	r2, r3, #5
 8079ad6:	69fb      	ldr	r3, [r7, #28]
 8079ad8:	4413      	add	r3, r2
 8079ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079ade:	461a      	mov	r2, r3
 8079ae0:	2308      	movs	r3, #8
 8079ae2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8079ae4:	693b      	ldr	r3, [r7, #16]
 8079ae6:	f003 0310 	and.w	r3, r3, #16
 8079aea:	2b00      	cmp	r3, #0
 8079aec:	d008      	beq.n	8079b00 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8079aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079af0:	015a      	lsls	r2, r3, #5
 8079af2:	69fb      	ldr	r3, [r7, #28]
 8079af4:	4413      	add	r3, r2
 8079af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079afa:	461a      	mov	r2, r3
 8079afc:	2310      	movs	r3, #16
 8079afe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8079b00:	693b      	ldr	r3, [r7, #16]
 8079b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8079b06:	2b00      	cmp	r3, #0
 8079b08:	d008      	beq.n	8079b1c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8079b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079b0c:	015a      	lsls	r2, r3, #5
 8079b0e:	69fb      	ldr	r3, [r7, #28]
 8079b10:	4413      	add	r3, r2
 8079b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079b16:	461a      	mov	r2, r3
 8079b18:	2340      	movs	r3, #64	; 0x40
 8079b1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8079b1c:	693b      	ldr	r3, [r7, #16]
 8079b1e:	f003 0302 	and.w	r3, r3, #2
 8079b22:	2b00      	cmp	r3, #0
 8079b24:	d008      	beq.n	8079b38 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8079b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079b28:	015a      	lsls	r2, r3, #5
 8079b2a:	69fb      	ldr	r3, [r7, #28]
 8079b2c:	4413      	add	r3, r2
 8079b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079b32:	461a      	mov	r2, r3
 8079b34:	2302      	movs	r3, #2
 8079b36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8079b38:	693b      	ldr	r3, [r7, #16]
 8079b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8079b3e:	2b00      	cmp	r3, #0
 8079b40:	d003      	beq.n	8079b4a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8079b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8079b44:	6878      	ldr	r0, [r7, #4]
 8079b46:	f000 fbb9 	bl	807a2bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8079b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079b4c:	3301      	adds	r3, #1
 8079b4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8079b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8079b52:	085b      	lsrs	r3, r3, #1
 8079b54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8079b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8079b58:	2b00      	cmp	r3, #0
 8079b5a:	f47f af49 	bne.w	80799f0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8079b5e:	687b      	ldr	r3, [r7, #4]
 8079b60:	681b      	ldr	r3, [r3, #0]
 8079b62:	4618      	mov	r0, r3
 8079b64:	f002 fb37 	bl	807c1d6 <USB_ReadInterrupts>
 8079b68:	4603      	mov	r3, r0
 8079b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8079b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8079b72:	d122      	bne.n	8079bba <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8079b74:	69fb      	ldr	r3, [r7, #28]
 8079b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079b7a:	685b      	ldr	r3, [r3, #4]
 8079b7c:	69fa      	ldr	r2, [r7, #28]
 8079b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079b82:	f023 0301 	bic.w	r3, r3, #1
 8079b86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8079b88:	687b      	ldr	r3, [r7, #4]
 8079b8a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8079b8e:	2b01      	cmp	r3, #1
 8079b90:	d108      	bne.n	8079ba4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8079b92:	687b      	ldr	r3, [r7, #4]
 8079b94:	2200      	movs	r2, #0
 8079b96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8079b9a:	2100      	movs	r1, #0
 8079b9c:	6878      	ldr	r0, [r7, #4]
 8079b9e:	f000 fdc5 	bl	807a72c <HAL_PCDEx_LPM_Callback>
 8079ba2:	e002      	b.n	8079baa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8079ba4:	6878      	ldr	r0, [r7, #4]
 8079ba6:	f004 ffc7 	bl	807eb38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8079baa:	687b      	ldr	r3, [r7, #4]
 8079bac:	681b      	ldr	r3, [r3, #0]
 8079bae:	695a      	ldr	r2, [r3, #20]
 8079bb0:	687b      	ldr	r3, [r7, #4]
 8079bb2:	681b      	ldr	r3, [r3, #0]
 8079bb4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8079bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8079bba:	687b      	ldr	r3, [r7, #4]
 8079bbc:	681b      	ldr	r3, [r3, #0]
 8079bbe:	4618      	mov	r0, r3
 8079bc0:	f002 fb09 	bl	807c1d6 <USB_ReadInterrupts>
 8079bc4:	4603      	mov	r3, r0
 8079bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8079bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8079bce:	d112      	bne.n	8079bf6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8079bd0:	69fb      	ldr	r3, [r7, #28]
 8079bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079bd6:	689b      	ldr	r3, [r3, #8]
 8079bd8:	f003 0301 	and.w	r3, r3, #1
 8079bdc:	2b01      	cmp	r3, #1
 8079bde:	d102      	bne.n	8079be6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8079be0:	6878      	ldr	r0, [r7, #4]
 8079be2:	f004 ff83 	bl	807eaec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8079be6:	687b      	ldr	r3, [r7, #4]
 8079be8:	681b      	ldr	r3, [r3, #0]
 8079bea:	695a      	ldr	r2, [r3, #20]
 8079bec:	687b      	ldr	r3, [r7, #4]
 8079bee:	681b      	ldr	r3, [r3, #0]
 8079bf0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8079bf4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8079bf6:	687b      	ldr	r3, [r7, #4]
 8079bf8:	681b      	ldr	r3, [r3, #0]
 8079bfa:	4618      	mov	r0, r3
 8079bfc:	f002 faeb 	bl	807c1d6 <USB_ReadInterrupts>
 8079c00:	4603      	mov	r3, r0
 8079c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8079c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8079c0a:	f040 80c7 	bne.w	8079d9c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8079c0e:	69fb      	ldr	r3, [r7, #28]
 8079c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079c14:	685b      	ldr	r3, [r3, #4]
 8079c16:	69fa      	ldr	r2, [r7, #28]
 8079c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079c1c:	f023 0301 	bic.w	r3, r3, #1
 8079c20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8079c22:	687b      	ldr	r3, [r7, #4]
 8079c24:	681b      	ldr	r3, [r3, #0]
 8079c26:	2110      	movs	r1, #16
 8079c28:	4618      	mov	r0, r3
 8079c2a:	f001 fc95 	bl	807b558 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8079c2e:	2300      	movs	r3, #0
 8079c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8079c32:	e056      	b.n	8079ce2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8079c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c36:	015a      	lsls	r2, r3, #5
 8079c38:	69fb      	ldr	r3, [r7, #28]
 8079c3a:	4413      	add	r3, r2
 8079c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079c40:	461a      	mov	r2, r3
 8079c42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8079c46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8079c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c4a:	015a      	lsls	r2, r3, #5
 8079c4c:	69fb      	ldr	r3, [r7, #28]
 8079c4e:	4413      	add	r3, r2
 8079c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079c54:	681b      	ldr	r3, [r3, #0]
 8079c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079c58:	0151      	lsls	r1, r2, #5
 8079c5a:	69fa      	ldr	r2, [r7, #28]
 8079c5c:	440a      	add	r2, r1
 8079c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8079c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8079c66:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8079c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c6a:	015a      	lsls	r2, r3, #5
 8079c6c:	69fb      	ldr	r3, [r7, #28]
 8079c6e:	4413      	add	r3, r2
 8079c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8079c74:	681b      	ldr	r3, [r3, #0]
 8079c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079c78:	0151      	lsls	r1, r2, #5
 8079c7a:	69fa      	ldr	r2, [r7, #28]
 8079c7c:	440a      	add	r2, r1
 8079c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8079c82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8079c86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8079c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c8a:	015a      	lsls	r2, r3, #5
 8079c8c:	69fb      	ldr	r3, [r7, #28]
 8079c8e:	4413      	add	r3, r2
 8079c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079c94:	461a      	mov	r2, r3
 8079c96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8079c9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8079c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079c9e:	015a      	lsls	r2, r3, #5
 8079ca0:	69fb      	ldr	r3, [r7, #28]
 8079ca2:	4413      	add	r3, r2
 8079ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079ca8:	681b      	ldr	r3, [r3, #0]
 8079caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079cac:	0151      	lsls	r1, r2, #5
 8079cae:	69fa      	ldr	r2, [r7, #28]
 8079cb0:	440a      	add	r2, r1
 8079cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8079cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8079cba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8079cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079cbe:	015a      	lsls	r2, r3, #5
 8079cc0:	69fb      	ldr	r3, [r7, #28]
 8079cc2:	4413      	add	r3, r2
 8079cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8079cc8:	681b      	ldr	r3, [r3, #0]
 8079cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079ccc:	0151      	lsls	r1, r2, #5
 8079cce:	69fa      	ldr	r2, [r7, #28]
 8079cd0:	440a      	add	r2, r1
 8079cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8079cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8079cda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8079cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8079cde:	3301      	adds	r3, #1
 8079ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8079ce2:	687b      	ldr	r3, [r7, #4]
 8079ce4:	685b      	ldr	r3, [r3, #4]
 8079ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8079ce8:	429a      	cmp	r2, r3
 8079cea:	d3a3      	bcc.n	8079c34 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8079cec:	69fb      	ldr	r3, [r7, #28]
 8079cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079cf2:	69db      	ldr	r3, [r3, #28]
 8079cf4:	69fa      	ldr	r2, [r7, #28]
 8079cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079cfa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8079cfe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8079d00:	687b      	ldr	r3, [r7, #4]
 8079d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8079d04:	2b00      	cmp	r3, #0
 8079d06:	d016      	beq.n	8079d36 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8079d08:	69fb      	ldr	r3, [r7, #28]
 8079d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8079d12:	69fa      	ldr	r2, [r7, #28]
 8079d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d18:	f043 030b 	orr.w	r3, r3, #11
 8079d1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8079d20:	69fb      	ldr	r3, [r7, #28]
 8079d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8079d28:	69fa      	ldr	r2, [r7, #28]
 8079d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d2e:	f043 030b 	orr.w	r3, r3, #11
 8079d32:	6453      	str	r3, [r2, #68]	; 0x44
 8079d34:	e015      	b.n	8079d62 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8079d36:	69fb      	ldr	r3, [r7, #28]
 8079d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d3c:	695b      	ldr	r3, [r3, #20]
 8079d3e:	69fa      	ldr	r2, [r7, #28]
 8079d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8079d48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8079d4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8079d4e:	69fb      	ldr	r3, [r7, #28]
 8079d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d54:	691b      	ldr	r3, [r3, #16]
 8079d56:	69fa      	ldr	r2, [r7, #28]
 8079d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d5c:	f043 030b 	orr.w	r3, r3, #11
 8079d60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8079d62:	69fb      	ldr	r3, [r7, #28]
 8079d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8079d68:	681b      	ldr	r3, [r3, #0]
 8079d6a:	69fa      	ldr	r2, [r7, #28]
 8079d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8079d70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8079d74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8079d76:	687b      	ldr	r3, [r7, #4]
 8079d78:	6818      	ldr	r0, [r3, #0]
 8079d7a:	687b      	ldr	r3, [r7, #4]
 8079d7c:	691b      	ldr	r3, [r3, #16]
 8079d7e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8079d80:	687b      	ldr	r3, [r7, #4]
 8079d82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8079d86:	461a      	mov	r2, r3
 8079d88:	f002 faea 	bl	807c360 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8079d8c:	687b      	ldr	r3, [r7, #4]
 8079d8e:	681b      	ldr	r3, [r3, #0]
 8079d90:	695a      	ldr	r2, [r3, #20]
 8079d92:	687b      	ldr	r3, [r7, #4]
 8079d94:	681b      	ldr	r3, [r3, #0]
 8079d96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8079d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8079d9c:	687b      	ldr	r3, [r7, #4]
 8079d9e:	681b      	ldr	r3, [r3, #0]
 8079da0:	4618      	mov	r0, r3
 8079da2:	f002 fa18 	bl	807c1d6 <USB_ReadInterrupts>
 8079da6:	4603      	mov	r3, r0
 8079da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8079dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8079db0:	d124      	bne.n	8079dfc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8079db2:	687b      	ldr	r3, [r7, #4]
 8079db4:	681b      	ldr	r3, [r3, #0]
 8079db6:	4618      	mov	r0, r3
 8079db8:	f002 faae 	bl	807c318 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8079dbc:	687b      	ldr	r3, [r7, #4]
 8079dbe:	681b      	ldr	r3, [r3, #0]
 8079dc0:	4618      	mov	r0, r3
 8079dc2:	f001 fc2a 	bl	807b61a <USB_GetDevSpeed>
 8079dc6:	4603      	mov	r3, r0
 8079dc8:	461a      	mov	r2, r3
 8079dca:	687b      	ldr	r3, [r7, #4]
 8079dcc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8079dce:	687b      	ldr	r3, [r7, #4]
 8079dd0:	681c      	ldr	r4, [r3, #0]
 8079dd2:	f001 f8e7 	bl	807afa4 <HAL_RCC_GetHCLKFreq>
 8079dd6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8079dd8:	687b      	ldr	r3, [r7, #4]
 8079dda:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8079ddc:	b2db      	uxtb	r3, r3
 8079dde:	461a      	mov	r2, r3
 8079de0:	4620      	mov	r0, r4
 8079de2:	f001 f967 	bl	807b0b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8079de6:	6878      	ldr	r0, [r7, #4]
 8079de8:	f004 fe61 	bl	807eaae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8079dec:	687b      	ldr	r3, [r7, #4]
 8079dee:	681b      	ldr	r3, [r3, #0]
 8079df0:	695a      	ldr	r2, [r3, #20]
 8079df2:	687b      	ldr	r3, [r7, #4]
 8079df4:	681b      	ldr	r3, [r3, #0]
 8079df6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8079dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8079dfc:	687b      	ldr	r3, [r7, #4]
 8079dfe:	681b      	ldr	r3, [r3, #0]
 8079e00:	4618      	mov	r0, r3
 8079e02:	f002 f9e8 	bl	807c1d6 <USB_ReadInterrupts>
 8079e06:	4603      	mov	r3, r0
 8079e08:	f003 0308 	and.w	r3, r3, #8
 8079e0c:	2b08      	cmp	r3, #8
 8079e0e:	d10a      	bne.n	8079e26 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8079e10:	6878      	ldr	r0, [r7, #4]
 8079e12:	f004 fe3e 	bl	807ea92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8079e16:	687b      	ldr	r3, [r7, #4]
 8079e18:	681b      	ldr	r3, [r3, #0]
 8079e1a:	695a      	ldr	r2, [r3, #20]
 8079e1c:	687b      	ldr	r3, [r7, #4]
 8079e1e:	681b      	ldr	r3, [r3, #0]
 8079e20:	f002 0208 	and.w	r2, r2, #8
 8079e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8079e26:	687b      	ldr	r3, [r7, #4]
 8079e28:	681b      	ldr	r3, [r3, #0]
 8079e2a:	4618      	mov	r0, r3
 8079e2c:	f002 f9d3 	bl	807c1d6 <USB_ReadInterrupts>
 8079e30:	4603      	mov	r3, r0
 8079e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8079e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8079e3a:	d10f      	bne.n	8079e5c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8079e3c:	2300      	movs	r3, #0
 8079e3e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8079e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079e42:	b2db      	uxtb	r3, r3
 8079e44:	4619      	mov	r1, r3
 8079e46:	6878      	ldr	r0, [r7, #4]
 8079e48:	f004 fe96 	bl	807eb78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8079e4c:	687b      	ldr	r3, [r7, #4]
 8079e4e:	681b      	ldr	r3, [r3, #0]
 8079e50:	695a      	ldr	r2, [r3, #20]
 8079e52:	687b      	ldr	r3, [r7, #4]
 8079e54:	681b      	ldr	r3, [r3, #0]
 8079e56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8079e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8079e5c:	687b      	ldr	r3, [r7, #4]
 8079e5e:	681b      	ldr	r3, [r3, #0]
 8079e60:	4618      	mov	r0, r3
 8079e62:	f002 f9b8 	bl	807c1d6 <USB_ReadInterrupts>
 8079e66:	4603      	mov	r3, r0
 8079e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8079e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8079e70:	d10f      	bne.n	8079e92 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8079e72:	2300      	movs	r3, #0
 8079e74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8079e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8079e78:	b2db      	uxtb	r3, r3
 8079e7a:	4619      	mov	r1, r3
 8079e7c:	6878      	ldr	r0, [r7, #4]
 8079e7e:	f004 fe69 	bl	807eb54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8079e82:	687b      	ldr	r3, [r7, #4]
 8079e84:	681b      	ldr	r3, [r3, #0]
 8079e86:	695a      	ldr	r2, [r3, #20]
 8079e88:	687b      	ldr	r3, [r7, #4]
 8079e8a:	681b      	ldr	r3, [r3, #0]
 8079e8c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8079e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8079e92:	687b      	ldr	r3, [r7, #4]
 8079e94:	681b      	ldr	r3, [r3, #0]
 8079e96:	4618      	mov	r0, r3
 8079e98:	f002 f99d 	bl	807c1d6 <USB_ReadInterrupts>
 8079e9c:	4603      	mov	r3, r0
 8079e9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8079ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8079ea6:	d10a      	bne.n	8079ebe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8079ea8:	6878      	ldr	r0, [r7, #4]
 8079eaa:	f004 fe77 	bl	807eb9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8079eae:	687b      	ldr	r3, [r7, #4]
 8079eb0:	681b      	ldr	r3, [r3, #0]
 8079eb2:	695a      	ldr	r2, [r3, #20]
 8079eb4:	687b      	ldr	r3, [r7, #4]
 8079eb6:	681b      	ldr	r3, [r3, #0]
 8079eb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8079ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8079ebe:	687b      	ldr	r3, [r7, #4]
 8079ec0:	681b      	ldr	r3, [r3, #0]
 8079ec2:	4618      	mov	r0, r3
 8079ec4:	f002 f987 	bl	807c1d6 <USB_ReadInterrupts>
 8079ec8:	4603      	mov	r3, r0
 8079eca:	f003 0304 	and.w	r3, r3, #4
 8079ece:	2b04      	cmp	r3, #4
 8079ed0:	d115      	bne.n	8079efe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8079ed2:	687b      	ldr	r3, [r7, #4]
 8079ed4:	681b      	ldr	r3, [r3, #0]
 8079ed6:	685b      	ldr	r3, [r3, #4]
 8079ed8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8079eda:	69bb      	ldr	r3, [r7, #24]
 8079edc:	f003 0304 	and.w	r3, r3, #4
 8079ee0:	2b00      	cmp	r3, #0
 8079ee2:	d002      	beq.n	8079eea <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8079ee4:	6878      	ldr	r0, [r7, #4]
 8079ee6:	f004 fe67 	bl	807ebb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8079eea:	687b      	ldr	r3, [r7, #4]
 8079eec:	681b      	ldr	r3, [r3, #0]
 8079eee:	6859      	ldr	r1, [r3, #4]
 8079ef0:	687b      	ldr	r3, [r7, #4]
 8079ef2:	681b      	ldr	r3, [r3, #0]
 8079ef4:	69ba      	ldr	r2, [r7, #24]
 8079ef6:	430a      	orrs	r2, r1
 8079ef8:	605a      	str	r2, [r3, #4]
 8079efa:	e000      	b.n	8079efe <HAL_PCD_IRQHandler+0x75e>
      return;
 8079efc:	bf00      	nop
    }
  }
}
 8079efe:	3734      	adds	r7, #52	; 0x34
 8079f00:	46bd      	mov	sp, r7
 8079f02:	bd90      	pop	{r4, r7, pc}

08079f04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8079f04:	b580      	push	{r7, lr}
 8079f06:	b082      	sub	sp, #8
 8079f08:	af00      	add	r7, sp, #0
 8079f0a:	6078      	str	r0, [r7, #4]
 8079f0c:	460b      	mov	r3, r1
 8079f0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8079f10:	687b      	ldr	r3, [r7, #4]
 8079f12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8079f16:	2b01      	cmp	r3, #1
 8079f18:	d101      	bne.n	8079f1e <HAL_PCD_SetAddress+0x1a>
 8079f1a:	2302      	movs	r3, #2
 8079f1c:	e013      	b.n	8079f46 <HAL_PCD_SetAddress+0x42>
 8079f1e:	687b      	ldr	r3, [r7, #4]
 8079f20:	2201      	movs	r2, #1
 8079f22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8079f26:	687b      	ldr	r3, [r7, #4]
 8079f28:	78fa      	ldrb	r2, [r7, #3]
 8079f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8079f2e:	687b      	ldr	r3, [r7, #4]
 8079f30:	681b      	ldr	r3, [r3, #0]
 8079f32:	78fa      	ldrb	r2, [r7, #3]
 8079f34:	4611      	mov	r1, r2
 8079f36:	4618      	mov	r0, r3
 8079f38:	f002 f8e5 	bl	807c106 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8079f3c:	687b      	ldr	r3, [r7, #4]
 8079f3e:	2200      	movs	r2, #0
 8079f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8079f44:	2300      	movs	r3, #0
}
 8079f46:	4618      	mov	r0, r3
 8079f48:	3708      	adds	r7, #8
 8079f4a:	46bd      	mov	sp, r7
 8079f4c:	bd80      	pop	{r7, pc}

08079f4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8079f4e:	b580      	push	{r7, lr}
 8079f50:	b084      	sub	sp, #16
 8079f52:	af00      	add	r7, sp, #0
 8079f54:	6078      	str	r0, [r7, #4]
 8079f56:	4608      	mov	r0, r1
 8079f58:	4611      	mov	r1, r2
 8079f5a:	461a      	mov	r2, r3
 8079f5c:	4603      	mov	r3, r0
 8079f5e:	70fb      	strb	r3, [r7, #3]
 8079f60:	460b      	mov	r3, r1
 8079f62:	803b      	strh	r3, [r7, #0]
 8079f64:	4613      	mov	r3, r2
 8079f66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8079f68:	2300      	movs	r3, #0
 8079f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8079f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8079f70:	2b00      	cmp	r3, #0
 8079f72:	da0f      	bge.n	8079f94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8079f74:	78fb      	ldrb	r3, [r7, #3]
 8079f76:	f003 020f 	and.w	r2, r3, #15
 8079f7a:	4613      	mov	r3, r2
 8079f7c:	00db      	lsls	r3, r3, #3
 8079f7e:	1a9b      	subs	r3, r3, r2
 8079f80:	009b      	lsls	r3, r3, #2
 8079f82:	3338      	adds	r3, #56	; 0x38
 8079f84:	687a      	ldr	r2, [r7, #4]
 8079f86:	4413      	add	r3, r2
 8079f88:	3304      	adds	r3, #4
 8079f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8079f8c:	68fb      	ldr	r3, [r7, #12]
 8079f8e:	2201      	movs	r2, #1
 8079f90:	705a      	strb	r2, [r3, #1]
 8079f92:	e00f      	b.n	8079fb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8079f94:	78fb      	ldrb	r3, [r7, #3]
 8079f96:	f003 020f 	and.w	r2, r3, #15
 8079f9a:	4613      	mov	r3, r2
 8079f9c:	00db      	lsls	r3, r3, #3
 8079f9e:	1a9b      	subs	r3, r3, r2
 8079fa0:	009b      	lsls	r3, r3, #2
 8079fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8079fa6:	687a      	ldr	r2, [r7, #4]
 8079fa8:	4413      	add	r3, r2
 8079faa:	3304      	adds	r3, #4
 8079fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8079fae:	68fb      	ldr	r3, [r7, #12]
 8079fb0:	2200      	movs	r2, #0
 8079fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8079fb4:	78fb      	ldrb	r3, [r7, #3]
 8079fb6:	f003 030f 	and.w	r3, r3, #15
 8079fba:	b2da      	uxtb	r2, r3
 8079fbc:	68fb      	ldr	r3, [r7, #12]
 8079fbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8079fc0:	883a      	ldrh	r2, [r7, #0]
 8079fc2:	68fb      	ldr	r3, [r7, #12]
 8079fc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8079fc6:	68fb      	ldr	r3, [r7, #12]
 8079fc8:	78ba      	ldrb	r2, [r7, #2]
 8079fca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8079fcc:	68fb      	ldr	r3, [r7, #12]
 8079fce:	785b      	ldrb	r3, [r3, #1]
 8079fd0:	2b00      	cmp	r3, #0
 8079fd2:	d004      	beq.n	8079fde <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8079fd4:	68fb      	ldr	r3, [r7, #12]
 8079fd6:	781b      	ldrb	r3, [r3, #0]
 8079fd8:	b29a      	uxth	r2, r3
 8079fda:	68fb      	ldr	r3, [r7, #12]
 8079fdc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8079fde:	78bb      	ldrb	r3, [r7, #2]
 8079fe0:	2b02      	cmp	r3, #2
 8079fe2:	d102      	bne.n	8079fea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8079fe4:	68fb      	ldr	r3, [r7, #12]
 8079fe6:	2200      	movs	r2, #0
 8079fe8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8079fea:	687b      	ldr	r3, [r7, #4]
 8079fec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8079ff0:	2b01      	cmp	r3, #1
 8079ff2:	d101      	bne.n	8079ff8 <HAL_PCD_EP_Open+0xaa>
 8079ff4:	2302      	movs	r3, #2
 8079ff6:	e00e      	b.n	807a016 <HAL_PCD_EP_Open+0xc8>
 8079ff8:	687b      	ldr	r3, [r7, #4]
 8079ffa:	2201      	movs	r2, #1
 8079ffc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 807a000:	687b      	ldr	r3, [r7, #4]
 807a002:	681b      	ldr	r3, [r3, #0]
 807a004:	68f9      	ldr	r1, [r7, #12]
 807a006:	4618      	mov	r0, r3
 807a008:	f001 fb2c 	bl	807b664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 807a00c:	687b      	ldr	r3, [r7, #4]
 807a00e:	2200      	movs	r2, #0
 807a010:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 807a014:	7afb      	ldrb	r3, [r7, #11]
}
 807a016:	4618      	mov	r0, r3
 807a018:	3710      	adds	r7, #16
 807a01a:	46bd      	mov	sp, r7
 807a01c:	bd80      	pop	{r7, pc}

0807a01e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 807a01e:	b580      	push	{r7, lr}
 807a020:	b086      	sub	sp, #24
 807a022:	af00      	add	r7, sp, #0
 807a024:	60f8      	str	r0, [r7, #12]
 807a026:	607a      	str	r2, [r7, #4]
 807a028:	603b      	str	r3, [r7, #0]
 807a02a:	460b      	mov	r3, r1
 807a02c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 807a02e:	7afb      	ldrb	r3, [r7, #11]
 807a030:	f003 020f 	and.w	r2, r3, #15
 807a034:	4613      	mov	r3, r2
 807a036:	00db      	lsls	r3, r3, #3
 807a038:	1a9b      	subs	r3, r3, r2
 807a03a:	009b      	lsls	r3, r3, #2
 807a03c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807a040:	68fa      	ldr	r2, [r7, #12]
 807a042:	4413      	add	r3, r2
 807a044:	3304      	adds	r3, #4
 807a046:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 807a048:	697b      	ldr	r3, [r7, #20]
 807a04a:	687a      	ldr	r2, [r7, #4]
 807a04c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 807a04e:	697b      	ldr	r3, [r7, #20]
 807a050:	683a      	ldr	r2, [r7, #0]
 807a052:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 807a054:	697b      	ldr	r3, [r7, #20]
 807a056:	2200      	movs	r2, #0
 807a058:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 807a05a:	697b      	ldr	r3, [r7, #20]
 807a05c:	2200      	movs	r2, #0
 807a05e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a060:	7afb      	ldrb	r3, [r7, #11]
 807a062:	f003 030f 	and.w	r3, r3, #15
 807a066:	b2da      	uxtb	r2, r3
 807a068:	697b      	ldr	r3, [r7, #20]
 807a06a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 807a06c:	68fb      	ldr	r3, [r7, #12]
 807a06e:	691b      	ldr	r3, [r3, #16]
 807a070:	2b01      	cmp	r3, #1
 807a072:	d102      	bne.n	807a07a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 807a074:	687a      	ldr	r2, [r7, #4]
 807a076:	697b      	ldr	r3, [r7, #20]
 807a078:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a07a:	7afb      	ldrb	r3, [r7, #11]
 807a07c:	f003 030f 	and.w	r3, r3, #15
 807a080:	2b00      	cmp	r3, #0
 807a082:	d109      	bne.n	807a098 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a084:	68fb      	ldr	r3, [r7, #12]
 807a086:	6818      	ldr	r0, [r3, #0]
 807a088:	68fb      	ldr	r3, [r7, #12]
 807a08a:	691b      	ldr	r3, [r3, #16]
 807a08c:	b2db      	uxtb	r3, r3
 807a08e:	461a      	mov	r2, r3
 807a090:	6979      	ldr	r1, [r7, #20]
 807a092:	f001 fdb3 	bl	807bbfc <USB_EP0StartXfer>
 807a096:	e008      	b.n	807a0aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a098:	68fb      	ldr	r3, [r7, #12]
 807a09a:	6818      	ldr	r0, [r3, #0]
 807a09c:	68fb      	ldr	r3, [r7, #12]
 807a09e:	691b      	ldr	r3, [r3, #16]
 807a0a0:	b2db      	uxtb	r3, r3
 807a0a2:	461a      	mov	r2, r3
 807a0a4:	6979      	ldr	r1, [r7, #20]
 807a0a6:	f001 fb65 	bl	807b774 <USB_EPStartXfer>
  }

  return HAL_OK;
 807a0aa:	2300      	movs	r3, #0
}
 807a0ac:	4618      	mov	r0, r3
 807a0ae:	3718      	adds	r7, #24
 807a0b0:	46bd      	mov	sp, r7
 807a0b2:	bd80      	pop	{r7, pc}

0807a0b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 807a0b4:	b580      	push	{r7, lr}
 807a0b6:	b086      	sub	sp, #24
 807a0b8:	af00      	add	r7, sp, #0
 807a0ba:	60f8      	str	r0, [r7, #12]
 807a0bc:	607a      	str	r2, [r7, #4]
 807a0be:	603b      	str	r3, [r7, #0]
 807a0c0:	460b      	mov	r3, r1
 807a0c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a0c4:	7afb      	ldrb	r3, [r7, #11]
 807a0c6:	f003 020f 	and.w	r2, r3, #15
 807a0ca:	4613      	mov	r3, r2
 807a0cc:	00db      	lsls	r3, r3, #3
 807a0ce:	1a9b      	subs	r3, r3, r2
 807a0d0:	009b      	lsls	r3, r3, #2
 807a0d2:	3338      	adds	r3, #56	; 0x38
 807a0d4:	68fa      	ldr	r2, [r7, #12]
 807a0d6:	4413      	add	r3, r2
 807a0d8:	3304      	adds	r3, #4
 807a0da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 807a0dc:	697b      	ldr	r3, [r7, #20]
 807a0de:	687a      	ldr	r2, [r7, #4]
 807a0e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 807a0e2:	697b      	ldr	r3, [r7, #20]
 807a0e4:	683a      	ldr	r2, [r7, #0]
 807a0e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 807a0e8:	697b      	ldr	r3, [r7, #20]
 807a0ea:	2200      	movs	r2, #0
 807a0ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 807a0ee:	697b      	ldr	r3, [r7, #20]
 807a0f0:	2201      	movs	r2, #1
 807a0f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a0f4:	7afb      	ldrb	r3, [r7, #11]
 807a0f6:	f003 030f 	and.w	r3, r3, #15
 807a0fa:	b2da      	uxtb	r2, r3
 807a0fc:	697b      	ldr	r3, [r7, #20]
 807a0fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 807a100:	68fb      	ldr	r3, [r7, #12]
 807a102:	691b      	ldr	r3, [r3, #16]
 807a104:	2b01      	cmp	r3, #1
 807a106:	d102      	bne.n	807a10e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 807a108:	687a      	ldr	r2, [r7, #4]
 807a10a:	697b      	ldr	r3, [r7, #20]
 807a10c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a10e:	7afb      	ldrb	r3, [r7, #11]
 807a110:	f003 030f 	and.w	r3, r3, #15
 807a114:	2b00      	cmp	r3, #0
 807a116:	d109      	bne.n	807a12c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a118:	68fb      	ldr	r3, [r7, #12]
 807a11a:	6818      	ldr	r0, [r3, #0]
 807a11c:	68fb      	ldr	r3, [r7, #12]
 807a11e:	691b      	ldr	r3, [r3, #16]
 807a120:	b2db      	uxtb	r3, r3
 807a122:	461a      	mov	r2, r3
 807a124:	6979      	ldr	r1, [r7, #20]
 807a126:	f001 fd69 	bl	807bbfc <USB_EP0StartXfer>
 807a12a:	e008      	b.n	807a13e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 807a12c:	68fb      	ldr	r3, [r7, #12]
 807a12e:	6818      	ldr	r0, [r3, #0]
 807a130:	68fb      	ldr	r3, [r7, #12]
 807a132:	691b      	ldr	r3, [r3, #16]
 807a134:	b2db      	uxtb	r3, r3
 807a136:	461a      	mov	r2, r3
 807a138:	6979      	ldr	r1, [r7, #20]
 807a13a:	f001 fb1b 	bl	807b774 <USB_EPStartXfer>
  }

  return HAL_OK;
 807a13e:	2300      	movs	r3, #0
}
 807a140:	4618      	mov	r0, r3
 807a142:	3718      	adds	r7, #24
 807a144:	46bd      	mov	sp, r7
 807a146:	bd80      	pop	{r7, pc}

0807a148 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 807a148:	b580      	push	{r7, lr}
 807a14a:	b084      	sub	sp, #16
 807a14c:	af00      	add	r7, sp, #0
 807a14e:	6078      	str	r0, [r7, #4]
 807a150:	460b      	mov	r3, r1
 807a152:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 807a154:	78fb      	ldrb	r3, [r7, #3]
 807a156:	f003 020f 	and.w	r2, r3, #15
 807a15a:	687b      	ldr	r3, [r7, #4]
 807a15c:	685b      	ldr	r3, [r3, #4]
 807a15e:	429a      	cmp	r2, r3
 807a160:	d901      	bls.n	807a166 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 807a162:	2301      	movs	r3, #1
 807a164:	e050      	b.n	807a208 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 807a166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807a16a:	2b00      	cmp	r3, #0
 807a16c:	da0f      	bge.n	807a18e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a16e:	78fb      	ldrb	r3, [r7, #3]
 807a170:	f003 020f 	and.w	r2, r3, #15
 807a174:	4613      	mov	r3, r2
 807a176:	00db      	lsls	r3, r3, #3
 807a178:	1a9b      	subs	r3, r3, r2
 807a17a:	009b      	lsls	r3, r3, #2
 807a17c:	3338      	adds	r3, #56	; 0x38
 807a17e:	687a      	ldr	r2, [r7, #4]
 807a180:	4413      	add	r3, r2
 807a182:	3304      	adds	r3, #4
 807a184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 807a186:	68fb      	ldr	r3, [r7, #12]
 807a188:	2201      	movs	r2, #1
 807a18a:	705a      	strb	r2, [r3, #1]
 807a18c:	e00d      	b.n	807a1aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 807a18e:	78fa      	ldrb	r2, [r7, #3]
 807a190:	4613      	mov	r3, r2
 807a192:	00db      	lsls	r3, r3, #3
 807a194:	1a9b      	subs	r3, r3, r2
 807a196:	009b      	lsls	r3, r3, #2
 807a198:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807a19c:	687a      	ldr	r2, [r7, #4]
 807a19e:	4413      	add	r3, r2
 807a1a0:	3304      	adds	r3, #4
 807a1a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 807a1a4:	68fb      	ldr	r3, [r7, #12]
 807a1a6:	2200      	movs	r2, #0
 807a1a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 807a1aa:	68fb      	ldr	r3, [r7, #12]
 807a1ac:	2201      	movs	r2, #1
 807a1ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a1b0:	78fb      	ldrb	r3, [r7, #3]
 807a1b2:	f003 030f 	and.w	r3, r3, #15
 807a1b6:	b2da      	uxtb	r2, r3
 807a1b8:	68fb      	ldr	r3, [r7, #12]
 807a1ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 807a1bc:	687b      	ldr	r3, [r7, #4]
 807a1be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 807a1c2:	2b01      	cmp	r3, #1
 807a1c4:	d101      	bne.n	807a1ca <HAL_PCD_EP_SetStall+0x82>
 807a1c6:	2302      	movs	r3, #2
 807a1c8:	e01e      	b.n	807a208 <HAL_PCD_EP_SetStall+0xc0>
 807a1ca:	687b      	ldr	r3, [r7, #4]
 807a1cc:	2201      	movs	r2, #1
 807a1ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 807a1d2:	687b      	ldr	r3, [r7, #4]
 807a1d4:	681b      	ldr	r3, [r3, #0]
 807a1d6:	68f9      	ldr	r1, [r7, #12]
 807a1d8:	4618      	mov	r0, r3
 807a1da:	f001 fec0 	bl	807bf5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 807a1de:	78fb      	ldrb	r3, [r7, #3]
 807a1e0:	f003 030f 	and.w	r3, r3, #15
 807a1e4:	2b00      	cmp	r3, #0
 807a1e6:	d10a      	bne.n	807a1fe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 807a1e8:	687b      	ldr	r3, [r7, #4]
 807a1ea:	6818      	ldr	r0, [r3, #0]
 807a1ec:	687b      	ldr	r3, [r7, #4]
 807a1ee:	691b      	ldr	r3, [r3, #16]
 807a1f0:	b2d9      	uxtb	r1, r3
 807a1f2:	687b      	ldr	r3, [r7, #4]
 807a1f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a1f8:	461a      	mov	r2, r3
 807a1fa:	f002 f8b1 	bl	807c360 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 807a1fe:	687b      	ldr	r3, [r7, #4]
 807a200:	2200      	movs	r2, #0
 807a202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 807a206:	2300      	movs	r3, #0
}
 807a208:	4618      	mov	r0, r3
 807a20a:	3710      	adds	r7, #16
 807a20c:	46bd      	mov	sp, r7
 807a20e:	bd80      	pop	{r7, pc}

0807a210 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 807a210:	b580      	push	{r7, lr}
 807a212:	b084      	sub	sp, #16
 807a214:	af00      	add	r7, sp, #0
 807a216:	6078      	str	r0, [r7, #4]
 807a218:	460b      	mov	r3, r1
 807a21a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 807a21c:	78fb      	ldrb	r3, [r7, #3]
 807a21e:	f003 020f 	and.w	r2, r3, #15
 807a222:	687b      	ldr	r3, [r7, #4]
 807a224:	685b      	ldr	r3, [r3, #4]
 807a226:	429a      	cmp	r2, r3
 807a228:	d901      	bls.n	807a22e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 807a22a:	2301      	movs	r3, #1
 807a22c:	e042      	b.n	807a2b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 807a22e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807a232:	2b00      	cmp	r3, #0
 807a234:	da0f      	bge.n	807a256 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 807a236:	78fb      	ldrb	r3, [r7, #3]
 807a238:	f003 020f 	and.w	r2, r3, #15
 807a23c:	4613      	mov	r3, r2
 807a23e:	00db      	lsls	r3, r3, #3
 807a240:	1a9b      	subs	r3, r3, r2
 807a242:	009b      	lsls	r3, r3, #2
 807a244:	3338      	adds	r3, #56	; 0x38
 807a246:	687a      	ldr	r2, [r7, #4]
 807a248:	4413      	add	r3, r2
 807a24a:	3304      	adds	r3, #4
 807a24c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 807a24e:	68fb      	ldr	r3, [r7, #12]
 807a250:	2201      	movs	r2, #1
 807a252:	705a      	strb	r2, [r3, #1]
 807a254:	e00f      	b.n	807a276 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 807a256:	78fb      	ldrb	r3, [r7, #3]
 807a258:	f003 020f 	and.w	r2, r3, #15
 807a25c:	4613      	mov	r3, r2
 807a25e:	00db      	lsls	r3, r3, #3
 807a260:	1a9b      	subs	r3, r3, r2
 807a262:	009b      	lsls	r3, r3, #2
 807a264:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807a268:	687a      	ldr	r2, [r7, #4]
 807a26a:	4413      	add	r3, r2
 807a26c:	3304      	adds	r3, #4
 807a26e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 807a270:	68fb      	ldr	r3, [r7, #12]
 807a272:	2200      	movs	r2, #0
 807a274:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 807a276:	68fb      	ldr	r3, [r7, #12]
 807a278:	2200      	movs	r2, #0
 807a27a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 807a27c:	78fb      	ldrb	r3, [r7, #3]
 807a27e:	f003 030f 	and.w	r3, r3, #15
 807a282:	b2da      	uxtb	r2, r3
 807a284:	68fb      	ldr	r3, [r7, #12]
 807a286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 807a288:	687b      	ldr	r3, [r7, #4]
 807a28a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 807a28e:	2b01      	cmp	r3, #1
 807a290:	d101      	bne.n	807a296 <HAL_PCD_EP_ClrStall+0x86>
 807a292:	2302      	movs	r3, #2
 807a294:	e00e      	b.n	807a2b4 <HAL_PCD_EP_ClrStall+0xa4>
 807a296:	687b      	ldr	r3, [r7, #4]
 807a298:	2201      	movs	r2, #1
 807a29a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 807a29e:	687b      	ldr	r3, [r7, #4]
 807a2a0:	681b      	ldr	r3, [r3, #0]
 807a2a2:	68f9      	ldr	r1, [r7, #12]
 807a2a4:	4618      	mov	r0, r3
 807a2a6:	f001 fec8 	bl	807c03a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 807a2aa:	687b      	ldr	r3, [r7, #4]
 807a2ac:	2200      	movs	r2, #0
 807a2ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 807a2b2:	2300      	movs	r3, #0
}
 807a2b4:	4618      	mov	r0, r3
 807a2b6:	3710      	adds	r7, #16
 807a2b8:	46bd      	mov	sp, r7
 807a2ba:	bd80      	pop	{r7, pc}

0807a2bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a2bc:	b580      	push	{r7, lr}
 807a2be:	b08a      	sub	sp, #40	; 0x28
 807a2c0:	af02      	add	r7, sp, #8
 807a2c2:	6078      	str	r0, [r7, #4]
 807a2c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a2c6:	687b      	ldr	r3, [r7, #4]
 807a2c8:	681b      	ldr	r3, [r3, #0]
 807a2ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a2cc:	697b      	ldr	r3, [r7, #20]
 807a2ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 807a2d0:	683a      	ldr	r2, [r7, #0]
 807a2d2:	4613      	mov	r3, r2
 807a2d4:	00db      	lsls	r3, r3, #3
 807a2d6:	1a9b      	subs	r3, r3, r2
 807a2d8:	009b      	lsls	r3, r3, #2
 807a2da:	3338      	adds	r3, #56	; 0x38
 807a2dc:	687a      	ldr	r2, [r7, #4]
 807a2de:	4413      	add	r3, r2
 807a2e0:	3304      	adds	r3, #4
 807a2e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 807a2e4:	68fb      	ldr	r3, [r7, #12]
 807a2e6:	699a      	ldr	r2, [r3, #24]
 807a2e8:	68fb      	ldr	r3, [r7, #12]
 807a2ea:	695b      	ldr	r3, [r3, #20]
 807a2ec:	429a      	cmp	r2, r3
 807a2ee:	d901      	bls.n	807a2f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 807a2f0:	2301      	movs	r3, #1
 807a2f2:	e06c      	b.n	807a3ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 807a2f4:	68fb      	ldr	r3, [r7, #12]
 807a2f6:	695a      	ldr	r2, [r3, #20]
 807a2f8:	68fb      	ldr	r3, [r7, #12]
 807a2fa:	699b      	ldr	r3, [r3, #24]
 807a2fc:	1ad3      	subs	r3, r2, r3
 807a2fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 807a300:	68fb      	ldr	r3, [r7, #12]
 807a302:	689b      	ldr	r3, [r3, #8]
 807a304:	69fa      	ldr	r2, [r7, #28]
 807a306:	429a      	cmp	r2, r3
 807a308:	d902      	bls.n	807a310 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 807a30a:	68fb      	ldr	r3, [r7, #12]
 807a30c:	689b      	ldr	r3, [r3, #8]
 807a30e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 807a310:	69fb      	ldr	r3, [r7, #28]
 807a312:	3303      	adds	r3, #3
 807a314:	089b      	lsrs	r3, r3, #2
 807a316:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a318:	e02b      	b.n	807a372 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 807a31a:	68fb      	ldr	r3, [r7, #12]
 807a31c:	695a      	ldr	r2, [r3, #20]
 807a31e:	68fb      	ldr	r3, [r7, #12]
 807a320:	699b      	ldr	r3, [r3, #24]
 807a322:	1ad3      	subs	r3, r2, r3
 807a324:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 807a326:	68fb      	ldr	r3, [r7, #12]
 807a328:	689b      	ldr	r3, [r3, #8]
 807a32a:	69fa      	ldr	r2, [r7, #28]
 807a32c:	429a      	cmp	r2, r3
 807a32e:	d902      	bls.n	807a336 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 807a330:	68fb      	ldr	r3, [r7, #12]
 807a332:	689b      	ldr	r3, [r3, #8]
 807a334:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 807a336:	69fb      	ldr	r3, [r7, #28]
 807a338:	3303      	adds	r3, #3
 807a33a:	089b      	lsrs	r3, r3, #2
 807a33c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 807a33e:	68fb      	ldr	r3, [r7, #12]
 807a340:	68d9      	ldr	r1, [r3, #12]
 807a342:	683b      	ldr	r3, [r7, #0]
 807a344:	b2da      	uxtb	r2, r3
 807a346:	69fb      	ldr	r3, [r7, #28]
 807a348:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 807a34a:	687b      	ldr	r3, [r7, #4]
 807a34c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 807a34e:	b2db      	uxtb	r3, r3
 807a350:	9300      	str	r3, [sp, #0]
 807a352:	4603      	mov	r3, r0
 807a354:	6978      	ldr	r0, [r7, #20]
 807a356:	f001 fda4 	bl	807bea2 <USB_WritePacket>

    ep->xfer_buff  += len;
 807a35a:	68fb      	ldr	r3, [r7, #12]
 807a35c:	68da      	ldr	r2, [r3, #12]
 807a35e:	69fb      	ldr	r3, [r7, #28]
 807a360:	441a      	add	r2, r3
 807a362:	68fb      	ldr	r3, [r7, #12]
 807a364:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 807a366:	68fb      	ldr	r3, [r7, #12]
 807a368:	699a      	ldr	r2, [r3, #24]
 807a36a:	69fb      	ldr	r3, [r7, #28]
 807a36c:	441a      	add	r2, r3
 807a36e:	68fb      	ldr	r3, [r7, #12]
 807a370:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a372:	683b      	ldr	r3, [r7, #0]
 807a374:	015a      	lsls	r2, r3, #5
 807a376:	693b      	ldr	r3, [r7, #16]
 807a378:	4413      	add	r3, r2
 807a37a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807a37e:	699b      	ldr	r3, [r3, #24]
 807a380:	b29b      	uxth	r3, r3
 807a382:	69ba      	ldr	r2, [r7, #24]
 807a384:	429a      	cmp	r2, r3
 807a386:	d809      	bhi.n	807a39c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 807a388:	68fb      	ldr	r3, [r7, #12]
 807a38a:	699a      	ldr	r2, [r3, #24]
 807a38c:	68fb      	ldr	r3, [r7, #12]
 807a38e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 807a390:	429a      	cmp	r2, r3
 807a392:	d203      	bcs.n	807a39c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 807a394:	68fb      	ldr	r3, [r7, #12]
 807a396:	695b      	ldr	r3, [r3, #20]
 807a398:	2b00      	cmp	r3, #0
 807a39a:	d1be      	bne.n	807a31a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 807a39c:	68fb      	ldr	r3, [r7, #12]
 807a39e:	695a      	ldr	r2, [r3, #20]
 807a3a0:	68fb      	ldr	r3, [r7, #12]
 807a3a2:	699b      	ldr	r3, [r3, #24]
 807a3a4:	429a      	cmp	r2, r3
 807a3a6:	d811      	bhi.n	807a3cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 807a3a8:	683b      	ldr	r3, [r7, #0]
 807a3aa:	f003 030f 	and.w	r3, r3, #15
 807a3ae:	2201      	movs	r2, #1
 807a3b0:	fa02 f303 	lsl.w	r3, r2, r3
 807a3b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 807a3b6:	693b      	ldr	r3, [r7, #16]
 807a3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807a3bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807a3be:	68bb      	ldr	r3, [r7, #8]
 807a3c0:	43db      	mvns	r3, r3
 807a3c2:	6939      	ldr	r1, [r7, #16]
 807a3c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807a3c8:	4013      	ands	r3, r2
 807a3ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 807a3cc:	2300      	movs	r3, #0
}
 807a3ce:	4618      	mov	r0, r3
 807a3d0:	3720      	adds	r7, #32
 807a3d2:	46bd      	mov	sp, r7
 807a3d4:	bd80      	pop	{r7, pc}
	...

0807a3d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a3d8:	b580      	push	{r7, lr}
 807a3da:	b086      	sub	sp, #24
 807a3dc:	af00      	add	r7, sp, #0
 807a3de:	6078      	str	r0, [r7, #4]
 807a3e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a3e2:	687b      	ldr	r3, [r7, #4]
 807a3e4:	681b      	ldr	r3, [r3, #0]
 807a3e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a3e8:	697b      	ldr	r3, [r7, #20]
 807a3ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807a3ec:	697b      	ldr	r3, [r7, #20]
 807a3ee:	333c      	adds	r3, #60	; 0x3c
 807a3f0:	3304      	adds	r3, #4
 807a3f2:	681b      	ldr	r3, [r3, #0]
 807a3f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 807a3f6:	683b      	ldr	r3, [r7, #0]
 807a3f8:	015a      	lsls	r2, r3, #5
 807a3fa:	693b      	ldr	r3, [r7, #16]
 807a3fc:	4413      	add	r3, r2
 807a3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a402:	689b      	ldr	r3, [r3, #8]
 807a404:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 807a406:	687b      	ldr	r3, [r7, #4]
 807a408:	691b      	ldr	r3, [r3, #16]
 807a40a:	2b01      	cmp	r3, #1
 807a40c:	f040 80a0 	bne.w	807a550 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 807a410:	68bb      	ldr	r3, [r7, #8]
 807a412:	f003 0308 	and.w	r3, r3, #8
 807a416:	2b00      	cmp	r3, #0
 807a418:	d015      	beq.n	807a446 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a41a:	68fb      	ldr	r3, [r7, #12]
 807a41c:	4a72      	ldr	r2, [pc, #456]	; (807a5e8 <PCD_EP_OutXfrComplete_int+0x210>)
 807a41e:	4293      	cmp	r3, r2
 807a420:	f240 80dd 	bls.w	807a5de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a424:	68bb      	ldr	r3, [r7, #8]
 807a426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a42a:	2b00      	cmp	r3, #0
 807a42c:	f000 80d7 	beq.w	807a5de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a430:	683b      	ldr	r3, [r7, #0]
 807a432:	015a      	lsls	r2, r3, #5
 807a434:	693b      	ldr	r3, [r7, #16]
 807a436:	4413      	add	r3, r2
 807a438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a43c:	461a      	mov	r2, r3
 807a43e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a442:	6093      	str	r3, [r2, #8]
 807a444:	e0cb      	b.n	807a5de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 807a446:	68bb      	ldr	r3, [r7, #8]
 807a448:	f003 0320 	and.w	r3, r3, #32
 807a44c:	2b00      	cmp	r3, #0
 807a44e:	d009      	beq.n	807a464 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 807a450:	683b      	ldr	r3, [r7, #0]
 807a452:	015a      	lsls	r2, r3, #5
 807a454:	693b      	ldr	r3, [r7, #16]
 807a456:	4413      	add	r3, r2
 807a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a45c:	461a      	mov	r2, r3
 807a45e:	2320      	movs	r3, #32
 807a460:	6093      	str	r3, [r2, #8]
 807a462:	e0bc      	b.n	807a5de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 807a464:	68bb      	ldr	r3, [r7, #8]
 807a466:	f003 0328 	and.w	r3, r3, #40	; 0x28
 807a46a:	2b00      	cmp	r3, #0
 807a46c:	f040 80b7 	bne.w	807a5de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a470:	68fb      	ldr	r3, [r7, #12]
 807a472:	4a5d      	ldr	r2, [pc, #372]	; (807a5e8 <PCD_EP_OutXfrComplete_int+0x210>)
 807a474:	4293      	cmp	r3, r2
 807a476:	d90f      	bls.n	807a498 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a478:	68bb      	ldr	r3, [r7, #8]
 807a47a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a47e:	2b00      	cmp	r3, #0
 807a480:	d00a      	beq.n	807a498 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a482:	683b      	ldr	r3, [r7, #0]
 807a484:	015a      	lsls	r2, r3, #5
 807a486:	693b      	ldr	r3, [r7, #16]
 807a488:	4413      	add	r3, r2
 807a48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a48e:	461a      	mov	r2, r3
 807a490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a494:	6093      	str	r3, [r2, #8]
 807a496:	e0a2      	b.n	807a5de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 807a498:	6879      	ldr	r1, [r7, #4]
 807a49a:	683a      	ldr	r2, [r7, #0]
 807a49c:	4613      	mov	r3, r2
 807a49e:	00db      	lsls	r3, r3, #3
 807a4a0:	1a9b      	subs	r3, r3, r2
 807a4a2:	009b      	lsls	r3, r3, #2
 807a4a4:	440b      	add	r3, r1
 807a4a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 807a4aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 807a4ac:	683b      	ldr	r3, [r7, #0]
 807a4ae:	0159      	lsls	r1, r3, #5
 807a4b0:	693b      	ldr	r3, [r7, #16]
 807a4b2:	440b      	add	r3, r1
 807a4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a4b8:	691b      	ldr	r3, [r3, #16]
 807a4ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 807a4be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 807a4c0:	6878      	ldr	r0, [r7, #4]
 807a4c2:	683a      	ldr	r2, [r7, #0]
 807a4c4:	4613      	mov	r3, r2
 807a4c6:	00db      	lsls	r3, r3, #3
 807a4c8:	1a9b      	subs	r3, r3, r2
 807a4ca:	009b      	lsls	r3, r3, #2
 807a4cc:	4403      	add	r3, r0
 807a4ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 807a4d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 807a4d4:	6879      	ldr	r1, [r7, #4]
 807a4d6:	683a      	ldr	r2, [r7, #0]
 807a4d8:	4613      	mov	r3, r2
 807a4da:	00db      	lsls	r3, r3, #3
 807a4dc:	1a9b      	subs	r3, r3, r2
 807a4de:	009b      	lsls	r3, r3, #2
 807a4e0:	440b      	add	r3, r1
 807a4e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 807a4e6:	6819      	ldr	r1, [r3, #0]
 807a4e8:	6878      	ldr	r0, [r7, #4]
 807a4ea:	683a      	ldr	r2, [r7, #0]
 807a4ec:	4613      	mov	r3, r2
 807a4ee:	00db      	lsls	r3, r3, #3
 807a4f0:	1a9b      	subs	r3, r3, r2
 807a4f2:	009b      	lsls	r3, r3, #2
 807a4f4:	4403      	add	r3, r0
 807a4f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 807a4fa:	681b      	ldr	r3, [r3, #0]
 807a4fc:	4419      	add	r1, r3
 807a4fe:	6878      	ldr	r0, [r7, #4]
 807a500:	683a      	ldr	r2, [r7, #0]
 807a502:	4613      	mov	r3, r2
 807a504:	00db      	lsls	r3, r3, #3
 807a506:	1a9b      	subs	r3, r3, r2
 807a508:	009b      	lsls	r3, r3, #2
 807a50a:	4403      	add	r3, r0
 807a50c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 807a510:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 807a512:	683b      	ldr	r3, [r7, #0]
 807a514:	2b00      	cmp	r3, #0
 807a516:	d114      	bne.n	807a542 <PCD_EP_OutXfrComplete_int+0x16a>
 807a518:	6879      	ldr	r1, [r7, #4]
 807a51a:	683a      	ldr	r2, [r7, #0]
 807a51c:	4613      	mov	r3, r2
 807a51e:	00db      	lsls	r3, r3, #3
 807a520:	1a9b      	subs	r3, r3, r2
 807a522:	009b      	lsls	r3, r3, #2
 807a524:	440b      	add	r3, r1
 807a526:	f503 7304 	add.w	r3, r3, #528	; 0x210
 807a52a:	681b      	ldr	r3, [r3, #0]
 807a52c:	2b00      	cmp	r3, #0
 807a52e:	d108      	bne.n	807a542 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 807a530:	687b      	ldr	r3, [r7, #4]
 807a532:	6818      	ldr	r0, [r3, #0]
 807a534:	687b      	ldr	r3, [r7, #4]
 807a536:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a53a:	461a      	mov	r2, r3
 807a53c:	2101      	movs	r1, #1
 807a53e:	f001 ff0f 	bl	807c360 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a542:	683b      	ldr	r3, [r7, #0]
 807a544:	b2db      	uxtb	r3, r3
 807a546:	4619      	mov	r1, r3
 807a548:	6878      	ldr	r0, [r7, #4]
 807a54a:	f004 fa6d 	bl	807ea28 <HAL_PCD_DataOutStageCallback>
 807a54e:	e046      	b.n	807a5de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 807a550:	68fb      	ldr	r3, [r7, #12]
 807a552:	4a26      	ldr	r2, [pc, #152]	; (807a5ec <PCD_EP_OutXfrComplete_int+0x214>)
 807a554:	4293      	cmp	r3, r2
 807a556:	d124      	bne.n	807a5a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 807a558:	68bb      	ldr	r3, [r7, #8]
 807a55a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 807a55e:	2b00      	cmp	r3, #0
 807a560:	d00a      	beq.n	807a578 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a562:	683b      	ldr	r3, [r7, #0]
 807a564:	015a      	lsls	r2, r3, #5
 807a566:	693b      	ldr	r3, [r7, #16]
 807a568:	4413      	add	r3, r2
 807a56a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a56e:	461a      	mov	r2, r3
 807a570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a574:	6093      	str	r3, [r2, #8]
 807a576:	e032      	b.n	807a5de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 807a578:	68bb      	ldr	r3, [r7, #8]
 807a57a:	f003 0320 	and.w	r3, r3, #32
 807a57e:	2b00      	cmp	r3, #0
 807a580:	d008      	beq.n	807a594 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 807a582:	683b      	ldr	r3, [r7, #0]
 807a584:	015a      	lsls	r2, r3, #5
 807a586:	693b      	ldr	r3, [r7, #16]
 807a588:	4413      	add	r3, r2
 807a58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a58e:	461a      	mov	r2, r3
 807a590:	2320      	movs	r3, #32
 807a592:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a594:	683b      	ldr	r3, [r7, #0]
 807a596:	b2db      	uxtb	r3, r3
 807a598:	4619      	mov	r1, r3
 807a59a:	6878      	ldr	r0, [r7, #4]
 807a59c:	f004 fa44 	bl	807ea28 <HAL_PCD_DataOutStageCallback>
 807a5a0:	e01d      	b.n	807a5de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 807a5a2:	683b      	ldr	r3, [r7, #0]
 807a5a4:	2b00      	cmp	r3, #0
 807a5a6:	d114      	bne.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 807a5a8:	6879      	ldr	r1, [r7, #4]
 807a5aa:	683a      	ldr	r2, [r7, #0]
 807a5ac:	4613      	mov	r3, r2
 807a5ae:	00db      	lsls	r3, r3, #3
 807a5b0:	1a9b      	subs	r3, r3, r2
 807a5b2:	009b      	lsls	r3, r3, #2
 807a5b4:	440b      	add	r3, r1
 807a5b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 807a5ba:	681b      	ldr	r3, [r3, #0]
 807a5bc:	2b00      	cmp	r3, #0
 807a5be:	d108      	bne.n	807a5d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 807a5c0:	687b      	ldr	r3, [r7, #4]
 807a5c2:	6818      	ldr	r0, [r3, #0]
 807a5c4:	687b      	ldr	r3, [r7, #4]
 807a5c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a5ca:	461a      	mov	r2, r3
 807a5cc:	2100      	movs	r1, #0
 807a5ce:	f001 fec7 	bl	807c360 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 807a5d2:	683b      	ldr	r3, [r7, #0]
 807a5d4:	b2db      	uxtb	r3, r3
 807a5d6:	4619      	mov	r1, r3
 807a5d8:	6878      	ldr	r0, [r7, #4]
 807a5da:	f004 fa25 	bl	807ea28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 807a5de:	2300      	movs	r3, #0
}
 807a5e0:	4618      	mov	r0, r3
 807a5e2:	3718      	adds	r7, #24
 807a5e4:	46bd      	mov	sp, r7
 807a5e6:	bd80      	pop	{r7, pc}
 807a5e8:	4f54300a 	.word	0x4f54300a
 807a5ec:	4f54310a 	.word	0x4f54310a

0807a5f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807a5f0:	b580      	push	{r7, lr}
 807a5f2:	b086      	sub	sp, #24
 807a5f4:	af00      	add	r7, sp, #0
 807a5f6:	6078      	str	r0, [r7, #4]
 807a5f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 807a5fa:	687b      	ldr	r3, [r7, #4]
 807a5fc:	681b      	ldr	r3, [r3, #0]
 807a5fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807a600:	697b      	ldr	r3, [r7, #20]
 807a602:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807a604:	697b      	ldr	r3, [r7, #20]
 807a606:	333c      	adds	r3, #60	; 0x3c
 807a608:	3304      	adds	r3, #4
 807a60a:	681b      	ldr	r3, [r3, #0]
 807a60c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 807a60e:	683b      	ldr	r3, [r7, #0]
 807a610:	015a      	lsls	r2, r3, #5
 807a612:	693b      	ldr	r3, [r7, #16]
 807a614:	4413      	add	r3, r2
 807a616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a61a:	689b      	ldr	r3, [r3, #8]
 807a61c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a61e:	68fb      	ldr	r3, [r7, #12]
 807a620:	4a15      	ldr	r2, [pc, #84]	; (807a678 <PCD_EP_OutSetupPacket_int+0x88>)
 807a622:	4293      	cmp	r3, r2
 807a624:	d90e      	bls.n	807a644 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 807a626:	68bb      	ldr	r3, [r7, #8]
 807a628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807a62c:	2b00      	cmp	r3, #0
 807a62e:	d009      	beq.n	807a644 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807a630:	683b      	ldr	r3, [r7, #0]
 807a632:	015a      	lsls	r2, r3, #5
 807a634:	693b      	ldr	r3, [r7, #16]
 807a636:	4413      	add	r3, r2
 807a638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807a63c:	461a      	mov	r2, r3
 807a63e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807a642:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 807a644:	6878      	ldr	r0, [r7, #4]
 807a646:	f004 f9dd 	bl	807ea04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 807a64a:	68fb      	ldr	r3, [r7, #12]
 807a64c:	4a0a      	ldr	r2, [pc, #40]	; (807a678 <PCD_EP_OutSetupPacket_int+0x88>)
 807a64e:	4293      	cmp	r3, r2
 807a650:	d90c      	bls.n	807a66c <PCD_EP_OutSetupPacket_int+0x7c>
 807a652:	687b      	ldr	r3, [r7, #4]
 807a654:	691b      	ldr	r3, [r3, #16]
 807a656:	2b01      	cmp	r3, #1
 807a658:	d108      	bne.n	807a66c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 807a65a:	687b      	ldr	r3, [r7, #4]
 807a65c:	6818      	ldr	r0, [r3, #0]
 807a65e:	687b      	ldr	r3, [r7, #4]
 807a660:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807a664:	461a      	mov	r2, r3
 807a666:	2101      	movs	r1, #1
 807a668:	f001 fe7a 	bl	807c360 <USB_EP0_OutStart>
  }

  return HAL_OK;
 807a66c:	2300      	movs	r3, #0
}
 807a66e:	4618      	mov	r0, r3
 807a670:	3718      	adds	r7, #24
 807a672:	46bd      	mov	sp, r7
 807a674:	bd80      	pop	{r7, pc}
 807a676:	bf00      	nop
 807a678:	4f54300a 	.word	0x4f54300a

0807a67c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 807a67c:	b480      	push	{r7}
 807a67e:	b085      	sub	sp, #20
 807a680:	af00      	add	r7, sp, #0
 807a682:	6078      	str	r0, [r7, #4]
 807a684:	460b      	mov	r3, r1
 807a686:	70fb      	strb	r3, [r7, #3]
 807a688:	4613      	mov	r3, r2
 807a68a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 807a68c:	687b      	ldr	r3, [r7, #4]
 807a68e:	681b      	ldr	r3, [r3, #0]
 807a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807a692:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 807a694:	78fb      	ldrb	r3, [r7, #3]
 807a696:	2b00      	cmp	r3, #0
 807a698:	d107      	bne.n	807a6aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 807a69a:	883b      	ldrh	r3, [r7, #0]
 807a69c:	0419      	lsls	r1, r3, #16
 807a69e:	687b      	ldr	r3, [r7, #4]
 807a6a0:	681b      	ldr	r3, [r3, #0]
 807a6a2:	68ba      	ldr	r2, [r7, #8]
 807a6a4:	430a      	orrs	r2, r1
 807a6a6:	629a      	str	r2, [r3, #40]	; 0x28
 807a6a8:	e028      	b.n	807a6fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 807a6aa:	687b      	ldr	r3, [r7, #4]
 807a6ac:	681b      	ldr	r3, [r3, #0]
 807a6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807a6b0:	0c1b      	lsrs	r3, r3, #16
 807a6b2:	68ba      	ldr	r2, [r7, #8]
 807a6b4:	4413      	add	r3, r2
 807a6b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 807a6b8:	2300      	movs	r3, #0
 807a6ba:	73fb      	strb	r3, [r7, #15]
 807a6bc:	e00d      	b.n	807a6da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 807a6be:	687b      	ldr	r3, [r7, #4]
 807a6c0:	681a      	ldr	r2, [r3, #0]
 807a6c2:	7bfb      	ldrb	r3, [r7, #15]
 807a6c4:	3340      	adds	r3, #64	; 0x40
 807a6c6:	009b      	lsls	r3, r3, #2
 807a6c8:	4413      	add	r3, r2
 807a6ca:	685b      	ldr	r3, [r3, #4]
 807a6cc:	0c1b      	lsrs	r3, r3, #16
 807a6ce:	68ba      	ldr	r2, [r7, #8]
 807a6d0:	4413      	add	r3, r2
 807a6d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 807a6d4:	7bfb      	ldrb	r3, [r7, #15]
 807a6d6:	3301      	adds	r3, #1
 807a6d8:	73fb      	strb	r3, [r7, #15]
 807a6da:	7bfa      	ldrb	r2, [r7, #15]
 807a6dc:	78fb      	ldrb	r3, [r7, #3]
 807a6de:	3b01      	subs	r3, #1
 807a6e0:	429a      	cmp	r2, r3
 807a6e2:	d3ec      	bcc.n	807a6be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 807a6e4:	883b      	ldrh	r3, [r7, #0]
 807a6e6:	0418      	lsls	r0, r3, #16
 807a6e8:	687b      	ldr	r3, [r7, #4]
 807a6ea:	6819      	ldr	r1, [r3, #0]
 807a6ec:	78fb      	ldrb	r3, [r7, #3]
 807a6ee:	3b01      	subs	r3, #1
 807a6f0:	68ba      	ldr	r2, [r7, #8]
 807a6f2:	4302      	orrs	r2, r0
 807a6f4:	3340      	adds	r3, #64	; 0x40
 807a6f6:	009b      	lsls	r3, r3, #2
 807a6f8:	440b      	add	r3, r1
 807a6fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 807a6fc:	2300      	movs	r3, #0
}
 807a6fe:	4618      	mov	r0, r3
 807a700:	3714      	adds	r7, #20
 807a702:	46bd      	mov	sp, r7
 807a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a708:	4770      	bx	lr

0807a70a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 807a70a:	b480      	push	{r7}
 807a70c:	b083      	sub	sp, #12
 807a70e:	af00      	add	r7, sp, #0
 807a710:	6078      	str	r0, [r7, #4]
 807a712:	460b      	mov	r3, r1
 807a714:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 807a716:	687b      	ldr	r3, [r7, #4]
 807a718:	681b      	ldr	r3, [r3, #0]
 807a71a:	887a      	ldrh	r2, [r7, #2]
 807a71c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 807a71e:	2300      	movs	r3, #0
}
 807a720:	4618      	mov	r0, r3
 807a722:	370c      	adds	r7, #12
 807a724:	46bd      	mov	sp, r7
 807a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a72a:	4770      	bx	lr

0807a72c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 807a72c:	b480      	push	{r7}
 807a72e:	b083      	sub	sp, #12
 807a730:	af00      	add	r7, sp, #0
 807a732:	6078      	str	r0, [r7, #4]
 807a734:	460b      	mov	r3, r1
 807a736:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 807a738:	bf00      	nop
 807a73a:	370c      	adds	r7, #12
 807a73c:	46bd      	mov	sp, r7
 807a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807a742:	4770      	bx	lr

0807a744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 807a744:	b580      	push	{r7, lr}
 807a746:	b086      	sub	sp, #24
 807a748:	af00      	add	r7, sp, #0
 807a74a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 807a74c:	687b      	ldr	r3, [r7, #4]
 807a74e:	2b00      	cmp	r3, #0
 807a750:	d101      	bne.n	807a756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 807a752:	2301      	movs	r3, #1
 807a754:	e267      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 807a756:	687b      	ldr	r3, [r7, #4]
 807a758:	681b      	ldr	r3, [r3, #0]
 807a75a:	f003 0301 	and.w	r3, r3, #1
 807a75e:	2b00      	cmp	r3, #0
 807a760:	d075      	beq.n	807a84e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807a762:	4b88      	ldr	r3, [pc, #544]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a764:	689b      	ldr	r3, [r3, #8]
 807a766:	f003 030c 	and.w	r3, r3, #12
 807a76a:	2b04      	cmp	r3, #4
 807a76c:	d00c      	beq.n	807a788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807a76e:	4b85      	ldr	r3, [pc, #532]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a770:	689b      	ldr	r3, [r3, #8]
 807a772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807a776:	2b08      	cmp	r3, #8
 807a778:	d112      	bne.n	807a7a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807a77a:	4b82      	ldr	r3, [pc, #520]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a77c:	685b      	ldr	r3, [r3, #4]
 807a77e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 807a782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 807a786:	d10b      	bne.n	807a7a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 807a788:	4b7e      	ldr	r3, [pc, #504]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a78a:	681b      	ldr	r3, [r3, #0]
 807a78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807a790:	2b00      	cmp	r3, #0
 807a792:	d05b      	beq.n	807a84c <HAL_RCC_OscConfig+0x108>
 807a794:	687b      	ldr	r3, [r7, #4]
 807a796:	685b      	ldr	r3, [r3, #4]
 807a798:	2b00      	cmp	r3, #0
 807a79a:	d157      	bne.n	807a84c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 807a79c:	2301      	movs	r3, #1
 807a79e:	e242      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 807a7a0:	687b      	ldr	r3, [r7, #4]
 807a7a2:	685b      	ldr	r3, [r3, #4]
 807a7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 807a7a8:	d106      	bne.n	807a7b8 <HAL_RCC_OscConfig+0x74>
 807a7aa:	4b76      	ldr	r3, [pc, #472]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7ac:	681b      	ldr	r3, [r3, #0]
 807a7ae:	4a75      	ldr	r2, [pc, #468]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 807a7b4:	6013      	str	r3, [r2, #0]
 807a7b6:	e01d      	b.n	807a7f4 <HAL_RCC_OscConfig+0xb0>
 807a7b8:	687b      	ldr	r3, [r7, #4]
 807a7ba:	685b      	ldr	r3, [r3, #4]
 807a7bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 807a7c0:	d10c      	bne.n	807a7dc <HAL_RCC_OscConfig+0x98>
 807a7c2:	4b70      	ldr	r3, [pc, #448]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7c4:	681b      	ldr	r3, [r3, #0]
 807a7c6:	4a6f      	ldr	r2, [pc, #444]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 807a7cc:	6013      	str	r3, [r2, #0]
 807a7ce:	4b6d      	ldr	r3, [pc, #436]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7d0:	681b      	ldr	r3, [r3, #0]
 807a7d2:	4a6c      	ldr	r2, [pc, #432]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 807a7d8:	6013      	str	r3, [r2, #0]
 807a7da:	e00b      	b.n	807a7f4 <HAL_RCC_OscConfig+0xb0>
 807a7dc:	4b69      	ldr	r3, [pc, #420]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7de:	681b      	ldr	r3, [r3, #0]
 807a7e0:	4a68      	ldr	r2, [pc, #416]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 807a7e6:	6013      	str	r3, [r2, #0]
 807a7e8:	4b66      	ldr	r3, [pc, #408]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7ea:	681b      	ldr	r3, [r3, #0]
 807a7ec:	4a65      	ldr	r2, [pc, #404]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a7ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 807a7f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 807a7f4:	687b      	ldr	r3, [r7, #4]
 807a7f6:	685b      	ldr	r3, [r3, #4]
 807a7f8:	2b00      	cmp	r3, #0
 807a7fa:	d013      	beq.n	807a824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807a7fc:	f7fe f866 	bl	80788cc <HAL_GetTick>
 807a800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807a802:	e008      	b.n	807a816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 807a804:	f7fe f862 	bl	80788cc <HAL_GetTick>
 807a808:	4602      	mov	r2, r0
 807a80a:	693b      	ldr	r3, [r7, #16]
 807a80c:	1ad3      	subs	r3, r2, r3
 807a80e:	2b64      	cmp	r3, #100	; 0x64
 807a810:	d901      	bls.n	807a816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 807a812:	2303      	movs	r3, #3
 807a814:	e207      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807a816:	4b5b      	ldr	r3, [pc, #364]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a818:	681b      	ldr	r3, [r3, #0]
 807a81a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807a81e:	2b00      	cmp	r3, #0
 807a820:	d0f0      	beq.n	807a804 <HAL_RCC_OscConfig+0xc0>
 807a822:	e014      	b.n	807a84e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807a824:	f7fe f852 	bl	80788cc <HAL_GetTick>
 807a828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807a82a:	e008      	b.n	807a83e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 807a82c:	f7fe f84e 	bl	80788cc <HAL_GetTick>
 807a830:	4602      	mov	r2, r0
 807a832:	693b      	ldr	r3, [r7, #16]
 807a834:	1ad3      	subs	r3, r2, r3
 807a836:	2b64      	cmp	r3, #100	; 0x64
 807a838:	d901      	bls.n	807a83e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 807a83a:	2303      	movs	r3, #3
 807a83c:	e1f3      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807a83e:	4b51      	ldr	r3, [pc, #324]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a840:	681b      	ldr	r3, [r3, #0]
 807a842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807a846:	2b00      	cmp	r3, #0
 807a848:	d1f0      	bne.n	807a82c <HAL_RCC_OscConfig+0xe8>
 807a84a:	e000      	b.n	807a84e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 807a84c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 807a84e:	687b      	ldr	r3, [r7, #4]
 807a850:	681b      	ldr	r3, [r3, #0]
 807a852:	f003 0302 	and.w	r3, r3, #2
 807a856:	2b00      	cmp	r3, #0
 807a858:	d063      	beq.n	807a922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807a85a:	4b4a      	ldr	r3, [pc, #296]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a85c:	689b      	ldr	r3, [r3, #8]
 807a85e:	f003 030c 	and.w	r3, r3, #12
 807a862:	2b00      	cmp	r3, #0
 807a864:	d00b      	beq.n	807a87e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807a866:	4b47      	ldr	r3, [pc, #284]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a868:	689b      	ldr	r3, [r3, #8]
 807a86a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807a86e:	2b08      	cmp	r3, #8
 807a870:	d11c      	bne.n	807a8ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807a872:	4b44      	ldr	r3, [pc, #272]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a874:	685b      	ldr	r3, [r3, #4]
 807a876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 807a87a:	2b00      	cmp	r3, #0
 807a87c:	d116      	bne.n	807a8ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 807a87e:	4b41      	ldr	r3, [pc, #260]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a880:	681b      	ldr	r3, [r3, #0]
 807a882:	f003 0302 	and.w	r3, r3, #2
 807a886:	2b00      	cmp	r3, #0
 807a888:	d005      	beq.n	807a896 <HAL_RCC_OscConfig+0x152>
 807a88a:	687b      	ldr	r3, [r7, #4]
 807a88c:	68db      	ldr	r3, [r3, #12]
 807a88e:	2b01      	cmp	r3, #1
 807a890:	d001      	beq.n	807a896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 807a892:	2301      	movs	r3, #1
 807a894:	e1c7      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 807a896:	4b3b      	ldr	r3, [pc, #236]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a898:	681b      	ldr	r3, [r3, #0]
 807a89a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 807a89e:	687b      	ldr	r3, [r7, #4]
 807a8a0:	691b      	ldr	r3, [r3, #16]
 807a8a2:	00db      	lsls	r3, r3, #3
 807a8a4:	4937      	ldr	r1, [pc, #220]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a8a6:	4313      	orrs	r3, r2
 807a8a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 807a8aa:	e03a      	b.n	807a922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 807a8ac:	687b      	ldr	r3, [r7, #4]
 807a8ae:	68db      	ldr	r3, [r3, #12]
 807a8b0:	2b00      	cmp	r3, #0
 807a8b2:	d020      	beq.n	807a8f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 807a8b4:	4b34      	ldr	r3, [pc, #208]	; (807a988 <HAL_RCC_OscConfig+0x244>)
 807a8b6:	2201      	movs	r2, #1
 807a8b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 807a8ba:	f7fe f807 	bl	80788cc <HAL_GetTick>
 807a8be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807a8c0:	e008      	b.n	807a8d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 807a8c2:	f7fe f803 	bl	80788cc <HAL_GetTick>
 807a8c6:	4602      	mov	r2, r0
 807a8c8:	693b      	ldr	r3, [r7, #16]
 807a8ca:	1ad3      	subs	r3, r2, r3
 807a8cc:	2b02      	cmp	r3, #2
 807a8ce:	d901      	bls.n	807a8d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 807a8d0:	2303      	movs	r3, #3
 807a8d2:	e1a8      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807a8d4:	4b2b      	ldr	r3, [pc, #172]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a8d6:	681b      	ldr	r3, [r3, #0]
 807a8d8:	f003 0302 	and.w	r3, r3, #2
 807a8dc:	2b00      	cmp	r3, #0
 807a8de:	d0f0      	beq.n	807a8c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 807a8e0:	4b28      	ldr	r3, [pc, #160]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a8e2:	681b      	ldr	r3, [r3, #0]
 807a8e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 807a8e8:	687b      	ldr	r3, [r7, #4]
 807a8ea:	691b      	ldr	r3, [r3, #16]
 807a8ec:	00db      	lsls	r3, r3, #3
 807a8ee:	4925      	ldr	r1, [pc, #148]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a8f0:	4313      	orrs	r3, r2
 807a8f2:	600b      	str	r3, [r1, #0]
 807a8f4:	e015      	b.n	807a922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 807a8f6:	4b24      	ldr	r3, [pc, #144]	; (807a988 <HAL_RCC_OscConfig+0x244>)
 807a8f8:	2200      	movs	r2, #0
 807a8fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 807a8fc:	f7fd ffe6 	bl	80788cc <HAL_GetTick>
 807a900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807a902:	e008      	b.n	807a916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 807a904:	f7fd ffe2 	bl	80788cc <HAL_GetTick>
 807a908:	4602      	mov	r2, r0
 807a90a:	693b      	ldr	r3, [r7, #16]
 807a90c:	1ad3      	subs	r3, r2, r3
 807a90e:	2b02      	cmp	r3, #2
 807a910:	d901      	bls.n	807a916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 807a912:	2303      	movs	r3, #3
 807a914:	e187      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807a916:	4b1b      	ldr	r3, [pc, #108]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a918:	681b      	ldr	r3, [r3, #0]
 807a91a:	f003 0302 	and.w	r3, r3, #2
 807a91e:	2b00      	cmp	r3, #0
 807a920:	d1f0      	bne.n	807a904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 807a922:	687b      	ldr	r3, [r7, #4]
 807a924:	681b      	ldr	r3, [r3, #0]
 807a926:	f003 0308 	and.w	r3, r3, #8
 807a92a:	2b00      	cmp	r3, #0
 807a92c:	d036      	beq.n	807a99c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 807a92e:	687b      	ldr	r3, [r7, #4]
 807a930:	695b      	ldr	r3, [r3, #20]
 807a932:	2b00      	cmp	r3, #0
 807a934:	d016      	beq.n	807a964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 807a936:	4b15      	ldr	r3, [pc, #84]	; (807a98c <HAL_RCC_OscConfig+0x248>)
 807a938:	2201      	movs	r2, #1
 807a93a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 807a93c:	f7fd ffc6 	bl	80788cc <HAL_GetTick>
 807a940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807a942:	e008      	b.n	807a956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807a944:	f7fd ffc2 	bl	80788cc <HAL_GetTick>
 807a948:	4602      	mov	r2, r0
 807a94a:	693b      	ldr	r3, [r7, #16]
 807a94c:	1ad3      	subs	r3, r2, r3
 807a94e:	2b02      	cmp	r3, #2
 807a950:	d901      	bls.n	807a956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 807a952:	2303      	movs	r3, #3
 807a954:	e167      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807a956:	4b0b      	ldr	r3, [pc, #44]	; (807a984 <HAL_RCC_OscConfig+0x240>)
 807a958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 807a95a:	f003 0302 	and.w	r3, r3, #2
 807a95e:	2b00      	cmp	r3, #0
 807a960:	d0f0      	beq.n	807a944 <HAL_RCC_OscConfig+0x200>
 807a962:	e01b      	b.n	807a99c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 807a964:	4b09      	ldr	r3, [pc, #36]	; (807a98c <HAL_RCC_OscConfig+0x248>)
 807a966:	2200      	movs	r2, #0
 807a968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 807a96a:	f7fd ffaf 	bl	80788cc <HAL_GetTick>
 807a96e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807a970:	e00e      	b.n	807a990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807a972:	f7fd ffab 	bl	80788cc <HAL_GetTick>
 807a976:	4602      	mov	r2, r0
 807a978:	693b      	ldr	r3, [r7, #16]
 807a97a:	1ad3      	subs	r3, r2, r3
 807a97c:	2b02      	cmp	r3, #2
 807a97e:	d907      	bls.n	807a990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 807a980:	2303      	movs	r3, #3
 807a982:	e150      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
 807a984:	40023800 	.word	0x40023800
 807a988:	42470000 	.word	0x42470000
 807a98c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807a990:	4b88      	ldr	r3, [pc, #544]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807a992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 807a994:	f003 0302 	and.w	r3, r3, #2
 807a998:	2b00      	cmp	r3, #0
 807a99a:	d1ea      	bne.n	807a972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 807a99c:	687b      	ldr	r3, [r7, #4]
 807a99e:	681b      	ldr	r3, [r3, #0]
 807a9a0:	f003 0304 	and.w	r3, r3, #4
 807a9a4:	2b00      	cmp	r3, #0
 807a9a6:	f000 8097 	beq.w	807aad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 807a9aa:	2300      	movs	r3, #0
 807a9ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 807a9ae:	4b81      	ldr	r3, [pc, #516]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807a9b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 807a9b6:	2b00      	cmp	r3, #0
 807a9b8:	d10f      	bne.n	807a9da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 807a9ba:	2300      	movs	r3, #0
 807a9bc:	60bb      	str	r3, [r7, #8]
 807a9be:	4b7d      	ldr	r3, [pc, #500]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807a9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807a9c2:	4a7c      	ldr	r2, [pc, #496]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807a9c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807a9c8:	6413      	str	r3, [r2, #64]	; 0x40
 807a9ca:	4b7a      	ldr	r3, [pc, #488]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807a9ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 807a9d2:	60bb      	str	r3, [r7, #8]
 807a9d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 807a9d6:	2301      	movs	r3, #1
 807a9d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807a9da:	4b77      	ldr	r3, [pc, #476]	; (807abb8 <HAL_RCC_OscConfig+0x474>)
 807a9dc:	681b      	ldr	r3, [r3, #0]
 807a9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807a9e2:	2b00      	cmp	r3, #0
 807a9e4:	d118      	bne.n	807aa18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 807a9e6:	4b74      	ldr	r3, [pc, #464]	; (807abb8 <HAL_RCC_OscConfig+0x474>)
 807a9e8:	681b      	ldr	r3, [r3, #0]
 807a9ea:	4a73      	ldr	r2, [pc, #460]	; (807abb8 <HAL_RCC_OscConfig+0x474>)
 807a9ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 807a9f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 807a9f2:	f7fd ff6b 	bl	80788cc <HAL_GetTick>
 807a9f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807a9f8:	e008      	b.n	807aa0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 807a9fa:	f7fd ff67 	bl	80788cc <HAL_GetTick>
 807a9fe:	4602      	mov	r2, r0
 807aa00:	693b      	ldr	r3, [r7, #16]
 807aa02:	1ad3      	subs	r3, r2, r3
 807aa04:	2b02      	cmp	r3, #2
 807aa06:	d901      	bls.n	807aa0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 807aa08:	2303      	movs	r3, #3
 807aa0a:	e10c      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807aa0c:	4b6a      	ldr	r3, [pc, #424]	; (807abb8 <HAL_RCC_OscConfig+0x474>)
 807aa0e:	681b      	ldr	r3, [r3, #0]
 807aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807aa14:	2b00      	cmp	r3, #0
 807aa16:	d0f0      	beq.n	807a9fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 807aa18:	687b      	ldr	r3, [r7, #4]
 807aa1a:	689b      	ldr	r3, [r3, #8]
 807aa1c:	2b01      	cmp	r3, #1
 807aa1e:	d106      	bne.n	807aa2e <HAL_RCC_OscConfig+0x2ea>
 807aa20:	4b64      	ldr	r3, [pc, #400]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa24:	4a63      	ldr	r2, [pc, #396]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa26:	f043 0301 	orr.w	r3, r3, #1
 807aa2a:	6713      	str	r3, [r2, #112]	; 0x70
 807aa2c:	e01c      	b.n	807aa68 <HAL_RCC_OscConfig+0x324>
 807aa2e:	687b      	ldr	r3, [r7, #4]
 807aa30:	689b      	ldr	r3, [r3, #8]
 807aa32:	2b05      	cmp	r3, #5
 807aa34:	d10c      	bne.n	807aa50 <HAL_RCC_OscConfig+0x30c>
 807aa36:	4b5f      	ldr	r3, [pc, #380]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa3a:	4a5e      	ldr	r2, [pc, #376]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa3c:	f043 0304 	orr.w	r3, r3, #4
 807aa40:	6713      	str	r3, [r2, #112]	; 0x70
 807aa42:	4b5c      	ldr	r3, [pc, #368]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa46:	4a5b      	ldr	r2, [pc, #364]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa48:	f043 0301 	orr.w	r3, r3, #1
 807aa4c:	6713      	str	r3, [r2, #112]	; 0x70
 807aa4e:	e00b      	b.n	807aa68 <HAL_RCC_OscConfig+0x324>
 807aa50:	4b58      	ldr	r3, [pc, #352]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa54:	4a57      	ldr	r2, [pc, #348]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa56:	f023 0301 	bic.w	r3, r3, #1
 807aa5a:	6713      	str	r3, [r2, #112]	; 0x70
 807aa5c:	4b55      	ldr	r3, [pc, #340]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa60:	4a54      	ldr	r2, [pc, #336]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa62:	f023 0304 	bic.w	r3, r3, #4
 807aa66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 807aa68:	687b      	ldr	r3, [r7, #4]
 807aa6a:	689b      	ldr	r3, [r3, #8]
 807aa6c:	2b00      	cmp	r3, #0
 807aa6e:	d015      	beq.n	807aa9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 807aa70:	f7fd ff2c 	bl	80788cc <HAL_GetTick>
 807aa74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 807aa76:	e00a      	b.n	807aa8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 807aa78:	f7fd ff28 	bl	80788cc <HAL_GetTick>
 807aa7c:	4602      	mov	r2, r0
 807aa7e:	693b      	ldr	r3, [r7, #16]
 807aa80:	1ad3      	subs	r3, r2, r3
 807aa82:	f241 3288 	movw	r2, #5000	; 0x1388
 807aa86:	4293      	cmp	r3, r2
 807aa88:	d901      	bls.n	807aa8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 807aa8a:	2303      	movs	r3, #3
 807aa8c:	e0cb      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 807aa8e:	4b49      	ldr	r3, [pc, #292]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aa92:	f003 0302 	and.w	r3, r3, #2
 807aa96:	2b00      	cmp	r3, #0
 807aa98:	d0ee      	beq.n	807aa78 <HAL_RCC_OscConfig+0x334>
 807aa9a:	e014      	b.n	807aac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 807aa9c:	f7fd ff16 	bl	80788cc <HAL_GetTick>
 807aaa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 807aaa2:	e00a      	b.n	807aaba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 807aaa4:	f7fd ff12 	bl	80788cc <HAL_GetTick>
 807aaa8:	4602      	mov	r2, r0
 807aaaa:	693b      	ldr	r3, [r7, #16]
 807aaac:	1ad3      	subs	r3, r2, r3
 807aaae:	f241 3288 	movw	r2, #5000	; 0x1388
 807aab2:	4293      	cmp	r3, r2
 807aab4:	d901      	bls.n	807aaba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 807aab6:	2303      	movs	r3, #3
 807aab8:	e0b5      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 807aaba:	4b3e      	ldr	r3, [pc, #248]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807aabe:	f003 0302 	and.w	r3, r3, #2
 807aac2:	2b00      	cmp	r3, #0
 807aac4:	d1ee      	bne.n	807aaa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 807aac6:	7dfb      	ldrb	r3, [r7, #23]
 807aac8:	2b01      	cmp	r3, #1
 807aaca:	d105      	bne.n	807aad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 807aacc:	4b39      	ldr	r3, [pc, #228]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807aad0:	4a38      	ldr	r2, [pc, #224]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 807aad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 807aad8:	687b      	ldr	r3, [r7, #4]
 807aada:	699b      	ldr	r3, [r3, #24]
 807aadc:	2b00      	cmp	r3, #0
 807aade:	f000 80a1 	beq.w	807ac24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 807aae2:	4b34      	ldr	r3, [pc, #208]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807aae4:	689b      	ldr	r3, [r3, #8]
 807aae6:	f003 030c 	and.w	r3, r3, #12
 807aaea:	2b08      	cmp	r3, #8
 807aaec:	d05c      	beq.n	807aba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 807aaee:	687b      	ldr	r3, [r7, #4]
 807aaf0:	699b      	ldr	r3, [r3, #24]
 807aaf2:	2b02      	cmp	r3, #2
 807aaf4:	d141      	bne.n	807ab7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 807aaf6:	4b31      	ldr	r3, [pc, #196]	; (807abbc <HAL_RCC_OscConfig+0x478>)
 807aaf8:	2200      	movs	r2, #0
 807aafa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807aafc:	f7fd fee6 	bl	80788cc <HAL_GetTick>
 807ab00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab02:	e008      	b.n	807ab16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807ab04:	f7fd fee2 	bl	80788cc <HAL_GetTick>
 807ab08:	4602      	mov	r2, r0
 807ab0a:	693b      	ldr	r3, [r7, #16]
 807ab0c:	1ad3      	subs	r3, r2, r3
 807ab0e:	2b02      	cmp	r3, #2
 807ab10:	d901      	bls.n	807ab16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 807ab12:	2303      	movs	r3, #3
 807ab14:	e087      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab16:	4b27      	ldr	r3, [pc, #156]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807ab18:	681b      	ldr	r3, [r3, #0]
 807ab1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807ab1e:	2b00      	cmp	r3, #0
 807ab20:	d1f0      	bne.n	807ab04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 807ab22:	687b      	ldr	r3, [r7, #4]
 807ab24:	69da      	ldr	r2, [r3, #28]
 807ab26:	687b      	ldr	r3, [r7, #4]
 807ab28:	6a1b      	ldr	r3, [r3, #32]
 807ab2a:	431a      	orrs	r2, r3
 807ab2c:	687b      	ldr	r3, [r7, #4]
 807ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807ab30:	019b      	lsls	r3, r3, #6
 807ab32:	431a      	orrs	r2, r3
 807ab34:	687b      	ldr	r3, [r7, #4]
 807ab36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807ab38:	085b      	lsrs	r3, r3, #1
 807ab3a:	3b01      	subs	r3, #1
 807ab3c:	041b      	lsls	r3, r3, #16
 807ab3e:	431a      	orrs	r2, r3
 807ab40:	687b      	ldr	r3, [r7, #4]
 807ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807ab44:	061b      	lsls	r3, r3, #24
 807ab46:	491b      	ldr	r1, [pc, #108]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807ab48:	4313      	orrs	r3, r2
 807ab4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 807ab4c:	4b1b      	ldr	r3, [pc, #108]	; (807abbc <HAL_RCC_OscConfig+0x478>)
 807ab4e:	2201      	movs	r2, #1
 807ab50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807ab52:	f7fd febb 	bl	80788cc <HAL_GetTick>
 807ab56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807ab58:	e008      	b.n	807ab6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807ab5a:	f7fd feb7 	bl	80788cc <HAL_GetTick>
 807ab5e:	4602      	mov	r2, r0
 807ab60:	693b      	ldr	r3, [r7, #16]
 807ab62:	1ad3      	subs	r3, r2, r3
 807ab64:	2b02      	cmp	r3, #2
 807ab66:	d901      	bls.n	807ab6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 807ab68:	2303      	movs	r3, #3
 807ab6a:	e05c      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807ab6c:	4b11      	ldr	r3, [pc, #68]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807ab6e:	681b      	ldr	r3, [r3, #0]
 807ab70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807ab74:	2b00      	cmp	r3, #0
 807ab76:	d0f0      	beq.n	807ab5a <HAL_RCC_OscConfig+0x416>
 807ab78:	e054      	b.n	807ac24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 807ab7a:	4b10      	ldr	r3, [pc, #64]	; (807abbc <HAL_RCC_OscConfig+0x478>)
 807ab7c:	2200      	movs	r2, #0
 807ab7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807ab80:	f7fd fea4 	bl	80788cc <HAL_GetTick>
 807ab84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab86:	e008      	b.n	807ab9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807ab88:	f7fd fea0 	bl	80788cc <HAL_GetTick>
 807ab8c:	4602      	mov	r2, r0
 807ab8e:	693b      	ldr	r3, [r7, #16]
 807ab90:	1ad3      	subs	r3, r2, r3
 807ab92:	2b02      	cmp	r3, #2
 807ab94:	d901      	bls.n	807ab9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 807ab96:	2303      	movs	r3, #3
 807ab98:	e045      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 807ab9a:	4b06      	ldr	r3, [pc, #24]	; (807abb4 <HAL_RCC_OscConfig+0x470>)
 807ab9c:	681b      	ldr	r3, [r3, #0]
 807ab9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807aba2:	2b00      	cmp	r3, #0
 807aba4:	d1f0      	bne.n	807ab88 <HAL_RCC_OscConfig+0x444>
 807aba6:	e03d      	b.n	807ac24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 807aba8:	687b      	ldr	r3, [r7, #4]
 807abaa:	699b      	ldr	r3, [r3, #24]
 807abac:	2b01      	cmp	r3, #1
 807abae:	d107      	bne.n	807abc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 807abb0:	2301      	movs	r3, #1
 807abb2:	e038      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
 807abb4:	40023800 	.word	0x40023800
 807abb8:	40007000 	.word	0x40007000
 807abbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 807abc0:	4b1b      	ldr	r3, [pc, #108]	; (807ac30 <HAL_RCC_OscConfig+0x4ec>)
 807abc2:	685b      	ldr	r3, [r3, #4]
 807abc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 807abc6:	687b      	ldr	r3, [r7, #4]
 807abc8:	699b      	ldr	r3, [r3, #24]
 807abca:	2b01      	cmp	r3, #1
 807abcc:	d028      	beq.n	807ac20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 807abce:	68fb      	ldr	r3, [r7, #12]
 807abd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 807abd4:	687b      	ldr	r3, [r7, #4]
 807abd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 807abd8:	429a      	cmp	r2, r3
 807abda:	d121      	bne.n	807ac20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 807abdc:	68fb      	ldr	r3, [r7, #12]
 807abde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 807abe2:	687b      	ldr	r3, [r7, #4]
 807abe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 807abe6:	429a      	cmp	r2, r3
 807abe8:	d11a      	bne.n	807ac20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 807abea:	68fa      	ldr	r2, [r7, #12]
 807abec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 807abf0:	4013      	ands	r3, r2
 807abf2:	687a      	ldr	r2, [r7, #4]
 807abf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 807abf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 807abf8:	4293      	cmp	r3, r2
 807abfa:	d111      	bne.n	807ac20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 807abfc:	68fb      	ldr	r3, [r7, #12]
 807abfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 807ac02:	687b      	ldr	r3, [r7, #4]
 807ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807ac06:	085b      	lsrs	r3, r3, #1
 807ac08:	3b01      	subs	r3, #1
 807ac0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 807ac0c:	429a      	cmp	r2, r3
 807ac0e:	d107      	bne.n	807ac20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 807ac10:	68fb      	ldr	r3, [r7, #12]
 807ac12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 807ac16:	687b      	ldr	r3, [r7, #4]
 807ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807ac1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 807ac1c:	429a      	cmp	r2, r3
 807ac1e:	d001      	beq.n	807ac24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 807ac20:	2301      	movs	r3, #1
 807ac22:	e000      	b.n	807ac26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 807ac24:	2300      	movs	r3, #0
}
 807ac26:	4618      	mov	r0, r3
 807ac28:	3718      	adds	r7, #24
 807ac2a:	46bd      	mov	sp, r7
 807ac2c:	bd80      	pop	{r7, pc}
 807ac2e:	bf00      	nop
 807ac30:	40023800 	.word	0x40023800

0807ac34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 807ac34:	b580      	push	{r7, lr}
 807ac36:	b084      	sub	sp, #16
 807ac38:	af00      	add	r7, sp, #0
 807ac3a:	6078      	str	r0, [r7, #4]
 807ac3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 807ac3e:	687b      	ldr	r3, [r7, #4]
 807ac40:	2b00      	cmp	r3, #0
 807ac42:	d101      	bne.n	807ac48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 807ac44:	2301      	movs	r3, #1
 807ac46:	e0cc      	b.n	807ade2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 807ac48:	4b68      	ldr	r3, [pc, #416]	; (807adec <HAL_RCC_ClockConfig+0x1b8>)
 807ac4a:	681b      	ldr	r3, [r3, #0]
 807ac4c:	f003 0307 	and.w	r3, r3, #7
 807ac50:	683a      	ldr	r2, [r7, #0]
 807ac52:	429a      	cmp	r2, r3
 807ac54:	d90c      	bls.n	807ac70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807ac56:	4b65      	ldr	r3, [pc, #404]	; (807adec <HAL_RCC_ClockConfig+0x1b8>)
 807ac58:	683a      	ldr	r2, [r7, #0]
 807ac5a:	b2d2      	uxtb	r2, r2
 807ac5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807ac5e:	4b63      	ldr	r3, [pc, #396]	; (807adec <HAL_RCC_ClockConfig+0x1b8>)
 807ac60:	681b      	ldr	r3, [r3, #0]
 807ac62:	f003 0307 	and.w	r3, r3, #7
 807ac66:	683a      	ldr	r2, [r7, #0]
 807ac68:	429a      	cmp	r2, r3
 807ac6a:	d001      	beq.n	807ac70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 807ac6c:	2301      	movs	r3, #1
 807ac6e:	e0b8      	b.n	807ade2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 807ac70:	687b      	ldr	r3, [r7, #4]
 807ac72:	681b      	ldr	r3, [r3, #0]
 807ac74:	f003 0302 	and.w	r3, r3, #2
 807ac78:	2b00      	cmp	r3, #0
 807ac7a:	d020      	beq.n	807acbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 807ac7c:	687b      	ldr	r3, [r7, #4]
 807ac7e:	681b      	ldr	r3, [r3, #0]
 807ac80:	f003 0304 	and.w	r3, r3, #4
 807ac84:	2b00      	cmp	r3, #0
 807ac86:	d005      	beq.n	807ac94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 807ac88:	4b59      	ldr	r3, [pc, #356]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ac8a:	689b      	ldr	r3, [r3, #8]
 807ac8c:	4a58      	ldr	r2, [pc, #352]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ac8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 807ac92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 807ac94:	687b      	ldr	r3, [r7, #4]
 807ac96:	681b      	ldr	r3, [r3, #0]
 807ac98:	f003 0308 	and.w	r3, r3, #8
 807ac9c:	2b00      	cmp	r3, #0
 807ac9e:	d005      	beq.n	807acac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 807aca0:	4b53      	ldr	r3, [pc, #332]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807aca2:	689b      	ldr	r3, [r3, #8]
 807aca4:	4a52      	ldr	r2, [pc, #328]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807aca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 807acaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 807acac:	4b50      	ldr	r3, [pc, #320]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807acae:	689b      	ldr	r3, [r3, #8]
 807acb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 807acb4:	687b      	ldr	r3, [r7, #4]
 807acb6:	689b      	ldr	r3, [r3, #8]
 807acb8:	494d      	ldr	r1, [pc, #308]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807acba:	4313      	orrs	r3, r2
 807acbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 807acbe:	687b      	ldr	r3, [r7, #4]
 807acc0:	681b      	ldr	r3, [r3, #0]
 807acc2:	f003 0301 	and.w	r3, r3, #1
 807acc6:	2b00      	cmp	r3, #0
 807acc8:	d044      	beq.n	807ad54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 807acca:	687b      	ldr	r3, [r7, #4]
 807accc:	685b      	ldr	r3, [r3, #4]
 807acce:	2b01      	cmp	r3, #1
 807acd0:	d107      	bne.n	807ace2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807acd2:	4b47      	ldr	r3, [pc, #284]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807acd4:	681b      	ldr	r3, [r3, #0]
 807acd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807acda:	2b00      	cmp	r3, #0
 807acdc:	d119      	bne.n	807ad12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807acde:	2301      	movs	r3, #1
 807ace0:	e07f      	b.n	807ade2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807ace2:	687b      	ldr	r3, [r7, #4]
 807ace4:	685b      	ldr	r3, [r3, #4]
 807ace6:	2b02      	cmp	r3, #2
 807ace8:	d003      	beq.n	807acf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 807acea:	687b      	ldr	r3, [r7, #4]
 807acec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807acee:	2b03      	cmp	r3, #3
 807acf0:	d107      	bne.n	807ad02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807acf2:	4b3f      	ldr	r3, [pc, #252]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807acf4:	681b      	ldr	r3, [r3, #0]
 807acf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 807acfa:	2b00      	cmp	r3, #0
 807acfc:	d109      	bne.n	807ad12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807acfe:	2301      	movs	r3, #1
 807ad00:	e06f      	b.n	807ade2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807ad02:	4b3b      	ldr	r3, [pc, #236]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ad04:	681b      	ldr	r3, [r3, #0]
 807ad06:	f003 0302 	and.w	r3, r3, #2
 807ad0a:	2b00      	cmp	r3, #0
 807ad0c:	d101      	bne.n	807ad12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807ad0e:	2301      	movs	r3, #1
 807ad10:	e067      	b.n	807ade2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 807ad12:	4b37      	ldr	r3, [pc, #220]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ad14:	689b      	ldr	r3, [r3, #8]
 807ad16:	f023 0203 	bic.w	r2, r3, #3
 807ad1a:	687b      	ldr	r3, [r7, #4]
 807ad1c:	685b      	ldr	r3, [r3, #4]
 807ad1e:	4934      	ldr	r1, [pc, #208]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ad20:	4313      	orrs	r3, r2
 807ad22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 807ad24:	f7fd fdd2 	bl	80788cc <HAL_GetTick>
 807ad28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807ad2a:	e00a      	b.n	807ad42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 807ad2c:	f7fd fdce 	bl	80788cc <HAL_GetTick>
 807ad30:	4602      	mov	r2, r0
 807ad32:	68fb      	ldr	r3, [r7, #12]
 807ad34:	1ad3      	subs	r3, r2, r3
 807ad36:	f241 3288 	movw	r2, #5000	; 0x1388
 807ad3a:	4293      	cmp	r3, r2
 807ad3c:	d901      	bls.n	807ad42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 807ad3e:	2303      	movs	r3, #3
 807ad40:	e04f      	b.n	807ade2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807ad42:	4b2b      	ldr	r3, [pc, #172]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ad44:	689b      	ldr	r3, [r3, #8]
 807ad46:	f003 020c 	and.w	r2, r3, #12
 807ad4a:	687b      	ldr	r3, [r7, #4]
 807ad4c:	685b      	ldr	r3, [r3, #4]
 807ad4e:	009b      	lsls	r3, r3, #2
 807ad50:	429a      	cmp	r2, r3
 807ad52:	d1eb      	bne.n	807ad2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 807ad54:	4b25      	ldr	r3, [pc, #148]	; (807adec <HAL_RCC_ClockConfig+0x1b8>)
 807ad56:	681b      	ldr	r3, [r3, #0]
 807ad58:	f003 0307 	and.w	r3, r3, #7
 807ad5c:	683a      	ldr	r2, [r7, #0]
 807ad5e:	429a      	cmp	r2, r3
 807ad60:	d20c      	bcs.n	807ad7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807ad62:	4b22      	ldr	r3, [pc, #136]	; (807adec <HAL_RCC_ClockConfig+0x1b8>)
 807ad64:	683a      	ldr	r2, [r7, #0]
 807ad66:	b2d2      	uxtb	r2, r2
 807ad68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807ad6a:	4b20      	ldr	r3, [pc, #128]	; (807adec <HAL_RCC_ClockConfig+0x1b8>)
 807ad6c:	681b      	ldr	r3, [r3, #0]
 807ad6e:	f003 0307 	and.w	r3, r3, #7
 807ad72:	683a      	ldr	r2, [r7, #0]
 807ad74:	429a      	cmp	r2, r3
 807ad76:	d001      	beq.n	807ad7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 807ad78:	2301      	movs	r3, #1
 807ad7a:	e032      	b.n	807ade2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 807ad7c:	687b      	ldr	r3, [r7, #4]
 807ad7e:	681b      	ldr	r3, [r3, #0]
 807ad80:	f003 0304 	and.w	r3, r3, #4
 807ad84:	2b00      	cmp	r3, #0
 807ad86:	d008      	beq.n	807ad9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 807ad88:	4b19      	ldr	r3, [pc, #100]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ad8a:	689b      	ldr	r3, [r3, #8]
 807ad8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 807ad90:	687b      	ldr	r3, [r7, #4]
 807ad92:	68db      	ldr	r3, [r3, #12]
 807ad94:	4916      	ldr	r1, [pc, #88]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ad96:	4313      	orrs	r3, r2
 807ad98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 807ad9a:	687b      	ldr	r3, [r7, #4]
 807ad9c:	681b      	ldr	r3, [r3, #0]
 807ad9e:	f003 0308 	and.w	r3, r3, #8
 807ada2:	2b00      	cmp	r3, #0
 807ada4:	d009      	beq.n	807adba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 807ada6:	4b12      	ldr	r3, [pc, #72]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807ada8:	689b      	ldr	r3, [r3, #8]
 807adaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 807adae:	687b      	ldr	r3, [r7, #4]
 807adb0:	691b      	ldr	r3, [r3, #16]
 807adb2:	00db      	lsls	r3, r3, #3
 807adb4:	490e      	ldr	r1, [pc, #56]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807adb6:	4313      	orrs	r3, r2
 807adb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 807adba:	f000 f82d 	bl	807ae18 <HAL_RCC_GetSysClockFreq>
 807adbe:	4602      	mov	r2, r0
 807adc0:	4b0b      	ldr	r3, [pc, #44]	; (807adf0 <HAL_RCC_ClockConfig+0x1bc>)
 807adc2:	689b      	ldr	r3, [r3, #8]
 807adc4:	091b      	lsrs	r3, r3, #4
 807adc6:	f003 030f 	and.w	r3, r3, #15
 807adca:	490a      	ldr	r1, [pc, #40]	; (807adf4 <HAL_RCC_ClockConfig+0x1c0>)
 807adcc:	5ccb      	ldrb	r3, [r1, r3]
 807adce:	fa22 f303 	lsr.w	r3, r2, r3
 807add2:	4a09      	ldr	r2, [pc, #36]	; (807adf8 <HAL_RCC_ClockConfig+0x1c4>)
 807add4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 807add6:	4b09      	ldr	r3, [pc, #36]	; (807adfc <HAL_RCC_ClockConfig+0x1c8>)
 807add8:	681b      	ldr	r3, [r3, #0]
 807adda:	4618      	mov	r0, r3
 807addc:	f7fd fd32 	bl	8078844 <HAL_InitTick>

  return HAL_OK;
 807ade0:	2300      	movs	r3, #0
}
 807ade2:	4618      	mov	r0, r3
 807ade4:	3710      	adds	r7, #16
 807ade6:	46bd      	mov	sp, r7
 807ade8:	bd80      	pop	{r7, pc}
 807adea:	bf00      	nop
 807adec:	40023c00 	.word	0x40023c00
 807adf0:	40023800 	.word	0x40023800
 807adf4:	0807f048 	.word	0x0807f048
 807adf8:	20000000 	.word	0x20000000
 807adfc:	20000004 	.word	0x20000004

0807ae00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 807ae00:	b480      	push	{r7}
 807ae02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 807ae04:	4b03      	ldr	r3, [pc, #12]	; (807ae14 <HAL_RCC_EnableCSS+0x14>)
 807ae06:	2201      	movs	r2, #1
 807ae08:	601a      	str	r2, [r3, #0]
}
 807ae0a:	bf00      	nop
 807ae0c:	46bd      	mov	sp, r7
 807ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ae12:	4770      	bx	lr
 807ae14:	4247004c 	.word	0x4247004c

0807ae18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 807ae18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 807ae1c:	b090      	sub	sp, #64	; 0x40
 807ae1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 807ae20:	2300      	movs	r3, #0
 807ae22:	637b      	str	r3, [r7, #52]	; 0x34
 807ae24:	2300      	movs	r3, #0
 807ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
 807ae28:	2300      	movs	r3, #0
 807ae2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 807ae2c:	2300      	movs	r3, #0
 807ae2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 807ae30:	4b59      	ldr	r3, [pc, #356]	; (807af98 <HAL_RCC_GetSysClockFreq+0x180>)
 807ae32:	689b      	ldr	r3, [r3, #8]
 807ae34:	f003 030c 	and.w	r3, r3, #12
 807ae38:	2b08      	cmp	r3, #8
 807ae3a:	d00d      	beq.n	807ae58 <HAL_RCC_GetSysClockFreq+0x40>
 807ae3c:	2b08      	cmp	r3, #8
 807ae3e:	f200 80a1 	bhi.w	807af84 <HAL_RCC_GetSysClockFreq+0x16c>
 807ae42:	2b00      	cmp	r3, #0
 807ae44:	d002      	beq.n	807ae4c <HAL_RCC_GetSysClockFreq+0x34>
 807ae46:	2b04      	cmp	r3, #4
 807ae48:	d003      	beq.n	807ae52 <HAL_RCC_GetSysClockFreq+0x3a>
 807ae4a:	e09b      	b.n	807af84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 807ae4c:	4b53      	ldr	r3, [pc, #332]	; (807af9c <HAL_RCC_GetSysClockFreq+0x184>)
 807ae4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 807ae50:	e09b      	b.n	807af8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 807ae52:	4b53      	ldr	r3, [pc, #332]	; (807afa0 <HAL_RCC_GetSysClockFreq+0x188>)
 807ae54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 807ae56:	e098      	b.n	807af8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 807ae58:	4b4f      	ldr	r3, [pc, #316]	; (807af98 <HAL_RCC_GetSysClockFreq+0x180>)
 807ae5a:	685b      	ldr	r3, [r3, #4]
 807ae5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 807ae60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 807ae62:	4b4d      	ldr	r3, [pc, #308]	; (807af98 <HAL_RCC_GetSysClockFreq+0x180>)
 807ae64:	685b      	ldr	r3, [r3, #4]
 807ae66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 807ae6a:	2b00      	cmp	r3, #0
 807ae6c:	d028      	beq.n	807aec0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 807ae6e:	4b4a      	ldr	r3, [pc, #296]	; (807af98 <HAL_RCC_GetSysClockFreq+0x180>)
 807ae70:	685b      	ldr	r3, [r3, #4]
 807ae72:	099b      	lsrs	r3, r3, #6
 807ae74:	2200      	movs	r2, #0
 807ae76:	623b      	str	r3, [r7, #32]
 807ae78:	627a      	str	r2, [r7, #36]	; 0x24
 807ae7a:	6a3b      	ldr	r3, [r7, #32]
 807ae7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 807ae80:	2100      	movs	r1, #0
 807ae82:	4b47      	ldr	r3, [pc, #284]	; (807afa0 <HAL_RCC_GetSysClockFreq+0x188>)
 807ae84:	fb03 f201 	mul.w	r2, r3, r1
 807ae88:	2300      	movs	r3, #0
 807ae8a:	fb00 f303 	mul.w	r3, r0, r3
 807ae8e:	4413      	add	r3, r2
 807ae90:	4a43      	ldr	r2, [pc, #268]	; (807afa0 <HAL_RCC_GetSysClockFreq+0x188>)
 807ae92:	fba0 1202 	umull	r1, r2, r0, r2
 807ae96:	62fa      	str	r2, [r7, #44]	; 0x2c
 807ae98:	460a      	mov	r2, r1
 807ae9a:	62ba      	str	r2, [r7, #40]	; 0x28
 807ae9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 807ae9e:	4413      	add	r3, r2
 807aea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 807aea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 807aea4:	2200      	movs	r2, #0
 807aea6:	61bb      	str	r3, [r7, #24]
 807aea8:	61fa      	str	r2, [r7, #28]
 807aeaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 807aeae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 807aeb2:	f7fd f991 	bl	80781d8 <__aeabi_uldivmod>
 807aeb6:	4602      	mov	r2, r0
 807aeb8:	460b      	mov	r3, r1
 807aeba:	4613      	mov	r3, r2
 807aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 807aebe:	e053      	b.n	807af68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 807aec0:	4b35      	ldr	r3, [pc, #212]	; (807af98 <HAL_RCC_GetSysClockFreq+0x180>)
 807aec2:	685b      	ldr	r3, [r3, #4]
 807aec4:	099b      	lsrs	r3, r3, #6
 807aec6:	2200      	movs	r2, #0
 807aec8:	613b      	str	r3, [r7, #16]
 807aeca:	617a      	str	r2, [r7, #20]
 807aecc:	693b      	ldr	r3, [r7, #16]
 807aece:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 807aed2:	f04f 0b00 	mov.w	fp, #0
 807aed6:	4652      	mov	r2, sl
 807aed8:	465b      	mov	r3, fp
 807aeda:	f04f 0000 	mov.w	r0, #0
 807aede:	f04f 0100 	mov.w	r1, #0
 807aee2:	0159      	lsls	r1, r3, #5
 807aee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 807aee8:	0150      	lsls	r0, r2, #5
 807aeea:	4602      	mov	r2, r0
 807aeec:	460b      	mov	r3, r1
 807aeee:	ebb2 080a 	subs.w	r8, r2, sl
 807aef2:	eb63 090b 	sbc.w	r9, r3, fp
 807aef6:	f04f 0200 	mov.w	r2, #0
 807aefa:	f04f 0300 	mov.w	r3, #0
 807aefe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 807af02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 807af06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 807af0a:	ebb2 0408 	subs.w	r4, r2, r8
 807af0e:	eb63 0509 	sbc.w	r5, r3, r9
 807af12:	f04f 0200 	mov.w	r2, #0
 807af16:	f04f 0300 	mov.w	r3, #0
 807af1a:	00eb      	lsls	r3, r5, #3
 807af1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 807af20:	00e2      	lsls	r2, r4, #3
 807af22:	4614      	mov	r4, r2
 807af24:	461d      	mov	r5, r3
 807af26:	eb14 030a 	adds.w	r3, r4, sl
 807af2a:	603b      	str	r3, [r7, #0]
 807af2c:	eb45 030b 	adc.w	r3, r5, fp
 807af30:	607b      	str	r3, [r7, #4]
 807af32:	f04f 0200 	mov.w	r2, #0
 807af36:	f04f 0300 	mov.w	r3, #0
 807af3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 807af3e:	4629      	mov	r1, r5
 807af40:	028b      	lsls	r3, r1, #10
 807af42:	4621      	mov	r1, r4
 807af44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 807af48:	4621      	mov	r1, r4
 807af4a:	028a      	lsls	r2, r1, #10
 807af4c:	4610      	mov	r0, r2
 807af4e:	4619      	mov	r1, r3
 807af50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 807af52:	2200      	movs	r2, #0
 807af54:	60bb      	str	r3, [r7, #8]
 807af56:	60fa      	str	r2, [r7, #12]
 807af58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 807af5c:	f7fd f93c 	bl	80781d8 <__aeabi_uldivmod>
 807af60:	4602      	mov	r2, r0
 807af62:	460b      	mov	r3, r1
 807af64:	4613      	mov	r3, r2
 807af66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 807af68:	4b0b      	ldr	r3, [pc, #44]	; (807af98 <HAL_RCC_GetSysClockFreq+0x180>)
 807af6a:	685b      	ldr	r3, [r3, #4]
 807af6c:	0c1b      	lsrs	r3, r3, #16
 807af6e:	f003 0303 	and.w	r3, r3, #3
 807af72:	3301      	adds	r3, #1
 807af74:	005b      	lsls	r3, r3, #1
 807af76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 807af78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 807af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807af7c:	fbb2 f3f3 	udiv	r3, r2, r3
 807af80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 807af82:	e002      	b.n	807af8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 807af84:	4b05      	ldr	r3, [pc, #20]	; (807af9c <HAL_RCC_GetSysClockFreq+0x184>)
 807af86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 807af88:	bf00      	nop
    }
  }
  return sysclockfreq;
 807af8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 807af8c:	4618      	mov	r0, r3
 807af8e:	3740      	adds	r7, #64	; 0x40
 807af90:	46bd      	mov	sp, r7
 807af92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 807af96:	bf00      	nop
 807af98:	40023800 	.word	0x40023800
 807af9c:	00f42400 	.word	0x00f42400
 807afa0:	017d7840 	.word	0x017d7840

0807afa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 807afa4:	b480      	push	{r7}
 807afa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 807afa8:	4b03      	ldr	r3, [pc, #12]	; (807afb8 <HAL_RCC_GetHCLKFreq+0x14>)
 807afaa:	681b      	ldr	r3, [r3, #0]
}
 807afac:	4618      	mov	r0, r3
 807afae:	46bd      	mov	sp, r7
 807afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807afb4:	4770      	bx	lr
 807afb6:	bf00      	nop
 807afb8:	20000000 	.word	0x20000000

0807afbc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 807afbc:	b580      	push	{r7, lr}
 807afbe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 807afc0:	4b06      	ldr	r3, [pc, #24]	; (807afdc <HAL_RCC_NMI_IRQHandler+0x20>)
 807afc2:	68db      	ldr	r3, [r3, #12]
 807afc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 807afc8:	2b80      	cmp	r3, #128	; 0x80
 807afca:	d104      	bne.n	807afd6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 807afcc:	f000 f80a 	bl	807afe4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 807afd0:	4b03      	ldr	r3, [pc, #12]	; (807afe0 <HAL_RCC_NMI_IRQHandler+0x24>)
 807afd2:	2280      	movs	r2, #128	; 0x80
 807afd4:	701a      	strb	r2, [r3, #0]
  }
}
 807afd6:	bf00      	nop
 807afd8:	bd80      	pop	{r7, pc}
 807afda:	bf00      	nop
 807afdc:	40023800 	.word	0x40023800
 807afe0:	4002380e 	.word	0x4002380e

0807afe4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 807afe4:	b480      	push	{r7}
 807afe6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 807afe8:	bf00      	nop
 807afea:	46bd      	mov	sp, r7
 807afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 807aff0:	4770      	bx	lr

0807aff2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 807aff2:	b084      	sub	sp, #16
 807aff4:	b580      	push	{r7, lr}
 807aff6:	b084      	sub	sp, #16
 807aff8:	af00      	add	r7, sp, #0
 807affa:	6078      	str	r0, [r7, #4]
 807affc:	f107 001c 	add.w	r0, r7, #28
 807b000:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 807b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807b006:	2b01      	cmp	r3, #1
 807b008:	d122      	bne.n	807b050 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 807b00a:	687b      	ldr	r3, [r7, #4]
 807b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b00e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 807b012:	687b      	ldr	r3, [r7, #4]
 807b014:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 807b016:	687b      	ldr	r3, [r7, #4]
 807b018:	68db      	ldr	r3, [r3, #12]
 807b01a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 807b01e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 807b022:	687a      	ldr	r2, [r7, #4]
 807b024:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 807b026:	687b      	ldr	r3, [r7, #4]
 807b028:	68db      	ldr	r3, [r3, #12]
 807b02a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 807b02e:	687b      	ldr	r3, [r7, #4]
 807b030:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 807b032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 807b034:	2b01      	cmp	r3, #1
 807b036:	d105      	bne.n	807b044 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 807b038:	687b      	ldr	r3, [r7, #4]
 807b03a:	68db      	ldr	r3, [r3, #12]
 807b03c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 807b040:	687b      	ldr	r3, [r7, #4]
 807b042:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 807b044:	6878      	ldr	r0, [r7, #4]
 807b046:	f001 f9e9 	bl	807c41c <USB_CoreReset>
 807b04a:	4603      	mov	r3, r0
 807b04c:	73fb      	strb	r3, [r7, #15]
 807b04e:	e01a      	b.n	807b086 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 807b050:	687b      	ldr	r3, [r7, #4]
 807b052:	68db      	ldr	r3, [r3, #12]
 807b054:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 807b058:	687b      	ldr	r3, [r7, #4]
 807b05a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 807b05c:	6878      	ldr	r0, [r7, #4]
 807b05e:	f001 f9dd 	bl	807c41c <USB_CoreReset>
 807b062:	4603      	mov	r3, r0
 807b064:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 807b066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 807b068:	2b00      	cmp	r3, #0
 807b06a:	d106      	bne.n	807b07a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 807b06c:	687b      	ldr	r3, [r7, #4]
 807b06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 807b074:	687b      	ldr	r3, [r7, #4]
 807b076:	639a      	str	r2, [r3, #56]	; 0x38
 807b078:	e005      	b.n	807b086 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 807b07a:	687b      	ldr	r3, [r7, #4]
 807b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b07e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 807b082:	687b      	ldr	r3, [r7, #4]
 807b084:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 807b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807b088:	2b01      	cmp	r3, #1
 807b08a:	d10b      	bne.n	807b0a4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 807b08c:	687b      	ldr	r3, [r7, #4]
 807b08e:	689b      	ldr	r3, [r3, #8]
 807b090:	f043 0206 	orr.w	r2, r3, #6
 807b094:	687b      	ldr	r3, [r7, #4]
 807b096:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 807b098:	687b      	ldr	r3, [r7, #4]
 807b09a:	689b      	ldr	r3, [r3, #8]
 807b09c:	f043 0220 	orr.w	r2, r3, #32
 807b0a0:	687b      	ldr	r3, [r7, #4]
 807b0a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 807b0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 807b0a6:	4618      	mov	r0, r3
 807b0a8:	3710      	adds	r7, #16
 807b0aa:	46bd      	mov	sp, r7
 807b0ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 807b0b0:	b004      	add	sp, #16
 807b0b2:	4770      	bx	lr

0807b0b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 807b0b4:	b480      	push	{r7}
 807b0b6:	b087      	sub	sp, #28
 807b0b8:	af00      	add	r7, sp, #0
 807b0ba:	60f8      	str	r0, [r7, #12]
 807b0bc:	60b9      	str	r1, [r7, #8]
 807b0be:	4613      	mov	r3, r2
 807b0c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 807b0c2:	79fb      	ldrb	r3, [r7, #7]
 807b0c4:	2b02      	cmp	r3, #2
 807b0c6:	d165      	bne.n	807b194 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 807b0c8:	68bb      	ldr	r3, [r7, #8]
 807b0ca:	4a41      	ldr	r2, [pc, #260]	; (807b1d0 <USB_SetTurnaroundTime+0x11c>)
 807b0cc:	4293      	cmp	r3, r2
 807b0ce:	d906      	bls.n	807b0de <USB_SetTurnaroundTime+0x2a>
 807b0d0:	68bb      	ldr	r3, [r7, #8]
 807b0d2:	4a40      	ldr	r2, [pc, #256]	; (807b1d4 <USB_SetTurnaroundTime+0x120>)
 807b0d4:	4293      	cmp	r3, r2
 807b0d6:	d202      	bcs.n	807b0de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 807b0d8:	230f      	movs	r3, #15
 807b0da:	617b      	str	r3, [r7, #20]
 807b0dc:	e062      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 807b0de:	68bb      	ldr	r3, [r7, #8]
 807b0e0:	4a3c      	ldr	r2, [pc, #240]	; (807b1d4 <USB_SetTurnaroundTime+0x120>)
 807b0e2:	4293      	cmp	r3, r2
 807b0e4:	d306      	bcc.n	807b0f4 <USB_SetTurnaroundTime+0x40>
 807b0e6:	68bb      	ldr	r3, [r7, #8]
 807b0e8:	4a3b      	ldr	r2, [pc, #236]	; (807b1d8 <USB_SetTurnaroundTime+0x124>)
 807b0ea:	4293      	cmp	r3, r2
 807b0ec:	d202      	bcs.n	807b0f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 807b0ee:	230e      	movs	r3, #14
 807b0f0:	617b      	str	r3, [r7, #20]
 807b0f2:	e057      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 807b0f4:	68bb      	ldr	r3, [r7, #8]
 807b0f6:	4a38      	ldr	r2, [pc, #224]	; (807b1d8 <USB_SetTurnaroundTime+0x124>)
 807b0f8:	4293      	cmp	r3, r2
 807b0fa:	d306      	bcc.n	807b10a <USB_SetTurnaroundTime+0x56>
 807b0fc:	68bb      	ldr	r3, [r7, #8]
 807b0fe:	4a37      	ldr	r2, [pc, #220]	; (807b1dc <USB_SetTurnaroundTime+0x128>)
 807b100:	4293      	cmp	r3, r2
 807b102:	d202      	bcs.n	807b10a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 807b104:	230d      	movs	r3, #13
 807b106:	617b      	str	r3, [r7, #20]
 807b108:	e04c      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 807b10a:	68bb      	ldr	r3, [r7, #8]
 807b10c:	4a33      	ldr	r2, [pc, #204]	; (807b1dc <USB_SetTurnaroundTime+0x128>)
 807b10e:	4293      	cmp	r3, r2
 807b110:	d306      	bcc.n	807b120 <USB_SetTurnaroundTime+0x6c>
 807b112:	68bb      	ldr	r3, [r7, #8]
 807b114:	4a32      	ldr	r2, [pc, #200]	; (807b1e0 <USB_SetTurnaroundTime+0x12c>)
 807b116:	4293      	cmp	r3, r2
 807b118:	d802      	bhi.n	807b120 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 807b11a:	230c      	movs	r3, #12
 807b11c:	617b      	str	r3, [r7, #20]
 807b11e:	e041      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 807b120:	68bb      	ldr	r3, [r7, #8]
 807b122:	4a2f      	ldr	r2, [pc, #188]	; (807b1e0 <USB_SetTurnaroundTime+0x12c>)
 807b124:	4293      	cmp	r3, r2
 807b126:	d906      	bls.n	807b136 <USB_SetTurnaroundTime+0x82>
 807b128:	68bb      	ldr	r3, [r7, #8]
 807b12a:	4a2e      	ldr	r2, [pc, #184]	; (807b1e4 <USB_SetTurnaroundTime+0x130>)
 807b12c:	4293      	cmp	r3, r2
 807b12e:	d802      	bhi.n	807b136 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 807b130:	230b      	movs	r3, #11
 807b132:	617b      	str	r3, [r7, #20]
 807b134:	e036      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 807b136:	68bb      	ldr	r3, [r7, #8]
 807b138:	4a2a      	ldr	r2, [pc, #168]	; (807b1e4 <USB_SetTurnaroundTime+0x130>)
 807b13a:	4293      	cmp	r3, r2
 807b13c:	d906      	bls.n	807b14c <USB_SetTurnaroundTime+0x98>
 807b13e:	68bb      	ldr	r3, [r7, #8]
 807b140:	4a29      	ldr	r2, [pc, #164]	; (807b1e8 <USB_SetTurnaroundTime+0x134>)
 807b142:	4293      	cmp	r3, r2
 807b144:	d802      	bhi.n	807b14c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 807b146:	230a      	movs	r3, #10
 807b148:	617b      	str	r3, [r7, #20]
 807b14a:	e02b      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 807b14c:	68bb      	ldr	r3, [r7, #8]
 807b14e:	4a26      	ldr	r2, [pc, #152]	; (807b1e8 <USB_SetTurnaroundTime+0x134>)
 807b150:	4293      	cmp	r3, r2
 807b152:	d906      	bls.n	807b162 <USB_SetTurnaroundTime+0xae>
 807b154:	68bb      	ldr	r3, [r7, #8]
 807b156:	4a25      	ldr	r2, [pc, #148]	; (807b1ec <USB_SetTurnaroundTime+0x138>)
 807b158:	4293      	cmp	r3, r2
 807b15a:	d202      	bcs.n	807b162 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 807b15c:	2309      	movs	r3, #9
 807b15e:	617b      	str	r3, [r7, #20]
 807b160:	e020      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 807b162:	68bb      	ldr	r3, [r7, #8]
 807b164:	4a21      	ldr	r2, [pc, #132]	; (807b1ec <USB_SetTurnaroundTime+0x138>)
 807b166:	4293      	cmp	r3, r2
 807b168:	d306      	bcc.n	807b178 <USB_SetTurnaroundTime+0xc4>
 807b16a:	68bb      	ldr	r3, [r7, #8]
 807b16c:	4a20      	ldr	r2, [pc, #128]	; (807b1f0 <USB_SetTurnaroundTime+0x13c>)
 807b16e:	4293      	cmp	r3, r2
 807b170:	d802      	bhi.n	807b178 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 807b172:	2308      	movs	r3, #8
 807b174:	617b      	str	r3, [r7, #20]
 807b176:	e015      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 807b178:	68bb      	ldr	r3, [r7, #8]
 807b17a:	4a1d      	ldr	r2, [pc, #116]	; (807b1f0 <USB_SetTurnaroundTime+0x13c>)
 807b17c:	4293      	cmp	r3, r2
 807b17e:	d906      	bls.n	807b18e <USB_SetTurnaroundTime+0xda>
 807b180:	68bb      	ldr	r3, [r7, #8]
 807b182:	4a1c      	ldr	r2, [pc, #112]	; (807b1f4 <USB_SetTurnaroundTime+0x140>)
 807b184:	4293      	cmp	r3, r2
 807b186:	d202      	bcs.n	807b18e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 807b188:	2307      	movs	r3, #7
 807b18a:	617b      	str	r3, [r7, #20]
 807b18c:	e00a      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 807b18e:	2306      	movs	r3, #6
 807b190:	617b      	str	r3, [r7, #20]
 807b192:	e007      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 807b194:	79fb      	ldrb	r3, [r7, #7]
 807b196:	2b00      	cmp	r3, #0
 807b198:	d102      	bne.n	807b1a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 807b19a:	2309      	movs	r3, #9
 807b19c:	617b      	str	r3, [r7, #20]
 807b19e:	e001      	b.n	807b1a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 807b1a0:	2309      	movs	r3, #9
 807b1a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 807b1a4:	68fb      	ldr	r3, [r7, #12]
 807b1a6:	68db      	ldr	r3, [r3, #12]
 807b1a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 807b1ac:	68fb      	ldr	r3, [r7, #12]
 807b1ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 807b1b0:	68fb      	ldr	r3, [r7, #12]
 807b1b2:	68da      	ldr	r2, [r3, #12]
 807b1b4:	697b      	ldr	r3, [r7, #20]
 807b1b6:	029b      	lsls	r3, r3, #10
 807b1b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 807b1bc:	431a      	orrs	r2, r3
 807b1be:	68fb      	ldr	r3, [r7, #12]
 807b1c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 807b1c2:	2300      	movs	r3, #0
}
 807b1c4:	4618      	mov	r0, r3
 807b1c6:	371c      	adds	r7, #28
 807b1c8:	46bd      	mov	sp, r7
 807b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b1ce:	4770      	bx	lr
 807b1d0:	00d8acbf 	.word	0x00d8acbf
 807b1d4:	00e4e1c0 	.word	0x00e4e1c0
 807b1d8:	00f42400 	.word	0x00f42400
 807b1dc:	01067380 	.word	0x01067380
 807b1e0:	011a499f 	.word	0x011a499f
 807b1e4:	01312cff 	.word	0x01312cff
 807b1e8:	014ca43f 	.word	0x014ca43f
 807b1ec:	016e3600 	.word	0x016e3600
 807b1f0:	01a6ab1f 	.word	0x01a6ab1f
 807b1f4:	01e84800 	.word	0x01e84800

0807b1f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 807b1f8:	b480      	push	{r7}
 807b1fa:	b083      	sub	sp, #12
 807b1fc:	af00      	add	r7, sp, #0
 807b1fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 807b200:	687b      	ldr	r3, [r7, #4]
 807b202:	689b      	ldr	r3, [r3, #8]
 807b204:	f043 0201 	orr.w	r2, r3, #1
 807b208:	687b      	ldr	r3, [r7, #4]
 807b20a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 807b20c:	2300      	movs	r3, #0
}
 807b20e:	4618      	mov	r0, r3
 807b210:	370c      	adds	r7, #12
 807b212:	46bd      	mov	sp, r7
 807b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b218:	4770      	bx	lr

0807b21a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 807b21a:	b480      	push	{r7}
 807b21c:	b083      	sub	sp, #12
 807b21e:	af00      	add	r7, sp, #0
 807b220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 807b222:	687b      	ldr	r3, [r7, #4]
 807b224:	689b      	ldr	r3, [r3, #8]
 807b226:	f023 0201 	bic.w	r2, r3, #1
 807b22a:	687b      	ldr	r3, [r7, #4]
 807b22c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 807b22e:	2300      	movs	r3, #0
}
 807b230:	4618      	mov	r0, r3
 807b232:	370c      	adds	r7, #12
 807b234:	46bd      	mov	sp, r7
 807b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b23a:	4770      	bx	lr

0807b23c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 807b23c:	b580      	push	{r7, lr}
 807b23e:	b082      	sub	sp, #8
 807b240:	af00      	add	r7, sp, #0
 807b242:	6078      	str	r0, [r7, #4]
 807b244:	460b      	mov	r3, r1
 807b246:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 807b248:	687b      	ldr	r3, [r7, #4]
 807b24a:	68db      	ldr	r3, [r3, #12]
 807b24c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 807b250:	687b      	ldr	r3, [r7, #4]
 807b252:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 807b254:	78fb      	ldrb	r3, [r7, #3]
 807b256:	2b01      	cmp	r3, #1
 807b258:	d106      	bne.n	807b268 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 807b25a:	687b      	ldr	r3, [r7, #4]
 807b25c:	68db      	ldr	r3, [r3, #12]
 807b25e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 807b262:	687b      	ldr	r3, [r7, #4]
 807b264:	60da      	str	r2, [r3, #12]
 807b266:	e00b      	b.n	807b280 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 807b268:	78fb      	ldrb	r3, [r7, #3]
 807b26a:	2b00      	cmp	r3, #0
 807b26c:	d106      	bne.n	807b27c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 807b26e:	687b      	ldr	r3, [r7, #4]
 807b270:	68db      	ldr	r3, [r3, #12]
 807b272:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 807b276:	687b      	ldr	r3, [r7, #4]
 807b278:	60da      	str	r2, [r3, #12]
 807b27a:	e001      	b.n	807b280 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 807b27c:	2301      	movs	r3, #1
 807b27e:	e003      	b.n	807b288 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 807b280:	2032      	movs	r0, #50	; 0x32
 807b282:	f7fd fb2f 	bl	80788e4 <HAL_Delay>

  return HAL_OK;
 807b286:	2300      	movs	r3, #0
}
 807b288:	4618      	mov	r0, r3
 807b28a:	3708      	adds	r7, #8
 807b28c:	46bd      	mov	sp, r7
 807b28e:	bd80      	pop	{r7, pc}

0807b290 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 807b290:	b084      	sub	sp, #16
 807b292:	b580      	push	{r7, lr}
 807b294:	b086      	sub	sp, #24
 807b296:	af00      	add	r7, sp, #0
 807b298:	6078      	str	r0, [r7, #4]
 807b29a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 807b29e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 807b2a2:	2300      	movs	r3, #0
 807b2a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b2a6:	687b      	ldr	r3, [r7, #4]
 807b2a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 807b2aa:	2300      	movs	r3, #0
 807b2ac:	613b      	str	r3, [r7, #16]
 807b2ae:	e009      	b.n	807b2c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 807b2b0:	687a      	ldr	r2, [r7, #4]
 807b2b2:	693b      	ldr	r3, [r7, #16]
 807b2b4:	3340      	adds	r3, #64	; 0x40
 807b2b6:	009b      	lsls	r3, r3, #2
 807b2b8:	4413      	add	r3, r2
 807b2ba:	2200      	movs	r2, #0
 807b2bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 807b2be:	693b      	ldr	r3, [r7, #16]
 807b2c0:	3301      	adds	r3, #1
 807b2c2:	613b      	str	r3, [r7, #16]
 807b2c4:	693b      	ldr	r3, [r7, #16]
 807b2c6:	2b0e      	cmp	r3, #14
 807b2c8:	d9f2      	bls.n	807b2b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 807b2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 807b2cc:	2b00      	cmp	r3, #0
 807b2ce:	d11c      	bne.n	807b30a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 807b2d0:	68fb      	ldr	r3, [r7, #12]
 807b2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b2d6:	685b      	ldr	r3, [r3, #4]
 807b2d8:	68fa      	ldr	r2, [r7, #12]
 807b2da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807b2de:	f043 0302 	orr.w	r3, r3, #2
 807b2e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 807b2e4:	687b      	ldr	r3, [r7, #4]
 807b2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b2e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 807b2ec:	687b      	ldr	r3, [r7, #4]
 807b2ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 807b2f0:	687b      	ldr	r3, [r7, #4]
 807b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b2f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 807b2f8:	687b      	ldr	r3, [r7, #4]
 807b2fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 807b2fc:	687b      	ldr	r3, [r7, #4]
 807b2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b300:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 807b304:	687b      	ldr	r3, [r7, #4]
 807b306:	639a      	str	r2, [r3, #56]	; 0x38
 807b308:	e00b      	b.n	807b322 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 807b30a:	687b      	ldr	r3, [r7, #4]
 807b30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b30e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 807b312:	687b      	ldr	r3, [r7, #4]
 807b314:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 807b316:	687b      	ldr	r3, [r7, #4]
 807b318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807b31a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 807b31e:	687b      	ldr	r3, [r7, #4]
 807b320:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 807b322:	68fb      	ldr	r3, [r7, #12]
 807b324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807b328:	461a      	mov	r2, r3
 807b32a:	2300      	movs	r3, #0
 807b32c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 807b32e:	68fb      	ldr	r3, [r7, #12]
 807b330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b334:	4619      	mov	r1, r3
 807b336:	68fb      	ldr	r3, [r7, #12]
 807b338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b33c:	461a      	mov	r2, r3
 807b33e:	680b      	ldr	r3, [r1, #0]
 807b340:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 807b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 807b344:	2b01      	cmp	r3, #1
 807b346:	d10c      	bne.n	807b362 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 807b348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807b34a:	2b00      	cmp	r3, #0
 807b34c:	d104      	bne.n	807b358 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 807b34e:	2100      	movs	r1, #0
 807b350:	6878      	ldr	r0, [r7, #4]
 807b352:	f000 f949 	bl	807b5e8 <USB_SetDevSpeed>
 807b356:	e008      	b.n	807b36a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 807b358:	2101      	movs	r1, #1
 807b35a:	6878      	ldr	r0, [r7, #4]
 807b35c:	f000 f944 	bl	807b5e8 <USB_SetDevSpeed>
 807b360:	e003      	b.n	807b36a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 807b362:	2103      	movs	r1, #3
 807b364:	6878      	ldr	r0, [r7, #4]
 807b366:	f000 f93f 	bl	807b5e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 807b36a:	2110      	movs	r1, #16
 807b36c:	6878      	ldr	r0, [r7, #4]
 807b36e:	f000 f8f3 	bl	807b558 <USB_FlushTxFifo>
 807b372:	4603      	mov	r3, r0
 807b374:	2b00      	cmp	r3, #0
 807b376:	d001      	beq.n	807b37c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 807b378:	2301      	movs	r3, #1
 807b37a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 807b37c:	6878      	ldr	r0, [r7, #4]
 807b37e:	f000 f911 	bl	807b5a4 <USB_FlushRxFifo>
 807b382:	4603      	mov	r3, r0
 807b384:	2b00      	cmp	r3, #0
 807b386:	d001      	beq.n	807b38c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 807b388:	2301      	movs	r3, #1
 807b38a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 807b38c:	68fb      	ldr	r3, [r7, #12]
 807b38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b392:	461a      	mov	r2, r3
 807b394:	2300      	movs	r3, #0
 807b396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 807b398:	68fb      	ldr	r3, [r7, #12]
 807b39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b39e:	461a      	mov	r2, r3
 807b3a0:	2300      	movs	r3, #0
 807b3a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 807b3a4:	68fb      	ldr	r3, [r7, #12]
 807b3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b3aa:	461a      	mov	r2, r3
 807b3ac:	2300      	movs	r3, #0
 807b3ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b3b0:	2300      	movs	r3, #0
 807b3b2:	613b      	str	r3, [r7, #16]
 807b3b4:	e043      	b.n	807b43e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 807b3b6:	693b      	ldr	r3, [r7, #16]
 807b3b8:	015a      	lsls	r2, r3, #5
 807b3ba:	68fb      	ldr	r3, [r7, #12]
 807b3bc:	4413      	add	r3, r2
 807b3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b3c2:	681b      	ldr	r3, [r3, #0]
 807b3c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807b3c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 807b3cc:	d118      	bne.n	807b400 <USB_DevInit+0x170>
    {
      if (i == 0U)
 807b3ce:	693b      	ldr	r3, [r7, #16]
 807b3d0:	2b00      	cmp	r3, #0
 807b3d2:	d10a      	bne.n	807b3ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 807b3d4:	693b      	ldr	r3, [r7, #16]
 807b3d6:	015a      	lsls	r2, r3, #5
 807b3d8:	68fb      	ldr	r3, [r7, #12]
 807b3da:	4413      	add	r3, r2
 807b3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b3e0:	461a      	mov	r2, r3
 807b3e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 807b3e6:	6013      	str	r3, [r2, #0]
 807b3e8:	e013      	b.n	807b412 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 807b3ea:	693b      	ldr	r3, [r7, #16]
 807b3ec:	015a      	lsls	r2, r3, #5
 807b3ee:	68fb      	ldr	r3, [r7, #12]
 807b3f0:	4413      	add	r3, r2
 807b3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b3f6:	461a      	mov	r2, r3
 807b3f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 807b3fc:	6013      	str	r3, [r2, #0]
 807b3fe:	e008      	b.n	807b412 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 807b400:	693b      	ldr	r3, [r7, #16]
 807b402:	015a      	lsls	r2, r3, #5
 807b404:	68fb      	ldr	r3, [r7, #12]
 807b406:	4413      	add	r3, r2
 807b408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b40c:	461a      	mov	r2, r3
 807b40e:	2300      	movs	r3, #0
 807b410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 807b412:	693b      	ldr	r3, [r7, #16]
 807b414:	015a      	lsls	r2, r3, #5
 807b416:	68fb      	ldr	r3, [r7, #12]
 807b418:	4413      	add	r3, r2
 807b41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b41e:	461a      	mov	r2, r3
 807b420:	2300      	movs	r3, #0
 807b422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 807b424:	693b      	ldr	r3, [r7, #16]
 807b426:	015a      	lsls	r2, r3, #5
 807b428:	68fb      	ldr	r3, [r7, #12]
 807b42a:	4413      	add	r3, r2
 807b42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b430:	461a      	mov	r2, r3
 807b432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 807b436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b438:	693b      	ldr	r3, [r7, #16]
 807b43a:	3301      	adds	r3, #1
 807b43c:	613b      	str	r3, [r7, #16]
 807b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807b440:	693a      	ldr	r2, [r7, #16]
 807b442:	429a      	cmp	r2, r3
 807b444:	d3b7      	bcc.n	807b3b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b446:	2300      	movs	r3, #0
 807b448:	613b      	str	r3, [r7, #16]
 807b44a:	e043      	b.n	807b4d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 807b44c:	693b      	ldr	r3, [r7, #16]
 807b44e:	015a      	lsls	r2, r3, #5
 807b450:	68fb      	ldr	r3, [r7, #12]
 807b452:	4413      	add	r3, r2
 807b454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b458:	681b      	ldr	r3, [r3, #0]
 807b45a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807b45e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 807b462:	d118      	bne.n	807b496 <USB_DevInit+0x206>
    {
      if (i == 0U)
 807b464:	693b      	ldr	r3, [r7, #16]
 807b466:	2b00      	cmp	r3, #0
 807b468:	d10a      	bne.n	807b480 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 807b46a:	693b      	ldr	r3, [r7, #16]
 807b46c:	015a      	lsls	r2, r3, #5
 807b46e:	68fb      	ldr	r3, [r7, #12]
 807b470:	4413      	add	r3, r2
 807b472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b476:	461a      	mov	r2, r3
 807b478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 807b47c:	6013      	str	r3, [r2, #0]
 807b47e:	e013      	b.n	807b4a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 807b480:	693b      	ldr	r3, [r7, #16]
 807b482:	015a      	lsls	r2, r3, #5
 807b484:	68fb      	ldr	r3, [r7, #12]
 807b486:	4413      	add	r3, r2
 807b488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b48c:	461a      	mov	r2, r3
 807b48e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 807b492:	6013      	str	r3, [r2, #0]
 807b494:	e008      	b.n	807b4a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 807b496:	693b      	ldr	r3, [r7, #16]
 807b498:	015a      	lsls	r2, r3, #5
 807b49a:	68fb      	ldr	r3, [r7, #12]
 807b49c:	4413      	add	r3, r2
 807b49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b4a2:	461a      	mov	r2, r3
 807b4a4:	2300      	movs	r3, #0
 807b4a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 807b4a8:	693b      	ldr	r3, [r7, #16]
 807b4aa:	015a      	lsls	r2, r3, #5
 807b4ac:	68fb      	ldr	r3, [r7, #12]
 807b4ae:	4413      	add	r3, r2
 807b4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b4b4:	461a      	mov	r2, r3
 807b4b6:	2300      	movs	r3, #0
 807b4b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 807b4ba:	693b      	ldr	r3, [r7, #16]
 807b4bc:	015a      	lsls	r2, r3, #5
 807b4be:	68fb      	ldr	r3, [r7, #12]
 807b4c0:	4413      	add	r3, r2
 807b4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b4c6:	461a      	mov	r2, r3
 807b4c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 807b4cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 807b4ce:	693b      	ldr	r3, [r7, #16]
 807b4d0:	3301      	adds	r3, #1
 807b4d2:	613b      	str	r3, [r7, #16]
 807b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807b4d6:	693a      	ldr	r2, [r7, #16]
 807b4d8:	429a      	cmp	r2, r3
 807b4da:	d3b7      	bcc.n	807b44c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 807b4dc:	68fb      	ldr	r3, [r7, #12]
 807b4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b4e2:	691b      	ldr	r3, [r3, #16]
 807b4e4:	68fa      	ldr	r2, [r7, #12]
 807b4e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807b4ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 807b4ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 807b4f0:	687b      	ldr	r3, [r7, #4]
 807b4f2:	2200      	movs	r2, #0
 807b4f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 807b4f6:	687b      	ldr	r3, [r7, #4]
 807b4f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 807b4fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 807b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807b500:	2b00      	cmp	r3, #0
 807b502:	d105      	bne.n	807b510 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 807b504:	687b      	ldr	r3, [r7, #4]
 807b506:	699b      	ldr	r3, [r3, #24]
 807b508:	f043 0210 	orr.w	r2, r3, #16
 807b50c:	687b      	ldr	r3, [r7, #4]
 807b50e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 807b510:	687b      	ldr	r3, [r7, #4]
 807b512:	699a      	ldr	r2, [r3, #24]
 807b514:	4b0f      	ldr	r3, [pc, #60]	; (807b554 <USB_DevInit+0x2c4>)
 807b516:	4313      	orrs	r3, r2
 807b518:	687a      	ldr	r2, [r7, #4]
 807b51a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 807b51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 807b51e:	2b00      	cmp	r3, #0
 807b520:	d005      	beq.n	807b52e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 807b522:	687b      	ldr	r3, [r7, #4]
 807b524:	699b      	ldr	r3, [r3, #24]
 807b526:	f043 0208 	orr.w	r2, r3, #8
 807b52a:	687b      	ldr	r3, [r7, #4]
 807b52c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 807b52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 807b530:	2b01      	cmp	r3, #1
 807b532:	d107      	bne.n	807b544 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 807b534:	687b      	ldr	r3, [r7, #4]
 807b536:	699b      	ldr	r3, [r3, #24]
 807b538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 807b53c:	f043 0304 	orr.w	r3, r3, #4
 807b540:	687a      	ldr	r2, [r7, #4]
 807b542:	6193      	str	r3, [r2, #24]
  }

  return ret;
 807b544:	7dfb      	ldrb	r3, [r7, #23]
}
 807b546:	4618      	mov	r0, r3
 807b548:	3718      	adds	r7, #24
 807b54a:	46bd      	mov	sp, r7
 807b54c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 807b550:	b004      	add	sp, #16
 807b552:	4770      	bx	lr
 807b554:	803c3800 	.word	0x803c3800

0807b558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 807b558:	b480      	push	{r7}
 807b55a:	b085      	sub	sp, #20
 807b55c:	af00      	add	r7, sp, #0
 807b55e:	6078      	str	r0, [r7, #4]
 807b560:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 807b562:	2300      	movs	r3, #0
 807b564:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 807b566:	683b      	ldr	r3, [r7, #0]
 807b568:	019b      	lsls	r3, r3, #6
 807b56a:	f043 0220 	orr.w	r2, r3, #32
 807b56e:	687b      	ldr	r3, [r7, #4]
 807b570:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807b572:	68fb      	ldr	r3, [r7, #12]
 807b574:	3301      	adds	r3, #1
 807b576:	60fb      	str	r3, [r7, #12]
 807b578:	68fb      	ldr	r3, [r7, #12]
 807b57a:	4a09      	ldr	r2, [pc, #36]	; (807b5a0 <USB_FlushTxFifo+0x48>)
 807b57c:	4293      	cmp	r3, r2
 807b57e:	d901      	bls.n	807b584 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 807b580:	2303      	movs	r3, #3
 807b582:	e006      	b.n	807b592 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 807b584:	687b      	ldr	r3, [r7, #4]
 807b586:	691b      	ldr	r3, [r3, #16]
 807b588:	f003 0320 	and.w	r3, r3, #32
 807b58c:	2b20      	cmp	r3, #32
 807b58e:	d0f0      	beq.n	807b572 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 807b590:	2300      	movs	r3, #0
}
 807b592:	4618      	mov	r0, r3
 807b594:	3714      	adds	r7, #20
 807b596:	46bd      	mov	sp, r7
 807b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b59c:	4770      	bx	lr
 807b59e:	bf00      	nop
 807b5a0:	00030d40 	.word	0x00030d40

0807b5a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 807b5a4:	b480      	push	{r7}
 807b5a6:	b085      	sub	sp, #20
 807b5a8:	af00      	add	r7, sp, #0
 807b5aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 807b5ac:	2300      	movs	r3, #0
 807b5ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 807b5b0:	687b      	ldr	r3, [r7, #4]
 807b5b2:	2210      	movs	r2, #16
 807b5b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807b5b6:	68fb      	ldr	r3, [r7, #12]
 807b5b8:	3301      	adds	r3, #1
 807b5ba:	60fb      	str	r3, [r7, #12]
 807b5bc:	68fb      	ldr	r3, [r7, #12]
 807b5be:	4a09      	ldr	r2, [pc, #36]	; (807b5e4 <USB_FlushRxFifo+0x40>)
 807b5c0:	4293      	cmp	r3, r2
 807b5c2:	d901      	bls.n	807b5c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 807b5c4:	2303      	movs	r3, #3
 807b5c6:	e006      	b.n	807b5d6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 807b5c8:	687b      	ldr	r3, [r7, #4]
 807b5ca:	691b      	ldr	r3, [r3, #16]
 807b5cc:	f003 0310 	and.w	r3, r3, #16
 807b5d0:	2b10      	cmp	r3, #16
 807b5d2:	d0f0      	beq.n	807b5b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 807b5d4:	2300      	movs	r3, #0
}
 807b5d6:	4618      	mov	r0, r3
 807b5d8:	3714      	adds	r7, #20
 807b5da:	46bd      	mov	sp, r7
 807b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b5e0:	4770      	bx	lr
 807b5e2:	bf00      	nop
 807b5e4:	00030d40 	.word	0x00030d40

0807b5e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 807b5e8:	b480      	push	{r7}
 807b5ea:	b085      	sub	sp, #20
 807b5ec:	af00      	add	r7, sp, #0
 807b5ee:	6078      	str	r0, [r7, #4]
 807b5f0:	460b      	mov	r3, r1
 807b5f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b5f4:	687b      	ldr	r3, [r7, #4]
 807b5f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 807b5f8:	68fb      	ldr	r3, [r7, #12]
 807b5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b5fe:	681a      	ldr	r2, [r3, #0]
 807b600:	78fb      	ldrb	r3, [r7, #3]
 807b602:	68f9      	ldr	r1, [r7, #12]
 807b604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b608:	4313      	orrs	r3, r2
 807b60a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 807b60c:	2300      	movs	r3, #0
}
 807b60e:	4618      	mov	r0, r3
 807b610:	3714      	adds	r7, #20
 807b612:	46bd      	mov	sp, r7
 807b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b618:	4770      	bx	lr

0807b61a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 807b61a:	b480      	push	{r7}
 807b61c:	b087      	sub	sp, #28
 807b61e:	af00      	add	r7, sp, #0
 807b620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b622:	687b      	ldr	r3, [r7, #4]
 807b624:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 807b626:	693b      	ldr	r3, [r7, #16]
 807b628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b62c:	689b      	ldr	r3, [r3, #8]
 807b62e:	f003 0306 	and.w	r3, r3, #6
 807b632:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 807b634:	68fb      	ldr	r3, [r7, #12]
 807b636:	2b00      	cmp	r3, #0
 807b638:	d102      	bne.n	807b640 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 807b63a:	2300      	movs	r3, #0
 807b63c:	75fb      	strb	r3, [r7, #23]
 807b63e:	e00a      	b.n	807b656 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 807b640:	68fb      	ldr	r3, [r7, #12]
 807b642:	2b02      	cmp	r3, #2
 807b644:	d002      	beq.n	807b64c <USB_GetDevSpeed+0x32>
 807b646:	68fb      	ldr	r3, [r7, #12]
 807b648:	2b06      	cmp	r3, #6
 807b64a:	d102      	bne.n	807b652 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 807b64c:	2302      	movs	r3, #2
 807b64e:	75fb      	strb	r3, [r7, #23]
 807b650:	e001      	b.n	807b656 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 807b652:	230f      	movs	r3, #15
 807b654:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 807b656:	7dfb      	ldrb	r3, [r7, #23]
}
 807b658:	4618      	mov	r0, r3
 807b65a:	371c      	adds	r7, #28
 807b65c:	46bd      	mov	sp, r7
 807b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b662:	4770      	bx	lr

0807b664 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807b664:	b480      	push	{r7}
 807b666:	b085      	sub	sp, #20
 807b668:	af00      	add	r7, sp, #0
 807b66a:	6078      	str	r0, [r7, #4]
 807b66c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b66e:	687b      	ldr	r3, [r7, #4]
 807b670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807b672:	683b      	ldr	r3, [r7, #0]
 807b674:	781b      	ldrb	r3, [r3, #0]
 807b676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807b678:	683b      	ldr	r3, [r7, #0]
 807b67a:	785b      	ldrb	r3, [r3, #1]
 807b67c:	2b01      	cmp	r3, #1
 807b67e:	d13a      	bne.n	807b6f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 807b680:	68fb      	ldr	r3, [r7, #12]
 807b682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b686:	69da      	ldr	r2, [r3, #28]
 807b688:	683b      	ldr	r3, [r7, #0]
 807b68a:	781b      	ldrb	r3, [r3, #0]
 807b68c:	f003 030f 	and.w	r3, r3, #15
 807b690:	2101      	movs	r1, #1
 807b692:	fa01 f303 	lsl.w	r3, r1, r3
 807b696:	b29b      	uxth	r3, r3
 807b698:	68f9      	ldr	r1, [r7, #12]
 807b69a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b69e:	4313      	orrs	r3, r2
 807b6a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 807b6a2:	68bb      	ldr	r3, [r7, #8]
 807b6a4:	015a      	lsls	r2, r3, #5
 807b6a6:	68fb      	ldr	r3, [r7, #12]
 807b6a8:	4413      	add	r3, r2
 807b6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b6ae:	681b      	ldr	r3, [r3, #0]
 807b6b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 807b6b4:	2b00      	cmp	r3, #0
 807b6b6:	d155      	bne.n	807b764 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b6b8:	68bb      	ldr	r3, [r7, #8]
 807b6ba:	015a      	lsls	r2, r3, #5
 807b6bc:	68fb      	ldr	r3, [r7, #12]
 807b6be:	4413      	add	r3, r2
 807b6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b6c4:	681a      	ldr	r2, [r3, #0]
 807b6c6:	683b      	ldr	r3, [r7, #0]
 807b6c8:	689b      	ldr	r3, [r3, #8]
 807b6ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 807b6ce:	683b      	ldr	r3, [r7, #0]
 807b6d0:	78db      	ldrb	r3, [r3, #3]
 807b6d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b6d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 807b6d6:	68bb      	ldr	r3, [r7, #8]
 807b6d8:	059b      	lsls	r3, r3, #22
 807b6da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807b6dc:	4313      	orrs	r3, r2
 807b6de:	68ba      	ldr	r2, [r7, #8]
 807b6e0:	0151      	lsls	r1, r2, #5
 807b6e2:	68fa      	ldr	r2, [r7, #12]
 807b6e4:	440a      	add	r2, r1
 807b6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b6ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807b6ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 807b6f2:	6013      	str	r3, [r2, #0]
 807b6f4:	e036      	b.n	807b764 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 807b6f6:	68fb      	ldr	r3, [r7, #12]
 807b6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b6fc:	69da      	ldr	r2, [r3, #28]
 807b6fe:	683b      	ldr	r3, [r7, #0]
 807b700:	781b      	ldrb	r3, [r3, #0]
 807b702:	f003 030f 	and.w	r3, r3, #15
 807b706:	2101      	movs	r1, #1
 807b708:	fa01 f303 	lsl.w	r3, r1, r3
 807b70c:	041b      	lsls	r3, r3, #16
 807b70e:	68f9      	ldr	r1, [r7, #12]
 807b710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b714:	4313      	orrs	r3, r2
 807b716:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 807b718:	68bb      	ldr	r3, [r7, #8]
 807b71a:	015a      	lsls	r2, r3, #5
 807b71c:	68fb      	ldr	r3, [r7, #12]
 807b71e:	4413      	add	r3, r2
 807b720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b724:	681b      	ldr	r3, [r3, #0]
 807b726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 807b72a:	2b00      	cmp	r3, #0
 807b72c:	d11a      	bne.n	807b764 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 807b72e:	68bb      	ldr	r3, [r7, #8]
 807b730:	015a      	lsls	r2, r3, #5
 807b732:	68fb      	ldr	r3, [r7, #12]
 807b734:	4413      	add	r3, r2
 807b736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807b73a:	681a      	ldr	r2, [r3, #0]
 807b73c:	683b      	ldr	r3, [r7, #0]
 807b73e:	689b      	ldr	r3, [r3, #8]
 807b740:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 807b744:	683b      	ldr	r3, [r7, #0]
 807b746:	78db      	ldrb	r3, [r3, #3]
 807b748:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 807b74a:	430b      	orrs	r3, r1
 807b74c:	4313      	orrs	r3, r2
 807b74e:	68ba      	ldr	r2, [r7, #8]
 807b750:	0151      	lsls	r1, r2, #5
 807b752:	68fa      	ldr	r2, [r7, #12]
 807b754:	440a      	add	r2, r1
 807b756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807b75a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807b75e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 807b762:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 807b764:	2300      	movs	r3, #0
}
 807b766:	4618      	mov	r0, r3
 807b768:	3714      	adds	r7, #20
 807b76a:	46bd      	mov	sp, r7
 807b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807b770:	4770      	bx	lr
	...

0807b774 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 807b774:	b580      	push	{r7, lr}
 807b776:	b08a      	sub	sp, #40	; 0x28
 807b778:	af02      	add	r7, sp, #8
 807b77a:	60f8      	str	r0, [r7, #12]
 807b77c:	60b9      	str	r1, [r7, #8]
 807b77e:	4613      	mov	r3, r2
 807b780:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807b782:	68fb      	ldr	r3, [r7, #12]
 807b784:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 807b786:	68bb      	ldr	r3, [r7, #8]
 807b788:	781b      	ldrb	r3, [r3, #0]
 807b78a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 807b78c:	68bb      	ldr	r3, [r7, #8]
 807b78e:	785b      	ldrb	r3, [r3, #1]
 807b790:	2b01      	cmp	r3, #1
 807b792:	f040 815c 	bne.w	807ba4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 807b796:	68bb      	ldr	r3, [r7, #8]
 807b798:	695b      	ldr	r3, [r3, #20]
 807b79a:	2b00      	cmp	r3, #0
 807b79c:	d132      	bne.n	807b804 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807b79e:	69bb      	ldr	r3, [r7, #24]
 807b7a0:	015a      	lsls	r2, r3, #5
 807b7a2:	69fb      	ldr	r3, [r7, #28]
 807b7a4:	4413      	add	r3, r2
 807b7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b7aa:	691b      	ldr	r3, [r3, #16]
 807b7ac:	69ba      	ldr	r2, [r7, #24]
 807b7ae:	0151      	lsls	r1, r2, #5
 807b7b0:	69fa      	ldr	r2, [r7, #28]
 807b7b2:	440a      	add	r2, r1
 807b7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b7b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807b7bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807b7c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807b7c2:	69bb      	ldr	r3, [r7, #24]
 807b7c4:	015a      	lsls	r2, r3, #5
 807b7c6:	69fb      	ldr	r3, [r7, #28]
 807b7c8:	4413      	add	r3, r2
 807b7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b7ce:	691b      	ldr	r3, [r3, #16]
 807b7d0:	69ba      	ldr	r2, [r7, #24]
 807b7d2:	0151      	lsls	r1, r2, #5
 807b7d4:	69fa      	ldr	r2, [r7, #28]
 807b7d6:	440a      	add	r2, r1
 807b7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b7dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807b7e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807b7e2:	69bb      	ldr	r3, [r7, #24]
 807b7e4:	015a      	lsls	r2, r3, #5
 807b7e6:	69fb      	ldr	r3, [r7, #28]
 807b7e8:	4413      	add	r3, r2
 807b7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b7ee:	691b      	ldr	r3, [r3, #16]
 807b7f0:	69ba      	ldr	r2, [r7, #24]
 807b7f2:	0151      	lsls	r1, r2, #5
 807b7f4:	69fa      	ldr	r2, [r7, #28]
 807b7f6:	440a      	add	r2, r1
 807b7f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b7fc:	0cdb      	lsrs	r3, r3, #19
 807b7fe:	04db      	lsls	r3, r3, #19
 807b800:	6113      	str	r3, [r2, #16]
 807b802:	e074      	b.n	807b8ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807b804:	69bb      	ldr	r3, [r7, #24]
 807b806:	015a      	lsls	r2, r3, #5
 807b808:	69fb      	ldr	r3, [r7, #28]
 807b80a:	4413      	add	r3, r2
 807b80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b810:	691b      	ldr	r3, [r3, #16]
 807b812:	69ba      	ldr	r2, [r7, #24]
 807b814:	0151      	lsls	r1, r2, #5
 807b816:	69fa      	ldr	r2, [r7, #28]
 807b818:	440a      	add	r2, r1
 807b81a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b81e:	0cdb      	lsrs	r3, r3, #19
 807b820:	04db      	lsls	r3, r3, #19
 807b822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807b824:	69bb      	ldr	r3, [r7, #24]
 807b826:	015a      	lsls	r2, r3, #5
 807b828:	69fb      	ldr	r3, [r7, #28]
 807b82a:	4413      	add	r3, r2
 807b82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b830:	691b      	ldr	r3, [r3, #16]
 807b832:	69ba      	ldr	r2, [r7, #24]
 807b834:	0151      	lsls	r1, r2, #5
 807b836:	69fa      	ldr	r2, [r7, #28]
 807b838:	440a      	add	r2, r1
 807b83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b83e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807b842:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807b846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 807b848:	69bb      	ldr	r3, [r7, #24]
 807b84a:	015a      	lsls	r2, r3, #5
 807b84c:	69fb      	ldr	r3, [r7, #28]
 807b84e:	4413      	add	r3, r2
 807b850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b854:	691a      	ldr	r2, [r3, #16]
 807b856:	68bb      	ldr	r3, [r7, #8]
 807b858:	6959      	ldr	r1, [r3, #20]
 807b85a:	68bb      	ldr	r3, [r7, #8]
 807b85c:	689b      	ldr	r3, [r3, #8]
 807b85e:	440b      	add	r3, r1
 807b860:	1e59      	subs	r1, r3, #1
 807b862:	68bb      	ldr	r3, [r7, #8]
 807b864:	689b      	ldr	r3, [r3, #8]
 807b866:	fbb1 f3f3 	udiv	r3, r1, r3
 807b86a:	04d9      	lsls	r1, r3, #19
 807b86c:	4b9d      	ldr	r3, [pc, #628]	; (807bae4 <USB_EPStartXfer+0x370>)
 807b86e:	400b      	ands	r3, r1
 807b870:	69b9      	ldr	r1, [r7, #24]
 807b872:	0148      	lsls	r0, r1, #5
 807b874:	69f9      	ldr	r1, [r7, #28]
 807b876:	4401      	add	r1, r0
 807b878:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807b87c:	4313      	orrs	r3, r2
 807b87e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 807b880:	69bb      	ldr	r3, [r7, #24]
 807b882:	015a      	lsls	r2, r3, #5
 807b884:	69fb      	ldr	r3, [r7, #28]
 807b886:	4413      	add	r3, r2
 807b888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b88c:	691a      	ldr	r2, [r3, #16]
 807b88e:	68bb      	ldr	r3, [r7, #8]
 807b890:	695b      	ldr	r3, [r3, #20]
 807b892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807b896:	69b9      	ldr	r1, [r7, #24]
 807b898:	0148      	lsls	r0, r1, #5
 807b89a:	69f9      	ldr	r1, [r7, #28]
 807b89c:	4401      	add	r1, r0
 807b89e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807b8a2:	4313      	orrs	r3, r2
 807b8a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 807b8a6:	68bb      	ldr	r3, [r7, #8]
 807b8a8:	78db      	ldrb	r3, [r3, #3]
 807b8aa:	2b01      	cmp	r3, #1
 807b8ac:	d11f      	bne.n	807b8ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 807b8ae:	69bb      	ldr	r3, [r7, #24]
 807b8b0:	015a      	lsls	r2, r3, #5
 807b8b2:	69fb      	ldr	r3, [r7, #28]
 807b8b4:	4413      	add	r3, r2
 807b8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b8ba:	691b      	ldr	r3, [r3, #16]
 807b8bc:	69ba      	ldr	r2, [r7, #24]
 807b8be:	0151      	lsls	r1, r2, #5
 807b8c0:	69fa      	ldr	r2, [r7, #28]
 807b8c2:	440a      	add	r2, r1
 807b8c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b8c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 807b8cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 807b8ce:	69bb      	ldr	r3, [r7, #24]
 807b8d0:	015a      	lsls	r2, r3, #5
 807b8d2:	69fb      	ldr	r3, [r7, #28]
 807b8d4:	4413      	add	r3, r2
 807b8d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b8da:	691b      	ldr	r3, [r3, #16]
 807b8dc:	69ba      	ldr	r2, [r7, #24]
 807b8de:	0151      	lsls	r1, r2, #5
 807b8e0:	69fa      	ldr	r2, [r7, #28]
 807b8e2:	440a      	add	r2, r1
 807b8e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b8e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807b8ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 807b8ee:	79fb      	ldrb	r3, [r7, #7]
 807b8f0:	2b01      	cmp	r3, #1
 807b8f2:	d14b      	bne.n	807b98c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 807b8f4:	68bb      	ldr	r3, [r7, #8]
 807b8f6:	691b      	ldr	r3, [r3, #16]
 807b8f8:	2b00      	cmp	r3, #0
 807b8fa:	d009      	beq.n	807b910 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 807b8fc:	69bb      	ldr	r3, [r7, #24]
 807b8fe:	015a      	lsls	r2, r3, #5
 807b900:	69fb      	ldr	r3, [r7, #28]
 807b902:	4413      	add	r3, r2
 807b904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b908:	461a      	mov	r2, r3
 807b90a:	68bb      	ldr	r3, [r7, #8]
 807b90c:	691b      	ldr	r3, [r3, #16]
 807b90e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 807b910:	68bb      	ldr	r3, [r7, #8]
 807b912:	78db      	ldrb	r3, [r3, #3]
 807b914:	2b01      	cmp	r3, #1
 807b916:	d128      	bne.n	807b96a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807b918:	69fb      	ldr	r3, [r7, #28]
 807b91a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b91e:	689b      	ldr	r3, [r3, #8]
 807b920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807b924:	2b00      	cmp	r3, #0
 807b926:	d110      	bne.n	807b94a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 807b928:	69bb      	ldr	r3, [r7, #24]
 807b92a:	015a      	lsls	r2, r3, #5
 807b92c:	69fb      	ldr	r3, [r7, #28]
 807b92e:	4413      	add	r3, r2
 807b930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b934:	681b      	ldr	r3, [r3, #0]
 807b936:	69ba      	ldr	r2, [r7, #24]
 807b938:	0151      	lsls	r1, r2, #5
 807b93a:	69fa      	ldr	r2, [r7, #28]
 807b93c:	440a      	add	r2, r1
 807b93e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807b946:	6013      	str	r3, [r2, #0]
 807b948:	e00f      	b.n	807b96a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 807b94a:	69bb      	ldr	r3, [r7, #24]
 807b94c:	015a      	lsls	r2, r3, #5
 807b94e:	69fb      	ldr	r3, [r7, #28]
 807b950:	4413      	add	r3, r2
 807b952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b956:	681b      	ldr	r3, [r3, #0]
 807b958:	69ba      	ldr	r2, [r7, #24]
 807b95a:	0151      	lsls	r1, r2, #5
 807b95c:	69fa      	ldr	r2, [r7, #28]
 807b95e:	440a      	add	r2, r1
 807b960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807b968:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807b96a:	69bb      	ldr	r3, [r7, #24]
 807b96c:	015a      	lsls	r2, r3, #5
 807b96e:	69fb      	ldr	r3, [r7, #28]
 807b970:	4413      	add	r3, r2
 807b972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b976:	681b      	ldr	r3, [r3, #0]
 807b978:	69ba      	ldr	r2, [r7, #24]
 807b97a:	0151      	lsls	r1, r2, #5
 807b97c:	69fa      	ldr	r2, [r7, #28]
 807b97e:	440a      	add	r2, r1
 807b980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807b988:	6013      	str	r3, [r2, #0]
 807b98a:	e12f      	b.n	807bbec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807b98c:	69bb      	ldr	r3, [r7, #24]
 807b98e:	015a      	lsls	r2, r3, #5
 807b990:	69fb      	ldr	r3, [r7, #28]
 807b992:	4413      	add	r3, r2
 807b994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b998:	681b      	ldr	r3, [r3, #0]
 807b99a:	69ba      	ldr	r2, [r7, #24]
 807b99c:	0151      	lsls	r1, r2, #5
 807b99e:	69fa      	ldr	r2, [r7, #28]
 807b9a0:	440a      	add	r2, r1
 807b9a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807b9a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807b9aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 807b9ac:	68bb      	ldr	r3, [r7, #8]
 807b9ae:	78db      	ldrb	r3, [r3, #3]
 807b9b0:	2b01      	cmp	r3, #1
 807b9b2:	d015      	beq.n	807b9e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 807b9b4:	68bb      	ldr	r3, [r7, #8]
 807b9b6:	695b      	ldr	r3, [r3, #20]
 807b9b8:	2b00      	cmp	r3, #0
 807b9ba:	f000 8117 	beq.w	807bbec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807b9be:	69fb      	ldr	r3, [r7, #28]
 807b9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b9c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807b9c6:	68bb      	ldr	r3, [r7, #8]
 807b9c8:	781b      	ldrb	r3, [r3, #0]
 807b9ca:	f003 030f 	and.w	r3, r3, #15
 807b9ce:	2101      	movs	r1, #1
 807b9d0:	fa01 f303 	lsl.w	r3, r1, r3
 807b9d4:	69f9      	ldr	r1, [r7, #28]
 807b9d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807b9da:	4313      	orrs	r3, r2
 807b9dc:	634b      	str	r3, [r1, #52]	; 0x34
 807b9de:	e105      	b.n	807bbec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807b9e0:	69fb      	ldr	r3, [r7, #28]
 807b9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807b9e6:	689b      	ldr	r3, [r3, #8]
 807b9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807b9ec:	2b00      	cmp	r3, #0
 807b9ee:	d110      	bne.n	807ba12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 807b9f0:	69bb      	ldr	r3, [r7, #24]
 807b9f2:	015a      	lsls	r2, r3, #5
 807b9f4:	69fb      	ldr	r3, [r7, #28]
 807b9f6:	4413      	add	r3, r2
 807b9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807b9fc:	681b      	ldr	r3, [r3, #0]
 807b9fe:	69ba      	ldr	r2, [r7, #24]
 807ba00:	0151      	lsls	r1, r2, #5
 807ba02:	69fa      	ldr	r2, [r7, #28]
 807ba04:	440a      	add	r2, r1
 807ba06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807ba0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807ba0e:	6013      	str	r3, [r2, #0]
 807ba10:	e00f      	b.n	807ba32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 807ba12:	69bb      	ldr	r3, [r7, #24]
 807ba14:	015a      	lsls	r2, r3, #5
 807ba16:	69fb      	ldr	r3, [r7, #28]
 807ba18:	4413      	add	r3, r2
 807ba1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807ba1e:	681b      	ldr	r3, [r3, #0]
 807ba20:	69ba      	ldr	r2, [r7, #24]
 807ba22:	0151      	lsls	r1, r2, #5
 807ba24:	69fa      	ldr	r2, [r7, #28]
 807ba26:	440a      	add	r2, r1
 807ba28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807ba2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807ba30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 807ba32:	68bb      	ldr	r3, [r7, #8]
 807ba34:	68d9      	ldr	r1, [r3, #12]
 807ba36:	68bb      	ldr	r3, [r7, #8]
 807ba38:	781a      	ldrb	r2, [r3, #0]
 807ba3a:	68bb      	ldr	r3, [r7, #8]
 807ba3c:	695b      	ldr	r3, [r3, #20]
 807ba3e:	b298      	uxth	r0, r3
 807ba40:	79fb      	ldrb	r3, [r7, #7]
 807ba42:	9300      	str	r3, [sp, #0]
 807ba44:	4603      	mov	r3, r0
 807ba46:	68f8      	ldr	r0, [r7, #12]
 807ba48:	f000 fa2b 	bl	807bea2 <USB_WritePacket>
 807ba4c:	e0ce      	b.n	807bbec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 807ba4e:	69bb      	ldr	r3, [r7, #24]
 807ba50:	015a      	lsls	r2, r3, #5
 807ba52:	69fb      	ldr	r3, [r7, #28]
 807ba54:	4413      	add	r3, r2
 807ba56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807ba5a:	691b      	ldr	r3, [r3, #16]
 807ba5c:	69ba      	ldr	r2, [r7, #24]
 807ba5e:	0151      	lsls	r1, r2, #5
 807ba60:	69fa      	ldr	r2, [r7, #28]
 807ba62:	440a      	add	r2, r1
 807ba64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807ba68:	0cdb      	lsrs	r3, r3, #19
 807ba6a:	04db      	lsls	r3, r3, #19
 807ba6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807ba6e:	69bb      	ldr	r3, [r7, #24]
 807ba70:	015a      	lsls	r2, r3, #5
 807ba72:	69fb      	ldr	r3, [r7, #28]
 807ba74:	4413      	add	r3, r2
 807ba76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807ba7a:	691b      	ldr	r3, [r3, #16]
 807ba7c:	69ba      	ldr	r2, [r7, #24]
 807ba7e:	0151      	lsls	r1, r2, #5
 807ba80:	69fa      	ldr	r2, [r7, #28]
 807ba82:	440a      	add	r2, r1
 807ba84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807ba88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807ba8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807ba90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 807ba92:	68bb      	ldr	r3, [r7, #8]
 807ba94:	695b      	ldr	r3, [r3, #20]
 807ba96:	2b00      	cmp	r3, #0
 807ba98:	d126      	bne.n	807bae8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 807ba9a:	69bb      	ldr	r3, [r7, #24]
 807ba9c:	015a      	lsls	r2, r3, #5
 807ba9e:	69fb      	ldr	r3, [r7, #28]
 807baa0:	4413      	add	r3, r2
 807baa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807baa6:	691a      	ldr	r2, [r3, #16]
 807baa8:	68bb      	ldr	r3, [r7, #8]
 807baaa:	689b      	ldr	r3, [r3, #8]
 807baac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bab0:	69b9      	ldr	r1, [r7, #24]
 807bab2:	0148      	lsls	r0, r1, #5
 807bab4:	69f9      	ldr	r1, [r7, #28]
 807bab6:	4401      	add	r1, r0
 807bab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807babc:	4313      	orrs	r3, r2
 807babe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807bac0:	69bb      	ldr	r3, [r7, #24]
 807bac2:	015a      	lsls	r2, r3, #5
 807bac4:	69fb      	ldr	r3, [r7, #28]
 807bac6:	4413      	add	r3, r2
 807bac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bacc:	691b      	ldr	r3, [r3, #16]
 807bace:	69ba      	ldr	r2, [r7, #24]
 807bad0:	0151      	lsls	r1, r2, #5
 807bad2:	69fa      	ldr	r2, [r7, #28]
 807bad4:	440a      	add	r2, r1
 807bad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807bade:	6113      	str	r3, [r2, #16]
 807bae0:	e036      	b.n	807bb50 <USB_EPStartXfer+0x3dc>
 807bae2:	bf00      	nop
 807bae4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 807bae8:	68bb      	ldr	r3, [r7, #8]
 807baea:	695a      	ldr	r2, [r3, #20]
 807baec:	68bb      	ldr	r3, [r7, #8]
 807baee:	689b      	ldr	r3, [r3, #8]
 807baf0:	4413      	add	r3, r2
 807baf2:	1e5a      	subs	r2, r3, #1
 807baf4:	68bb      	ldr	r3, [r7, #8]
 807baf6:	689b      	ldr	r3, [r3, #8]
 807baf8:	fbb2 f3f3 	udiv	r3, r2, r3
 807bafc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 807bafe:	69bb      	ldr	r3, [r7, #24]
 807bb00:	015a      	lsls	r2, r3, #5
 807bb02:	69fb      	ldr	r3, [r7, #28]
 807bb04:	4413      	add	r3, r2
 807bb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb0a:	691a      	ldr	r2, [r3, #16]
 807bb0c:	8afb      	ldrh	r3, [r7, #22]
 807bb0e:	04d9      	lsls	r1, r3, #19
 807bb10:	4b39      	ldr	r3, [pc, #228]	; (807bbf8 <USB_EPStartXfer+0x484>)
 807bb12:	400b      	ands	r3, r1
 807bb14:	69b9      	ldr	r1, [r7, #24]
 807bb16:	0148      	lsls	r0, r1, #5
 807bb18:	69f9      	ldr	r1, [r7, #28]
 807bb1a:	4401      	add	r1, r0
 807bb1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807bb20:	4313      	orrs	r3, r2
 807bb22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 807bb24:	69bb      	ldr	r3, [r7, #24]
 807bb26:	015a      	lsls	r2, r3, #5
 807bb28:	69fb      	ldr	r3, [r7, #28]
 807bb2a:	4413      	add	r3, r2
 807bb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb30:	691a      	ldr	r2, [r3, #16]
 807bb32:	68bb      	ldr	r3, [r7, #8]
 807bb34:	689b      	ldr	r3, [r3, #8]
 807bb36:	8af9      	ldrh	r1, [r7, #22]
 807bb38:	fb01 f303 	mul.w	r3, r1, r3
 807bb3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bb40:	69b9      	ldr	r1, [r7, #24]
 807bb42:	0148      	lsls	r0, r1, #5
 807bb44:	69f9      	ldr	r1, [r7, #28]
 807bb46:	4401      	add	r1, r0
 807bb48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807bb4c:	4313      	orrs	r3, r2
 807bb4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 807bb50:	79fb      	ldrb	r3, [r7, #7]
 807bb52:	2b01      	cmp	r3, #1
 807bb54:	d10d      	bne.n	807bb72 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 807bb56:	68bb      	ldr	r3, [r7, #8]
 807bb58:	68db      	ldr	r3, [r3, #12]
 807bb5a:	2b00      	cmp	r3, #0
 807bb5c:	d009      	beq.n	807bb72 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 807bb5e:	68bb      	ldr	r3, [r7, #8]
 807bb60:	68d9      	ldr	r1, [r3, #12]
 807bb62:	69bb      	ldr	r3, [r7, #24]
 807bb64:	015a      	lsls	r2, r3, #5
 807bb66:	69fb      	ldr	r3, [r7, #28]
 807bb68:	4413      	add	r3, r2
 807bb6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb6e:	460a      	mov	r2, r1
 807bb70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 807bb72:	68bb      	ldr	r3, [r7, #8]
 807bb74:	78db      	ldrb	r3, [r3, #3]
 807bb76:	2b01      	cmp	r3, #1
 807bb78:	d128      	bne.n	807bbcc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807bb7a:	69fb      	ldr	r3, [r7, #28]
 807bb7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807bb80:	689b      	ldr	r3, [r3, #8]
 807bb82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807bb86:	2b00      	cmp	r3, #0
 807bb88:	d110      	bne.n	807bbac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 807bb8a:	69bb      	ldr	r3, [r7, #24]
 807bb8c:	015a      	lsls	r2, r3, #5
 807bb8e:	69fb      	ldr	r3, [r7, #28]
 807bb90:	4413      	add	r3, r2
 807bb92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bb96:	681b      	ldr	r3, [r3, #0]
 807bb98:	69ba      	ldr	r2, [r7, #24]
 807bb9a:	0151      	lsls	r1, r2, #5
 807bb9c:	69fa      	ldr	r2, [r7, #28]
 807bb9e:	440a      	add	r2, r1
 807bba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bba4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807bba8:	6013      	str	r3, [r2, #0]
 807bbaa:	e00f      	b.n	807bbcc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 807bbac:	69bb      	ldr	r3, [r7, #24]
 807bbae:	015a      	lsls	r2, r3, #5
 807bbb0:	69fb      	ldr	r3, [r7, #28]
 807bbb2:	4413      	add	r3, r2
 807bbb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bbb8:	681b      	ldr	r3, [r3, #0]
 807bbba:	69ba      	ldr	r2, [r7, #24]
 807bbbc:	0151      	lsls	r1, r2, #5
 807bbbe:	69fa      	ldr	r2, [r7, #28]
 807bbc0:	440a      	add	r2, r1
 807bbc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bbc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807bbca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807bbcc:	69bb      	ldr	r3, [r7, #24]
 807bbce:	015a      	lsls	r2, r3, #5
 807bbd0:	69fb      	ldr	r3, [r7, #28]
 807bbd2:	4413      	add	r3, r2
 807bbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bbd8:	681b      	ldr	r3, [r3, #0]
 807bbda:	69ba      	ldr	r2, [r7, #24]
 807bbdc:	0151      	lsls	r1, r2, #5
 807bbde:	69fa      	ldr	r2, [r7, #28]
 807bbe0:	440a      	add	r2, r1
 807bbe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bbe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807bbea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807bbec:	2300      	movs	r3, #0
}
 807bbee:	4618      	mov	r0, r3
 807bbf0:	3720      	adds	r7, #32
 807bbf2:	46bd      	mov	sp, r7
 807bbf4:	bd80      	pop	{r7, pc}
 807bbf6:	bf00      	nop
 807bbf8:	1ff80000 	.word	0x1ff80000

0807bbfc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 807bbfc:	b480      	push	{r7}
 807bbfe:	b087      	sub	sp, #28
 807bc00:	af00      	add	r7, sp, #0
 807bc02:	60f8      	str	r0, [r7, #12]
 807bc04:	60b9      	str	r1, [r7, #8]
 807bc06:	4613      	mov	r3, r2
 807bc08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bc0a:	68fb      	ldr	r3, [r7, #12]
 807bc0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 807bc0e:	68bb      	ldr	r3, [r7, #8]
 807bc10:	781b      	ldrb	r3, [r3, #0]
 807bc12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 807bc14:	68bb      	ldr	r3, [r7, #8]
 807bc16:	785b      	ldrb	r3, [r3, #1]
 807bc18:	2b01      	cmp	r3, #1
 807bc1a:	f040 80cd 	bne.w	807bdb8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 807bc1e:	68bb      	ldr	r3, [r7, #8]
 807bc20:	695b      	ldr	r3, [r3, #20]
 807bc22:	2b00      	cmp	r3, #0
 807bc24:	d132      	bne.n	807bc8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807bc26:	693b      	ldr	r3, [r7, #16]
 807bc28:	015a      	lsls	r2, r3, #5
 807bc2a:	697b      	ldr	r3, [r7, #20]
 807bc2c:	4413      	add	r3, r2
 807bc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc32:	691b      	ldr	r3, [r3, #16]
 807bc34:	693a      	ldr	r2, [r7, #16]
 807bc36:	0151      	lsls	r1, r2, #5
 807bc38:	697a      	ldr	r2, [r7, #20]
 807bc3a:	440a      	add	r2, r1
 807bc3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807bc44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807bc48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807bc4a:	693b      	ldr	r3, [r7, #16]
 807bc4c:	015a      	lsls	r2, r3, #5
 807bc4e:	697b      	ldr	r3, [r7, #20]
 807bc50:	4413      	add	r3, r2
 807bc52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc56:	691b      	ldr	r3, [r3, #16]
 807bc58:	693a      	ldr	r2, [r7, #16]
 807bc5a:	0151      	lsls	r1, r2, #5
 807bc5c:	697a      	ldr	r2, [r7, #20]
 807bc5e:	440a      	add	r2, r1
 807bc60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807bc68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807bc6a:	693b      	ldr	r3, [r7, #16]
 807bc6c:	015a      	lsls	r2, r3, #5
 807bc6e:	697b      	ldr	r3, [r7, #20]
 807bc70:	4413      	add	r3, r2
 807bc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc76:	691b      	ldr	r3, [r3, #16]
 807bc78:	693a      	ldr	r2, [r7, #16]
 807bc7a:	0151      	lsls	r1, r2, #5
 807bc7c:	697a      	ldr	r2, [r7, #20]
 807bc7e:	440a      	add	r2, r1
 807bc80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bc84:	0cdb      	lsrs	r3, r3, #19
 807bc86:	04db      	lsls	r3, r3, #19
 807bc88:	6113      	str	r3, [r2, #16]
 807bc8a:	e04e      	b.n	807bd2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807bc8c:	693b      	ldr	r3, [r7, #16]
 807bc8e:	015a      	lsls	r2, r3, #5
 807bc90:	697b      	ldr	r3, [r7, #20]
 807bc92:	4413      	add	r3, r2
 807bc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bc98:	691b      	ldr	r3, [r3, #16]
 807bc9a:	693a      	ldr	r2, [r7, #16]
 807bc9c:	0151      	lsls	r1, r2, #5
 807bc9e:	697a      	ldr	r2, [r7, #20]
 807bca0:	440a      	add	r2, r1
 807bca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bca6:	0cdb      	lsrs	r3, r3, #19
 807bca8:	04db      	lsls	r3, r3, #19
 807bcaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807bcac:	693b      	ldr	r3, [r7, #16]
 807bcae:	015a      	lsls	r2, r3, #5
 807bcb0:	697b      	ldr	r3, [r7, #20]
 807bcb2:	4413      	add	r3, r2
 807bcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bcb8:	691b      	ldr	r3, [r3, #16]
 807bcba:	693a      	ldr	r2, [r7, #16]
 807bcbc:	0151      	lsls	r1, r2, #5
 807bcbe:	697a      	ldr	r2, [r7, #20]
 807bcc0:	440a      	add	r2, r1
 807bcc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bcc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807bcca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807bcce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 807bcd0:	68bb      	ldr	r3, [r7, #8]
 807bcd2:	695a      	ldr	r2, [r3, #20]
 807bcd4:	68bb      	ldr	r3, [r7, #8]
 807bcd6:	689b      	ldr	r3, [r3, #8]
 807bcd8:	429a      	cmp	r2, r3
 807bcda:	d903      	bls.n	807bce4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 807bcdc:	68bb      	ldr	r3, [r7, #8]
 807bcde:	689a      	ldr	r2, [r3, #8]
 807bce0:	68bb      	ldr	r3, [r7, #8]
 807bce2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807bce4:	693b      	ldr	r3, [r7, #16]
 807bce6:	015a      	lsls	r2, r3, #5
 807bce8:	697b      	ldr	r3, [r7, #20]
 807bcea:	4413      	add	r3, r2
 807bcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bcf0:	691b      	ldr	r3, [r3, #16]
 807bcf2:	693a      	ldr	r2, [r7, #16]
 807bcf4:	0151      	lsls	r1, r2, #5
 807bcf6:	697a      	ldr	r2, [r7, #20]
 807bcf8:	440a      	add	r2, r1
 807bcfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bcfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807bd02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 807bd04:	693b      	ldr	r3, [r7, #16]
 807bd06:	015a      	lsls	r2, r3, #5
 807bd08:	697b      	ldr	r3, [r7, #20]
 807bd0a:	4413      	add	r3, r2
 807bd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bd10:	691a      	ldr	r2, [r3, #16]
 807bd12:	68bb      	ldr	r3, [r7, #8]
 807bd14:	695b      	ldr	r3, [r3, #20]
 807bd16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807bd1a:	6939      	ldr	r1, [r7, #16]
 807bd1c:	0148      	lsls	r0, r1, #5
 807bd1e:	6979      	ldr	r1, [r7, #20]
 807bd20:	4401      	add	r1, r0
 807bd22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807bd26:	4313      	orrs	r3, r2
 807bd28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 807bd2a:	79fb      	ldrb	r3, [r7, #7]
 807bd2c:	2b01      	cmp	r3, #1
 807bd2e:	d11e      	bne.n	807bd6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 807bd30:	68bb      	ldr	r3, [r7, #8]
 807bd32:	691b      	ldr	r3, [r3, #16]
 807bd34:	2b00      	cmp	r3, #0
 807bd36:	d009      	beq.n	807bd4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 807bd38:	693b      	ldr	r3, [r7, #16]
 807bd3a:	015a      	lsls	r2, r3, #5
 807bd3c:	697b      	ldr	r3, [r7, #20]
 807bd3e:	4413      	add	r3, r2
 807bd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bd44:	461a      	mov	r2, r3
 807bd46:	68bb      	ldr	r3, [r7, #8]
 807bd48:	691b      	ldr	r3, [r3, #16]
 807bd4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807bd4c:	693b      	ldr	r3, [r7, #16]
 807bd4e:	015a      	lsls	r2, r3, #5
 807bd50:	697b      	ldr	r3, [r7, #20]
 807bd52:	4413      	add	r3, r2
 807bd54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bd58:	681b      	ldr	r3, [r3, #0]
 807bd5a:	693a      	ldr	r2, [r7, #16]
 807bd5c:	0151      	lsls	r1, r2, #5
 807bd5e:	697a      	ldr	r2, [r7, #20]
 807bd60:	440a      	add	r2, r1
 807bd62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bd66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807bd6a:	6013      	str	r3, [r2, #0]
 807bd6c:	e092      	b.n	807be94 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807bd6e:	693b      	ldr	r3, [r7, #16]
 807bd70:	015a      	lsls	r2, r3, #5
 807bd72:	697b      	ldr	r3, [r7, #20]
 807bd74:	4413      	add	r3, r2
 807bd76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bd7a:	681b      	ldr	r3, [r3, #0]
 807bd7c:	693a      	ldr	r2, [r7, #16]
 807bd7e:	0151      	lsls	r1, r2, #5
 807bd80:	697a      	ldr	r2, [r7, #20]
 807bd82:	440a      	add	r2, r1
 807bd84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bd88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807bd8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 807bd8e:	68bb      	ldr	r3, [r7, #8]
 807bd90:	695b      	ldr	r3, [r3, #20]
 807bd92:	2b00      	cmp	r3, #0
 807bd94:	d07e      	beq.n	807be94 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807bd96:	697b      	ldr	r3, [r7, #20]
 807bd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807bd9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807bd9e:	68bb      	ldr	r3, [r7, #8]
 807bda0:	781b      	ldrb	r3, [r3, #0]
 807bda2:	f003 030f 	and.w	r3, r3, #15
 807bda6:	2101      	movs	r1, #1
 807bda8:	fa01 f303 	lsl.w	r3, r1, r3
 807bdac:	6979      	ldr	r1, [r7, #20]
 807bdae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807bdb2:	4313      	orrs	r3, r2
 807bdb4:	634b      	str	r3, [r1, #52]	; 0x34
 807bdb6:	e06d      	b.n	807be94 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 807bdb8:	693b      	ldr	r3, [r7, #16]
 807bdba:	015a      	lsls	r2, r3, #5
 807bdbc:	697b      	ldr	r3, [r7, #20]
 807bdbe:	4413      	add	r3, r2
 807bdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bdc4:	691b      	ldr	r3, [r3, #16]
 807bdc6:	693a      	ldr	r2, [r7, #16]
 807bdc8:	0151      	lsls	r1, r2, #5
 807bdca:	697a      	ldr	r2, [r7, #20]
 807bdcc:	440a      	add	r2, r1
 807bdce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bdd2:	0cdb      	lsrs	r3, r3, #19
 807bdd4:	04db      	lsls	r3, r3, #19
 807bdd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807bdd8:	693b      	ldr	r3, [r7, #16]
 807bdda:	015a      	lsls	r2, r3, #5
 807bddc:	697b      	ldr	r3, [r7, #20]
 807bdde:	4413      	add	r3, r2
 807bde0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bde4:	691b      	ldr	r3, [r3, #16]
 807bde6:	693a      	ldr	r2, [r7, #16]
 807bde8:	0151      	lsls	r1, r2, #5
 807bdea:	697a      	ldr	r2, [r7, #20]
 807bdec:	440a      	add	r2, r1
 807bdee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807bdf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807bdf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807bdfa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 807bdfc:	68bb      	ldr	r3, [r7, #8]
 807bdfe:	695b      	ldr	r3, [r3, #20]
 807be00:	2b00      	cmp	r3, #0
 807be02:	d003      	beq.n	807be0c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 807be04:	68bb      	ldr	r3, [r7, #8]
 807be06:	689a      	ldr	r2, [r3, #8]
 807be08:	68bb      	ldr	r3, [r7, #8]
 807be0a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807be0c:	693b      	ldr	r3, [r7, #16]
 807be0e:	015a      	lsls	r2, r3, #5
 807be10:	697b      	ldr	r3, [r7, #20]
 807be12:	4413      	add	r3, r2
 807be14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807be18:	691b      	ldr	r3, [r3, #16]
 807be1a:	693a      	ldr	r2, [r7, #16]
 807be1c:	0151      	lsls	r1, r2, #5
 807be1e:	697a      	ldr	r2, [r7, #20]
 807be20:	440a      	add	r2, r1
 807be22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807be26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807be2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 807be2c:	693b      	ldr	r3, [r7, #16]
 807be2e:	015a      	lsls	r2, r3, #5
 807be30:	697b      	ldr	r3, [r7, #20]
 807be32:	4413      	add	r3, r2
 807be34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807be38:	691a      	ldr	r2, [r3, #16]
 807be3a:	68bb      	ldr	r3, [r7, #8]
 807be3c:	689b      	ldr	r3, [r3, #8]
 807be3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 807be42:	6939      	ldr	r1, [r7, #16]
 807be44:	0148      	lsls	r0, r1, #5
 807be46:	6979      	ldr	r1, [r7, #20]
 807be48:	4401      	add	r1, r0
 807be4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807be4e:	4313      	orrs	r3, r2
 807be50:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 807be52:	79fb      	ldrb	r3, [r7, #7]
 807be54:	2b01      	cmp	r3, #1
 807be56:	d10d      	bne.n	807be74 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 807be58:	68bb      	ldr	r3, [r7, #8]
 807be5a:	68db      	ldr	r3, [r3, #12]
 807be5c:	2b00      	cmp	r3, #0
 807be5e:	d009      	beq.n	807be74 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 807be60:	68bb      	ldr	r3, [r7, #8]
 807be62:	68d9      	ldr	r1, [r3, #12]
 807be64:	693b      	ldr	r3, [r7, #16]
 807be66:	015a      	lsls	r2, r3, #5
 807be68:	697b      	ldr	r3, [r7, #20]
 807be6a:	4413      	add	r3, r2
 807be6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807be70:	460a      	mov	r2, r1
 807be72:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807be74:	693b      	ldr	r3, [r7, #16]
 807be76:	015a      	lsls	r2, r3, #5
 807be78:	697b      	ldr	r3, [r7, #20]
 807be7a:	4413      	add	r3, r2
 807be7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807be80:	681b      	ldr	r3, [r3, #0]
 807be82:	693a      	ldr	r2, [r7, #16]
 807be84:	0151      	lsls	r1, r2, #5
 807be86:	697a      	ldr	r2, [r7, #20]
 807be88:	440a      	add	r2, r1
 807be8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807be8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807be92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807be94:	2300      	movs	r3, #0
}
 807be96:	4618      	mov	r0, r3
 807be98:	371c      	adds	r7, #28
 807be9a:	46bd      	mov	sp, r7
 807be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bea0:	4770      	bx	lr

0807bea2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 807bea2:	b480      	push	{r7}
 807bea4:	b089      	sub	sp, #36	; 0x24
 807bea6:	af00      	add	r7, sp, #0
 807bea8:	60f8      	str	r0, [r7, #12]
 807beaa:	60b9      	str	r1, [r7, #8]
 807beac:	4611      	mov	r1, r2
 807beae:	461a      	mov	r2, r3
 807beb0:	460b      	mov	r3, r1
 807beb2:	71fb      	strb	r3, [r7, #7]
 807beb4:	4613      	mov	r3, r2
 807beb6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807beb8:	68fb      	ldr	r3, [r7, #12]
 807beba:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 807bebc:	68bb      	ldr	r3, [r7, #8]
 807bebe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 807bec0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 807bec4:	2b00      	cmp	r3, #0
 807bec6:	d11a      	bne.n	807befe <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 807bec8:	88bb      	ldrh	r3, [r7, #4]
 807beca:	3303      	adds	r3, #3
 807becc:	089b      	lsrs	r3, r3, #2
 807bece:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 807bed0:	2300      	movs	r3, #0
 807bed2:	61bb      	str	r3, [r7, #24]
 807bed4:	e00f      	b.n	807bef6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 807bed6:	79fb      	ldrb	r3, [r7, #7]
 807bed8:	031a      	lsls	r2, r3, #12
 807beda:	697b      	ldr	r3, [r7, #20]
 807bedc:	4413      	add	r3, r2
 807bede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 807bee2:	461a      	mov	r2, r3
 807bee4:	69fb      	ldr	r3, [r7, #28]
 807bee6:	681b      	ldr	r3, [r3, #0]
 807bee8:	6013      	str	r3, [r2, #0]
      pSrc++;
 807beea:	69fb      	ldr	r3, [r7, #28]
 807beec:	3304      	adds	r3, #4
 807beee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 807bef0:	69bb      	ldr	r3, [r7, #24]
 807bef2:	3301      	adds	r3, #1
 807bef4:	61bb      	str	r3, [r7, #24]
 807bef6:	69ba      	ldr	r2, [r7, #24]
 807bef8:	693b      	ldr	r3, [r7, #16]
 807befa:	429a      	cmp	r2, r3
 807befc:	d3eb      	bcc.n	807bed6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 807befe:	2300      	movs	r3, #0
}
 807bf00:	4618      	mov	r0, r3
 807bf02:	3724      	adds	r7, #36	; 0x24
 807bf04:	46bd      	mov	sp, r7
 807bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bf0a:	4770      	bx	lr

0807bf0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 807bf0c:	b480      	push	{r7}
 807bf0e:	b089      	sub	sp, #36	; 0x24
 807bf10:	af00      	add	r7, sp, #0
 807bf12:	60f8      	str	r0, [r7, #12]
 807bf14:	60b9      	str	r1, [r7, #8]
 807bf16:	4613      	mov	r3, r2
 807bf18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bf1a:	68fb      	ldr	r3, [r7, #12]
 807bf1c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 807bf1e:	68bb      	ldr	r3, [r7, #8]
 807bf20:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 807bf22:	88fb      	ldrh	r3, [r7, #6]
 807bf24:	3303      	adds	r3, #3
 807bf26:	089b      	lsrs	r3, r3, #2
 807bf28:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 807bf2a:	2300      	movs	r3, #0
 807bf2c:	61bb      	str	r3, [r7, #24]
 807bf2e:	e00b      	b.n	807bf48 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 807bf30:	697b      	ldr	r3, [r7, #20]
 807bf32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 807bf36:	681a      	ldr	r2, [r3, #0]
 807bf38:	69fb      	ldr	r3, [r7, #28]
 807bf3a:	601a      	str	r2, [r3, #0]
    pDest++;
 807bf3c:	69fb      	ldr	r3, [r7, #28]
 807bf3e:	3304      	adds	r3, #4
 807bf40:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 807bf42:	69bb      	ldr	r3, [r7, #24]
 807bf44:	3301      	adds	r3, #1
 807bf46:	61bb      	str	r3, [r7, #24]
 807bf48:	69ba      	ldr	r2, [r7, #24]
 807bf4a:	693b      	ldr	r3, [r7, #16]
 807bf4c:	429a      	cmp	r2, r3
 807bf4e:	d3ef      	bcc.n	807bf30 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 807bf50:	69fb      	ldr	r3, [r7, #28]
}
 807bf52:	4618      	mov	r0, r3
 807bf54:	3724      	adds	r7, #36	; 0x24
 807bf56:	46bd      	mov	sp, r7
 807bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 807bf5c:	4770      	bx	lr

0807bf5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807bf5e:	b480      	push	{r7}
 807bf60:	b085      	sub	sp, #20
 807bf62:	af00      	add	r7, sp, #0
 807bf64:	6078      	str	r0, [r7, #4]
 807bf66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807bf68:	687b      	ldr	r3, [r7, #4]
 807bf6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807bf6c:	683b      	ldr	r3, [r7, #0]
 807bf6e:	781b      	ldrb	r3, [r3, #0]
 807bf70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807bf72:	683b      	ldr	r3, [r7, #0]
 807bf74:	785b      	ldrb	r3, [r3, #1]
 807bf76:	2b01      	cmp	r3, #1
 807bf78:	d12c      	bne.n	807bfd4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 807bf7a:	68bb      	ldr	r3, [r7, #8]
 807bf7c:	015a      	lsls	r2, r3, #5
 807bf7e:	68fb      	ldr	r3, [r7, #12]
 807bf80:	4413      	add	r3, r2
 807bf82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bf86:	681b      	ldr	r3, [r3, #0]
 807bf88:	2b00      	cmp	r3, #0
 807bf8a:	db12      	blt.n	807bfb2 <USB_EPSetStall+0x54>
 807bf8c:	68bb      	ldr	r3, [r7, #8]
 807bf8e:	2b00      	cmp	r3, #0
 807bf90:	d00f      	beq.n	807bfb2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 807bf92:	68bb      	ldr	r3, [r7, #8]
 807bf94:	015a      	lsls	r2, r3, #5
 807bf96:	68fb      	ldr	r3, [r7, #12]
 807bf98:	4413      	add	r3, r2
 807bf9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bf9e:	681b      	ldr	r3, [r3, #0]
 807bfa0:	68ba      	ldr	r2, [r7, #8]
 807bfa2:	0151      	lsls	r1, r2, #5
 807bfa4:	68fa      	ldr	r2, [r7, #12]
 807bfa6:	440a      	add	r2, r1
 807bfa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bfac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 807bfb0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 807bfb2:	68bb      	ldr	r3, [r7, #8]
 807bfb4:	015a      	lsls	r2, r3, #5
 807bfb6:	68fb      	ldr	r3, [r7, #12]
 807bfb8:	4413      	add	r3, r2
 807bfba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807bfbe:	681b      	ldr	r3, [r3, #0]
 807bfc0:	68ba      	ldr	r2, [r7, #8]
 807bfc2:	0151      	lsls	r1, r2, #5
 807bfc4:	68fa      	ldr	r2, [r7, #12]
 807bfc6:	440a      	add	r2, r1
 807bfc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807bfcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 807bfd0:	6013      	str	r3, [r2, #0]
 807bfd2:	e02b      	b.n	807c02c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 807bfd4:	68bb      	ldr	r3, [r7, #8]
 807bfd6:	015a      	lsls	r2, r3, #5
 807bfd8:	68fb      	ldr	r3, [r7, #12]
 807bfda:	4413      	add	r3, r2
 807bfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bfe0:	681b      	ldr	r3, [r3, #0]
 807bfe2:	2b00      	cmp	r3, #0
 807bfe4:	db12      	blt.n	807c00c <USB_EPSetStall+0xae>
 807bfe6:	68bb      	ldr	r3, [r7, #8]
 807bfe8:	2b00      	cmp	r3, #0
 807bfea:	d00f      	beq.n	807c00c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 807bfec:	68bb      	ldr	r3, [r7, #8]
 807bfee:	015a      	lsls	r2, r3, #5
 807bff0:	68fb      	ldr	r3, [r7, #12]
 807bff2:	4413      	add	r3, r2
 807bff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807bff8:	681b      	ldr	r3, [r3, #0]
 807bffa:	68ba      	ldr	r2, [r7, #8]
 807bffc:	0151      	lsls	r1, r2, #5
 807bffe:	68fa      	ldr	r2, [r7, #12]
 807c000:	440a      	add	r2, r1
 807c002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 807c00a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 807c00c:	68bb      	ldr	r3, [r7, #8]
 807c00e:	015a      	lsls	r2, r3, #5
 807c010:	68fb      	ldr	r3, [r7, #12]
 807c012:	4413      	add	r3, r2
 807c014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c018:	681b      	ldr	r3, [r3, #0]
 807c01a:	68ba      	ldr	r2, [r7, #8]
 807c01c:	0151      	lsls	r1, r2, #5
 807c01e:	68fa      	ldr	r2, [r7, #12]
 807c020:	440a      	add	r2, r1
 807c022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 807c02a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807c02c:	2300      	movs	r3, #0
}
 807c02e:	4618      	mov	r0, r3
 807c030:	3714      	adds	r7, #20
 807c032:	46bd      	mov	sp, r7
 807c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c038:	4770      	bx	lr

0807c03a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807c03a:	b480      	push	{r7}
 807c03c:	b085      	sub	sp, #20
 807c03e:	af00      	add	r7, sp, #0
 807c040:	6078      	str	r0, [r7, #4]
 807c042:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c044:	687b      	ldr	r3, [r7, #4]
 807c046:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807c048:	683b      	ldr	r3, [r7, #0]
 807c04a:	781b      	ldrb	r3, [r3, #0]
 807c04c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 807c04e:	683b      	ldr	r3, [r7, #0]
 807c050:	785b      	ldrb	r3, [r3, #1]
 807c052:	2b01      	cmp	r3, #1
 807c054:	d128      	bne.n	807c0a8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 807c056:	68bb      	ldr	r3, [r7, #8]
 807c058:	015a      	lsls	r2, r3, #5
 807c05a:	68fb      	ldr	r3, [r7, #12]
 807c05c:	4413      	add	r3, r2
 807c05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c062:	681b      	ldr	r3, [r3, #0]
 807c064:	68ba      	ldr	r2, [r7, #8]
 807c066:	0151      	lsls	r1, r2, #5
 807c068:	68fa      	ldr	r2, [r7, #12]
 807c06a:	440a      	add	r2, r1
 807c06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807c070:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 807c074:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 807c076:	683b      	ldr	r3, [r7, #0]
 807c078:	78db      	ldrb	r3, [r3, #3]
 807c07a:	2b03      	cmp	r3, #3
 807c07c:	d003      	beq.n	807c086 <USB_EPClearStall+0x4c>
 807c07e:	683b      	ldr	r3, [r7, #0]
 807c080:	78db      	ldrb	r3, [r3, #3]
 807c082:	2b02      	cmp	r3, #2
 807c084:	d138      	bne.n	807c0f8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 807c086:	68bb      	ldr	r3, [r7, #8]
 807c088:	015a      	lsls	r2, r3, #5
 807c08a:	68fb      	ldr	r3, [r7, #12]
 807c08c:	4413      	add	r3, r2
 807c08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c092:	681b      	ldr	r3, [r3, #0]
 807c094:	68ba      	ldr	r2, [r7, #8]
 807c096:	0151      	lsls	r1, r2, #5
 807c098:	68fa      	ldr	r2, [r7, #12]
 807c09a:	440a      	add	r2, r1
 807c09c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807c0a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807c0a4:	6013      	str	r3, [r2, #0]
 807c0a6:	e027      	b.n	807c0f8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 807c0a8:	68bb      	ldr	r3, [r7, #8]
 807c0aa:	015a      	lsls	r2, r3, #5
 807c0ac:	68fb      	ldr	r3, [r7, #12]
 807c0ae:	4413      	add	r3, r2
 807c0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c0b4:	681b      	ldr	r3, [r3, #0]
 807c0b6:	68ba      	ldr	r2, [r7, #8]
 807c0b8:	0151      	lsls	r1, r2, #5
 807c0ba:	68fa      	ldr	r2, [r7, #12]
 807c0bc:	440a      	add	r2, r1
 807c0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c0c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 807c0c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 807c0c8:	683b      	ldr	r3, [r7, #0]
 807c0ca:	78db      	ldrb	r3, [r3, #3]
 807c0cc:	2b03      	cmp	r3, #3
 807c0ce:	d003      	beq.n	807c0d8 <USB_EPClearStall+0x9e>
 807c0d0:	683b      	ldr	r3, [r7, #0]
 807c0d2:	78db      	ldrb	r3, [r3, #3]
 807c0d4:	2b02      	cmp	r3, #2
 807c0d6:	d10f      	bne.n	807c0f8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 807c0d8:	68bb      	ldr	r3, [r7, #8]
 807c0da:	015a      	lsls	r2, r3, #5
 807c0dc:	68fb      	ldr	r3, [r7, #12]
 807c0de:	4413      	add	r3, r2
 807c0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c0e4:	681b      	ldr	r3, [r3, #0]
 807c0e6:	68ba      	ldr	r2, [r7, #8]
 807c0e8:	0151      	lsls	r1, r2, #5
 807c0ea:	68fa      	ldr	r2, [r7, #12]
 807c0ec:	440a      	add	r2, r1
 807c0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c0f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807c0f6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 807c0f8:	2300      	movs	r3, #0
}
 807c0fa:	4618      	mov	r0, r3
 807c0fc:	3714      	adds	r7, #20
 807c0fe:	46bd      	mov	sp, r7
 807c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c104:	4770      	bx	lr

0807c106 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 807c106:	b480      	push	{r7}
 807c108:	b085      	sub	sp, #20
 807c10a:	af00      	add	r7, sp, #0
 807c10c:	6078      	str	r0, [r7, #4]
 807c10e:	460b      	mov	r3, r1
 807c110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c112:	687b      	ldr	r3, [r7, #4]
 807c114:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 807c116:	68fb      	ldr	r3, [r7, #12]
 807c118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c11c:	681b      	ldr	r3, [r3, #0]
 807c11e:	68fa      	ldr	r2, [r7, #12]
 807c120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c124:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 807c128:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 807c12a:	68fb      	ldr	r3, [r7, #12]
 807c12c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c130:	681a      	ldr	r2, [r3, #0]
 807c132:	78fb      	ldrb	r3, [r7, #3]
 807c134:	011b      	lsls	r3, r3, #4
 807c136:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 807c13a:	68f9      	ldr	r1, [r7, #12]
 807c13c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807c140:	4313      	orrs	r3, r2
 807c142:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 807c144:	2300      	movs	r3, #0
}
 807c146:	4618      	mov	r0, r3
 807c148:	3714      	adds	r7, #20
 807c14a:	46bd      	mov	sp, r7
 807c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c150:	4770      	bx	lr

0807c152 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 807c152:	b480      	push	{r7}
 807c154:	b085      	sub	sp, #20
 807c156:	af00      	add	r7, sp, #0
 807c158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c15a:	687b      	ldr	r3, [r7, #4]
 807c15c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 807c15e:	68fb      	ldr	r3, [r7, #12]
 807c160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807c164:	681b      	ldr	r3, [r3, #0]
 807c166:	68fa      	ldr	r2, [r7, #12]
 807c168:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 807c16c:	f023 0303 	bic.w	r3, r3, #3
 807c170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 807c172:	68fb      	ldr	r3, [r7, #12]
 807c174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c178:	685b      	ldr	r3, [r3, #4]
 807c17a:	68fa      	ldr	r2, [r7, #12]
 807c17c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c180:	f023 0302 	bic.w	r3, r3, #2
 807c184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c186:	2300      	movs	r3, #0
}
 807c188:	4618      	mov	r0, r3
 807c18a:	3714      	adds	r7, #20
 807c18c:	46bd      	mov	sp, r7
 807c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c192:	4770      	bx	lr

0807c194 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 807c194:	b480      	push	{r7}
 807c196:	b085      	sub	sp, #20
 807c198:	af00      	add	r7, sp, #0
 807c19a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c19c:	687b      	ldr	r3, [r7, #4]
 807c19e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 807c1a0:	68fb      	ldr	r3, [r7, #12]
 807c1a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807c1a6:	681b      	ldr	r3, [r3, #0]
 807c1a8:	68fa      	ldr	r2, [r7, #12]
 807c1aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 807c1ae:	f023 0303 	bic.w	r3, r3, #3
 807c1b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 807c1b4:	68fb      	ldr	r3, [r7, #12]
 807c1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c1ba:	685b      	ldr	r3, [r3, #4]
 807c1bc:	68fa      	ldr	r2, [r7, #12]
 807c1be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c1c2:	f043 0302 	orr.w	r3, r3, #2
 807c1c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c1c8:	2300      	movs	r3, #0
}
 807c1ca:	4618      	mov	r0, r3
 807c1cc:	3714      	adds	r7, #20
 807c1ce:	46bd      	mov	sp, r7
 807c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c1d4:	4770      	bx	lr

0807c1d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 807c1d6:	b480      	push	{r7}
 807c1d8:	b085      	sub	sp, #20
 807c1da:	af00      	add	r7, sp, #0
 807c1dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 807c1de:	687b      	ldr	r3, [r7, #4]
 807c1e0:	695b      	ldr	r3, [r3, #20]
 807c1e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 807c1e4:	687b      	ldr	r3, [r7, #4]
 807c1e6:	699b      	ldr	r3, [r3, #24]
 807c1e8:	68fa      	ldr	r2, [r7, #12]
 807c1ea:	4013      	ands	r3, r2
 807c1ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 807c1ee:	68fb      	ldr	r3, [r7, #12]
}
 807c1f0:	4618      	mov	r0, r3
 807c1f2:	3714      	adds	r7, #20
 807c1f4:	46bd      	mov	sp, r7
 807c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c1fa:	4770      	bx	lr

0807c1fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 807c1fc:	b480      	push	{r7}
 807c1fe:	b085      	sub	sp, #20
 807c200:	af00      	add	r7, sp, #0
 807c202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c204:	687b      	ldr	r3, [r7, #4]
 807c206:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 807c208:	68fb      	ldr	r3, [r7, #12]
 807c20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c20e:	699b      	ldr	r3, [r3, #24]
 807c210:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 807c212:	68fb      	ldr	r3, [r7, #12]
 807c214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c218:	69db      	ldr	r3, [r3, #28]
 807c21a:	68ba      	ldr	r2, [r7, #8]
 807c21c:	4013      	ands	r3, r2
 807c21e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 807c220:	68bb      	ldr	r3, [r7, #8]
 807c222:	0c1b      	lsrs	r3, r3, #16
}
 807c224:	4618      	mov	r0, r3
 807c226:	3714      	adds	r7, #20
 807c228:	46bd      	mov	sp, r7
 807c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c22e:	4770      	bx	lr

0807c230 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 807c230:	b480      	push	{r7}
 807c232:	b085      	sub	sp, #20
 807c234:	af00      	add	r7, sp, #0
 807c236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c238:	687b      	ldr	r3, [r7, #4]
 807c23a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 807c23c:	68fb      	ldr	r3, [r7, #12]
 807c23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c242:	699b      	ldr	r3, [r3, #24]
 807c244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 807c246:	68fb      	ldr	r3, [r7, #12]
 807c248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c24c:	69db      	ldr	r3, [r3, #28]
 807c24e:	68ba      	ldr	r2, [r7, #8]
 807c250:	4013      	ands	r3, r2
 807c252:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 807c254:	68bb      	ldr	r3, [r7, #8]
 807c256:	b29b      	uxth	r3, r3
}
 807c258:	4618      	mov	r0, r3
 807c25a:	3714      	adds	r7, #20
 807c25c:	46bd      	mov	sp, r7
 807c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c262:	4770      	bx	lr

0807c264 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 807c264:	b480      	push	{r7}
 807c266:	b085      	sub	sp, #20
 807c268:	af00      	add	r7, sp, #0
 807c26a:	6078      	str	r0, [r7, #4]
 807c26c:	460b      	mov	r3, r1
 807c26e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c270:	687b      	ldr	r3, [r7, #4]
 807c272:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 807c274:	78fb      	ldrb	r3, [r7, #3]
 807c276:	015a      	lsls	r2, r3, #5
 807c278:	68fb      	ldr	r3, [r7, #12]
 807c27a:	4413      	add	r3, r2
 807c27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c280:	689b      	ldr	r3, [r3, #8]
 807c282:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 807c284:	68fb      	ldr	r3, [r7, #12]
 807c286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c28a:	695b      	ldr	r3, [r3, #20]
 807c28c:	68ba      	ldr	r2, [r7, #8]
 807c28e:	4013      	ands	r3, r2
 807c290:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 807c292:	68bb      	ldr	r3, [r7, #8]
}
 807c294:	4618      	mov	r0, r3
 807c296:	3714      	adds	r7, #20
 807c298:	46bd      	mov	sp, r7
 807c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c29e:	4770      	bx	lr

0807c2a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 807c2a0:	b480      	push	{r7}
 807c2a2:	b087      	sub	sp, #28
 807c2a4:	af00      	add	r7, sp, #0
 807c2a6:	6078      	str	r0, [r7, #4]
 807c2a8:	460b      	mov	r3, r1
 807c2aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c2ac:	687b      	ldr	r3, [r7, #4]
 807c2ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 807c2b0:	697b      	ldr	r3, [r7, #20]
 807c2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c2b6:	691b      	ldr	r3, [r3, #16]
 807c2b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 807c2ba:	697b      	ldr	r3, [r7, #20]
 807c2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 807c2c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 807c2c4:	78fb      	ldrb	r3, [r7, #3]
 807c2c6:	f003 030f 	and.w	r3, r3, #15
 807c2ca:	68fa      	ldr	r2, [r7, #12]
 807c2cc:	fa22 f303 	lsr.w	r3, r2, r3
 807c2d0:	01db      	lsls	r3, r3, #7
 807c2d2:	b2db      	uxtb	r3, r3
 807c2d4:	693a      	ldr	r2, [r7, #16]
 807c2d6:	4313      	orrs	r3, r2
 807c2d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 807c2da:	78fb      	ldrb	r3, [r7, #3]
 807c2dc:	015a      	lsls	r2, r3, #5
 807c2de:	697b      	ldr	r3, [r7, #20]
 807c2e0:	4413      	add	r3, r2
 807c2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c2e6:	689b      	ldr	r3, [r3, #8]
 807c2e8:	693a      	ldr	r2, [r7, #16]
 807c2ea:	4013      	ands	r3, r2
 807c2ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 807c2ee:	68bb      	ldr	r3, [r7, #8]
}
 807c2f0:	4618      	mov	r0, r3
 807c2f2:	371c      	adds	r7, #28
 807c2f4:	46bd      	mov	sp, r7
 807c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c2fa:	4770      	bx	lr

0807c2fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 807c2fc:	b480      	push	{r7}
 807c2fe:	b083      	sub	sp, #12
 807c300:	af00      	add	r7, sp, #0
 807c302:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 807c304:	687b      	ldr	r3, [r7, #4]
 807c306:	695b      	ldr	r3, [r3, #20]
 807c308:	f003 0301 	and.w	r3, r3, #1
}
 807c30c:	4618      	mov	r0, r3
 807c30e:	370c      	adds	r7, #12
 807c310:	46bd      	mov	sp, r7
 807c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c316:	4770      	bx	lr

0807c318 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 807c318:	b480      	push	{r7}
 807c31a:	b085      	sub	sp, #20
 807c31c:	af00      	add	r7, sp, #0
 807c31e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c320:	687b      	ldr	r3, [r7, #4]
 807c322:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 807c324:	68fb      	ldr	r3, [r7, #12]
 807c326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807c32a:	681b      	ldr	r3, [r3, #0]
 807c32c:	68fa      	ldr	r2, [r7, #12]
 807c32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807c332:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 807c336:	f023 0307 	bic.w	r3, r3, #7
 807c33a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 807c33c:	68fb      	ldr	r3, [r7, #12]
 807c33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807c342:	685b      	ldr	r3, [r3, #4]
 807c344:	68fa      	ldr	r2, [r7, #12]
 807c346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807c34a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 807c34e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 807c350:	2300      	movs	r3, #0
}
 807c352:	4618      	mov	r0, r3
 807c354:	3714      	adds	r7, #20
 807c356:	46bd      	mov	sp, r7
 807c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c35c:	4770      	bx	lr
	...

0807c360 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 807c360:	b480      	push	{r7}
 807c362:	b087      	sub	sp, #28
 807c364:	af00      	add	r7, sp, #0
 807c366:	60f8      	str	r0, [r7, #12]
 807c368:	460b      	mov	r3, r1
 807c36a:	607a      	str	r2, [r7, #4]
 807c36c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807c36e:	68fb      	ldr	r3, [r7, #12]
 807c370:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 807c372:	68fb      	ldr	r3, [r7, #12]
 807c374:	333c      	adds	r3, #60	; 0x3c
 807c376:	3304      	adds	r3, #4
 807c378:	681b      	ldr	r3, [r3, #0]
 807c37a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 807c37c:	693b      	ldr	r3, [r7, #16]
 807c37e:	4a26      	ldr	r2, [pc, #152]	; (807c418 <USB_EP0_OutStart+0xb8>)
 807c380:	4293      	cmp	r3, r2
 807c382:	d90a      	bls.n	807c39a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 807c384:	697b      	ldr	r3, [r7, #20]
 807c386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c38a:	681b      	ldr	r3, [r3, #0]
 807c38c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807c390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 807c394:	d101      	bne.n	807c39a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 807c396:	2300      	movs	r3, #0
 807c398:	e037      	b.n	807c40a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 807c39a:	697b      	ldr	r3, [r7, #20]
 807c39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3a0:	461a      	mov	r2, r3
 807c3a2:	2300      	movs	r3, #0
 807c3a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 807c3a6:	697b      	ldr	r3, [r7, #20]
 807c3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3ac:	691b      	ldr	r3, [r3, #16]
 807c3ae:	697a      	ldr	r2, [r7, #20]
 807c3b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c3b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807c3b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 807c3ba:	697b      	ldr	r3, [r7, #20]
 807c3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3c0:	691b      	ldr	r3, [r3, #16]
 807c3c2:	697a      	ldr	r2, [r7, #20]
 807c3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c3c8:	f043 0318 	orr.w	r3, r3, #24
 807c3cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 807c3ce:	697b      	ldr	r3, [r7, #20]
 807c3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3d4:	691b      	ldr	r3, [r3, #16]
 807c3d6:	697a      	ldr	r2, [r7, #20]
 807c3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c3dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 807c3e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 807c3e2:	7afb      	ldrb	r3, [r7, #11]
 807c3e4:	2b01      	cmp	r3, #1
 807c3e6:	d10f      	bne.n	807c408 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 807c3e8:	697b      	ldr	r3, [r7, #20]
 807c3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3ee:	461a      	mov	r2, r3
 807c3f0:	687b      	ldr	r3, [r7, #4]
 807c3f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 807c3f4:	697b      	ldr	r3, [r7, #20]
 807c3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807c3fa:	681b      	ldr	r3, [r3, #0]
 807c3fc:	697a      	ldr	r2, [r7, #20]
 807c3fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807c402:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 807c406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807c408:	2300      	movs	r3, #0
}
 807c40a:	4618      	mov	r0, r3
 807c40c:	371c      	adds	r7, #28
 807c40e:	46bd      	mov	sp, r7
 807c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c414:	4770      	bx	lr
 807c416:	bf00      	nop
 807c418:	4f54300a 	.word	0x4f54300a

0807c41c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 807c41c:	b480      	push	{r7}
 807c41e:	b085      	sub	sp, #20
 807c420:	af00      	add	r7, sp, #0
 807c422:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 807c424:	2300      	movs	r3, #0
 807c426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 807c428:	68fb      	ldr	r3, [r7, #12]
 807c42a:	3301      	adds	r3, #1
 807c42c:	60fb      	str	r3, [r7, #12]
 807c42e:	68fb      	ldr	r3, [r7, #12]
 807c430:	4a13      	ldr	r2, [pc, #76]	; (807c480 <USB_CoreReset+0x64>)
 807c432:	4293      	cmp	r3, r2
 807c434:	d901      	bls.n	807c43a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 807c436:	2303      	movs	r3, #3
 807c438:	e01b      	b.n	807c472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 807c43a:	687b      	ldr	r3, [r7, #4]
 807c43c:	691b      	ldr	r3, [r3, #16]
 807c43e:	2b00      	cmp	r3, #0
 807c440:	daf2      	bge.n	807c428 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 807c442:	2300      	movs	r3, #0
 807c444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 807c446:	687b      	ldr	r3, [r7, #4]
 807c448:	691b      	ldr	r3, [r3, #16]
 807c44a:	f043 0201 	orr.w	r2, r3, #1
 807c44e:	687b      	ldr	r3, [r7, #4]
 807c450:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 807c452:	68fb      	ldr	r3, [r7, #12]
 807c454:	3301      	adds	r3, #1
 807c456:	60fb      	str	r3, [r7, #12]
 807c458:	68fb      	ldr	r3, [r7, #12]
 807c45a:	4a09      	ldr	r2, [pc, #36]	; (807c480 <USB_CoreReset+0x64>)
 807c45c:	4293      	cmp	r3, r2
 807c45e:	d901      	bls.n	807c464 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 807c460:	2303      	movs	r3, #3
 807c462:	e006      	b.n	807c472 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 807c464:	687b      	ldr	r3, [r7, #4]
 807c466:	691b      	ldr	r3, [r3, #16]
 807c468:	f003 0301 	and.w	r3, r3, #1
 807c46c:	2b01      	cmp	r3, #1
 807c46e:	d0f0      	beq.n	807c452 <USB_CoreReset+0x36>

  return HAL_OK;
 807c470:	2300      	movs	r3, #0
}
 807c472:	4618      	mov	r0, r3
 807c474:	3714      	adds	r7, #20
 807c476:	46bd      	mov	sp, r7
 807c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c47c:	4770      	bx	lr
 807c47e:	bf00      	nop
 807c480:	00030d40 	.word	0x00030d40

0807c484 <__NVIC_SystemReset>:
{
 807c484:	b480      	push	{r7}
 807c486:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 807c488:	f3bf 8f4f 	dsb	sy
}
 807c48c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 807c48e:	4b06      	ldr	r3, [pc, #24]	; (807c4a8 <__NVIC_SystemReset+0x24>)
 807c490:	68db      	ldr	r3, [r3, #12]
 807c492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 807c496:	4904      	ldr	r1, [pc, #16]	; (807c4a8 <__NVIC_SystemReset+0x24>)
 807c498:	4b04      	ldr	r3, [pc, #16]	; (807c4ac <__NVIC_SystemReset+0x28>)
 807c49a:	4313      	orrs	r3, r2
 807c49c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 807c49e:	f3bf 8f4f 	dsb	sy
}
 807c4a2:	bf00      	nop
    __NOP();
 807c4a4:	bf00      	nop
 807c4a6:	e7fd      	b.n	807c4a4 <__NVIC_SystemReset+0x20>
 807c4a8:	e000ed00 	.word	0xe000ed00
 807c4ac:	05fa0004 	.word	0x05fa0004

0807c4b0 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807c4b0:	b580      	push	{r7, lr}
 807c4b2:	b084      	sub	sp, #16
 807c4b4:	af00      	add	r7, sp, #0
 807c4b6:	6078      	str	r0, [r7, #4]
 807c4b8:	460b      	mov	r3, r1
 807c4ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 807c4bc:	f240 401c 	movw	r0, #1052	; 0x41c
 807c4c0:	f002 fcfc 	bl	807eebc <USBD_static_malloc>
 807c4c4:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 807c4c6:	68fb      	ldr	r3, [r7, #12]
 807c4c8:	2b00      	cmp	r3, #0
 807c4ca:	d105      	bne.n	807c4d8 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 807c4cc:	687b      	ldr	r3, [r7, #4]
 807c4ce:	2200      	movs	r2, #0
 807c4d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 807c4d4:	2302      	movs	r3, #2
 807c4d6:	e03f      	b.n	807c558 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 807c4d8:	687b      	ldr	r3, [r7, #4]
 807c4da:	68fa      	ldr	r2, [r7, #12]
 807c4dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 807c4e0:	68fb      	ldr	r3, [r7, #12]
 807c4e2:	2200      	movs	r2, #0
 807c4e4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 807c4e8:	68fb      	ldr	r3, [r7, #12]
 807c4ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 807c4ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 807c4f2:	68fb      	ldr	r3, [r7, #12]
 807c4f4:	2200      	movs	r2, #0
 807c4f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 807c4fa:	68fb      	ldr	r3, [r7, #12]
 807c4fc:	2200      	movs	r2, #0
 807c4fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 807c502:	68fb      	ldr	r3, [r7, #12]
 807c504:	2200      	movs	r2, #0
 807c506:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 807c50a:	68fb      	ldr	r3, [r7, #12]
 807c50c:	2202      	movs	r2, #2
 807c50e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 807c512:	68fb      	ldr	r3, [r7, #12]
 807c514:	2200      	movs	r2, #0
 807c516:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 807c51a:	68fb      	ldr	r3, [r7, #12]
 807c51c:	2200      	movs	r2, #0
 807c51e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 807c522:	68fb      	ldr	r3, [r7, #12]
 807c524:	2200      	movs	r2, #0
 807c526:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 807c52a:	68fb      	ldr	r3, [r7, #12]
 807c52c:	2200      	movs	r2, #0
 807c52e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 807c532:	68fb      	ldr	r3, [r7, #12]
 807c534:	2202      	movs	r2, #2
 807c536:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 807c53a:	68fb      	ldr	r3, [r7, #12]
 807c53c:	2200      	movs	r2, #0
 807c53e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 807c542:	687b      	ldr	r3, [r7, #4]
 807c544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807c548:	685b      	ldr	r3, [r3, #4]
 807c54a:	4798      	blx	r3
 807c54c:	4603      	mov	r3, r0
 807c54e:	2b00      	cmp	r3, #0
 807c550:	d001      	beq.n	807c556 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 807c552:	2303      	movs	r3, #3
 807c554:	e000      	b.n	807c558 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 807c556:	2300      	movs	r3, #0
}
 807c558:	4618      	mov	r0, r3
 807c55a:	3710      	adds	r7, #16
 807c55c:	46bd      	mov	sp, r7
 807c55e:	bd80      	pop	{r7, pc}

0807c560 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807c560:	b580      	push	{r7, lr}
 807c562:	b084      	sub	sp, #16
 807c564:	af00      	add	r7, sp, #0
 807c566:	6078      	str	r0, [r7, #4]
 807c568:	460b      	mov	r3, r1
 807c56a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 807c56c:	687b      	ldr	r3, [r7, #4]
 807c56e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c572:	2b00      	cmp	r3, #0
 807c574:	d101      	bne.n	807c57a <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 807c576:	2302      	movs	r3, #2
 807c578:	e027      	b.n	807c5ca <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c57a:	687b      	ldr	r3, [r7, #4]
 807c57c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c580:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 807c582:	68fb      	ldr	r3, [r7, #12]
 807c584:	2200      	movs	r2, #0
 807c586:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 807c58a:	68fb      	ldr	r3, [r7, #12]
 807c58c:	2200      	movs	r2, #0
 807c58e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 807c592:	68fb      	ldr	r3, [r7, #12]
 807c594:	2202      	movs	r2, #2
 807c596:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 807c59a:	68fb      	ldr	r3, [r7, #12]
 807c59c:	2200      	movs	r2, #0
 807c59e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 807c5a2:	68fb      	ldr	r3, [r7, #12]
 807c5a4:	2202      	movs	r2, #2
 807c5a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 807c5aa:	687b      	ldr	r3, [r7, #4]
 807c5ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807c5b0:	689b      	ldr	r3, [r3, #8]
 807c5b2:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 807c5b4:	687b      	ldr	r3, [r7, #4]
 807c5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c5ba:	4618      	mov	r0, r3
 807c5bc:	f002 fc8c 	bl	807eed8 <USBD_static_free>
  pdev->pClassData = NULL;
 807c5c0:	687b      	ldr	r3, [r7, #4]
 807c5c2:	2200      	movs	r2, #0
 807c5c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 807c5c8:	2300      	movs	r3, #0
}
 807c5ca:	4618      	mov	r0, r3
 807c5cc:	3710      	adds	r7, #16
 807c5ce:	46bd      	mov	sp, r7
 807c5d0:	bd80      	pop	{r7, pc}
	...

0807c5d4 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807c5d4:	b580      	push	{r7, lr}
 807c5d6:	b088      	sub	sp, #32
 807c5d8:	af00      	add	r7, sp, #0
 807c5da:	6078      	str	r0, [r7, #4]
 807c5dc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c5de:	687b      	ldr	r3, [r7, #4]
 807c5e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c5e4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 807c5e6:	2300      	movs	r3, #0
 807c5e8:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 807c5ea:	2300      	movs	r3, #0
 807c5ec:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 807c5ee:	2300      	movs	r3, #0
 807c5f0:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 807c5f2:	2300      	movs	r3, #0
 807c5f4:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 807c5f6:	693b      	ldr	r3, [r7, #16]
 807c5f8:	2b00      	cmp	r3, #0
 807c5fa:	d101      	bne.n	807c600 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 807c5fc:	2303      	movs	r3, #3
 807c5fe:	e0d5      	b.n	807c7ac <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807c600:	683b      	ldr	r3, [r7, #0]
 807c602:	781b      	ldrb	r3, [r3, #0]
 807c604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807c608:	2b00      	cmp	r3, #0
 807c60a:	d03e      	beq.n	807c68a <USBD_DFU_Setup+0xb6>
 807c60c:	2b20      	cmp	r3, #32
 807c60e:	f040 80c5 	bne.w	807c79c <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 807c612:	683b      	ldr	r3, [r7, #0]
 807c614:	785b      	ldrb	r3, [r3, #1]
 807c616:	2b06      	cmp	r3, #6
 807c618:	d82f      	bhi.n	807c67a <USBD_DFU_Setup+0xa6>
 807c61a:	a201      	add	r2, pc, #4	; (adr r2, 807c620 <USBD_DFU_Setup+0x4c>)
 807c61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807c620:	0807c671 	.word	0x0807c671
 807c624:	0807c63d 	.word	0x0807c63d
 807c628:	0807c647 	.word	0x0807c647
 807c62c:	0807c651 	.word	0x0807c651
 807c630:	0807c659 	.word	0x0807c659
 807c634:	0807c661 	.word	0x0807c661
 807c638:	0807c669 	.word	0x0807c669
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 807c63c:	6839      	ldr	r1, [r7, #0]
 807c63e:	6878      	ldr	r0, [r7, #4]
 807c640:	f000 fa6c 	bl	807cb1c <DFU_Download>
          break;
 807c644:	e020      	b.n	807c688 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 807c646:	6839      	ldr	r1, [r7, #0]
 807c648:	6878      	ldr	r0, [r7, #4]
 807c64a:	f000 fad3 	bl	807cbf4 <DFU_Upload>
          break;
 807c64e:	e01b      	b.n	807c688 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 807c650:	6878      	ldr	r0, [r7, #4]
 807c652:	f000 fba9 	bl	807cda8 <DFU_GetStatus>
          break;
 807c656:	e017      	b.n	807c688 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 807c658:	6878      	ldr	r0, [r7, #4]
 807c65a:	f000 fc5b 	bl	807cf14 <DFU_ClearStatus>
          break;
 807c65e:	e013      	b.n	807c688 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 807c660:	6878      	ldr	r0, [r7, #4]
 807c662:	f000 fcab 	bl	807cfbc <DFU_GetState>
          break;
 807c666:	e00f      	b.n	807c688 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 807c668:	6878      	ldr	r0, [r7, #4]
 807c66a:	f000 fcbf 	bl	807cfec <DFU_Abort>
          break;
 807c66e:	e00b      	b.n	807c688 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 807c670:	6839      	ldr	r1, [r7, #0]
 807c672:	6878      	ldr	r0, [r7, #4]
 807c674:	f000 f9ee 	bl	807ca54 <DFU_Detach>
          break;
 807c678:	e006      	b.n	807c688 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 807c67a:	6839      	ldr	r1, [r7, #0]
 807c67c:	6878      	ldr	r0, [r7, #4]
 807c67e:	f001 fdf9 	bl	807e274 <USBD_CtlError>
          ret = USBD_FAIL;
 807c682:	2303      	movs	r3, #3
 807c684:	77fb      	strb	r3, [r7, #31]
          break;
 807c686:	bf00      	nop
      }
      break;
 807c688:	e08f      	b.n	807c7aa <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807c68a:	683b      	ldr	r3, [r7, #0]
 807c68c:	785b      	ldrb	r3, [r3, #1]
 807c68e:	2b0b      	cmp	r3, #11
 807c690:	d87b      	bhi.n	807c78a <USBD_DFU_Setup+0x1b6>
 807c692:	a201      	add	r2, pc, #4	; (adr r2, 807c698 <USBD_DFU_Setup+0xc4>)
 807c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807c698:	0807c6c9 	.word	0x0807c6c9
 807c69c:	0807c799 	.word	0x0807c799
 807c6a0:	0807c78b 	.word	0x0807c78b
 807c6a4:	0807c78b 	.word	0x0807c78b
 807c6a8:	0807c78b 	.word	0x0807c78b
 807c6ac:	0807c78b 	.word	0x0807c78b
 807c6b0:	0807c6f3 	.word	0x0807c6f3
 807c6b4:	0807c78b 	.word	0x0807c78b
 807c6b8:	0807c78b 	.word	0x0807c78b
 807c6bc:	0807c78b 	.word	0x0807c78b
 807c6c0:	0807c71d 	.word	0x0807c71d
 807c6c4:	0807c749 	.word	0x0807c749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c6c8:	687b      	ldr	r3, [r7, #4]
 807c6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807c6ce:	b2db      	uxtb	r3, r3
 807c6d0:	2b03      	cmp	r3, #3
 807c6d2:	d107      	bne.n	807c6e4 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 807c6d4:	f107 030e 	add.w	r3, r7, #14
 807c6d8:	2202      	movs	r2, #2
 807c6da:	4619      	mov	r1, r3
 807c6dc:	6878      	ldr	r0, [r7, #4]
 807c6de:	f001 fe3a 	bl	807e356 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c6e2:	e05a      	b.n	807c79a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c6e4:	6839      	ldr	r1, [r7, #0]
 807c6e6:	6878      	ldr	r0, [r7, #4]
 807c6e8:	f001 fdc4 	bl	807e274 <USBD_CtlError>
            ret = USBD_FAIL;
 807c6ec:	2303      	movs	r3, #3
 807c6ee:	77fb      	strb	r3, [r7, #31]
          break;
 807c6f0:	e053      	b.n	807c79a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 807c6f2:	683b      	ldr	r3, [r7, #0]
 807c6f4:	885b      	ldrh	r3, [r3, #2]
 807c6f6:	0a1b      	lsrs	r3, r3, #8
 807c6f8:	b29b      	uxth	r3, r3
 807c6fa:	2b21      	cmp	r3, #33	; 0x21
 807c6fc:	d107      	bne.n	807c70e <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 807c6fe:	4b2d      	ldr	r3, [pc, #180]	; (807c7b4 <USBD_DFU_Setup+0x1e0>)
 807c700:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 807c702:	683b      	ldr	r3, [r7, #0]
 807c704:	88db      	ldrh	r3, [r3, #6]
 807c706:	2b09      	cmp	r3, #9
 807c708:	bf28      	it	cs
 807c70a:	2309      	movcs	r3, #9
 807c70c:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 807c70e:	8afb      	ldrh	r3, [r7, #22]
 807c710:	461a      	mov	r2, r3
 807c712:	69b9      	ldr	r1, [r7, #24]
 807c714:	6878      	ldr	r0, [r7, #4]
 807c716:	f001 fe1e 	bl	807e356 <USBD_CtlSendData>
          break;
 807c71a:	e03e      	b.n	807c79a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c71c:	687b      	ldr	r3, [r7, #4]
 807c71e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807c722:	b2db      	uxtb	r3, r3
 807c724:	2b03      	cmp	r3, #3
 807c726:	d108      	bne.n	807c73a <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 807c728:	693b      	ldr	r3, [r7, #16]
 807c72a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 807c72e:	2201      	movs	r2, #1
 807c730:	4619      	mov	r1, r3
 807c732:	6878      	ldr	r0, [r7, #4]
 807c734:	f001 fe0f 	bl	807e356 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c738:	e02f      	b.n	807c79a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c73a:	6839      	ldr	r1, [r7, #0]
 807c73c:	6878      	ldr	r0, [r7, #4]
 807c73e:	f001 fd99 	bl	807e274 <USBD_CtlError>
            ret = USBD_FAIL;
 807c742:	2303      	movs	r3, #3
 807c744:	77fb      	strb	r3, [r7, #31]
          break;
 807c746:	e028      	b.n	807c79a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 807c748:	683b      	ldr	r3, [r7, #0]
 807c74a:	885b      	ldrh	r3, [r3, #2]
 807c74c:	b2db      	uxtb	r3, r3
 807c74e:	2b00      	cmp	r3, #0
 807c750:	d114      	bne.n	807c77c <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807c752:	687b      	ldr	r3, [r7, #4]
 807c754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807c758:	b2db      	uxtb	r3, r3
 807c75a:	2b03      	cmp	r3, #3
 807c75c:	d107      	bne.n	807c76e <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 807c75e:	683b      	ldr	r3, [r7, #0]
 807c760:	885b      	ldrh	r3, [r3, #2]
 807c762:	b2db      	uxtb	r3, r3
 807c764:	461a      	mov	r2, r3
 807c766:	693b      	ldr	r3, [r7, #16]
 807c768:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807c76c:	e015      	b.n	807c79a <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 807c76e:	6839      	ldr	r1, [r7, #0]
 807c770:	6878      	ldr	r0, [r7, #4]
 807c772:	f001 fd7f 	bl	807e274 <USBD_CtlError>
              ret = USBD_FAIL;
 807c776:	2303      	movs	r3, #3
 807c778:	77fb      	strb	r3, [r7, #31]
          break;
 807c77a:	e00e      	b.n	807c79a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807c77c:	6839      	ldr	r1, [r7, #0]
 807c77e:	6878      	ldr	r0, [r7, #4]
 807c780:	f001 fd78 	bl	807e274 <USBD_CtlError>
            ret = USBD_FAIL;
 807c784:	2303      	movs	r3, #3
 807c786:	77fb      	strb	r3, [r7, #31]
          break;
 807c788:	e007      	b.n	807c79a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 807c78a:	6839      	ldr	r1, [r7, #0]
 807c78c:	6878      	ldr	r0, [r7, #4]
 807c78e:	f001 fd71 	bl	807e274 <USBD_CtlError>
          ret = USBD_FAIL;
 807c792:	2303      	movs	r3, #3
 807c794:	77fb      	strb	r3, [r7, #31]
          break;
 807c796:	e000      	b.n	807c79a <USBD_DFU_Setup+0x1c6>
          break;
 807c798:	bf00      	nop
      }
      break;
 807c79a:	e006      	b.n	807c7aa <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 807c79c:	6839      	ldr	r1, [r7, #0]
 807c79e:	6878      	ldr	r0, [r7, #4]
 807c7a0:	f001 fd68 	bl	807e274 <USBD_CtlError>
      ret = USBD_FAIL;
 807c7a4:	2303      	movs	r3, #3
 807c7a6:	77fb      	strb	r3, [r7, #31]
      break;
 807c7a8:	bf00      	nop
  }

  return (uint8_t)ret;
 807c7aa:	7ffb      	ldrb	r3, [r7, #31]
}
 807c7ac:	4618      	mov	r0, r3
 807c7ae:	3720      	adds	r7, #32
 807c7b0:	46bd      	mov	sp, r7
 807c7b2:	bd80      	pop	{r7, pc}
 807c7b4:	2000005a 	.word	0x2000005a

0807c7b8 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 807c7b8:	b480      	push	{r7}
 807c7ba:	b083      	sub	sp, #12
 807c7bc:	af00      	add	r7, sp, #0
 807c7be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 807c7c0:	687b      	ldr	r3, [r7, #4]
 807c7c2:	221b      	movs	r2, #27
 807c7c4:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 807c7c6:	4b03      	ldr	r3, [pc, #12]	; (807c7d4 <USBD_DFU_GetCfgDesc+0x1c>)
}
 807c7c8:	4618      	mov	r0, r3
 807c7ca:	370c      	adds	r7, #12
 807c7cc:	46bd      	mov	sp, r7
 807c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c7d2:	4770      	bx	lr
 807c7d4:	20000048 	.word	0x20000048

0807c7d8 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 807c7d8:	b480      	push	{r7}
 807c7da:	b083      	sub	sp, #12
 807c7dc:	af00      	add	r7, sp, #0
 807c7de:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807c7e0:	2300      	movs	r3, #0
}
 807c7e2:	4618      	mov	r0, r3
 807c7e4:	370c      	adds	r7, #12
 807c7e6:	46bd      	mov	sp, r7
 807c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c7ec:	4770      	bx	lr

0807c7ee <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 807c7ee:	b580      	push	{r7, lr}
 807c7f0:	b088      	sub	sp, #32
 807c7f2:	af00      	add	r7, sp, #0
 807c7f4:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807c7f6:	687b      	ldr	r3, [r7, #4]
 807c7f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807c7fc:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807c7fe:	687b      	ldr	r3, [r7, #4]
 807c800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807c804:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 807c806:	69fb      	ldr	r3, [r7, #28]
 807c808:	2b00      	cmp	r3, #0
 807c80a:	d101      	bne.n	807c810 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 807c80c:	2303      	movs	r3, #3
 807c80e:	e0ce      	b.n	807c9ae <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 807c810:	69fb      	ldr	r3, [r7, #28]
 807c812:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807c816:	2b04      	cmp	r3, #4
 807c818:	f040 80bd 	bne.w	807c996 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 807c81c:	69fb      	ldr	r3, [r7, #28]
 807c81e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807c822:	2b00      	cmp	r3, #0
 807c824:	d17c      	bne.n	807c920 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 807c826:	69fb      	ldr	r3, [r7, #28]
 807c828:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807c82c:	2b01      	cmp	r3, #1
 807c82e:	f000 8093 	beq.w	807c958 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 807c832:	69fb      	ldr	r3, [r7, #28]
 807c834:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807c838:	2b05      	cmp	r3, #5
 807c83a:	d15e      	bne.n	807c8fa <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 807c83c:	69fb      	ldr	r3, [r7, #28]
 807c83e:	781b      	ldrb	r3, [r3, #0]
 807c840:	2b21      	cmp	r3, #33	; 0x21
 807c842:	d124      	bne.n	807c88e <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 807c844:	69fb      	ldr	r3, [r7, #28]
 807c846:	785b      	ldrb	r3, [r3, #1]
 807c848:	461a      	mov	r2, r3
 807c84a:	69fb      	ldr	r3, [r7, #28]
 807c84c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 807c850:	69fb      	ldr	r3, [r7, #28]
 807c852:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c856:	69fb      	ldr	r3, [r7, #28]
 807c858:	789b      	ldrb	r3, [r3, #2]
 807c85a:	021b      	lsls	r3, r3, #8
 807c85c:	441a      	add	r2, r3
 807c85e:	69fb      	ldr	r3, [r7, #28]
 807c860:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 807c864:	69fb      	ldr	r3, [r7, #28]
 807c866:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c86a:	69fb      	ldr	r3, [r7, #28]
 807c86c:	78db      	ldrb	r3, [r3, #3]
 807c86e:	041b      	lsls	r3, r3, #16
 807c870:	441a      	add	r2, r3
 807c872:	69fb      	ldr	r3, [r7, #28]
 807c874:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807c878:	69fb      	ldr	r3, [r7, #28]
 807c87a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c87e:	69fb      	ldr	r3, [r7, #28]
 807c880:	791b      	ldrb	r3, [r3, #4]
 807c882:	061b      	lsls	r3, r3, #24
 807c884:	441a      	add	r2, r3
 807c886:	69fb      	ldr	r3, [r7, #28]
 807c888:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 807c88c:	e064      	b.n	807c958 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 807c88e:	69fb      	ldr	r3, [r7, #28]
 807c890:	781b      	ldrb	r3, [r3, #0]
 807c892:	2b41      	cmp	r3, #65	; 0x41
 807c894:	d12f      	bne.n	807c8f6 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 807c896:	69fb      	ldr	r3, [r7, #28]
 807c898:	785b      	ldrb	r3, [r3, #1]
 807c89a:	461a      	mov	r2, r3
 807c89c:	69fb      	ldr	r3, [r7, #28]
 807c89e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 807c8a2:	69fb      	ldr	r3, [r7, #28]
 807c8a4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c8a8:	69fb      	ldr	r3, [r7, #28]
 807c8aa:	789b      	ldrb	r3, [r3, #2]
 807c8ac:	021b      	lsls	r3, r3, #8
 807c8ae:	441a      	add	r2, r3
 807c8b0:	69fb      	ldr	r3, [r7, #28]
 807c8b2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 807c8b6:	69fb      	ldr	r3, [r7, #28]
 807c8b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c8bc:	69fb      	ldr	r3, [r7, #28]
 807c8be:	78db      	ldrb	r3, [r3, #3]
 807c8c0:	041b      	lsls	r3, r3, #16
 807c8c2:	441a      	add	r2, r3
 807c8c4:	69fb      	ldr	r3, [r7, #28]
 807c8c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807c8ca:	69fb      	ldr	r3, [r7, #28]
 807c8cc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807c8d0:	69fb      	ldr	r3, [r7, #28]
 807c8d2:	791b      	ldrb	r3, [r3, #4]
 807c8d4:	061b      	lsls	r3, r3, #24
 807c8d6:	441a      	add	r2, r3
 807c8d8:	69fb      	ldr	r3, [r7, #28]
 807c8da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 807c8de:	69bb      	ldr	r3, [r7, #24]
 807c8e0:	68db      	ldr	r3, [r3, #12]
 807c8e2:	69fa      	ldr	r2, [r7, #28]
 807c8e4:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 807c8e8:	4610      	mov	r0, r2
 807c8ea:	4798      	blx	r3
 807c8ec:	4603      	mov	r3, r0
 807c8ee:	2b00      	cmp	r3, #0
 807c8f0:	d032      	beq.n	807c958 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 807c8f2:	2303      	movs	r3, #3
 807c8f4:	e05b      	b.n	807c9ae <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 807c8f6:	2303      	movs	r3, #3
 807c8f8:	e059      	b.n	807c9ae <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 807c8fa:	69fb      	ldr	r3, [r7, #28]
 807c8fc:	2200      	movs	r2, #0
 807c8fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 807c902:	69fb      	ldr	r3, [r7, #28]
 807c904:	2200      	movs	r2, #0
 807c906:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 807c90a:	2300      	movs	r3, #0
 807c90c:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 807c90e:	2301      	movs	r3, #1
 807c910:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 807c912:	f107 030c 	add.w	r3, r7, #12
 807c916:	4619      	mov	r1, r3
 807c918:	6878      	ldr	r0, [r7, #4]
 807c91a:	f001 fcab 	bl	807e274 <USBD_CtlError>
 807c91e:	e01b      	b.n	807c958 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 807c920:	69fb      	ldr	r3, [r7, #28]
 807c922:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807c926:	2b01      	cmp	r3, #1
 807c928:	d916      	bls.n	807c958 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 807c92a:	69fb      	ldr	r3, [r7, #28]
 807c92c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807c930:	3b02      	subs	r3, #2
 807c932:	029a      	lsls	r2, r3, #10
 807c934:	69fb      	ldr	r3, [r7, #28]
 807c936:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 807c93a:	4413      	add	r3, r2
 807c93c:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 807c93e:	69bb      	ldr	r3, [r7, #24]
 807c940:	691b      	ldr	r3, [r3, #16]
 807c942:	69f8      	ldr	r0, [r7, #28]
 807c944:	6979      	ldr	r1, [r7, #20]
 807c946:	69fa      	ldr	r2, [r7, #28]
 807c948:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 807c94c:	4798      	blx	r3
 807c94e:	4603      	mov	r3, r0
 807c950:	2b00      	cmp	r3, #0
 807c952:	d001      	beq.n	807c958 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 807c954:	2303      	movs	r3, #3
 807c956:	e02a      	b.n	807c9ae <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 807c958:	69fb      	ldr	r3, [r7, #28]
 807c95a:	2200      	movs	r2, #0
 807c95c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 807c960:	69fb      	ldr	r3, [r7, #28]
 807c962:	2200      	movs	r2, #0
 807c964:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 807c968:	69fb      	ldr	r3, [r7, #28]
 807c96a:	2203      	movs	r2, #3
 807c96c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807c970:	69fb      	ldr	r3, [r7, #28]
 807c972:	2200      	movs	r2, #0
 807c974:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807c978:	69fb      	ldr	r3, [r7, #28]
 807c97a:	2200      	movs	r2, #0
 807c97c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807c980:	69fb      	ldr	r3, [r7, #28]
 807c982:	2200      	movs	r2, #0
 807c984:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807c988:	69fb      	ldr	r3, [r7, #28]
 807c98a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807c98e:	69fb      	ldr	r3, [r7, #28]
 807c990:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807c994:	e00a      	b.n	807c9ac <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 807c996:	69fb      	ldr	r3, [r7, #28]
 807c998:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807c99c:	2b07      	cmp	r3, #7
 807c99e:	d103      	bne.n	807c9a8 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 807c9a0:	6878      	ldr	r0, [r7, #4]
 807c9a2:	f000 fb75 	bl	807d090 <DFU_Leave>
 807c9a6:	e001      	b.n	807c9ac <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 807c9a8:	2303      	movs	r3, #3
 807c9aa:	e000      	b.n	807c9ae <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 807c9ac:	2300      	movs	r3, #0
}
 807c9ae:	4618      	mov	r0, r3
 807c9b0:	3720      	adds	r7, #32
 807c9b2:	46bd      	mov	sp, r7
 807c9b4:	bd80      	pop	{r7, pc}

0807c9b6 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 807c9b6:	b480      	push	{r7}
 807c9b8:	b083      	sub	sp, #12
 807c9ba:	af00      	add	r7, sp, #0
 807c9bc:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807c9be:	2300      	movs	r3, #0
}
 807c9c0:	4618      	mov	r0, r3
 807c9c2:	370c      	adds	r7, #12
 807c9c4:	46bd      	mov	sp, r7
 807c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c9ca:	4770      	bx	lr

0807c9cc <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 807c9cc:	b480      	push	{r7}
 807c9ce:	b083      	sub	sp, #12
 807c9d0:	af00      	add	r7, sp, #0
 807c9d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 807c9d4:	687b      	ldr	r3, [r7, #4]
 807c9d6:	220a      	movs	r2, #10
 807c9d8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 807c9da:	4b03      	ldr	r3, [pc, #12]	; (807c9e8 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 807c9dc:	4618      	mov	r0, r3
 807c9de:	370c      	adds	r7, #12
 807c9e0:	46bd      	mov	sp, r7
 807c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 807c9e6:	4770      	bx	lr
 807c9e8:	20000064 	.word	0x20000064

0807c9ec <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 807c9ec:	b580      	push	{r7, lr}
 807c9ee:	b086      	sub	sp, #24
 807c9f0:	af00      	add	r7, sp, #0
 807c9f2:	60f8      	str	r0, [r7, #12]
 807c9f4:	460b      	mov	r3, r1
 807c9f6:	607a      	str	r2, [r7, #4]
 807c9f8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807c9fa:	68fb      	ldr	r3, [r7, #12]
 807c9fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807ca00:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 807ca02:	7afb      	ldrb	r3, [r7, #11]
 807ca04:	2b06      	cmp	r3, #6
 807ca06:	d808      	bhi.n	807ca1a <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 807ca08:	697b      	ldr	r3, [r7, #20]
 807ca0a:	681b      	ldr	r3, [r3, #0]
 807ca0c:	687a      	ldr	r2, [r7, #4]
 807ca0e:	4905      	ldr	r1, [pc, #20]	; (807ca24 <USBD_DFU_GetUsrStringDesc+0x38>)
 807ca10:	4618      	mov	r0, r3
 807ca12:	f001 fc40 	bl	807e296 <USBD_GetString>
    return USBD_StrDesc;
 807ca16:	4b03      	ldr	r3, [pc, #12]	; (807ca24 <USBD_DFU_GetUsrStringDesc+0x38>)
 807ca18:	e000      	b.n	807ca1c <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 807ca1a:	2300      	movs	r3, #0
  }
}
 807ca1c:	4618      	mov	r0, r3
 807ca1e:	3718      	adds	r7, #24
 807ca20:	46bd      	mov	sp, r7
 807ca22:	bd80      	pop	{r7, pc}
 807ca24:	2000011c 	.word	0x2000011c

0807ca28 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 807ca28:	b480      	push	{r7}
 807ca2a:	b083      	sub	sp, #12
 807ca2c:	af00      	add	r7, sp, #0
 807ca2e:	6078      	str	r0, [r7, #4]
 807ca30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 807ca32:	683b      	ldr	r3, [r7, #0]
 807ca34:	2b00      	cmp	r3, #0
 807ca36:	d101      	bne.n	807ca3c <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 807ca38:	2303      	movs	r3, #3
 807ca3a:	e004      	b.n	807ca46 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 807ca3c:	687b      	ldr	r3, [r7, #4]
 807ca3e:	683a      	ldr	r2, [r7, #0]
 807ca40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 807ca44:	2300      	movs	r3, #0
}
 807ca46:	4618      	mov	r0, r3
 807ca48:	370c      	adds	r7, #12
 807ca4a:	46bd      	mov	sp, r7
 807ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ca50:	4770      	bx	lr
	...

0807ca54 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807ca54:	b580      	push	{r7, lr}
 807ca56:	b084      	sub	sp, #16
 807ca58:	af00      	add	r7, sp, #0
 807ca5a:	6078      	str	r0, [r7, #4]
 807ca5c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807ca5e:	687b      	ldr	r3, [r7, #4]
 807ca60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807ca64:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807ca66:	68fb      	ldr	r3, [r7, #12]
 807ca68:	2b00      	cmp	r3, #0
 807ca6a:	d051      	beq.n	807cb10 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807ca6c:	68fb      	ldr	r3, [r7, #12]
 807ca6e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807ca72:	2b02      	cmp	r3, #2
 807ca74:	d013      	beq.n	807ca9e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807ca76:	68fb      	ldr	r3, [r7, #12]
 807ca78:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807ca7c:	2b03      	cmp	r3, #3
 807ca7e:	d00e      	beq.n	807ca9e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807ca80:	68fb      	ldr	r3, [r7, #12]
 807ca82:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807ca86:	2b05      	cmp	r3, #5
 807ca88:	d009      	beq.n	807ca9e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807ca8a:	68fb      	ldr	r3, [r7, #12]
 807ca8c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807ca90:	2b06      	cmp	r3, #6
 807ca92:	d004      	beq.n	807ca9e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807ca94:	68fb      	ldr	r3, [r7, #12]
 807ca96:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807ca9a:	2b09      	cmp	r3, #9
 807ca9c:	d125      	bne.n	807caea <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 807ca9e:	68fb      	ldr	r3, [r7, #12]
 807caa0:	2202      	movs	r2, #2
 807caa2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 807caa6:	68fb      	ldr	r3, [r7, #12]
 807caa8:	2200      	movs	r2, #0
 807caaa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807caae:	68fb      	ldr	r3, [r7, #12]
 807cab0:	2200      	movs	r2, #0
 807cab2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807cab6:	68fb      	ldr	r3, [r7, #12]
 807cab8:	2200      	movs	r2, #0
 807caba:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 807cabe:	68fb      	ldr	r3, [r7, #12]
 807cac0:	2200      	movs	r2, #0
 807cac2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807cac6:	68fb      	ldr	r3, [r7, #12]
 807cac8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cacc:	68fb      	ldr	r3, [r7, #12]
 807cace:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 807cad2:	68fb      	ldr	r3, [r7, #12]
 807cad4:	2200      	movs	r2, #0
 807cad6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 807cada:	68fb      	ldr	r3, [r7, #12]
 807cadc:	2200      	movs	r2, #0
 807cade:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 807cae2:	68fb      	ldr	r3, [r7, #12]
 807cae4:	2200      	movs	r2, #0
 807cae6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 807caea:	4b0b      	ldr	r3, [pc, #44]	; (807cb18 <DFU_Detach+0xc4>)
 807caec:	7d5b      	ldrb	r3, [r3, #21]
 807caee:	f003 0310 	and.w	r3, r3, #16
 807caf2:	2b00      	cmp	r3, #0
 807caf4:	d006      	beq.n	807cb04 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 807caf6:	6878      	ldr	r0, [r7, #4]
 807caf8:	f000 fb7b 	bl	807d1f2 <USBD_Stop>
    (void)USBD_Start(pdev);
 807cafc:	6878      	ldr	r0, [r7, #4]
 807cafe:	f000 fb6c 	bl	807d1da <USBD_Start>
 807cb02:	e006      	b.n	807cb12 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 807cb04:	683b      	ldr	r3, [r7, #0]
 807cb06:	885b      	ldrh	r3, [r3, #2]
 807cb08:	4618      	mov	r0, r3
 807cb0a:	f7fb feeb 	bl	80788e4 <HAL_Delay>
 807cb0e:	e000      	b.n	807cb12 <DFU_Detach+0xbe>
    return;
 807cb10:	bf00      	nop
  }
}
 807cb12:	3710      	adds	r7, #16
 807cb14:	46bd      	mov	sp, r7
 807cb16:	bd80      	pop	{r7, pc}
 807cb18:	20000048 	.word	0x20000048

0807cb1c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807cb1c:	b580      	push	{r7, lr}
 807cb1e:	b084      	sub	sp, #16
 807cb20:	af00      	add	r7, sp, #0
 807cb22:	6078      	str	r0, [r7, #4]
 807cb24:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cb26:	687b      	ldr	r3, [r7, #4]
 807cb28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cb2c:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cb2e:	68fb      	ldr	r3, [r7, #12]
 807cb30:	2b00      	cmp	r3, #0
 807cb32:	d05b      	beq.n	807cbec <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 807cb34:	683b      	ldr	r3, [r7, #0]
 807cb36:	88db      	ldrh	r3, [r3, #6]
 807cb38:	2b00      	cmp	r3, #0
 807cb3a:	d02d      	beq.n	807cb98 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 807cb3c:	68fb      	ldr	r3, [r7, #12]
 807cb3e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cb42:	2b02      	cmp	r3, #2
 807cb44:	d004      	beq.n	807cb50 <DFU_Download+0x34>
 807cb46:	68fb      	ldr	r3, [r7, #12]
 807cb48:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cb4c:	2b05      	cmp	r3, #5
 807cb4e:	d11e      	bne.n	807cb8e <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 807cb50:	683b      	ldr	r3, [r7, #0]
 807cb52:	885b      	ldrh	r3, [r3, #2]
 807cb54:	461a      	mov	r2, r3
 807cb56:	68fb      	ldr	r3, [r7, #12]
 807cb58:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 807cb5c:	683b      	ldr	r3, [r7, #0]
 807cb5e:	88db      	ldrh	r3, [r3, #6]
 807cb60:	461a      	mov	r2, r3
 807cb62:	68fb      	ldr	r3, [r7, #12]
 807cb64:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 807cb68:	68fb      	ldr	r3, [r7, #12]
 807cb6a:	2203      	movs	r2, #3
 807cb6c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 807cb70:	68fb      	ldr	r3, [r7, #12]
 807cb72:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cb76:	68fb      	ldr	r3, [r7, #12]
 807cb78:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 807cb7c:	68f9      	ldr	r1, [r7, #12]
 807cb7e:	68fb      	ldr	r3, [r7, #12]
 807cb80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cb84:	461a      	mov	r2, r3
 807cb86:	6878      	ldr	r0, [r7, #4]
 807cb88:	f001 fc11 	bl	807e3ae <USBD_CtlPrepareRx>
 807cb8c:	e02f      	b.n	807cbee <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cb8e:	6839      	ldr	r1, [r7, #0]
 807cb90:	6878      	ldr	r0, [r7, #4]
 807cb92:	f001 fb6f 	bl	807e274 <USBD_CtlError>
 807cb96:	e02a      	b.n	807cbee <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 807cb98:	68fb      	ldr	r3, [r7, #12]
 807cb9a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cb9e:	2b05      	cmp	r3, #5
 807cba0:	d004      	beq.n	807cbac <DFU_Download+0x90>
 807cba2:	68fb      	ldr	r3, [r7, #12]
 807cba4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cba8:	2b02      	cmp	r3, #2
 807cbaa:	d11a      	bne.n	807cbe2 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 807cbac:	68fb      	ldr	r3, [r7, #12]
 807cbae:	2201      	movs	r2, #1
 807cbb0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 807cbb4:	68fb      	ldr	r3, [r7, #12]
 807cbb6:	2206      	movs	r2, #6
 807cbb8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 807cbbc:	68fb      	ldr	r3, [r7, #12]
 807cbbe:	2200      	movs	r2, #0
 807cbc0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 807cbc4:	68fb      	ldr	r3, [r7, #12]
 807cbc6:	2200      	movs	r2, #0
 807cbc8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 807cbcc:	68fb      	ldr	r3, [r7, #12]
 807cbce:	2200      	movs	r2, #0
 807cbd0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 807cbd4:	68fb      	ldr	r3, [r7, #12]
 807cbd6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cbda:	68fb      	ldr	r3, [r7, #12]
 807cbdc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807cbe0:	e005      	b.n	807cbee <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cbe2:	6839      	ldr	r1, [r7, #0]
 807cbe4:	6878      	ldr	r0, [r7, #4]
 807cbe6:	f001 fb45 	bl	807e274 <USBD_CtlError>
 807cbea:	e000      	b.n	807cbee <DFU_Download+0xd2>
    return;
 807cbec:	bf00      	nop
    }
  }
}
 807cbee:	3710      	adds	r7, #16
 807cbf0:	46bd      	mov	sp, r7
 807cbf2:	bd80      	pop	{r7, pc}

0807cbf4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807cbf4:	b580      	push	{r7, lr}
 807cbf6:	b086      	sub	sp, #24
 807cbf8:	af00      	add	r7, sp, #0
 807cbfa:	6078      	str	r0, [r7, #4]
 807cbfc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cbfe:	687b      	ldr	r3, [r7, #4]
 807cc00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cc04:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807cc06:	687b      	ldr	r3, [r7, #4]
 807cc08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807cc0c:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 807cc0e:	697b      	ldr	r3, [r7, #20]
 807cc10:	2b00      	cmp	r3, #0
 807cc12:	f000 80c4 	beq.w	807cd9e <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 807cc16:	683b      	ldr	r3, [r7, #0]
 807cc18:	88db      	ldrh	r3, [r3, #6]
 807cc1a:	2b00      	cmp	r3, #0
 807cc1c:	f000 80a8 	beq.w	807cd70 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807cc20:	697b      	ldr	r3, [r7, #20]
 807cc22:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cc26:	2b02      	cmp	r3, #2
 807cc28:	d005      	beq.n	807cc36 <DFU_Upload+0x42>
 807cc2a:	697b      	ldr	r3, [r7, #20]
 807cc2c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cc30:	2b09      	cmp	r3, #9
 807cc32:	f040 8090 	bne.w	807cd56 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 807cc36:	683b      	ldr	r3, [r7, #0]
 807cc38:	885b      	ldrh	r3, [r3, #2]
 807cc3a:	461a      	mov	r2, r3
 807cc3c:	697b      	ldr	r3, [r7, #20]
 807cc3e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 807cc42:	683b      	ldr	r3, [r7, #0]
 807cc44:	88db      	ldrh	r3, [r3, #6]
 807cc46:	461a      	mov	r2, r3
 807cc48:	697b      	ldr	r3, [r7, #20]
 807cc4a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 807cc4e:	697b      	ldr	r3, [r7, #20]
 807cc50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807cc54:	2b00      	cmp	r3, #0
 807cc56:	d12c      	bne.n	807ccb2 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 807cc58:	697b      	ldr	r3, [r7, #20]
 807cc5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cc5e:	2b03      	cmp	r3, #3
 807cc60:	d901      	bls.n	807cc66 <DFU_Upload+0x72>
 807cc62:	2202      	movs	r2, #2
 807cc64:	e000      	b.n	807cc68 <DFU_Upload+0x74>
 807cc66:	2209      	movs	r2, #9
 807cc68:	697b      	ldr	r3, [r7, #20]
 807cc6a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807cc6e:	697b      	ldr	r3, [r7, #20]
 807cc70:	2200      	movs	r2, #0
 807cc72:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cc76:	697b      	ldr	r3, [r7, #20]
 807cc78:	2200      	movs	r2, #0
 807cc7a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807cc7e:	697b      	ldr	r3, [r7, #20]
 807cc80:	2200      	movs	r2, #0
 807cc82:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cc86:	697b      	ldr	r3, [r7, #20]
 807cc88:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cc8c:	697b      	ldr	r3, [r7, #20]
 807cc8e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 807cc92:	697b      	ldr	r3, [r7, #20]
 807cc94:	2200      	movs	r2, #0
 807cc96:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 807cc98:	697b      	ldr	r3, [r7, #20]
 807cc9a:	2221      	movs	r2, #33	; 0x21
 807cc9c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 807cc9e:	697b      	ldr	r3, [r7, #20]
 807cca0:	2241      	movs	r2, #65	; 0x41
 807cca2:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 807cca4:	697b      	ldr	r3, [r7, #20]
 807cca6:	2203      	movs	r2, #3
 807cca8:	4619      	mov	r1, r3
 807ccaa:	6878      	ldr	r0, [r7, #4]
 807ccac:	f001 fb53 	bl	807e356 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 807ccb0:	e076      	b.n	807cda0 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 807ccb2:	697b      	ldr	r3, [r7, #20]
 807ccb4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807ccb8:	2b01      	cmp	r3, #1
 807ccba:	d931      	bls.n	807cd20 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 807ccbc:	697b      	ldr	r3, [r7, #20]
 807ccbe:	2209      	movs	r2, #9
 807ccc0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807ccc4:	697b      	ldr	r3, [r7, #20]
 807ccc6:	2200      	movs	r2, #0
 807ccc8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cccc:	697b      	ldr	r3, [r7, #20]
 807ccce:	2200      	movs	r2, #0
 807ccd0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807ccd4:	697b      	ldr	r3, [r7, #20]
 807ccd6:	2200      	movs	r2, #0
 807ccd8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ccdc:	697b      	ldr	r3, [r7, #20]
 807ccde:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cce2:	697b      	ldr	r3, [r7, #20]
 807cce4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 807cce8:	697b      	ldr	r3, [r7, #20]
 807ccea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807ccee:	3b02      	subs	r3, #2
 807ccf0:	029a      	lsls	r2, r3, #10
 807ccf2:	697b      	ldr	r3, [r7, #20]
 807ccf4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 807ccf8:	4413      	add	r3, r2
 807ccfa:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 807ccfc:	693b      	ldr	r3, [r7, #16]
 807ccfe:	695b      	ldr	r3, [r3, #20]
 807cd00:	68f8      	ldr	r0, [r7, #12]
 807cd02:	6979      	ldr	r1, [r7, #20]
 807cd04:	697a      	ldr	r2, [r7, #20]
 807cd06:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 807cd0a:	4798      	blx	r3
 807cd0c:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 807cd0e:	697b      	ldr	r3, [r7, #20]
 807cd10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cd14:	461a      	mov	r2, r3
 807cd16:	68b9      	ldr	r1, [r7, #8]
 807cd18:	6878      	ldr	r0, [r7, #4]
 807cd1a:	f001 fb1c 	bl	807e356 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 807cd1e:	e03f      	b.n	807cda0 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 807cd20:	697b      	ldr	r3, [r7, #20]
 807cd22:	220f      	movs	r2, #15
 807cd24:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807cd28:	697b      	ldr	r3, [r7, #20]
 807cd2a:	2200      	movs	r2, #0
 807cd2c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cd30:	697b      	ldr	r3, [r7, #20]
 807cd32:	2200      	movs	r2, #0
 807cd34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807cd38:	697b      	ldr	r3, [r7, #20]
 807cd3a:	2200      	movs	r2, #0
 807cd3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cd40:	697b      	ldr	r3, [r7, #20]
 807cd42:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cd46:	697b      	ldr	r3, [r7, #20]
 807cd48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 807cd4c:	6839      	ldr	r1, [r7, #0]
 807cd4e:	6878      	ldr	r0, [r7, #4]
 807cd50:	f001 fa90 	bl	807e274 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 807cd54:	e024      	b.n	807cda0 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 807cd56:	697b      	ldr	r3, [r7, #20]
 807cd58:	2200      	movs	r2, #0
 807cd5a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 807cd5e:	697b      	ldr	r3, [r7, #20]
 807cd60:	2200      	movs	r2, #0
 807cd62:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807cd66:	6839      	ldr	r1, [r7, #0]
 807cd68:	6878      	ldr	r0, [r7, #4]
 807cd6a:	f001 fa83 	bl	807e274 <USBD_CtlError>
 807cd6e:	e017      	b.n	807cda0 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807cd70:	697b      	ldr	r3, [r7, #20]
 807cd72:	2202      	movs	r2, #2
 807cd74:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807cd78:	697b      	ldr	r3, [r7, #20]
 807cd7a:	2200      	movs	r2, #0
 807cd7c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807cd80:	697b      	ldr	r3, [r7, #20]
 807cd82:	2200      	movs	r2, #0
 807cd84:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807cd88:	697b      	ldr	r3, [r7, #20]
 807cd8a:	2200      	movs	r2, #0
 807cd8c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807cd90:	697b      	ldr	r3, [r7, #20]
 807cd92:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cd96:	697b      	ldr	r3, [r7, #20]
 807cd98:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807cd9c:	e000      	b.n	807cda0 <DFU_Upload+0x1ac>
    return;
 807cd9e:	bf00      	nop
  }
}
 807cda0:	3718      	adds	r7, #24
 807cda2:	46bd      	mov	sp, r7
 807cda4:	bd80      	pop	{r7, pc}
	...

0807cda8 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 807cda8:	b580      	push	{r7, lr}
 807cdaa:	b084      	sub	sp, #16
 807cdac:	af00      	add	r7, sp, #0
 807cdae:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cdb0:	687b      	ldr	r3, [r7, #4]
 807cdb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cdb6:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807cdb8:	687b      	ldr	r3, [r7, #4]
 807cdba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807cdbe:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 807cdc0:	68fb      	ldr	r3, [r7, #12]
 807cdc2:	2b00      	cmp	r3, #0
 807cdc4:	f000 80a0 	beq.w	807cf08 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 807cdc8:	68fb      	ldr	r3, [r7, #12]
 807cdca:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cdce:	2b03      	cmp	r3, #3
 807cdd0:	d002      	beq.n	807cdd8 <DFU_GetStatus+0x30>
 807cdd2:	2b06      	cmp	r3, #6
 807cdd4:	d051      	beq.n	807ce7a <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 807cdd6:	e08e      	b.n	807cef6 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 807cdd8:	68fb      	ldr	r3, [r7, #12]
 807cdda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807cdde:	2b00      	cmp	r3, #0
 807cde0:	d034      	beq.n	807ce4c <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 807cde2:	68fb      	ldr	r3, [r7, #12]
 807cde4:	2204      	movs	r2, #4
 807cde6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 807cdea:	68fb      	ldr	r3, [r7, #12]
 807cdec:	2200      	movs	r2, #0
 807cdee:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807cdf2:	68fb      	ldr	r3, [r7, #12]
 807cdf4:	2200      	movs	r2, #0
 807cdf6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807cdfa:	68fb      	ldr	r3, [r7, #12]
 807cdfc:	2200      	movs	r2, #0
 807cdfe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ce02:	68fb      	ldr	r3, [r7, #12]
 807ce04:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807ce08:	68fb      	ldr	r3, [r7, #12]
 807ce0a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 807ce0e:	68fb      	ldr	r3, [r7, #12]
 807ce10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807ce14:	2b00      	cmp	r3, #0
 807ce16:	d10e      	bne.n	807ce36 <DFU_GetStatus+0x8e>
 807ce18:	68fb      	ldr	r3, [r7, #12]
 807ce1a:	781b      	ldrb	r3, [r3, #0]
 807ce1c:	2b41      	cmp	r3, #65	; 0x41
 807ce1e:	d10a      	bne.n	807ce36 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 807ce20:	68bb      	ldr	r3, [r7, #8]
 807ce22:	699b      	ldr	r3, [r3, #24]
 807ce24:	68fa      	ldr	r2, [r7, #12]
 807ce26:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 807ce2a:	68fa      	ldr	r2, [r7, #12]
 807ce2c:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 807ce30:	2100      	movs	r1, #0
 807ce32:	4798      	blx	r3
      break;
 807ce34:	e05f      	b.n	807cef6 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 807ce36:	68bb      	ldr	r3, [r7, #8]
 807ce38:	699b      	ldr	r3, [r3, #24]
 807ce3a:	68fa      	ldr	r2, [r7, #12]
 807ce3c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 807ce40:	68fa      	ldr	r2, [r7, #12]
 807ce42:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 807ce46:	2101      	movs	r1, #1
 807ce48:	4798      	blx	r3
      break;
 807ce4a:	e054      	b.n	807cef6 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 807ce4c:	68fb      	ldr	r3, [r7, #12]
 807ce4e:	2205      	movs	r2, #5
 807ce50:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 807ce54:	68fb      	ldr	r3, [r7, #12]
 807ce56:	2200      	movs	r2, #0
 807ce58:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807ce5c:	68fb      	ldr	r3, [r7, #12]
 807ce5e:	2200      	movs	r2, #0
 807ce60:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807ce64:	68fb      	ldr	r3, [r7, #12]
 807ce66:	2200      	movs	r2, #0
 807ce68:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807ce6c:	68fb      	ldr	r3, [r7, #12]
 807ce6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807ce72:	68fb      	ldr	r3, [r7, #12]
 807ce74:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 807ce78:	e03d      	b.n	807cef6 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 807ce7a:	68fb      	ldr	r3, [r7, #12]
 807ce7c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 807ce80:	2b01      	cmp	r3, #1
 807ce82:	d116      	bne.n	807ceb2 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 807ce84:	68fb      	ldr	r3, [r7, #12]
 807ce86:	2207      	movs	r2, #7
 807ce88:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 807ce8c:	68fb      	ldr	r3, [r7, #12]
 807ce8e:	2201      	movs	r2, #1
 807ce90:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807ce94:	68fb      	ldr	r3, [r7, #12]
 807ce96:	2200      	movs	r2, #0
 807ce98:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807ce9c:	68fb      	ldr	r3, [r7, #12]
 807ce9e:	2200      	movs	r2, #0
 807cea0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807cea4:	68fb      	ldr	r3, [r7, #12]
 807cea6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807ceaa:	68fb      	ldr	r3, [r7, #12]
 807ceac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 807ceb0:	e020      	b.n	807cef4 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 807ceb2:	68fb      	ldr	r3, [r7, #12]
 807ceb4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 807ceb8:	2b00      	cmp	r3, #0
 807ceba:	d11b      	bne.n	807cef4 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 807cebc:	4b14      	ldr	r3, [pc, #80]	; (807cf10 <DFU_GetStatus+0x168>)
 807cebe:	7d1b      	ldrb	r3, [r3, #20]
 807cec0:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 807cec4:	2b00      	cmp	r3, #0
 807cec6:	d015      	beq.n	807cef4 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 807cec8:	68fb      	ldr	r3, [r7, #12]
 807ceca:	2202      	movs	r2, #2
 807cecc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 807ced0:	68fb      	ldr	r3, [r7, #12]
 807ced2:	2200      	movs	r2, #0
 807ced4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 807ced8:	68fb      	ldr	r3, [r7, #12]
 807ceda:	2200      	movs	r2, #0
 807cedc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 807cee0:	68fb      	ldr	r3, [r7, #12]
 807cee2:	2200      	movs	r2, #0
 807cee4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 807cee8:	68fb      	ldr	r3, [r7, #12]
 807ceea:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807ceee:	68fb      	ldr	r3, [r7, #12]
 807cef0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 807cef4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 807cef6:	68fb      	ldr	r3, [r7, #12]
 807cef8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 807cefc:	2206      	movs	r2, #6
 807cefe:	4619      	mov	r1, r3
 807cf00:	6878      	ldr	r0, [r7, #4]
 807cf02:	f001 fa28 	bl	807e356 <USBD_CtlSendData>
 807cf06:	e000      	b.n	807cf0a <DFU_GetStatus+0x162>
    return;
 807cf08:	bf00      	nop
}
 807cf0a:	3710      	adds	r7, #16
 807cf0c:	46bd      	mov	sp, r7
 807cf0e:	bd80      	pop	{r7, pc}
 807cf10:	20000048 	.word	0x20000048

0807cf14 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 807cf14:	b480      	push	{r7}
 807cf16:	b085      	sub	sp, #20
 807cf18:	af00      	add	r7, sp, #0
 807cf1a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cf1c:	687b      	ldr	r3, [r7, #4]
 807cf1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cf22:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cf24:	68fb      	ldr	r3, [r7, #12]
 807cf26:	2b00      	cmp	r3, #0
 807cf28:	d042      	beq.n	807cfb0 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 807cf2a:	68fb      	ldr	r3, [r7, #12]
 807cf2c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807cf30:	2b0a      	cmp	r3, #10
 807cf32:	d11e      	bne.n	807cf72 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807cf34:	68fb      	ldr	r3, [r7, #12]
 807cf36:	2202      	movs	r2, #2
 807cf38:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 807cf3c:	68fb      	ldr	r3, [r7, #12]
 807cf3e:	2200      	movs	r2, #0
 807cf40:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807cf44:	68fb      	ldr	r3, [r7, #12]
 807cf46:	2200      	movs	r2, #0
 807cf48:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807cf4c:	68fb      	ldr	r3, [r7, #12]
 807cf4e:	2200      	movs	r2, #0
 807cf50:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807cf54:	68fb      	ldr	r3, [r7, #12]
 807cf56:	2200      	movs	r2, #0
 807cf58:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807cf5c:	68fb      	ldr	r3, [r7, #12]
 807cf5e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cf62:	68fb      	ldr	r3, [r7, #12]
 807cf64:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807cf68:	68fb      	ldr	r3, [r7, #12]
 807cf6a:	2200      	movs	r2, #0
 807cf6c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 807cf70:	e01f      	b.n	807cfb2 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 807cf72:	68fb      	ldr	r3, [r7, #12]
 807cf74:	220a      	movs	r2, #10
 807cf76:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 807cf7a:	68fb      	ldr	r3, [r7, #12]
 807cf7c:	220e      	movs	r2, #14
 807cf7e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807cf82:	68fb      	ldr	r3, [r7, #12]
 807cf84:	2200      	movs	r2, #0
 807cf86:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807cf8a:	68fb      	ldr	r3, [r7, #12]
 807cf8c:	2200      	movs	r2, #0
 807cf8e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807cf92:	68fb      	ldr	r3, [r7, #12]
 807cf94:	2200      	movs	r2, #0
 807cf96:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807cf9a:	68fb      	ldr	r3, [r7, #12]
 807cf9c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807cfa0:	68fb      	ldr	r3, [r7, #12]
 807cfa2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807cfa6:	68fb      	ldr	r3, [r7, #12]
 807cfa8:	2200      	movs	r2, #0
 807cfaa:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 807cfae:	e000      	b.n	807cfb2 <DFU_ClearStatus+0x9e>
    return;
 807cfb0:	bf00      	nop
  }
}
 807cfb2:	3714      	adds	r7, #20
 807cfb4:	46bd      	mov	sp, r7
 807cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807cfba:	4770      	bx	lr

0807cfbc <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 807cfbc:	b580      	push	{r7, lr}
 807cfbe:	b084      	sub	sp, #16
 807cfc0:	af00      	add	r7, sp, #0
 807cfc2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cfc4:	687b      	ldr	r3, [r7, #4]
 807cfc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cfca:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cfcc:	68fb      	ldr	r3, [r7, #12]
 807cfce:	2b00      	cmp	r3, #0
 807cfd0:	d008      	beq.n	807cfe4 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 807cfd2:	68fb      	ldr	r3, [r7, #12]
 807cfd4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 807cfd8:	2201      	movs	r2, #1
 807cfda:	4619      	mov	r1, r3
 807cfdc:	6878      	ldr	r0, [r7, #4]
 807cfde:	f001 f9ba 	bl	807e356 <USBD_CtlSendData>
 807cfe2:	e000      	b.n	807cfe6 <DFU_GetState+0x2a>
    return;
 807cfe4:	bf00      	nop
}
 807cfe6:	3710      	adds	r7, #16
 807cfe8:	46bd      	mov	sp, r7
 807cfea:	bd80      	pop	{r7, pc}

0807cfec <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 807cfec:	b480      	push	{r7}
 807cfee:	b085      	sub	sp, #20
 807cff0:	af00      	add	r7, sp, #0
 807cff2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807cff4:	687b      	ldr	r3, [r7, #4]
 807cff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807cffa:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807cffc:	68fb      	ldr	r3, [r7, #12]
 807cffe:	2b00      	cmp	r3, #0
 807d000:	d03f      	beq.n	807d082 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807d002:	68fb      	ldr	r3, [r7, #12]
 807d004:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807d008:	2b02      	cmp	r3, #2
 807d00a:	d013      	beq.n	807d034 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807d00c:	68fb      	ldr	r3, [r7, #12]
 807d00e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807d012:	2b03      	cmp	r3, #3
 807d014:	d00e      	beq.n	807d034 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807d016:	68fb      	ldr	r3, [r7, #12]
 807d018:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 807d01c:	2b05      	cmp	r3, #5
 807d01e:	d009      	beq.n	807d034 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807d020:	68fb      	ldr	r3, [r7, #12]
 807d022:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 807d026:	2b06      	cmp	r3, #6
 807d028:	d004      	beq.n	807d034 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 807d02a:	68fb      	ldr	r3, [r7, #12]
 807d02c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807d030:	2b09      	cmp	r3, #9
 807d032:	d127      	bne.n	807d084 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 807d034:	68fb      	ldr	r3, [r7, #12]
 807d036:	2202      	movs	r2, #2
 807d038:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 807d03c:	68fb      	ldr	r3, [r7, #12]
 807d03e:	2200      	movs	r2, #0
 807d040:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807d044:	68fb      	ldr	r3, [r7, #12]
 807d046:	2200      	movs	r2, #0
 807d048:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807d04c:	68fb      	ldr	r3, [r7, #12]
 807d04e:	2200      	movs	r2, #0
 807d050:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 807d054:	68fb      	ldr	r3, [r7, #12]
 807d056:	2200      	movs	r2, #0
 807d058:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d05c:	68fb      	ldr	r3, [r7, #12]
 807d05e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807d062:	68fb      	ldr	r3, [r7, #12]
 807d064:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 807d068:	68fb      	ldr	r3, [r7, #12]
 807d06a:	2200      	movs	r2, #0
 807d06c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 807d070:	68fb      	ldr	r3, [r7, #12]
 807d072:	2200      	movs	r2, #0
 807d074:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 807d078:	68fb      	ldr	r3, [r7, #12]
 807d07a:	2200      	movs	r2, #0
 807d07c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 807d080:	e000      	b.n	807d084 <DFU_Abort+0x98>
    return;
 807d082:	bf00      	nop
  }
}
 807d084:	3714      	adds	r7, #20
 807d086:	46bd      	mov	sp, r7
 807d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d08c:	4770      	bx	lr
	...

0807d090 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 807d090:	b580      	push	{r7, lr}
 807d092:	b084      	sub	sp, #16
 807d094:	af00      	add	r7, sp, #0
 807d096:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807d098:	687b      	ldr	r3, [r7, #4]
 807d09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807d09e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807d0a0:	68fb      	ldr	r3, [r7, #12]
 807d0a2:	2b00      	cmp	r3, #0
 807d0a4:	d03b      	beq.n	807d11e <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 807d0a6:	68fb      	ldr	r3, [r7, #12]
 807d0a8:	2200      	movs	r2, #0
 807d0aa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 807d0ae:	4b1e      	ldr	r3, [pc, #120]	; (807d128 <DFU_Leave+0x98>)
 807d0b0:	7d1b      	ldrb	r3, [r3, #20]
 807d0b2:	f003 0304 	and.w	r3, r3, #4
 807d0b6:	2b00      	cmp	r3, #0
 807d0b8:	d016      	beq.n	807d0e8 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 807d0ba:	68fb      	ldr	r3, [r7, #12]
 807d0bc:	2206      	movs	r2, #6
 807d0be:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807d0c2:	68fb      	ldr	r3, [r7, #12]
 807d0c4:	2200      	movs	r2, #0
 807d0c6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807d0ca:	68fb      	ldr	r3, [r7, #12]
 807d0cc:	2200      	movs	r2, #0
 807d0ce:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807d0d2:	68fb      	ldr	r3, [r7, #12]
 807d0d4:	2200      	movs	r2, #0
 807d0d6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d0da:	68fb      	ldr	r3, [r7, #12]
 807d0dc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807d0e0:	68fb      	ldr	r3, [r7, #12]
 807d0e2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 807d0e6:	e01b      	b.n	807d120 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 807d0e8:	68fb      	ldr	r3, [r7, #12]
 807d0ea:	2208      	movs	r2, #8
 807d0ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 807d0f0:	68fb      	ldr	r3, [r7, #12]
 807d0f2:	2200      	movs	r2, #0
 807d0f4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807d0f8:	68fb      	ldr	r3, [r7, #12]
 807d0fa:	2200      	movs	r2, #0
 807d0fc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 807d100:	68fb      	ldr	r3, [r7, #12]
 807d102:	2200      	movs	r2, #0
 807d104:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807d108:	68fb      	ldr	r3, [r7, #12]
 807d10a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807d10e:	68fb      	ldr	r3, [r7, #12]
 807d110:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 807d114:	6878      	ldr	r0, [r7, #4]
 807d116:	f000 f86c 	bl	807d1f2 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 807d11a:	f7ff f9b3 	bl	807c484 <__NVIC_SystemReset>
    return;
 807d11e:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 807d120:	3710      	adds	r7, #16
 807d122:	46bd      	mov	sp, r7
 807d124:	bd80      	pop	{r7, pc}
 807d126:	bf00      	nop
 807d128:	20000048 	.word	0x20000048

0807d12c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 807d12c:	b580      	push	{r7, lr}
 807d12e:	b086      	sub	sp, #24
 807d130:	af00      	add	r7, sp, #0
 807d132:	60f8      	str	r0, [r7, #12]
 807d134:	60b9      	str	r1, [r7, #8]
 807d136:	4613      	mov	r3, r2
 807d138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 807d13a:	68fb      	ldr	r3, [r7, #12]
 807d13c:	2b00      	cmp	r3, #0
 807d13e:	d101      	bne.n	807d144 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 807d140:	2303      	movs	r3, #3
 807d142:	e01f      	b.n	807d184 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 807d144:	68fb      	ldr	r3, [r7, #12]
 807d146:	2200      	movs	r2, #0
 807d148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 807d14c:	68fb      	ldr	r3, [r7, #12]
 807d14e:	2200      	movs	r2, #0
 807d150:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 807d154:	68fb      	ldr	r3, [r7, #12]
 807d156:	2200      	movs	r2, #0
 807d158:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 807d15c:	68bb      	ldr	r3, [r7, #8]
 807d15e:	2b00      	cmp	r3, #0
 807d160:	d003      	beq.n	807d16a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 807d162:	68fb      	ldr	r3, [r7, #12]
 807d164:	68ba      	ldr	r2, [r7, #8]
 807d166:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d16a:	68fb      	ldr	r3, [r7, #12]
 807d16c:	2201      	movs	r2, #1
 807d16e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 807d172:	68fb      	ldr	r3, [r7, #12]
 807d174:	79fa      	ldrb	r2, [r7, #7]
 807d176:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 807d178:	68f8      	ldr	r0, [r7, #12]
 807d17a:	f001 fd2b 	bl	807ebd4 <USBD_LL_Init>
 807d17e:	4603      	mov	r3, r0
 807d180:	75fb      	strb	r3, [r7, #23]

  return ret;
 807d182:	7dfb      	ldrb	r3, [r7, #23]
}
 807d184:	4618      	mov	r0, r3
 807d186:	3718      	adds	r7, #24
 807d188:	46bd      	mov	sp, r7
 807d18a:	bd80      	pop	{r7, pc}

0807d18c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 807d18c:	b580      	push	{r7, lr}
 807d18e:	b084      	sub	sp, #16
 807d190:	af00      	add	r7, sp, #0
 807d192:	6078      	str	r0, [r7, #4]
 807d194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 807d196:	2300      	movs	r3, #0
 807d198:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 807d19a:	683b      	ldr	r3, [r7, #0]
 807d19c:	2b00      	cmp	r3, #0
 807d19e:	d101      	bne.n	807d1a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 807d1a0:	2303      	movs	r3, #3
 807d1a2:	e016      	b.n	807d1d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 807d1a4:	687b      	ldr	r3, [r7, #4]
 807d1a6:	683a      	ldr	r2, [r7, #0]
 807d1a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 807d1ac:	687b      	ldr	r3, [r7, #4]
 807d1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807d1b4:	2b00      	cmp	r3, #0
 807d1b6:	d00b      	beq.n	807d1d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 807d1b8:	687b      	ldr	r3, [r7, #4]
 807d1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807d1c0:	f107 020e 	add.w	r2, r7, #14
 807d1c4:	4610      	mov	r0, r2
 807d1c6:	4798      	blx	r3
 807d1c8:	4602      	mov	r2, r0
 807d1ca:	687b      	ldr	r3, [r7, #4]
 807d1cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 807d1d0:	2300      	movs	r3, #0
}
 807d1d2:	4618      	mov	r0, r3
 807d1d4:	3710      	adds	r7, #16
 807d1d6:	46bd      	mov	sp, r7
 807d1d8:	bd80      	pop	{r7, pc}

0807d1da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 807d1da:	b580      	push	{r7, lr}
 807d1dc:	b082      	sub	sp, #8
 807d1de:	af00      	add	r7, sp, #0
 807d1e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 807d1e2:	6878      	ldr	r0, [r7, #4]
 807d1e4:	f001 fd42 	bl	807ec6c <USBD_LL_Start>
 807d1e8:	4603      	mov	r3, r0
}
 807d1ea:	4618      	mov	r0, r3
 807d1ec:	3708      	adds	r7, #8
 807d1ee:	46bd      	mov	sp, r7
 807d1f0:	bd80      	pop	{r7, pc}

0807d1f2 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 807d1f2:	b580      	push	{r7, lr}
 807d1f4:	b082      	sub	sp, #8
 807d1f6:	af00      	add	r7, sp, #0
 807d1f8:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 807d1fa:	6878      	ldr	r0, [r7, #4]
 807d1fc:	f001 fd51 	bl	807eca2 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 807d200:	687b      	ldr	r3, [r7, #4]
 807d202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d206:	2b00      	cmp	r3, #0
 807d208:	d009      	beq.n	807d21e <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d20a:	687b      	ldr	r3, [r7, #4]
 807d20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d210:	685b      	ldr	r3, [r3, #4]
 807d212:	687a      	ldr	r2, [r7, #4]
 807d214:	6852      	ldr	r2, [r2, #4]
 807d216:	b2d2      	uxtb	r2, r2
 807d218:	4611      	mov	r1, r2
 807d21a:	6878      	ldr	r0, [r7, #4]
 807d21c:	4798      	blx	r3
  }

  return USBD_OK;
 807d21e:	2300      	movs	r3, #0
}
 807d220:	4618      	mov	r0, r3
 807d222:	3708      	adds	r7, #8
 807d224:	46bd      	mov	sp, r7
 807d226:	bd80      	pop	{r7, pc}

0807d228 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 807d228:	b480      	push	{r7}
 807d22a:	b083      	sub	sp, #12
 807d22c:	af00      	add	r7, sp, #0
 807d22e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 807d230:	2300      	movs	r3, #0
}
 807d232:	4618      	mov	r0, r3
 807d234:	370c      	adds	r7, #12
 807d236:	46bd      	mov	sp, r7
 807d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d23c:	4770      	bx	lr

0807d23e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807d23e:	b580      	push	{r7, lr}
 807d240:	b084      	sub	sp, #16
 807d242:	af00      	add	r7, sp, #0
 807d244:	6078      	str	r0, [r7, #4]
 807d246:	460b      	mov	r3, r1
 807d248:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 807d24a:	2303      	movs	r3, #3
 807d24c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 807d24e:	687b      	ldr	r3, [r7, #4]
 807d250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d254:	2b00      	cmp	r3, #0
 807d256:	d009      	beq.n	807d26c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 807d258:	687b      	ldr	r3, [r7, #4]
 807d25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d25e:	681b      	ldr	r3, [r3, #0]
 807d260:	78fa      	ldrb	r2, [r7, #3]
 807d262:	4611      	mov	r1, r2
 807d264:	6878      	ldr	r0, [r7, #4]
 807d266:	4798      	blx	r3
 807d268:	4603      	mov	r3, r0
 807d26a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 807d26c:	7bfb      	ldrb	r3, [r7, #15]
}
 807d26e:	4618      	mov	r0, r3
 807d270:	3710      	adds	r7, #16
 807d272:	46bd      	mov	sp, r7
 807d274:	bd80      	pop	{r7, pc}

0807d276 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 807d276:	b580      	push	{r7, lr}
 807d278:	b082      	sub	sp, #8
 807d27a:	af00      	add	r7, sp, #0
 807d27c:	6078      	str	r0, [r7, #4]
 807d27e:	460b      	mov	r3, r1
 807d280:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 807d282:	687b      	ldr	r3, [r7, #4]
 807d284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d288:	2b00      	cmp	r3, #0
 807d28a:	d007      	beq.n	807d29c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 807d28c:	687b      	ldr	r3, [r7, #4]
 807d28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d292:	685b      	ldr	r3, [r3, #4]
 807d294:	78fa      	ldrb	r2, [r7, #3]
 807d296:	4611      	mov	r1, r2
 807d298:	6878      	ldr	r0, [r7, #4]
 807d29a:	4798      	blx	r3
  }

  return USBD_OK;
 807d29c:	2300      	movs	r3, #0
}
 807d29e:	4618      	mov	r0, r3
 807d2a0:	3708      	adds	r7, #8
 807d2a2:	46bd      	mov	sp, r7
 807d2a4:	bd80      	pop	{r7, pc}

0807d2a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 807d2a6:	b580      	push	{r7, lr}
 807d2a8:	b084      	sub	sp, #16
 807d2aa:	af00      	add	r7, sp, #0
 807d2ac:	6078      	str	r0, [r7, #4]
 807d2ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 807d2b0:	687b      	ldr	r3, [r7, #4]
 807d2b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d2b6:	6839      	ldr	r1, [r7, #0]
 807d2b8:	4618      	mov	r0, r3
 807d2ba:	f000 ffa1 	bl	807e200 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 807d2be:	687b      	ldr	r3, [r7, #4]
 807d2c0:	2201      	movs	r2, #1
 807d2c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 807d2c6:	687b      	ldr	r3, [r7, #4]
 807d2c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 807d2cc:	461a      	mov	r2, r3
 807d2ce:	687b      	ldr	r3, [r7, #4]
 807d2d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 807d2d4:	687b      	ldr	r3, [r7, #4]
 807d2d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 807d2da:	f003 031f 	and.w	r3, r3, #31
 807d2de:	2b02      	cmp	r3, #2
 807d2e0:	d01a      	beq.n	807d318 <USBD_LL_SetupStage+0x72>
 807d2e2:	2b02      	cmp	r3, #2
 807d2e4:	d822      	bhi.n	807d32c <USBD_LL_SetupStage+0x86>
 807d2e6:	2b00      	cmp	r3, #0
 807d2e8:	d002      	beq.n	807d2f0 <USBD_LL_SetupStage+0x4a>
 807d2ea:	2b01      	cmp	r3, #1
 807d2ec:	d00a      	beq.n	807d304 <USBD_LL_SetupStage+0x5e>
 807d2ee:	e01d      	b.n	807d32c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 807d2f0:	687b      	ldr	r3, [r7, #4]
 807d2f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d2f6:	4619      	mov	r1, r3
 807d2f8:	6878      	ldr	r0, [r7, #4]
 807d2fa:	f000 fa61 	bl	807d7c0 <USBD_StdDevReq>
 807d2fe:	4603      	mov	r3, r0
 807d300:	73fb      	strb	r3, [r7, #15]
      break;
 807d302:	e020      	b.n	807d346 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 807d304:	687b      	ldr	r3, [r7, #4]
 807d306:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d30a:	4619      	mov	r1, r3
 807d30c:	6878      	ldr	r0, [r7, #4]
 807d30e:	f000 fac5 	bl	807d89c <USBD_StdItfReq>
 807d312:	4603      	mov	r3, r0
 807d314:	73fb      	strb	r3, [r7, #15]
      break;
 807d316:	e016      	b.n	807d346 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 807d318:	687b      	ldr	r3, [r7, #4]
 807d31a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 807d31e:	4619      	mov	r1, r3
 807d320:	6878      	ldr	r0, [r7, #4]
 807d322:	f000 fb04 	bl	807d92e <USBD_StdEPReq>
 807d326:	4603      	mov	r3, r0
 807d328:	73fb      	strb	r3, [r7, #15]
      break;
 807d32a:	e00c      	b.n	807d346 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 807d32c:	687b      	ldr	r3, [r7, #4]
 807d32e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 807d332:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 807d336:	b2db      	uxtb	r3, r3
 807d338:	4619      	mov	r1, r3
 807d33a:	6878      	ldr	r0, [r7, #4]
 807d33c:	f001 fcf2 	bl	807ed24 <USBD_LL_StallEP>
 807d340:	4603      	mov	r3, r0
 807d342:	73fb      	strb	r3, [r7, #15]
      break;
 807d344:	bf00      	nop
  }

  return ret;
 807d346:	7bfb      	ldrb	r3, [r7, #15]
}
 807d348:	4618      	mov	r0, r3
 807d34a:	3710      	adds	r7, #16
 807d34c:	46bd      	mov	sp, r7
 807d34e:	bd80      	pop	{r7, pc}

0807d350 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 807d350:	b580      	push	{r7, lr}
 807d352:	b086      	sub	sp, #24
 807d354:	af00      	add	r7, sp, #0
 807d356:	60f8      	str	r0, [r7, #12]
 807d358:	460b      	mov	r3, r1
 807d35a:	607a      	str	r2, [r7, #4]
 807d35c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 807d35e:	7afb      	ldrb	r3, [r7, #11]
 807d360:	2b00      	cmp	r3, #0
 807d362:	d138      	bne.n	807d3d6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 807d364:	68fb      	ldr	r3, [r7, #12]
 807d366:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 807d36a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 807d36c:	68fb      	ldr	r3, [r7, #12]
 807d36e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 807d372:	2b03      	cmp	r3, #3
 807d374:	d14a      	bne.n	807d40c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 807d376:	693b      	ldr	r3, [r7, #16]
 807d378:	689a      	ldr	r2, [r3, #8]
 807d37a:	693b      	ldr	r3, [r7, #16]
 807d37c:	68db      	ldr	r3, [r3, #12]
 807d37e:	429a      	cmp	r2, r3
 807d380:	d913      	bls.n	807d3aa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 807d382:	693b      	ldr	r3, [r7, #16]
 807d384:	689a      	ldr	r2, [r3, #8]
 807d386:	693b      	ldr	r3, [r7, #16]
 807d388:	68db      	ldr	r3, [r3, #12]
 807d38a:	1ad2      	subs	r2, r2, r3
 807d38c:	693b      	ldr	r3, [r7, #16]
 807d38e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 807d390:	693b      	ldr	r3, [r7, #16]
 807d392:	68da      	ldr	r2, [r3, #12]
 807d394:	693b      	ldr	r3, [r7, #16]
 807d396:	689b      	ldr	r3, [r3, #8]
 807d398:	4293      	cmp	r3, r2
 807d39a:	bf28      	it	cs
 807d39c:	4613      	movcs	r3, r2
 807d39e:	461a      	mov	r2, r3
 807d3a0:	6879      	ldr	r1, [r7, #4]
 807d3a2:	68f8      	ldr	r0, [r7, #12]
 807d3a4:	f001 f820 	bl	807e3e8 <USBD_CtlContinueRx>
 807d3a8:	e030      	b.n	807d40c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d3aa:	68fb      	ldr	r3, [r7, #12]
 807d3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d3b0:	b2db      	uxtb	r3, r3
 807d3b2:	2b03      	cmp	r3, #3
 807d3b4:	d10b      	bne.n	807d3ce <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 807d3b6:	68fb      	ldr	r3, [r7, #12]
 807d3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d3bc:	691b      	ldr	r3, [r3, #16]
 807d3be:	2b00      	cmp	r3, #0
 807d3c0:	d005      	beq.n	807d3ce <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 807d3c2:	68fb      	ldr	r3, [r7, #12]
 807d3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d3c8:	691b      	ldr	r3, [r3, #16]
 807d3ca:	68f8      	ldr	r0, [r7, #12]
 807d3cc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 807d3ce:	68f8      	ldr	r0, [r7, #12]
 807d3d0:	f001 f81b 	bl	807e40a <USBD_CtlSendStatus>
 807d3d4:	e01a      	b.n	807d40c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d3d6:	68fb      	ldr	r3, [r7, #12]
 807d3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d3dc:	b2db      	uxtb	r3, r3
 807d3de:	2b03      	cmp	r3, #3
 807d3e0:	d114      	bne.n	807d40c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 807d3e2:	68fb      	ldr	r3, [r7, #12]
 807d3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d3e8:	699b      	ldr	r3, [r3, #24]
 807d3ea:	2b00      	cmp	r3, #0
 807d3ec:	d00e      	beq.n	807d40c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 807d3ee:	68fb      	ldr	r3, [r7, #12]
 807d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d3f4:	699b      	ldr	r3, [r3, #24]
 807d3f6:	7afa      	ldrb	r2, [r7, #11]
 807d3f8:	4611      	mov	r1, r2
 807d3fa:	68f8      	ldr	r0, [r7, #12]
 807d3fc:	4798      	blx	r3
 807d3fe:	4603      	mov	r3, r0
 807d400:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 807d402:	7dfb      	ldrb	r3, [r7, #23]
 807d404:	2b00      	cmp	r3, #0
 807d406:	d001      	beq.n	807d40c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 807d408:	7dfb      	ldrb	r3, [r7, #23]
 807d40a:	e000      	b.n	807d40e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 807d40c:	2300      	movs	r3, #0
}
 807d40e:	4618      	mov	r0, r3
 807d410:	3718      	adds	r7, #24
 807d412:	46bd      	mov	sp, r7
 807d414:	bd80      	pop	{r7, pc}

0807d416 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 807d416:	b580      	push	{r7, lr}
 807d418:	b086      	sub	sp, #24
 807d41a:	af00      	add	r7, sp, #0
 807d41c:	60f8      	str	r0, [r7, #12]
 807d41e:	460b      	mov	r3, r1
 807d420:	607a      	str	r2, [r7, #4]
 807d422:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 807d424:	7afb      	ldrb	r3, [r7, #11]
 807d426:	2b00      	cmp	r3, #0
 807d428:	d16b      	bne.n	807d502 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 807d42a:	68fb      	ldr	r3, [r7, #12]
 807d42c:	3314      	adds	r3, #20
 807d42e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 807d430:	68fb      	ldr	r3, [r7, #12]
 807d432:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 807d436:	2b02      	cmp	r3, #2
 807d438:	d156      	bne.n	807d4e8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 807d43a:	693b      	ldr	r3, [r7, #16]
 807d43c:	689a      	ldr	r2, [r3, #8]
 807d43e:	693b      	ldr	r3, [r7, #16]
 807d440:	68db      	ldr	r3, [r3, #12]
 807d442:	429a      	cmp	r2, r3
 807d444:	d914      	bls.n	807d470 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 807d446:	693b      	ldr	r3, [r7, #16]
 807d448:	689a      	ldr	r2, [r3, #8]
 807d44a:	693b      	ldr	r3, [r7, #16]
 807d44c:	68db      	ldr	r3, [r3, #12]
 807d44e:	1ad2      	subs	r2, r2, r3
 807d450:	693b      	ldr	r3, [r7, #16]
 807d452:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 807d454:	693b      	ldr	r3, [r7, #16]
 807d456:	689b      	ldr	r3, [r3, #8]
 807d458:	461a      	mov	r2, r3
 807d45a:	6879      	ldr	r1, [r7, #4]
 807d45c:	68f8      	ldr	r0, [r7, #12]
 807d45e:	f000 ff95 	bl	807e38c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807d462:	2300      	movs	r3, #0
 807d464:	2200      	movs	r2, #0
 807d466:	2100      	movs	r1, #0
 807d468:	68f8      	ldr	r0, [r7, #12]
 807d46a:	f001 fd05 	bl	807ee78 <USBD_LL_PrepareReceive>
 807d46e:	e03b      	b.n	807d4e8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 807d470:	693b      	ldr	r3, [r7, #16]
 807d472:	68da      	ldr	r2, [r3, #12]
 807d474:	693b      	ldr	r3, [r7, #16]
 807d476:	689b      	ldr	r3, [r3, #8]
 807d478:	429a      	cmp	r2, r3
 807d47a:	d11c      	bne.n	807d4b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 807d47c:	693b      	ldr	r3, [r7, #16]
 807d47e:	685a      	ldr	r2, [r3, #4]
 807d480:	693b      	ldr	r3, [r7, #16]
 807d482:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 807d484:	429a      	cmp	r2, r3
 807d486:	d316      	bcc.n	807d4b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 807d488:	693b      	ldr	r3, [r7, #16]
 807d48a:	685a      	ldr	r2, [r3, #4]
 807d48c:	68fb      	ldr	r3, [r7, #12]
 807d48e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 807d492:	429a      	cmp	r2, r3
 807d494:	d20f      	bcs.n	807d4b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 807d496:	2200      	movs	r2, #0
 807d498:	2100      	movs	r1, #0
 807d49a:	68f8      	ldr	r0, [r7, #12]
 807d49c:	f000 ff76 	bl	807e38c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 807d4a0:	68fb      	ldr	r3, [r7, #12]
 807d4a2:	2200      	movs	r2, #0
 807d4a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807d4a8:	2300      	movs	r3, #0
 807d4aa:	2200      	movs	r2, #0
 807d4ac:	2100      	movs	r1, #0
 807d4ae:	68f8      	ldr	r0, [r7, #12]
 807d4b0:	f001 fce2 	bl	807ee78 <USBD_LL_PrepareReceive>
 807d4b4:	e018      	b.n	807d4e8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d4b6:	68fb      	ldr	r3, [r7, #12]
 807d4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d4bc:	b2db      	uxtb	r3, r3
 807d4be:	2b03      	cmp	r3, #3
 807d4c0:	d10b      	bne.n	807d4da <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 807d4c2:	68fb      	ldr	r3, [r7, #12]
 807d4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d4c8:	68db      	ldr	r3, [r3, #12]
 807d4ca:	2b00      	cmp	r3, #0
 807d4cc:	d005      	beq.n	807d4da <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 807d4ce:	68fb      	ldr	r3, [r7, #12]
 807d4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d4d4:	68db      	ldr	r3, [r3, #12]
 807d4d6:	68f8      	ldr	r0, [r7, #12]
 807d4d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 807d4da:	2180      	movs	r1, #128	; 0x80
 807d4dc:	68f8      	ldr	r0, [r7, #12]
 807d4de:	f001 fc21 	bl	807ed24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 807d4e2:	68f8      	ldr	r0, [r7, #12]
 807d4e4:	f000 ffa4 	bl	807e430 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 807d4e8:	68fb      	ldr	r3, [r7, #12]
 807d4ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 807d4ee:	2b01      	cmp	r3, #1
 807d4f0:	d122      	bne.n	807d538 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 807d4f2:	68f8      	ldr	r0, [r7, #12]
 807d4f4:	f7ff fe98 	bl	807d228 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 807d4f8:	68fb      	ldr	r3, [r7, #12]
 807d4fa:	2200      	movs	r2, #0
 807d4fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 807d500:	e01a      	b.n	807d538 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d502:	68fb      	ldr	r3, [r7, #12]
 807d504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d508:	b2db      	uxtb	r3, r3
 807d50a:	2b03      	cmp	r3, #3
 807d50c:	d114      	bne.n	807d538 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 807d50e:	68fb      	ldr	r3, [r7, #12]
 807d510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d514:	695b      	ldr	r3, [r3, #20]
 807d516:	2b00      	cmp	r3, #0
 807d518:	d00e      	beq.n	807d538 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 807d51a:	68fb      	ldr	r3, [r7, #12]
 807d51c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d520:	695b      	ldr	r3, [r3, #20]
 807d522:	7afa      	ldrb	r2, [r7, #11]
 807d524:	4611      	mov	r1, r2
 807d526:	68f8      	ldr	r0, [r7, #12]
 807d528:	4798      	blx	r3
 807d52a:	4603      	mov	r3, r0
 807d52c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 807d52e:	7dfb      	ldrb	r3, [r7, #23]
 807d530:	2b00      	cmp	r3, #0
 807d532:	d001      	beq.n	807d538 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 807d534:	7dfb      	ldrb	r3, [r7, #23]
 807d536:	e000      	b.n	807d53a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 807d538:	2300      	movs	r3, #0
}
 807d53a:	4618      	mov	r0, r3
 807d53c:	3718      	adds	r7, #24
 807d53e:	46bd      	mov	sp, r7
 807d540:	bd80      	pop	{r7, pc}

0807d542 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 807d542:	b580      	push	{r7, lr}
 807d544:	b082      	sub	sp, #8
 807d546:	af00      	add	r7, sp, #0
 807d548:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d54a:	687b      	ldr	r3, [r7, #4]
 807d54c:	2201      	movs	r2, #1
 807d54e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 807d552:	687b      	ldr	r3, [r7, #4]
 807d554:	2200      	movs	r2, #0
 807d556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 807d55a:	687b      	ldr	r3, [r7, #4]
 807d55c:	2200      	movs	r2, #0
 807d55e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 807d560:	687b      	ldr	r3, [r7, #4]
 807d562:	2200      	movs	r2, #0
 807d564:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 807d568:	687b      	ldr	r3, [r7, #4]
 807d56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d56e:	2b00      	cmp	r3, #0
 807d570:	d101      	bne.n	807d576 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 807d572:	2303      	movs	r3, #3
 807d574:	e02f      	b.n	807d5d6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 807d576:	687b      	ldr	r3, [r7, #4]
 807d578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807d57c:	2b00      	cmp	r3, #0
 807d57e:	d00f      	beq.n	807d5a0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 807d580:	687b      	ldr	r3, [r7, #4]
 807d582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d586:	685b      	ldr	r3, [r3, #4]
 807d588:	2b00      	cmp	r3, #0
 807d58a:	d009      	beq.n	807d5a0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d58c:	687b      	ldr	r3, [r7, #4]
 807d58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d592:	685b      	ldr	r3, [r3, #4]
 807d594:	687a      	ldr	r2, [r7, #4]
 807d596:	6852      	ldr	r2, [r2, #4]
 807d598:	b2d2      	uxtb	r2, r2
 807d59a:	4611      	mov	r1, r2
 807d59c:	6878      	ldr	r0, [r7, #4]
 807d59e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 807d5a0:	2340      	movs	r3, #64	; 0x40
 807d5a2:	2200      	movs	r2, #0
 807d5a4:	2100      	movs	r1, #0
 807d5a6:	6878      	ldr	r0, [r7, #4]
 807d5a8:	f001 fb96 	bl	807ecd8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 807d5ac:	687b      	ldr	r3, [r7, #4]
 807d5ae:	2201      	movs	r2, #1
 807d5b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 807d5b4:	687b      	ldr	r3, [r7, #4]
 807d5b6:	2240      	movs	r2, #64	; 0x40
 807d5b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 807d5bc:	2340      	movs	r3, #64	; 0x40
 807d5be:	2200      	movs	r2, #0
 807d5c0:	2180      	movs	r1, #128	; 0x80
 807d5c2:	6878      	ldr	r0, [r7, #4]
 807d5c4:	f001 fb88 	bl	807ecd8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 807d5c8:	687b      	ldr	r3, [r7, #4]
 807d5ca:	2201      	movs	r2, #1
 807d5cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 807d5ce:	687b      	ldr	r3, [r7, #4]
 807d5d0:	2240      	movs	r2, #64	; 0x40
 807d5d2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 807d5d4:	2300      	movs	r3, #0
}
 807d5d6:	4618      	mov	r0, r3
 807d5d8:	3708      	adds	r7, #8
 807d5da:	46bd      	mov	sp, r7
 807d5dc:	bd80      	pop	{r7, pc}

0807d5de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 807d5de:	b480      	push	{r7}
 807d5e0:	b083      	sub	sp, #12
 807d5e2:	af00      	add	r7, sp, #0
 807d5e4:	6078      	str	r0, [r7, #4]
 807d5e6:	460b      	mov	r3, r1
 807d5e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 807d5ea:	687b      	ldr	r3, [r7, #4]
 807d5ec:	78fa      	ldrb	r2, [r7, #3]
 807d5ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 807d5f0:	2300      	movs	r3, #0
}
 807d5f2:	4618      	mov	r0, r3
 807d5f4:	370c      	adds	r7, #12
 807d5f6:	46bd      	mov	sp, r7
 807d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d5fc:	4770      	bx	lr

0807d5fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 807d5fe:	b480      	push	{r7}
 807d600:	b083      	sub	sp, #12
 807d602:	af00      	add	r7, sp, #0
 807d604:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 807d606:	687b      	ldr	r3, [r7, #4]
 807d608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d60c:	b2da      	uxtb	r2, r3
 807d60e:	687b      	ldr	r3, [r7, #4]
 807d610:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 807d614:	687b      	ldr	r3, [r7, #4]
 807d616:	2204      	movs	r2, #4
 807d618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 807d61c:	2300      	movs	r3, #0
}
 807d61e:	4618      	mov	r0, r3
 807d620:	370c      	adds	r7, #12
 807d622:	46bd      	mov	sp, r7
 807d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d628:	4770      	bx	lr

0807d62a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 807d62a:	b480      	push	{r7}
 807d62c:	b083      	sub	sp, #12
 807d62e:	af00      	add	r7, sp, #0
 807d630:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 807d632:	687b      	ldr	r3, [r7, #4]
 807d634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d638:	b2db      	uxtb	r3, r3
 807d63a:	2b04      	cmp	r3, #4
 807d63c:	d106      	bne.n	807d64c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 807d63e:	687b      	ldr	r3, [r7, #4]
 807d640:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 807d644:	b2da      	uxtb	r2, r3
 807d646:	687b      	ldr	r3, [r7, #4]
 807d648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 807d64c:	2300      	movs	r3, #0
}
 807d64e:	4618      	mov	r0, r3
 807d650:	370c      	adds	r7, #12
 807d652:	46bd      	mov	sp, r7
 807d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d658:	4770      	bx	lr

0807d65a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 807d65a:	b580      	push	{r7, lr}
 807d65c:	b082      	sub	sp, #8
 807d65e:	af00      	add	r7, sp, #0
 807d660:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 807d662:	687b      	ldr	r3, [r7, #4]
 807d664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d668:	2b00      	cmp	r3, #0
 807d66a:	d101      	bne.n	807d670 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 807d66c:	2303      	movs	r3, #3
 807d66e:	e012      	b.n	807d696 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d670:	687b      	ldr	r3, [r7, #4]
 807d672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d676:	b2db      	uxtb	r3, r3
 807d678:	2b03      	cmp	r3, #3
 807d67a:	d10b      	bne.n	807d694 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 807d67c:	687b      	ldr	r3, [r7, #4]
 807d67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d682:	69db      	ldr	r3, [r3, #28]
 807d684:	2b00      	cmp	r3, #0
 807d686:	d005      	beq.n	807d694 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 807d688:	687b      	ldr	r3, [r7, #4]
 807d68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d68e:	69db      	ldr	r3, [r3, #28]
 807d690:	6878      	ldr	r0, [r7, #4]
 807d692:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d694:	2300      	movs	r3, #0
}
 807d696:	4618      	mov	r0, r3
 807d698:	3708      	adds	r7, #8
 807d69a:	46bd      	mov	sp, r7
 807d69c:	bd80      	pop	{r7, pc}

0807d69e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 807d69e:	b580      	push	{r7, lr}
 807d6a0:	b082      	sub	sp, #8
 807d6a2:	af00      	add	r7, sp, #0
 807d6a4:	6078      	str	r0, [r7, #4]
 807d6a6:	460b      	mov	r3, r1
 807d6a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 807d6aa:	687b      	ldr	r3, [r7, #4]
 807d6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6b0:	2b00      	cmp	r3, #0
 807d6b2:	d101      	bne.n	807d6b8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 807d6b4:	2303      	movs	r3, #3
 807d6b6:	e014      	b.n	807d6e2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d6b8:	687b      	ldr	r3, [r7, #4]
 807d6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d6be:	b2db      	uxtb	r3, r3
 807d6c0:	2b03      	cmp	r3, #3
 807d6c2:	d10d      	bne.n	807d6e0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 807d6c4:	687b      	ldr	r3, [r7, #4]
 807d6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6ca:	6a1b      	ldr	r3, [r3, #32]
 807d6cc:	2b00      	cmp	r3, #0
 807d6ce:	d007      	beq.n	807d6e0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 807d6d0:	687b      	ldr	r3, [r7, #4]
 807d6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6d6:	6a1b      	ldr	r3, [r3, #32]
 807d6d8:	78fa      	ldrb	r2, [r7, #3]
 807d6da:	4611      	mov	r1, r2
 807d6dc:	6878      	ldr	r0, [r7, #4]
 807d6de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d6e0:	2300      	movs	r3, #0
}
 807d6e2:	4618      	mov	r0, r3
 807d6e4:	3708      	adds	r7, #8
 807d6e6:	46bd      	mov	sp, r7
 807d6e8:	bd80      	pop	{r7, pc}

0807d6ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 807d6ea:	b580      	push	{r7, lr}
 807d6ec:	b082      	sub	sp, #8
 807d6ee:	af00      	add	r7, sp, #0
 807d6f0:	6078      	str	r0, [r7, #4]
 807d6f2:	460b      	mov	r3, r1
 807d6f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 807d6f6:	687b      	ldr	r3, [r7, #4]
 807d6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d6fc:	2b00      	cmp	r3, #0
 807d6fe:	d101      	bne.n	807d704 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 807d700:	2303      	movs	r3, #3
 807d702:	e014      	b.n	807d72e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807d704:	687b      	ldr	r3, [r7, #4]
 807d706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d70a:	b2db      	uxtb	r3, r3
 807d70c:	2b03      	cmp	r3, #3
 807d70e:	d10d      	bne.n	807d72c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 807d710:	687b      	ldr	r3, [r7, #4]
 807d712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807d718:	2b00      	cmp	r3, #0
 807d71a:	d007      	beq.n	807d72c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 807d71c:	687b      	ldr	r3, [r7, #4]
 807d71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 807d724:	78fa      	ldrb	r2, [r7, #3]
 807d726:	4611      	mov	r1, r2
 807d728:	6878      	ldr	r0, [r7, #4]
 807d72a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 807d72c:	2300      	movs	r3, #0
}
 807d72e:	4618      	mov	r0, r3
 807d730:	3708      	adds	r7, #8
 807d732:	46bd      	mov	sp, r7
 807d734:	bd80      	pop	{r7, pc}

0807d736 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 807d736:	b480      	push	{r7}
 807d738:	b083      	sub	sp, #12
 807d73a:	af00      	add	r7, sp, #0
 807d73c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 807d73e:	2300      	movs	r3, #0
}
 807d740:	4618      	mov	r0, r3
 807d742:	370c      	adds	r7, #12
 807d744:	46bd      	mov	sp, r7
 807d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d74a:	4770      	bx	lr

0807d74c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 807d74c:	b580      	push	{r7, lr}
 807d74e:	b082      	sub	sp, #8
 807d750:	af00      	add	r7, sp, #0
 807d752:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 807d754:	687b      	ldr	r3, [r7, #4]
 807d756:	2201      	movs	r2, #1
 807d758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 807d75c:	687b      	ldr	r3, [r7, #4]
 807d75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d762:	2b00      	cmp	r3, #0
 807d764:	d009      	beq.n	807d77a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 807d766:	687b      	ldr	r3, [r7, #4]
 807d768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d76c:	685b      	ldr	r3, [r3, #4]
 807d76e:	687a      	ldr	r2, [r7, #4]
 807d770:	6852      	ldr	r2, [r2, #4]
 807d772:	b2d2      	uxtb	r2, r2
 807d774:	4611      	mov	r1, r2
 807d776:	6878      	ldr	r0, [r7, #4]
 807d778:	4798      	blx	r3
  }

  return USBD_OK;
 807d77a:	2300      	movs	r3, #0
}
 807d77c:	4618      	mov	r0, r3
 807d77e:	3708      	adds	r7, #8
 807d780:	46bd      	mov	sp, r7
 807d782:	bd80      	pop	{r7, pc}

0807d784 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 807d784:	b480      	push	{r7}
 807d786:	b087      	sub	sp, #28
 807d788:	af00      	add	r7, sp, #0
 807d78a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 807d78c:	687b      	ldr	r3, [r7, #4]
 807d78e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 807d790:	697b      	ldr	r3, [r7, #20]
 807d792:	781b      	ldrb	r3, [r3, #0]
 807d794:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 807d796:	697b      	ldr	r3, [r7, #20]
 807d798:	3301      	adds	r3, #1
 807d79a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 807d79c:	697b      	ldr	r3, [r7, #20]
 807d79e:	781b      	ldrb	r3, [r3, #0]
 807d7a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 807d7a2:	8a3b      	ldrh	r3, [r7, #16]
 807d7a4:	021b      	lsls	r3, r3, #8
 807d7a6:	b21a      	sxth	r2, r3
 807d7a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 807d7ac:	4313      	orrs	r3, r2
 807d7ae:	b21b      	sxth	r3, r3
 807d7b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 807d7b2:	89fb      	ldrh	r3, [r7, #14]
}
 807d7b4:	4618      	mov	r0, r3
 807d7b6:	371c      	adds	r7, #28
 807d7b8:	46bd      	mov	sp, r7
 807d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 807d7be:	4770      	bx	lr

0807d7c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d7c0:	b580      	push	{r7, lr}
 807d7c2:	b084      	sub	sp, #16
 807d7c4:	af00      	add	r7, sp, #0
 807d7c6:	6078      	str	r0, [r7, #4]
 807d7c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807d7ca:	2300      	movs	r3, #0
 807d7cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d7ce:	683b      	ldr	r3, [r7, #0]
 807d7d0:	781b      	ldrb	r3, [r3, #0]
 807d7d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807d7d6:	2b40      	cmp	r3, #64	; 0x40
 807d7d8:	d005      	beq.n	807d7e6 <USBD_StdDevReq+0x26>
 807d7da:	2b40      	cmp	r3, #64	; 0x40
 807d7dc:	d853      	bhi.n	807d886 <USBD_StdDevReq+0xc6>
 807d7de:	2b00      	cmp	r3, #0
 807d7e0:	d00b      	beq.n	807d7fa <USBD_StdDevReq+0x3a>
 807d7e2:	2b20      	cmp	r3, #32
 807d7e4:	d14f      	bne.n	807d886 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d7e6:	687b      	ldr	r3, [r7, #4]
 807d7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d7ec:	689b      	ldr	r3, [r3, #8]
 807d7ee:	6839      	ldr	r1, [r7, #0]
 807d7f0:	6878      	ldr	r0, [r7, #4]
 807d7f2:	4798      	blx	r3
 807d7f4:	4603      	mov	r3, r0
 807d7f6:	73fb      	strb	r3, [r7, #15]
      break;
 807d7f8:	e04a      	b.n	807d890 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807d7fa:	683b      	ldr	r3, [r7, #0]
 807d7fc:	785b      	ldrb	r3, [r3, #1]
 807d7fe:	2b09      	cmp	r3, #9
 807d800:	d83b      	bhi.n	807d87a <USBD_StdDevReq+0xba>
 807d802:	a201      	add	r2, pc, #4	; (adr r2, 807d808 <USBD_StdDevReq+0x48>)
 807d804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807d808:	0807d85d 	.word	0x0807d85d
 807d80c:	0807d871 	.word	0x0807d871
 807d810:	0807d87b 	.word	0x0807d87b
 807d814:	0807d867 	.word	0x0807d867
 807d818:	0807d87b 	.word	0x0807d87b
 807d81c:	0807d83b 	.word	0x0807d83b
 807d820:	0807d831 	.word	0x0807d831
 807d824:	0807d87b 	.word	0x0807d87b
 807d828:	0807d853 	.word	0x0807d853
 807d82c:	0807d845 	.word	0x0807d845
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 807d830:	6839      	ldr	r1, [r7, #0]
 807d832:	6878      	ldr	r0, [r7, #4]
 807d834:	f000 f9de 	bl	807dbf4 <USBD_GetDescriptor>
          break;
 807d838:	e024      	b.n	807d884 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 807d83a:	6839      	ldr	r1, [r7, #0]
 807d83c:	6878      	ldr	r0, [r7, #4]
 807d83e:	f000 fb55 	bl	807deec <USBD_SetAddress>
          break;
 807d842:	e01f      	b.n	807d884 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 807d844:	6839      	ldr	r1, [r7, #0]
 807d846:	6878      	ldr	r0, [r7, #4]
 807d848:	f000 fb94 	bl	807df74 <USBD_SetConfig>
 807d84c:	4603      	mov	r3, r0
 807d84e:	73fb      	strb	r3, [r7, #15]
          break;
 807d850:	e018      	b.n	807d884 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 807d852:	6839      	ldr	r1, [r7, #0]
 807d854:	6878      	ldr	r0, [r7, #4]
 807d856:	f000 fc33 	bl	807e0c0 <USBD_GetConfig>
          break;
 807d85a:	e013      	b.n	807d884 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 807d85c:	6839      	ldr	r1, [r7, #0]
 807d85e:	6878      	ldr	r0, [r7, #4]
 807d860:	f000 fc64 	bl	807e12c <USBD_GetStatus>
          break;
 807d864:	e00e      	b.n	807d884 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 807d866:	6839      	ldr	r1, [r7, #0]
 807d868:	6878      	ldr	r0, [r7, #4]
 807d86a:	f000 fc93 	bl	807e194 <USBD_SetFeature>
          break;
 807d86e:	e009      	b.n	807d884 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 807d870:	6839      	ldr	r1, [r7, #0]
 807d872:	6878      	ldr	r0, [r7, #4]
 807d874:	f000 fca2 	bl	807e1bc <USBD_ClrFeature>
          break;
 807d878:	e004      	b.n	807d884 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 807d87a:	6839      	ldr	r1, [r7, #0]
 807d87c:	6878      	ldr	r0, [r7, #4]
 807d87e:	f000 fcf9 	bl	807e274 <USBD_CtlError>
          break;
 807d882:	bf00      	nop
      }
      break;
 807d884:	e004      	b.n	807d890 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 807d886:	6839      	ldr	r1, [r7, #0]
 807d888:	6878      	ldr	r0, [r7, #4]
 807d88a:	f000 fcf3 	bl	807e274 <USBD_CtlError>
      break;
 807d88e:	bf00      	nop
  }

  return ret;
 807d890:	7bfb      	ldrb	r3, [r7, #15]
}
 807d892:	4618      	mov	r0, r3
 807d894:	3710      	adds	r7, #16
 807d896:	46bd      	mov	sp, r7
 807d898:	bd80      	pop	{r7, pc}
 807d89a:	bf00      	nop

0807d89c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d89c:	b580      	push	{r7, lr}
 807d89e:	b084      	sub	sp, #16
 807d8a0:	af00      	add	r7, sp, #0
 807d8a2:	6078      	str	r0, [r7, #4]
 807d8a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807d8a6:	2300      	movs	r3, #0
 807d8a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d8aa:	683b      	ldr	r3, [r7, #0]
 807d8ac:	781b      	ldrb	r3, [r3, #0]
 807d8ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807d8b2:	2b40      	cmp	r3, #64	; 0x40
 807d8b4:	d005      	beq.n	807d8c2 <USBD_StdItfReq+0x26>
 807d8b6:	2b40      	cmp	r3, #64	; 0x40
 807d8b8:	d82f      	bhi.n	807d91a <USBD_StdItfReq+0x7e>
 807d8ba:	2b00      	cmp	r3, #0
 807d8bc:	d001      	beq.n	807d8c2 <USBD_StdItfReq+0x26>
 807d8be:	2b20      	cmp	r3, #32
 807d8c0:	d12b      	bne.n	807d91a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 807d8c2:	687b      	ldr	r3, [r7, #4]
 807d8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d8c8:	b2db      	uxtb	r3, r3
 807d8ca:	3b01      	subs	r3, #1
 807d8cc:	2b02      	cmp	r3, #2
 807d8ce:	d81d      	bhi.n	807d90c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 807d8d0:	683b      	ldr	r3, [r7, #0]
 807d8d2:	889b      	ldrh	r3, [r3, #4]
 807d8d4:	b2db      	uxtb	r3, r3
 807d8d6:	2b01      	cmp	r3, #1
 807d8d8:	d813      	bhi.n	807d902 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d8da:	687b      	ldr	r3, [r7, #4]
 807d8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d8e0:	689b      	ldr	r3, [r3, #8]
 807d8e2:	6839      	ldr	r1, [r7, #0]
 807d8e4:	6878      	ldr	r0, [r7, #4]
 807d8e6:	4798      	blx	r3
 807d8e8:	4603      	mov	r3, r0
 807d8ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 807d8ec:	683b      	ldr	r3, [r7, #0]
 807d8ee:	88db      	ldrh	r3, [r3, #6]
 807d8f0:	2b00      	cmp	r3, #0
 807d8f2:	d110      	bne.n	807d916 <USBD_StdItfReq+0x7a>
 807d8f4:	7bfb      	ldrb	r3, [r7, #15]
 807d8f6:	2b00      	cmp	r3, #0
 807d8f8:	d10d      	bne.n	807d916 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 807d8fa:	6878      	ldr	r0, [r7, #4]
 807d8fc:	f000 fd85 	bl	807e40a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 807d900:	e009      	b.n	807d916 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 807d902:	6839      	ldr	r1, [r7, #0]
 807d904:	6878      	ldr	r0, [r7, #4]
 807d906:	f000 fcb5 	bl	807e274 <USBD_CtlError>
          break;
 807d90a:	e004      	b.n	807d916 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 807d90c:	6839      	ldr	r1, [r7, #0]
 807d90e:	6878      	ldr	r0, [r7, #4]
 807d910:	f000 fcb0 	bl	807e274 <USBD_CtlError>
          break;
 807d914:	e000      	b.n	807d918 <USBD_StdItfReq+0x7c>
          break;
 807d916:	bf00      	nop
      }
      break;
 807d918:	e004      	b.n	807d924 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 807d91a:	6839      	ldr	r1, [r7, #0]
 807d91c:	6878      	ldr	r0, [r7, #4]
 807d91e:	f000 fca9 	bl	807e274 <USBD_CtlError>
      break;
 807d922:	bf00      	nop
  }

  return ret;
 807d924:	7bfb      	ldrb	r3, [r7, #15]
}
 807d926:	4618      	mov	r0, r3
 807d928:	3710      	adds	r7, #16
 807d92a:	46bd      	mov	sp, r7
 807d92c:	bd80      	pop	{r7, pc}

0807d92e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807d92e:	b580      	push	{r7, lr}
 807d930:	b084      	sub	sp, #16
 807d932:	af00      	add	r7, sp, #0
 807d934:	6078      	str	r0, [r7, #4]
 807d936:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 807d938:	2300      	movs	r3, #0
 807d93a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 807d93c:	683b      	ldr	r3, [r7, #0]
 807d93e:	889b      	ldrh	r3, [r3, #4]
 807d940:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807d942:	683b      	ldr	r3, [r7, #0]
 807d944:	781b      	ldrb	r3, [r3, #0]
 807d946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807d94a:	2b40      	cmp	r3, #64	; 0x40
 807d94c:	d007      	beq.n	807d95e <USBD_StdEPReq+0x30>
 807d94e:	2b40      	cmp	r3, #64	; 0x40
 807d950:	f200 8145 	bhi.w	807dbde <USBD_StdEPReq+0x2b0>
 807d954:	2b00      	cmp	r3, #0
 807d956:	d00c      	beq.n	807d972 <USBD_StdEPReq+0x44>
 807d958:	2b20      	cmp	r3, #32
 807d95a:	f040 8140 	bne.w	807dbde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807d95e:	687b      	ldr	r3, [r7, #4]
 807d960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807d964:	689b      	ldr	r3, [r3, #8]
 807d966:	6839      	ldr	r1, [r7, #0]
 807d968:	6878      	ldr	r0, [r7, #4]
 807d96a:	4798      	blx	r3
 807d96c:	4603      	mov	r3, r0
 807d96e:	73fb      	strb	r3, [r7, #15]
      break;
 807d970:	e13a      	b.n	807dbe8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807d972:	683b      	ldr	r3, [r7, #0]
 807d974:	785b      	ldrb	r3, [r3, #1]
 807d976:	2b03      	cmp	r3, #3
 807d978:	d007      	beq.n	807d98a <USBD_StdEPReq+0x5c>
 807d97a:	2b03      	cmp	r3, #3
 807d97c:	f300 8129 	bgt.w	807dbd2 <USBD_StdEPReq+0x2a4>
 807d980:	2b00      	cmp	r3, #0
 807d982:	d07f      	beq.n	807da84 <USBD_StdEPReq+0x156>
 807d984:	2b01      	cmp	r3, #1
 807d986:	d03c      	beq.n	807da02 <USBD_StdEPReq+0xd4>
 807d988:	e123      	b.n	807dbd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 807d98a:	687b      	ldr	r3, [r7, #4]
 807d98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807d990:	b2db      	uxtb	r3, r3
 807d992:	2b02      	cmp	r3, #2
 807d994:	d002      	beq.n	807d99c <USBD_StdEPReq+0x6e>
 807d996:	2b03      	cmp	r3, #3
 807d998:	d016      	beq.n	807d9c8 <USBD_StdEPReq+0x9a>
 807d99a:	e02c      	b.n	807d9f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807d99c:	7bbb      	ldrb	r3, [r7, #14]
 807d99e:	2b00      	cmp	r3, #0
 807d9a0:	d00d      	beq.n	807d9be <USBD_StdEPReq+0x90>
 807d9a2:	7bbb      	ldrb	r3, [r7, #14]
 807d9a4:	2b80      	cmp	r3, #128	; 0x80
 807d9a6:	d00a      	beq.n	807d9be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 807d9a8:	7bbb      	ldrb	r3, [r7, #14]
 807d9aa:	4619      	mov	r1, r3
 807d9ac:	6878      	ldr	r0, [r7, #4]
 807d9ae:	f001 f9b9 	bl	807ed24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 807d9b2:	2180      	movs	r1, #128	; 0x80
 807d9b4:	6878      	ldr	r0, [r7, #4]
 807d9b6:	f001 f9b5 	bl	807ed24 <USBD_LL_StallEP>
 807d9ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807d9bc:	e020      	b.n	807da00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 807d9be:	6839      	ldr	r1, [r7, #0]
 807d9c0:	6878      	ldr	r0, [r7, #4]
 807d9c2:	f000 fc57 	bl	807e274 <USBD_CtlError>
              break;
 807d9c6:	e01b      	b.n	807da00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 807d9c8:	683b      	ldr	r3, [r7, #0]
 807d9ca:	885b      	ldrh	r3, [r3, #2]
 807d9cc:	2b00      	cmp	r3, #0
 807d9ce:	d10e      	bne.n	807d9ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 807d9d0:	7bbb      	ldrb	r3, [r7, #14]
 807d9d2:	2b00      	cmp	r3, #0
 807d9d4:	d00b      	beq.n	807d9ee <USBD_StdEPReq+0xc0>
 807d9d6:	7bbb      	ldrb	r3, [r7, #14]
 807d9d8:	2b80      	cmp	r3, #128	; 0x80
 807d9da:	d008      	beq.n	807d9ee <USBD_StdEPReq+0xc0>
 807d9dc:	683b      	ldr	r3, [r7, #0]
 807d9de:	88db      	ldrh	r3, [r3, #6]
 807d9e0:	2b00      	cmp	r3, #0
 807d9e2:	d104      	bne.n	807d9ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 807d9e4:	7bbb      	ldrb	r3, [r7, #14]
 807d9e6:	4619      	mov	r1, r3
 807d9e8:	6878      	ldr	r0, [r7, #4]
 807d9ea:	f001 f99b 	bl	807ed24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 807d9ee:	6878      	ldr	r0, [r7, #4]
 807d9f0:	f000 fd0b 	bl	807e40a <USBD_CtlSendStatus>

              break;
 807d9f4:	e004      	b.n	807da00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 807d9f6:	6839      	ldr	r1, [r7, #0]
 807d9f8:	6878      	ldr	r0, [r7, #4]
 807d9fa:	f000 fc3b 	bl	807e274 <USBD_CtlError>
              break;
 807d9fe:	bf00      	nop
          }
          break;
 807da00:	e0ec      	b.n	807dbdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 807da02:	687b      	ldr	r3, [r7, #4]
 807da04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807da08:	b2db      	uxtb	r3, r3
 807da0a:	2b02      	cmp	r3, #2
 807da0c:	d002      	beq.n	807da14 <USBD_StdEPReq+0xe6>
 807da0e:	2b03      	cmp	r3, #3
 807da10:	d016      	beq.n	807da40 <USBD_StdEPReq+0x112>
 807da12:	e030      	b.n	807da76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807da14:	7bbb      	ldrb	r3, [r7, #14]
 807da16:	2b00      	cmp	r3, #0
 807da18:	d00d      	beq.n	807da36 <USBD_StdEPReq+0x108>
 807da1a:	7bbb      	ldrb	r3, [r7, #14]
 807da1c:	2b80      	cmp	r3, #128	; 0x80
 807da1e:	d00a      	beq.n	807da36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 807da20:	7bbb      	ldrb	r3, [r7, #14]
 807da22:	4619      	mov	r1, r3
 807da24:	6878      	ldr	r0, [r7, #4]
 807da26:	f001 f97d 	bl	807ed24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 807da2a:	2180      	movs	r1, #128	; 0x80
 807da2c:	6878      	ldr	r0, [r7, #4]
 807da2e:	f001 f979 	bl	807ed24 <USBD_LL_StallEP>
 807da32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807da34:	e025      	b.n	807da82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 807da36:	6839      	ldr	r1, [r7, #0]
 807da38:	6878      	ldr	r0, [r7, #4]
 807da3a:	f000 fc1b 	bl	807e274 <USBD_CtlError>
              break;
 807da3e:	e020      	b.n	807da82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 807da40:	683b      	ldr	r3, [r7, #0]
 807da42:	885b      	ldrh	r3, [r3, #2]
 807da44:	2b00      	cmp	r3, #0
 807da46:	d11b      	bne.n	807da80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 807da48:	7bbb      	ldrb	r3, [r7, #14]
 807da4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 807da4e:	2b00      	cmp	r3, #0
 807da50:	d004      	beq.n	807da5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 807da52:	7bbb      	ldrb	r3, [r7, #14]
 807da54:	4619      	mov	r1, r3
 807da56:	6878      	ldr	r0, [r7, #4]
 807da58:	f001 f983 	bl	807ed62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 807da5c:	6878      	ldr	r0, [r7, #4]
 807da5e:	f000 fcd4 	bl	807e40a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807da62:	687b      	ldr	r3, [r7, #4]
 807da64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807da68:	689b      	ldr	r3, [r3, #8]
 807da6a:	6839      	ldr	r1, [r7, #0]
 807da6c:	6878      	ldr	r0, [r7, #4]
 807da6e:	4798      	blx	r3
 807da70:	4603      	mov	r3, r0
 807da72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 807da74:	e004      	b.n	807da80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 807da76:	6839      	ldr	r1, [r7, #0]
 807da78:	6878      	ldr	r0, [r7, #4]
 807da7a:	f000 fbfb 	bl	807e274 <USBD_CtlError>
              break;
 807da7e:	e000      	b.n	807da82 <USBD_StdEPReq+0x154>
              break;
 807da80:	bf00      	nop
          }
          break;
 807da82:	e0ab      	b.n	807dbdc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 807da84:	687b      	ldr	r3, [r7, #4]
 807da86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807da8a:	b2db      	uxtb	r3, r3
 807da8c:	2b02      	cmp	r3, #2
 807da8e:	d002      	beq.n	807da96 <USBD_StdEPReq+0x168>
 807da90:	2b03      	cmp	r3, #3
 807da92:	d032      	beq.n	807dafa <USBD_StdEPReq+0x1cc>
 807da94:	e097      	b.n	807dbc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807da96:	7bbb      	ldrb	r3, [r7, #14]
 807da98:	2b00      	cmp	r3, #0
 807da9a:	d007      	beq.n	807daac <USBD_StdEPReq+0x17e>
 807da9c:	7bbb      	ldrb	r3, [r7, #14]
 807da9e:	2b80      	cmp	r3, #128	; 0x80
 807daa0:	d004      	beq.n	807daac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 807daa2:	6839      	ldr	r1, [r7, #0]
 807daa4:	6878      	ldr	r0, [r7, #4]
 807daa6:	f000 fbe5 	bl	807e274 <USBD_CtlError>
                break;
 807daaa:	e091      	b.n	807dbd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807daac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807dab0:	2b00      	cmp	r3, #0
 807dab2:	da0b      	bge.n	807dacc <USBD_StdEPReq+0x19e>
 807dab4:	7bbb      	ldrb	r3, [r7, #14]
 807dab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807daba:	4613      	mov	r3, r2
 807dabc:	009b      	lsls	r3, r3, #2
 807dabe:	4413      	add	r3, r2
 807dac0:	009b      	lsls	r3, r3, #2
 807dac2:	3310      	adds	r3, #16
 807dac4:	687a      	ldr	r2, [r7, #4]
 807dac6:	4413      	add	r3, r2
 807dac8:	3304      	adds	r3, #4
 807daca:	e00b      	b.n	807dae4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807dacc:	7bbb      	ldrb	r3, [r7, #14]
 807dace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807dad2:	4613      	mov	r3, r2
 807dad4:	009b      	lsls	r3, r3, #2
 807dad6:	4413      	add	r3, r2
 807dad8:	009b      	lsls	r3, r3, #2
 807dada:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807dade:	687a      	ldr	r2, [r7, #4]
 807dae0:	4413      	add	r3, r2
 807dae2:	3304      	adds	r3, #4
 807dae4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 807dae6:	68bb      	ldr	r3, [r7, #8]
 807dae8:	2200      	movs	r2, #0
 807daea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 807daec:	68bb      	ldr	r3, [r7, #8]
 807daee:	2202      	movs	r2, #2
 807daf0:	4619      	mov	r1, r3
 807daf2:	6878      	ldr	r0, [r7, #4]
 807daf4:	f000 fc2f 	bl	807e356 <USBD_CtlSendData>
              break;
 807daf8:	e06a      	b.n	807dbd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 807dafa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807dafe:	2b00      	cmp	r3, #0
 807db00:	da11      	bge.n	807db26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 807db02:	7bbb      	ldrb	r3, [r7, #14]
 807db04:	f003 020f 	and.w	r2, r3, #15
 807db08:	6879      	ldr	r1, [r7, #4]
 807db0a:	4613      	mov	r3, r2
 807db0c:	009b      	lsls	r3, r3, #2
 807db0e:	4413      	add	r3, r2
 807db10:	009b      	lsls	r3, r3, #2
 807db12:	440b      	add	r3, r1
 807db14:	3324      	adds	r3, #36	; 0x24
 807db16:	881b      	ldrh	r3, [r3, #0]
 807db18:	2b00      	cmp	r3, #0
 807db1a:	d117      	bne.n	807db4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 807db1c:	6839      	ldr	r1, [r7, #0]
 807db1e:	6878      	ldr	r0, [r7, #4]
 807db20:	f000 fba8 	bl	807e274 <USBD_CtlError>
                  break;
 807db24:	e054      	b.n	807dbd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 807db26:	7bbb      	ldrb	r3, [r7, #14]
 807db28:	f003 020f 	and.w	r2, r3, #15
 807db2c:	6879      	ldr	r1, [r7, #4]
 807db2e:	4613      	mov	r3, r2
 807db30:	009b      	lsls	r3, r3, #2
 807db32:	4413      	add	r3, r2
 807db34:	009b      	lsls	r3, r3, #2
 807db36:	440b      	add	r3, r1
 807db38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 807db3c:	881b      	ldrh	r3, [r3, #0]
 807db3e:	2b00      	cmp	r3, #0
 807db40:	d104      	bne.n	807db4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 807db42:	6839      	ldr	r1, [r7, #0]
 807db44:	6878      	ldr	r0, [r7, #4]
 807db46:	f000 fb95 	bl	807e274 <USBD_CtlError>
                  break;
 807db4a:	e041      	b.n	807dbd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807db4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807db50:	2b00      	cmp	r3, #0
 807db52:	da0b      	bge.n	807db6c <USBD_StdEPReq+0x23e>
 807db54:	7bbb      	ldrb	r3, [r7, #14]
 807db56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807db5a:	4613      	mov	r3, r2
 807db5c:	009b      	lsls	r3, r3, #2
 807db5e:	4413      	add	r3, r2
 807db60:	009b      	lsls	r3, r3, #2
 807db62:	3310      	adds	r3, #16
 807db64:	687a      	ldr	r2, [r7, #4]
 807db66:	4413      	add	r3, r2
 807db68:	3304      	adds	r3, #4
 807db6a:	e00b      	b.n	807db84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807db6c:	7bbb      	ldrb	r3, [r7, #14]
 807db6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807db72:	4613      	mov	r3, r2
 807db74:	009b      	lsls	r3, r3, #2
 807db76:	4413      	add	r3, r2
 807db78:	009b      	lsls	r3, r3, #2
 807db7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807db7e:	687a      	ldr	r2, [r7, #4]
 807db80:	4413      	add	r3, r2
 807db82:	3304      	adds	r3, #4
 807db84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 807db86:	7bbb      	ldrb	r3, [r7, #14]
 807db88:	2b00      	cmp	r3, #0
 807db8a:	d002      	beq.n	807db92 <USBD_StdEPReq+0x264>
 807db8c:	7bbb      	ldrb	r3, [r7, #14]
 807db8e:	2b80      	cmp	r3, #128	; 0x80
 807db90:	d103      	bne.n	807db9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 807db92:	68bb      	ldr	r3, [r7, #8]
 807db94:	2200      	movs	r2, #0
 807db96:	601a      	str	r2, [r3, #0]
 807db98:	e00e      	b.n	807dbb8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 807db9a:	7bbb      	ldrb	r3, [r7, #14]
 807db9c:	4619      	mov	r1, r3
 807db9e:	6878      	ldr	r0, [r7, #4]
 807dba0:	f001 f8fe 	bl	807eda0 <USBD_LL_IsStallEP>
 807dba4:	4603      	mov	r3, r0
 807dba6:	2b00      	cmp	r3, #0
 807dba8:	d003      	beq.n	807dbb2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 807dbaa:	68bb      	ldr	r3, [r7, #8]
 807dbac:	2201      	movs	r2, #1
 807dbae:	601a      	str	r2, [r3, #0]
 807dbb0:	e002      	b.n	807dbb8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 807dbb2:	68bb      	ldr	r3, [r7, #8]
 807dbb4:	2200      	movs	r2, #0
 807dbb6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 807dbb8:	68bb      	ldr	r3, [r7, #8]
 807dbba:	2202      	movs	r2, #2
 807dbbc:	4619      	mov	r1, r3
 807dbbe:	6878      	ldr	r0, [r7, #4]
 807dbc0:	f000 fbc9 	bl	807e356 <USBD_CtlSendData>
              break;
 807dbc4:	e004      	b.n	807dbd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 807dbc6:	6839      	ldr	r1, [r7, #0]
 807dbc8:	6878      	ldr	r0, [r7, #4]
 807dbca:	f000 fb53 	bl	807e274 <USBD_CtlError>
              break;
 807dbce:	bf00      	nop
          }
          break;
 807dbd0:	e004      	b.n	807dbdc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 807dbd2:	6839      	ldr	r1, [r7, #0]
 807dbd4:	6878      	ldr	r0, [r7, #4]
 807dbd6:	f000 fb4d 	bl	807e274 <USBD_CtlError>
          break;
 807dbda:	bf00      	nop
      }
      break;
 807dbdc:	e004      	b.n	807dbe8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 807dbde:	6839      	ldr	r1, [r7, #0]
 807dbe0:	6878      	ldr	r0, [r7, #4]
 807dbe2:	f000 fb47 	bl	807e274 <USBD_CtlError>
      break;
 807dbe6:	bf00      	nop
  }

  return ret;
 807dbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 807dbea:	4618      	mov	r0, r3
 807dbec:	3710      	adds	r7, #16
 807dbee:	46bd      	mov	sp, r7
 807dbf0:	bd80      	pop	{r7, pc}
	...

0807dbf4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807dbf4:	b580      	push	{r7, lr}
 807dbf6:	b084      	sub	sp, #16
 807dbf8:	af00      	add	r7, sp, #0
 807dbfa:	6078      	str	r0, [r7, #4]
 807dbfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 807dbfe:	2300      	movs	r3, #0
 807dc00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 807dc02:	2300      	movs	r3, #0
 807dc04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 807dc06:	2300      	movs	r3, #0
 807dc08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 807dc0a:	683b      	ldr	r3, [r7, #0]
 807dc0c:	885b      	ldrh	r3, [r3, #2]
 807dc0e:	0a1b      	lsrs	r3, r3, #8
 807dc10:	b29b      	uxth	r3, r3
 807dc12:	3b01      	subs	r3, #1
 807dc14:	2b06      	cmp	r3, #6
 807dc16:	f200 813b 	bhi.w	807de90 <USBD_GetDescriptor+0x29c>
 807dc1a:	a201      	add	r2, pc, #4	; (adr r2, 807dc20 <USBD_GetDescriptor+0x2c>)
 807dc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807dc20:	0807dc3d 	.word	0x0807dc3d
 807dc24:	0807dc55 	.word	0x0807dc55
 807dc28:	0807dc95 	.word	0x0807dc95
 807dc2c:	0807de91 	.word	0x0807de91
 807dc30:	0807de91 	.word	0x0807de91
 807dc34:	0807de31 	.word	0x0807de31
 807dc38:	0807de5d 	.word	0x0807de5d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 807dc3c:	687b      	ldr	r3, [r7, #4]
 807dc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dc42:	681b      	ldr	r3, [r3, #0]
 807dc44:	687a      	ldr	r2, [r7, #4]
 807dc46:	7c12      	ldrb	r2, [r2, #16]
 807dc48:	f107 0108 	add.w	r1, r7, #8
 807dc4c:	4610      	mov	r0, r2
 807dc4e:	4798      	blx	r3
 807dc50:	60f8      	str	r0, [r7, #12]
      break;
 807dc52:	e125      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807dc54:	687b      	ldr	r3, [r7, #4]
 807dc56:	7c1b      	ldrb	r3, [r3, #16]
 807dc58:	2b00      	cmp	r3, #0
 807dc5a:	d10d      	bne.n	807dc78 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 807dc5c:	687b      	ldr	r3, [r7, #4]
 807dc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807dc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807dc64:	f107 0208 	add.w	r2, r7, #8
 807dc68:	4610      	mov	r0, r2
 807dc6a:	4798      	blx	r3
 807dc6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807dc6e:	68fb      	ldr	r3, [r7, #12]
 807dc70:	3301      	adds	r3, #1
 807dc72:	2202      	movs	r2, #2
 807dc74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 807dc76:	e113      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 807dc78:	687b      	ldr	r3, [r7, #4]
 807dc7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807dc80:	f107 0208 	add.w	r2, r7, #8
 807dc84:	4610      	mov	r0, r2
 807dc86:	4798      	blx	r3
 807dc88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807dc8a:	68fb      	ldr	r3, [r7, #12]
 807dc8c:	3301      	adds	r3, #1
 807dc8e:	2202      	movs	r2, #2
 807dc90:	701a      	strb	r2, [r3, #0]
      break;
 807dc92:	e105      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 807dc94:	683b      	ldr	r3, [r7, #0]
 807dc96:	885b      	ldrh	r3, [r3, #2]
 807dc98:	b2db      	uxtb	r3, r3
 807dc9a:	2b05      	cmp	r3, #5
 807dc9c:	f200 80ac 	bhi.w	807ddf8 <USBD_GetDescriptor+0x204>
 807dca0:	a201      	add	r2, pc, #4	; (adr r2, 807dca8 <USBD_GetDescriptor+0xb4>)
 807dca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807dca6:	bf00      	nop
 807dca8:	0807dcc1 	.word	0x0807dcc1
 807dcac:	0807dcf5 	.word	0x0807dcf5
 807dcb0:	0807dd29 	.word	0x0807dd29
 807dcb4:	0807dd5d 	.word	0x0807dd5d
 807dcb8:	0807dd91 	.word	0x0807dd91
 807dcbc:	0807ddc5 	.word	0x0807ddc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 807dcc0:	687b      	ldr	r3, [r7, #4]
 807dcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dcc6:	685b      	ldr	r3, [r3, #4]
 807dcc8:	2b00      	cmp	r3, #0
 807dcca:	d00b      	beq.n	807dce4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 807dccc:	687b      	ldr	r3, [r7, #4]
 807dcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dcd2:	685b      	ldr	r3, [r3, #4]
 807dcd4:	687a      	ldr	r2, [r7, #4]
 807dcd6:	7c12      	ldrb	r2, [r2, #16]
 807dcd8:	f107 0108 	add.w	r1, r7, #8
 807dcdc:	4610      	mov	r0, r2
 807dcde:	4798      	blx	r3
 807dce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dce2:	e0a4      	b.n	807de2e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dce4:	6839      	ldr	r1, [r7, #0]
 807dce6:	6878      	ldr	r0, [r7, #4]
 807dce8:	f000 fac4 	bl	807e274 <USBD_CtlError>
            err++;
 807dcec:	7afb      	ldrb	r3, [r7, #11]
 807dcee:	3301      	adds	r3, #1
 807dcf0:	72fb      	strb	r3, [r7, #11]
          break;
 807dcf2:	e09c      	b.n	807de2e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 807dcf4:	687b      	ldr	r3, [r7, #4]
 807dcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dcfa:	689b      	ldr	r3, [r3, #8]
 807dcfc:	2b00      	cmp	r3, #0
 807dcfe:	d00b      	beq.n	807dd18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 807dd00:	687b      	ldr	r3, [r7, #4]
 807dd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd06:	689b      	ldr	r3, [r3, #8]
 807dd08:	687a      	ldr	r2, [r7, #4]
 807dd0a:	7c12      	ldrb	r2, [r2, #16]
 807dd0c:	f107 0108 	add.w	r1, r7, #8
 807dd10:	4610      	mov	r0, r2
 807dd12:	4798      	blx	r3
 807dd14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd16:	e08a      	b.n	807de2e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd18:	6839      	ldr	r1, [r7, #0]
 807dd1a:	6878      	ldr	r0, [r7, #4]
 807dd1c:	f000 faaa 	bl	807e274 <USBD_CtlError>
            err++;
 807dd20:	7afb      	ldrb	r3, [r7, #11]
 807dd22:	3301      	adds	r3, #1
 807dd24:	72fb      	strb	r3, [r7, #11]
          break;
 807dd26:	e082      	b.n	807de2e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 807dd28:	687b      	ldr	r3, [r7, #4]
 807dd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd2e:	68db      	ldr	r3, [r3, #12]
 807dd30:	2b00      	cmp	r3, #0
 807dd32:	d00b      	beq.n	807dd4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 807dd34:	687b      	ldr	r3, [r7, #4]
 807dd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd3a:	68db      	ldr	r3, [r3, #12]
 807dd3c:	687a      	ldr	r2, [r7, #4]
 807dd3e:	7c12      	ldrb	r2, [r2, #16]
 807dd40:	f107 0108 	add.w	r1, r7, #8
 807dd44:	4610      	mov	r0, r2
 807dd46:	4798      	blx	r3
 807dd48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd4a:	e070      	b.n	807de2e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd4c:	6839      	ldr	r1, [r7, #0]
 807dd4e:	6878      	ldr	r0, [r7, #4]
 807dd50:	f000 fa90 	bl	807e274 <USBD_CtlError>
            err++;
 807dd54:	7afb      	ldrb	r3, [r7, #11]
 807dd56:	3301      	adds	r3, #1
 807dd58:	72fb      	strb	r3, [r7, #11]
          break;
 807dd5a:	e068      	b.n	807de2e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 807dd5c:	687b      	ldr	r3, [r7, #4]
 807dd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd62:	691b      	ldr	r3, [r3, #16]
 807dd64:	2b00      	cmp	r3, #0
 807dd66:	d00b      	beq.n	807dd80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 807dd68:	687b      	ldr	r3, [r7, #4]
 807dd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd6e:	691b      	ldr	r3, [r3, #16]
 807dd70:	687a      	ldr	r2, [r7, #4]
 807dd72:	7c12      	ldrb	r2, [r2, #16]
 807dd74:	f107 0108 	add.w	r1, r7, #8
 807dd78:	4610      	mov	r0, r2
 807dd7a:	4798      	blx	r3
 807dd7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dd7e:	e056      	b.n	807de2e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dd80:	6839      	ldr	r1, [r7, #0]
 807dd82:	6878      	ldr	r0, [r7, #4]
 807dd84:	f000 fa76 	bl	807e274 <USBD_CtlError>
            err++;
 807dd88:	7afb      	ldrb	r3, [r7, #11]
 807dd8a:	3301      	adds	r3, #1
 807dd8c:	72fb      	strb	r3, [r7, #11]
          break;
 807dd8e:	e04e      	b.n	807de2e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 807dd90:	687b      	ldr	r3, [r7, #4]
 807dd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dd96:	695b      	ldr	r3, [r3, #20]
 807dd98:	2b00      	cmp	r3, #0
 807dd9a:	d00b      	beq.n	807ddb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 807dd9c:	687b      	ldr	r3, [r7, #4]
 807dd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807dda2:	695b      	ldr	r3, [r3, #20]
 807dda4:	687a      	ldr	r2, [r7, #4]
 807dda6:	7c12      	ldrb	r2, [r2, #16]
 807dda8:	f107 0108 	add.w	r1, r7, #8
 807ddac:	4610      	mov	r0, r2
 807ddae:	4798      	blx	r3
 807ddb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807ddb2:	e03c      	b.n	807de2e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807ddb4:	6839      	ldr	r1, [r7, #0]
 807ddb6:	6878      	ldr	r0, [r7, #4]
 807ddb8:	f000 fa5c 	bl	807e274 <USBD_CtlError>
            err++;
 807ddbc:	7afb      	ldrb	r3, [r7, #11]
 807ddbe:	3301      	adds	r3, #1
 807ddc0:	72fb      	strb	r3, [r7, #11]
          break;
 807ddc2:	e034      	b.n	807de2e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 807ddc4:	687b      	ldr	r3, [r7, #4]
 807ddc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807ddca:	699b      	ldr	r3, [r3, #24]
 807ddcc:	2b00      	cmp	r3, #0
 807ddce:	d00b      	beq.n	807dde8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 807ddd0:	687b      	ldr	r3, [r7, #4]
 807ddd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807ddd6:	699b      	ldr	r3, [r3, #24]
 807ddd8:	687a      	ldr	r2, [r7, #4]
 807ddda:	7c12      	ldrb	r2, [r2, #16]
 807dddc:	f107 0108 	add.w	r1, r7, #8
 807dde0:	4610      	mov	r0, r2
 807dde2:	4798      	blx	r3
 807dde4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807dde6:	e022      	b.n	807de2e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807dde8:	6839      	ldr	r1, [r7, #0]
 807ddea:	6878      	ldr	r0, [r7, #4]
 807ddec:	f000 fa42 	bl	807e274 <USBD_CtlError>
            err++;
 807ddf0:	7afb      	ldrb	r3, [r7, #11]
 807ddf2:	3301      	adds	r3, #1
 807ddf4:	72fb      	strb	r3, [r7, #11]
          break;
 807ddf6:	e01a      	b.n	807de2e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 807ddf8:	687b      	ldr	r3, [r7, #4]
 807ddfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807ddfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807de00:	2b00      	cmp	r3, #0
 807de02:	d00c      	beq.n	807de1e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 807de04:	687b      	ldr	r3, [r7, #4]
 807de06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807de0c:	683a      	ldr	r2, [r7, #0]
 807de0e:	8852      	ldrh	r2, [r2, #2]
 807de10:	b2d1      	uxtb	r1, r2
 807de12:	f107 0208 	add.w	r2, r7, #8
 807de16:	6878      	ldr	r0, [r7, #4]
 807de18:	4798      	blx	r3
 807de1a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 807de1c:	e006      	b.n	807de2c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 807de1e:	6839      	ldr	r1, [r7, #0]
 807de20:	6878      	ldr	r0, [r7, #4]
 807de22:	f000 fa27 	bl	807e274 <USBD_CtlError>
            err++;
 807de26:	7afb      	ldrb	r3, [r7, #11]
 807de28:	3301      	adds	r3, #1
 807de2a:	72fb      	strb	r3, [r7, #11]
          break;
 807de2c:	bf00      	nop
      }
      break;
 807de2e:	e037      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807de30:	687b      	ldr	r3, [r7, #4]
 807de32:	7c1b      	ldrb	r3, [r3, #16]
 807de34:	2b00      	cmp	r3, #0
 807de36:	d109      	bne.n	807de4c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 807de38:	687b      	ldr	r3, [r7, #4]
 807de3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807de3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 807de40:	f107 0208 	add.w	r2, r7, #8
 807de44:	4610      	mov	r0, r2
 807de46:	4798      	blx	r3
 807de48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807de4a:	e029      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 807de4c:	6839      	ldr	r1, [r7, #0]
 807de4e:	6878      	ldr	r0, [r7, #4]
 807de50:	f000 fa10 	bl	807e274 <USBD_CtlError>
        err++;
 807de54:	7afb      	ldrb	r3, [r7, #11]
 807de56:	3301      	adds	r3, #1
 807de58:	72fb      	strb	r3, [r7, #11]
      break;
 807de5a:	e021      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807de5c:	687b      	ldr	r3, [r7, #4]
 807de5e:	7c1b      	ldrb	r3, [r3, #16]
 807de60:	2b00      	cmp	r3, #0
 807de62:	d10d      	bne.n	807de80 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 807de64:	687b      	ldr	r3, [r7, #4]
 807de66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807de6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807de6c:	f107 0208 	add.w	r2, r7, #8
 807de70:	4610      	mov	r0, r2
 807de72:	4798      	blx	r3
 807de74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 807de76:	68fb      	ldr	r3, [r7, #12]
 807de78:	3301      	adds	r3, #1
 807de7a:	2207      	movs	r2, #7
 807de7c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807de7e:	e00f      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 807de80:	6839      	ldr	r1, [r7, #0]
 807de82:	6878      	ldr	r0, [r7, #4]
 807de84:	f000 f9f6 	bl	807e274 <USBD_CtlError>
        err++;
 807de88:	7afb      	ldrb	r3, [r7, #11]
 807de8a:	3301      	adds	r3, #1
 807de8c:	72fb      	strb	r3, [r7, #11]
      break;
 807de8e:	e007      	b.n	807dea0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 807de90:	6839      	ldr	r1, [r7, #0]
 807de92:	6878      	ldr	r0, [r7, #4]
 807de94:	f000 f9ee 	bl	807e274 <USBD_CtlError>
      err++;
 807de98:	7afb      	ldrb	r3, [r7, #11]
 807de9a:	3301      	adds	r3, #1
 807de9c:	72fb      	strb	r3, [r7, #11]
      break;
 807de9e:	bf00      	nop
  }

  if (err != 0U)
 807dea0:	7afb      	ldrb	r3, [r7, #11]
 807dea2:	2b00      	cmp	r3, #0
 807dea4:	d11e      	bne.n	807dee4 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 807dea6:	683b      	ldr	r3, [r7, #0]
 807dea8:	88db      	ldrh	r3, [r3, #6]
 807deaa:	2b00      	cmp	r3, #0
 807deac:	d016      	beq.n	807dedc <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 807deae:	893b      	ldrh	r3, [r7, #8]
 807deb0:	2b00      	cmp	r3, #0
 807deb2:	d00e      	beq.n	807ded2 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 807deb4:	683b      	ldr	r3, [r7, #0]
 807deb6:	88da      	ldrh	r2, [r3, #6]
 807deb8:	893b      	ldrh	r3, [r7, #8]
 807deba:	4293      	cmp	r3, r2
 807debc:	bf28      	it	cs
 807debe:	4613      	movcs	r3, r2
 807dec0:	b29b      	uxth	r3, r3
 807dec2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 807dec4:	893b      	ldrh	r3, [r7, #8]
 807dec6:	461a      	mov	r2, r3
 807dec8:	68f9      	ldr	r1, [r7, #12]
 807deca:	6878      	ldr	r0, [r7, #4]
 807decc:	f000 fa43 	bl	807e356 <USBD_CtlSendData>
 807ded0:	e009      	b.n	807dee6 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 807ded2:	6839      	ldr	r1, [r7, #0]
 807ded4:	6878      	ldr	r0, [r7, #4]
 807ded6:	f000 f9cd 	bl	807e274 <USBD_CtlError>
 807deda:	e004      	b.n	807dee6 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 807dedc:	6878      	ldr	r0, [r7, #4]
 807dede:	f000 fa94 	bl	807e40a <USBD_CtlSendStatus>
 807dee2:	e000      	b.n	807dee6 <USBD_GetDescriptor+0x2f2>
    return;
 807dee4:	bf00      	nop
  }
}
 807dee6:	3710      	adds	r7, #16
 807dee8:	46bd      	mov	sp, r7
 807deea:	bd80      	pop	{r7, pc}

0807deec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807deec:	b580      	push	{r7, lr}
 807deee:	b084      	sub	sp, #16
 807def0:	af00      	add	r7, sp, #0
 807def2:	6078      	str	r0, [r7, #4]
 807def4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 807def6:	683b      	ldr	r3, [r7, #0]
 807def8:	889b      	ldrh	r3, [r3, #4]
 807defa:	2b00      	cmp	r3, #0
 807defc:	d131      	bne.n	807df62 <USBD_SetAddress+0x76>
 807defe:	683b      	ldr	r3, [r7, #0]
 807df00:	88db      	ldrh	r3, [r3, #6]
 807df02:	2b00      	cmp	r3, #0
 807df04:	d12d      	bne.n	807df62 <USBD_SetAddress+0x76>
 807df06:	683b      	ldr	r3, [r7, #0]
 807df08:	885b      	ldrh	r3, [r3, #2]
 807df0a:	2b7f      	cmp	r3, #127	; 0x7f
 807df0c:	d829      	bhi.n	807df62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 807df0e:	683b      	ldr	r3, [r7, #0]
 807df10:	885b      	ldrh	r3, [r3, #2]
 807df12:	b2db      	uxtb	r3, r3
 807df14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 807df18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df1a:	687b      	ldr	r3, [r7, #4]
 807df1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807df20:	b2db      	uxtb	r3, r3
 807df22:	2b03      	cmp	r3, #3
 807df24:	d104      	bne.n	807df30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 807df26:	6839      	ldr	r1, [r7, #0]
 807df28:	6878      	ldr	r0, [r7, #4]
 807df2a:	f000 f9a3 	bl	807e274 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df2e:	e01d      	b.n	807df6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 807df30:	687b      	ldr	r3, [r7, #4]
 807df32:	7bfa      	ldrb	r2, [r7, #15]
 807df34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 807df38:	7bfb      	ldrb	r3, [r7, #15]
 807df3a:	4619      	mov	r1, r3
 807df3c:	6878      	ldr	r0, [r7, #4]
 807df3e:	f000 ff5b 	bl	807edf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 807df42:	6878      	ldr	r0, [r7, #4]
 807df44:	f000 fa61 	bl	807e40a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 807df48:	7bfb      	ldrb	r3, [r7, #15]
 807df4a:	2b00      	cmp	r3, #0
 807df4c:	d004      	beq.n	807df58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 807df4e:	687b      	ldr	r3, [r7, #4]
 807df50:	2202      	movs	r2, #2
 807df52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df56:	e009      	b.n	807df6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 807df58:	687b      	ldr	r3, [r7, #4]
 807df5a:	2201      	movs	r2, #1
 807df5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 807df60:	e004      	b.n	807df6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 807df62:	6839      	ldr	r1, [r7, #0]
 807df64:	6878      	ldr	r0, [r7, #4]
 807df66:	f000 f985 	bl	807e274 <USBD_CtlError>
  }
}
 807df6a:	bf00      	nop
 807df6c:	bf00      	nop
 807df6e:	3710      	adds	r7, #16
 807df70:	46bd      	mov	sp, r7
 807df72:	bd80      	pop	{r7, pc}

0807df74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807df74:	b580      	push	{r7, lr}
 807df76:	b084      	sub	sp, #16
 807df78:	af00      	add	r7, sp, #0
 807df7a:	6078      	str	r0, [r7, #4]
 807df7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807df7e:	2300      	movs	r3, #0
 807df80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 807df82:	683b      	ldr	r3, [r7, #0]
 807df84:	885b      	ldrh	r3, [r3, #2]
 807df86:	b2da      	uxtb	r2, r3
 807df88:	4b4c      	ldr	r3, [pc, #304]	; (807e0bc <USBD_SetConfig+0x148>)
 807df8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 807df8c:	4b4b      	ldr	r3, [pc, #300]	; (807e0bc <USBD_SetConfig+0x148>)
 807df8e:	781b      	ldrb	r3, [r3, #0]
 807df90:	2b01      	cmp	r3, #1
 807df92:	d905      	bls.n	807dfa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 807df94:	6839      	ldr	r1, [r7, #0]
 807df96:	6878      	ldr	r0, [r7, #4]
 807df98:	f000 f96c 	bl	807e274 <USBD_CtlError>
    return USBD_FAIL;
 807df9c:	2303      	movs	r3, #3
 807df9e:	e088      	b.n	807e0b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 807dfa0:	687b      	ldr	r3, [r7, #4]
 807dfa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807dfa6:	b2db      	uxtb	r3, r3
 807dfa8:	2b02      	cmp	r3, #2
 807dfaa:	d002      	beq.n	807dfb2 <USBD_SetConfig+0x3e>
 807dfac:	2b03      	cmp	r3, #3
 807dfae:	d025      	beq.n	807dffc <USBD_SetConfig+0x88>
 807dfb0:	e071      	b.n	807e096 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 807dfb2:	4b42      	ldr	r3, [pc, #264]	; (807e0bc <USBD_SetConfig+0x148>)
 807dfb4:	781b      	ldrb	r3, [r3, #0]
 807dfb6:	2b00      	cmp	r3, #0
 807dfb8:	d01c      	beq.n	807dff4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 807dfba:	4b40      	ldr	r3, [pc, #256]	; (807e0bc <USBD_SetConfig+0x148>)
 807dfbc:	781b      	ldrb	r3, [r3, #0]
 807dfbe:	461a      	mov	r2, r3
 807dfc0:	687b      	ldr	r3, [r7, #4]
 807dfc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 807dfc4:	4b3d      	ldr	r3, [pc, #244]	; (807e0bc <USBD_SetConfig+0x148>)
 807dfc6:	781b      	ldrb	r3, [r3, #0]
 807dfc8:	4619      	mov	r1, r3
 807dfca:	6878      	ldr	r0, [r7, #4]
 807dfcc:	f7ff f937 	bl	807d23e <USBD_SetClassConfig>
 807dfd0:	4603      	mov	r3, r0
 807dfd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 807dfd4:	7bfb      	ldrb	r3, [r7, #15]
 807dfd6:	2b00      	cmp	r3, #0
 807dfd8:	d004      	beq.n	807dfe4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 807dfda:	6839      	ldr	r1, [r7, #0]
 807dfdc:	6878      	ldr	r0, [r7, #4]
 807dfde:	f000 f949 	bl	807e274 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 807dfe2:	e065      	b.n	807e0b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 807dfe4:	6878      	ldr	r0, [r7, #4]
 807dfe6:	f000 fa10 	bl	807e40a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 807dfea:	687b      	ldr	r3, [r7, #4]
 807dfec:	2203      	movs	r2, #3
 807dfee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 807dff2:	e05d      	b.n	807e0b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 807dff4:	6878      	ldr	r0, [r7, #4]
 807dff6:	f000 fa08 	bl	807e40a <USBD_CtlSendStatus>
      break;
 807dffa:	e059      	b.n	807e0b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 807dffc:	4b2f      	ldr	r3, [pc, #188]	; (807e0bc <USBD_SetConfig+0x148>)
 807dffe:	781b      	ldrb	r3, [r3, #0]
 807e000:	2b00      	cmp	r3, #0
 807e002:	d112      	bne.n	807e02a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 807e004:	687b      	ldr	r3, [r7, #4]
 807e006:	2202      	movs	r2, #2
 807e008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 807e00c:	4b2b      	ldr	r3, [pc, #172]	; (807e0bc <USBD_SetConfig+0x148>)
 807e00e:	781b      	ldrb	r3, [r3, #0]
 807e010:	461a      	mov	r2, r3
 807e012:	687b      	ldr	r3, [r7, #4]
 807e014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 807e016:	4b29      	ldr	r3, [pc, #164]	; (807e0bc <USBD_SetConfig+0x148>)
 807e018:	781b      	ldrb	r3, [r3, #0]
 807e01a:	4619      	mov	r1, r3
 807e01c:	6878      	ldr	r0, [r7, #4]
 807e01e:	f7ff f92a 	bl	807d276 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 807e022:	6878      	ldr	r0, [r7, #4]
 807e024:	f000 f9f1 	bl	807e40a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 807e028:	e042      	b.n	807e0b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 807e02a:	4b24      	ldr	r3, [pc, #144]	; (807e0bc <USBD_SetConfig+0x148>)
 807e02c:	781b      	ldrb	r3, [r3, #0]
 807e02e:	461a      	mov	r2, r3
 807e030:	687b      	ldr	r3, [r7, #4]
 807e032:	685b      	ldr	r3, [r3, #4]
 807e034:	429a      	cmp	r2, r3
 807e036:	d02a      	beq.n	807e08e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 807e038:	687b      	ldr	r3, [r7, #4]
 807e03a:	685b      	ldr	r3, [r3, #4]
 807e03c:	b2db      	uxtb	r3, r3
 807e03e:	4619      	mov	r1, r3
 807e040:	6878      	ldr	r0, [r7, #4]
 807e042:	f7ff f918 	bl	807d276 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 807e046:	4b1d      	ldr	r3, [pc, #116]	; (807e0bc <USBD_SetConfig+0x148>)
 807e048:	781b      	ldrb	r3, [r3, #0]
 807e04a:	461a      	mov	r2, r3
 807e04c:	687b      	ldr	r3, [r7, #4]
 807e04e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 807e050:	4b1a      	ldr	r3, [pc, #104]	; (807e0bc <USBD_SetConfig+0x148>)
 807e052:	781b      	ldrb	r3, [r3, #0]
 807e054:	4619      	mov	r1, r3
 807e056:	6878      	ldr	r0, [r7, #4]
 807e058:	f7ff f8f1 	bl	807d23e <USBD_SetClassConfig>
 807e05c:	4603      	mov	r3, r0
 807e05e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 807e060:	7bfb      	ldrb	r3, [r7, #15]
 807e062:	2b00      	cmp	r3, #0
 807e064:	d00f      	beq.n	807e086 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 807e066:	6839      	ldr	r1, [r7, #0]
 807e068:	6878      	ldr	r0, [r7, #4]
 807e06a:	f000 f903 	bl	807e274 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 807e06e:	687b      	ldr	r3, [r7, #4]
 807e070:	685b      	ldr	r3, [r3, #4]
 807e072:	b2db      	uxtb	r3, r3
 807e074:	4619      	mov	r1, r3
 807e076:	6878      	ldr	r0, [r7, #4]
 807e078:	f7ff f8fd 	bl	807d276 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 807e07c:	687b      	ldr	r3, [r7, #4]
 807e07e:	2202      	movs	r2, #2
 807e080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 807e084:	e014      	b.n	807e0b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 807e086:	6878      	ldr	r0, [r7, #4]
 807e088:	f000 f9bf 	bl	807e40a <USBD_CtlSendStatus>
      break;
 807e08c:	e010      	b.n	807e0b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 807e08e:	6878      	ldr	r0, [r7, #4]
 807e090:	f000 f9bb 	bl	807e40a <USBD_CtlSendStatus>
      break;
 807e094:	e00c      	b.n	807e0b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 807e096:	6839      	ldr	r1, [r7, #0]
 807e098:	6878      	ldr	r0, [r7, #4]
 807e09a:	f000 f8eb 	bl	807e274 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 807e09e:	4b07      	ldr	r3, [pc, #28]	; (807e0bc <USBD_SetConfig+0x148>)
 807e0a0:	781b      	ldrb	r3, [r3, #0]
 807e0a2:	4619      	mov	r1, r3
 807e0a4:	6878      	ldr	r0, [r7, #4]
 807e0a6:	f7ff f8e6 	bl	807d276 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 807e0aa:	2303      	movs	r3, #3
 807e0ac:	73fb      	strb	r3, [r7, #15]
      break;
 807e0ae:	bf00      	nop
  }

  return ret;
 807e0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 807e0b2:	4618      	mov	r0, r3
 807e0b4:	3710      	adds	r7, #16
 807e0b6:	46bd      	mov	sp, r7
 807e0b8:	bd80      	pop	{r7, pc}
 807e0ba:	bf00      	nop
 807e0bc:	2000021b 	.word	0x2000021b

0807e0c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e0c0:	b580      	push	{r7, lr}
 807e0c2:	b082      	sub	sp, #8
 807e0c4:	af00      	add	r7, sp, #0
 807e0c6:	6078      	str	r0, [r7, #4]
 807e0c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 807e0ca:	683b      	ldr	r3, [r7, #0]
 807e0cc:	88db      	ldrh	r3, [r3, #6]
 807e0ce:	2b01      	cmp	r3, #1
 807e0d0:	d004      	beq.n	807e0dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 807e0d2:	6839      	ldr	r1, [r7, #0]
 807e0d4:	6878      	ldr	r0, [r7, #4]
 807e0d6:	f000 f8cd 	bl	807e274 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 807e0da:	e023      	b.n	807e124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 807e0dc:	687b      	ldr	r3, [r7, #4]
 807e0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807e0e2:	b2db      	uxtb	r3, r3
 807e0e4:	2b02      	cmp	r3, #2
 807e0e6:	dc02      	bgt.n	807e0ee <USBD_GetConfig+0x2e>
 807e0e8:	2b00      	cmp	r3, #0
 807e0ea:	dc03      	bgt.n	807e0f4 <USBD_GetConfig+0x34>
 807e0ec:	e015      	b.n	807e11a <USBD_GetConfig+0x5a>
 807e0ee:	2b03      	cmp	r3, #3
 807e0f0:	d00b      	beq.n	807e10a <USBD_GetConfig+0x4a>
 807e0f2:	e012      	b.n	807e11a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 807e0f4:	687b      	ldr	r3, [r7, #4]
 807e0f6:	2200      	movs	r2, #0
 807e0f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 807e0fa:	687b      	ldr	r3, [r7, #4]
 807e0fc:	3308      	adds	r3, #8
 807e0fe:	2201      	movs	r2, #1
 807e100:	4619      	mov	r1, r3
 807e102:	6878      	ldr	r0, [r7, #4]
 807e104:	f000 f927 	bl	807e356 <USBD_CtlSendData>
        break;
 807e108:	e00c      	b.n	807e124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 807e10a:	687b      	ldr	r3, [r7, #4]
 807e10c:	3304      	adds	r3, #4
 807e10e:	2201      	movs	r2, #1
 807e110:	4619      	mov	r1, r3
 807e112:	6878      	ldr	r0, [r7, #4]
 807e114:	f000 f91f 	bl	807e356 <USBD_CtlSendData>
        break;
 807e118:	e004      	b.n	807e124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 807e11a:	6839      	ldr	r1, [r7, #0]
 807e11c:	6878      	ldr	r0, [r7, #4]
 807e11e:	f000 f8a9 	bl	807e274 <USBD_CtlError>
        break;
 807e122:	bf00      	nop
}
 807e124:	bf00      	nop
 807e126:	3708      	adds	r7, #8
 807e128:	46bd      	mov	sp, r7
 807e12a:	bd80      	pop	{r7, pc}

0807e12c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e12c:	b580      	push	{r7, lr}
 807e12e:	b082      	sub	sp, #8
 807e130:	af00      	add	r7, sp, #0
 807e132:	6078      	str	r0, [r7, #4]
 807e134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 807e136:	687b      	ldr	r3, [r7, #4]
 807e138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807e13c:	b2db      	uxtb	r3, r3
 807e13e:	3b01      	subs	r3, #1
 807e140:	2b02      	cmp	r3, #2
 807e142:	d81e      	bhi.n	807e182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 807e144:	683b      	ldr	r3, [r7, #0]
 807e146:	88db      	ldrh	r3, [r3, #6]
 807e148:	2b02      	cmp	r3, #2
 807e14a:	d004      	beq.n	807e156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 807e14c:	6839      	ldr	r1, [r7, #0]
 807e14e:	6878      	ldr	r0, [r7, #4]
 807e150:	f000 f890 	bl	807e274 <USBD_CtlError>
        break;
 807e154:	e01a      	b.n	807e18c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 807e156:	687b      	ldr	r3, [r7, #4]
 807e158:	2201      	movs	r2, #1
 807e15a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 807e15c:	687b      	ldr	r3, [r7, #4]
 807e15e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 807e162:	2b00      	cmp	r3, #0
 807e164:	d005      	beq.n	807e172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 807e166:	687b      	ldr	r3, [r7, #4]
 807e168:	68db      	ldr	r3, [r3, #12]
 807e16a:	f043 0202 	orr.w	r2, r3, #2
 807e16e:	687b      	ldr	r3, [r7, #4]
 807e170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 807e172:	687b      	ldr	r3, [r7, #4]
 807e174:	330c      	adds	r3, #12
 807e176:	2202      	movs	r2, #2
 807e178:	4619      	mov	r1, r3
 807e17a:	6878      	ldr	r0, [r7, #4]
 807e17c:	f000 f8eb 	bl	807e356 <USBD_CtlSendData>
      break;
 807e180:	e004      	b.n	807e18c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 807e182:	6839      	ldr	r1, [r7, #0]
 807e184:	6878      	ldr	r0, [r7, #4]
 807e186:	f000 f875 	bl	807e274 <USBD_CtlError>
      break;
 807e18a:	bf00      	nop
  }
}
 807e18c:	bf00      	nop
 807e18e:	3708      	adds	r7, #8
 807e190:	46bd      	mov	sp, r7
 807e192:	bd80      	pop	{r7, pc}

0807e194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e194:	b580      	push	{r7, lr}
 807e196:	b082      	sub	sp, #8
 807e198:	af00      	add	r7, sp, #0
 807e19a:	6078      	str	r0, [r7, #4]
 807e19c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 807e19e:	683b      	ldr	r3, [r7, #0]
 807e1a0:	885b      	ldrh	r3, [r3, #2]
 807e1a2:	2b01      	cmp	r3, #1
 807e1a4:	d106      	bne.n	807e1b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 807e1a6:	687b      	ldr	r3, [r7, #4]
 807e1a8:	2201      	movs	r2, #1
 807e1aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 807e1ae:	6878      	ldr	r0, [r7, #4]
 807e1b0:	f000 f92b 	bl	807e40a <USBD_CtlSendStatus>
  }
}
 807e1b4:	bf00      	nop
 807e1b6:	3708      	adds	r7, #8
 807e1b8:	46bd      	mov	sp, r7
 807e1ba:	bd80      	pop	{r7, pc}

0807e1bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e1bc:	b580      	push	{r7, lr}
 807e1be:	b082      	sub	sp, #8
 807e1c0:	af00      	add	r7, sp, #0
 807e1c2:	6078      	str	r0, [r7, #4]
 807e1c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 807e1c6:	687b      	ldr	r3, [r7, #4]
 807e1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807e1cc:	b2db      	uxtb	r3, r3
 807e1ce:	3b01      	subs	r3, #1
 807e1d0:	2b02      	cmp	r3, #2
 807e1d2:	d80b      	bhi.n	807e1ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 807e1d4:	683b      	ldr	r3, [r7, #0]
 807e1d6:	885b      	ldrh	r3, [r3, #2]
 807e1d8:	2b01      	cmp	r3, #1
 807e1da:	d10c      	bne.n	807e1f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 807e1dc:	687b      	ldr	r3, [r7, #4]
 807e1de:	2200      	movs	r2, #0
 807e1e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 807e1e4:	6878      	ldr	r0, [r7, #4]
 807e1e6:	f000 f910 	bl	807e40a <USBD_CtlSendStatus>
      }
      break;
 807e1ea:	e004      	b.n	807e1f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 807e1ec:	6839      	ldr	r1, [r7, #0]
 807e1ee:	6878      	ldr	r0, [r7, #4]
 807e1f0:	f000 f840 	bl	807e274 <USBD_CtlError>
      break;
 807e1f4:	e000      	b.n	807e1f8 <USBD_ClrFeature+0x3c>
      break;
 807e1f6:	bf00      	nop
  }
}
 807e1f8:	bf00      	nop
 807e1fa:	3708      	adds	r7, #8
 807e1fc:	46bd      	mov	sp, r7
 807e1fe:	bd80      	pop	{r7, pc}

0807e200 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 807e200:	b580      	push	{r7, lr}
 807e202:	b084      	sub	sp, #16
 807e204:	af00      	add	r7, sp, #0
 807e206:	6078      	str	r0, [r7, #4]
 807e208:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 807e20a:	683b      	ldr	r3, [r7, #0]
 807e20c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 807e20e:	68fb      	ldr	r3, [r7, #12]
 807e210:	781a      	ldrb	r2, [r3, #0]
 807e212:	687b      	ldr	r3, [r7, #4]
 807e214:	701a      	strb	r2, [r3, #0]

  pbuff++;
 807e216:	68fb      	ldr	r3, [r7, #12]
 807e218:	3301      	adds	r3, #1
 807e21a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 807e21c:	68fb      	ldr	r3, [r7, #12]
 807e21e:	781a      	ldrb	r2, [r3, #0]
 807e220:	687b      	ldr	r3, [r7, #4]
 807e222:	705a      	strb	r2, [r3, #1]

  pbuff++;
 807e224:	68fb      	ldr	r3, [r7, #12]
 807e226:	3301      	adds	r3, #1
 807e228:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 807e22a:	68f8      	ldr	r0, [r7, #12]
 807e22c:	f7ff faaa 	bl	807d784 <SWAPBYTE>
 807e230:	4603      	mov	r3, r0
 807e232:	461a      	mov	r2, r3
 807e234:	687b      	ldr	r3, [r7, #4]
 807e236:	805a      	strh	r2, [r3, #2]

  pbuff++;
 807e238:	68fb      	ldr	r3, [r7, #12]
 807e23a:	3301      	adds	r3, #1
 807e23c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 807e23e:	68fb      	ldr	r3, [r7, #12]
 807e240:	3301      	adds	r3, #1
 807e242:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 807e244:	68f8      	ldr	r0, [r7, #12]
 807e246:	f7ff fa9d 	bl	807d784 <SWAPBYTE>
 807e24a:	4603      	mov	r3, r0
 807e24c:	461a      	mov	r2, r3
 807e24e:	687b      	ldr	r3, [r7, #4]
 807e250:	809a      	strh	r2, [r3, #4]

  pbuff++;
 807e252:	68fb      	ldr	r3, [r7, #12]
 807e254:	3301      	adds	r3, #1
 807e256:	60fb      	str	r3, [r7, #12]
  pbuff++;
 807e258:	68fb      	ldr	r3, [r7, #12]
 807e25a:	3301      	adds	r3, #1
 807e25c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 807e25e:	68f8      	ldr	r0, [r7, #12]
 807e260:	f7ff fa90 	bl	807d784 <SWAPBYTE>
 807e264:	4603      	mov	r3, r0
 807e266:	461a      	mov	r2, r3
 807e268:	687b      	ldr	r3, [r7, #4]
 807e26a:	80da      	strh	r2, [r3, #6]
}
 807e26c:	bf00      	nop
 807e26e:	3710      	adds	r7, #16
 807e270:	46bd      	mov	sp, r7
 807e272:	bd80      	pop	{r7, pc}

0807e274 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807e274:	b580      	push	{r7, lr}
 807e276:	b082      	sub	sp, #8
 807e278:	af00      	add	r7, sp, #0
 807e27a:	6078      	str	r0, [r7, #4]
 807e27c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 807e27e:	2180      	movs	r1, #128	; 0x80
 807e280:	6878      	ldr	r0, [r7, #4]
 807e282:	f000 fd4f 	bl	807ed24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 807e286:	2100      	movs	r1, #0
 807e288:	6878      	ldr	r0, [r7, #4]
 807e28a:	f000 fd4b 	bl	807ed24 <USBD_LL_StallEP>
}
 807e28e:	bf00      	nop
 807e290:	3708      	adds	r7, #8
 807e292:	46bd      	mov	sp, r7
 807e294:	bd80      	pop	{r7, pc}

0807e296 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 807e296:	b580      	push	{r7, lr}
 807e298:	b086      	sub	sp, #24
 807e29a:	af00      	add	r7, sp, #0
 807e29c:	60f8      	str	r0, [r7, #12]
 807e29e:	60b9      	str	r1, [r7, #8]
 807e2a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 807e2a2:	2300      	movs	r3, #0
 807e2a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 807e2a6:	68fb      	ldr	r3, [r7, #12]
 807e2a8:	2b00      	cmp	r3, #0
 807e2aa:	d036      	beq.n	807e31a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 807e2ac:	68fb      	ldr	r3, [r7, #12]
 807e2ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 807e2b0:	6938      	ldr	r0, [r7, #16]
 807e2b2:	f000 f836 	bl	807e322 <USBD_GetLen>
 807e2b6:	4603      	mov	r3, r0
 807e2b8:	3301      	adds	r3, #1
 807e2ba:	b29b      	uxth	r3, r3
 807e2bc:	005b      	lsls	r3, r3, #1
 807e2be:	b29a      	uxth	r2, r3
 807e2c0:	687b      	ldr	r3, [r7, #4]
 807e2c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 807e2c4:	7dfb      	ldrb	r3, [r7, #23]
 807e2c6:	68ba      	ldr	r2, [r7, #8]
 807e2c8:	4413      	add	r3, r2
 807e2ca:	687a      	ldr	r2, [r7, #4]
 807e2cc:	7812      	ldrb	r2, [r2, #0]
 807e2ce:	701a      	strb	r2, [r3, #0]
  idx++;
 807e2d0:	7dfb      	ldrb	r3, [r7, #23]
 807e2d2:	3301      	adds	r3, #1
 807e2d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 807e2d6:	7dfb      	ldrb	r3, [r7, #23]
 807e2d8:	68ba      	ldr	r2, [r7, #8]
 807e2da:	4413      	add	r3, r2
 807e2dc:	2203      	movs	r2, #3
 807e2de:	701a      	strb	r2, [r3, #0]
  idx++;
 807e2e0:	7dfb      	ldrb	r3, [r7, #23]
 807e2e2:	3301      	adds	r3, #1
 807e2e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 807e2e6:	e013      	b.n	807e310 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 807e2e8:	7dfb      	ldrb	r3, [r7, #23]
 807e2ea:	68ba      	ldr	r2, [r7, #8]
 807e2ec:	4413      	add	r3, r2
 807e2ee:	693a      	ldr	r2, [r7, #16]
 807e2f0:	7812      	ldrb	r2, [r2, #0]
 807e2f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 807e2f4:	693b      	ldr	r3, [r7, #16]
 807e2f6:	3301      	adds	r3, #1
 807e2f8:	613b      	str	r3, [r7, #16]
    idx++;
 807e2fa:	7dfb      	ldrb	r3, [r7, #23]
 807e2fc:	3301      	adds	r3, #1
 807e2fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 807e300:	7dfb      	ldrb	r3, [r7, #23]
 807e302:	68ba      	ldr	r2, [r7, #8]
 807e304:	4413      	add	r3, r2
 807e306:	2200      	movs	r2, #0
 807e308:	701a      	strb	r2, [r3, #0]
    idx++;
 807e30a:	7dfb      	ldrb	r3, [r7, #23]
 807e30c:	3301      	adds	r3, #1
 807e30e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 807e310:	693b      	ldr	r3, [r7, #16]
 807e312:	781b      	ldrb	r3, [r3, #0]
 807e314:	2b00      	cmp	r3, #0
 807e316:	d1e7      	bne.n	807e2e8 <USBD_GetString+0x52>
 807e318:	e000      	b.n	807e31c <USBD_GetString+0x86>
    return;
 807e31a:	bf00      	nop
  }
}
 807e31c:	3718      	adds	r7, #24
 807e31e:	46bd      	mov	sp, r7
 807e320:	bd80      	pop	{r7, pc}

0807e322 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 807e322:	b480      	push	{r7}
 807e324:	b085      	sub	sp, #20
 807e326:	af00      	add	r7, sp, #0
 807e328:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 807e32a:	2300      	movs	r3, #0
 807e32c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 807e32e:	687b      	ldr	r3, [r7, #4]
 807e330:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 807e332:	e005      	b.n	807e340 <USBD_GetLen+0x1e>
  {
    len++;
 807e334:	7bfb      	ldrb	r3, [r7, #15]
 807e336:	3301      	adds	r3, #1
 807e338:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 807e33a:	68bb      	ldr	r3, [r7, #8]
 807e33c:	3301      	adds	r3, #1
 807e33e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 807e340:	68bb      	ldr	r3, [r7, #8]
 807e342:	781b      	ldrb	r3, [r3, #0]
 807e344:	2b00      	cmp	r3, #0
 807e346:	d1f5      	bne.n	807e334 <USBD_GetLen+0x12>
  }

  return len;
 807e348:	7bfb      	ldrb	r3, [r7, #15]
}
 807e34a:	4618      	mov	r0, r3
 807e34c:	3714      	adds	r7, #20
 807e34e:	46bd      	mov	sp, r7
 807e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e354:	4770      	bx	lr

0807e356 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 807e356:	b580      	push	{r7, lr}
 807e358:	b084      	sub	sp, #16
 807e35a:	af00      	add	r7, sp, #0
 807e35c:	60f8      	str	r0, [r7, #12]
 807e35e:	60b9      	str	r1, [r7, #8]
 807e360:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 807e362:	68fb      	ldr	r3, [r7, #12]
 807e364:	2202      	movs	r2, #2
 807e366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 807e36a:	68fb      	ldr	r3, [r7, #12]
 807e36c:	687a      	ldr	r2, [r7, #4]
 807e36e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 807e370:	68fb      	ldr	r3, [r7, #12]
 807e372:	687a      	ldr	r2, [r7, #4]
 807e374:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 807e376:	687b      	ldr	r3, [r7, #4]
 807e378:	68ba      	ldr	r2, [r7, #8]
 807e37a:	2100      	movs	r1, #0
 807e37c:	68f8      	ldr	r0, [r7, #12]
 807e37e:	f000 fd5a 	bl	807ee36 <USBD_LL_Transmit>

  return USBD_OK;
 807e382:	2300      	movs	r3, #0
}
 807e384:	4618      	mov	r0, r3
 807e386:	3710      	adds	r7, #16
 807e388:	46bd      	mov	sp, r7
 807e38a:	bd80      	pop	{r7, pc}

0807e38c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 807e38c:	b580      	push	{r7, lr}
 807e38e:	b084      	sub	sp, #16
 807e390:	af00      	add	r7, sp, #0
 807e392:	60f8      	str	r0, [r7, #12]
 807e394:	60b9      	str	r1, [r7, #8]
 807e396:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 807e398:	687b      	ldr	r3, [r7, #4]
 807e39a:	68ba      	ldr	r2, [r7, #8]
 807e39c:	2100      	movs	r1, #0
 807e39e:	68f8      	ldr	r0, [r7, #12]
 807e3a0:	f000 fd49 	bl	807ee36 <USBD_LL_Transmit>

  return USBD_OK;
 807e3a4:	2300      	movs	r3, #0
}
 807e3a6:	4618      	mov	r0, r3
 807e3a8:	3710      	adds	r7, #16
 807e3aa:	46bd      	mov	sp, r7
 807e3ac:	bd80      	pop	{r7, pc}

0807e3ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 807e3ae:	b580      	push	{r7, lr}
 807e3b0:	b084      	sub	sp, #16
 807e3b2:	af00      	add	r7, sp, #0
 807e3b4:	60f8      	str	r0, [r7, #12]
 807e3b6:	60b9      	str	r1, [r7, #8]
 807e3b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 807e3ba:	68fb      	ldr	r3, [r7, #12]
 807e3bc:	2203      	movs	r2, #3
 807e3be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 807e3c2:	68fb      	ldr	r3, [r7, #12]
 807e3c4:	687a      	ldr	r2, [r7, #4]
 807e3c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 807e3ca:	68fb      	ldr	r3, [r7, #12]
 807e3cc:	687a      	ldr	r2, [r7, #4]
 807e3ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 807e3d2:	687b      	ldr	r3, [r7, #4]
 807e3d4:	68ba      	ldr	r2, [r7, #8]
 807e3d6:	2100      	movs	r1, #0
 807e3d8:	68f8      	ldr	r0, [r7, #12]
 807e3da:	f000 fd4d 	bl	807ee78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e3de:	2300      	movs	r3, #0
}
 807e3e0:	4618      	mov	r0, r3
 807e3e2:	3710      	adds	r7, #16
 807e3e4:	46bd      	mov	sp, r7
 807e3e6:	bd80      	pop	{r7, pc}

0807e3e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 807e3e8:	b580      	push	{r7, lr}
 807e3ea:	b084      	sub	sp, #16
 807e3ec:	af00      	add	r7, sp, #0
 807e3ee:	60f8      	str	r0, [r7, #12]
 807e3f0:	60b9      	str	r1, [r7, #8]
 807e3f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 807e3f4:	687b      	ldr	r3, [r7, #4]
 807e3f6:	68ba      	ldr	r2, [r7, #8]
 807e3f8:	2100      	movs	r1, #0
 807e3fa:	68f8      	ldr	r0, [r7, #12]
 807e3fc:	f000 fd3c 	bl	807ee78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e400:	2300      	movs	r3, #0
}
 807e402:	4618      	mov	r0, r3
 807e404:	3710      	adds	r7, #16
 807e406:	46bd      	mov	sp, r7
 807e408:	bd80      	pop	{r7, pc}

0807e40a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 807e40a:	b580      	push	{r7, lr}
 807e40c:	b082      	sub	sp, #8
 807e40e:	af00      	add	r7, sp, #0
 807e410:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 807e412:	687b      	ldr	r3, [r7, #4]
 807e414:	2204      	movs	r2, #4
 807e416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 807e41a:	2300      	movs	r3, #0
 807e41c:	2200      	movs	r2, #0
 807e41e:	2100      	movs	r1, #0
 807e420:	6878      	ldr	r0, [r7, #4]
 807e422:	f000 fd08 	bl	807ee36 <USBD_LL_Transmit>

  return USBD_OK;
 807e426:	2300      	movs	r3, #0
}
 807e428:	4618      	mov	r0, r3
 807e42a:	3708      	adds	r7, #8
 807e42c:	46bd      	mov	sp, r7
 807e42e:	bd80      	pop	{r7, pc}

0807e430 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 807e430:	b580      	push	{r7, lr}
 807e432:	b082      	sub	sp, #8
 807e434:	af00      	add	r7, sp, #0
 807e436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 807e438:	687b      	ldr	r3, [r7, #4]
 807e43a:	2205      	movs	r2, #5
 807e43c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 807e440:	2300      	movs	r3, #0
 807e442:	2200      	movs	r2, #0
 807e444:	2100      	movs	r1, #0
 807e446:	6878      	ldr	r0, [r7, #4]
 807e448:	f000 fd16 	bl	807ee78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 807e44c:	2300      	movs	r3, #0
}
 807e44e:	4618      	mov	r0, r3
 807e450:	3708      	adds	r7, #8
 807e452:	46bd      	mov	sp, r7
 807e454:	bd80      	pop	{r7, pc}

0807e456 <dfu_test>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void dfu_test(void)
{
 807e456:	b480      	push	{r7}
 807e458:	af00      	add	r7, sp, #0

}
 807e45a:	bf00      	nop
 807e45c:	46bd      	mov	sp, r7
 807e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e462:	4770      	bx	lr

0807e464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 807e464:	b580      	push	{r7, lr}
 807e466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 807e468:	2200      	movs	r2, #0
 807e46a:	4912      	ldr	r1, [pc, #72]	; (807e4b4 <MX_USB_DEVICE_Init+0x50>)
 807e46c:	4812      	ldr	r0, [pc, #72]	; (807e4b8 <MX_USB_DEVICE_Init+0x54>)
 807e46e:	f7fe fe5d 	bl	807d12c <USBD_Init>
 807e472:	4603      	mov	r3, r0
 807e474:	2b00      	cmp	r3, #0
 807e476:	d001      	beq.n	807e47c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 807e478:	f7fa f91e 	bl	80786b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 807e47c:	490f      	ldr	r1, [pc, #60]	; (807e4bc <MX_USB_DEVICE_Init+0x58>)
 807e47e:	480e      	ldr	r0, [pc, #56]	; (807e4b8 <MX_USB_DEVICE_Init+0x54>)
 807e480:	f7fe fe84 	bl	807d18c <USBD_RegisterClass>
 807e484:	4603      	mov	r3, r0
 807e486:	2b00      	cmp	r3, #0
 807e488:	d001      	beq.n	807e48e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 807e48a:	f7fa f915 	bl	80786b8 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 807e48e:	490c      	ldr	r1, [pc, #48]	; (807e4c0 <MX_USB_DEVICE_Init+0x5c>)
 807e490:	4809      	ldr	r0, [pc, #36]	; (807e4b8 <MX_USB_DEVICE_Init+0x54>)
 807e492:	f7fe fac9 	bl	807ca28 <USBD_DFU_RegisterMedia>
 807e496:	4603      	mov	r3, r0
 807e498:	2b00      	cmp	r3, #0
 807e49a:	d001      	beq.n	807e4a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 807e49c:	f7fa f90c 	bl	80786b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 807e4a0:	4805      	ldr	r0, [pc, #20]	; (807e4b8 <MX_USB_DEVICE_Init+0x54>)
 807e4a2:	f7fe fe9a 	bl	807d1da <USBD_Start>
 807e4a6:	4603      	mov	r3, r0
 807e4a8:	2b00      	cmp	r3, #0
 807e4aa:	d001      	beq.n	807e4b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 807e4ac:	f7fa f904 	bl	80786b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 807e4b0:	bf00      	nop
 807e4b2:	bd80      	pop	{r7, pc}
 807e4b4:	20000070 	.word	0x20000070
 807e4b8:	2000021c 	.word	0x2000021c
 807e4bc:	2000000c 	.word	0x2000000c
 807e4c0:	200000c0 	.word	0x200000c0

0807e4c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e4c4:	b480      	push	{r7}
 807e4c6:	b083      	sub	sp, #12
 807e4c8:	af00      	add	r7, sp, #0
 807e4ca:	4603      	mov	r3, r0
 807e4cc:	6039      	str	r1, [r7, #0]
 807e4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 807e4d0:	683b      	ldr	r3, [r7, #0]
 807e4d2:	2212      	movs	r2, #18
 807e4d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 807e4d6:	4b03      	ldr	r3, [pc, #12]	; (807e4e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 807e4d8:	4618      	mov	r0, r3
 807e4da:	370c      	adds	r7, #12
 807e4dc:	46bd      	mov	sp, r7
 807e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e4e2:	4770      	bx	lr
 807e4e4:	2000008c 	.word	0x2000008c

0807e4e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e4e8:	b480      	push	{r7}
 807e4ea:	b083      	sub	sp, #12
 807e4ec:	af00      	add	r7, sp, #0
 807e4ee:	4603      	mov	r3, r0
 807e4f0:	6039      	str	r1, [r7, #0]
 807e4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 807e4f4:	683b      	ldr	r3, [r7, #0]
 807e4f6:	2204      	movs	r2, #4
 807e4f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 807e4fa:	4b03      	ldr	r3, [pc, #12]	; (807e508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 807e4fc:	4618      	mov	r0, r3
 807e4fe:	370c      	adds	r7, #12
 807e500:	46bd      	mov	sp, r7
 807e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e506:	4770      	bx	lr
 807e508:	200000a0 	.word	0x200000a0

0807e50c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e50c:	b580      	push	{r7, lr}
 807e50e:	b082      	sub	sp, #8
 807e510:	af00      	add	r7, sp, #0
 807e512:	4603      	mov	r3, r0
 807e514:	6039      	str	r1, [r7, #0]
 807e516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 807e518:	79fb      	ldrb	r3, [r7, #7]
 807e51a:	2b00      	cmp	r3, #0
 807e51c:	d105      	bne.n	807e52a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 807e51e:	683a      	ldr	r2, [r7, #0]
 807e520:	4907      	ldr	r1, [pc, #28]	; (807e540 <USBD_FS_ProductStrDescriptor+0x34>)
 807e522:	4808      	ldr	r0, [pc, #32]	; (807e544 <USBD_FS_ProductStrDescriptor+0x38>)
 807e524:	f7ff feb7 	bl	807e296 <USBD_GetString>
 807e528:	e004      	b.n	807e534 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 807e52a:	683a      	ldr	r2, [r7, #0]
 807e52c:	4904      	ldr	r1, [pc, #16]	; (807e540 <USBD_FS_ProductStrDescriptor+0x34>)
 807e52e:	4805      	ldr	r0, [pc, #20]	; (807e544 <USBD_FS_ProductStrDescriptor+0x38>)
 807e530:	f7ff feb1 	bl	807e296 <USBD_GetString>
  }
  return USBD_StrDesc;
 807e534:	4b02      	ldr	r3, [pc, #8]	; (807e540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 807e536:	4618      	mov	r0, r3
 807e538:	3708      	adds	r7, #8
 807e53a:	46bd      	mov	sp, r7
 807e53c:	bd80      	pop	{r7, pc}
 807e53e:	bf00      	nop
 807e540:	200004ec 	.word	0x200004ec
 807e544:	0807efb4 	.word	0x0807efb4

0807e548 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e548:	b580      	push	{r7, lr}
 807e54a:	b082      	sub	sp, #8
 807e54c:	af00      	add	r7, sp, #0
 807e54e:	4603      	mov	r3, r0
 807e550:	6039      	str	r1, [r7, #0]
 807e552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 807e554:	683a      	ldr	r2, [r7, #0]
 807e556:	4904      	ldr	r1, [pc, #16]	; (807e568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 807e558:	4804      	ldr	r0, [pc, #16]	; (807e56c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 807e55a:	f7ff fe9c 	bl	807e296 <USBD_GetString>
  return USBD_StrDesc;
 807e55e:	4b02      	ldr	r3, [pc, #8]	; (807e568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 807e560:	4618      	mov	r0, r3
 807e562:	3708      	adds	r7, #8
 807e564:	46bd      	mov	sp, r7
 807e566:	bd80      	pop	{r7, pc}
 807e568:	200004ec 	.word	0x200004ec
 807e56c:	0807efc4 	.word	0x0807efc4

0807e570 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e570:	b580      	push	{r7, lr}
 807e572:	b082      	sub	sp, #8
 807e574:	af00      	add	r7, sp, #0
 807e576:	4603      	mov	r3, r0
 807e578:	6039      	str	r1, [r7, #0]
 807e57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 807e57c:	683b      	ldr	r3, [r7, #0]
 807e57e:	221a      	movs	r2, #26
 807e580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 807e582:	f000 f843 	bl	807e60c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 807e586:	4b02      	ldr	r3, [pc, #8]	; (807e590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 807e588:	4618      	mov	r0, r3
 807e58a:	3708      	adds	r7, #8
 807e58c:	46bd      	mov	sp, r7
 807e58e:	bd80      	pop	{r7, pc}
 807e590:	200000a4 	.word	0x200000a4

0807e594 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e594:	b580      	push	{r7, lr}
 807e596:	b082      	sub	sp, #8
 807e598:	af00      	add	r7, sp, #0
 807e59a:	4603      	mov	r3, r0
 807e59c:	6039      	str	r1, [r7, #0]
 807e59e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 807e5a0:	79fb      	ldrb	r3, [r7, #7]
 807e5a2:	2b00      	cmp	r3, #0
 807e5a4:	d105      	bne.n	807e5b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 807e5a6:	683a      	ldr	r2, [r7, #0]
 807e5a8:	4907      	ldr	r1, [pc, #28]	; (807e5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 807e5aa:	4808      	ldr	r0, [pc, #32]	; (807e5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 807e5ac:	f7ff fe73 	bl	807e296 <USBD_GetString>
 807e5b0:	e004      	b.n	807e5bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 807e5b2:	683a      	ldr	r2, [r7, #0]
 807e5b4:	4904      	ldr	r1, [pc, #16]	; (807e5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 807e5b6:	4805      	ldr	r0, [pc, #20]	; (807e5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 807e5b8:	f7ff fe6d 	bl	807e296 <USBD_GetString>
  }
  return USBD_StrDesc;
 807e5bc:	4b02      	ldr	r3, [pc, #8]	; (807e5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 807e5be:	4618      	mov	r0, r3
 807e5c0:	3708      	adds	r7, #8
 807e5c2:	46bd      	mov	sp, r7
 807e5c4:	bd80      	pop	{r7, pc}
 807e5c6:	bf00      	nop
 807e5c8:	200004ec 	.word	0x200004ec
 807e5cc:	0807efcc 	.word	0x0807efcc

0807e5d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 807e5d0:	b580      	push	{r7, lr}
 807e5d2:	b082      	sub	sp, #8
 807e5d4:	af00      	add	r7, sp, #0
 807e5d6:	4603      	mov	r3, r0
 807e5d8:	6039      	str	r1, [r7, #0]
 807e5da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 807e5dc:	79fb      	ldrb	r3, [r7, #7]
 807e5de:	2b00      	cmp	r3, #0
 807e5e0:	d105      	bne.n	807e5ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 807e5e2:	683a      	ldr	r2, [r7, #0]
 807e5e4:	4907      	ldr	r1, [pc, #28]	; (807e604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 807e5e6:	4808      	ldr	r0, [pc, #32]	; (807e608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 807e5e8:	f7ff fe55 	bl	807e296 <USBD_GetString>
 807e5ec:	e004      	b.n	807e5f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 807e5ee:	683a      	ldr	r2, [r7, #0]
 807e5f0:	4904      	ldr	r1, [pc, #16]	; (807e604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 807e5f2:	4805      	ldr	r0, [pc, #20]	; (807e608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 807e5f4:	f7ff fe4f 	bl	807e296 <USBD_GetString>
  }
  return USBD_StrDesc;
 807e5f8:	4b02      	ldr	r3, [pc, #8]	; (807e604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 807e5fa:	4618      	mov	r0, r3
 807e5fc:	3708      	adds	r7, #8
 807e5fe:	46bd      	mov	sp, r7
 807e600:	bd80      	pop	{r7, pc}
 807e602:	bf00      	nop
 807e604:	200004ec 	.word	0x200004ec
 807e608:	0807efd8 	.word	0x0807efd8

0807e60c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 807e60c:	b580      	push	{r7, lr}
 807e60e:	b084      	sub	sp, #16
 807e610:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 807e612:	4b0f      	ldr	r3, [pc, #60]	; (807e650 <Get_SerialNum+0x44>)
 807e614:	681b      	ldr	r3, [r3, #0]
 807e616:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 807e618:	4b0e      	ldr	r3, [pc, #56]	; (807e654 <Get_SerialNum+0x48>)
 807e61a:	681b      	ldr	r3, [r3, #0]
 807e61c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 807e61e:	4b0e      	ldr	r3, [pc, #56]	; (807e658 <Get_SerialNum+0x4c>)
 807e620:	681b      	ldr	r3, [r3, #0]
 807e622:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 807e624:	68fa      	ldr	r2, [r7, #12]
 807e626:	687b      	ldr	r3, [r7, #4]
 807e628:	4413      	add	r3, r2
 807e62a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 807e62c:	68fb      	ldr	r3, [r7, #12]
 807e62e:	2b00      	cmp	r3, #0
 807e630:	d009      	beq.n	807e646 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 807e632:	2208      	movs	r2, #8
 807e634:	4909      	ldr	r1, [pc, #36]	; (807e65c <Get_SerialNum+0x50>)
 807e636:	68f8      	ldr	r0, [r7, #12]
 807e638:	f000 f814 	bl	807e664 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 807e63c:	2204      	movs	r2, #4
 807e63e:	4908      	ldr	r1, [pc, #32]	; (807e660 <Get_SerialNum+0x54>)
 807e640:	68b8      	ldr	r0, [r7, #8]
 807e642:	f000 f80f 	bl	807e664 <IntToUnicode>
  }
}
 807e646:	bf00      	nop
 807e648:	3710      	adds	r7, #16
 807e64a:	46bd      	mov	sp, r7
 807e64c:	bd80      	pop	{r7, pc}
 807e64e:	bf00      	nop
 807e650:	1fff7a10 	.word	0x1fff7a10
 807e654:	1fff7a14 	.word	0x1fff7a14
 807e658:	1fff7a18 	.word	0x1fff7a18
 807e65c:	200000a6 	.word	0x200000a6
 807e660:	200000b6 	.word	0x200000b6

0807e664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 807e664:	b480      	push	{r7}
 807e666:	b087      	sub	sp, #28
 807e668:	af00      	add	r7, sp, #0
 807e66a:	60f8      	str	r0, [r7, #12]
 807e66c:	60b9      	str	r1, [r7, #8]
 807e66e:	4613      	mov	r3, r2
 807e670:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 807e672:	2300      	movs	r3, #0
 807e674:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 807e676:	2300      	movs	r3, #0
 807e678:	75fb      	strb	r3, [r7, #23]
 807e67a:	e027      	b.n	807e6cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 807e67c:	68fb      	ldr	r3, [r7, #12]
 807e67e:	0f1b      	lsrs	r3, r3, #28
 807e680:	2b09      	cmp	r3, #9
 807e682:	d80b      	bhi.n	807e69c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 807e684:	68fb      	ldr	r3, [r7, #12]
 807e686:	0f1b      	lsrs	r3, r3, #28
 807e688:	b2da      	uxtb	r2, r3
 807e68a:	7dfb      	ldrb	r3, [r7, #23]
 807e68c:	005b      	lsls	r3, r3, #1
 807e68e:	4619      	mov	r1, r3
 807e690:	68bb      	ldr	r3, [r7, #8]
 807e692:	440b      	add	r3, r1
 807e694:	3230      	adds	r2, #48	; 0x30
 807e696:	b2d2      	uxtb	r2, r2
 807e698:	701a      	strb	r2, [r3, #0]
 807e69a:	e00a      	b.n	807e6b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 807e69c:	68fb      	ldr	r3, [r7, #12]
 807e69e:	0f1b      	lsrs	r3, r3, #28
 807e6a0:	b2da      	uxtb	r2, r3
 807e6a2:	7dfb      	ldrb	r3, [r7, #23]
 807e6a4:	005b      	lsls	r3, r3, #1
 807e6a6:	4619      	mov	r1, r3
 807e6a8:	68bb      	ldr	r3, [r7, #8]
 807e6aa:	440b      	add	r3, r1
 807e6ac:	3237      	adds	r2, #55	; 0x37
 807e6ae:	b2d2      	uxtb	r2, r2
 807e6b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 807e6b2:	68fb      	ldr	r3, [r7, #12]
 807e6b4:	011b      	lsls	r3, r3, #4
 807e6b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 807e6b8:	7dfb      	ldrb	r3, [r7, #23]
 807e6ba:	005b      	lsls	r3, r3, #1
 807e6bc:	3301      	adds	r3, #1
 807e6be:	68ba      	ldr	r2, [r7, #8]
 807e6c0:	4413      	add	r3, r2
 807e6c2:	2200      	movs	r2, #0
 807e6c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 807e6c6:	7dfb      	ldrb	r3, [r7, #23]
 807e6c8:	3301      	adds	r3, #1
 807e6ca:	75fb      	strb	r3, [r7, #23]
 807e6cc:	7dfa      	ldrb	r2, [r7, #23]
 807e6ce:	79fb      	ldrb	r3, [r7, #7]
 807e6d0:	429a      	cmp	r2, r3
 807e6d2:	d3d3      	bcc.n	807e67c <IntToUnicode+0x18>
  }
}
 807e6d4:	bf00      	nop
 807e6d6:	bf00      	nop
 807e6d8:	371c      	adds	r7, #28
 807e6da:	46bd      	mov	sp, r7
 807e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e6e0:	4770      	bx	lr

0807e6e2 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 807e6e2:	b580      	push	{r7, lr}
 807e6e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
	HAL_FLASH_Unlock();
 807e6e6:	f7fa fa87 	bl	8078bf8 <HAL_FLASH_Unlock>
  return (USBD_OK);
 807e6ea:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 807e6ec:	4618      	mov	r0, r3
 807e6ee:	bd80      	pop	{r7, pc}

0807e6f0 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 807e6f0:	b580      	push	{r7, lr}
 807e6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_FLASH_Lock();
 807e6f4:	f7fa faa2 	bl	8078c3c <HAL_FLASH_Lock>
  return (USBD_OK);
 807e6f8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 807e6fa:	4618      	mov	r0, r3
 807e6fc:	bd80      	pop	{r7, pc}

0807e6fe <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 807e6fe:	b580      	push	{r7, lr}
 807e700:	b08a      	sub	sp, #40	; 0x28
 807e702:	af00      	add	r7, sp, #0
 807e704:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
	uint32_t startsector = 0, sectorerror = 0;
 807e706:	2300      	movs	r3, #0
 807e708:	627b      	str	r3, [r7, #36]	; 0x24
 807e70a:	2300      	movs	r3, #0
 807e70c:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef eraseinitstruct;

	startsector = GetSector(Add);
 807e70e:	6878      	ldr	r0, [r7, #4]
 807e710:	f000 f8aa 	bl	807e868 <GetSector>
 807e714:	6278      	str	r0, [r7, #36]	; 0x24
	  eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 807e716:	2300      	movs	r3, #0
 807e718:	60bb      	str	r3, [r7, #8]
	  eraseinitstruct.Banks = GetBank(Add);
 807e71a:	6878      	ldr	r0, [r7, #4]
 807e71c:	f000 f90e 	bl	807e93c <GetBank>
 807e720:	4603      	mov	r3, r0
 807e722:	60fb      	str	r3, [r7, #12]
	  eraseinitstruct.Sector = startsector;
 807e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807e726:	613b      	str	r3, [r7, #16]
	  eraseinitstruct.NbSectors = 1;
 807e728:	2301      	movs	r3, #1
 807e72a:	617b      	str	r3, [r7, #20]
	  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 807e72c:	2302      	movs	r3, #2
 807e72e:	61bb      	str	r3, [r7, #24]
	  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 807e730:	f107 021c 	add.w	r2, r7, #28
 807e734:	f107 0308 	add.w	r3, r7, #8
 807e738:	4611      	mov	r1, r2
 807e73a:	4618      	mov	r0, r3
 807e73c:	f7fa fbce 	bl	8078edc <HAL_FLASHEx_Erase>
 807e740:	4603      	mov	r3, r0
 807e742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  if (status != HAL_OK)
 807e746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 807e74a:	2b00      	cmp	r3, #0
 807e74c:	d001      	beq.n	807e752 <MEM_If_Erase_FS+0x54>
	    {
	      return 1;
 807e74e:	2301      	movs	r3, #1
 807e750:	e000      	b.n	807e754 <MEM_If_Erase_FS+0x56>
	    }
  return (USBD_OK);
 807e752:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 807e754:	4618      	mov	r0, r3
 807e756:	3728      	adds	r7, #40	; 0x28
 807e758:	46bd      	mov	sp, r7
 807e75a:	bd80      	pop	{r7, pc}

0807e75c <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 807e75c:	b5b0      	push	{r4, r5, r7, lr}
 807e75e:	b086      	sub	sp, #24
 807e760:	af00      	add	r7, sp, #0
 807e762:	60f8      	str	r0, [r7, #12]
 807e764:	60b9      	str	r1, [r7, #8]
 807e766:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
	uint32_t i = 0;
 807e768:	2300      	movs	r3, #0
 807e76a:	617b      	str	r3, [r7, #20]

	  for (i = 0; i < Len; i += 4)
 807e76c:	2300      	movs	r3, #0
 807e76e:	617b      	str	r3, [r7, #20]
 807e770:	e023      	b.n	807e7ba <MEM_If_Write_FS+0x5e>
	  {
	    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
	     * be done by byte */
	    if (HAL_FLASH_Program
	        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (dest + i),
 807e772:	68ba      	ldr	r2, [r7, #8]
 807e774:	697b      	ldr	r3, [r7, #20]
 807e776:	4413      	add	r3, r2
	    if (HAL_FLASH_Program
 807e778:	4619      	mov	r1, r3
	         *(uint32_t *) (src + i)) == HAL_OK)
 807e77a:	68fa      	ldr	r2, [r7, #12]
 807e77c:	697b      	ldr	r3, [r7, #20]
 807e77e:	4413      	add	r3, r2
 807e780:	681b      	ldr	r3, [r3, #0]
	    if (HAL_FLASH_Program
 807e782:	2200      	movs	r2, #0
 807e784:	461c      	mov	r4, r3
 807e786:	4615      	mov	r5, r2
 807e788:	4622      	mov	r2, r4
 807e78a:	462b      	mov	r3, r5
 807e78c:	2002      	movs	r0, #2
 807e78e:	f7fa f9df 	bl	8078b50 <HAL_FLASH_Program>
 807e792:	4603      	mov	r3, r0
 807e794:	2b00      	cmp	r3, #0
 807e796:	d10b      	bne.n	807e7b0 <MEM_If_Write_FS+0x54>
	    {
	      /* Check the written value */
	      if (*(uint32_t *) (src + i) != *(uint32_t *) (dest + i))
 807e798:	68fa      	ldr	r2, [r7, #12]
 807e79a:	697b      	ldr	r3, [r7, #20]
 807e79c:	4413      	add	r3, r2
 807e79e:	681a      	ldr	r2, [r3, #0]
 807e7a0:	68b9      	ldr	r1, [r7, #8]
 807e7a2:	697b      	ldr	r3, [r7, #20]
 807e7a4:	440b      	add	r3, r1
 807e7a6:	681b      	ldr	r3, [r3, #0]
 807e7a8:	429a      	cmp	r2, r3
 807e7aa:	d003      	beq.n	807e7b4 <MEM_If_Write_FS+0x58>
	      {
	        /* Flash content doesn't match SRAM content */
	        return 2;
 807e7ac:	2302      	movs	r3, #2
 807e7ae:	e009      	b.n	807e7c4 <MEM_If_Write_FS+0x68>
	      }
	    }
	    else
	    {
	      /* Error occurred while writing data in Flash memory */
	      return 1;
 807e7b0:	2301      	movs	r3, #1
 807e7b2:	e007      	b.n	807e7c4 <MEM_If_Write_FS+0x68>
	  for (i = 0; i < Len; i += 4)
 807e7b4:	697b      	ldr	r3, [r7, #20]
 807e7b6:	3304      	adds	r3, #4
 807e7b8:	617b      	str	r3, [r7, #20]
 807e7ba:	697a      	ldr	r2, [r7, #20]
 807e7bc:	687b      	ldr	r3, [r7, #4]
 807e7be:	429a      	cmp	r2, r3
 807e7c0:	d3d7      	bcc.n	807e772 <MEM_If_Write_FS+0x16>
	    }
	  }
  return (USBD_OK);
 807e7c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 807e7c4:	4618      	mov	r0, r3
 807e7c6:	3718      	adds	r7, #24
 807e7c8:	46bd      	mov	sp, r7
 807e7ca:	bdb0      	pop	{r4, r5, r7, pc}

0807e7cc <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 807e7cc:	b480      	push	{r7}
 807e7ce:	b087      	sub	sp, #28
 807e7d0:	af00      	add	r7, sp, #0
 807e7d2:	60f8      	str	r0, [r7, #12]
 807e7d4:	60b9      	str	r1, [r7, #8]
 807e7d6:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
	uint32_t i = 0;
 807e7d8:	2300      	movs	r3, #0
 807e7da:	617b      	str	r3, [r7, #20]
	  uint8_t *psrc = src;
 807e7dc:	68fb      	ldr	r3, [r7, #12]
 807e7de:	613b      	str	r3, [r7, #16]

	  for (i = 0; i < Len; i++)
 807e7e0:	2300      	movs	r3, #0
 807e7e2:	617b      	str	r3, [r7, #20]
 807e7e4:	e00a      	b.n	807e7fc <MEM_If_Read_FS+0x30>
	  {
	    dest[i] = *psrc++;
 807e7e6:	693b      	ldr	r3, [r7, #16]
 807e7e8:	1c5a      	adds	r2, r3, #1
 807e7ea:	613a      	str	r2, [r7, #16]
 807e7ec:	68b9      	ldr	r1, [r7, #8]
 807e7ee:	697a      	ldr	r2, [r7, #20]
 807e7f0:	440a      	add	r2, r1
 807e7f2:	781b      	ldrb	r3, [r3, #0]
 807e7f4:	7013      	strb	r3, [r2, #0]
	  for (i = 0; i < Len; i++)
 807e7f6:	697b      	ldr	r3, [r7, #20]
 807e7f8:	3301      	adds	r3, #1
 807e7fa:	617b      	str	r3, [r7, #20]
 807e7fc:	697a      	ldr	r2, [r7, #20]
 807e7fe:	687b      	ldr	r3, [r7, #4]
 807e800:	429a      	cmp	r2, r3
 807e802:	d3f0      	bcc.n	807e7e6 <MEM_If_Read_FS+0x1a>
	  }
	  /* Return a valid address to avoid HardFault */
	  return (uint8_t *) (dest);
 807e804:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END 4 */
}
 807e806:	4618      	mov	r0, r3
 807e808:	371c      	adds	r7, #28
 807e80a:	46bd      	mov	sp, r7
 807e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e810:	4770      	bx	lr

0807e812 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 807e812:	b480      	push	{r7}
 807e814:	b085      	sub	sp, #20
 807e816:	af00      	add	r7, sp, #0
 807e818:	60f8      	str	r0, [r7, #12]
 807e81a:	460b      	mov	r3, r1
 807e81c:	607a      	str	r2, [r7, #4]
 807e81e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
	switch (Cmd)
 807e820:	7afb      	ldrb	r3, [r7, #11]
 807e822:	2b01      	cmp	r3, #1
 807e824:	d10c      	bne.n	807e840 <MEM_If_GetStatus_FS+0x2e>
	  {
	  case DFU_MEDIA_PROGRAM:
	    buffer[1] = (uint8_t) FLASH_PROGRAM_TIME;
 807e826:	687b      	ldr	r3, [r7, #4]
 807e828:	3301      	adds	r3, #1
 807e82a:	2232      	movs	r2, #50	; 0x32
 807e82c:	701a      	strb	r2, [r3, #0]
	    buffer[2] = (uint8_t) (FLASH_PROGRAM_TIME << 8);
 807e82e:	687b      	ldr	r3, [r7, #4]
 807e830:	3302      	adds	r3, #2
 807e832:	2200      	movs	r2, #0
 807e834:	701a      	strb	r2, [r3, #0]
	    buffer[3] = 0;
 807e836:	687b      	ldr	r3, [r7, #4]
 807e838:	3303      	adds	r3, #3
 807e83a:	2200      	movs	r2, #0
 807e83c:	701a      	strb	r2, [r3, #0]
	    break;
 807e83e:	e00c      	b.n	807e85a <MEM_If_GetStatus_FS+0x48>

	  case DFU_MEDIA_ERASE:
	  default:
	    buffer[1] = (uint8_t) FLASH_ERASE_TIME;
 807e840:	687b      	ldr	r3, [r7, #4]
 807e842:	3301      	adds	r3, #1
 807e844:	2232      	movs	r2, #50	; 0x32
 807e846:	701a      	strb	r2, [r3, #0]
	    buffer[2] = (uint8_t) (FLASH_ERASE_TIME << 8);
 807e848:	687b      	ldr	r3, [r7, #4]
 807e84a:	3302      	adds	r3, #2
 807e84c:	2200      	movs	r2, #0
 807e84e:	701a      	strb	r2, [r3, #0]
	    buffer[3] = 0;
 807e850:	687b      	ldr	r3, [r7, #4]
 807e852:	3303      	adds	r3, #3
 807e854:	2200      	movs	r2, #0
 807e856:	701a      	strb	r2, [r3, #0]
	    break;
 807e858:	bf00      	nop
	  }
  return (USBD_OK);
 807e85a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 807e85c:	4618      	mov	r0, r3
 807e85e:	3714      	adds	r7, #20
 807e860:	46bd      	mov	sp, r7
 807e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e866:	4770      	bx	lr

0807e868 <GetSector>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static uint32_t GetSector(uint32_t Address)
{
 807e868:	b480      	push	{r7}
 807e86a:	b085      	sub	sp, #20
 807e86c:	af00      	add	r7, sp, #0
 807e86e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 807e870:	2300      	movs	r3, #0
 807e872:	60fb      	str	r3, [r7, #12]

  if ((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 807e874:	687b      	ldr	r3, [r7, #4]
 807e876:	4a2a      	ldr	r2, [pc, #168]	; (807e920 <GetSector+0xb8>)
 807e878:	4293      	cmp	r3, r2
 807e87a:	d206      	bcs.n	807e88a <GetSector+0x22>
 807e87c:	687b      	ldr	r3, [r7, #4]
 807e87e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 807e882:	d302      	bcc.n	807e88a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 807e884:	2300      	movs	r3, #0
 807e886:	60fb      	str	r3, [r7, #12]
 807e888:	e043      	b.n	807e912 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 807e88a:	687b      	ldr	r3, [r7, #4]
 807e88c:	4a25      	ldr	r2, [pc, #148]	; (807e924 <GetSector+0xbc>)
 807e88e:	4293      	cmp	r3, r2
 807e890:	d206      	bcs.n	807e8a0 <GetSector+0x38>
 807e892:	687b      	ldr	r3, [r7, #4]
 807e894:	4a22      	ldr	r2, [pc, #136]	; (807e920 <GetSector+0xb8>)
 807e896:	4293      	cmp	r3, r2
 807e898:	d302      	bcc.n	807e8a0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 807e89a:	2301      	movs	r3, #1
 807e89c:	60fb      	str	r3, [r7, #12]
 807e89e:	e038      	b.n	807e912 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 807e8a0:	687b      	ldr	r3, [r7, #4]
 807e8a2:	4a21      	ldr	r2, [pc, #132]	; (807e928 <GetSector+0xc0>)
 807e8a4:	4293      	cmp	r3, r2
 807e8a6:	d206      	bcs.n	807e8b6 <GetSector+0x4e>
 807e8a8:	687b      	ldr	r3, [r7, #4]
 807e8aa:	4a1e      	ldr	r2, [pc, #120]	; (807e924 <GetSector+0xbc>)
 807e8ac:	4293      	cmp	r3, r2
 807e8ae:	d302      	bcc.n	807e8b6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 807e8b0:	2302      	movs	r3, #2
 807e8b2:	60fb      	str	r3, [r7, #12]
 807e8b4:	e02d      	b.n	807e912 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 807e8b6:	687b      	ldr	r3, [r7, #4]
 807e8b8:	4a1c      	ldr	r2, [pc, #112]	; (807e92c <GetSector+0xc4>)
 807e8ba:	4293      	cmp	r3, r2
 807e8bc:	d806      	bhi.n	807e8cc <GetSector+0x64>
 807e8be:	687b      	ldr	r3, [r7, #4]
 807e8c0:	4a19      	ldr	r2, [pc, #100]	; (807e928 <GetSector+0xc0>)
 807e8c2:	4293      	cmp	r3, r2
 807e8c4:	d302      	bcc.n	807e8cc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 807e8c6:	2303      	movs	r3, #3
 807e8c8:	60fb      	str	r3, [r7, #12]
 807e8ca:	e022      	b.n	807e912 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 807e8cc:	687b      	ldr	r3, [r7, #4]
 807e8ce:	4a18      	ldr	r2, [pc, #96]	; (807e930 <GetSector+0xc8>)
 807e8d0:	4293      	cmp	r3, r2
 807e8d2:	d806      	bhi.n	807e8e2 <GetSector+0x7a>
 807e8d4:	687b      	ldr	r3, [r7, #4]
 807e8d6:	4a15      	ldr	r2, [pc, #84]	; (807e92c <GetSector+0xc4>)
 807e8d8:	4293      	cmp	r3, r2
 807e8da:	d902      	bls.n	807e8e2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 807e8dc:	2304      	movs	r3, #4
 807e8de:	60fb      	str	r3, [r7, #12]
 807e8e0:	e017      	b.n	807e912 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 807e8e2:	687b      	ldr	r3, [r7, #4]
 807e8e4:	4a13      	ldr	r2, [pc, #76]	; (807e934 <GetSector+0xcc>)
 807e8e6:	4293      	cmp	r3, r2
 807e8e8:	d806      	bhi.n	807e8f8 <GetSector+0x90>
 807e8ea:	687b      	ldr	r3, [r7, #4]
 807e8ec:	4a10      	ldr	r2, [pc, #64]	; (807e930 <GetSector+0xc8>)
 807e8ee:	4293      	cmp	r3, r2
 807e8f0:	d902      	bls.n	807e8f8 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 807e8f2:	2305      	movs	r3, #5
 807e8f4:	60fb      	str	r3, [r7, #12]
 807e8f6:	e00c      	b.n	807e912 <GetSector+0xaa>
  }
  else if ((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 807e8f8:	687b      	ldr	r3, [r7, #4]
 807e8fa:	4a0f      	ldr	r2, [pc, #60]	; (807e938 <GetSector+0xd0>)
 807e8fc:	4293      	cmp	r3, r2
 807e8fe:	d806      	bhi.n	807e90e <GetSector+0xa6>
 807e900:	687b      	ldr	r3, [r7, #4]
 807e902:	4a0c      	ldr	r2, [pc, #48]	; (807e934 <GetSector+0xcc>)
 807e904:	4293      	cmp	r3, r2
 807e906:	d902      	bls.n	807e90e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 807e908:	2306      	movs	r3, #6
 807e90a:	60fb      	str	r3, [r7, #12]
 807e90c:	e001      	b.n	807e912 <GetSector+0xaa>
  }
  else
  {
    sector = FLASH_SECTOR_7;
 807e90e:	2307      	movs	r3, #7
 807e910:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 807e912:	68fb      	ldr	r3, [r7, #12]
}
 807e914:	4618      	mov	r0, r3
 807e916:	3714      	adds	r7, #20
 807e918:	46bd      	mov	sp, r7
 807e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e91e:	4770      	bx	lr
 807e920:	08004000 	.word	0x08004000
 807e924:	08008000 	.word	0x08008000
 807e928:	0800c000 	.word	0x0800c000
 807e92c:	0800ffff 	.word	0x0800ffff
 807e930:	0801ffff 	.word	0x0801ffff
 807e934:	0803ffff 	.word	0x0803ffff
 807e938:	0805ffff 	.word	0x0805ffff

0807e93c <GetBank>:

static uint32_t GetBank(uint32_t Addr)
{
 807e93c:	b480      	push	{r7}
 807e93e:	b085      	sub	sp, #20
 807e940:	af00      	add	r7, sp, #0
 807e942:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0;
 807e944:	2300      	movs	r3, #0
 807e946:	60fb      	str	r3, [r7, #12]

  /* Sector in bank 1 */
  bank = FLASH_BANK_1;
 807e948:	2301      	movs	r3, #1
 807e94a:	60fb      	str	r3, [r7, #12]
  return bank;
 807e94c:	68fb      	ldr	r3, [r7, #12]
}
 807e94e:	4618      	mov	r0, r3
 807e950:	3714      	adds	r7, #20
 807e952:	46bd      	mov	sp, r7
 807e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 807e958:	4770      	bx	lr
	...

0807e95c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 807e95c:	b580      	push	{r7, lr}
 807e95e:	b08a      	sub	sp, #40	; 0x28
 807e960:	af00      	add	r7, sp, #0
 807e962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 807e964:	f107 0314 	add.w	r3, r7, #20
 807e968:	2200      	movs	r2, #0
 807e96a:	601a      	str	r2, [r3, #0]
 807e96c:	605a      	str	r2, [r3, #4]
 807e96e:	609a      	str	r2, [r3, #8]
 807e970:	60da      	str	r2, [r3, #12]
 807e972:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 807e974:	687b      	ldr	r3, [r7, #4]
 807e976:	681b      	ldr	r3, [r3, #0]
 807e978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 807e97c:	d13a      	bne.n	807e9f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 807e97e:	2300      	movs	r3, #0
 807e980:	613b      	str	r3, [r7, #16]
 807e982:	4b1e      	ldr	r3, [pc, #120]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807e986:	4a1d      	ldr	r2, [pc, #116]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e988:	f043 0301 	orr.w	r3, r3, #1
 807e98c:	6313      	str	r3, [r2, #48]	; 0x30
 807e98e:	4b1b      	ldr	r3, [pc, #108]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807e992:	f003 0301 	and.w	r3, r3, #1
 807e996:	613b      	str	r3, [r7, #16]
 807e998:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 807e99a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 807e99e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807e9a0:	2302      	movs	r3, #2
 807e9a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 807e9a4:	2300      	movs	r3, #0
 807e9a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 807e9a8:	2303      	movs	r3, #3
 807e9aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 807e9ac:	230a      	movs	r3, #10
 807e9ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 807e9b0:	f107 0314 	add.w	r3, r7, #20
 807e9b4:	4619      	mov	r1, r3
 807e9b6:	4812      	ldr	r0, [pc, #72]	; (807ea00 <HAL_PCD_MspInit+0xa4>)
 807e9b8:	f7fa fbb2 	bl	8079120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 807e9bc:	4b0f      	ldr	r3, [pc, #60]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 807e9c0:	4a0e      	ldr	r2, [pc, #56]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807e9c6:	6353      	str	r3, [r2, #52]	; 0x34
 807e9c8:	2300      	movs	r3, #0
 807e9ca:	60fb      	str	r3, [r7, #12]
 807e9cc:	4b0b      	ldr	r3, [pc, #44]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e9ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 807e9d0:	4a0a      	ldr	r2, [pc, #40]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e9d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 807e9d6:	6453      	str	r3, [r2, #68]	; 0x44
 807e9d8:	4b08      	ldr	r3, [pc, #32]	; (807e9fc <HAL_PCD_MspInit+0xa0>)
 807e9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 807e9dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 807e9e0:	60fb      	str	r3, [r7, #12]
 807e9e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 807e9e4:	2200      	movs	r2, #0
 807e9e6:	2100      	movs	r1, #0
 807e9e8:	2043      	movs	r0, #67	; 0x43
 807e9ea:	f7fa f87a 	bl	8078ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 807e9ee:	2043      	movs	r0, #67	; 0x43
 807e9f0:	f7fa f893 	bl	8078b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 807e9f4:	bf00      	nop
 807e9f6:	3728      	adds	r7, #40	; 0x28
 807e9f8:	46bd      	mov	sp, r7
 807e9fa:	bd80      	pop	{r7, pc}
 807e9fc:	40023800 	.word	0x40023800
 807ea00:	40020000 	.word	0x40020000

0807ea04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea04:	b580      	push	{r7, lr}
 807ea06:	b082      	sub	sp, #8
 807ea08:	af00      	add	r7, sp, #0
 807ea0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 807ea0c:	687b      	ldr	r3, [r7, #4]
 807ea0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 807ea12:	687b      	ldr	r3, [r7, #4]
 807ea14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 807ea18:	4619      	mov	r1, r3
 807ea1a:	4610      	mov	r0, r2
 807ea1c:	f7fe fc43 	bl	807d2a6 <USBD_LL_SetupStage>
}
 807ea20:	bf00      	nop
 807ea22:	3708      	adds	r7, #8
 807ea24:	46bd      	mov	sp, r7
 807ea26:	bd80      	pop	{r7, pc}

0807ea28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea28:	b580      	push	{r7, lr}
 807ea2a:	b082      	sub	sp, #8
 807ea2c:	af00      	add	r7, sp, #0
 807ea2e:	6078      	str	r0, [r7, #4]
 807ea30:	460b      	mov	r3, r1
 807ea32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 807ea34:	687b      	ldr	r3, [r7, #4]
 807ea36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 807ea3a:	78fa      	ldrb	r2, [r7, #3]
 807ea3c:	6879      	ldr	r1, [r7, #4]
 807ea3e:	4613      	mov	r3, r2
 807ea40:	00db      	lsls	r3, r3, #3
 807ea42:	1a9b      	subs	r3, r3, r2
 807ea44:	009b      	lsls	r3, r3, #2
 807ea46:	440b      	add	r3, r1
 807ea48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 807ea4c:	681a      	ldr	r2, [r3, #0]
 807ea4e:	78fb      	ldrb	r3, [r7, #3]
 807ea50:	4619      	mov	r1, r3
 807ea52:	f7fe fc7d 	bl	807d350 <USBD_LL_DataOutStage>
}
 807ea56:	bf00      	nop
 807ea58:	3708      	adds	r7, #8
 807ea5a:	46bd      	mov	sp, r7
 807ea5c:	bd80      	pop	{r7, pc}

0807ea5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea5e:	b580      	push	{r7, lr}
 807ea60:	b082      	sub	sp, #8
 807ea62:	af00      	add	r7, sp, #0
 807ea64:	6078      	str	r0, [r7, #4]
 807ea66:	460b      	mov	r3, r1
 807ea68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 807ea6a:	687b      	ldr	r3, [r7, #4]
 807ea6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 807ea70:	78fa      	ldrb	r2, [r7, #3]
 807ea72:	6879      	ldr	r1, [r7, #4]
 807ea74:	4613      	mov	r3, r2
 807ea76:	00db      	lsls	r3, r3, #3
 807ea78:	1a9b      	subs	r3, r3, r2
 807ea7a:	009b      	lsls	r3, r3, #2
 807ea7c:	440b      	add	r3, r1
 807ea7e:	3348      	adds	r3, #72	; 0x48
 807ea80:	681a      	ldr	r2, [r3, #0]
 807ea82:	78fb      	ldrb	r3, [r7, #3]
 807ea84:	4619      	mov	r1, r3
 807ea86:	f7fe fcc6 	bl	807d416 <USBD_LL_DataInStage>
}
 807ea8a:	bf00      	nop
 807ea8c:	3708      	adds	r7, #8
 807ea8e:	46bd      	mov	sp, r7
 807ea90:	bd80      	pop	{r7, pc}

0807ea92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ea92:	b580      	push	{r7, lr}
 807ea94:	b082      	sub	sp, #8
 807ea96:	af00      	add	r7, sp, #0
 807ea98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 807ea9a:	687b      	ldr	r3, [r7, #4]
 807ea9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eaa0:	4618      	mov	r0, r3
 807eaa2:	f7fe fdda 	bl	807d65a <USBD_LL_SOF>
}
 807eaa6:	bf00      	nop
 807eaa8:	3708      	adds	r7, #8
 807eaaa:	46bd      	mov	sp, r7
 807eaac:	bd80      	pop	{r7, pc}

0807eaae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eaae:	b580      	push	{r7, lr}
 807eab0:	b084      	sub	sp, #16
 807eab2:	af00      	add	r7, sp, #0
 807eab4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 807eab6:	2301      	movs	r3, #1
 807eab8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 807eaba:	687b      	ldr	r3, [r7, #4]
 807eabc:	68db      	ldr	r3, [r3, #12]
 807eabe:	2b02      	cmp	r3, #2
 807eac0:	d001      	beq.n	807eac6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 807eac2:	f7f9 fdf9 	bl	80786b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 807eac6:	687b      	ldr	r3, [r7, #4]
 807eac8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eacc:	7bfa      	ldrb	r2, [r7, #15]
 807eace:	4611      	mov	r1, r2
 807ead0:	4618      	mov	r0, r3
 807ead2:	f7fe fd84 	bl	807d5de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 807ead6:	687b      	ldr	r3, [r7, #4]
 807ead8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eadc:	4618      	mov	r0, r3
 807eade:	f7fe fd30 	bl	807d542 <USBD_LL_Reset>
}
 807eae2:	bf00      	nop
 807eae4:	3710      	adds	r7, #16
 807eae6:	46bd      	mov	sp, r7
 807eae8:	bd80      	pop	{r7, pc}
	...

0807eaec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eaec:	b580      	push	{r7, lr}
 807eaee:	b082      	sub	sp, #8
 807eaf0:	af00      	add	r7, sp, #0
 807eaf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 807eaf4:	687b      	ldr	r3, [r7, #4]
 807eaf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eafa:	4618      	mov	r0, r3
 807eafc:	f7fe fd7f 	bl	807d5fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 807eb00:	687b      	ldr	r3, [r7, #4]
 807eb02:	681b      	ldr	r3, [r3, #0]
 807eb04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 807eb08:	681b      	ldr	r3, [r3, #0]
 807eb0a:	687a      	ldr	r2, [r7, #4]
 807eb0c:	6812      	ldr	r2, [r2, #0]
 807eb0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 807eb12:	f043 0301 	orr.w	r3, r3, #1
 807eb16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 807eb18:	687b      	ldr	r3, [r7, #4]
 807eb1a:	6a1b      	ldr	r3, [r3, #32]
 807eb1c:	2b00      	cmp	r3, #0
 807eb1e:	d005      	beq.n	807eb2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 807eb20:	4b04      	ldr	r3, [pc, #16]	; (807eb34 <HAL_PCD_SuspendCallback+0x48>)
 807eb22:	691b      	ldr	r3, [r3, #16]
 807eb24:	4a03      	ldr	r2, [pc, #12]	; (807eb34 <HAL_PCD_SuspendCallback+0x48>)
 807eb26:	f043 0306 	orr.w	r3, r3, #6
 807eb2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 807eb2c:	bf00      	nop
 807eb2e:	3708      	adds	r7, #8
 807eb30:	46bd      	mov	sp, r7
 807eb32:	bd80      	pop	{r7, pc}
 807eb34:	e000ed00 	.word	0xe000ed00

0807eb38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb38:	b580      	push	{r7, lr}
 807eb3a:	b082      	sub	sp, #8
 807eb3c:	af00      	add	r7, sp, #0
 807eb3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 807eb40:	687b      	ldr	r3, [r7, #4]
 807eb42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb46:	4618      	mov	r0, r3
 807eb48:	f7fe fd6f 	bl	807d62a <USBD_LL_Resume>
}
 807eb4c:	bf00      	nop
 807eb4e:	3708      	adds	r7, #8
 807eb50:	46bd      	mov	sp, r7
 807eb52:	bd80      	pop	{r7, pc}

0807eb54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb54:	b580      	push	{r7, lr}
 807eb56:	b082      	sub	sp, #8
 807eb58:	af00      	add	r7, sp, #0
 807eb5a:	6078      	str	r0, [r7, #4]
 807eb5c:	460b      	mov	r3, r1
 807eb5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807eb60:	687b      	ldr	r3, [r7, #4]
 807eb62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb66:	78fa      	ldrb	r2, [r7, #3]
 807eb68:	4611      	mov	r1, r2
 807eb6a:	4618      	mov	r0, r3
 807eb6c:	f7fe fdbd 	bl	807d6ea <USBD_LL_IsoOUTIncomplete>
}
 807eb70:	bf00      	nop
 807eb72:	3708      	adds	r7, #8
 807eb74:	46bd      	mov	sp, r7
 807eb76:	bd80      	pop	{r7, pc}

0807eb78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb78:	b580      	push	{r7, lr}
 807eb7a:	b082      	sub	sp, #8
 807eb7c:	af00      	add	r7, sp, #0
 807eb7e:	6078      	str	r0, [r7, #4]
 807eb80:	460b      	mov	r3, r1
 807eb82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807eb84:	687b      	ldr	r3, [r7, #4]
 807eb86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807eb8a:	78fa      	ldrb	r2, [r7, #3]
 807eb8c:	4611      	mov	r1, r2
 807eb8e:	4618      	mov	r0, r3
 807eb90:	f7fe fd85 	bl	807d69e <USBD_LL_IsoINIncomplete>
}
 807eb94:	bf00      	nop
 807eb96:	3708      	adds	r7, #8
 807eb98:	46bd      	mov	sp, r7
 807eb9a:	bd80      	pop	{r7, pc}

0807eb9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807eb9c:	b580      	push	{r7, lr}
 807eb9e:	b082      	sub	sp, #8
 807eba0:	af00      	add	r7, sp, #0
 807eba2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 807eba4:	687b      	ldr	r3, [r7, #4]
 807eba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807ebaa:	4618      	mov	r0, r3
 807ebac:	f7fe fdc3 	bl	807d736 <USBD_LL_DevConnected>
}
 807ebb0:	bf00      	nop
 807ebb2:	3708      	adds	r7, #8
 807ebb4:	46bd      	mov	sp, r7
 807ebb6:	bd80      	pop	{r7, pc}

0807ebb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807ebb8:	b580      	push	{r7, lr}
 807ebba:	b082      	sub	sp, #8
 807ebbc:	af00      	add	r7, sp, #0
 807ebbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 807ebc0:	687b      	ldr	r3, [r7, #4]
 807ebc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807ebc6:	4618      	mov	r0, r3
 807ebc8:	f7fe fdc0 	bl	807d74c <USBD_LL_DevDisconnected>
}
 807ebcc:	bf00      	nop
 807ebce:	3708      	adds	r7, #8
 807ebd0:	46bd      	mov	sp, r7
 807ebd2:	bd80      	pop	{r7, pc}

0807ebd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 807ebd4:	b580      	push	{r7, lr}
 807ebd6:	b082      	sub	sp, #8
 807ebd8:	af00      	add	r7, sp, #0
 807ebda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 807ebdc:	687b      	ldr	r3, [r7, #4]
 807ebde:	781b      	ldrb	r3, [r3, #0]
 807ebe0:	2b00      	cmp	r3, #0
 807ebe2:	d13c      	bne.n	807ec5e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 807ebe4:	4a20      	ldr	r2, [pc, #128]	; (807ec68 <USBD_LL_Init+0x94>)
 807ebe6:	687b      	ldr	r3, [r7, #4]
 807ebe8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 807ebec:	687b      	ldr	r3, [r7, #4]
 807ebee:	4a1e      	ldr	r2, [pc, #120]	; (807ec68 <USBD_LL_Init+0x94>)
 807ebf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 807ebf4:	4b1c      	ldr	r3, [pc, #112]	; (807ec68 <USBD_LL_Init+0x94>)
 807ebf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 807ebfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 807ebfc:	4b1a      	ldr	r3, [pc, #104]	; (807ec68 <USBD_LL_Init+0x94>)
 807ebfe:	2204      	movs	r2, #4
 807ec00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 807ec02:	4b19      	ldr	r3, [pc, #100]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec04:	2202      	movs	r2, #2
 807ec06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 807ec08:	4b17      	ldr	r3, [pc, #92]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec0a:	2200      	movs	r2, #0
 807ec0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 807ec0e:	4b16      	ldr	r3, [pc, #88]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec10:	2202      	movs	r2, #2
 807ec12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 807ec14:	4b14      	ldr	r3, [pc, #80]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec16:	2200      	movs	r2, #0
 807ec18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 807ec1a:	4b13      	ldr	r3, [pc, #76]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec1c:	2200      	movs	r2, #0
 807ec1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 807ec20:	4b11      	ldr	r3, [pc, #68]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec22:	2200      	movs	r2, #0
 807ec24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 807ec26:	4b10      	ldr	r3, [pc, #64]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec28:	2200      	movs	r2, #0
 807ec2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 807ec2c:	4b0e      	ldr	r3, [pc, #56]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec2e:	2200      	movs	r2, #0
 807ec30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 807ec32:	480d      	ldr	r0, [pc, #52]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec34:	f7fa fc2b 	bl	807948e <HAL_PCD_Init>
 807ec38:	4603      	mov	r3, r0
 807ec3a:	2b00      	cmp	r3, #0
 807ec3c:	d001      	beq.n	807ec42 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 807ec3e:	f7f9 fd3b 	bl	80786b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 807ec42:	2180      	movs	r1, #128	; 0x80
 807ec44:	4808      	ldr	r0, [pc, #32]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec46:	f7fb fd60 	bl	807a70a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 807ec4a:	2240      	movs	r2, #64	; 0x40
 807ec4c:	2100      	movs	r1, #0
 807ec4e:	4806      	ldr	r0, [pc, #24]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec50:	f7fb fd14 	bl	807a67c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 807ec54:	2280      	movs	r2, #128	; 0x80
 807ec56:	2101      	movs	r1, #1
 807ec58:	4803      	ldr	r0, [pc, #12]	; (807ec68 <USBD_LL_Init+0x94>)
 807ec5a:	f7fb fd0f 	bl	807a67c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 807ec5e:	2300      	movs	r3, #0
}
 807ec60:	4618      	mov	r0, r3
 807ec62:	3708      	adds	r7, #8
 807ec64:	46bd      	mov	sp, r7
 807ec66:	bd80      	pop	{r7, pc}
 807ec68:	200006ec 	.word	0x200006ec

0807ec6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 807ec6c:	b580      	push	{r7, lr}
 807ec6e:	b084      	sub	sp, #16
 807ec70:	af00      	add	r7, sp, #0
 807ec72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ec74:	2300      	movs	r3, #0
 807ec76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ec78:	2300      	movs	r3, #0
 807ec7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 807ec7c:	687b      	ldr	r3, [r7, #4]
 807ec7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ec82:	4618      	mov	r0, r3
 807ec84:	f7fa fd20 	bl	80796c8 <HAL_PCD_Start>
 807ec88:	4603      	mov	r3, r0
 807ec8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ec8c:	7bfb      	ldrb	r3, [r7, #15]
 807ec8e:	4618      	mov	r0, r3
 807ec90:	f000 f92c 	bl	807eeec <USBD_Get_USB_Status>
 807ec94:	4603      	mov	r3, r0
 807ec96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ec98:	7bbb      	ldrb	r3, [r7, #14]
}
 807ec9a:	4618      	mov	r0, r3
 807ec9c:	3710      	adds	r7, #16
 807ec9e:	46bd      	mov	sp, r7
 807eca0:	bd80      	pop	{r7, pc}

0807eca2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 807eca2:	b580      	push	{r7, lr}
 807eca4:	b084      	sub	sp, #16
 807eca6:	af00      	add	r7, sp, #0
 807eca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ecaa:	2300      	movs	r3, #0
 807ecac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ecae:	2300      	movs	r3, #0
 807ecb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 807ecb2:	687b      	ldr	r3, [r7, #4]
 807ecb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ecb8:	4618      	mov	r0, r3
 807ecba:	f7fa fd38 	bl	807972e <HAL_PCD_Stop>
 807ecbe:	4603      	mov	r3, r0
 807ecc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ecc2:	7bfb      	ldrb	r3, [r7, #15]
 807ecc4:	4618      	mov	r0, r3
 807ecc6:	f000 f911 	bl	807eeec <USBD_Get_USB_Status>
 807ecca:	4603      	mov	r3, r0
 807eccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ecce:	7bbb      	ldrb	r3, [r7, #14]
}
 807ecd0:	4618      	mov	r0, r3
 807ecd2:	3710      	adds	r7, #16
 807ecd4:	46bd      	mov	sp, r7
 807ecd6:	bd80      	pop	{r7, pc}

0807ecd8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 807ecd8:	b580      	push	{r7, lr}
 807ecda:	b084      	sub	sp, #16
 807ecdc:	af00      	add	r7, sp, #0
 807ecde:	6078      	str	r0, [r7, #4]
 807ece0:	4608      	mov	r0, r1
 807ece2:	4611      	mov	r1, r2
 807ece4:	461a      	mov	r2, r3
 807ece6:	4603      	mov	r3, r0
 807ece8:	70fb      	strb	r3, [r7, #3]
 807ecea:	460b      	mov	r3, r1
 807ecec:	70bb      	strb	r3, [r7, #2]
 807ecee:	4613      	mov	r3, r2
 807ecf0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ecf2:	2300      	movs	r3, #0
 807ecf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ecf6:	2300      	movs	r3, #0
 807ecf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 807ecfa:	687b      	ldr	r3, [r7, #4]
 807ecfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807ed00:	78bb      	ldrb	r3, [r7, #2]
 807ed02:	883a      	ldrh	r2, [r7, #0]
 807ed04:	78f9      	ldrb	r1, [r7, #3]
 807ed06:	f7fb f922 	bl	8079f4e <HAL_PCD_EP_Open>
 807ed0a:	4603      	mov	r3, r0
 807ed0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ed0e:	7bfb      	ldrb	r3, [r7, #15]
 807ed10:	4618      	mov	r0, r3
 807ed12:	f000 f8eb 	bl	807eeec <USBD_Get_USB_Status>
 807ed16:	4603      	mov	r3, r0
 807ed18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed1a:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed1c:	4618      	mov	r0, r3
 807ed1e:	3710      	adds	r7, #16
 807ed20:	46bd      	mov	sp, r7
 807ed22:	bd80      	pop	{r7, pc}

0807ed24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807ed24:	b580      	push	{r7, lr}
 807ed26:	b084      	sub	sp, #16
 807ed28:	af00      	add	r7, sp, #0
 807ed2a:	6078      	str	r0, [r7, #4]
 807ed2c:	460b      	mov	r3, r1
 807ed2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ed30:	2300      	movs	r3, #0
 807ed32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ed34:	2300      	movs	r3, #0
 807ed36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 807ed38:	687b      	ldr	r3, [r7, #4]
 807ed3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ed3e:	78fa      	ldrb	r2, [r7, #3]
 807ed40:	4611      	mov	r1, r2
 807ed42:	4618      	mov	r0, r3
 807ed44:	f7fb fa00 	bl	807a148 <HAL_PCD_EP_SetStall>
 807ed48:	4603      	mov	r3, r0
 807ed4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ed4c:	7bfb      	ldrb	r3, [r7, #15]
 807ed4e:	4618      	mov	r0, r3
 807ed50:	f000 f8cc 	bl	807eeec <USBD_Get_USB_Status>
 807ed54:	4603      	mov	r3, r0
 807ed56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed58:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed5a:	4618      	mov	r0, r3
 807ed5c:	3710      	adds	r7, #16
 807ed5e:	46bd      	mov	sp, r7
 807ed60:	bd80      	pop	{r7, pc}

0807ed62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807ed62:	b580      	push	{r7, lr}
 807ed64:	b084      	sub	sp, #16
 807ed66:	af00      	add	r7, sp, #0
 807ed68:	6078      	str	r0, [r7, #4]
 807ed6a:	460b      	mov	r3, r1
 807ed6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ed6e:	2300      	movs	r3, #0
 807ed70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ed72:	2300      	movs	r3, #0
 807ed74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 807ed76:	687b      	ldr	r3, [r7, #4]
 807ed78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ed7c:	78fa      	ldrb	r2, [r7, #3]
 807ed7e:	4611      	mov	r1, r2
 807ed80:	4618      	mov	r0, r3
 807ed82:	f7fb fa45 	bl	807a210 <HAL_PCD_EP_ClrStall>
 807ed86:	4603      	mov	r3, r0
 807ed88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ed8a:	7bfb      	ldrb	r3, [r7, #15]
 807ed8c:	4618      	mov	r0, r3
 807ed8e:	f000 f8ad 	bl	807eeec <USBD_Get_USB_Status>
 807ed92:	4603      	mov	r3, r0
 807ed94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ed96:	7bbb      	ldrb	r3, [r7, #14]
}
 807ed98:	4618      	mov	r0, r3
 807ed9a:	3710      	adds	r7, #16
 807ed9c:	46bd      	mov	sp, r7
 807ed9e:	bd80      	pop	{r7, pc}

0807eda0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807eda0:	b480      	push	{r7}
 807eda2:	b085      	sub	sp, #20
 807eda4:	af00      	add	r7, sp, #0
 807eda6:	6078      	str	r0, [r7, #4]
 807eda8:	460b      	mov	r3, r1
 807edaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 807edac:	687b      	ldr	r3, [r7, #4]
 807edae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807edb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 807edb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807edb8:	2b00      	cmp	r3, #0
 807edba:	da0b      	bge.n	807edd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 807edbc:	78fb      	ldrb	r3, [r7, #3]
 807edbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807edc2:	68f9      	ldr	r1, [r7, #12]
 807edc4:	4613      	mov	r3, r2
 807edc6:	00db      	lsls	r3, r3, #3
 807edc8:	1a9b      	subs	r3, r3, r2
 807edca:	009b      	lsls	r3, r3, #2
 807edcc:	440b      	add	r3, r1
 807edce:	333e      	adds	r3, #62	; 0x3e
 807edd0:	781b      	ldrb	r3, [r3, #0]
 807edd2:	e00b      	b.n	807edec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 807edd4:	78fb      	ldrb	r3, [r7, #3]
 807edd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807edda:	68f9      	ldr	r1, [r7, #12]
 807eddc:	4613      	mov	r3, r2
 807edde:	00db      	lsls	r3, r3, #3
 807ede0:	1a9b      	subs	r3, r3, r2
 807ede2:	009b      	lsls	r3, r3, #2
 807ede4:	440b      	add	r3, r1
 807ede6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 807edea:	781b      	ldrb	r3, [r3, #0]
  }
}
 807edec:	4618      	mov	r0, r3
 807edee:	3714      	adds	r7, #20
 807edf0:	46bd      	mov	sp, r7
 807edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 807edf6:	4770      	bx	lr

0807edf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 807edf8:	b580      	push	{r7, lr}
 807edfa:	b084      	sub	sp, #16
 807edfc:	af00      	add	r7, sp, #0
 807edfe:	6078      	str	r0, [r7, #4]
 807ee00:	460b      	mov	r3, r1
 807ee02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ee04:	2300      	movs	r3, #0
 807ee06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ee08:	2300      	movs	r3, #0
 807ee0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 807ee0c:	687b      	ldr	r3, [r7, #4]
 807ee0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807ee12:	78fa      	ldrb	r2, [r7, #3]
 807ee14:	4611      	mov	r1, r2
 807ee16:	4618      	mov	r0, r3
 807ee18:	f7fb f874 	bl	8079f04 <HAL_PCD_SetAddress>
 807ee1c:	4603      	mov	r3, r0
 807ee1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ee20:	7bfb      	ldrb	r3, [r7, #15]
 807ee22:	4618      	mov	r0, r3
 807ee24:	f000 f862 	bl	807eeec <USBD_Get_USB_Status>
 807ee28:	4603      	mov	r3, r0
 807ee2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807ee2c:	7bbb      	ldrb	r3, [r7, #14]
}
 807ee2e:	4618      	mov	r0, r3
 807ee30:	3710      	adds	r7, #16
 807ee32:	46bd      	mov	sp, r7
 807ee34:	bd80      	pop	{r7, pc}

0807ee36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 807ee36:	b580      	push	{r7, lr}
 807ee38:	b086      	sub	sp, #24
 807ee3a:	af00      	add	r7, sp, #0
 807ee3c:	60f8      	str	r0, [r7, #12]
 807ee3e:	607a      	str	r2, [r7, #4]
 807ee40:	603b      	str	r3, [r7, #0]
 807ee42:	460b      	mov	r3, r1
 807ee44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ee46:	2300      	movs	r3, #0
 807ee48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ee4a:	2300      	movs	r3, #0
 807ee4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 807ee4e:	68fb      	ldr	r3, [r7, #12]
 807ee50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807ee54:	7af9      	ldrb	r1, [r7, #11]
 807ee56:	683b      	ldr	r3, [r7, #0]
 807ee58:	687a      	ldr	r2, [r7, #4]
 807ee5a:	f7fb f92b 	bl	807a0b4 <HAL_PCD_EP_Transmit>
 807ee5e:	4603      	mov	r3, r0
 807ee60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807ee62:	7dfb      	ldrb	r3, [r7, #23]
 807ee64:	4618      	mov	r0, r3
 807ee66:	f000 f841 	bl	807eeec <USBD_Get_USB_Status>
 807ee6a:	4603      	mov	r3, r0
 807ee6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 807ee6e:	7dbb      	ldrb	r3, [r7, #22]
}
 807ee70:	4618      	mov	r0, r3
 807ee72:	3718      	adds	r7, #24
 807ee74:	46bd      	mov	sp, r7
 807ee76:	bd80      	pop	{r7, pc}

0807ee78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 807ee78:	b580      	push	{r7, lr}
 807ee7a:	b086      	sub	sp, #24
 807ee7c:	af00      	add	r7, sp, #0
 807ee7e:	60f8      	str	r0, [r7, #12]
 807ee80:	607a      	str	r2, [r7, #4]
 807ee82:	603b      	str	r3, [r7, #0]
 807ee84:	460b      	mov	r3, r1
 807ee86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807ee88:	2300      	movs	r3, #0
 807ee8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807ee8c:	2300      	movs	r3, #0
 807ee8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 807ee90:	68fb      	ldr	r3, [r7, #12]
 807ee92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807ee96:	7af9      	ldrb	r1, [r7, #11]
 807ee98:	683b      	ldr	r3, [r7, #0]
 807ee9a:	687a      	ldr	r2, [r7, #4]
 807ee9c:	f7fb f8bf 	bl	807a01e <HAL_PCD_EP_Receive>
 807eea0:	4603      	mov	r3, r0
 807eea2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807eea4:	7dfb      	ldrb	r3, [r7, #23]
 807eea6:	4618      	mov	r0, r3
 807eea8:	f000 f820 	bl	807eeec <USBD_Get_USB_Status>
 807eeac:	4603      	mov	r3, r0
 807eeae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 807eeb0:	7dbb      	ldrb	r3, [r7, #22]
}
 807eeb2:	4618      	mov	r0, r3
 807eeb4:	3718      	adds	r7, #24
 807eeb6:	46bd      	mov	sp, r7
 807eeb8:	bd80      	pop	{r7, pc}
	...

0807eebc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 807eebc:	b480      	push	{r7}
 807eebe:	b083      	sub	sp, #12
 807eec0:	af00      	add	r7, sp, #0
 807eec2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 807eec4:	4b03      	ldr	r3, [pc, #12]	; (807eed4 <USBD_static_malloc+0x18>)
}
 807eec6:	4618      	mov	r0, r3
 807eec8:	370c      	adds	r7, #12
 807eeca:	46bd      	mov	sp, r7
 807eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 807eed0:	4770      	bx	lr
 807eed2:	bf00      	nop
 807eed4:	20000af4 	.word	0x20000af4

0807eed8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 807eed8:	b480      	push	{r7}
 807eeda:	b083      	sub	sp, #12
 807eedc:	af00      	add	r7, sp, #0
 807eede:	6078      	str	r0, [r7, #4]

}
 807eee0:	bf00      	nop
 807eee2:	370c      	adds	r7, #12
 807eee4:	46bd      	mov	sp, r7
 807eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 807eeea:	4770      	bx	lr

0807eeec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 807eeec:	b480      	push	{r7}
 807eeee:	b085      	sub	sp, #20
 807eef0:	af00      	add	r7, sp, #0
 807eef2:	4603      	mov	r3, r0
 807eef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807eef6:	2300      	movs	r3, #0
 807eef8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 807eefa:	79fb      	ldrb	r3, [r7, #7]
 807eefc:	2b03      	cmp	r3, #3
 807eefe:	d817      	bhi.n	807ef30 <USBD_Get_USB_Status+0x44>
 807ef00:	a201      	add	r2, pc, #4	; (adr r2, 807ef08 <USBD_Get_USB_Status+0x1c>)
 807ef02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807ef06:	bf00      	nop
 807ef08:	0807ef19 	.word	0x0807ef19
 807ef0c:	0807ef1f 	.word	0x0807ef1f
 807ef10:	0807ef25 	.word	0x0807ef25
 807ef14:	0807ef2b 	.word	0x0807ef2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 807ef18:	2300      	movs	r3, #0
 807ef1a:	73fb      	strb	r3, [r7, #15]
    break;
 807ef1c:	e00b      	b.n	807ef36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 807ef1e:	2303      	movs	r3, #3
 807ef20:	73fb      	strb	r3, [r7, #15]
    break;
 807ef22:	e008      	b.n	807ef36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 807ef24:	2301      	movs	r3, #1
 807ef26:	73fb      	strb	r3, [r7, #15]
    break;
 807ef28:	e005      	b.n	807ef36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 807ef2a:	2303      	movs	r3, #3
 807ef2c:	73fb      	strb	r3, [r7, #15]
    break;
 807ef2e:	e002      	b.n	807ef36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 807ef30:	2303      	movs	r3, #3
 807ef32:	73fb      	strb	r3, [r7, #15]
    break;
 807ef34:	bf00      	nop
  }
  return usb_status;
 807ef36:	7bfb      	ldrb	r3, [r7, #15]
}
 807ef38:	4618      	mov	r0, r3
 807ef3a:	3714      	adds	r7, #20
 807ef3c:	46bd      	mov	sp, r7
 807ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 807ef42:	4770      	bx	lr

0807ef44 <__libc_init_array>:
 807ef44:	b570      	push	{r4, r5, r6, lr}
 807ef46:	4d0d      	ldr	r5, [pc, #52]	; (807ef7c <__libc_init_array+0x38>)
 807ef48:	4c0d      	ldr	r4, [pc, #52]	; (807ef80 <__libc_init_array+0x3c>)
 807ef4a:	1b64      	subs	r4, r4, r5
 807ef4c:	10a4      	asrs	r4, r4, #2
 807ef4e:	2600      	movs	r6, #0
 807ef50:	42a6      	cmp	r6, r4
 807ef52:	d109      	bne.n	807ef68 <__libc_init_array+0x24>
 807ef54:	4d0b      	ldr	r5, [pc, #44]	; (807ef84 <__libc_init_array+0x40>)
 807ef56:	4c0c      	ldr	r4, [pc, #48]	; (807ef88 <__libc_init_array+0x44>)
 807ef58:	f000 f820 	bl	807ef9c <_init>
 807ef5c:	1b64      	subs	r4, r4, r5
 807ef5e:	10a4      	asrs	r4, r4, #2
 807ef60:	2600      	movs	r6, #0
 807ef62:	42a6      	cmp	r6, r4
 807ef64:	d105      	bne.n	807ef72 <__libc_init_array+0x2e>
 807ef66:	bd70      	pop	{r4, r5, r6, pc}
 807ef68:	f855 3b04 	ldr.w	r3, [r5], #4
 807ef6c:	4798      	blx	r3
 807ef6e:	3601      	adds	r6, #1
 807ef70:	e7ee      	b.n	807ef50 <__libc_init_array+0xc>
 807ef72:	f855 3b04 	ldr.w	r3, [r5], #4
 807ef76:	4798      	blx	r3
 807ef78:	3601      	adds	r6, #1
 807ef7a:	e7f2      	b.n	807ef62 <__libc_init_array+0x1e>
 807ef7c:	0807f060 	.word	0x0807f060
 807ef80:	0807f060 	.word	0x0807f060
 807ef84:	0807f060 	.word	0x0807f060
 807ef88:	0807f064 	.word	0x0807f064

0807ef8c <memset>:
 807ef8c:	4402      	add	r2, r0
 807ef8e:	4603      	mov	r3, r0
 807ef90:	4293      	cmp	r3, r2
 807ef92:	d100      	bne.n	807ef96 <memset+0xa>
 807ef94:	4770      	bx	lr
 807ef96:	f803 1b01 	strb.w	r1, [r3], #1
 807ef9a:	e7f9      	b.n	807ef90 <memset+0x4>

0807ef9c <_init>:
 807ef9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807ef9e:	bf00      	nop
 807efa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807efa2:	bc08      	pop	{r3}
 807efa4:	469e      	mov	lr, r3
 807efa6:	4770      	bx	lr

0807efa8 <_fini>:
 807efa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807efaa:	bf00      	nop
 807efac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807efae:	bc08      	pop	{r3}
 807efb0:	469e      	mov	lr, r3
 807efb2:	4770      	bx	lr
