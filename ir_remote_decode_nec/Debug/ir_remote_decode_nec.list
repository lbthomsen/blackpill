
ir_remote_decode_nec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003188  08003188  00004188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b8  080032b8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080032b8  080032b8  000042b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c0  080032c0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c0  080032c0  000042c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c4  080032c4  000042c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080032c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003330  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003330  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd1e  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc8  00000000  00000000  00014db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008df5  00000000  00000000  00016b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0001f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093a  00000000  00000000  00020578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ff9  00000000  00000000  00020eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107d7  00000000  00000000  00037eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f82a  00000000  00000000  00048682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7eac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027dc  00000000  00000000  000d7ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000da6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003170 	.word	0x08003170

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003170 	.word	0x08003170

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005ac:	b082      	sub	sp, #8
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2100      	movs	r1, #0
 80005b0:	9100      	str	r1, [sp, #0]
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <MX_GPIO_Init+0x34>)
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80005bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005be:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	9101      	str	r1, [sp, #4]
 80005c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ca:	f042 0201 	orr.w	r2, r2, #1
 80005ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	b002      	add	sp, #8
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <_write>:
    if (fd == 1 || fd == 2) {
 80005e4:	3801      	subs	r0, #1
 80005e6:	2801      	cmp	r0, #1
 80005e8:	d80a      	bhi.n	8000600 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80005ea:	b510      	push	{r4, lr}
 80005ec:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f2:	b292      	uxth	r2, r2
 80005f4:	4805      	ldr	r0, [pc, #20]	@ (800060c <_write+0x28>)
 80005f6:	f001 fde4 	bl	80021c2 <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80005fa:	b920      	cbnz	r0, 8000606 <_write+0x22>
            return len;
 80005fc:	4620      	mov	r0, r4
}
 80005fe:	bd10      	pop	{r4, pc}
    return -1;
 8000600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000604:	4770      	bx	lr
            return -1;
 8000606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800060a:	e7f8      	b.n	80005fe <_write+0x1a>
 800060c:	2000008c 	.word	0x2000008c

08000610 <HAL_TIM_IC_CaptureCallback>:
    if (htim->Instance == TIM1) {
 8000610:	6802      	ldr	r2, [r0, #0]
 8000612:	4b4a      	ldr	r3, [pc, #296]	@ (800073c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000614:	429a      	cmp	r2, r3
 8000616:	d000      	beq.n	800061a <HAL_TIM_IC_CaptureCallback+0xa>
 8000618:	4770      	bx	lr
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	b083      	sub	sp, #12
 800061e:	4604      	mov	r4, r0
        uint32_t c2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000620:	2104      	movs	r1, #4
 8000622:	f001 f810 	bl	8001646 <HAL_TIM_ReadCapturedValue>
 8000626:	4605      	mov	r5, r0
        uint32_t c1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - c2;
 8000628:	2100      	movs	r1, #0
 800062a:	4620      	mov	r0, r4
 800062c:	f001 f80b 	bl	8001646 <HAL_TIM_ReadCapturedValue>
 8000630:	1b44      	subs	r4, r0, r5
        DBG("Pulse %5lu %5lu", c1, c2);
 8000632:	462a      	mov	r2, r5
 8000634:	4621      	mov	r1, r4
 8000636:	4842      	ldr	r0, [pc, #264]	@ (8000740 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000638:	f001 fef2 	bl	8002420 <iprintf>
 800063c:	200a      	movs	r0, #10
 800063e:	f001 ff01 	bl	8002444 <putchar>
        if (state == IR_STATE_WAIT_MAKE) {
 8000642:	4b40      	ldr	r3, [pc, #256]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b9e3      	cbnz	r3, 8000682 <HAL_TIM_IC_CaptureCallback+0x72>
            if (c1 > 8000 && c1 < 10000) {
 8000648:	f5a4 54fa 	sub.w	r4, r4, #8000	@ 0x1f40
 800064c:	3c01      	subs	r4, #1
 800064e:	f240 73ce 	movw	r3, #1998	@ 0x7ce
 8000652:	429c      	cmp	r4, r3
 8000654:	d80e      	bhi.n	8000674 <HAL_TIM_IC_CaptureCallback+0x64>
                DBG("Got make");
 8000656:	483c      	ldr	r0, [pc, #240]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000658:	f001 fee2 	bl	8002420 <iprintf>
 800065c:	200a      	movs	r0, #10
 800065e:	f001 fef1 	bl	8002444 <putchar>
                state = IR_STATE_WAIT_BREAK;
 8000662:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
        if (state == IR_STATE_RECEIVE && bit == 0) { // We're done - let's process
 8000668:	4b36      	ldr	r3, [pc, #216]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0x134>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d053      	beq.n	8000718 <HAL_TIM_IC_CaptureCallback+0x108>
}
 8000670:	b003      	add	sp, #12
 8000672:	bd30      	pop	{r4, r5, pc}
                DBG("Rubbish while waiting for make");
 8000674:	4835      	ldr	r0, [pc, #212]	@ (800074c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000676:	f001 fed3 	bl	8002420 <iprintf>
 800067a:	200a      	movs	r0, #10
 800067c:	f001 fee2 	bl	8002444 <putchar>
 8000680:	e7f2      	b.n	8000668 <HAL_TIM_IC_CaptureCallback+0x58>
        } else if (state == IR_STATE_WAIT_BREAK) {
 8000682:	2b01      	cmp	r3, #1
 8000684:	d013      	beq.n	80006ae <HAL_TIM_IC_CaptureCallback+0x9e>
        } else if (state == IR_STATE_RECEIVE) {
 8000686:	2b02      	cmp	r3, #2
 8000688:	d13f      	bne.n	800070a <HAL_TIM_IC_CaptureCallback+0xfa>
            if (c2 > 1600 && c2 < 1800) {
 800068a:	f2a5 6341 	subw	r3, r5, #1601	@ 0x641
 800068e:	2bc6      	cmp	r3, #198	@ 0xc6
 8000690:	d82d      	bhi.n	80006ee <HAL_TIM_IC_CaptureCallback+0xde>
                *received_buffer = *received_buffer | ((uint32_t) 1 << (bit - 1));
 8000692:	482f      	ldr	r0, [pc, #188]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000694:	6803      	ldr	r3, [r0, #0]
 8000696:	4a2f      	ldr	r2, [pc, #188]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000698:	7811      	ldrb	r1, [r2, #0]
 800069a:	3901      	subs	r1, #1
 800069c:	2201      	movs	r2, #1
 800069e:	408a      	lsls	r2, r1
 80006a0:	4313      	orrs	r3, r2
 80006a2:	6003      	str	r3, [r0, #0]
            --bit;
 80006a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x144>)
 80006a6:	7813      	ldrb	r3, [r2, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	7013      	strb	r3, [r2, #0]
 80006ac:	e7dc      	b.n	8000668 <HAL_TIM_IC_CaptureCallback+0x58>
            if (c2 > 4000 && c2 < 5000) {
 80006ae:	f6a5 75a1 	subw	r5, r5, #4001	@ 0xfa1
 80006b2:	f240 33e6 	movw	r3, #998	@ 0x3e6
 80006b6:	429d      	cmp	r5, r3
 80006b8:	d80f      	bhi.n	80006da <HAL_TIM_IC_CaptureCallback+0xca>
                DBG("Got break");
 80006ba:	4827      	ldr	r0, [pc, #156]	@ (8000758 <HAL_TIM_IC_CaptureCallback+0x148>)
 80006bc:	f001 feb0 	bl	8002420 <iprintf>
 80006c0:	200a      	movs	r0, #10
 80006c2:	f001 febf 	bl	8002444 <putchar>
                state = IR_STATE_RECEIVE;
 80006c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0x134>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	701a      	strb	r2, [r3, #0]
                *received_buffer = 0x00000000;
 80006cc:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x140>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
                bit = 32;
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x144>)
 80006d4:	2220      	movs	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e7c6      	b.n	8000668 <HAL_TIM_IC_CaptureCallback+0x58>
                DBG("Was expecting a break - got rubbish");
 80006da:	4820      	ldr	r0, [pc, #128]	@ (800075c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80006dc:	f001 fea0 	bl	8002420 <iprintf>
 80006e0:	200a      	movs	r0, #10
 80006e2:	f001 feaf 	bl	8002444 <putchar>
                state = IR_STATE_WAIT_MAKE;
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e7bc      	b.n	8000668 <HAL_TIM_IC_CaptureCallback+0x58>
            } else if (c2 > 500 && c2 < 700) {
 80006ee:	f2a5 15f5 	subw	r5, r5, #501	@ 0x1f5
 80006f2:	2dc6      	cmp	r5, #198	@ 0xc6
 80006f4:	d9d6      	bls.n	80006a4 <HAL_TIM_IC_CaptureCallback+0x94>
                DBG("Rubbish data received");
 80006f6:	481a      	ldr	r0, [pc, #104]	@ (8000760 <HAL_TIM_IC_CaptureCallback+0x150>)
 80006f8:	f001 fe92 	bl	8002420 <iprintf>
 80006fc:	200a      	movs	r0, #10
 80006fe:	f001 fea1 	bl	8002444 <putchar>
                state = IR_STATE_WAIT_MAKE;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	e7cc      	b.n	80006a4 <HAL_TIM_IC_CaptureCallback+0x94>
            DBG("IR Uknown state");
 800070a:	4816      	ldr	r0, [pc, #88]	@ (8000764 <HAL_TIM_IC_CaptureCallback+0x154>)
 800070c:	f001 fe88 	bl	8002420 <iprintf>
 8000710:	200a      	movs	r0, #10
 8000712:	f001 fe97 	bl	8002444 <putchar>
 8000716:	e7a7      	b.n	8000668 <HAL_TIM_IC_CaptureCallback+0x58>
        if (state == IR_STATE_RECEIVE && bit == 0) { // We're done - let's process
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <HAL_TIM_IC_CaptureCallback+0x144>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1a7      	bne.n	8000670 <HAL_TIM_IC_CaptureCallback+0x60>
            DBG("Done receiving A0 = %02x A1 = %02x D0 = %02x D1 = %02x", received[0], received[1], received[2], received[3]);
 8000720:	490b      	ldr	r1, [pc, #44]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000722:	78cb      	ldrb	r3, [r1, #3]
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	788b      	ldrb	r3, [r1, #2]
 8000728:	784a      	ldrb	r2, [r1, #1]
 800072a:	7809      	ldrb	r1, [r1, #0]
 800072c:	480e      	ldr	r0, [pc, #56]	@ (8000768 <HAL_TIM_IC_CaptureCallback+0x158>)
 800072e:	f001 fe77 	bl	8002420 <iprintf>
 8000732:	200a      	movs	r0, #10
 8000734:	f001 fe86 	bl	8002444 <putchar>
}
 8000738:	e79a      	b.n	8000670 <HAL_TIM_IC_CaptureCallback+0x60>
 800073a:	bf00      	nop
 800073c:	40010000 	.word	0x40010000
 8000740:	08003188 	.word	0x08003188
 8000744:	20000089 	.word	0x20000089
 8000748:	08003198 	.word	0x08003198
 800074c:	080031a4 	.word	0x080031a4
 8000750:	20000084 	.word	0x20000084
 8000754:	20000088 	.word	0x20000088
 8000758:	080031c4 	.word	0x080031c4
 800075c:	080031d0 	.word	0x080031d0
 8000760:	080031f4 	.word	0x080031f4
 8000764:	0800320c 	.word	0x0800320c
 8000768:	0800321c 	.word	0x0800321c

0800076c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800076e:	e7fe      	b.n	800076e <Error_Handler+0x2>

08000770 <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 8000770:	b500      	push	{lr}
 8000772:	b091      	sub	sp, #68	@ 0x44
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000774:	2300      	movs	r3, #0
 8000776:	930c      	str	r3, [sp, #48]	@ 0x30
 8000778:	930d      	str	r3, [sp, #52]	@ 0x34
 800077a:	930e      	str	r3, [sp, #56]	@ 0x38
 800077c:	930f      	str	r3, [sp, #60]	@ 0x3c
    TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800077e:	9307      	str	r3, [sp, #28]
 8000780:	9308      	str	r3, [sp, #32]
 8000782:	9309      	str	r3, [sp, #36]	@ 0x24
 8000784:	930a      	str	r3, [sp, #40]	@ 0x28
 8000786:	930b      	str	r3, [sp, #44]	@ 0x2c
    TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000788:	9303      	str	r3, [sp, #12]
 800078a:	9304      	str	r3, [sp, #16]
 800078c:	9305      	str	r3, [sp, #20]
 800078e:	9306      	str	r3, [sp, #24]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	9302      	str	r3, [sp, #8]
    htim1.Instance = TIM1;
 8000794:	482b      	ldr	r0, [pc, #172]	@ (8000844 <MX_TIM1_Init+0xd4>)
 8000796:	4a2c      	ldr	r2, [pc, #176]	@ (8000848 <MX_TIM1_Init+0xd8>)
 8000798:	6002      	str	r2, [r0, #0]
    htim1.Init.Prescaler = 99;
 800079a:	2263      	movs	r2, #99	@ 0x63
 800079c:	6042      	str	r2, [r0, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	6083      	str	r3, [r0, #8]
    htim1.Init.Period = 65535;
 80007a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007a4:	60c2      	str	r2, [r0, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	6103      	str	r3, [r0, #16]
    htim1.Init.RepetitionCounter = 0;
 80007a8:	6143      	str	r3, [r0, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007ac:	f001 f874 	bl	8001898 <HAL_TIM_Base_Init>
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d139      	bne.n	8000828 <MX_TIM1_Init+0xb8>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007ba:	a90c      	add	r1, sp, #48	@ 0x30
 80007bc:	4821      	ldr	r0, [pc, #132]	@ (8000844 <MX_TIM1_Init+0xd4>)
 80007be:	f001 f96c 	bl	8001a9a <HAL_TIM_ConfigClockSource>
 80007c2:	2800      	cmp	r0, #0
 80007c4:	d132      	bne.n	800082c <MX_TIM1_Init+0xbc>
    if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80007c6:	481f      	ldr	r0, [pc, #124]	@ (8000844 <MX_TIM1_Init+0xd4>)
 80007c8:	f001 f892 	bl	80018f0 <HAL_TIM_IC_Init>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d12f      	bne.n	8000830 <MX_TIM1_Init+0xc0>
    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80007d0:	2304      	movs	r3, #4
 80007d2:	9307      	str	r3, [sp, #28]
    sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80007d4:	2350      	movs	r3, #80	@ 0x50
 80007d6:	9308      	str	r3, [sp, #32]
    sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007d8:	2300      	movs	r3, #0
 80007da:	9309      	str	r3, [sp, #36]	@ 0x24
    sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80007dc:	930a      	str	r3, [sp, #40]	@ 0x28
    sSlaveConfig.TriggerFilter = 0;
 80007de:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 80007e0:	a907      	add	r1, sp, #28
 80007e2:	4818      	ldr	r0, [pc, #96]	@ (8000844 <MX_TIM1_Init+0xd4>)
 80007e4:	f001 fa34 	bl	8001c50 <HAL_TIM_SlaveConfigSynchro>
 80007e8:	bb20      	cbnz	r0, 8000834 <MX_TIM1_Init+0xc4>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007ea:	2200      	movs	r2, #0
 80007ec:	9203      	str	r2, [sp, #12]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007ee:	2301      	movs	r3, #1
 80007f0:	9304      	str	r3, [sp, #16]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007f2:	9205      	str	r2, [sp, #20]
    sConfigIC.ICFilter = 0;
 80007f4:	9206      	str	r2, [sp, #24]
    if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80007f6:	a903      	add	r1, sp, #12
 80007f8:	4812      	ldr	r0, [pc, #72]	@ (8000844 <MX_TIM1_Init+0xd4>)
 80007fa:	f001 f8db 	bl	80019b4 <HAL_TIM_IC_ConfigChannel>
 80007fe:	b9d8      	cbnz	r0, 8000838 <MX_TIM1_Init+0xc8>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000800:	2302      	movs	r3, #2
 8000802:	9303      	str	r3, [sp, #12]
    sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000804:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8000806:	2204      	movs	r2, #4
 8000808:	a903      	add	r1, sp, #12
 800080a:	480e      	ldr	r0, [pc, #56]	@ (8000844 <MX_TIM1_Init+0xd4>)
 800080c:	f001 f8d2 	bl	80019b4 <HAL_TIM_IC_ConfigChannel>
 8000810:	b9a0      	cbnz	r0, 800083c <MX_TIM1_Init+0xcc>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	9301      	str	r3, [sp, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	9302      	str	r3, [sp, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000818:	a901      	add	r1, sp, #4
 800081a:	480a      	ldr	r0, [pc, #40]	@ (8000844 <MX_TIM1_Init+0xd4>)
 800081c:	f001 fb98 	bl	8001f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	b970      	cbnz	r0, 8000840 <MX_TIM1_Init+0xd0>
}
 8000822:	b011      	add	sp, #68	@ 0x44
 8000824:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000828:	f7ff ffa0 	bl	800076c <Error_Handler>
        Error_Handler();
 800082c:	f7ff ff9e 	bl	800076c <Error_Handler>
        Error_Handler();
 8000830:	f7ff ff9c 	bl	800076c <Error_Handler>
        Error_Handler();
 8000834:	f7ff ff9a 	bl	800076c <Error_Handler>
        Error_Handler();
 8000838:	f7ff ff98 	bl	800076c <Error_Handler>
        Error_Handler();
 800083c:	f7ff ff96 	bl	800076c <Error_Handler>
        Error_Handler();
 8000840:	f7ff ff94 	bl	800076c <Error_Handler>
 8000844:	200000d0 	.word	0x200000d0
 8000848:	40010000 	.word	0x40010000

0800084c <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 800084c:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <MX_USART1_UART_Init+0x2c>)
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <MX_USART1_UART_Init+0x30>)
 8000852:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000854:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000858:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	2300      	movs	r3, #0
 800085c:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800085e:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000860:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000862:	220c      	movs	r2, #12
 8000864:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 800086a:	f001 fc7b 	bl	8002164 <HAL_UART_Init>
 800086e:	b900      	cbnz	r0, 8000872 <MX_USART1_UART_Init+0x26>
}
 8000870:	bd08      	pop	{r3, pc}
        Error_Handler();
 8000872:	f7ff ff7b 	bl	800076c <Error_Handler>
 8000876:	bf00      	nop
 8000878:	2000008c 	.word	0x2000008c
 800087c:	40011000 	.word	0x40011000

08000880 <SystemClock_Config>:
void SystemClock_Config(void) {
 8000880:	b500      	push	{lr}
 8000882:	b095      	sub	sp, #84	@ 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000884:	2230      	movs	r2, #48	@ 0x30
 8000886:	2100      	movs	r1, #0
 8000888:	a808      	add	r0, sp, #32
 800088a:	f001 fe26 	bl	80024da <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800088e:	2300      	movs	r3, #0
 8000890:	9303      	str	r3, [sp, #12]
 8000892:	9304      	str	r3, [sp, #16]
 8000894:	9305      	str	r3, [sp, #20]
 8000896:	9306      	str	r3, [sp, #24]
 8000898:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <SystemClock_Config+0x9c>)
 800089e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80008a0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80008a4:	6411      	str	r1, [r2, #64]	@ 0x40
 80008a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80008a8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80008ac:	9201      	str	r2, [sp, #4]
 80008ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	9302      	str	r3, [sp, #8]
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <SystemClock_Config+0xa0>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c6:	2301      	movs	r3, #1
 80008c8:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ce:	9309      	str	r3, [sp, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	930e      	str	r3, [sp, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008d8:	920f      	str	r2, [sp, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 80008da:	220c      	movs	r2, #12
 80008dc:	9210      	str	r2, [sp, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 80008de:	2260      	movs	r2, #96	@ 0x60
 80008e0:	9211      	str	r2, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e2:	9312      	str	r3, [sp, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008e8:	a808      	add	r0, sp, #32
 80008ea:	f000 fb05 	bl	8000ef8 <HAL_RCC_OscConfig>
 80008ee:	b988      	cbnz	r0, 8000914 <SystemClock_Config+0x94>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008f0:	230f      	movs	r3, #15
 80008f2:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000900:	9206      	str	r2, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000904:	2103      	movs	r1, #3
 8000906:	a803      	add	r0, sp, #12
 8000908:	f000 fd46 	bl	8001398 <HAL_RCC_ClockConfig>
 800090c:	b920      	cbnz	r0, 8000918 <SystemClock_Config+0x98>
}
 800090e:	b015      	add	sp, #84	@ 0x54
 8000910:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 8000914:	f7ff ff2a 	bl	800076c <Error_Handler>
        Error_Handler();
 8000918:	f7ff ff28 	bl	800076c <Error_Handler>
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <main>:
int main(void) {
 8000924:	b508      	push	{r3, lr}
    HAL_Init();
 8000926:	f000 f95f 	bl	8000be8 <HAL_Init>
    SystemClock_Config();
 800092a:	f7ff ffa9 	bl	8000880 <SystemClock_Config>
    MX_GPIO_Init();
 800092e:	f7ff fe3d 	bl	80005ac <MX_GPIO_Init>
    MX_TIM1_Init();
 8000932:	f7ff ff1d 	bl	8000770 <MX_TIM1_Init>
    MX_USART1_UART_Init();
 8000936:	f7ff ff89 	bl	800084c <MX_USART1_UART_Init>
    DBG("\n\n\n\n--------\nStarting");
 800093a:	4808      	ldr	r0, [pc, #32]	@ (800095c <main+0x38>)
 800093c:	f001 fd70 	bl	8002420 <iprintf>
 8000940:	200a      	movs	r0, #10
 8000942:	f001 fd7f 	bl	8002444 <putchar>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge
 8000946:	4c06      	ldr	r4, [pc, #24]	@ (8000960 <main+0x3c>)
 8000948:	2100      	movs	r1, #0
 800094a:	4620      	mov	r0, r4
 800094c:	f001 fa3e 	bl	8001dcc <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge
 8000950:	2104      	movs	r1, #4
 8000952:	4620      	mov	r0, r4
 8000954:	f001 f9b4 	bl	8001cc0 <HAL_TIM_IC_Start>
    while (1) {
 8000958:	e7fe      	b.n	8000958 <main+0x34>
 800095a:	bf00      	nop
 800095c:	08003254 	.word	0x08003254
 8000960:	200000d0 	.word	0x200000d0

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2100      	movs	r1, #0
 8000968:	9100      	str	r1, [sp, #0]
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_MspInit+0x34>)
 800096c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800096e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000972:	645a      	str	r2, [r3, #68]	@ 0x44
 8000974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000976:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	9101      	str	r1, [sp, #4]
 8000980:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000982:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000986:	641a      	str	r2, [r3, #64]	@ 0x40
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	b002      	add	sp, #8
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800099c:	b510      	push	{r4, lr}
 800099e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	2300      	movs	r3, #0
 80009a2:	9303      	str	r3, [sp, #12]
 80009a4:	9304      	str	r3, [sp, #16]
 80009a6:	9305      	str	r3, [sp, #20]
 80009a8:	9306      	str	r3, [sp, #24]
 80009aa:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 80009ac:	6802      	ldr	r2, [r0, #0]
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_TIM_Base_MspInit+0x74>)
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d001      	beq.n	80009b8 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009b4:	b008      	add	sp, #32
 80009b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009b8:	2400      	movs	r4, #0
 80009ba:	9401      	str	r4, [sp, #4]
 80009bc:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80009c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009c2:	f042 0201 	orr.w	r2, r2, #1
 80009c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80009c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80009ca:	f002 0201 	and.w	r2, r2, #1
 80009ce:	9201      	str	r2, [sp, #4]
 80009d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	9402      	str	r4, [sp, #8]
 80009d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	631a      	str	r2, [r3, #48]	@ 0x30
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	a903      	add	r1, sp, #12
 80009f6:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <HAL_TIM_Base_MspInit+0x78>)
 80009f8:	f000 f99a 	bl	8000d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80009fc:	4622      	mov	r2, r4
 80009fe:	4621      	mov	r1, r4
 8000a00:	201b      	movs	r0, #27
 8000a02:	f000 f963 	bl	8000ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a06:	201b      	movs	r0, #27
 8000a08:	f000 f970 	bl	8000cec <HAL_NVIC_EnableIRQ>
}
 8000a0c:	e7d2      	b.n	80009b4 <HAL_TIM_Base_MspInit+0x18>
 8000a0e:	bf00      	nop
 8000a10:	40010000 	.word	0x40010000
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b500      	push	{lr}
 8000a1a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	9303      	str	r3, [sp, #12]
 8000a20:	9304      	str	r3, [sp, #16]
 8000a22:	9305      	str	r3, [sp, #20]
 8000a24:	9306      	str	r3, [sp, #24]
 8000a26:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000a28:	6802      	ldr	r2, [r0, #0]
 8000a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a2e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d002      	beq.n	8000a3c <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a36:	b009      	add	sp, #36	@ 0x24
 8000a38:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	9101      	str	r1, [sp, #4]
 8000a40:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a46:	f042 0210 	orr.w	r2, r2, #16
 8000a4a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a4e:	f002 0210 	and.w	r2, r2, #16
 8000a52:	9201      	str	r2, [sp, #4]
 8000a54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	9102      	str	r1, [sp, #8]
 8000a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a5a:	f042 0201 	orr.w	r2, r2, #1
 8000a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a6a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	a903      	add	r1, sp, #12
 8000a7e:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <HAL_UART_MspInit+0x70>)
 8000a80:	f000 f956 	bl	8000d30 <HAL_GPIO_Init>
}
 8000a84:	e7d7      	b.n	8000a36 <HAL_UART_MspInit+0x1e>
 8000a86:	bf00      	nop
 8000a88:	40020000 	.word	0x40020000

08000a8c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler>

08000a8e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler>

08000a90 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler>

08000a92 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler>

08000a94 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler>

08000a96 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f8bd 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bd08      	pop	{r3, pc}

08000aa4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000aa4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa6:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM1_CC_IRQHandler+0xc>)
 8000aa8:	f000 fdea 	bl	8001680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000aac:	bd08      	pop	{r3, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000d0 	.word	0x200000d0

08000ab4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	460c      	mov	r4, r1
 8000ab8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	2500      	movs	r5, #0
 8000abc:	e006      	b.n	8000acc <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000abe:	f3af 8000 	nop.w
 8000ac2:	4621      	mov	r1, r4
 8000ac4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000aca:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	42b5      	cmp	r5, r6
 8000ace:	dbf6      	blt.n	8000abe <_read+0xa>
  }

  return len;
}
 8000ad0:	4630      	mov	r0, r6
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}

08000ad4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad8:	4770      	bx	lr

08000ada <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000ada:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ade:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000ae8:	2000      	movs	r0, #0
 8000aea:	4770      	bx	lr

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <_sbrk+0x38>)
 8000af2:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <_sbrk+0x40>)
 8000af6:	6800      	ldr	r0, [r0, #0]
 8000af8:	b140      	cbz	r0, 8000b0c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <_sbrk+0x40>)
 8000afc:	6800      	ldr	r0, [r0, #0]
 8000afe:	4403      	add	r3, r0
 8000b00:	1a52      	subs	r2, r2, r1
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d806      	bhi.n	8000b14 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b06:	4a09      	ldr	r2, [pc, #36]	@ (8000b2c <_sbrk+0x40>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b0a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b0c:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <_sbrk+0x40>)
 8000b0e:	4c08      	ldr	r4, [pc, #32]	@ (8000b30 <_sbrk+0x44>)
 8000b10:	6004      	str	r4, [r0, #0]
 8000b12:	e7f2      	b.n	8000afa <_sbrk+0xe>
    errno = ENOMEM;
 8000b14:	f001 fd30 	bl	8002578 <__errno>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b20:	e7f3      	b.n	8000b0a <_sbrk+0x1e>
 8000b22:	bf00      	nop
 8000b24:	20020000 	.word	0x20020000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	20000118 	.word	0x20000118
 8000b30:	20000270 	.word	0x20000270

08000b34 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4a03      	ldr	r2, [pc, #12]	@ (8000b44 <SystemInit+0x10>)
 8000b36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000b3a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b4c:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b4e:	490e      	ldr	r1, [pc, #56]	@ (8000b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b50:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b64:	4c0b      	ldr	r4, [pc, #44]	@ (8000b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b72:	f7ff ffdf 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f001 fd05 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fed3 	bl	8000924 <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b8c:	080032c8 	.word	0x080032c8
  ldr r2, =_sbss
 8000b90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b94:	2000026c 	.word	0x2000026c

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>
	...

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_InitTick+0x40>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bac:	4a0c      	ldr	r2, [pc, #48]	@ (8000be0 <HAL_InitTick+0x44>)
 8000bae:	6810      	ldr	r0, [r2, #0]
 8000bb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bb4:	f000 f8a8 	bl	8000d08 <HAL_SYSTICK_Config>
 8000bb8:	b968      	cbnz	r0, 8000bd6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	2c0f      	cmp	r4, #15
 8000bbc:	d901      	bls.n	8000bc2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	e00a      	b.n	8000bd8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bca:	f000 f87f 	bl	8000ccc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bce:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <HAL_InitTick+0x48>)
 8000bd0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bd6:	2001      	movs	r0, #1
}
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008

08000be8 <HAL_Init>:
{
 8000be8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_Init+0x30>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000bf2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bfa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f84f 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f7ff ffc6 	bl	8000b9c <HAL_InitTick>
  HAL_MspInit();
 8000c10:	f7ff fea8 	bl	8000964 <HAL_MspInit>
}
 8000c14:	2000      	movs	r0, #0
 8000c16:	bd08      	pop	{r3, pc}
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <HAL_IncTick+0x10>)
 8000c1e:	6811      	ldr	r1, [r2, #0]
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_IncTick+0x14>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	440b      	add	r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000011c 	.word	0x2000011c
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c34:	4b01      	ldr	r3, [pc, #4]	@ (8000c3c <HAL_GetTick+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2000011c 	.word	0x2000011c

08000c40 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c40:	2800      	cmp	r0, #0
 8000c42:	db08      	blt.n	8000c56 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	0109      	lsls	r1, r1, #4
 8000c46:	b2c9      	uxtb	r1, r1
 8000c48:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000c4c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000c50:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000c54:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	f000 000f 	and.w	r0, r0, #15
 8000c5a:	0109      	lsls	r1, r1, #4
 8000c5c:	b2c9      	uxtb	r1, r1
 8000c5e:	4b01      	ldr	r3, [pc, #4]	@ (8000c64 <__NVIC_SetPriority+0x24>)
 8000c60:	5419      	strb	r1, [r3, r0]
  }
}
 8000c62:	4770      	bx	lr
 8000c64:	e000ed14 	.word	0xe000ed14

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6e:	f1c0 0c07 	rsb	ip, r0, #7
 8000c72:	f1bc 0f04 	cmp.w	ip, #4
 8000c76:	bf28      	it	cs
 8000c78:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7c:	1d03      	adds	r3, r0, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d90f      	bls.n	8000ca2 <NVIC_EncodePriority+0x3a>
 8000c82:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000c88:	fa0e f00c 	lsl.w	r0, lr, ip
 8000c8c:	ea21 0100 	bic.w	r1, r1, r0
 8000c90:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c92:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c96:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000c9a:	ea41 0002 	orr.w	r0, r1, r2
 8000c9e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e7ee      	b.n	8000c84 <NVIC_EncodePriority+0x1c>
	...

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000caa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	0200      	lsls	r0, r0, #8
 8000cb6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000cc4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <HAL_NVIC_SetPriority+0x1c>)
 8000cd2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000cd8:	f7ff ffc6 	bl	8000c68 <NVIC_EncodePriority>
 8000cdc:	4601      	mov	r1, r0
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f7ff ffae 	bl	8000c40 <__NVIC_SetPriority>
}
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cec:	2800      	cmp	r0, #0
 8000cee:	db07      	blt.n	8000d00 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf0:	f000 021f 	and.w	r2, r0, #31
 8000cf4:	0940      	lsrs	r0, r0, #5
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	4a02      	ldr	r2, [pc, #8]	@ (8000d04 <HAL_NVIC_EnableIRQ+0x18>)
 8000cfc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	3801      	subs	r0, #1
 8000d0a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d0e:	d20b      	bcs.n	8000d28 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000d14:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <HAL_SYSTICK_Config+0x24>)
 8000d18:	21f0      	movs	r1, #240	@ 0xf0
 8000d1a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1e:	2000      	movs	r0, #0
 8000d20:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	2207      	movs	r2, #7
 8000d24:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d26:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d28:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	2b0f      	cmp	r3, #15
 8000d34:	f200 80d7 	bhi.w	8000ee6 <HAL_GPIO_Init+0x1b6>
{
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	e065      	b.n	8000e0a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d44:	2403      	movs	r4, #3
 8000d46:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d4a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d4e:	68cc      	ldr	r4, [r1, #12]
 8000d50:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d54:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000d56:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5e:	684a      	ldr	r2, [r1, #4]
 8000d60:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000d64:	409a      	lsls	r2, r3
 8000d66:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000d68:	6042      	str	r2, [r0, #4]
 8000d6a:	e05c      	b.n	8000e26 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d6c:	08dc      	lsrs	r4, r3, #3
 8000d6e:	3408      	adds	r4, #8
 8000d70:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d74:	f003 0507 	and.w	r5, r3, #7
 8000d78:	00ad      	lsls	r5, r5, #2
 8000d7a:	f04f 0e0f 	mov.w	lr, #15
 8000d7e:	fa0e fe05 	lsl.w	lr, lr, r5
 8000d82:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d86:	690a      	ldr	r2, [r1, #16]
 8000d88:	40aa      	lsls	r2, r5
 8000d8a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d8e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000d92:	e05c      	b.n	8000e4e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d94:	2204      	movs	r2, #4
 8000d96:	e000      	b.n	8000d9a <HAL_GPIO_Init+0x6a>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d9e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da0:	3402      	adds	r4, #2
 8000da2:	4d51      	ldr	r5, [pc, #324]	@ (8000ee8 <HAL_GPIO_Init+0x1b8>)
 8000da4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da8:	4a50      	ldr	r2, [pc, #320]	@ (8000eec <HAL_GPIO_Init+0x1bc>)
 8000daa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	ea6f 020c 	mvn.w	r2, ip
 8000db0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000db4:	684e      	ldr	r6, [r1, #4]
 8000db6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000dba:	d001      	beq.n	8000dc0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000dbc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000dc0:	4c4a      	ldr	r4, [pc, #296]	@ (8000eec <HAL_GPIO_Init+0x1bc>)
 8000dc2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000dc4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dca:	684e      	ldr	r6, [r1, #4]
 8000dcc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000dd0:	d001      	beq.n	8000dd6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000dd2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000dd6:	4c45      	ldr	r4, [pc, #276]	@ (8000eec <HAL_GPIO_Init+0x1bc>)
 8000dd8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000dda:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de0:	684e      	ldr	r6, [r1, #4]
 8000de2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000de6:	d001      	beq.n	8000dec <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000de8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000dec:	4c3f      	ldr	r4, [pc, #252]	@ (8000eec <HAL_GPIO_Init+0x1bc>)
 8000dee:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df4:	684d      	ldr	r5, [r1, #4]
 8000df6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000dfa:	d001      	beq.n	8000e00 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000dfc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000e00:	4c3a      	ldr	r4, [pc, #232]	@ (8000eec <HAL_GPIO_Init+0x1bc>)
 8000e02:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e04:	3301      	adds	r3, #1
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	d86b      	bhi.n	8000ee2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	680c      	ldr	r4, [r1, #0]
 8000e10:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000e14:	ea32 0404 	bics.w	r4, r2, r4
 8000e18:	d1f4      	bne.n	8000e04 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	684c      	ldr	r4, [r1, #4]
 8000e1c:	f004 0403 	and.w	r4, r4, #3
 8000e20:	3c01      	subs	r4, #1
 8000e22:	2c01      	cmp	r4, #1
 8000e24:	d98b      	bls.n	8000d3e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e26:	684a      	ldr	r2, [r1, #4]
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	2a03      	cmp	r2, #3
 8000e2e:	d009      	beq.n	8000e44 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000e30:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e32:	005d      	lsls	r5, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	40aa      	lsls	r2, r5
 8000e38:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	688a      	ldr	r2, [r1, #8]
 8000e3e:	40aa      	lsls	r2, r5
 8000e40:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000e42:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e44:	684a      	ldr	r2, [r1, #4]
 8000e46:	f002 0203 	and.w	r2, r2, #3
 8000e4a:	2a02      	cmp	r2, #2
 8000e4c:	d08e      	beq.n	8000d6c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000e4e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e50:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e5a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5e:	684a      	ldr	r2, [r1, #4]
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e68:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000e6a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e6c:	684a      	ldr	r2, [r1, #4]
 8000e6e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000e72:	d0c7      	beq.n	8000e04 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	2200      	movs	r2, #0
 8000e76:	9201      	str	r2, [sp, #4]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <HAL_GPIO_Init+0x1c0>)
 8000e7a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000e7c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000e80:	6454      	str	r4, [r2, #68]	@ 0x44
 8000e82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000e84:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000e88:	9201      	str	r2, [sp, #4]
 8000e8a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8c:	089c      	lsrs	r4, r3, #2
 8000e8e:	1ca5      	adds	r5, r4, #2
 8000e90:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <HAL_GPIO_Init+0x1b8>)
 8000e92:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e96:	f003 0e03 	and.w	lr, r3, #3
 8000e9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ea4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea8:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <HAL_GPIO_Init+0x1c4>)
 8000eaa:	4290      	cmp	r0, r2
 8000eac:	f43f af74 	beq.w	8000d98 <HAL_GPIO_Init+0x68>
 8000eb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	d00e      	beq.n	8000ed6 <HAL_GPIO_Init+0x1a6>
 8000eb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ebc:	4290      	cmp	r0, r2
 8000ebe:	d00c      	beq.n	8000eda <HAL_GPIO_Init+0x1aa>
 8000ec0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ec4:	4290      	cmp	r0, r2
 8000ec6:	d00a      	beq.n	8000ede <HAL_GPIO_Init+0x1ae>
 8000ec8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ecc:	4290      	cmp	r0, r2
 8000ece:	f43f af61 	beq.w	8000d94 <HAL_GPIO_Init+0x64>
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	e761      	b.n	8000d9a <HAL_GPIO_Init+0x6a>
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	e75f      	b.n	8000d9a <HAL_GPIO_Init+0x6a>
 8000eda:	2202      	movs	r2, #2
 8000edc:	e75d      	b.n	8000d9a <HAL_GPIO_Init+0x6a>
 8000ede:	2203      	movs	r2, #3
 8000ee0:	e75b      	b.n	8000d9a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd70      	pop	{r4, r5, r6, pc}
 8000ee6:	4770      	bx	lr
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40013c00 	.word	0x40013c00
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	f000 81e0 	beq.w	80012be <HAL_RCC_OscConfig+0x3c6>
{
 8000efe:	b570      	push	{r4, r5, r6, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f04:	6803      	ldr	r3, [r0, #0]
 8000f06:	f013 0f01 	tst.w	r3, #1
 8000f0a:	d03b      	beq.n	8000f84 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0c:	4b9f      	ldr	r3, [pc, #636]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d02c      	beq.n	8000f72 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f18:	4b9c      	ldr	r3, [pc, #624]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d021      	beq.n	8000f68 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f24:	6863      	ldr	r3, [r4, #4]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f2a:	d04f      	beq.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f30:	d052      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xe0>
 8000f32:	4b96      	ldr	r3, [pc, #600]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000f42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f44:	6863      	ldr	r3, [r4, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d050      	beq.n	8000fec <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fe73 	bl	8000c34 <HAL_GetTick>
 8000f4e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f50:	4b8e      	ldr	r3, [pc, #568]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f58:	d114      	bne.n	8000f84 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fe6b 	bl	8000c34 <HAL_GetTick>
 8000f5e:	1b40      	subs	r0, r0, r5
 8000f60:	2864      	cmp	r0, #100	@ 0x64
 8000f62:	d9f5      	bls.n	8000f50 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000f64:	2003      	movs	r0, #3
 8000f66:	e1b1      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f68:	4b88      	ldr	r3, [pc, #544]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000f70:	d0d8      	beq.n	8000f24 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f72:	4b86      	ldr	r3, [pc, #536]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000f7a:	d003      	beq.n	8000f84 <HAL_RCC_OscConfig+0x8c>
 8000f7c:	6863      	ldr	r3, [r4, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 819f 	beq.w	80012c2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f013 0f02 	tst.w	r3, #2
 8000f8a:	d054      	beq.n	8001036 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f8c:	4b7f      	ldr	r3, [pc, #508]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f013 0f0c 	tst.w	r3, #12
 8000f94:	d03e      	beq.n	8001014 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f96:	4b7d      	ldr	r3, [pc, #500]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d033      	beq.n	800100a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fa2:	68e3      	ldr	r3, [r4, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d068      	beq.n	800107a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa8:	4b79      	ldr	r3, [pc, #484]	@ (8001190 <HAL_RCC_OscConfig+0x298>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fae:	f7ff fe41 	bl	8000c34 <HAL_GetTick>
 8000fb2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	4b75      	ldr	r3, [pc, #468]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f013 0f02 	tst.w	r3, #2
 8000fbc:	d154      	bne.n	8001068 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fe39 	bl	8000c34 <HAL_GetTick>
 8000fc2:	1b40      	subs	r0, r0, r5
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9f5      	bls.n	8000fb4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	e17f      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	4a6f      	ldr	r2, [pc, #444]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000fce:	6813      	ldr	r3, [r2, #0]
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e7b5      	b.n	8000f44 <HAL_RCC_OscConfig+0x4c>
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e7ab      	b.n	8000f44 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000fec:	f7ff fe22 	bl	8000c34 <HAL_GetTick>
 8000ff0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	4b66      	ldr	r3, [pc, #408]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ffa:	d0c3      	beq.n	8000f84 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fe1a 	bl	8000c34 <HAL_GetTick>
 8001000:	1b40      	subs	r0, r0, r5
 8001002:	2864      	cmp	r0, #100	@ 0x64
 8001004:	d9f5      	bls.n	8000ff2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001006:	2003      	movs	r0, #3
 8001008:	e160      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100a:	4b60      	ldr	r3, [pc, #384]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001012:	d1c6      	bne.n	8000fa2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001014:	4b5d      	ldr	r3, [pc, #372]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f013 0f02 	tst.w	r3, #2
 800101c:	d003      	beq.n	8001026 <HAL_RCC_OscConfig+0x12e>
 800101e:	68e3      	ldr	r3, [r4, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	f040 8150 	bne.w	80012c6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4a59      	ldr	r2, [pc, #356]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8001028:	6813      	ldr	r3, [r2, #0]
 800102a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800102e:	6921      	ldr	r1, [r4, #16]
 8001030:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001034:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f013 0f08 	tst.w	r3, #8
 800103c:	d042      	beq.n	80010c4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800103e:	6963      	ldr	r3, [r4, #20]
 8001040:	b36b      	cbz	r3, 800109e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001042:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <HAL_RCC_OscConfig+0x298>)
 8001044:	2201      	movs	r2, #1
 8001046:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104a:	f7ff fdf3 	bl	8000c34 <HAL_GetTick>
 800104e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001050:	4b4e      	ldr	r3, [pc, #312]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8001052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001054:	f013 0f02 	tst.w	r3, #2
 8001058:	d134      	bne.n	80010c4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800105a:	f7ff fdeb 	bl	8000c34 <HAL_GetTick>
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	2802      	cmp	r0, #2
 8001062:	d9f5      	bls.n	8001050 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
 8001066:	e131      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	4a48      	ldr	r2, [pc, #288]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001070:	6921      	ldr	r1, [r4, #16]
 8001072:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e7dd      	b.n	8001036 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800107a:	4b45      	ldr	r3, [pc, #276]	@ (8001190 <HAL_RCC_OscConfig+0x298>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001080:	f7ff fdd8 	bl	8000c34 <HAL_GetTick>
 8001084:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	4b41      	ldr	r3, [pc, #260]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f013 0f02 	tst.w	r3, #2
 800108e:	d0d2      	beq.n	8001036 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001090:	f7ff fdd0 	bl	8000c34 <HAL_GetTick>
 8001094:	1b40      	subs	r0, r0, r5
 8001096:	2802      	cmp	r0, #2
 8001098:	d9f5      	bls.n	8001086 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800109a:	2003      	movs	r0, #3
 800109c:	e116      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109e:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <HAL_RCC_OscConfig+0x298>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fdc5 	bl	8000c34 <HAL_GetTick>
 80010aa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	4b37      	ldr	r3, [pc, #220]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 80010ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010b0:	f013 0f02 	tst.w	r3, #2
 80010b4:	d006      	beq.n	80010c4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b6:	f7ff fdbd 	bl	8000c34 <HAL_GetTick>
 80010ba:	1b40      	subs	r0, r0, r5
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9f5      	bls.n	80010ac <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
 80010c2:	e103      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	f013 0f04 	tst.w	r3, #4
 80010ca:	d077      	beq.n	80011bc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010cc:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80010d4:	d133      	bne.n	800113e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 80010dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80010e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010ee:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <HAL_RCC_OscConfig+0x29c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80010f8:	d023      	beq.n	8001142 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fa:	68a3      	ldr	r3, [r4, #8]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d034      	beq.n	800116a <HAL_RCC_OscConfig+0x272>
 8001100:	2b05      	cmp	r3, #5
 8001102:	d038      	beq.n	8001176 <HAL_RCC_OscConfig+0x27e>
 8001104:	4b21      	ldr	r3, [pc, #132]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8001106:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	671a      	str	r2, [r3, #112]	@ 0x70
 800110e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001110:	f022 0204 	bic.w	r2, r2, #4
 8001114:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001116:	68a3      	ldr	r3, [r4, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d03d      	beq.n	8001198 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111c:	f7ff fd8a 	bl	8000c34 <HAL_GetTick>
 8001120:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8001124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001126:	f013 0f02 	tst.w	r3, #2
 800112a:	d146      	bne.n	80011ba <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112c:	f7ff fd82 	bl	8000c34 <HAL_GetTick>
 8001130:	1b80      	subs	r0, r0, r6
 8001132:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001136:	4298      	cmp	r0, r3
 8001138:	d9f3      	bls.n	8001122 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
 800113c:	e0c6      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800113e:	2500      	movs	r5, #0
 8001140:	e7d6      	b.n	80010f0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <HAL_RCC_OscConfig+0x29c>)
 8001144:	6813      	ldr	r3, [r2, #0]
 8001146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800114c:	f7ff fd72 	bl	8000c34 <HAL_GetTick>
 8001150:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_RCC_OscConfig+0x29c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800115a:	d1ce      	bne.n	80010fa <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115c:	f7ff fd6a 	bl	8000c34 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2802      	cmp	r0, #2
 8001164:	d9f5      	bls.n	8001152 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001166:	2003      	movs	r0, #3
 8001168:	e0b0      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 800116c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6713      	str	r3, [r2, #112]	@ 0x70
 8001174:	e7cf      	b.n	8001116 <HAL_RCC_OscConfig+0x21e>
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_RCC_OscConfig+0x294>)
 8001178:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800117a:	f042 0204 	orr.w	r2, r2, #4
 800117e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001180:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	671a      	str	r2, [r3, #112]	@ 0x70
 8001188:	e7c5      	b.n	8001116 <HAL_RCC_OscConfig+0x21e>
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	42470000 	.word	0x42470000
 8001194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fd4c 	bl	8000c34 <HAL_GetTick>
 800119c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119e:	4b52      	ldr	r3, [pc, #328]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 80011a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011a2:	f013 0f02 	tst.w	r3, #2
 80011a6:	d008      	beq.n	80011ba <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f7ff fd44 	bl	8000c34 <HAL_GetTick>
 80011ac:	1b80      	subs	r0, r0, r6
 80011ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011b2:	4298      	cmp	r0, r3
 80011b4:	d9f3      	bls.n	800119e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80011b6:	2003      	movs	r0, #3
 80011b8:	e088      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ba:	b9ed      	cbnz	r5, 80011f8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011bc:	69a3      	ldr	r3, [r4, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8083 	beq.w	80012ca <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011c4:	4a48      	ldr	r2, [pc, #288]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 80011c6:	6892      	ldr	r2, [r2, #8]
 80011c8:	f002 020c 	and.w	r2, r2, #12
 80011cc:	2a08      	cmp	r2, #8
 80011ce:	d051      	beq.n	8001274 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d017      	beq.n	8001204 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d4:	4b45      	ldr	r3, [pc, #276]	@ (80012ec <HAL_RCC_OscConfig+0x3f4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fd2b 	bl	8000c34 <HAL_GetTick>
 80011de:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e0:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80011e8:	d042      	beq.n	8001270 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ea:	f7ff fd23 	bl	8000c34 <HAL_GetTick>
 80011ee:	1b00      	subs	r0, r0, r4
 80011f0:	2802      	cmp	r0, #2
 80011f2:	d9f5      	bls.n	80011e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80011f4:	2003      	movs	r0, #3
 80011f6:	e069      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f8:	4a3b      	ldr	r2, [pc, #236]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 80011fa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80011fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	e7db      	b.n	80011bc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001204:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <HAL_RCC_OscConfig+0x3f4>)
 8001206:	2200      	movs	r2, #0
 8001208:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800120a:	f7ff fd13 	bl	8000c34 <HAL_GetTick>
 800120e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001210:	4b35      	ldr	r3, [pc, #212]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001218:	d006      	beq.n	8001228 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fd0b 	bl	8000c34 <HAL_GetTick>
 800121e:	1b40      	subs	r0, r0, r5
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f5      	bls.n	8001210 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001224:	2003      	movs	r0, #3
 8001226:	e051      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001228:	69e3      	ldr	r3, [r4, #28]
 800122a:	6a22      	ldr	r2, [r4, #32]
 800122c:	4313      	orrs	r3, r2
 800122e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001230:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001234:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001236:	0852      	lsrs	r2, r2, #1
 8001238:	3a01      	subs	r2, #1
 800123a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800123e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001240:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 8001246:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001248:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_RCC_OscConfig+0x3f4>)
 800124a:	2201      	movs	r2, #1
 800124c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800124e:	f7ff fcf1 	bl	8000c34 <HAL_GetTick>
 8001252:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001254:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800125c:	d106      	bne.n	800126c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125e:	f7ff fce9 	bl	8000c34 <HAL_GetTick>
 8001262:	1b00      	subs	r0, r0, r4
 8001264:	2802      	cmp	r0, #2
 8001266:	d9f5      	bls.n	8001254 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001268:	2003      	movs	r0, #3
 800126a:	e02f      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800126c:	2000      	movs	r0, #0
 800126e:	e02d      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
 8001270:	2000      	movs	r0, #0
 8001272:	e02b      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001274:	2b01      	cmp	r3, #1
 8001276:	d02b      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_RCC_OscConfig+0x3f0>)
 800127a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001280:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001282:	4291      	cmp	r1, r2
 8001284:	d126      	bne.n	80012d4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001286:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800128a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128c:	428a      	cmp	r2, r1
 800128e:	d123      	bne.n	80012d8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001290:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001292:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001296:	401a      	ands	r2, r3
 8001298:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800129c:	d11e      	bne.n	80012dc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800129e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80012a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80012a4:	0852      	lsrs	r2, r2, #1
 80012a6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012a8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80012ac:	d118      	bne.n	80012e0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012ae:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80012b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012b4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80012b8:	d114      	bne.n	80012e4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80012ba:	2000      	movs	r0, #0
 80012bc:	e006      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80012be:	2001      	movs	r0, #1
}
 80012c0:	4770      	bx	lr
        return HAL_ERROR;
 80012c2:	2001      	movs	r0, #1
 80012c4:	e002      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80012c6:	2001      	movs	r0, #1
 80012c8:	e000      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80012ca:	2000      	movs	r0, #0
}
 80012cc:	b002      	add	sp, #8
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
 80012d2:	e7fb      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
 80012d6:	e7f9      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
 80012d8:	2001      	movs	r0, #1
 80012da:	e7f7      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
 80012dc:	2001      	movs	r0, #1
 80012de:	e7f5      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
 80012e0:	2001      	movs	r0, #1
 80012e2:	e7f3      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
 80012e4:	2001      	movs	r0, #1
 80012e6:	e7f1      	b.n	80012cc <HAL_RCC_OscConfig+0x3d4>
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470000 	.word	0x42470000

080012f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d041      	beq.n	8001382 <HAL_RCC_GetSysClockFreq+0x92>
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d141      	bne.n	8001386 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001310:	d012      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001314:	6859      	ldr	r1, [r3, #4]
 8001316:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_RCC_GetSysClockFreq+0xa0>)
 800131c:	2300      	movs	r3, #0
 800131e:	fba1 0100 	umull	r0, r1, r1, r0
 8001322:	f7fe ffad 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001332:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001336:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 800133a:	6858      	ldr	r0, [r3, #4]
 800133c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001340:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001344:	ebbc 0c00 	subs.w	ip, ip, r0
 8001348:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800134c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001350:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001354:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001358:	ebb1 010c 	subs.w	r1, r1, ip
 800135c:	eb63 030e 	sbc.w	r3, r3, lr
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001366:	00c9      	lsls	r1, r1, #3
 8001368:	eb11 0c00 	adds.w	ip, r1, r0
 800136c:	f143 0300 	adc.w	r3, r3, #0
 8001370:	0299      	lsls	r1, r3, #10
 8001372:	2300      	movs	r3, #0
 8001374:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001378:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800137c:	f7fe ff80 	bl	8000280 <__aeabi_uldivmod>
 8001380:	e7d1      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001382:	4803      	ldr	r0, [pc, #12]	@ (8001390 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001384:	e7d7      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001386:	4803      	ldr	r0, [pc, #12]	@ (8001394 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001388:	e7d5      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x46>
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	017d7840 	.word	0x017d7840
 8001394:	00f42400 	.word	0x00f42400

08001398 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 809b 	beq.w	80014d4 <HAL_RCC_ClockConfig+0x13c>
{
 800139e:	b570      	push	{r4, r5, r6, lr}
 80013a0:	460d      	mov	r5, r1
 80013a2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b4f      	ldr	r3, [pc, #316]	@ (80014e4 <HAL_RCC_ClockConfig+0x14c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	428b      	cmp	r3, r1
 80013ae:	d208      	bcs.n	80013c2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b0:	b2cb      	uxtb	r3, r1
 80013b2:	4a4c      	ldr	r2, [pc, #304]	@ (80014e4 <HAL_RCC_ClockConfig+0x14c>)
 80013b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	428b      	cmp	r3, r1
 80013be:	f040 808b 	bne.w	80014d8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	f013 0f02 	tst.w	r3, #2
 80013c8:	d017      	beq.n	80013fa <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ca:	f013 0f04 	tst.w	r3, #4
 80013ce:	d004      	beq.n	80013da <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4a45      	ldr	r2, [pc, #276]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 80013d2:	6893      	ldr	r3, [r2, #8]
 80013d4:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013d8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f013 0f08 	tst.w	r3, #8
 80013e0:	d004      	beq.n	80013ec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e2:	4a41      	ldr	r2, [pc, #260]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 80013e4:	6893      	ldr	r3, [r2, #8]
 80013e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013ea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ec:	4a3e      	ldr	r2, [pc, #248]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 80013ee:	6893      	ldr	r3, [r2, #8]
 80013f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013f4:	68a1      	ldr	r1, [r4, #8]
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	f013 0f01 	tst.w	r3, #1
 8001400:	d032      	beq.n	8001468 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d021      	beq.n	800144c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001408:	1e9a      	subs	r2, r3, #2
 800140a:	2a01      	cmp	r2, #1
 800140c:	d925      	bls.n	800145a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4a36      	ldr	r2, [pc, #216]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	f012 0f02 	tst.w	r2, #2
 8001416:	d061      	beq.n	80014dc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001418:	4933      	ldr	r1, [pc, #204]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 800141a:	688a      	ldr	r2, [r1, #8]
 800141c:	f022 0203 	bic.w	r2, r2, #3
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001424:	f7ff fc06 	bl	8000c34 <HAL_GetTick>
 8001428:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	6862      	ldr	r2, [r4, #4]
 8001434:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001438:	d016      	beq.n	8001468 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143a:	f7ff fbfb 	bl	8000c34 <HAL_GetTick>
 800143e:	1b80      	subs	r0, r0, r6
 8001440:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001444:	4298      	cmp	r0, r3
 8001446:	d9f0      	bls.n	800142a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001448:	2003      	movs	r0, #3
 800144a:	e042      	b.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144c:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001454:	d1e0      	bne.n	8001418 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
 8001458:	e03b      	b.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001462:	d1d9      	bne.n	8001418 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e034      	b.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <HAL_RCC_ClockConfig+0x14c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	42ab      	cmp	r3, r5
 8001472:	d907      	bls.n	8001484 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001474:	b2ea      	uxtb	r2, r5
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_ClockConfig+0x14c>)
 8001478:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	42ab      	cmp	r3, r5
 8001482:	d12d      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	f013 0f04 	tst.w	r3, #4
 800148a:	d006      	beq.n	800149a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800148c:	4a16      	ldr	r2, [pc, #88]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 800148e:	6893      	ldr	r3, [r2, #8]
 8001490:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001494:	68e1      	ldr	r1, [r4, #12]
 8001496:	430b      	orrs	r3, r1
 8001498:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	f013 0f08 	tst.w	r3, #8
 80014a0:	d007      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 80014a4:	6893      	ldr	r3, [r2, #8]
 80014a6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80014aa:	6921      	ldr	r1, [r4, #16]
 80014ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014b0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b2:	f7ff ff1d 	bl	80012f0 <HAL_RCC_GetSysClockFreq>
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_RCC_ClockConfig+0x150>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014be:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_RCC_ClockConfig+0x154>)
 80014c0:	5cd3      	ldrb	r3, [r2, r3]
 80014c2:	40d8      	lsrs	r0, r3
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_RCC_ClockConfig+0x158>)
 80014c6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_RCC_ClockConfig+0x15c>)
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	f7ff fb66 	bl	8000b9c <HAL_InitTick>
  return HAL_OK;
 80014d0:	2000      	movs	r0, #0
}
 80014d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80014d4:	2001      	movs	r0, #1
}
 80014d6:	4770      	bx	lr
      return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
 80014da:	e7fa      	b.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
 80014de:	e7f8      	b.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
 80014e2:	e7f6      	b.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
 80014e4:	40023c00 	.word	0x40023c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	08003274 	.word	0x08003274
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000008 	.word	0x20000008

080014f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014f8:	4b01      	ldr	r3, [pc, #4]	@ (8001500 <HAL_RCC_GetHCLKFreq+0x8>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001506:	f7ff fff7 	bl	80014f8 <HAL_RCC_GetHCLKFreq>
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <HAL_RCC_GetPCLK1Freq+0x18>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001512:	4a03      	ldr	r2, [pc, #12]	@ (8001520 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
}
 8001516:	40d8      	lsrs	r0, r3
 8001518:	bd08      	pop	{r3, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	0800326c 	.word	0x0800326c

08001524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001524:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001526:	f7ff ffe7 	bl	80014f8 <HAL_RCC_GetHCLKFreq>
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <HAL_RCC_GetPCLK2Freq+0x18>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001532:	4a03      	ldr	r2, [pc, #12]	@ (8001540 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
}
 8001536:	40d8      	lsrs	r0, r3
 8001538:	bd08      	pop	{r3, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	0800326c 	.word	0x0800326c

08001544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001544:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001546:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001548:	6a04      	ldr	r4, [r0, #32]
 800154a:	f024 0401 	bic.w	r4, r4, #1
 800154e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001550:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001552:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001556:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800155a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800155e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001560:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001562:	6203      	str	r3, [r0, #32]
}
 8001564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001568:	4770      	bx	lr

0800156a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800156a:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800156c:	6a04      	ldr	r4, [r0, #32]
 800156e:	f024 0410 	bic.w	r4, r4, #16
 8001572:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001574:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001576:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001578:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800157c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001580:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001584:	031b      	lsls	r3, r3, #12
 8001586:	b29b      	uxth	r3, r3
 8001588:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800158c:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001590:	0109      	lsls	r1, r1, #4
 8001592:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8001596:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001598:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800159a:	6201      	str	r1, [r0, #32]
}
 800159c:	bc30      	pop	{r4, r5}
 800159e:	4770      	bx	lr

080015a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80015a0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015a2:	6a03      	ldr	r3, [r0, #32]
 80015a4:	f023 0310 	bic.w	r3, r3, #16
 80015a8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015aa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80015ac:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015ae:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015b2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80015ba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80015be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80015c0:	6203      	str	r3, [r0, #32]
}
 80015c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80015c8:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80015ca:	6a04      	ldr	r4, [r0, #32]
 80015cc:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 80015d0:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80015d2:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80015d4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80015d6:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80015da:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80015de:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80015ea:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80015ee:	0209      	lsls	r1, r1, #8
 80015f0:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 80015f4:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80015f6:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80015f8:	6201      	str	r1, [r0, #32]
}
 80015fa:	bc30      	pop	{r4, r5}
 80015fc:	4770      	bx	lr

080015fe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80015fe:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001600:	6a04      	ldr	r4, [r0, #32]
 8001602:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8001606:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001608:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800160a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800160c:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001610:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001614:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001618:	031b      	lsls	r3, r3, #12
 800161a:	b29b      	uxth	r3, r3
 800161c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001620:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001624:	0309      	lsls	r1, r1, #12
 8001626:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 800162a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800162c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800162e:	6201      	str	r1, [r0, #32]
}
 8001630:	bc30      	pop	{r4, r5}
 8001632:	4770      	bx	lr

08001634 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001634:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800163a:	430b      	orrs	r3, r1
 800163c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001640:	6083      	str	r3, [r0, #8]
}
 8001642:	4770      	bx	lr

08001644 <HAL_TIM_IC_MspInit>:
}
 8001644:	4770      	bx	lr

08001646 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8001646:	290c      	cmp	r1, #12
 8001648:	d814      	bhi.n	8001674 <HAL_TIM_ReadCapturedValue+0x2e>
 800164a:	e8df f001 	tbb	[pc, r1]
 800164e:	1307      	.short	0x1307
 8001650:	130a1313 	.word	0x130a1313
 8001654:	130d1313 	.word	0x130d1313
 8001658:	1313      	.short	0x1313
 800165a:	10          	.byte	0x10
 800165b:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800165c:	6803      	ldr	r3, [r0, #0]
 800165e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8001660:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8001662:	6803      	ldr	r3, [r0, #0]
 8001664:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8001666:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8001668:	6803      	ldr	r3, [r0, #0]
 800166a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 800166c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800166e:	6803      	ldr	r3, [r0, #0]
 8001670:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8001672:	4770      	bx	lr
  switch (Channel)
 8001674:	2000      	movs	r0, #0
}
 8001676:	4770      	bx	lr

08001678 <HAL_TIM_PeriodElapsedCallback>:
}
 8001678:	4770      	bx	lr

0800167a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800167a:	4770      	bx	lr

0800167c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800167c:	4770      	bx	lr

0800167e <HAL_TIM_TriggerCallback>:
}
 800167e:	4770      	bx	lr

08001680 <HAL_TIM_IRQHandler>:
{
 8001680:	b510      	push	{r4, lr}
 8001682:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001684:	6803      	ldr	r3, [r0, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	f012 0f02 	tst.w	r2, #2
 800168c:	d011      	beq.n	80016b2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	f012 0f02 	tst.w	r2, #2
 8001694:	d00d      	beq.n	80016b2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001696:	f06f 0202 	mvn.w	r2, #2
 800169a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800169c:	2301      	movs	r3, #1
 800169e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a0:	6803      	ldr	r3, [r0, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f013 0f03 	tst.w	r3, #3
 80016a8:	d070      	beq.n	800178c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80016aa:	f7fe ffb1 	bl	8000610 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ae:	2300      	movs	r3, #0
 80016b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	f012 0f04 	tst.w	r2, #4
 80016ba:	d012      	beq.n	80016e2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	f012 0f04 	tst.w	r2, #4
 80016c2:	d00e      	beq.n	80016e2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016c4:	f06f 0204 	mvn.w	r2, #4
 80016c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80016d6:	d05f      	beq.n	8001798 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7fe ff99 	bl	8000610 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016de:	2300      	movs	r3, #0
 80016e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	f012 0f08 	tst.w	r2, #8
 80016ea:	d012      	beq.n	8001712 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	f012 0f08 	tst.w	r2, #8
 80016f2:	d00e      	beq.n	8001712 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016f4:	f06f 0208 	mvn.w	r2, #8
 80016f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016fa:	2304      	movs	r3, #4
 80016fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f013 0f03 	tst.w	r3, #3
 8001706:	d04e      	beq.n	80017a6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001708:	4620      	mov	r0, r4
 800170a:	f7fe ff81 	bl	8000610 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800170e:	2300      	movs	r3, #0
 8001710:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	f012 0f10 	tst.w	r2, #16
 800171a:	d012      	beq.n	8001742 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	f012 0f10 	tst.w	r2, #16
 8001722:	d00e      	beq.n	8001742 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001724:	f06f 0210 	mvn.w	r2, #16
 8001728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800172a:	2308      	movs	r3, #8
 800172c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8001736:	d03d      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001738:	4620      	mov	r0, r4
 800173a:	f7fe ff69 	bl	8000610 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	2300      	movs	r3, #0
 8001740:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	f012 0f01 	tst.w	r2, #1
 800174a:	d003      	beq.n	8001754 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	f012 0f01 	tst.w	r2, #1
 8001752:	d136      	bne.n	80017c2 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800175c:	d003      	beq.n	8001766 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001764:	d134      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800176e:	d003      	beq.n	8001778 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001776:	d132      	bne.n	80017de <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	f012 0f20 	tst.w	r2, #32
 8001780:	d003      	beq.n	800178a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	f012 0f20 	tst.w	r2, #32
 8001788:	d130      	bne.n	80017ec <HAL_TIM_IRQHandler+0x16c>
}
 800178a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800178c:	f7ff ff75 	bl	800167a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff ff73 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
 8001796:	e78a      	b.n	80016ae <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001798:	4620      	mov	r0, r4
 800179a:	f7ff ff6e 	bl	800167a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff ff6c 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
 80017a4:	e79b      	b.n	80016de <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff ff67 	bl	800167a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff ff65 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
 80017b2:	e7ac      	b.n	800170e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff ff60 	bl	800167a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff ff5e 	bl	800167c <HAL_TIM_PWM_PulseFinishedCallback>
 80017c0:	e7bd      	b.n	800173e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017c2:	f06f 0201 	mvn.w	r2, #1
 80017c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff ff55 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
 80017ce:	e7c1      	b.n	8001754 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80017d6:	4620      	mov	r0, r4
 80017d8:	f000 fbf9 	bl	8001fce <HAL_TIMEx_BreakCallback>
 80017dc:	e7c3      	b.n	8001766 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff ff4a 	bl	800167e <HAL_TIM_TriggerCallback>
 80017ea:	e7c5      	b.n	8001778 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017ec:	f06f 0220 	mvn.w	r2, #32
 80017f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80017f2:	4620      	mov	r0, r4
 80017f4:	f000 fbea 	bl	8001fcc <HAL_TIMEx_CommutCallback>
}
 80017f8:	e7c7      	b.n	800178a <HAL_TIM_IRQHandler+0x10a>
	...

080017fc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80017fc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017fe:	4a25      	ldr	r2, [pc, #148]	@ (8001894 <TIM_Base_SetConfig+0x98>)
 8001800:	4290      	cmp	r0, r2
 8001802:	d00e      	beq.n	8001822 <TIM_Base_SetConfig+0x26>
 8001804:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001808:	d00b      	beq.n	8001822 <TIM_Base_SetConfig+0x26>
 800180a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800180e:	4290      	cmp	r0, r2
 8001810:	d007      	beq.n	8001822 <TIM_Base_SetConfig+0x26>
 8001812:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001816:	4290      	cmp	r0, r2
 8001818:	d003      	beq.n	8001822 <TIM_Base_SetConfig+0x26>
 800181a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800181e:	4290      	cmp	r0, r2
 8001820:	d103      	bne.n	800182a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001826:	684a      	ldr	r2, [r1, #4]
 8001828:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800182a:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <TIM_Base_SetConfig+0x98>)
 800182c:	4290      	cmp	r0, r2
 800182e:	d01a      	beq.n	8001866 <TIM_Base_SetConfig+0x6a>
 8001830:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001834:	d017      	beq.n	8001866 <TIM_Base_SetConfig+0x6a>
 8001836:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800183a:	4290      	cmp	r0, r2
 800183c:	d013      	beq.n	8001866 <TIM_Base_SetConfig+0x6a>
 800183e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001842:	4290      	cmp	r0, r2
 8001844:	d00f      	beq.n	8001866 <TIM_Base_SetConfig+0x6a>
 8001846:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800184a:	4290      	cmp	r0, r2
 800184c:	d00b      	beq.n	8001866 <TIM_Base_SetConfig+0x6a>
 800184e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001852:	4290      	cmp	r0, r2
 8001854:	d007      	beq.n	8001866 <TIM_Base_SetConfig+0x6a>
 8001856:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800185a:	4290      	cmp	r0, r2
 800185c:	d003      	beq.n	8001866 <TIM_Base_SetConfig+0x6a>
 800185e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001862:	4290      	cmp	r0, r2
 8001864:	d103      	bne.n	800186e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800186a:	68ca      	ldr	r2, [r1, #12]
 800186c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001872:	694a      	ldr	r2, [r1, #20]
 8001874:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001876:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001878:	688b      	ldr	r3, [r1, #8]
 800187a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800187c:	680b      	ldr	r3, [r1, #0]
 800187e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <TIM_Base_SetConfig+0x98>)
 8001882:	4298      	cmp	r0, r3
 8001884:	d002      	beq.n	800188c <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8001886:	2301      	movs	r3, #1
 8001888:	6143      	str	r3, [r0, #20]
}
 800188a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800188c:	690b      	ldr	r3, [r1, #16]
 800188e:	6303      	str	r3, [r0, #48]	@ 0x30
 8001890:	e7f9      	b.n	8001886 <TIM_Base_SetConfig+0x8a>
 8001892:	bf00      	nop
 8001894:	40010000 	.word	0x40010000

08001898 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001898:	b340      	cbz	r0, 80018ec <HAL_TIM_Base_Init+0x54>
{
 800189a:	b510      	push	{r4, lr}
 800189c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800189e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80018a2:	b1f3      	cbz	r3, 80018e2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018aa:	4621      	mov	r1, r4
 80018ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80018b0:	f7ff ffa4 	bl	80017fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b4:	2301      	movs	r3, #1
 80018b6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80018be:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80018c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80018c6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80018ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80018d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80018d6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80018da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80018de:	2000      	movs	r0, #0
}
 80018e0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80018e2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80018e6:	f7ff f859 	bl	800099c <HAL_TIM_Base_MspInit>
 80018ea:	e7db      	b.n	80018a4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80018ec:	2001      	movs	r0, #1
}
 80018ee:	4770      	bx	lr

080018f0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80018f0:	b340      	cbz	r0, 8001944 <HAL_TIM_IC_Init+0x54>
{
 80018f2:	b510      	push	{r4, lr}
 80018f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80018fa:	b1f3      	cbz	r3, 800193a <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001902:	4621      	mov	r1, r4
 8001904:	f851 0b04 	ldr.w	r0, [r1], #4
 8001908:	f7ff ff78 	bl	80017fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800190c:	2301      	movs	r3, #1
 800190e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001912:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001916:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800191a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800191e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001922:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800192a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800192e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001932:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001936:	2000      	movs	r0, #0
}
 8001938:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800193a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 800193e:	f7ff fe81 	bl	8001644 <HAL_TIM_IC_MspInit>
 8001942:	e7db      	b.n	80018fc <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
}
 8001946:	4770      	bx	lr

08001948 <TIM_TI1_SetConfig>:
{
 8001948:	b470      	push	{r4, r5, r6}
 800194a:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800194c:	6a04      	ldr	r4, [r0, #32]
 800194e:	f024 0401 	bic.w	r4, r4, #1
 8001952:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001954:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001956:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001958:	4d14      	ldr	r5, [pc, #80]	@ (80019ac <TIM_TI1_SetConfig+0x64>)
 800195a:	42a8      	cmp	r0, r5
 800195c:	d014      	beq.n	8001988 <TIM_TI1_SetConfig+0x40>
 800195e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001962:	d011      	beq.n	8001988 <TIM_TI1_SetConfig+0x40>
 8001964:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <TIM_TI1_SetConfig+0x68>)
 8001966:	4290      	cmp	r0, r2
 8001968:	d00e      	beq.n	8001988 <TIM_TI1_SetConfig+0x40>
 800196a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800196e:	4290      	cmp	r0, r2
 8001970:	d00a      	beq.n	8001988 <TIM_TI1_SetConfig+0x40>
 8001972:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001976:	4290      	cmp	r0, r2
 8001978:	d006      	beq.n	8001988 <TIM_TI1_SetConfig+0x40>
 800197a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800197e:	4290      	cmp	r0, r2
 8001980:	d002      	beq.n	8001988 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001982:	f044 0201 	orr.w	r2, r4, #1
 8001986:	e003      	b.n	8001990 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001988:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800198c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001990:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800199a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800199e:	f001 010a 	and.w	r1, r1, #10
 80019a2:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80019a4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019a6:	6201      	str	r1, [r0, #32]
}
 80019a8:	bc70      	pop	{r4, r5, r6}
 80019aa:	4770      	bx	lr
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40000400 	.word	0x40000400

080019b4 <HAL_TIM_IC_ConfigChannel>:
{
 80019b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80019b6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d05e      	beq.n	8001a7c <HAL_TIM_IC_ConfigChannel+0xc8>
 80019be:	4604      	mov	r4, r0
 80019c0:	460d      	mov	r5, r1
 80019c2:	2301      	movs	r3, #1
 80019c4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 80019c8:	2a0c      	cmp	r2, #12
 80019ca:	d852      	bhi.n	8001a72 <HAL_TIM_IC_ConfigChannel+0xbe>
 80019cc:	e8df f002 	tbb	[pc, r2]
 80019d0:	51515107 	.word	0x51515107
 80019d4:	51515119 	.word	0x51515119
 80019d8:	5151512c 	.word	0x5151512c
 80019dc:	3e          	.byte	0x3e
 80019dd:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 80019de:	68cb      	ldr	r3, [r1, #12]
 80019e0:	684a      	ldr	r2, [r1, #4]
 80019e2:	6809      	ldr	r1, [r1, #0]
 80019e4:	6800      	ldr	r0, [r0, #0]
 80019e6:	f7ff ffaf 	bl	8001948 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	6993      	ldr	r3, [r2, #24]
 80019ee:	f023 030c 	bic.w	r3, r3, #12
 80019f2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80019f4:	6822      	ldr	r2, [r4, #0]
 80019f6:	6993      	ldr	r3, [r2, #24]
 80019f8:	68a9      	ldr	r1, [r5, #8]
 80019fa:	430b      	orrs	r3, r1
 80019fc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80019fe:	2000      	movs	r0, #0
 8001a00:	e038      	b.n	8001a74 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 8001a02:	68cb      	ldr	r3, [r1, #12]
 8001a04:	684a      	ldr	r2, [r1, #4]
 8001a06:	6809      	ldr	r1, [r1, #0]
 8001a08:	6800      	ldr	r0, [r0, #0]
 8001a0a:	f7ff fdae 	bl	800156a <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001a0e:	6822      	ldr	r2, [r4, #0]
 8001a10:	6993      	ldr	r3, [r2, #24]
 8001a12:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001a16:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	6993      	ldr	r3, [r2, #24]
 8001a1c:	68a9      	ldr	r1, [r5, #8]
 8001a1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a22:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001a24:	2000      	movs	r0, #0
 8001a26:	e025      	b.n	8001a74 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 8001a28:	68cb      	ldr	r3, [r1, #12]
 8001a2a:	684a      	ldr	r2, [r1, #4]
 8001a2c:	6809      	ldr	r1, [r1, #0]
 8001a2e:	6800      	ldr	r0, [r0, #0]
 8001a30:	f7ff fdca 	bl	80015c8 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	69d3      	ldr	r3, [r2, #28]
 8001a38:	f023 030c 	bic.w	r3, r3, #12
 8001a3c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	69d3      	ldr	r3, [r2, #28]
 8001a42:	68a9      	ldr	r1, [r5, #8]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e013      	b.n	8001a74 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 8001a4c:	68cb      	ldr	r3, [r1, #12]
 8001a4e:	684a      	ldr	r2, [r1, #4]
 8001a50:	6809      	ldr	r1, [r1, #0]
 8001a52:	6800      	ldr	r0, [r0, #0]
 8001a54:	f7ff fdd3 	bl	80015fe <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	69d3      	ldr	r3, [r2, #28]
 8001a5c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001a60:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001a62:	6822      	ldr	r2, [r4, #0]
 8001a64:	69d3      	ldr	r3, [r2, #28]
 8001a66:	68a9      	ldr	r1, [r5, #8]
 8001a68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a6c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2000      	movs	r0, #0
 8001a70:	e000      	b.n	8001a74 <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 8001a72:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001a74:	2300      	movs	r3, #0
 8001a76:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	e7fc      	b.n	8001a7a <HAL_TIM_IC_ConfigChannel+0xc6>

08001a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a80:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a82:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a84:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a92:	6082      	str	r2, [r0, #8]
}
 8001a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001a9a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d078      	beq.n	8001b94 <HAL_TIM_ConfigClockSource+0xfa>
{
 8001aa2:	b510      	push	{r4, lr}
 8001aa4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ab2:	6802      	ldr	r2, [r0, #0]
 8001ab4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001aba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001abe:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001ac0:	680b      	ldr	r3, [r1, #0]
 8001ac2:	2b60      	cmp	r3, #96	@ 0x60
 8001ac4:	d04c      	beq.n	8001b60 <HAL_TIM_ConfigClockSource+0xc6>
 8001ac6:	d823      	bhi.n	8001b10 <HAL_TIM_ConfigClockSource+0x76>
 8001ac8:	2b40      	cmp	r3, #64	@ 0x40
 8001aca:	d054      	beq.n	8001b76 <HAL_TIM_ConfigClockSource+0xdc>
 8001acc:	d811      	bhi.n	8001af2 <HAL_TIM_ConfigClockSource+0x58>
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d003      	beq.n	8001ada <HAL_TIM_ConfigClockSource+0x40>
 8001ad2:	d80a      	bhi.n	8001aea <HAL_TIM_ConfigClockSource+0x50>
 8001ad4:	b10b      	cbz	r3, 8001ada <HAL_TIM_ConfigClockSource+0x40>
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d105      	bne.n	8001ae6 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ada:	4619      	mov	r1, r3
 8001adc:	6820      	ldr	r0, [r4, #0]
 8001ade:	f7ff fda9 	bl	8001634 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2000      	movs	r0, #0
      break;
 8001ae4:	e028      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	e026      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001aea:	2b30      	cmp	r3, #48	@ 0x30
 8001aec:	d0f5      	beq.n	8001ada <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8001aee:	2001      	movs	r0, #1
 8001af0:	e022      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001af2:	2b50      	cmp	r3, #80	@ 0x50
 8001af4:	d10a      	bne.n	8001b0c <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af6:	68ca      	ldr	r2, [r1, #12]
 8001af8:	6849      	ldr	r1, [r1, #4]
 8001afa:	6800      	ldr	r0, [r0, #0]
 8001afc:	f7ff fd22 	bl	8001544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b00:	2150      	movs	r1, #80	@ 0x50
 8001b02:	6820      	ldr	r0, [r4, #0]
 8001b04:	f7ff fd96 	bl	8001634 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2000      	movs	r0, #0
      break;
 8001b0a:	e015      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e013      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b14:	d03a      	beq.n	8001b8c <HAL_TIM_ConfigClockSource+0xf2>
 8001b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b1a:	d014      	beq.n	8001b46 <HAL_TIM_ConfigClockSource+0xac>
 8001b1c:	2b70      	cmp	r3, #112	@ 0x70
 8001b1e:	d137      	bne.n	8001b90 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001b20:	68cb      	ldr	r3, [r1, #12]
 8001b22:	684a      	ldr	r2, [r1, #4]
 8001b24:	6889      	ldr	r1, [r1, #8]
 8001b26:	6800      	ldr	r0, [r0, #0]
 8001b28:	f7ff ffaa 	bl	8001a80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b2c:	6822      	ldr	r2, [r4, #0]
 8001b2e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001b34:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001b36:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001b44:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8001b46:	68cb      	ldr	r3, [r1, #12]
 8001b48:	684a      	ldr	r2, [r1, #4]
 8001b4a:	6889      	ldr	r1, [r1, #8]
 8001b4c:	6800      	ldr	r0, [r0, #0]
 8001b4e:	f7ff ff97 	bl	8001a80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	6893      	ldr	r3, [r2, #8]
 8001b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2000      	movs	r0, #0
      break;
 8001b5e:	e7eb      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b60:	68ca      	ldr	r2, [r1, #12]
 8001b62:	6849      	ldr	r1, [r1, #4]
 8001b64:	6800      	ldr	r0, [r0, #0]
 8001b66:	f7ff fd1b 	bl	80015a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b6a:	2160      	movs	r1, #96	@ 0x60
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	f7ff fd61 	bl	8001634 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001b72:	2000      	movs	r0, #0
      break;
 8001b74:	e7e0      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b76:	68ca      	ldr	r2, [r1, #12]
 8001b78:	6849      	ldr	r1, [r1, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	f7ff fce2 	bl	8001544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b80:	2140      	movs	r1, #64	@ 0x40
 8001b82:	6820      	ldr	r0, [r4, #0]
 8001b84:	f7ff fd56 	bl	8001634 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2000      	movs	r0, #0
      break;
 8001b8a:	e7d5      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e7d3      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
 8001b92:	e7d1      	b.n	8001b38 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8001b94:	2002      	movs	r0, #2
}
 8001b96:	4770      	bx	lr

08001b98 <TIM_SlaveTimer_SetConfig>:
{
 8001b98:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8001b9a:	6804      	ldr	r4, [r0, #0]
 8001b9c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001ba2:	684b      	ldr	r3, [r1, #4]
 8001ba4:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001ba6:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001baa:	680a      	ldr	r2, [r1, #0]
 8001bac:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 8001bae:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8001bb0:	684b      	ldr	r3, [r1, #4]
 8001bb2:	2b50      	cmp	r3, #80	@ 0x50
 8001bb4:	d030      	beq.n	8001c18 <TIM_SlaveTimer_SetConfig+0x80>
 8001bb6:	d90b      	bls.n	8001bd0 <TIM_SlaveTimer_SetConfig+0x38>
 8001bb8:	2b60      	cmp	r3, #96	@ 0x60
 8001bba:	d034      	beq.n	8001c26 <TIM_SlaveTimer_SetConfig+0x8e>
 8001bbc:	2b70      	cmp	r3, #112	@ 0x70
 8001bbe:	d143      	bne.n	8001c48 <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 8001bc0:	690b      	ldr	r3, [r1, #16]
 8001bc2:	688a      	ldr	r2, [r1, #8]
 8001bc4:	68c9      	ldr	r1, [r1, #12]
 8001bc6:	6800      	ldr	r0, [r0, #0]
 8001bc8:	f7ff ff5a 	bl	8001a80 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2000      	movs	r0, #0
}
 8001bce:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8001bd0:	2b40      	cmp	r3, #64	@ 0x40
 8001bd2:	d00c      	beq.n	8001bee <TIM_SlaveTimer_SetConfig+0x56>
 8001bd4:	d82e      	bhi.n	8001c34 <TIM_SlaveTimer_SetConfig+0x9c>
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d02e      	beq.n	8001c38 <TIM_SlaveTimer_SetConfig+0xa0>
 8001bda:	d804      	bhi.n	8001be6 <TIM_SlaveTimer_SetConfig+0x4e>
 8001bdc:	b373      	cbz	r3, 8001c3c <TIM_SlaveTimer_SetConfig+0xa4>
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d12e      	bne.n	8001c40 <TIM_SlaveTimer_SetConfig+0xa8>
 8001be2:	2000      	movs	r0, #0
 8001be4:	e7f3      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
 8001be6:	2b30      	cmp	r3, #48	@ 0x30
 8001be8:	d12c      	bne.n	8001c44 <TIM_SlaveTimer_SetConfig+0xac>
 8001bea:	2000      	movs	r0, #0
 8001bec:	e7ef      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001bee:	680b      	ldr	r3, [r1, #0]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d02b      	beq.n	8001c4c <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 8001bf4:	6803      	ldr	r3, [r0, #0]
 8001bf6:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001c00:	6802      	ldr	r2, [r0, #0]
 8001c02:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001c08:	6909      	ldr	r1, [r1, #16]
 8001c0a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001c0e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8001c10:	6803      	ldr	r3, [r0, #0]
 8001c12:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8001c14:	2000      	movs	r0, #0
      break;
 8001c16:	e7da      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c18:	690a      	ldr	r2, [r1, #16]
 8001c1a:	6889      	ldr	r1, [r1, #8]
 8001c1c:	6800      	ldr	r0, [r0, #0]
 8001c1e:	f7ff fc91 	bl	8001544 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2000      	movs	r0, #0
      break;
 8001c24:	e7d3      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c26:	690a      	ldr	r2, [r1, #16]
 8001c28:	6889      	ldr	r1, [r1, #8]
 8001c2a:	6800      	ldr	r0, [r0, #0]
 8001c2c:	f7ff fcb8 	bl	80015a0 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2000      	movs	r0, #0
      break;
 8001c32:	e7cc      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
      status = HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
 8001c36:	e7ca      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
  switch (sSlaveConfig->InputTrigger)
 8001c38:	2000      	movs	r0, #0
 8001c3a:	e7c8      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e7c6      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
      status = HAL_ERROR;
 8001c40:	2001      	movs	r0, #1
 8001c42:	e7c4      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
 8001c44:	2001      	movs	r0, #1
 8001c46:	e7c2      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
 8001c48:	2001      	movs	r0, #1
 8001c4a:	e7c0      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>
        return HAL_ERROR;
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e7be      	b.n	8001bce <TIM_SlaveTimer_SetConfig+0x36>

08001c50 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8001c50:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d022      	beq.n	8001c9e <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001c68:	f7ff ff96 	bl	8001b98 <TIM_SlaveTimer_SetConfig>
 8001c6c:	b980      	cbnz	r0, 8001c90 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	68d3      	ldr	r3, [r2, #12]
 8001c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c76:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	68d3      	ldr	r3, [r2, #12]
 8001c7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c80:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001c8e:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8001c90:	2001      	movs	r0, #1
 8001c92:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001c96:	2300      	movs	r3, #0
 8001c98:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8001c9c:	e7f7      	b.n	8001c8e <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8001c9e:	2002      	movs	r0, #2
}
 8001ca0:	4770      	bx	lr

08001ca2 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ca2:	f001 011f 	and.w	r1, r1, #31
 8001ca6:	f04f 0c01 	mov.w	ip, #1
 8001caa:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cae:	6a03      	ldr	r3, [r0, #32]
 8001cb0:	ea23 030c 	bic.w	r3, r3, ip
 8001cb4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001cb6:	6a03      	ldr	r3, [r0, #32]
 8001cb8:	408a      	lsls	r2, r1
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	6203      	str	r3, [r0, #32]
}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_TIM_IC_Start>:
{
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	bb91      	cbnz	r1, 8001d2e <HAL_TIM_IC_Start+0x6e>
 8001cc8:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8001ccc:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001cce:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8001cd2:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cd4:	2801      	cmp	r0, #1
 8001cd6:	d173      	bne.n	8001dc0 <HAL_TIM_IC_Start+0x100>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001cd8:	2a01      	cmp	r2, #1
 8001cda:	d172      	bne.n	8001dc2 <HAL_TIM_IC_Start+0x102>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d145      	bne.n	8001d6c <HAL_TIM_IC_Start+0xac>
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ce6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cea:	2201      	movs	r2, #1
 8001cec:	4619      	mov	r1, r3
 8001cee:	6820      	ldr	r0, [r4, #0]
 8001cf0:	f7ff ffd7 	bl	8001ca2 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	4a34      	ldr	r2, [pc, #208]	@ (8001dc8 <HAL_TIM_IC_Start+0x108>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d056      	beq.n	8001daa <HAL_TIM_IC_Start+0xea>
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d00:	d053      	beq.n	8001daa <HAL_TIM_IC_Start+0xea>
 8001d02:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d04f      	beq.n	8001daa <HAL_TIM_IC_Start+0xea>
 8001d0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d04b      	beq.n	8001daa <HAL_TIM_IC_Start+0xea>
 8001d12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d047      	beq.n	8001daa <HAL_TIM_IC_Start+0xea>
 8001d1a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d043      	beq.n	8001daa <HAL_TIM_IC_Start+0xea>
    __HAL_TIM_ENABLE(htim);
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	e049      	b.n	8001dc2 <HAL_TIM_IC_Start+0x102>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d2e:	2904      	cmp	r1, #4
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_IC_Start+0x8c>
 8001d32:	2908      	cmp	r1, #8
 8001d34:	d00e      	beq.n	8001d54 <HAL_TIM_IC_Start+0x94>
 8001d36:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8001d3a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d00d      	beq.n	8001d5c <HAL_TIM_IC_Start+0x9c>
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d00f      	beq.n	8001d64 <HAL_TIM_IC_Start+0xa4>
 8001d44:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	e7c3      	b.n	8001cd4 <HAL_TIM_IC_Start+0x14>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d4c:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8001d50:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001d52:	e7f3      	b.n	8001d3c <HAL_TIM_IC_Start+0x7c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d54:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8001d58:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001d5a:	e7ef      	b.n	8001d3c <HAL_TIM_IC_Start+0x7c>
 8001d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	e7b7      	b.n	8001cd4 <HAL_TIM_IC_Start+0x14>
 8001d64:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	e7b3      	b.n	8001cd4 <HAL_TIM_IC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00c      	beq.n	8001d8a <HAL_TIM_IC_Start+0xca>
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d00e      	beq.n	8001d92 <HAL_TIM_IC_Start+0xd2>
 8001d74:	2202      	movs	r2, #2
 8001d76:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d00d      	beq.n	8001d9a <HAL_TIM_IC_Start+0xda>
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d00f      	beq.n	8001da2 <HAL_TIM_IC_Start+0xe2>
 8001d82:	2202      	movs	r2, #2
 8001d84:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001d88:	e7af      	b.n	8001cea <HAL_TIM_IC_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d90:	e7f3      	b.n	8001d7a <HAL_TIM_IC_Start+0xba>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d92:	2202      	movs	r2, #2
 8001d94:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d98:	e7ef      	b.n	8001d7a <HAL_TIM_IC_Start+0xba>
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
 8001da0:	e7a3      	b.n	8001cea <HAL_TIM_IC_Start+0x2a>
 8001da2:	2202      	movs	r2, #2
 8001da4:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8001da8:	e79f      	b.n	8001cea <HAL_TIM_IC_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db0:	2a06      	cmp	r2, #6
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IC_Start+0x104>
      __HAL_TIM_ENABLE(htim);
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	e000      	b.n	8001dc2 <HAL_TIM_IC_Start+0x102>
    return HAL_ERROR;
 8001dc0:	2001      	movs	r0, #1
}
 8001dc2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e7fc      	b.n	8001dc2 <HAL_TIM_IC_Start+0x102>
 8001dc8:	40010000 	.word	0x40010000

08001dcc <HAL_TIM_IC_Start_IT>:
{
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	2900      	cmp	r1, #0
 8001dd4:	d13b      	bne.n	8001e4e <HAL_TIM_IC_Start_IT+0x82>
 8001dd6:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8001dda:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ddc:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8001de0:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001de2:	2801      	cmp	r0, #1
 8001de4:	f040 80ab 	bne.w	8001f3e <HAL_TIM_IC_Start_IT+0x172>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001de8:	2a01      	cmp	r2, #1
 8001dea:	f040 80a9 	bne.w	8001f40 <HAL_TIM_IC_Start_IT+0x174>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d14c      	bne.n	8001e8c <HAL_TIM_IC_Start_IT+0xc0>
 8001df2:	2202      	movs	r2, #2
 8001df4:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001df8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dfc:	6821      	ldr	r1, [r4, #0]
 8001dfe:	68ca      	ldr	r2, [r1, #12]
 8001e00:	f042 0202 	orr.w	r2, r2, #2
 8001e04:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e06:	2201      	movs	r2, #1
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6820      	ldr	r0, [r4, #0]
 8001e0c:	f7ff ff49 	bl	8001ca2 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	4a4e      	ldr	r2, [pc, #312]	@ (8001f4c <HAL_TIM_IC_Start_IT+0x180>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f000 8087 	beq.w	8001f28 <HAL_TIM_IC_Start_IT+0x15c>
 8001e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1e:	f000 8083 	beq.w	8001f28 <HAL_TIM_IC_Start_IT+0x15c>
 8001e22:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d07e      	beq.n	8001f28 <HAL_TIM_IC_Start_IT+0x15c>
 8001e2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d07a      	beq.n	8001f28 <HAL_TIM_IC_Start_IT+0x15c>
 8001e32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d076      	beq.n	8001f28 <HAL_TIM_IC_Start_IT+0x15c>
 8001e3a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d072      	beq.n	8001f28 <HAL_TIM_IC_Start_IT+0x15c>
      __HAL_TIM_ENABLE(htim);
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	e078      	b.n	8001f40 <HAL_TIM_IC_Start_IT+0x174>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e4e:	2904      	cmp	r1, #4
 8001e50:	d00c      	beq.n	8001e6c <HAL_TIM_IC_Start_IT+0xa0>
 8001e52:	2908      	cmp	r1, #8
 8001e54:	d00e      	beq.n	8001e74 <HAL_TIM_IC_Start_IT+0xa8>
 8001e56:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8001e5a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d00d      	beq.n	8001e7c <HAL_TIM_IC_Start_IT+0xb0>
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d00f      	beq.n	8001e84 <HAL_TIM_IC_Start_IT+0xb8>
 8001e64:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	e7ba      	b.n	8001de2 <HAL_TIM_IC_Start_IT+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e6c:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8001e70:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e72:	e7f3      	b.n	8001e5c <HAL_TIM_IC_Start_IT+0x90>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e74:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8001e78:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e7a:	e7ef      	b.n	8001e5c <HAL_TIM_IC_Start_IT+0x90>
 8001e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	e7ae      	b.n	8001de2 <HAL_TIM_IC_Start_IT+0x16>
 8001e84:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	e7aa      	b.n	8001de2 <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d02b      	beq.n	8001ee8 <HAL_TIM_IC_Start_IT+0x11c>
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d02d      	beq.n	8001ef0 <HAL_TIM_IC_Start_IT+0x124>
 8001e94:	2102      	movs	r1, #2
 8001e96:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d02c      	beq.n	8001ef8 <HAL_TIM_IC_Start_IT+0x12c>
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d033      	beq.n	8001f0a <HAL_TIM_IC_Start_IT+0x13e>
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  switch (Channel)
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d84a      	bhi.n	8001f42 <HAL_TIM_IC_Start_IT+0x176>
 8001eac:	a101      	add	r1, pc, #4	@ (adr r1, 8001eb4 <HAL_TIM_IC_Start_IT+0xe8>)
 8001eae:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001eb2:	bf00      	nop
 8001eb4:	08001dfd 	.word	0x08001dfd
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001eff 	.word	0x08001eff
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f11 	.word	0x08001f11
 8001ed8:	08001f43 	.word	0x08001f43
 8001edc:	08001f43 	.word	0x08001f43
 8001ee0:	08001f43 	.word	0x08001f43
 8001ee4:	08001f1d 	.word	0x08001f1d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ee8:	2102      	movs	r1, #2
 8001eea:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eee:	e7d4      	b.n	8001e9a <HAL_TIM_IC_Start_IT+0xce>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef6:	e7d0      	b.n	8001e9a <HAL_TIM_IC_Start_IT+0xce>
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001efe:	6821      	ldr	r1, [r4, #0]
 8001f00:	68ca      	ldr	r2, [r1, #12]
 8001f02:	f042 0204 	orr.w	r2, r2, #4
 8001f06:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8001f08:	e77d      	b.n	8001e06 <HAL_TIM_IC_Start_IT+0x3a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f10:	6821      	ldr	r1, [r4, #0]
 8001f12:	68ca      	ldr	r2, [r1, #12]
 8001f14:	f042 0208 	orr.w	r2, r2, #8
 8001f18:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8001f1a:	e774      	b.n	8001e06 <HAL_TIM_IC_Start_IT+0x3a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f1c:	6821      	ldr	r1, [r4, #0]
 8001f1e:	68ca      	ldr	r2, [r1, #12]
 8001f20:	f042 0210 	orr.w	r2, r2, #16
 8001f24:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8001f26:	e76e      	b.n	8001e06 <HAL_TIM_IC_Start_IT+0x3a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	2a06      	cmp	r2, #6
 8001f30:	d009      	beq.n	8001f46 <HAL_TIM_IC_Start_IT+0x17a>
        __HAL_TIM_ENABLE(htim);
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_TIM_IC_Start_IT+0x174>
    return HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
}
 8001f40:	bd10      	pop	{r4, pc}
  switch (Channel)
 8001f42:	4610      	mov	r0, r2
 8001f44:	e7fc      	b.n	8001f40 <HAL_TIM_IC_Start_IT+0x174>
 8001f46:	2000      	movs	r0, #0
 8001f48:	e7fa      	b.n	8001f40 <HAL_TIM_IC_Start_IT+0x174>
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000

08001f50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f50:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001f54:	2a01      	cmp	r2, #1
 8001f56:	d035      	beq.n	8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8001f58:	b410      	push	{r4}
 8001f5a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f62:	2202      	movs	r2, #2
 8001f64:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f68:	6802      	ldr	r2, [r0, #0]
 8001f6a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f6c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f6e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f72:	6808      	ldr	r0, [r1, #0]
 8001f74:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f78:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4812      	ldr	r0, [pc, #72]	@ (8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001f7e:	4282      	cmp	r2, r0
 8001f80:	d012      	beq.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f82:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001f86:	d00f      	beq.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f88:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8001f8c:	4282      	cmp	r2, r0
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f90:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f94:	4282      	cmp	r2, r0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f98:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001f9c:	4282      	cmp	r2, r0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001fa0:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8001fa4:	4282      	cmp	r2, r0
 8001fa6:	d104      	bne.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fa8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fac:	6849      	ldr	r1, [r1, #4]
 8001fae:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fb0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fc2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001fc4:	2002      	movs	r0, #2
}
 8001fc6:	4770      	bx	lr
 8001fc8:	40010000 	.word	0x40010000

08001fcc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fcc:	4770      	bx	lr

08001fce <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fce:	4770      	bx	lr

08001fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd4:	6802      	ldr	r2, [r0, #0]
 8001fd6:	6913      	ldr	r3, [r2, #16]
 8001fd8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fdc:	68c1      	ldr	r1, [r0, #12]
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe2:	6883      	ldr	r3, [r0, #8]
 8001fe4:	6902      	ldr	r2, [r0, #16]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	6943      	ldr	r3, [r0, #20]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	69c3      	ldr	r3, [r0, #28]
 8001fee:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001ff0:	6801      	ldr	r1, [r0, #0]
 8001ff2:	68cb      	ldr	r3, [r1, #12]
 8001ff4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001ff8:	f023 030c 	bic.w	r3, r3, #12
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002000:	6802      	ldr	r2, [r0, #0]
 8002002:	6953      	ldr	r3, [r2, #20]
 8002004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002008:	6981      	ldr	r1, [r0, #24]
 800200a:	430b      	orrs	r3, r1
 800200c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	4a31      	ldr	r2, [pc, #196]	@ (80020d8 <UART_SetConfig+0x108>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d006      	beq.n	8002024 <UART_SetConfig+0x54>
 8002016:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800201a:	4293      	cmp	r3, r2
 800201c:	d002      	beq.n	8002024 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800201e:	f7ff fa71 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 8002022:	e001      	b.n	8002028 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002024:	f7ff fa7e 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002028:	69e3      	ldr	r3, [r4, #28]
 800202a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800202e:	d029      	beq.n	8002084 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002030:	2100      	movs	r1, #0
 8002032:	1803      	adds	r3, r0, r0
 8002034:	4149      	adcs	r1, r1
 8002036:	181b      	adds	r3, r3, r0
 8002038:	f141 0100 	adc.w	r1, r1, #0
 800203c:	00c9      	lsls	r1, r1, #3
 800203e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1818      	adds	r0, r3, r0
 8002046:	6863      	ldr	r3, [r4, #4]
 8002048:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800204c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002050:	f141 0100 	adc.w	r1, r1, #0
 8002054:	f7fe f914 	bl	8000280 <__aeabi_uldivmod>
 8002058:	4a20      	ldr	r2, [pc, #128]	@ (80020dc <UART_SetConfig+0x10c>)
 800205a:	fba2 3100 	umull	r3, r1, r2, r0
 800205e:	0949      	lsrs	r1, r1, #5
 8002060:	2364      	movs	r3, #100	@ 0x64
 8002062:	fb03 0311 	mls	r3, r3, r1, r0
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	3332      	adds	r3, #50	@ 0x32
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002074:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	6821      	ldr	r1, [r4, #0]
 800207e:	4413      	add	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }
}
 8002082:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002084:	2300      	movs	r3, #0
 8002086:	1802      	adds	r2, r0, r0
 8002088:	eb43 0103 	adc.w	r1, r3, r3
 800208c:	1812      	adds	r2, r2, r0
 800208e:	f141 0100 	adc.w	r1, r1, #0
 8002092:	00c9      	lsls	r1, r1, #3
 8002094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002098:	00d2      	lsls	r2, r2, #3
 800209a:	1810      	adds	r0, r2, r0
 800209c:	f141 0100 	adc.w	r1, r1, #0
 80020a0:	6862      	ldr	r2, [r4, #4]
 80020a2:	1892      	adds	r2, r2, r2
 80020a4:	415b      	adcs	r3, r3
 80020a6:	f7fe f8eb 	bl	8000280 <__aeabi_uldivmod>
 80020aa:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <UART_SetConfig+0x10c>)
 80020ac:	fba2 3100 	umull	r3, r1, r2, r0
 80020b0:	0949      	lsrs	r1, r1, #5
 80020b2:	2364      	movs	r3, #100	@ 0x64
 80020b4:	fb03 0311 	mls	r3, r3, r1, r0
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	3332      	adds	r3, #50	@ 0x32
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	005a      	lsls	r2, r3, #1
 80020c4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80020c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	6821      	ldr	r1, [r4, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
 80020d6:	e7d4      	b.n	8002082 <UART_SetConfig+0xb2>
 80020d8:	40011000 	.word	0x40011000
 80020dc:	51eb851f 	.word	0x51eb851f

080020e0 <UART_WaitOnFlagUntilTimeout>:
{
 80020e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020e4:	4605      	mov	r5, r0
 80020e6:	460f      	mov	r7, r1
 80020e8:	4616      	mov	r6, r2
 80020ea:	4699      	mov	r9, r3
 80020ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	ea37 0404 	bics.w	r4, r7, r4
 80020f8:	bf0c      	ite	eq
 80020fa:	2401      	moveq	r4, #1
 80020fc:	2400      	movne	r4, #0
 80020fe:	42b4      	cmp	r4, r6
 8002100:	d12d      	bne.n	800215e <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8002102:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002106:	d0f3      	beq.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002108:	f1b8 0f00 	cmp.w	r8, #0
 800210c:	d005      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x3a>
 800210e:	f7fe fd91 	bl	8000c34 <HAL_GetTick>
 8002112:	eba0 0009 	sub.w	r0, r0, r9
 8002116:	4540      	cmp	r0, r8
 8002118:	d9ea      	bls.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211a:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211c:	f102 030c 	add.w	r3, r2, #12
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002128:	320c      	adds	r2, #12
 800212a:	e842 3100 	strex	r1, r3, [r2]
 800212e:	2900      	cmp	r1, #0
 8002130:	d1f3      	bne.n	800211a <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002132:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002134:	f102 0314 	add.w	r3, r2, #20
 8002138:	e853 3f00 	ldrex	r3, [r3]
 800213c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002140:	3214      	adds	r2, #20
 8002142:	e842 3100 	strex	r1, r3, [r2]
 8002146:	2900      	cmp	r1, #0
 8002148:	d1f3      	bne.n	8002132 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 800214a:	2320      	movs	r3, #32
 800214c:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002150:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        __HAL_UNLOCK(huart);
 8002154:	2300      	movs	r3, #0
 8002156:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
        return HAL_TIMEOUT;
 800215a:	2003      	movs	r0, #3
 800215c:	e000      	b.n	8002160 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 800215e:	2000      	movs	r0, #0
}
 8002160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002164 <HAL_UART_Init>:
  if (huart == NULL)
 8002164:	b358      	cbz	r0, 80021be <HAL_UART_Init+0x5a>
{
 8002166:	b510      	push	{r4, lr}
 8002168:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800216a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800216e:	b30b      	cbz	r3, 80021b4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002170:	2324      	movs	r3, #36	@ 0x24
 8002172:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	68d3      	ldr	r3, [r2, #12]
 800217a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800217e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff ff25 	bl	8001fd0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	6913      	ldr	r3, [r2, #16]
 800218a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800218e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	6953      	ldr	r3, [r2, #20]
 8002194:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002198:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800219a:	6822      	ldr	r2, [r4, #0]
 800219c:	68d3      	ldr	r3, [r2, #12]
 800219e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021a2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a4:	2000      	movs	r0, #0
 80021a6:	6420      	str	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021a8:	2320      	movs	r3, #32
 80021aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 80021b2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80021b4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 80021b8:	f7fe fc2e 	bl	8000a18 <HAL_UART_MspInit>
 80021bc:	e7d8      	b.n	8002170 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80021be:	2001      	movs	r0, #1
}
 80021c0:	4770      	bx	lr

080021c2 <HAL_UART_Transmit>:
{
 80021c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80021ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d154      	bne.n	800227e <HAL_UART_Transmit+0xbc>
 80021d4:	4604      	mov	r4, r0
 80021d6:	460d      	mov	r5, r1
 80021d8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80021da:	2900      	cmp	r1, #0
 80021dc:	d053      	beq.n	8002286 <HAL_UART_Transmit+0xc4>
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d053      	beq.n	800228a <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80021e2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d051      	beq.n	800228e <HAL_UART_Transmit+0xcc>
 80021ea:	2301      	movs	r3, #1
 80021ec:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	6403      	str	r3, [r0, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f4:	2321      	movs	r3, #33	@ 0x21
 80021f6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    tickstart = HAL_GetTick();
 80021fa:	f7fe fd1b 	bl	8000c34 <HAL_GetTick>
 80021fe:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002200:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002204:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002208:	68a3      	ldr	r3, [r4, #8]
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220e:	d005      	beq.n	800221c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8002210:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002214:	2300      	movs	r3, #0
 8002216:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    while (huart->TxXferCount > 0U)
 800221a:	e012      	b.n	8002242 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221c:	6923      	ldr	r3, [r4, #16]
 800221e:	b113      	cbz	r3, 8002226 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8002220:	f04f 0800 	mov.w	r8, #0
 8002224:	e7f6      	b.n	8002214 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8002226:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002228:	2500      	movs	r5, #0
 800222a:	e7f3      	b.n	8002214 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800222c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002236:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002238:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800223a:	b292      	uxth	r2, r2
 800223c:	3a01      	subs	r2, #1
 800223e:	b292      	uxth	r2, r2
 8002240:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002242:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002244:	b29b      	uxth	r3, r3
 8002246:	b173      	cbz	r3, 8002266 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002248:	9600      	str	r6, [sp, #0]
 800224a:	463b      	mov	r3, r7
 800224c:	2200      	movs	r2, #0
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff ff45 	bl	80020e0 <UART_WaitOnFlagUntilTimeout>
 8002256:	b9e0      	cbnz	r0, 8002292 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8002258:	2d00      	cmp	r5, #0
 800225a:	d0e7      	beq.n	800222c <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800225c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002264:	e7e8      	b.n	8002238 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	9600      	str	r6, [sp, #0]
 8002268:	463b      	mov	r3, r7
 800226a:	2200      	movs	r2, #0
 800226c:	2140      	movs	r1, #64	@ 0x40
 800226e:	4620      	mov	r0, r4
 8002270:	f7ff ff36 	bl	80020e0 <UART_WaitOnFlagUntilTimeout>
 8002274:	b978      	cbnz	r0, 8002296 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8002276:	2320      	movs	r3, #32
 8002278:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_OK;
 800227c:	e000      	b.n	8002280 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800227e:	2002      	movs	r0, #2
}
 8002280:	b002      	add	sp, #8
 8002282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002286:	2001      	movs	r0, #1
 8002288:	e7fa      	b.n	8002280 <HAL_UART_Transmit+0xbe>
 800228a:	2001      	movs	r0, #1
 800228c:	e7f8      	b.n	8002280 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800228e:	2002      	movs	r0, #2
 8002290:	e7f6      	b.n	8002280 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8002292:	2003      	movs	r0, #3
 8002294:	e7f4      	b.n	8002280 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e7f2      	b.n	8002280 <HAL_UART_Transmit+0xbe>
	...

0800229c <std>:
 800229c:	2300      	movs	r3, #0
 800229e:	b510      	push	{r4, lr}
 80022a0:	4604      	mov	r4, r0
 80022a2:	e9c0 3300 	strd	r3, r3, [r0]
 80022a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022aa:	6083      	str	r3, [r0, #8]
 80022ac:	8181      	strh	r1, [r0, #12]
 80022ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80022b0:	81c2      	strh	r2, [r0, #14]
 80022b2:	6183      	str	r3, [r0, #24]
 80022b4:	4619      	mov	r1, r3
 80022b6:	2208      	movs	r2, #8
 80022b8:	305c      	adds	r0, #92	@ 0x5c
 80022ba:	f000 f90e 	bl	80024da <memset>
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <std+0x58>)
 80022c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80022c2:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <std+0x5c>)
 80022c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80022c6:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <std+0x60>)
 80022c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <std+0x64>)
 80022cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <std+0x68>)
 80022d0:	6224      	str	r4, [r4, #32]
 80022d2:	429c      	cmp	r4, r3
 80022d4:	d006      	beq.n	80022e4 <std+0x48>
 80022d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80022da:	4294      	cmp	r4, r2
 80022dc:	d002      	beq.n	80022e4 <std+0x48>
 80022de:	33d0      	adds	r3, #208	@ 0xd0
 80022e0:	429c      	cmp	r4, r3
 80022e2:	d105      	bne.n	80022f0 <std+0x54>
 80022e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80022e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022ec:	f000 b96e 	b.w	80025cc <__retarget_lock_init_recursive>
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	bf00      	nop
 80022f4:	08002455 	.word	0x08002455
 80022f8:	08002477 	.word	0x08002477
 80022fc:	080024af 	.word	0x080024af
 8002300:	080024d3 	.word	0x080024d3
 8002304:	20000120 	.word	0x20000120

08002308 <stdio_exit_handler>:
 8002308:	4a02      	ldr	r2, [pc, #8]	@ (8002314 <stdio_exit_handler+0xc>)
 800230a:	4903      	ldr	r1, [pc, #12]	@ (8002318 <stdio_exit_handler+0x10>)
 800230c:	4803      	ldr	r0, [pc, #12]	@ (800231c <stdio_exit_handler+0x14>)
 800230e:	f000 b869 	b.w	80023e4 <_fwalk_sglue>
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c
 8002318:	08002e69 	.word	0x08002e69
 800231c:	2000001c 	.word	0x2000001c

08002320 <cleanup_stdio>:
 8002320:	6841      	ldr	r1, [r0, #4]
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <cleanup_stdio+0x34>)
 8002324:	4299      	cmp	r1, r3
 8002326:	b510      	push	{r4, lr}
 8002328:	4604      	mov	r4, r0
 800232a:	d001      	beq.n	8002330 <cleanup_stdio+0x10>
 800232c:	f000 fd9c 	bl	8002e68 <_fflush_r>
 8002330:	68a1      	ldr	r1, [r4, #8]
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <cleanup_stdio+0x38>)
 8002334:	4299      	cmp	r1, r3
 8002336:	d002      	beq.n	800233e <cleanup_stdio+0x1e>
 8002338:	4620      	mov	r0, r4
 800233a:	f000 fd95 	bl	8002e68 <_fflush_r>
 800233e:	68e1      	ldr	r1, [r4, #12]
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <cleanup_stdio+0x3c>)
 8002342:	4299      	cmp	r1, r3
 8002344:	d004      	beq.n	8002350 <cleanup_stdio+0x30>
 8002346:	4620      	mov	r0, r4
 8002348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800234c:	f000 bd8c 	b.w	8002e68 <_fflush_r>
 8002350:	bd10      	pop	{r4, pc}
 8002352:	bf00      	nop
 8002354:	20000120 	.word	0x20000120
 8002358:	20000188 	.word	0x20000188
 800235c:	200001f0 	.word	0x200001f0

08002360 <global_stdio_init.part.0>:
 8002360:	b510      	push	{r4, lr}
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <global_stdio_init.part.0+0x30>)
 8002364:	4c0b      	ldr	r4, [pc, #44]	@ (8002394 <global_stdio_init.part.0+0x34>)
 8002366:	4a0c      	ldr	r2, [pc, #48]	@ (8002398 <global_stdio_init.part.0+0x38>)
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	4620      	mov	r0, r4
 800236c:	2200      	movs	r2, #0
 800236e:	2104      	movs	r1, #4
 8002370:	f7ff ff94 	bl	800229c <std>
 8002374:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002378:	2201      	movs	r2, #1
 800237a:	2109      	movs	r1, #9
 800237c:	f7ff ff8e 	bl	800229c <std>
 8002380:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002384:	2202      	movs	r2, #2
 8002386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800238a:	2112      	movs	r1, #18
 800238c:	f7ff bf86 	b.w	800229c <std>
 8002390:	20000258 	.word	0x20000258
 8002394:	20000120 	.word	0x20000120
 8002398:	08002309 	.word	0x08002309

0800239c <__sfp_lock_acquire>:
 800239c:	4801      	ldr	r0, [pc, #4]	@ (80023a4 <__sfp_lock_acquire+0x8>)
 800239e:	f000 b916 	b.w	80025ce <__retarget_lock_acquire_recursive>
 80023a2:	bf00      	nop
 80023a4:	20000261 	.word	0x20000261

080023a8 <__sfp_lock_release>:
 80023a8:	4801      	ldr	r0, [pc, #4]	@ (80023b0 <__sfp_lock_release+0x8>)
 80023aa:	f000 b911 	b.w	80025d0 <__retarget_lock_release_recursive>
 80023ae:	bf00      	nop
 80023b0:	20000261 	.word	0x20000261

080023b4 <__sinit>:
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4604      	mov	r4, r0
 80023b8:	f7ff fff0 	bl	800239c <__sfp_lock_acquire>
 80023bc:	6a23      	ldr	r3, [r4, #32]
 80023be:	b11b      	cbz	r3, 80023c8 <__sinit+0x14>
 80023c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c4:	f7ff bff0 	b.w	80023a8 <__sfp_lock_release>
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <__sinit+0x28>)
 80023ca:	6223      	str	r3, [r4, #32]
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <__sinit+0x2c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f5      	bne.n	80023c0 <__sinit+0xc>
 80023d4:	f7ff ffc4 	bl	8002360 <global_stdio_init.part.0>
 80023d8:	e7f2      	b.n	80023c0 <__sinit+0xc>
 80023da:	bf00      	nop
 80023dc:	08002321 	.word	0x08002321
 80023e0:	20000258 	.word	0x20000258

080023e4 <_fwalk_sglue>:
 80023e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e8:	4607      	mov	r7, r0
 80023ea:	4688      	mov	r8, r1
 80023ec:	4614      	mov	r4, r2
 80023ee:	2600      	movs	r6, #0
 80023f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023f4:	f1b9 0901 	subs.w	r9, r9, #1
 80023f8:	d505      	bpl.n	8002406 <_fwalk_sglue+0x22>
 80023fa:	6824      	ldr	r4, [r4, #0]
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	d1f7      	bne.n	80023f0 <_fwalk_sglue+0xc>
 8002400:	4630      	mov	r0, r6
 8002402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002406:	89ab      	ldrh	r3, [r5, #12]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d907      	bls.n	800241c <_fwalk_sglue+0x38>
 800240c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002410:	3301      	adds	r3, #1
 8002412:	d003      	beq.n	800241c <_fwalk_sglue+0x38>
 8002414:	4629      	mov	r1, r5
 8002416:	4638      	mov	r0, r7
 8002418:	47c0      	blx	r8
 800241a:	4306      	orrs	r6, r0
 800241c:	3568      	adds	r5, #104	@ 0x68
 800241e:	e7e9      	b.n	80023f4 <_fwalk_sglue+0x10>

08002420 <iprintf>:
 8002420:	b40f      	push	{r0, r1, r2, r3}
 8002422:	b507      	push	{r0, r1, r2, lr}
 8002424:	4906      	ldr	r1, [pc, #24]	@ (8002440 <iprintf+0x20>)
 8002426:	ab04      	add	r3, sp, #16
 8002428:	6808      	ldr	r0, [r1, #0]
 800242a:	f853 2b04 	ldr.w	r2, [r3], #4
 800242e:	6881      	ldr	r1, [r0, #8]
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	f000 f9f1 	bl	8002818 <_vfiprintf_r>
 8002436:	b003      	add	sp, #12
 8002438:	f85d eb04 	ldr.w	lr, [sp], #4
 800243c:	b004      	add	sp, #16
 800243e:	4770      	bx	lr
 8002440:	20000018 	.word	0x20000018

08002444 <putchar>:
 8002444:	4b02      	ldr	r3, [pc, #8]	@ (8002450 <putchar+0xc>)
 8002446:	4601      	mov	r1, r0
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	6882      	ldr	r2, [r0, #8]
 800244c:	f000 bd34 	b.w	8002eb8 <_putc_r>
 8002450:	20000018 	.word	0x20000018

08002454 <__sread>:
 8002454:	b510      	push	{r4, lr}
 8002456:	460c      	mov	r4, r1
 8002458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245c:	f000 f868 	bl	8002530 <_read_r>
 8002460:	2800      	cmp	r0, #0
 8002462:	bfab      	itete	ge
 8002464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002466:	89a3      	ldrhlt	r3, [r4, #12]
 8002468:	181b      	addge	r3, r3, r0
 800246a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800246e:	bfac      	ite	ge
 8002470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002472:	81a3      	strhlt	r3, [r4, #12]
 8002474:	bd10      	pop	{r4, pc}

08002476 <__swrite>:
 8002476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800247a:	461f      	mov	r7, r3
 800247c:	898b      	ldrh	r3, [r1, #12]
 800247e:	05db      	lsls	r3, r3, #23
 8002480:	4605      	mov	r5, r0
 8002482:	460c      	mov	r4, r1
 8002484:	4616      	mov	r6, r2
 8002486:	d505      	bpl.n	8002494 <__swrite+0x1e>
 8002488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800248c:	2302      	movs	r3, #2
 800248e:	2200      	movs	r2, #0
 8002490:	f000 f83c 	bl	800250c <_lseek_r>
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800249a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800249e:	81a3      	strh	r3, [r4, #12]
 80024a0:	4632      	mov	r2, r6
 80024a2:	463b      	mov	r3, r7
 80024a4:	4628      	mov	r0, r5
 80024a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024aa:	f000 b853 	b.w	8002554 <_write_r>

080024ae <__sseek>:
 80024ae:	b510      	push	{r4, lr}
 80024b0:	460c      	mov	r4, r1
 80024b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b6:	f000 f829 	bl	800250c <_lseek_r>
 80024ba:	1c43      	adds	r3, r0, #1
 80024bc:	89a3      	ldrh	r3, [r4, #12]
 80024be:	bf15      	itete	ne
 80024c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024ca:	81a3      	strheq	r3, [r4, #12]
 80024cc:	bf18      	it	ne
 80024ce:	81a3      	strhne	r3, [r4, #12]
 80024d0:	bd10      	pop	{r4, pc}

080024d2 <__sclose>:
 80024d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d6:	f000 b809 	b.w	80024ec <_close_r>

080024da <memset>:
 80024da:	4402      	add	r2, r0
 80024dc:	4603      	mov	r3, r0
 80024de:	4293      	cmp	r3, r2
 80024e0:	d100      	bne.n	80024e4 <memset+0xa>
 80024e2:	4770      	bx	lr
 80024e4:	f803 1b01 	strb.w	r1, [r3], #1
 80024e8:	e7f9      	b.n	80024de <memset+0x4>
	...

080024ec <_close_r>:
 80024ec:	b538      	push	{r3, r4, r5, lr}
 80024ee:	4d06      	ldr	r5, [pc, #24]	@ (8002508 <_close_r+0x1c>)
 80024f0:	2300      	movs	r3, #0
 80024f2:	4604      	mov	r4, r0
 80024f4:	4608      	mov	r0, r1
 80024f6:	602b      	str	r3, [r5, #0]
 80024f8:	f7fe faec 	bl	8000ad4 <_close>
 80024fc:	1c43      	adds	r3, r0, #1
 80024fe:	d102      	bne.n	8002506 <_close_r+0x1a>
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	b103      	cbz	r3, 8002506 <_close_r+0x1a>
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	bd38      	pop	{r3, r4, r5, pc}
 8002508:	2000025c 	.word	0x2000025c

0800250c <_lseek_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	4d07      	ldr	r5, [pc, #28]	@ (800252c <_lseek_r+0x20>)
 8002510:	4604      	mov	r4, r0
 8002512:	4608      	mov	r0, r1
 8002514:	4611      	mov	r1, r2
 8002516:	2200      	movs	r2, #0
 8002518:	602a      	str	r2, [r5, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f7fe fae4 	bl	8000ae8 <_lseek>
 8002520:	1c43      	adds	r3, r0, #1
 8002522:	d102      	bne.n	800252a <_lseek_r+0x1e>
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	b103      	cbz	r3, 800252a <_lseek_r+0x1e>
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	bd38      	pop	{r3, r4, r5, pc}
 800252c:	2000025c 	.word	0x2000025c

08002530 <_read_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4d07      	ldr	r5, [pc, #28]	@ (8002550 <_read_r+0x20>)
 8002534:	4604      	mov	r4, r0
 8002536:	4608      	mov	r0, r1
 8002538:	4611      	mov	r1, r2
 800253a:	2200      	movs	r2, #0
 800253c:	602a      	str	r2, [r5, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	f7fe fab8 	bl	8000ab4 <_read>
 8002544:	1c43      	adds	r3, r0, #1
 8002546:	d102      	bne.n	800254e <_read_r+0x1e>
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	b103      	cbz	r3, 800254e <_read_r+0x1e>
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	2000025c 	.word	0x2000025c

08002554 <_write_r>:
 8002554:	b538      	push	{r3, r4, r5, lr}
 8002556:	4d07      	ldr	r5, [pc, #28]	@ (8002574 <_write_r+0x20>)
 8002558:	4604      	mov	r4, r0
 800255a:	4608      	mov	r0, r1
 800255c:	4611      	mov	r1, r2
 800255e:	2200      	movs	r2, #0
 8002560:	602a      	str	r2, [r5, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	f7fe f83e 	bl	80005e4 <_write>
 8002568:	1c43      	adds	r3, r0, #1
 800256a:	d102      	bne.n	8002572 <_write_r+0x1e>
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	b103      	cbz	r3, 8002572 <_write_r+0x1e>
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	bd38      	pop	{r3, r4, r5, pc}
 8002574:	2000025c 	.word	0x2000025c

08002578 <__errno>:
 8002578:	4b01      	ldr	r3, [pc, #4]	@ (8002580 <__errno+0x8>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000018 	.word	0x20000018

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	4d0d      	ldr	r5, [pc, #52]	@ (80025bc <__libc_init_array+0x38>)
 8002588:	4c0d      	ldr	r4, [pc, #52]	@ (80025c0 <__libc_init_array+0x3c>)
 800258a:	1b64      	subs	r4, r4, r5
 800258c:	10a4      	asrs	r4, r4, #2
 800258e:	2600      	movs	r6, #0
 8002590:	42a6      	cmp	r6, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	4d0b      	ldr	r5, [pc, #44]	@ (80025c4 <__libc_init_array+0x40>)
 8002596:	4c0c      	ldr	r4, [pc, #48]	@ (80025c8 <__libc_init_array+0x44>)
 8002598:	f000 fdea 	bl	8003170 <_init>
 800259c:	1b64      	subs	r4, r4, r5
 800259e:	10a4      	asrs	r4, r4, #2
 80025a0:	2600      	movs	r6, #0
 80025a2:	42a6      	cmp	r6, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ac:	4798      	blx	r3
 80025ae:	3601      	adds	r6, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b6:	4798      	blx	r3
 80025b8:	3601      	adds	r6, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	080032c0 	.word	0x080032c0
 80025c0:	080032c0 	.word	0x080032c0
 80025c4:	080032c0 	.word	0x080032c0
 80025c8:	080032c4 	.word	0x080032c4

080025cc <__retarget_lock_init_recursive>:
 80025cc:	4770      	bx	lr

080025ce <__retarget_lock_acquire_recursive>:
 80025ce:	4770      	bx	lr

080025d0 <__retarget_lock_release_recursive>:
 80025d0:	4770      	bx	lr
	...

080025d4 <_free_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4605      	mov	r5, r0
 80025d8:	2900      	cmp	r1, #0
 80025da:	d041      	beq.n	8002660 <_free_r+0x8c>
 80025dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025e0:	1f0c      	subs	r4, r1, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bfb8      	it	lt
 80025e6:	18e4      	addlt	r4, r4, r3
 80025e8:	f000 f8e0 	bl	80027ac <__malloc_lock>
 80025ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <_free_r+0x90>)
 80025ee:	6813      	ldr	r3, [r2, #0]
 80025f0:	b933      	cbnz	r3, 8002600 <_free_r+0x2c>
 80025f2:	6063      	str	r3, [r4, #4]
 80025f4:	6014      	str	r4, [r2, #0]
 80025f6:	4628      	mov	r0, r5
 80025f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025fc:	f000 b8dc 	b.w	80027b8 <__malloc_unlock>
 8002600:	42a3      	cmp	r3, r4
 8002602:	d908      	bls.n	8002616 <_free_r+0x42>
 8002604:	6820      	ldr	r0, [r4, #0]
 8002606:	1821      	adds	r1, r4, r0
 8002608:	428b      	cmp	r3, r1
 800260a:	bf01      	itttt	eq
 800260c:	6819      	ldreq	r1, [r3, #0]
 800260e:	685b      	ldreq	r3, [r3, #4]
 8002610:	1809      	addeq	r1, r1, r0
 8002612:	6021      	streq	r1, [r4, #0]
 8002614:	e7ed      	b.n	80025f2 <_free_r+0x1e>
 8002616:	461a      	mov	r2, r3
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	b10b      	cbz	r3, 8002620 <_free_r+0x4c>
 800261c:	42a3      	cmp	r3, r4
 800261e:	d9fa      	bls.n	8002616 <_free_r+0x42>
 8002620:	6811      	ldr	r1, [r2, #0]
 8002622:	1850      	adds	r0, r2, r1
 8002624:	42a0      	cmp	r0, r4
 8002626:	d10b      	bne.n	8002640 <_free_r+0x6c>
 8002628:	6820      	ldr	r0, [r4, #0]
 800262a:	4401      	add	r1, r0
 800262c:	1850      	adds	r0, r2, r1
 800262e:	4283      	cmp	r3, r0
 8002630:	6011      	str	r1, [r2, #0]
 8002632:	d1e0      	bne.n	80025f6 <_free_r+0x22>
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	6053      	str	r3, [r2, #4]
 800263a:	4408      	add	r0, r1
 800263c:	6010      	str	r0, [r2, #0]
 800263e:	e7da      	b.n	80025f6 <_free_r+0x22>
 8002640:	d902      	bls.n	8002648 <_free_r+0x74>
 8002642:	230c      	movs	r3, #12
 8002644:	602b      	str	r3, [r5, #0]
 8002646:	e7d6      	b.n	80025f6 <_free_r+0x22>
 8002648:	6820      	ldr	r0, [r4, #0]
 800264a:	1821      	adds	r1, r4, r0
 800264c:	428b      	cmp	r3, r1
 800264e:	bf04      	itt	eq
 8002650:	6819      	ldreq	r1, [r3, #0]
 8002652:	685b      	ldreq	r3, [r3, #4]
 8002654:	6063      	str	r3, [r4, #4]
 8002656:	bf04      	itt	eq
 8002658:	1809      	addeq	r1, r1, r0
 800265a:	6021      	streq	r1, [r4, #0]
 800265c:	6054      	str	r4, [r2, #4]
 800265e:	e7ca      	b.n	80025f6 <_free_r+0x22>
 8002660:	bd38      	pop	{r3, r4, r5, pc}
 8002662:	bf00      	nop
 8002664:	20000268 	.word	0x20000268

08002668 <sbrk_aligned>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	4e0f      	ldr	r6, [pc, #60]	@ (80026a8 <sbrk_aligned+0x40>)
 800266c:	460c      	mov	r4, r1
 800266e:	6831      	ldr	r1, [r6, #0]
 8002670:	4605      	mov	r5, r0
 8002672:	b911      	cbnz	r1, 800267a <sbrk_aligned+0x12>
 8002674:	f000 fce8 	bl	8003048 <_sbrk_r>
 8002678:	6030      	str	r0, [r6, #0]
 800267a:	4621      	mov	r1, r4
 800267c:	4628      	mov	r0, r5
 800267e:	f000 fce3 	bl	8003048 <_sbrk_r>
 8002682:	1c43      	adds	r3, r0, #1
 8002684:	d103      	bne.n	800268e <sbrk_aligned+0x26>
 8002686:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800268a:	4620      	mov	r0, r4
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	1cc4      	adds	r4, r0, #3
 8002690:	f024 0403 	bic.w	r4, r4, #3
 8002694:	42a0      	cmp	r0, r4
 8002696:	d0f8      	beq.n	800268a <sbrk_aligned+0x22>
 8002698:	1a21      	subs	r1, r4, r0
 800269a:	4628      	mov	r0, r5
 800269c:	f000 fcd4 	bl	8003048 <_sbrk_r>
 80026a0:	3001      	adds	r0, #1
 80026a2:	d1f2      	bne.n	800268a <sbrk_aligned+0x22>
 80026a4:	e7ef      	b.n	8002686 <sbrk_aligned+0x1e>
 80026a6:	bf00      	nop
 80026a8:	20000264 	.word	0x20000264

080026ac <_malloc_r>:
 80026ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026b0:	1ccd      	adds	r5, r1, #3
 80026b2:	f025 0503 	bic.w	r5, r5, #3
 80026b6:	3508      	adds	r5, #8
 80026b8:	2d0c      	cmp	r5, #12
 80026ba:	bf38      	it	cc
 80026bc:	250c      	movcc	r5, #12
 80026be:	2d00      	cmp	r5, #0
 80026c0:	4606      	mov	r6, r0
 80026c2:	db01      	blt.n	80026c8 <_malloc_r+0x1c>
 80026c4:	42a9      	cmp	r1, r5
 80026c6:	d904      	bls.n	80026d2 <_malloc_r+0x26>
 80026c8:	230c      	movs	r3, #12
 80026ca:	6033      	str	r3, [r6, #0]
 80026cc:	2000      	movs	r0, #0
 80026ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80027a8 <_malloc_r+0xfc>
 80026d6:	f000 f869 	bl	80027ac <__malloc_lock>
 80026da:	f8d8 3000 	ldr.w	r3, [r8]
 80026de:	461c      	mov	r4, r3
 80026e0:	bb44      	cbnz	r4, 8002734 <_malloc_r+0x88>
 80026e2:	4629      	mov	r1, r5
 80026e4:	4630      	mov	r0, r6
 80026e6:	f7ff ffbf 	bl	8002668 <sbrk_aligned>
 80026ea:	1c43      	adds	r3, r0, #1
 80026ec:	4604      	mov	r4, r0
 80026ee:	d158      	bne.n	80027a2 <_malloc_r+0xf6>
 80026f0:	f8d8 4000 	ldr.w	r4, [r8]
 80026f4:	4627      	mov	r7, r4
 80026f6:	2f00      	cmp	r7, #0
 80026f8:	d143      	bne.n	8002782 <_malloc_r+0xd6>
 80026fa:	2c00      	cmp	r4, #0
 80026fc:	d04b      	beq.n	8002796 <_malloc_r+0xea>
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	4639      	mov	r1, r7
 8002702:	4630      	mov	r0, r6
 8002704:	eb04 0903 	add.w	r9, r4, r3
 8002708:	f000 fc9e 	bl	8003048 <_sbrk_r>
 800270c:	4581      	cmp	r9, r0
 800270e:	d142      	bne.n	8002796 <_malloc_r+0xea>
 8002710:	6821      	ldr	r1, [r4, #0]
 8002712:	1a6d      	subs	r5, r5, r1
 8002714:	4629      	mov	r1, r5
 8002716:	4630      	mov	r0, r6
 8002718:	f7ff ffa6 	bl	8002668 <sbrk_aligned>
 800271c:	3001      	adds	r0, #1
 800271e:	d03a      	beq.n	8002796 <_malloc_r+0xea>
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	442b      	add	r3, r5
 8002724:	6023      	str	r3, [r4, #0]
 8002726:	f8d8 3000 	ldr.w	r3, [r8]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	bb62      	cbnz	r2, 8002788 <_malloc_r+0xdc>
 800272e:	f8c8 7000 	str.w	r7, [r8]
 8002732:	e00f      	b.n	8002754 <_malloc_r+0xa8>
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	1b52      	subs	r2, r2, r5
 8002738:	d420      	bmi.n	800277c <_malloc_r+0xd0>
 800273a:	2a0b      	cmp	r2, #11
 800273c:	d917      	bls.n	800276e <_malloc_r+0xc2>
 800273e:	1961      	adds	r1, r4, r5
 8002740:	42a3      	cmp	r3, r4
 8002742:	6025      	str	r5, [r4, #0]
 8002744:	bf18      	it	ne
 8002746:	6059      	strne	r1, [r3, #4]
 8002748:	6863      	ldr	r3, [r4, #4]
 800274a:	bf08      	it	eq
 800274c:	f8c8 1000 	streq.w	r1, [r8]
 8002750:	5162      	str	r2, [r4, r5]
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	4630      	mov	r0, r6
 8002756:	f000 f82f 	bl	80027b8 <__malloc_unlock>
 800275a:	f104 000b 	add.w	r0, r4, #11
 800275e:	1d23      	adds	r3, r4, #4
 8002760:	f020 0007 	bic.w	r0, r0, #7
 8002764:	1ac2      	subs	r2, r0, r3
 8002766:	bf1c      	itt	ne
 8002768:	1a1b      	subne	r3, r3, r0
 800276a:	50a3      	strne	r3, [r4, r2]
 800276c:	e7af      	b.n	80026ce <_malloc_r+0x22>
 800276e:	6862      	ldr	r2, [r4, #4]
 8002770:	42a3      	cmp	r3, r4
 8002772:	bf0c      	ite	eq
 8002774:	f8c8 2000 	streq.w	r2, [r8]
 8002778:	605a      	strne	r2, [r3, #4]
 800277a:	e7eb      	b.n	8002754 <_malloc_r+0xa8>
 800277c:	4623      	mov	r3, r4
 800277e:	6864      	ldr	r4, [r4, #4]
 8002780:	e7ae      	b.n	80026e0 <_malloc_r+0x34>
 8002782:	463c      	mov	r4, r7
 8002784:	687f      	ldr	r7, [r7, #4]
 8002786:	e7b6      	b.n	80026f6 <_malloc_r+0x4a>
 8002788:	461a      	mov	r2, r3
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	42a3      	cmp	r3, r4
 800278e:	d1fb      	bne.n	8002788 <_malloc_r+0xdc>
 8002790:	2300      	movs	r3, #0
 8002792:	6053      	str	r3, [r2, #4]
 8002794:	e7de      	b.n	8002754 <_malloc_r+0xa8>
 8002796:	230c      	movs	r3, #12
 8002798:	6033      	str	r3, [r6, #0]
 800279a:	4630      	mov	r0, r6
 800279c:	f000 f80c 	bl	80027b8 <__malloc_unlock>
 80027a0:	e794      	b.n	80026cc <_malloc_r+0x20>
 80027a2:	6005      	str	r5, [r0, #0]
 80027a4:	e7d6      	b.n	8002754 <_malloc_r+0xa8>
 80027a6:	bf00      	nop
 80027a8:	20000268 	.word	0x20000268

080027ac <__malloc_lock>:
 80027ac:	4801      	ldr	r0, [pc, #4]	@ (80027b4 <__malloc_lock+0x8>)
 80027ae:	f7ff bf0e 	b.w	80025ce <__retarget_lock_acquire_recursive>
 80027b2:	bf00      	nop
 80027b4:	20000260 	.word	0x20000260

080027b8 <__malloc_unlock>:
 80027b8:	4801      	ldr	r0, [pc, #4]	@ (80027c0 <__malloc_unlock+0x8>)
 80027ba:	f7ff bf09 	b.w	80025d0 <__retarget_lock_release_recursive>
 80027be:	bf00      	nop
 80027c0:	20000260 	.word	0x20000260

080027c4 <__sfputc_r>:
 80027c4:	6893      	ldr	r3, [r2, #8]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	b410      	push	{r4}
 80027cc:	6093      	str	r3, [r2, #8]
 80027ce:	da08      	bge.n	80027e2 <__sfputc_r+0x1e>
 80027d0:	6994      	ldr	r4, [r2, #24]
 80027d2:	42a3      	cmp	r3, r4
 80027d4:	db01      	blt.n	80027da <__sfputc_r+0x16>
 80027d6:	290a      	cmp	r1, #10
 80027d8:	d103      	bne.n	80027e2 <__sfputc_r+0x1e>
 80027da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027de:	f000 bb9f 	b.w	8002f20 <__swbuf_r>
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	1c58      	adds	r0, r3, #1
 80027e6:	6010      	str	r0, [r2, #0]
 80027e8:	7019      	strb	r1, [r3, #0]
 80027ea:	4608      	mov	r0, r1
 80027ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <__sfputs_r>:
 80027f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f4:	4606      	mov	r6, r0
 80027f6:	460f      	mov	r7, r1
 80027f8:	4614      	mov	r4, r2
 80027fa:	18d5      	adds	r5, r2, r3
 80027fc:	42ac      	cmp	r4, r5
 80027fe:	d101      	bne.n	8002804 <__sfputs_r+0x12>
 8002800:	2000      	movs	r0, #0
 8002802:	e007      	b.n	8002814 <__sfputs_r+0x22>
 8002804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002808:	463a      	mov	r2, r7
 800280a:	4630      	mov	r0, r6
 800280c:	f7ff ffda 	bl	80027c4 <__sfputc_r>
 8002810:	1c43      	adds	r3, r0, #1
 8002812:	d1f3      	bne.n	80027fc <__sfputs_r+0xa>
 8002814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002818 <_vfiprintf_r>:
 8002818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281c:	460d      	mov	r5, r1
 800281e:	b09d      	sub	sp, #116	@ 0x74
 8002820:	4614      	mov	r4, r2
 8002822:	4698      	mov	r8, r3
 8002824:	4606      	mov	r6, r0
 8002826:	b118      	cbz	r0, 8002830 <_vfiprintf_r+0x18>
 8002828:	6a03      	ldr	r3, [r0, #32]
 800282a:	b90b      	cbnz	r3, 8002830 <_vfiprintf_r+0x18>
 800282c:	f7ff fdc2 	bl	80023b4 <__sinit>
 8002830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002832:	07d9      	lsls	r1, r3, #31
 8002834:	d405      	bmi.n	8002842 <_vfiprintf_r+0x2a>
 8002836:	89ab      	ldrh	r3, [r5, #12]
 8002838:	059a      	lsls	r2, r3, #22
 800283a:	d402      	bmi.n	8002842 <_vfiprintf_r+0x2a>
 800283c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800283e:	f7ff fec6 	bl	80025ce <__retarget_lock_acquire_recursive>
 8002842:	89ab      	ldrh	r3, [r5, #12]
 8002844:	071b      	lsls	r3, r3, #28
 8002846:	d501      	bpl.n	800284c <_vfiprintf_r+0x34>
 8002848:	692b      	ldr	r3, [r5, #16]
 800284a:	b99b      	cbnz	r3, 8002874 <_vfiprintf_r+0x5c>
 800284c:	4629      	mov	r1, r5
 800284e:	4630      	mov	r0, r6
 8002850:	f000 fba4 	bl	8002f9c <__swsetup_r>
 8002854:	b170      	cbz	r0, 8002874 <_vfiprintf_r+0x5c>
 8002856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002858:	07dc      	lsls	r4, r3, #31
 800285a:	d504      	bpl.n	8002866 <_vfiprintf_r+0x4e>
 800285c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002860:	b01d      	add	sp, #116	@ 0x74
 8002862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002866:	89ab      	ldrh	r3, [r5, #12]
 8002868:	0598      	lsls	r0, r3, #22
 800286a:	d4f7      	bmi.n	800285c <_vfiprintf_r+0x44>
 800286c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800286e:	f7ff feaf 	bl	80025d0 <__retarget_lock_release_recursive>
 8002872:	e7f3      	b.n	800285c <_vfiprintf_r+0x44>
 8002874:	2300      	movs	r3, #0
 8002876:	9309      	str	r3, [sp, #36]	@ 0x24
 8002878:	2320      	movs	r3, #32
 800287a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800287e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002882:	2330      	movs	r3, #48	@ 0x30
 8002884:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002a34 <_vfiprintf_r+0x21c>
 8002888:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800288c:	f04f 0901 	mov.w	r9, #1
 8002890:	4623      	mov	r3, r4
 8002892:	469a      	mov	sl, r3
 8002894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002898:	b10a      	cbz	r2, 800289e <_vfiprintf_r+0x86>
 800289a:	2a25      	cmp	r2, #37	@ 0x25
 800289c:	d1f9      	bne.n	8002892 <_vfiprintf_r+0x7a>
 800289e:	ebba 0b04 	subs.w	fp, sl, r4
 80028a2:	d00b      	beq.n	80028bc <_vfiprintf_r+0xa4>
 80028a4:	465b      	mov	r3, fp
 80028a6:	4622      	mov	r2, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	4630      	mov	r0, r6
 80028ac:	f7ff ffa1 	bl	80027f2 <__sfputs_r>
 80028b0:	3001      	adds	r0, #1
 80028b2:	f000 80a7 	beq.w	8002a04 <_vfiprintf_r+0x1ec>
 80028b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80028b8:	445a      	add	r2, fp
 80028ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80028bc:	f89a 3000 	ldrb.w	r3, [sl]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 809f 	beq.w	8002a04 <_vfiprintf_r+0x1ec>
 80028c6:	2300      	movs	r3, #0
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028d0:	f10a 0a01 	add.w	sl, sl, #1
 80028d4:	9304      	str	r3, [sp, #16]
 80028d6:	9307      	str	r3, [sp, #28]
 80028d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80028de:	4654      	mov	r4, sl
 80028e0:	2205      	movs	r2, #5
 80028e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028e6:	4853      	ldr	r0, [pc, #332]	@ (8002a34 <_vfiprintf_r+0x21c>)
 80028e8:	f7fd fc7a 	bl	80001e0 <memchr>
 80028ec:	9a04      	ldr	r2, [sp, #16]
 80028ee:	b9d8      	cbnz	r0, 8002928 <_vfiprintf_r+0x110>
 80028f0:	06d1      	lsls	r1, r2, #27
 80028f2:	bf44      	itt	mi
 80028f4:	2320      	movmi	r3, #32
 80028f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028fa:	0713      	lsls	r3, r2, #28
 80028fc:	bf44      	itt	mi
 80028fe:	232b      	movmi	r3, #43	@ 0x2b
 8002900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002904:	f89a 3000 	ldrb.w	r3, [sl]
 8002908:	2b2a      	cmp	r3, #42	@ 0x2a
 800290a:	d015      	beq.n	8002938 <_vfiprintf_r+0x120>
 800290c:	9a07      	ldr	r2, [sp, #28]
 800290e:	4654      	mov	r4, sl
 8002910:	2000      	movs	r0, #0
 8002912:	f04f 0c0a 	mov.w	ip, #10
 8002916:	4621      	mov	r1, r4
 8002918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800291c:	3b30      	subs	r3, #48	@ 0x30
 800291e:	2b09      	cmp	r3, #9
 8002920:	d94b      	bls.n	80029ba <_vfiprintf_r+0x1a2>
 8002922:	b1b0      	cbz	r0, 8002952 <_vfiprintf_r+0x13a>
 8002924:	9207      	str	r2, [sp, #28]
 8002926:	e014      	b.n	8002952 <_vfiprintf_r+0x13a>
 8002928:	eba0 0308 	sub.w	r3, r0, r8
 800292c:	fa09 f303 	lsl.w	r3, r9, r3
 8002930:	4313      	orrs	r3, r2
 8002932:	9304      	str	r3, [sp, #16]
 8002934:	46a2      	mov	sl, r4
 8002936:	e7d2      	b.n	80028de <_vfiprintf_r+0xc6>
 8002938:	9b03      	ldr	r3, [sp, #12]
 800293a:	1d19      	adds	r1, r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	9103      	str	r1, [sp, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	bfbb      	ittet	lt
 8002944:	425b      	neglt	r3, r3
 8002946:	f042 0202 	orrlt.w	r2, r2, #2
 800294a:	9307      	strge	r3, [sp, #28]
 800294c:	9307      	strlt	r3, [sp, #28]
 800294e:	bfb8      	it	lt
 8002950:	9204      	strlt	r2, [sp, #16]
 8002952:	7823      	ldrb	r3, [r4, #0]
 8002954:	2b2e      	cmp	r3, #46	@ 0x2e
 8002956:	d10a      	bne.n	800296e <_vfiprintf_r+0x156>
 8002958:	7863      	ldrb	r3, [r4, #1]
 800295a:	2b2a      	cmp	r3, #42	@ 0x2a
 800295c:	d132      	bne.n	80029c4 <_vfiprintf_r+0x1ac>
 800295e:	9b03      	ldr	r3, [sp, #12]
 8002960:	1d1a      	adds	r2, r3, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	9203      	str	r2, [sp, #12]
 8002966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800296a:	3402      	adds	r4, #2
 800296c:	9305      	str	r3, [sp, #20]
 800296e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002a44 <_vfiprintf_r+0x22c>
 8002972:	7821      	ldrb	r1, [r4, #0]
 8002974:	2203      	movs	r2, #3
 8002976:	4650      	mov	r0, sl
 8002978:	f7fd fc32 	bl	80001e0 <memchr>
 800297c:	b138      	cbz	r0, 800298e <_vfiprintf_r+0x176>
 800297e:	9b04      	ldr	r3, [sp, #16]
 8002980:	eba0 000a 	sub.w	r0, r0, sl
 8002984:	2240      	movs	r2, #64	@ 0x40
 8002986:	4082      	lsls	r2, r0
 8002988:	4313      	orrs	r3, r2
 800298a:	3401      	adds	r4, #1
 800298c:	9304      	str	r3, [sp, #16]
 800298e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002992:	4829      	ldr	r0, [pc, #164]	@ (8002a38 <_vfiprintf_r+0x220>)
 8002994:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002998:	2206      	movs	r2, #6
 800299a:	f7fd fc21 	bl	80001e0 <memchr>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d03f      	beq.n	8002a22 <_vfiprintf_r+0x20a>
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <_vfiprintf_r+0x224>)
 80029a4:	bb1b      	cbnz	r3, 80029ee <_vfiprintf_r+0x1d6>
 80029a6:	9b03      	ldr	r3, [sp, #12]
 80029a8:	3307      	adds	r3, #7
 80029aa:	f023 0307 	bic.w	r3, r3, #7
 80029ae:	3308      	adds	r3, #8
 80029b0:	9303      	str	r3, [sp, #12]
 80029b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029b4:	443b      	add	r3, r7
 80029b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80029b8:	e76a      	b.n	8002890 <_vfiprintf_r+0x78>
 80029ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80029be:	460c      	mov	r4, r1
 80029c0:	2001      	movs	r0, #1
 80029c2:	e7a8      	b.n	8002916 <_vfiprintf_r+0xfe>
 80029c4:	2300      	movs	r3, #0
 80029c6:	3401      	adds	r4, #1
 80029c8:	9305      	str	r3, [sp, #20]
 80029ca:	4619      	mov	r1, r3
 80029cc:	f04f 0c0a 	mov.w	ip, #10
 80029d0:	4620      	mov	r0, r4
 80029d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029d6:	3a30      	subs	r2, #48	@ 0x30
 80029d8:	2a09      	cmp	r2, #9
 80029da:	d903      	bls.n	80029e4 <_vfiprintf_r+0x1cc>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0c6      	beq.n	800296e <_vfiprintf_r+0x156>
 80029e0:	9105      	str	r1, [sp, #20]
 80029e2:	e7c4      	b.n	800296e <_vfiprintf_r+0x156>
 80029e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80029e8:	4604      	mov	r4, r0
 80029ea:	2301      	movs	r3, #1
 80029ec:	e7f0      	b.n	80029d0 <_vfiprintf_r+0x1b8>
 80029ee:	ab03      	add	r3, sp, #12
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	462a      	mov	r2, r5
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <_vfiprintf_r+0x228>)
 80029f6:	a904      	add	r1, sp, #16
 80029f8:	4630      	mov	r0, r6
 80029fa:	f3af 8000 	nop.w
 80029fe:	4607      	mov	r7, r0
 8002a00:	1c78      	adds	r0, r7, #1
 8002a02:	d1d6      	bne.n	80029b2 <_vfiprintf_r+0x19a>
 8002a04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a06:	07d9      	lsls	r1, r3, #31
 8002a08:	d405      	bmi.n	8002a16 <_vfiprintf_r+0x1fe>
 8002a0a:	89ab      	ldrh	r3, [r5, #12]
 8002a0c:	059a      	lsls	r2, r3, #22
 8002a0e:	d402      	bmi.n	8002a16 <_vfiprintf_r+0x1fe>
 8002a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a12:	f7ff fddd 	bl	80025d0 <__retarget_lock_release_recursive>
 8002a16:	89ab      	ldrh	r3, [r5, #12]
 8002a18:	065b      	lsls	r3, r3, #25
 8002a1a:	f53f af1f 	bmi.w	800285c <_vfiprintf_r+0x44>
 8002a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a20:	e71e      	b.n	8002860 <_vfiprintf_r+0x48>
 8002a22:	ab03      	add	r3, sp, #12
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	462a      	mov	r2, r5
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <_vfiprintf_r+0x228>)
 8002a2a:	a904      	add	r1, sp, #16
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f000 f879 	bl	8002b24 <_printf_i>
 8002a32:	e7e4      	b.n	80029fe <_vfiprintf_r+0x1e6>
 8002a34:	08003284 	.word	0x08003284
 8002a38:	0800328e 	.word	0x0800328e
 8002a3c:	00000000 	.word	0x00000000
 8002a40:	080027f3 	.word	0x080027f3
 8002a44:	0800328a 	.word	0x0800328a

08002a48 <_printf_common>:
 8002a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	4698      	mov	r8, r3
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	690b      	ldr	r3, [r1, #16]
 8002a54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bfb8      	it	lt
 8002a5c:	4613      	movlt	r3, r2
 8002a5e:	6033      	str	r3, [r6, #0]
 8002a60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a64:	4607      	mov	r7, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	b10a      	cbz	r2, 8002a6e <_printf_common+0x26>
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	6033      	str	r3, [r6, #0]
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	0699      	lsls	r1, r3, #26
 8002a72:	bf42      	ittt	mi
 8002a74:	6833      	ldrmi	r3, [r6, #0]
 8002a76:	3302      	addmi	r3, #2
 8002a78:	6033      	strmi	r3, [r6, #0]
 8002a7a:	6825      	ldr	r5, [r4, #0]
 8002a7c:	f015 0506 	ands.w	r5, r5, #6
 8002a80:	d106      	bne.n	8002a90 <_printf_common+0x48>
 8002a82:	f104 0a19 	add.w	sl, r4, #25
 8002a86:	68e3      	ldr	r3, [r4, #12]
 8002a88:	6832      	ldr	r2, [r6, #0]
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	42ab      	cmp	r3, r5
 8002a8e:	dc26      	bgt.n	8002ade <_printf_common+0x96>
 8002a90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a94:	6822      	ldr	r2, [r4, #0]
 8002a96:	3b00      	subs	r3, #0
 8002a98:	bf18      	it	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	0692      	lsls	r2, r2, #26
 8002a9e:	d42b      	bmi.n	8002af8 <_printf_common+0xb0>
 8002aa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	47c8      	blx	r9
 8002aaa:	3001      	adds	r0, #1
 8002aac:	d01e      	beq.n	8002aec <_printf_common+0xa4>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	f003 0306 	and.w	r3, r3, #6
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	bf02      	ittt	eq
 8002aba:	68e5      	ldreq	r5, [r4, #12]
 8002abc:	6833      	ldreq	r3, [r6, #0]
 8002abe:	1aed      	subeq	r5, r5, r3
 8002ac0:	68a3      	ldr	r3, [r4, #8]
 8002ac2:	bf0c      	ite	eq
 8002ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ac8:	2500      	movne	r5, #0
 8002aca:	4293      	cmp	r3, r2
 8002acc:	bfc4      	itt	gt
 8002ace:	1a9b      	subgt	r3, r3, r2
 8002ad0:	18ed      	addgt	r5, r5, r3
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	341a      	adds	r4, #26
 8002ad6:	42b5      	cmp	r5, r6
 8002ad8:	d11a      	bne.n	8002b10 <_printf_common+0xc8>
 8002ada:	2000      	movs	r0, #0
 8002adc:	e008      	b.n	8002af0 <_printf_common+0xa8>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	47c8      	blx	r9
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d103      	bne.n	8002af4 <_printf_common+0xac>
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af4:	3501      	adds	r5, #1
 8002af6:	e7c6      	b.n	8002a86 <_printf_common+0x3e>
 8002af8:	18e1      	adds	r1, r4, r3
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	2030      	movs	r0, #48	@ 0x30
 8002afe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b02:	4422      	add	r2, r4
 8002b04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	e7c7      	b.n	8002aa0 <_printf_common+0x58>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4622      	mov	r2, r4
 8002b14:	4641      	mov	r1, r8
 8002b16:	4638      	mov	r0, r7
 8002b18:	47c8      	blx	r9
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d0e6      	beq.n	8002aec <_printf_common+0xa4>
 8002b1e:	3601      	adds	r6, #1
 8002b20:	e7d9      	b.n	8002ad6 <_printf_common+0x8e>
	...

08002b24 <_printf_i>:
 8002b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b28:	7e0f      	ldrb	r7, [r1, #24]
 8002b2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b2c:	2f78      	cmp	r7, #120	@ 0x78
 8002b2e:	4691      	mov	r9, r2
 8002b30:	4680      	mov	r8, r0
 8002b32:	460c      	mov	r4, r1
 8002b34:	469a      	mov	sl, r3
 8002b36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b3a:	d807      	bhi.n	8002b4c <_printf_i+0x28>
 8002b3c:	2f62      	cmp	r7, #98	@ 0x62
 8002b3e:	d80a      	bhi.n	8002b56 <_printf_i+0x32>
 8002b40:	2f00      	cmp	r7, #0
 8002b42:	f000 80d1 	beq.w	8002ce8 <_printf_i+0x1c4>
 8002b46:	2f58      	cmp	r7, #88	@ 0x58
 8002b48:	f000 80b8 	beq.w	8002cbc <_printf_i+0x198>
 8002b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b54:	e03a      	b.n	8002bcc <_printf_i+0xa8>
 8002b56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b5a:	2b15      	cmp	r3, #21
 8002b5c:	d8f6      	bhi.n	8002b4c <_printf_i+0x28>
 8002b5e:	a101      	add	r1, pc, #4	@ (adr r1, 8002b64 <_printf_i+0x40>)
 8002b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b64:	08002bbd 	.word	0x08002bbd
 8002b68:	08002bd1 	.word	0x08002bd1
 8002b6c:	08002b4d 	.word	0x08002b4d
 8002b70:	08002b4d 	.word	0x08002b4d
 8002b74:	08002b4d 	.word	0x08002b4d
 8002b78:	08002b4d 	.word	0x08002b4d
 8002b7c:	08002bd1 	.word	0x08002bd1
 8002b80:	08002b4d 	.word	0x08002b4d
 8002b84:	08002b4d 	.word	0x08002b4d
 8002b88:	08002b4d 	.word	0x08002b4d
 8002b8c:	08002b4d 	.word	0x08002b4d
 8002b90:	08002ccf 	.word	0x08002ccf
 8002b94:	08002bfb 	.word	0x08002bfb
 8002b98:	08002c89 	.word	0x08002c89
 8002b9c:	08002b4d 	.word	0x08002b4d
 8002ba0:	08002b4d 	.word	0x08002b4d
 8002ba4:	08002cf1 	.word	0x08002cf1
 8002ba8:	08002b4d 	.word	0x08002b4d
 8002bac:	08002bfb 	.word	0x08002bfb
 8002bb0:	08002b4d 	.word	0x08002b4d
 8002bb4:	08002b4d 	.word	0x08002b4d
 8002bb8:	08002c91 	.word	0x08002c91
 8002bbc:	6833      	ldr	r3, [r6, #0]
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6032      	str	r2, [r6, #0]
 8002bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e09c      	b.n	8002d0a <_printf_i+0x1e6>
 8002bd0:	6833      	ldr	r3, [r6, #0]
 8002bd2:	6820      	ldr	r0, [r4, #0]
 8002bd4:	1d19      	adds	r1, r3, #4
 8002bd6:	6031      	str	r1, [r6, #0]
 8002bd8:	0606      	lsls	r6, r0, #24
 8002bda:	d501      	bpl.n	8002be0 <_printf_i+0xbc>
 8002bdc:	681d      	ldr	r5, [r3, #0]
 8002bde:	e003      	b.n	8002be8 <_printf_i+0xc4>
 8002be0:	0645      	lsls	r5, r0, #25
 8002be2:	d5fb      	bpl.n	8002bdc <_printf_i+0xb8>
 8002be4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002be8:	2d00      	cmp	r5, #0
 8002bea:	da03      	bge.n	8002bf4 <_printf_i+0xd0>
 8002bec:	232d      	movs	r3, #45	@ 0x2d
 8002bee:	426d      	negs	r5, r5
 8002bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bf4:	4858      	ldr	r0, [pc, #352]	@ (8002d58 <_printf_i+0x234>)
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	e011      	b.n	8002c1e <_printf_i+0xfa>
 8002bfa:	6821      	ldr	r1, [r4, #0]
 8002bfc:	6833      	ldr	r3, [r6, #0]
 8002bfe:	0608      	lsls	r0, r1, #24
 8002c00:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c04:	d402      	bmi.n	8002c0c <_printf_i+0xe8>
 8002c06:	0649      	lsls	r1, r1, #25
 8002c08:	bf48      	it	mi
 8002c0a:	b2ad      	uxthmi	r5, r5
 8002c0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c0e:	4852      	ldr	r0, [pc, #328]	@ (8002d58 <_printf_i+0x234>)
 8002c10:	6033      	str	r3, [r6, #0]
 8002c12:	bf14      	ite	ne
 8002c14:	230a      	movne	r3, #10
 8002c16:	2308      	moveq	r3, #8
 8002c18:	2100      	movs	r1, #0
 8002c1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c1e:	6866      	ldr	r6, [r4, #4]
 8002c20:	60a6      	str	r6, [r4, #8]
 8002c22:	2e00      	cmp	r6, #0
 8002c24:	db05      	blt.n	8002c32 <_printf_i+0x10e>
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	432e      	orrs	r6, r5
 8002c2a:	f021 0104 	bic.w	r1, r1, #4
 8002c2e:	6021      	str	r1, [r4, #0]
 8002c30:	d04b      	beq.n	8002cca <_printf_i+0x1a6>
 8002c32:	4616      	mov	r6, r2
 8002c34:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c38:	fb03 5711 	mls	r7, r3, r1, r5
 8002c3c:	5dc7      	ldrb	r7, [r0, r7]
 8002c3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c42:	462f      	mov	r7, r5
 8002c44:	42bb      	cmp	r3, r7
 8002c46:	460d      	mov	r5, r1
 8002c48:	d9f4      	bls.n	8002c34 <_printf_i+0x110>
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d10b      	bne.n	8002c66 <_printf_i+0x142>
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	07df      	lsls	r7, r3, #31
 8002c52:	d508      	bpl.n	8002c66 <_printf_i+0x142>
 8002c54:	6923      	ldr	r3, [r4, #16]
 8002c56:	6861      	ldr	r1, [r4, #4]
 8002c58:	4299      	cmp	r1, r3
 8002c5a:	bfde      	ittt	le
 8002c5c:	2330      	movle	r3, #48	@ 0x30
 8002c5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c62:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002c66:	1b92      	subs	r2, r2, r6
 8002c68:	6122      	str	r2, [r4, #16]
 8002c6a:	f8cd a000 	str.w	sl, [sp]
 8002c6e:	464b      	mov	r3, r9
 8002c70:	aa03      	add	r2, sp, #12
 8002c72:	4621      	mov	r1, r4
 8002c74:	4640      	mov	r0, r8
 8002c76:	f7ff fee7 	bl	8002a48 <_printf_common>
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	d14a      	bne.n	8002d14 <_printf_i+0x1f0>
 8002c7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c82:	b004      	add	sp, #16
 8002c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	f043 0320 	orr.w	r3, r3, #32
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	4832      	ldr	r0, [pc, #200]	@ (8002d5c <_printf_i+0x238>)
 8002c92:	2778      	movs	r7, #120	@ 0x78
 8002c94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	6831      	ldr	r1, [r6, #0]
 8002c9c:	061f      	lsls	r7, r3, #24
 8002c9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002ca2:	d402      	bmi.n	8002caa <_printf_i+0x186>
 8002ca4:	065f      	lsls	r7, r3, #25
 8002ca6:	bf48      	it	mi
 8002ca8:	b2ad      	uxthmi	r5, r5
 8002caa:	6031      	str	r1, [r6, #0]
 8002cac:	07d9      	lsls	r1, r3, #31
 8002cae:	bf44      	itt	mi
 8002cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8002cb4:	6023      	strmi	r3, [r4, #0]
 8002cb6:	b11d      	cbz	r5, 8002cc0 <_printf_i+0x19c>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	e7ad      	b.n	8002c18 <_printf_i+0xf4>
 8002cbc:	4826      	ldr	r0, [pc, #152]	@ (8002d58 <_printf_i+0x234>)
 8002cbe:	e7e9      	b.n	8002c94 <_printf_i+0x170>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	f023 0320 	bic.w	r3, r3, #32
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	e7f6      	b.n	8002cb8 <_printf_i+0x194>
 8002cca:	4616      	mov	r6, r2
 8002ccc:	e7bd      	b.n	8002c4a <_printf_i+0x126>
 8002cce:	6833      	ldr	r3, [r6, #0]
 8002cd0:	6825      	ldr	r5, [r4, #0]
 8002cd2:	6961      	ldr	r1, [r4, #20]
 8002cd4:	1d18      	adds	r0, r3, #4
 8002cd6:	6030      	str	r0, [r6, #0]
 8002cd8:	062e      	lsls	r6, r5, #24
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	d501      	bpl.n	8002ce2 <_printf_i+0x1be>
 8002cde:	6019      	str	r1, [r3, #0]
 8002ce0:	e002      	b.n	8002ce8 <_printf_i+0x1c4>
 8002ce2:	0668      	lsls	r0, r5, #25
 8002ce4:	d5fb      	bpl.n	8002cde <_printf_i+0x1ba>
 8002ce6:	8019      	strh	r1, [r3, #0]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	4616      	mov	r6, r2
 8002cee:	e7bc      	b.n	8002c6a <_printf_i+0x146>
 8002cf0:	6833      	ldr	r3, [r6, #0]
 8002cf2:	1d1a      	adds	r2, r3, #4
 8002cf4:	6032      	str	r2, [r6, #0]
 8002cf6:	681e      	ldr	r6, [r3, #0]
 8002cf8:	6862      	ldr	r2, [r4, #4]
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f7fd fa6f 	bl	80001e0 <memchr>
 8002d02:	b108      	cbz	r0, 8002d08 <_printf_i+0x1e4>
 8002d04:	1b80      	subs	r0, r0, r6
 8002d06:	6060      	str	r0, [r4, #4]
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	6123      	str	r3, [r4, #16]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d12:	e7aa      	b.n	8002c6a <_printf_i+0x146>
 8002d14:	6923      	ldr	r3, [r4, #16]
 8002d16:	4632      	mov	r2, r6
 8002d18:	4649      	mov	r1, r9
 8002d1a:	4640      	mov	r0, r8
 8002d1c:	47d0      	blx	sl
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d0ad      	beq.n	8002c7e <_printf_i+0x15a>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	079b      	lsls	r3, r3, #30
 8002d26:	d413      	bmi.n	8002d50 <_printf_i+0x22c>
 8002d28:	68e0      	ldr	r0, [r4, #12]
 8002d2a:	9b03      	ldr	r3, [sp, #12]
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	bfb8      	it	lt
 8002d30:	4618      	movlt	r0, r3
 8002d32:	e7a6      	b.n	8002c82 <_printf_i+0x15e>
 8002d34:	2301      	movs	r3, #1
 8002d36:	4632      	mov	r2, r6
 8002d38:	4649      	mov	r1, r9
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	47d0      	blx	sl
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d09d      	beq.n	8002c7e <_printf_i+0x15a>
 8002d42:	3501      	adds	r5, #1
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	9903      	ldr	r1, [sp, #12]
 8002d48:	1a5b      	subs	r3, r3, r1
 8002d4a:	42ab      	cmp	r3, r5
 8002d4c:	dcf2      	bgt.n	8002d34 <_printf_i+0x210>
 8002d4e:	e7eb      	b.n	8002d28 <_printf_i+0x204>
 8002d50:	2500      	movs	r5, #0
 8002d52:	f104 0619 	add.w	r6, r4, #25
 8002d56:	e7f5      	b.n	8002d44 <_printf_i+0x220>
 8002d58:	08003295 	.word	0x08003295
 8002d5c:	080032a6 	.word	0x080032a6

08002d60 <__sflush_r>:
 8002d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d68:	0716      	lsls	r6, r2, #28
 8002d6a:	4605      	mov	r5, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	d454      	bmi.n	8002e1a <__sflush_r+0xba>
 8002d70:	684b      	ldr	r3, [r1, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dc02      	bgt.n	8002d7c <__sflush_r+0x1c>
 8002d76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dd48      	ble.n	8002e0e <__sflush_r+0xae>
 8002d7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d7e:	2e00      	cmp	r6, #0
 8002d80:	d045      	beq.n	8002e0e <__sflush_r+0xae>
 8002d82:	2300      	movs	r3, #0
 8002d84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d88:	682f      	ldr	r7, [r5, #0]
 8002d8a:	6a21      	ldr	r1, [r4, #32]
 8002d8c:	602b      	str	r3, [r5, #0]
 8002d8e:	d030      	beq.n	8002df2 <__sflush_r+0x92>
 8002d90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	0759      	lsls	r1, r3, #29
 8002d96:	d505      	bpl.n	8002da4 <__sflush_r+0x44>
 8002d98:	6863      	ldr	r3, [r4, #4]
 8002d9a:	1ad2      	subs	r2, r2, r3
 8002d9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d9e:	b10b      	cbz	r3, 8002da4 <__sflush_r+0x44>
 8002da0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002da2:	1ad2      	subs	r2, r2, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002da8:	6a21      	ldr	r1, [r4, #32]
 8002daa:	4628      	mov	r0, r5
 8002dac:	47b0      	blx	r6
 8002dae:	1c43      	adds	r3, r0, #1
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	d106      	bne.n	8002dc2 <__sflush_r+0x62>
 8002db4:	6829      	ldr	r1, [r5, #0]
 8002db6:	291d      	cmp	r1, #29
 8002db8:	d82b      	bhi.n	8002e12 <__sflush_r+0xb2>
 8002dba:	4a2a      	ldr	r2, [pc, #168]	@ (8002e64 <__sflush_r+0x104>)
 8002dbc:	40ca      	lsrs	r2, r1
 8002dbe:	07d6      	lsls	r6, r2, #31
 8002dc0:	d527      	bpl.n	8002e12 <__sflush_r+0xb2>
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	6062      	str	r2, [r4, #4]
 8002dc6:	04d9      	lsls	r1, r3, #19
 8002dc8:	6922      	ldr	r2, [r4, #16]
 8002dca:	6022      	str	r2, [r4, #0]
 8002dcc:	d504      	bpl.n	8002dd8 <__sflush_r+0x78>
 8002dce:	1c42      	adds	r2, r0, #1
 8002dd0:	d101      	bne.n	8002dd6 <__sflush_r+0x76>
 8002dd2:	682b      	ldr	r3, [r5, #0]
 8002dd4:	b903      	cbnz	r3, 8002dd8 <__sflush_r+0x78>
 8002dd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8002dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002dda:	602f      	str	r7, [r5, #0]
 8002ddc:	b1b9      	cbz	r1, 8002e0e <__sflush_r+0xae>
 8002dde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002de2:	4299      	cmp	r1, r3
 8002de4:	d002      	beq.n	8002dec <__sflush_r+0x8c>
 8002de6:	4628      	mov	r0, r5
 8002de8:	f7ff fbf4 	bl	80025d4 <_free_r>
 8002dec:	2300      	movs	r3, #0
 8002dee:	6363      	str	r3, [r4, #52]	@ 0x34
 8002df0:	e00d      	b.n	8002e0e <__sflush_r+0xae>
 8002df2:	2301      	movs	r3, #1
 8002df4:	4628      	mov	r0, r5
 8002df6:	47b0      	blx	r6
 8002df8:	4602      	mov	r2, r0
 8002dfa:	1c50      	adds	r0, r2, #1
 8002dfc:	d1c9      	bne.n	8002d92 <__sflush_r+0x32>
 8002dfe:	682b      	ldr	r3, [r5, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0c6      	beq.n	8002d92 <__sflush_r+0x32>
 8002e04:	2b1d      	cmp	r3, #29
 8002e06:	d001      	beq.n	8002e0c <__sflush_r+0xac>
 8002e08:	2b16      	cmp	r3, #22
 8002e0a:	d11e      	bne.n	8002e4a <__sflush_r+0xea>
 8002e0c:	602f      	str	r7, [r5, #0]
 8002e0e:	2000      	movs	r0, #0
 8002e10:	e022      	b.n	8002e58 <__sflush_r+0xf8>
 8002e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	e01b      	b.n	8002e52 <__sflush_r+0xf2>
 8002e1a:	690f      	ldr	r7, [r1, #16]
 8002e1c:	2f00      	cmp	r7, #0
 8002e1e:	d0f6      	beq.n	8002e0e <__sflush_r+0xae>
 8002e20:	0793      	lsls	r3, r2, #30
 8002e22:	680e      	ldr	r6, [r1, #0]
 8002e24:	bf08      	it	eq
 8002e26:	694b      	ldreq	r3, [r1, #20]
 8002e28:	600f      	str	r7, [r1, #0]
 8002e2a:	bf18      	it	ne
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	eba6 0807 	sub.w	r8, r6, r7
 8002e32:	608b      	str	r3, [r1, #8]
 8002e34:	f1b8 0f00 	cmp.w	r8, #0
 8002e38:	dde9      	ble.n	8002e0e <__sflush_r+0xae>
 8002e3a:	6a21      	ldr	r1, [r4, #32]
 8002e3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002e3e:	4643      	mov	r3, r8
 8002e40:	463a      	mov	r2, r7
 8002e42:	4628      	mov	r0, r5
 8002e44:	47b0      	blx	r6
 8002e46:	2800      	cmp	r0, #0
 8002e48:	dc08      	bgt.n	8002e5c <__sflush_r+0xfc>
 8002e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e52:	81a3      	strh	r3, [r4, #12]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e5c:	4407      	add	r7, r0
 8002e5e:	eba8 0800 	sub.w	r8, r8, r0
 8002e62:	e7e7      	b.n	8002e34 <__sflush_r+0xd4>
 8002e64:	20400001 	.word	0x20400001

08002e68 <_fflush_r>:
 8002e68:	b538      	push	{r3, r4, r5, lr}
 8002e6a:	690b      	ldr	r3, [r1, #16]
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	b913      	cbnz	r3, 8002e78 <_fflush_r+0x10>
 8002e72:	2500      	movs	r5, #0
 8002e74:	4628      	mov	r0, r5
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	b118      	cbz	r0, 8002e82 <_fflush_r+0x1a>
 8002e7a:	6a03      	ldr	r3, [r0, #32]
 8002e7c:	b90b      	cbnz	r3, 8002e82 <_fflush_r+0x1a>
 8002e7e:	f7ff fa99 	bl	80023b4 <__sinit>
 8002e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f3      	beq.n	8002e72 <_fflush_r+0xa>
 8002e8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e8c:	07d0      	lsls	r0, r2, #31
 8002e8e:	d404      	bmi.n	8002e9a <_fflush_r+0x32>
 8002e90:	0599      	lsls	r1, r3, #22
 8002e92:	d402      	bmi.n	8002e9a <_fflush_r+0x32>
 8002e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e96:	f7ff fb9a 	bl	80025ce <__retarget_lock_acquire_recursive>
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	f7ff ff5f 	bl	8002d60 <__sflush_r>
 8002ea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ea4:	07da      	lsls	r2, r3, #31
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	d4e4      	bmi.n	8002e74 <_fflush_r+0xc>
 8002eaa:	89a3      	ldrh	r3, [r4, #12]
 8002eac:	059b      	lsls	r3, r3, #22
 8002eae:	d4e1      	bmi.n	8002e74 <_fflush_r+0xc>
 8002eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eb2:	f7ff fb8d 	bl	80025d0 <__retarget_lock_release_recursive>
 8002eb6:	e7dd      	b.n	8002e74 <_fflush_r+0xc>

08002eb8 <_putc_r>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	460d      	mov	r5, r1
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	b118      	cbz	r0, 8002eca <_putc_r+0x12>
 8002ec2:	6a03      	ldr	r3, [r0, #32]
 8002ec4:	b90b      	cbnz	r3, 8002eca <_putc_r+0x12>
 8002ec6:	f7ff fa75 	bl	80023b4 <__sinit>
 8002eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ecc:	07d8      	lsls	r0, r3, #31
 8002ece:	d405      	bmi.n	8002edc <_putc_r+0x24>
 8002ed0:	89a3      	ldrh	r3, [r4, #12]
 8002ed2:	0599      	lsls	r1, r3, #22
 8002ed4:	d402      	bmi.n	8002edc <_putc_r+0x24>
 8002ed6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ed8:	f7ff fb79 	bl	80025ce <__retarget_lock_acquire_recursive>
 8002edc:	68a3      	ldr	r3, [r4, #8]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	da05      	bge.n	8002ef2 <_putc_r+0x3a>
 8002ee6:	69a2      	ldr	r2, [r4, #24]
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	db12      	blt.n	8002f12 <_putc_r+0x5a>
 8002eec:	b2eb      	uxtb	r3, r5
 8002eee:	2b0a      	cmp	r3, #10
 8002ef0:	d00f      	beq.n	8002f12 <_putc_r+0x5a>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	6022      	str	r2, [r4, #0]
 8002ef8:	701d      	strb	r5, [r3, #0]
 8002efa:	b2ed      	uxtb	r5, r5
 8002efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002efe:	07da      	lsls	r2, r3, #31
 8002f00:	d405      	bmi.n	8002f0e <_putc_r+0x56>
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	059b      	lsls	r3, r3, #22
 8002f06:	d402      	bmi.n	8002f0e <_putc_r+0x56>
 8002f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f0a:	f7ff fb61 	bl	80025d0 <__retarget_lock_release_recursive>
 8002f0e:	4628      	mov	r0, r5
 8002f10:	bd70      	pop	{r4, r5, r6, pc}
 8002f12:	4629      	mov	r1, r5
 8002f14:	4622      	mov	r2, r4
 8002f16:	4630      	mov	r0, r6
 8002f18:	f000 f802 	bl	8002f20 <__swbuf_r>
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	e7ed      	b.n	8002efc <_putc_r+0x44>

08002f20 <__swbuf_r>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	460e      	mov	r6, r1
 8002f24:	4614      	mov	r4, r2
 8002f26:	4605      	mov	r5, r0
 8002f28:	b118      	cbz	r0, 8002f32 <__swbuf_r+0x12>
 8002f2a:	6a03      	ldr	r3, [r0, #32]
 8002f2c:	b90b      	cbnz	r3, 8002f32 <__swbuf_r+0x12>
 8002f2e:	f7ff fa41 	bl	80023b4 <__sinit>
 8002f32:	69a3      	ldr	r3, [r4, #24]
 8002f34:	60a3      	str	r3, [r4, #8]
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	071a      	lsls	r2, r3, #28
 8002f3a:	d501      	bpl.n	8002f40 <__swbuf_r+0x20>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	b943      	cbnz	r3, 8002f52 <__swbuf_r+0x32>
 8002f40:	4621      	mov	r1, r4
 8002f42:	4628      	mov	r0, r5
 8002f44:	f000 f82a 	bl	8002f9c <__swsetup_r>
 8002f48:	b118      	cbz	r0, 8002f52 <__swbuf_r+0x32>
 8002f4a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002f4e:	4638      	mov	r0, r7
 8002f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	6922      	ldr	r2, [r4, #16]
 8002f56:	1a98      	subs	r0, r3, r2
 8002f58:	6963      	ldr	r3, [r4, #20]
 8002f5a:	b2f6      	uxtb	r6, r6
 8002f5c:	4283      	cmp	r3, r0
 8002f5e:	4637      	mov	r7, r6
 8002f60:	dc05      	bgt.n	8002f6e <__swbuf_r+0x4e>
 8002f62:	4621      	mov	r1, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	f7ff ff7f 	bl	8002e68 <_fflush_r>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d1ed      	bne.n	8002f4a <__swbuf_r+0x2a>
 8002f6e:	68a3      	ldr	r3, [r4, #8]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	60a3      	str	r3, [r4, #8]
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	6022      	str	r2, [r4, #0]
 8002f7a:	701e      	strb	r6, [r3, #0]
 8002f7c:	6962      	ldr	r2, [r4, #20]
 8002f7e:	1c43      	adds	r3, r0, #1
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d004      	beq.n	8002f8e <__swbuf_r+0x6e>
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	07db      	lsls	r3, r3, #31
 8002f88:	d5e1      	bpl.n	8002f4e <__swbuf_r+0x2e>
 8002f8a:	2e0a      	cmp	r6, #10
 8002f8c:	d1df      	bne.n	8002f4e <__swbuf_r+0x2e>
 8002f8e:	4621      	mov	r1, r4
 8002f90:	4628      	mov	r0, r5
 8002f92:	f7ff ff69 	bl	8002e68 <_fflush_r>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d0d9      	beq.n	8002f4e <__swbuf_r+0x2e>
 8002f9a:	e7d6      	b.n	8002f4a <__swbuf_r+0x2a>

08002f9c <__swsetup_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4b29      	ldr	r3, [pc, #164]	@ (8003044 <__swsetup_r+0xa8>)
 8002fa0:	4605      	mov	r5, r0
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	b118      	cbz	r0, 8002fb0 <__swsetup_r+0x14>
 8002fa8:	6a03      	ldr	r3, [r0, #32]
 8002faa:	b90b      	cbnz	r3, 8002fb0 <__swsetup_r+0x14>
 8002fac:	f7ff fa02 	bl	80023b4 <__sinit>
 8002fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fb4:	0719      	lsls	r1, r3, #28
 8002fb6:	d422      	bmi.n	8002ffe <__swsetup_r+0x62>
 8002fb8:	06da      	lsls	r2, r3, #27
 8002fba:	d407      	bmi.n	8002fcc <__swsetup_r+0x30>
 8002fbc:	2209      	movs	r2, #9
 8002fbe:	602a      	str	r2, [r5, #0]
 8002fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc4:	81a3      	strh	r3, [r4, #12]
 8002fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fca:	e033      	b.n	8003034 <__swsetup_r+0x98>
 8002fcc:	0758      	lsls	r0, r3, #29
 8002fce:	d512      	bpl.n	8002ff6 <__swsetup_r+0x5a>
 8002fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fd2:	b141      	cbz	r1, 8002fe6 <__swsetup_r+0x4a>
 8002fd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fd8:	4299      	cmp	r1, r3
 8002fda:	d002      	beq.n	8002fe2 <__swsetup_r+0x46>
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f7ff faf9 	bl	80025d4 <_free_r>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6063      	str	r3, [r4, #4]
 8002ff2:	6923      	ldr	r3, [r4, #16]
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	6923      	ldr	r3, [r4, #16]
 8003000:	b94b      	cbnz	r3, 8003016 <__swsetup_r+0x7a>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800300c:	d003      	beq.n	8003016 <__swsetup_r+0x7a>
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f84f 	bl	80030b4 <__smakebuf_r>
 8003016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800301a:	f013 0201 	ands.w	r2, r3, #1
 800301e:	d00a      	beq.n	8003036 <__swsetup_r+0x9a>
 8003020:	2200      	movs	r2, #0
 8003022:	60a2      	str	r2, [r4, #8]
 8003024:	6962      	ldr	r2, [r4, #20]
 8003026:	4252      	negs	r2, r2
 8003028:	61a2      	str	r2, [r4, #24]
 800302a:	6922      	ldr	r2, [r4, #16]
 800302c:	b942      	cbnz	r2, 8003040 <__swsetup_r+0xa4>
 800302e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003032:	d1c5      	bne.n	8002fc0 <__swsetup_r+0x24>
 8003034:	bd38      	pop	{r3, r4, r5, pc}
 8003036:	0799      	lsls	r1, r3, #30
 8003038:	bf58      	it	pl
 800303a:	6962      	ldrpl	r2, [r4, #20]
 800303c:	60a2      	str	r2, [r4, #8]
 800303e:	e7f4      	b.n	800302a <__swsetup_r+0x8e>
 8003040:	2000      	movs	r0, #0
 8003042:	e7f7      	b.n	8003034 <__swsetup_r+0x98>
 8003044:	20000018 	.word	0x20000018

08003048 <_sbrk_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4d06      	ldr	r5, [pc, #24]	@ (8003064 <_sbrk_r+0x1c>)
 800304c:	2300      	movs	r3, #0
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	602b      	str	r3, [r5, #0]
 8003054:	f7fd fd4a 	bl	8000aec <_sbrk>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_sbrk_r+0x1a>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_sbrk_r+0x1a>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	2000025c 	.word	0x2000025c

08003068 <__swhatbuf_r>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	460c      	mov	r4, r1
 800306c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003070:	2900      	cmp	r1, #0
 8003072:	b096      	sub	sp, #88	@ 0x58
 8003074:	4615      	mov	r5, r2
 8003076:	461e      	mov	r6, r3
 8003078:	da0d      	bge.n	8003096 <__swhatbuf_r+0x2e>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	bf14      	ite	ne
 8003086:	2340      	movne	r3, #64	@ 0x40
 8003088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800308c:	2000      	movs	r0, #0
 800308e:	6031      	str	r1, [r6, #0]
 8003090:	602b      	str	r3, [r5, #0]
 8003092:	b016      	add	sp, #88	@ 0x58
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	466a      	mov	r2, sp
 8003098:	f000 f848 	bl	800312c <_fstat_r>
 800309c:	2800      	cmp	r0, #0
 800309e:	dbec      	blt.n	800307a <__swhatbuf_r+0x12>
 80030a0:	9901      	ldr	r1, [sp, #4]
 80030a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80030a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80030aa:	4259      	negs	r1, r3
 80030ac:	4159      	adcs	r1, r3
 80030ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030b2:	e7eb      	b.n	800308c <__swhatbuf_r+0x24>

080030b4 <__smakebuf_r>:
 80030b4:	898b      	ldrh	r3, [r1, #12]
 80030b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030b8:	079d      	lsls	r5, r3, #30
 80030ba:	4606      	mov	r6, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	d507      	bpl.n	80030d0 <__smakebuf_r+0x1c>
 80030c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	6123      	str	r3, [r4, #16]
 80030c8:	2301      	movs	r3, #1
 80030ca:	6163      	str	r3, [r4, #20]
 80030cc:	b003      	add	sp, #12
 80030ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d0:	ab01      	add	r3, sp, #4
 80030d2:	466a      	mov	r2, sp
 80030d4:	f7ff ffc8 	bl	8003068 <__swhatbuf_r>
 80030d8:	9f00      	ldr	r7, [sp, #0]
 80030da:	4605      	mov	r5, r0
 80030dc:	4639      	mov	r1, r7
 80030de:	4630      	mov	r0, r6
 80030e0:	f7ff fae4 	bl	80026ac <_malloc_r>
 80030e4:	b948      	cbnz	r0, 80030fa <__smakebuf_r+0x46>
 80030e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ea:	059a      	lsls	r2, r3, #22
 80030ec:	d4ee      	bmi.n	80030cc <__smakebuf_r+0x18>
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	81a3      	strh	r3, [r4, #12]
 80030f8:	e7e2      	b.n	80030c0 <__smakebuf_r+0xc>
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	6020      	str	r0, [r4, #0]
 80030fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003102:	81a3      	strh	r3, [r4, #12]
 8003104:	9b01      	ldr	r3, [sp, #4]
 8003106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800310a:	b15b      	cbz	r3, 8003124 <__smakebuf_r+0x70>
 800310c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003110:	4630      	mov	r0, r6
 8003112:	f000 f81d 	bl	8003150 <_isatty_r>
 8003116:	b128      	cbz	r0, 8003124 <__smakebuf_r+0x70>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	431d      	orrs	r5, r3
 8003128:	81a5      	strh	r5, [r4, #12]
 800312a:	e7cf      	b.n	80030cc <__smakebuf_r+0x18>

0800312c <_fstat_r>:
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	4d07      	ldr	r5, [pc, #28]	@ (800314c <_fstat_r+0x20>)
 8003130:	2300      	movs	r3, #0
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	f7fd fcce 	bl	8000ada <_fstat>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	d102      	bne.n	8003148 <_fstat_r+0x1c>
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	b103      	cbz	r3, 8003148 <_fstat_r+0x1c>
 8003146:	6023      	str	r3, [r4, #0]
 8003148:	bd38      	pop	{r3, r4, r5, pc}
 800314a:	bf00      	nop
 800314c:	2000025c 	.word	0x2000025c

08003150 <_isatty_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d06      	ldr	r5, [pc, #24]	@ (800316c <_isatty_r+0x1c>)
 8003154:	2300      	movs	r3, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	f7fd fcc2 	bl	8000ae4 <_isatty>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_isatty_r+0x1a>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_isatty_r+0x1a>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	2000025c 	.word	0x2000025c

08003170 <_init>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr

0800317c <_fini>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	bf00      	nop
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr
