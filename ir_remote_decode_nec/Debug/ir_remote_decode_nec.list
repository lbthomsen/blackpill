
ir_remote_decode_nec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003228  08003228  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  08003298  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003298  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb91  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d91  00000000  00000000  0002fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00008372  00000000  00000000  000319fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd0  00000000  00000000  00039d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000947  00000000  00000000  0003a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00016f78  00000000  00000000  0003b287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011c06  00000000  00000000  000521ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008f6e1  00000000  00000000  00063e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002748  00000000  00000000  000f34e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000f5c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080030e8 	.word	0x080030e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080030e8 	.word	0x080030e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800057c:	b082      	sub	sp, #8
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	2100      	movs	r1, #0
 8000580:	9100      	str	r1, [sp, #0]
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_GPIO_Init+0x34>)
 8000584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800058a:	631a      	str	r2, [r3, #48]	; 0x30
 800058c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059a:	f042 0201 	orr.w	r2, r2, #1
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80005aa:	b002      	add	sp, #8
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800

080005b4 <_write>:
    if (fd == 1 || fd == 2) {
 80005b4:	3801      	subs	r0, #1
 80005b6:	2801      	cmp	r0, #1
 80005b8:	d80a      	bhi.n	80005d0 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 80005ba:	b510      	push	{r4, lr}
 80005bc:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c2:	b292      	uxth	r2, r2
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <_write+0x28>)
 80005c6:	f001 fdc2 	bl	800214e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 80005ca:	b920      	cbnz	r0, 80005d6 <_write+0x22>
            return len;
 80005cc:	4620      	mov	r0, r4
}
 80005ce:	bd10      	pop	{r4, pc}
    return -1;
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80005d4:	4770      	bx	lr
            return -1;
 80005d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005da:	e7f8      	b.n	80005ce <_write+0x1a>
 80005dc:	200000d0 	.word	0x200000d0

080005e0 <HAL_TIM_IC_CaptureCallback>:
    if (htim->Instance == TIM1) {
 80005e0:	6802      	ldr	r2, [r0, #0]
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <HAL_TIM_IC_CaptureCallback+0x11c>)
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d000      	beq.n	80005ea <HAL_TIM_IC_CaptureCallback+0xa>
 80005e8:	4770      	bx	lr
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	b083      	sub	sp, #12
 80005ee:	4604      	mov	r4, r0
        uint32_t c2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80005f0:	2104      	movs	r1, #4
 80005f2:	f000 fffa 	bl	80015ea <HAL_TIM_ReadCapturedValue>
 80005f6:	4605      	mov	r5, r0
        uint32_t c1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - c2;
 80005f8:	2100      	movs	r1, #0
 80005fa:	4620      	mov	r0, r4
 80005fc:	f000 fff5 	bl	80015ea <HAL_TIM_ReadCapturedValue>
 8000600:	1b43      	subs	r3, r0, r5
        if (state == IR_STATE_WAIT_MAKE) {
 8000602:	4a3f      	ldr	r2, [pc, #252]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000604:	7812      	ldrb	r2, [r2, #0]
 8000606:	b9e2      	cbnz	r2, 8000642 <HAL_TIM_IC_CaptureCallback+0x62>
            if (c1 > 8000 && c1 < 10000) {
 8000608:	f5a3 50fa 	sub.w	r0, r3, #8000	; 0x1f40
 800060c:	3801      	subs	r0, #1
 800060e:	f240 73ce 	movw	r3, #1998	; 0x7ce
 8000612:	4298      	cmp	r0, r3
 8000614:	d80e      	bhi.n	8000634 <HAL_TIM_IC_CaptureCallback+0x54>
                DBG("Got make");
 8000616:	483b      	ldr	r0, [pc, #236]	; (8000704 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000618:	f001 feb6 	bl	8002388 <iprintf>
 800061c:	200a      	movs	r0, #10
 800061e:	f001 fec5 	bl	80023ac <putchar>
                state = IR_STATE_WAIT_BREAK;
 8000622:	4b37      	ldr	r3, [pc, #220]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
        if (state == IR_STATE_RECEIVE && bit == 0) { // We're done - let's process
 8000628:	4b35      	ldr	r3, [pc, #212]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x120>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d053      	beq.n	80006d8 <HAL_TIM_IC_CaptureCallback+0xf8>
}
 8000630:	b003      	add	sp, #12
 8000632:	bd30      	pop	{r4, r5, pc}
                DBG("Rubbish while waiting for make");
 8000634:	4834      	ldr	r0, [pc, #208]	; (8000708 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000636:	f001 fea7 	bl	8002388 <iprintf>
 800063a:	200a      	movs	r0, #10
 800063c:	f001 feb6 	bl	80023ac <putchar>
 8000640:	e7f2      	b.n	8000628 <HAL_TIM_IC_CaptureCallback+0x48>
        } else if (state == IR_STATE_WAIT_BREAK) {
 8000642:	2a01      	cmp	r2, #1
 8000644:	d013      	beq.n	800066e <HAL_TIM_IC_CaptureCallback+0x8e>
        } else if (state == IR_STATE_RECEIVE) {
 8000646:	2a02      	cmp	r2, #2
 8000648:	d13f      	bne.n	80006ca <HAL_TIM_IC_CaptureCallback+0xea>
            if (c2 > 1600 && c2 < 1800) {
 800064a:	f2a5 6341 	subw	r3, r5, #1601	; 0x641
 800064e:	2bc6      	cmp	r3, #198	; 0xc6
 8000650:	d82d      	bhi.n	80006ae <HAL_TIM_IC_CaptureCallback+0xce>
                *received_buffer = *received_buffer | ((uint32_t) 1 << (bit - 1));
 8000652:	482e      	ldr	r0, [pc, #184]	; (800070c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000654:	6803      	ldr	r3, [r0, #0]
 8000656:	4a2e      	ldr	r2, [pc, #184]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000658:	7811      	ldrb	r1, [r2, #0]
 800065a:	3901      	subs	r1, #1
 800065c:	2201      	movs	r2, #1
 800065e:	408a      	lsls	r2, r1
 8000660:	4313      	orrs	r3, r2
 8000662:	6003      	str	r3, [r0, #0]
            --bit;
 8000664:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000666:	7813      	ldrb	r3, [r2, #0]
 8000668:	3b01      	subs	r3, #1
 800066a:	7013      	strb	r3, [r2, #0]
 800066c:	e7dc      	b.n	8000628 <HAL_TIM_IC_CaptureCallback+0x48>
            if (c2 > 4000 && c2 < 5000) {
 800066e:	f6a5 75a1 	subw	r5, r5, #4001	; 0xfa1
 8000672:	f240 33e6 	movw	r3, #998	; 0x3e6
 8000676:	429d      	cmp	r5, r3
 8000678:	d80f      	bhi.n	800069a <HAL_TIM_IC_CaptureCallback+0xba>
                DBG("Got break");
 800067a:	4826      	ldr	r0, [pc, #152]	; (8000714 <HAL_TIM_IC_CaptureCallback+0x134>)
 800067c:	f001 fe84 	bl	8002388 <iprintf>
 8000680:	200a      	movs	r0, #10
 8000682:	f001 fe93 	bl	80023ac <putchar>
                state = IR_STATE_RECEIVE;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000688:	2202      	movs	r2, #2
 800068a:	701a      	strb	r2, [r3, #0]
                *received_buffer = 0x00000000;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
                bit = 32;
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000694:	2220      	movs	r2, #32
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	e7c6      	b.n	8000628 <HAL_TIM_IC_CaptureCallback+0x48>
                DBG("Was expecting a break - got rubbish");
 800069a:	481f      	ldr	r0, [pc, #124]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x138>)
 800069c:	f001 fe74 	bl	8002388 <iprintf>
 80006a0:	200a      	movs	r0, #10
 80006a2:	f001 fe83 	bl	80023ac <putchar>
                state = IR_STATE_WAIT_MAKE;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e7bc      	b.n	8000628 <HAL_TIM_IC_CaptureCallback+0x48>
            } else if (c2 > 500 && c2 < 700) {
 80006ae:	f2a5 15f5 	subw	r5, r5, #501	; 0x1f5
 80006b2:	2dc6      	cmp	r5, #198	; 0xc6
 80006b4:	d9d6      	bls.n	8000664 <HAL_TIM_IC_CaptureCallback+0x84>
                DBG("Rubbish data received");
 80006b6:	4819      	ldr	r0, [pc, #100]	; (800071c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80006b8:	f001 fe66 	bl	8002388 <iprintf>
 80006bc:	200a      	movs	r0, #10
 80006be:	f001 fe75 	bl	80023ac <putchar>
                state = IR_STATE_WAIT_MAKE;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_TIM_IC_CaptureCallback+0x120>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e7cc      	b.n	8000664 <HAL_TIM_IC_CaptureCallback+0x84>
            DBG("IR Uknown state");
 80006ca:	4815      	ldr	r0, [pc, #84]	; (8000720 <HAL_TIM_IC_CaptureCallback+0x140>)
 80006cc:	f001 fe5c 	bl	8002388 <iprintf>
 80006d0:	200a      	movs	r0, #10
 80006d2:	f001 fe6b 	bl	80023ac <putchar>
 80006d6:	e7a7      	b.n	8000628 <HAL_TIM_IC_CaptureCallback+0x48>
        if (state == IR_STATE_RECEIVE && bit == 0) { // We're done - let's process
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x130>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1a7      	bne.n	8000630 <HAL_TIM_IC_CaptureCallback+0x50>
            DBG("Done receiving A0 = %02x A1 = %02x D0 = %02x D1 = %02x", received[0], received[1], received[2], received[3]);
 80006e0:	490a      	ldr	r1, [pc, #40]	; (800070c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80006e2:	78cb      	ldrb	r3, [r1, #3]
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	788b      	ldrb	r3, [r1, #2]
 80006e8:	784a      	ldrb	r2, [r1, #1]
 80006ea:	7809      	ldrb	r1, [r1, #0]
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <HAL_TIM_IC_CaptureCallback+0x144>)
 80006ee:	f001 fe4b 	bl	8002388 <iprintf>
 80006f2:	200a      	movs	r0, #10
 80006f4:	f001 fe5a 	bl	80023ac <putchar>
}
 80006f8:	e79a      	b.n	8000630 <HAL_TIM_IC_CaptureCallback+0x50>
 80006fa:	bf00      	nop
 80006fc:	40010000 	.word	0x40010000
 8000700:	20000118 	.word	0x20000118
 8000704:	08003100 	.word	0x08003100
 8000708:	0800310c 	.word	0x0800310c
 800070c:	20000114 	.word	0x20000114
 8000710:	20000084 	.word	0x20000084
 8000714:	0800312c 	.word	0x0800312c
 8000718:	08003138 	.word	0x08003138
 800071c:	0800315c 	.word	0x0800315c
 8000720:	08003174 	.word	0x08003174
 8000724:	08003184 	.word	0x08003184

08000728 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
 */
void Error_Handler(void) {
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800072a:	e7fe      	b.n	800072a <Error_Handler+0x2>

0800072c <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 800072c:	b500      	push	{lr}
 800072e:	b091      	sub	sp, #68	; 0x44
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000730:	2300      	movs	r3, #0
 8000732:	930c      	str	r3, [sp, #48]	; 0x30
 8000734:	930d      	str	r3, [sp, #52]	; 0x34
 8000736:	930e      	str	r3, [sp, #56]	; 0x38
 8000738:	930f      	str	r3, [sp, #60]	; 0x3c
    TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800073a:	9307      	str	r3, [sp, #28]
 800073c:	9308      	str	r3, [sp, #32]
 800073e:	9309      	str	r3, [sp, #36]	; 0x24
 8000740:	930a      	str	r3, [sp, #40]	; 0x28
 8000742:	930b      	str	r3, [sp, #44]	; 0x2c
    TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000744:	9303      	str	r3, [sp, #12]
 8000746:	9304      	str	r3, [sp, #16]
 8000748:	9305      	str	r3, [sp, #20]
 800074a:	9306      	str	r3, [sp, #24]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	9302      	str	r3, [sp, #8]
    htim1.Instance = TIM1;
 8000750:	482b      	ldr	r0, [pc, #172]	; (8000800 <MX_TIM1_Init+0xd4>)
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <MX_TIM1_Init+0xd8>)
 8000754:	6002      	str	r2, [r0, #0]
    htim1.Init.Prescaler = 99;
 8000756:	2263      	movs	r2, #99	; 0x63
 8000758:	6042      	str	r2, [r0, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	6083      	str	r3, [r0, #8]
    htim1.Init.Period = 65535;
 800075c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000760:	60c2      	str	r2, [r0, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	6103      	str	r3, [r0, #16]
    htim1.Init.RepetitionCounter = 0;
 8000764:	6143      	str	r3, [r0, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	6183      	str	r3, [r0, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000768:	f001 f868 	bl	800183c <HAL_TIM_Base_Init>
 800076c:	2800      	cmp	r0, #0
 800076e:	d139      	bne.n	80007e4 <MX_TIM1_Init+0xb8>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000776:	a90c      	add	r1, sp, #48	; 0x30
 8000778:	4821      	ldr	r0, [pc, #132]	; (8000800 <MX_TIM1_Init+0xd4>)
 800077a:	f001 f95c 	bl	8001a36 <HAL_TIM_ConfigClockSource>
 800077e:	2800      	cmp	r0, #0
 8000780:	d132      	bne.n	80007e8 <MX_TIM1_Init+0xbc>
    if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8000782:	481f      	ldr	r0, [pc, #124]	; (8000800 <MX_TIM1_Init+0xd4>)
 8000784:	f001 f886 	bl	8001894 <HAL_TIM_IC_Init>
 8000788:	2800      	cmp	r0, #0
 800078a:	d12f      	bne.n	80007ec <MX_TIM1_Init+0xc0>
    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800078c:	2304      	movs	r3, #4
 800078e:	9307      	str	r3, [sp, #28]
    sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000790:	2350      	movs	r3, #80	; 0x50
 8000792:	9308      	str	r3, [sp, #32]
    sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000794:	2300      	movs	r3, #0
 8000796:	9309      	str	r3, [sp, #36]	; 0x24
    sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000798:	930a      	str	r3, [sp, #40]	; 0x28
    sSlaveConfig.TriggerFilter = 0;
 800079a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 800079c:	a907      	add	r1, sp, #28
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <MX_TIM1_Init+0xd4>)
 80007a0:	f001 fa24 	bl	8001bec <HAL_TIM_SlaveConfigSynchro>
 80007a4:	bb20      	cbnz	r0, 80007f0 <MX_TIM1_Init+0xc4>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007a6:	2200      	movs	r2, #0
 80007a8:	9203      	str	r2, [sp, #12]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007aa:	2301      	movs	r3, #1
 80007ac:	9304      	str	r3, [sp, #16]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007ae:	9205      	str	r2, [sp, #20]
    sConfigIC.ICFilter = 0;
 80007b0:	9206      	str	r2, [sp, #24]
    if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80007b2:	a903      	add	r1, sp, #12
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <MX_TIM1_Init+0xd4>)
 80007b6:	f001 f8cf 	bl	8001958 <HAL_TIM_IC_ConfigChannel>
 80007ba:	b9d8      	cbnz	r0, 80007f4 <MX_TIM1_Init+0xc8>
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80007bc:	2302      	movs	r3, #2
 80007be:	9303      	str	r3, [sp, #12]
    sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80007c0:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80007c2:	2204      	movs	r2, #4
 80007c4:	a903      	add	r1, sp, #12
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_TIM1_Init+0xd4>)
 80007c8:	f001 f8c6 	bl	8001958 <HAL_TIM_IC_ConfigChannel>
 80007cc:	b9a0      	cbnz	r0, 80007f8 <MX_TIM1_Init+0xcc>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	9301      	str	r3, [sp, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	9302      	str	r3, [sp, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80007d4:	a901      	add	r1, sp, #4
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <MX_TIM1_Init+0xd4>)
 80007d8:	f001 fb80 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	b970      	cbnz	r0, 80007fc <MX_TIM1_Init+0xd0>
}
 80007de:	b011      	add	sp, #68	; 0x44
 80007e0:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80007e4:	f7ff ffa0 	bl	8000728 <Error_Handler>
        Error_Handler();
 80007e8:	f7ff ff9e 	bl	8000728 <Error_Handler>
        Error_Handler();
 80007ec:	f7ff ff9c 	bl	8000728 <Error_Handler>
        Error_Handler();
 80007f0:	f7ff ff9a 	bl	8000728 <Error_Handler>
        Error_Handler();
 80007f4:	f7ff ff98 	bl	8000728 <Error_Handler>
        Error_Handler();
 80007f8:	f7ff ff96 	bl	8000728 <Error_Handler>
        Error_Handler();
 80007fc:	f7ff ff94 	bl	8000728 <Error_Handler>
 8000800:	20000088 	.word	0x20000088
 8000804:	40010000 	.word	0x40010000

08000808 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) {
 8000808:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800080a:	480a      	ldr	r0, [pc, #40]	; (8000834 <MX_USART1_UART_Init+0x2c>)
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_USART1_UART_Init+0x30>)
 800080e:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 921600;
 8000810:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8000814:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	2300      	movs	r3, #0
 8000818:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800081a:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800081c:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800081e:	220c      	movs	r2, #12
 8000820:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000826:	f001 fc63 	bl	80020f0 <HAL_UART_Init>
 800082a:	b900      	cbnz	r0, 800082e <MX_USART1_UART_Init+0x26>
}
 800082c:	bd08      	pop	{r3, pc}
        Error_Handler();
 800082e:	f7ff ff7b 	bl	8000728 <Error_Handler>
 8000832:	bf00      	nop
 8000834:	200000d0 	.word	0x200000d0
 8000838:	40011000 	.word	0x40011000

0800083c <SystemClock_Config>:
void SystemClock_Config(void) {
 800083c:	b500      	push	{lr}
 800083e:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000840:	2230      	movs	r2, #48	; 0x30
 8000842:	2100      	movs	r1, #0
 8000844:	a808      	add	r0, sp, #32
 8000846:	f001 fdfc 	bl	8002442 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800084a:	2300      	movs	r3, #0
 800084c:	9303      	str	r3, [sp, #12]
 800084e:	9304      	str	r3, [sp, #16]
 8000850:	9305      	str	r3, [sp, #20]
 8000852:	9306      	str	r3, [sp, #24]
 8000854:	9307      	str	r3, [sp, #28]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <SystemClock_Config+0x9c>)
 800085a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800085c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000860:	6411      	str	r1, [r2, #64]	; 0x40
 8000862:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000864:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000868:	9201      	str	r2, [sp, #4]
 800086a:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <SystemClock_Config+0xa0>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000882:	2301      	movs	r3, #1
 8000884:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000890:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000894:	920f      	str	r2, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 8000896:	220c      	movs	r2, #12
 8000898:	9210      	str	r2, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 800089a:	2260      	movs	r2, #96	; 0x60
 800089c:	9211      	str	r2, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089e:	9312      	str	r3, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008a4:	a808      	add	r0, sp, #32
 80008a6:	f000 faf9 	bl	8000e9c <HAL_RCC_OscConfig>
 80008aa:	b988      	cbnz	r0, 80008d0 <SystemClock_Config+0x94>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008ac:	230f      	movs	r3, #15
 80008ae:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	9305      	str	r3, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008bc:	9206      	str	r2, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80008c0:	2103      	movs	r1, #3
 80008c2:	a803      	add	r0, sp, #12
 80008c4:	f000 fd3a 	bl	800133c <HAL_RCC_ClockConfig>
 80008c8:	b920      	cbnz	r0, 80008d4 <SystemClock_Config+0x98>
}
 80008ca:	b015      	add	sp, #84	; 0x54
 80008cc:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80008d0:	f7ff ff2a 	bl	8000728 <Error_Handler>
        Error_Handler();
 80008d4:	f7ff ff28 	bl	8000728 <Error_Handler>
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <main>:
int main(void) {
 80008e0:	b508      	push	{r3, lr}
    HAL_Init();
 80008e2:	f000 f95f 	bl	8000ba4 <HAL_Init>
    SystemClock_Config();
 80008e6:	f7ff ffa9 	bl	800083c <SystemClock_Config>
    MX_GPIO_Init();
 80008ea:	f7ff fe47 	bl	800057c <MX_GPIO_Init>
    MX_TIM1_Init();
 80008ee:	f7ff ff1d 	bl	800072c <MX_TIM1_Init>
    MX_USART1_UART_Init();
 80008f2:	f7ff ff89 	bl	8000808 <MX_USART1_UART_Init>
    DBG("\n\n\n\n--------\nStarting");
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <main+0x38>)
 80008f8:	f001 fd46 	bl	8002388 <iprintf>
 80008fc:	200a      	movs	r0, #10
 80008fe:	f001 fd55 	bl	80023ac <putchar>
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge
 8000902:	4c06      	ldr	r4, [pc, #24]	; (800091c <main+0x3c>)
 8000904:	2100      	movs	r1, #0
 8000906:	4620      	mov	r0, r4
 8000908:	f001 fa36 	bl	8001d78 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge
 800090c:	2104      	movs	r1, #4
 800090e:	4620      	mov	r0, r4
 8000910:	f001 f9a4 	bl	8001c5c <HAL_TIM_IC_Start>
    while (1) {
 8000914:	e7fe      	b.n	8000914 <main+0x34>
 8000916:	bf00      	nop
 8000918:	080031bc 	.word	0x080031bc
 800091c:	20000088 	.word	0x20000088

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2100      	movs	r1, #0
 8000924:	9100      	str	r1, [sp, #0]
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_MspInit+0x34>)
 8000928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800092a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800092e:	645a      	str	r2, [r3, #68]	; 0x44
 8000930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000932:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	9101      	str	r1, [sp, #4]
 800093c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000942:	641a      	str	r2, [r3, #64]	; 0x40
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	b002      	add	sp, #8
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000958:	b510      	push	{r4, lr}
 800095a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	2300      	movs	r3, #0
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	9304      	str	r3, [sp, #16]
 8000962:	9305      	str	r3, [sp, #20]
 8000964:	9306      	str	r3, [sp, #24]
 8000966:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 8000968:	6802      	ldr	r2, [r0, #0]
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_TIM_Base_MspInit+0x74>)
 800096c:	429a      	cmp	r2, r3
 800096e:	d001      	beq.n	8000974 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000970:	b008      	add	sp, #32
 8000972:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000974:	2400      	movs	r4, #0
 8000976:	9401      	str	r4, [sp, #4]
 8000978:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800097c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800097e:	f042 0201 	orr.w	r2, r2, #1
 8000982:	645a      	str	r2, [r3, #68]	; 0x44
 8000984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000986:	f002 0201 	and.w	r2, r2, #1
 800098a:	9201      	str	r2, [sp, #4]
 800098c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	9402      	str	r4, [sp, #8]
 8000990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000992:	f042 0201 	orr.w	r2, r2, #1
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	a903      	add	r1, sp, #12
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <HAL_TIM_Base_MspInit+0x78>)
 80009b4:	f000 f98e 	bl	8000cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80009b8:	4622      	mov	r2, r4
 80009ba:	4621      	mov	r1, r4
 80009bc:	201b      	movs	r0, #27
 80009be:	f000 f92f 	bl	8000c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009c2:	201b      	movs	r0, #27
 80009c4:	f000 f964 	bl	8000c90 <HAL_NVIC_EnableIRQ>
}
 80009c8:	e7d2      	b.n	8000970 <HAL_TIM_Base_MspInit+0x18>
 80009ca:	bf00      	nop
 80009cc:	40010000 	.word	0x40010000
 80009d0:	40020000 	.word	0x40020000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b500      	push	{lr}
 80009d6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2300      	movs	r3, #0
 80009da:	9303      	str	r3, [sp, #12]
 80009dc:	9304      	str	r3, [sp, #16]
 80009de:	9305      	str	r3, [sp, #20]
 80009e0:	9306      	str	r3, [sp, #24]
 80009e2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80009e4:	6802      	ldr	r2, [r0, #0]
 80009e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009ea:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d002      	beq.n	80009f8 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f2:	b009      	add	sp, #36	; 0x24
 80009f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f8:	2100      	movs	r1, #0
 80009fa:	9101      	str	r1, [sp, #4]
 80009fc:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a02:	f042 0210 	orr.w	r2, r2, #16
 8000a06:	645a      	str	r2, [r3, #68]	; 0x44
 8000a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a0a:	f002 0210 	and.w	r2, r2, #16
 8000a0e:	9201      	str	r2, [sp, #4]
 8000a10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	9102      	str	r1, [sp, #8]
 8000a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a16:	f042 0201 	orr.w	r2, r2, #1
 8000a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a34:	2307      	movs	r3, #7
 8000a36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	a903      	add	r1, sp, #12
 8000a3a:	4802      	ldr	r0, [pc, #8]	; (8000a44 <HAL_UART_MspInit+0x70>)
 8000a3c:	f000 f94a 	bl	8000cd4 <HAL_GPIO_Init>
}
 8000a40:	e7d7      	b.n	80009f2 <HAL_UART_MspInit+0x1e>
 8000a42:	bf00      	nop
 8000a44:	40020000 	.word	0x40020000

08000a48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler>

08000a4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler>

08000a4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler>

08000a4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler>

08000a50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler>

08000a52 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f8bd 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bd08      	pop	{r3, pc}

08000a60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM1_CC_IRQHandler+0xc>)
 8000a64:	f000 fdde 	bl	8001624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000088 	.word	0x20000088

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	460c      	mov	r4, r1
 8000a74:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	2500      	movs	r5, #0
 8000a78:	e006      	b.n	8000a88 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4621      	mov	r1, r4
 8000a80:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000a86:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	dbf6      	blt.n	8000a7a <_read+0xa>
  }

  return len;
}
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}

08000a90 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	4770      	bx	lr

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b510      	push	{r4, lr}
 8000aaa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <_sbrk+0x38>)
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <_sbrk+0x40>)
 8000ab2:	6800      	ldr	r0, [r0, #0]
 8000ab4:	b140      	cbz	r0, 8000ac8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <_sbrk+0x40>)
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	4403      	add	r3, r0
 8000abc:	1a52      	subs	r2, r2, r1
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d806      	bhi.n	8000ad0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <_sbrk+0x40>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ac6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <_sbrk+0x40>)
 8000aca:	4c08      	ldr	r4, [pc, #32]	; (8000aec <_sbrk+0x44>)
 8000acc:	6004      	str	r4, [r0, #0]
 8000ace:	e7f2      	b.n	8000ab6 <_sbrk+0xe>
    errno = ENOMEM;
 8000ad0:	f001 fd06 	bl	80024e0 <__errno>
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000adc:	e7f3      	b.n	8000ac6 <_sbrk+0x1e>
 8000ade:	bf00      	nop
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	2000011c 	.word	0x2000011c
 8000aec:	20000270 	.word	0x20000270

08000af0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <SystemInit+0x10>)
 8000af2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000af6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffdf 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f001 fcdb 	bl	80024ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fed3 	bl	80008e0 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b48:	08003230 	.word	0x08003230
  ldr r2, =_sbss
 8000b4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b50:	20000270 	.word	0x20000270

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_InitTick+0x40>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <HAL_InitTick+0x44>)
 8000b6a:	6810      	ldr	r0, [r2, #0]
 8000b6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b70:	f000 f89c 	bl	8000cac <HAL_SYSTICK_Config>
 8000b74:	b968      	cbnz	r0, 8000b92 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	2c0f      	cmp	r4, #15
 8000b78:	d901      	bls.n	8000b7e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	e00a      	b.n	8000b94 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4621      	mov	r1, r4
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b86:	f000 f84b 	bl	8000c20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_InitTick+0x48>)
 8000b8c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2000      	movs	r0, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
}
 8000b94:	bd10      	pop	{r4, pc}
 8000b96:	bf00      	nop
 8000b98:	20000004 	.word	0x20000004
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_Init>:
{
 8000ba4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x30>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bb6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bbe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f81b 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f7ff ffc6 	bl	8000b58 <HAL_InitTick>
  HAL_MspInit();
 8000bcc:	f7ff fea8 	bl	8000920 <HAL_MspInit>
}
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	bd08      	pop	{r3, pc}
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x10>)
 8000bda:	6811      	ldr	r1, [r2, #0]
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_IncTick+0x14>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	440b      	add	r3, r1
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000120 	.word	0x20000120
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bf0:	4b01      	ldr	r3, [pc, #4]	; (8000bf8 <HAL_GetTick+0x8>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000120 	.word	0x20000120

08000bfc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bfe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	0200      	lsls	r0, r0, #8
 8000c0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c18:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c20:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_NVIC_SetPriority+0x68>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2a:	f1c3 0c07 	rsb	ip, r3, #7
 8000c2e:	f1bc 0f04 	cmp.w	ip, #4
 8000c32:	bf28      	it	cs
 8000c34:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c38:	f103 0e04 	add.w	lr, r3, #4
 8000c3c:	f1be 0f06 	cmp.w	lr, #6
 8000c40:	d918      	bls.n	8000c74 <HAL_NVIC_SetPriority+0x54>
 8000c42:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000c48:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000c4c:	ea21 010c 	bic.w	r1, r1, ip
 8000c50:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c52:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c56:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5a:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	db0b      	blt.n	8000c78 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c68:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c6c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c70:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c74:	2300      	movs	r3, #0
 8000c76:	e7e5      	b.n	8000c44 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	f000 000f 	and.w	r0, r0, #15
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <HAL_NVIC_SetPriority+0x6c>)
 8000c82:	541a      	strb	r2, [r3, r0]
 8000c84:	e7f4      	b.n	8000c70 <HAL_NVIC_SetPriority+0x50>
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	e000ed14 	.word	0xe000ed14

08000c90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c90:	2800      	cmp	r0, #0
 8000c92:	db07      	blt.n	8000ca4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c94:	f000 021f 	and.w	r2, r0, #31
 8000c98:	0940      	lsrs	r0, r0, #5
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	4a02      	ldr	r2, [pc, #8]	; (8000ca8 <HAL_NVIC_EnableIRQ+0x18>)
 8000ca0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	3801      	subs	r0, #1
 8000cae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb2:	d20b      	bcs.n	8000ccc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000cb8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <HAL_SYSTICK_Config+0x24>)
 8000cbc:	21f0      	movs	r1, #240	; 0xf0
 8000cbe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ccc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	f200 80d7 	bhi.w	8000e8a <HAL_GPIO_Init+0x1b6>
{
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	e065      	b.n	8000dae <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ce8:	2403      	movs	r4, #3
 8000cea:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cee:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf2:	68cc      	ldr	r4, [r1, #12]
 8000cf4:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cf8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000cfa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d02:	684a      	ldr	r2, [r1, #4]
 8000d04:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000d0c:	6042      	str	r2, [r0, #4]
 8000d0e:	e05c      	b.n	8000dca <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	08dc      	lsrs	r4, r3, #3
 8000d12:	3408      	adds	r4, #8
 8000d14:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d18:	f003 0507 	and.w	r5, r3, #7
 8000d1c:	00ad      	lsls	r5, r5, #2
 8000d1e:	f04f 0e0f 	mov.w	lr, #15
 8000d22:	fa0e fe05 	lsl.w	lr, lr, r5
 8000d26:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2a:	690a      	ldr	r2, [r1, #16]
 8000d2c:	40aa      	lsls	r2, r5
 8000d2e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d32:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000d36:	e05c      	b.n	8000df2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d38:	2204      	movs	r2, #4
 8000d3a:	e000      	b.n	8000d3e <HAL_GPIO_Init+0x6a>
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d42:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d44:	3402      	adds	r4, #2
 8000d46:	4d51      	ldr	r5, [pc, #324]	; (8000e8c <HAL_GPIO_Init+0x1b8>)
 8000d48:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4c:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <HAL_GPIO_Init+0x1bc>)
 8000d4e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d50:	ea6f 020c 	mvn.w	r2, ip
 8000d54:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d58:	684e      	ldr	r6, [r1, #4]
 8000d5a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000d5e:	d001      	beq.n	8000d64 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000d60:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000d64:	4c4a      	ldr	r4, [pc, #296]	; (8000e90 <HAL_GPIO_Init+0x1bc>)
 8000d66:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000d68:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d6e:	684e      	ldr	r6, [r1, #4]
 8000d70:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000d74:	d001      	beq.n	8000d7a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000d76:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000d7a:	4c45      	ldr	r4, [pc, #276]	; (8000e90 <HAL_GPIO_Init+0x1bc>)
 8000d7c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000d7e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d84:	684e      	ldr	r6, [r1, #4]
 8000d86:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000d8a:	d001      	beq.n	8000d90 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000d8c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000d90:	4c3f      	ldr	r4, [pc, #252]	; (8000e90 <HAL_GPIO_Init+0x1bc>)
 8000d92:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d94:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d96:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d98:	684d      	ldr	r5, [r1, #4]
 8000d9a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000d9e:	d001      	beq.n	8000da4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000da0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000da4:	4c3a      	ldr	r4, [pc, #232]	; (8000e90 <HAL_GPIO_Init+0x1bc>)
 8000da6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da8:	3301      	adds	r3, #1
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	d86b      	bhi.n	8000e86 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000dae:	2201      	movs	r2, #1
 8000db0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	680c      	ldr	r4, [r1, #0]
 8000db4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000db8:	ea32 0404 	bics.w	r4, r2, r4
 8000dbc:	d1f4      	bne.n	8000da8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	684c      	ldr	r4, [r1, #4]
 8000dc0:	f004 0403 	and.w	r4, r4, #3
 8000dc4:	3c01      	subs	r4, #1
 8000dc6:	2c01      	cmp	r4, #1
 8000dc8:	d98b      	bls.n	8000ce2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dca:	684a      	ldr	r2, [r1, #4]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	2a03      	cmp	r2, #3
 8000dd2:	d009      	beq.n	8000de8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000dd4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	005d      	lsls	r5, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	40aa      	lsls	r2, r5
 8000ddc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de0:	688a      	ldr	r2, [r1, #8]
 8000de2:	40aa      	lsls	r2, r5
 8000de4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000de6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de8:	684a      	ldr	r2, [r1, #4]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	2a02      	cmp	r2, #2
 8000df0:	d08e      	beq.n	8000d10 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000df2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f20e 	lsl.w	r2, r2, lr
 8000dfe:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e02:	684a      	ldr	r2, [r1, #4]
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e0c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000e0e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e10:	684a      	ldr	r2, [r1, #4]
 8000e12:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000e16:	d0c7      	beq.n	8000da8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	2200      	movs	r2, #0
 8000e1a:	9201      	str	r2, [sp, #4]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_GPIO_Init+0x1c0>)
 8000e1e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000e20:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000e24:	6454      	str	r4, [r2, #68]	; 0x44
 8000e26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e28:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e2c:	9201      	str	r2, [sp, #4]
 8000e2e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e30:	089c      	lsrs	r4, r3, #2
 8000e32:	1ca5      	adds	r5, r4, #2
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <HAL_GPIO_Init+0x1b8>)
 8000e36:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e3a:	f003 0e03 	and.w	lr, r3, #3
 8000e3e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e48:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <HAL_GPIO_Init+0x1c4>)
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	f43f af74 	beq.w	8000d3c <HAL_GPIO_Init+0x68>
 8000e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e58:	4290      	cmp	r0, r2
 8000e5a:	d00e      	beq.n	8000e7a <HAL_GPIO_Init+0x1a6>
 8000e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e60:	4290      	cmp	r0, r2
 8000e62:	d00c      	beq.n	8000e7e <HAL_GPIO_Init+0x1aa>
 8000e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e68:	4290      	cmp	r0, r2
 8000e6a:	d00a      	beq.n	8000e82 <HAL_GPIO_Init+0x1ae>
 8000e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f43f af61 	beq.w	8000d38 <HAL_GPIO_Init+0x64>
 8000e76:	2207      	movs	r2, #7
 8000e78:	e761      	b.n	8000d3e <HAL_GPIO_Init+0x6a>
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	e75f      	b.n	8000d3e <HAL_GPIO_Init+0x6a>
 8000e7e:	2202      	movs	r2, #2
 8000e80:	e75d      	b.n	8000d3e <HAL_GPIO_Init+0x6a>
 8000e82:	2203      	movs	r2, #3
 8000e84:	e75b      	b.n	8000d3e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e86:	b002      	add	sp, #8
 8000e88:	bd70      	pop	{r4, r5, r6, pc}
 8000e8a:	4770      	bx	lr
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40013c00 	.word	0x40013c00
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	f000 81e0 	beq.w	8001262 <HAL_RCC_OscConfig+0x3c6>
{
 8000ea2:	b570      	push	{r4, r5, r6, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	f013 0f01 	tst.w	r3, #1
 8000eae:	d03b      	beq.n	8000f28 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eb0:	4b9f      	ldr	r3, [pc, #636]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d02c      	beq.n	8000f16 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ebc:	4b9c      	ldr	r3, [pc, #624]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d021      	beq.n	8000f0c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ece:	d04f      	beq.n	8000f70 <HAL_RCC_OscConfig+0xd4>
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	d052      	beq.n	8000f7c <HAL_RCC_OscConfig+0xe0>
 8000ed6:	4b96      	ldr	r3, [pc, #600]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ee6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ee8:	6863      	ldr	r3, [r4, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d050      	beq.n	8000f90 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fe7f 	bl	8000bf0 <HAL_GetTick>
 8000ef2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef4:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000efc:	d114      	bne.n	8000f28 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efe:	f7ff fe77 	bl	8000bf0 <HAL_GetTick>
 8000f02:	1b40      	subs	r0, r0, r5
 8000f04:	2864      	cmp	r0, #100	; 0x64
 8000f06:	d9f5      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000f08:	2003      	movs	r0, #3
 8000f0a:	e1b1      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0c:	4b88      	ldr	r3, [pc, #544]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f14:	d0d8      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f16:	4b86      	ldr	r3, [pc, #536]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f1e:	d003      	beq.n	8000f28 <HAL_RCC_OscConfig+0x8c>
 8000f20:	6863      	ldr	r3, [r4, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 819f 	beq.w	8001266 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	f013 0f02 	tst.w	r3, #2
 8000f2e:	d054      	beq.n	8000fda <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f30:	4b7f      	ldr	r3, [pc, #508]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f013 0f0c 	tst.w	r3, #12
 8000f38:	d03e      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d033      	beq.n	8000fae <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f46:	68e3      	ldr	r3, [r4, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d068      	beq.n	800101e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	4b79      	ldr	r3, [pc, #484]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fe4d 	bl	8000bf0 <HAL_GetTick>
 8000f56:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	4b75      	ldr	r3, [pc, #468]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f013 0f02 	tst.w	r3, #2
 8000f60:	d154      	bne.n	800100c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f62:	f7ff fe45 	bl	8000bf0 <HAL_GetTick>
 8000f66:	1b40      	subs	r0, r0, r5
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9f5      	bls.n	8000f58 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	e17f      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f70:	4a6f      	ldr	r2, [pc, #444]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f72:	6813      	ldr	r3, [r2, #0]
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e7b5      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4c>
 8000f7c:	4b6c      	ldr	r3, [pc, #432]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	e7ab      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000f90:	f7ff fe2e 	bl	8000bf0 <HAL_GetTick>
 8000f94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	4b66      	ldr	r3, [pc, #408]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f9e:	d0c3      	beq.n	8000f28 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fe26 	bl	8000bf0 <HAL_GetTick>
 8000fa4:	1b40      	subs	r0, r0, r5
 8000fa6:	2864      	cmp	r0, #100	; 0x64
 8000fa8:	d9f5      	bls.n	8000f96 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000faa:	2003      	movs	r0, #3
 8000fac:	e160      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fae:	4b60      	ldr	r3, [pc, #384]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000fb6:	d1c6      	bne.n	8000f46 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb8:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f013 0f02 	tst.w	r3, #2
 8000fc0:	d003      	beq.n	8000fca <HAL_RCC_OscConfig+0x12e>
 8000fc2:	68e3      	ldr	r3, [r4, #12]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	f040 8150 	bne.w	800126a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fca:	4a59      	ldr	r2, [pc, #356]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000fcc:	6813      	ldr	r3, [r2, #0]
 8000fce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fd2:	6921      	ldr	r1, [r4, #16]
 8000fd4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fd8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	f013 0f08 	tst.w	r3, #8
 8000fe0:	d042      	beq.n	8001068 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fe2:	6963      	ldr	r3, [r4, #20]
 8000fe4:	b36b      	cbz	r3, 8001042 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fee:	f7ff fdff 	bl	8000bf0 <HAL_GetTick>
 8000ff2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff4:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8000ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ff8:	f013 0f02 	tst.w	r3, #2
 8000ffc:	d134      	bne.n	8001068 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fdf7 	bl	8000bf0 <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	2802      	cmp	r0, #2
 8001006:	d9f5      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001008:	2003      	movs	r0, #3
 800100a:	e131      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4a48      	ldr	r2, [pc, #288]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001014:	6921      	ldr	r1, [r4, #16]
 8001016:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e7dd      	b.n	8000fda <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800101e:	4b45      	ldr	r3, [pc, #276]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001024:	f7ff fde4 	bl	8000bf0 <HAL_GetTick>
 8001028:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	4b41      	ldr	r3, [pc, #260]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f013 0f02 	tst.w	r3, #2
 8001032:	d0d2      	beq.n	8000fda <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fddc 	bl	8000bf0 <HAL_GetTick>
 8001038:	1b40      	subs	r0, r0, r5
 800103a:	2802      	cmp	r0, #2
 800103c:	d9f5      	bls.n	800102a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800103e:	2003      	movs	r0, #3
 8001040:	e116      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001042:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001044:	2200      	movs	r2, #0
 8001046:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fdd1 	bl	8000bf0 <HAL_GetTick>
 800104e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8001052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001054:	f013 0f02 	tst.w	r3, #2
 8001058:	d006      	beq.n	8001068 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800105a:	f7ff fdc9 	bl	8000bf0 <HAL_GetTick>
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	2802      	cmp	r0, #2
 8001062:	d9f5      	bls.n	8001050 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
 8001066:	e103      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	f013 0f04 	tst.w	r3, #4
 800106e:	d077      	beq.n	8001160 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001078:	d133      	bne.n	80010e2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001092:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <HAL_RCC_OscConfig+0x29c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f413 7f80 	tst.w	r3, #256	; 0x100
 800109c:	d023      	beq.n	80010e6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109e:	68a3      	ldr	r3, [r4, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d034      	beq.n	800110e <HAL_RCC_OscConfig+0x272>
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d038      	beq.n	800111a <HAL_RCC_OscConfig+0x27e>
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 80010aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	671a      	str	r2, [r3, #112]	; 0x70
 80010b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010b4:	f022 0204 	bic.w	r2, r2, #4
 80010b8:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010ba:	68a3      	ldr	r3, [r4, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d03d      	beq.n	800113c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c0:	f7ff fd96 	bl	8000bf0 <HAL_GetTick>
 80010c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 80010c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ca:	f013 0f02 	tst.w	r3, #2
 80010ce:	d146      	bne.n	800115e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d0:	f7ff fd8e 	bl	8000bf0 <HAL_GetTick>
 80010d4:	1b80      	subs	r0, r0, r6
 80010d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010da:	4298      	cmp	r0, r3
 80010dc:	d9f3      	bls.n	80010c6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80010de:	2003      	movs	r0, #3
 80010e0:	e0c6      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80010e2:	2500      	movs	r5, #0
 80010e4:	e7d6      	b.n	8001094 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_RCC_OscConfig+0x29c>)
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80010f0:	f7ff fd7e 	bl	8000bf0 <HAL_GetTick>
 80010f4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_RCC_OscConfig+0x29c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010fe:	d1ce      	bne.n	800109e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001100:	f7ff fd76 	bl	8000bf0 <HAL_GetTick>
 8001104:	1b80      	subs	r0, r0, r6
 8001106:	2802      	cmp	r0, #2
 8001108:	d9f5      	bls.n	80010f6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800110a:	2003      	movs	r0, #3
 800110c:	e0b0      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 8001110:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6713      	str	r3, [r2, #112]	; 0x70
 8001118:	e7cf      	b.n	80010ba <HAL_RCC_OscConfig+0x21e>
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_RCC_OscConfig+0x294>)
 800111c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800111e:	f042 0204 	orr.w	r2, r2, #4
 8001122:	671a      	str	r2, [r3, #112]	; 0x70
 8001124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	671a      	str	r2, [r3, #112]	; 0x70
 800112c:	e7c5      	b.n	80010ba <HAL_RCC_OscConfig+0x21e>
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	42470000 	.word	0x42470000
 8001138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fd58 	bl	8000bf0 <HAL_GetTick>
 8001140:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001142:	4b52      	ldr	r3, [pc, #328]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 8001144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001146:	f013 0f02 	tst.w	r3, #2
 800114a:	d008      	beq.n	800115e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114c:	f7ff fd50 	bl	8000bf0 <HAL_GetTick>
 8001150:	1b80      	subs	r0, r0, r6
 8001152:	f241 3388 	movw	r3, #5000	; 0x1388
 8001156:	4298      	cmp	r0, r3
 8001158:	d9f3      	bls.n	8001142 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
 800115c:	e088      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800115e:	b9ed      	cbnz	r5, 800119c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001160:	69a3      	ldr	r3, [r4, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8083 	beq.w	800126e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001168:	4a48      	ldr	r2, [pc, #288]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 800116a:	6892      	ldr	r2, [r2, #8]
 800116c:	f002 020c 	and.w	r2, r2, #12
 8001170:	2a08      	cmp	r2, #8
 8001172:	d051      	beq.n	8001218 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001174:	2b02      	cmp	r3, #2
 8001176:	d017      	beq.n	80011a8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001178:	4b45      	ldr	r3, [pc, #276]	; (8001290 <HAL_RCC_OscConfig+0x3f4>)
 800117a:	2200      	movs	r2, #0
 800117c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fd37 	bl	8000bf0 <HAL_GetTick>
 8001182:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001184:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800118c:	d042      	beq.n	8001214 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118e:	f7ff fd2f 	bl	8000bf0 <HAL_GetTick>
 8001192:	1b00      	subs	r0, r0, r4
 8001194:	2802      	cmp	r0, #2
 8001196:	d9f5      	bls.n	8001184 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001198:	2003      	movs	r0, #3
 800119a:	e069      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800119c:	4a3b      	ldr	r2, [pc, #236]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 800119e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	e7db      	b.n	8001160 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <HAL_RCC_OscConfig+0x3f4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80011ae:	f7ff fd1f 	bl	8000bf0 <HAL_GetTick>
 80011b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b4:	4b35      	ldr	r3, [pc, #212]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011bc:	d006      	beq.n	80011cc <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff fd17 	bl	8000bf0 <HAL_GetTick>
 80011c2:	1b40      	subs	r0, r0, r5
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d9f5      	bls.n	80011b4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80011c8:	2003      	movs	r0, #3
 80011ca:	e051      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011cc:	69e3      	ldr	r3, [r4, #28]
 80011ce:	6a22      	ldr	r2, [r4, #32]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011d4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011da:	0852      	lsrs	r2, r2, #1
 80011dc:	3a01      	subs	r2, #1
 80011de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011e8:	4a28      	ldr	r2, [pc, #160]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 80011ea:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <HAL_RCC_OscConfig+0x3f4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80011f2:	f7ff fcfd 	bl	8000bf0 <HAL_GetTick>
 80011f6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001200:	d106      	bne.n	8001210 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fcf5 	bl	8000bf0 <HAL_GetTick>
 8001206:	1b00      	subs	r0, r0, r4
 8001208:	2802      	cmp	r0, #2
 800120a:	d9f5      	bls.n	80011f8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800120c:	2003      	movs	r0, #3
 800120e:	e02f      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001210:	2000      	movs	r0, #0
 8001212:	e02d      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
 8001214:	2000      	movs	r0, #0
 8001216:	e02b      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001218:	2b01      	cmp	r3, #1
 800121a:	d02b      	beq.n	8001274 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_RCC_OscConfig+0x3f0>)
 800121e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001220:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001224:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001226:	4291      	cmp	r1, r2
 8001228:	d126      	bne.n	8001278 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800122a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800122e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001230:	428a      	cmp	r2, r1
 8001232:	d123      	bne.n	800127c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001234:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001236:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800123a:	401a      	ands	r2, r3
 800123c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001240:	d11e      	bne.n	8001280 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001242:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001248:	0852      	lsrs	r2, r2, #1
 800124a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800124c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001250:	d118      	bne.n	8001284 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001252:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001256:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001258:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800125c:	d114      	bne.n	8001288 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800125e:	2000      	movs	r0, #0
 8001260:	e006      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
}
 8001264:	4770      	bx	lr
        return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
 8001268:	e002      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800126a:	2001      	movs	r0, #1
 800126c:	e000      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800126e:	2000      	movs	r0, #0
}
 8001270:	b002      	add	sp, #8
 8001272:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
 8001276:	e7fb      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001278:	2001      	movs	r0, #1
 800127a:	e7f9      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
 800127c:	2001      	movs	r0, #1
 800127e:	e7f7      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
 8001280:	2001      	movs	r0, #1
 8001282:	e7f5      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
 8001284:	2001      	movs	r0, #1
 8001286:	e7f3      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
 8001288:	2001      	movs	r0, #1
 800128a:	e7f1      	b.n	8001270 <HAL_RCC_OscConfig+0x3d4>
 800128c:	40023800 	.word	0x40023800
 8001290:	42470000 	.word	0x42470000

08001294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001294:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d041      	beq.n	8001326 <HAL_RCC_GetSysClockFreq+0x92>
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d141      	bne.n	800132a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012b4:	d012      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012b8:	6859      	ldr	r1, [r3, #4]
 80012ba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c0:	2300      	movs	r3, #0
 80012c2:	fba1 0100 	umull	r0, r1, r1, r0
 80012c6:	f7fe ffdb 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012d2:	3301      	adds	r3, #1
 80012d4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80012d6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80012da:	e027      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012de:	6858      	ldr	r0, [r3, #4]
 80012e0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80012e4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80012e8:	ebbc 0c00 	subs.w	ip, ip, r0
 80012ec:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80012f0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80012f4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80012f8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80012fc:	ebb1 010c 	subs.w	r1, r1, ip
 8001300:	eb63 030e 	sbc.w	r3, r3, lr
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800130a:	00c9      	lsls	r1, r1, #3
 800130c:	eb11 0c00 	adds.w	ip, r1, r0
 8001310:	f143 0300 	adc.w	r3, r3, #0
 8001314:	0299      	lsls	r1, r3, #10
 8001316:	2300      	movs	r3, #0
 8001318:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800131c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001320:	f7fe ffae 	bl	8000280 <__aeabi_uldivmod>
 8001324:	e7d1      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001328:	e000      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800132a:	4803      	ldr	r0, [pc, #12]	; (8001338 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800132c:	bd08      	pop	{r3, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	017d7840 	.word	0x017d7840
 8001338:	00f42400 	.word	0x00f42400

0800133c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800133c:	2800      	cmp	r0, #0
 800133e:	f000 809b 	beq.w	8001478 <HAL_RCC_ClockConfig+0x13c>
{
 8001342:	b570      	push	{r4, r5, r6, lr}
 8001344:	460d      	mov	r5, r1
 8001346:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001348:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <HAL_RCC_ClockConfig+0x14c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	428b      	cmp	r3, r1
 8001352:	d208      	bcs.n	8001366 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001354:	b2cb      	uxtb	r3, r1
 8001356:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <HAL_RCC_ClockConfig+0x14c>)
 8001358:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	428b      	cmp	r3, r1
 8001362:	f040 808b 	bne.w	800147c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	f013 0f02 	tst.w	r3, #2
 800136c:	d017      	beq.n	800139e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136e:	f013 0f04 	tst.w	r3, #4
 8001372:	d004      	beq.n	800137e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 8001376:	6893      	ldr	r3, [r2, #8]
 8001378:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800137c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	f013 0f08 	tst.w	r3, #8
 8001384:	d004      	beq.n	8001390 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001386:	4a41      	ldr	r2, [pc, #260]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 8001388:	6893      	ldr	r3, [r2, #8]
 800138a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800138e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4a3e      	ldr	r2, [pc, #248]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 8001392:	6893      	ldr	r3, [r2, #8]
 8001394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001398:	68a1      	ldr	r1, [r4, #8]
 800139a:	430b      	orrs	r3, r1
 800139c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	f013 0f01 	tst.w	r3, #1
 80013a4:	d032      	beq.n	800140c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a6:	6863      	ldr	r3, [r4, #4]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d021      	beq.n	80013f0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ac:	1e9a      	subs	r2, r3, #2
 80013ae:	2a01      	cmp	r2, #1
 80013b0:	d925      	bls.n	80013fe <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4a36      	ldr	r2, [pc, #216]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	f012 0f02 	tst.w	r2, #2
 80013ba:	d061      	beq.n	8001480 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013bc:	4933      	ldr	r1, [pc, #204]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 80013be:	688a      	ldr	r2, [r1, #8]
 80013c0:	f022 0203 	bic.w	r2, r2, #3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80013c8:	f7ff fc12 	bl	8000bf0 <HAL_GetTick>
 80013cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	6862      	ldr	r2, [r4, #4]
 80013d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013dc:	d016      	beq.n	800140c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013de:	f7ff fc07 	bl	8000bf0 <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013e8:	4298      	cmp	r0, r3
 80013ea:	d9f0      	bls.n	80013ce <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80013ec:	2003      	movs	r0, #3
 80013ee:	e042      	b.n	8001476 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f0:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80013f8:	d1e0      	bne.n	80013bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
 80013fc:	e03b      	b.n	8001476 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001406:	d1d9      	bne.n	80013bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001408:	2001      	movs	r0, #1
 800140a:	e034      	b.n	8001476 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_RCC_ClockConfig+0x14c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	42ab      	cmp	r3, r5
 8001416:	d907      	bls.n	8001428 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001418:	b2ea      	uxtb	r2, r5
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_RCC_ClockConfig+0x14c>)
 800141c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	42ab      	cmp	r3, r5
 8001426:	d12d      	bne.n	8001484 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	f013 0f04 	tst.w	r3, #4
 800142e:	d006      	beq.n	800143e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001430:	4a16      	ldr	r2, [pc, #88]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 8001432:	6893      	ldr	r3, [r2, #8]
 8001434:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001438:	68e1      	ldr	r1, [r4, #12]
 800143a:	430b      	orrs	r3, r1
 800143c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	f013 0f08 	tst.w	r3, #8
 8001444:	d007      	beq.n	8001456 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800144e:	6921      	ldr	r1, [r4, #16]
 8001450:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001454:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001456:	f7ff ff1d 	bl	8001294 <HAL_RCC_GetSysClockFreq>
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_RCC_ClockConfig+0x150>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_RCC_ClockConfig+0x154>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	40d8      	lsrs	r0, r3
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_RCC_ClockConfig+0x158>)
 800146a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_RCC_ClockConfig+0x15c>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	f7ff fb72 	bl	8000b58 <HAL_InitTick>
  return HAL_OK;
 8001474:	2000      	movs	r0, #0
}
 8001476:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
}
 800147a:	4770      	bx	lr
      return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
 800147e:	e7fa      	b.n	8001476 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001480:	2001      	movs	r0, #1
 8001482:	e7f8      	b.n	8001476 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001484:	2001      	movs	r0, #1
 8001486:	e7f6      	b.n	8001476 <HAL_RCC_ClockConfig+0x13a>
 8001488:	40023c00 	.word	0x40023c00
 800148c:	40023800 	.word	0x40023800
 8001490:	080031d4 	.word	0x080031d4
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014aa:	f7ff fff7 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80014ba:	40d8      	lsrs	r0, r3
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	080031e4 	.word	0x080031e4

080014c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014c8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014ca:	f7ff ffe7 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80014d6:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
}
 80014da:	40d8      	lsrs	r0, r3
 80014dc:	bd08      	pop	{r3, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	080031e4 	.word	0x080031e4

080014e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014e8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014ea:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014ec:	6a04      	ldr	r4, [r0, #32]
 80014ee:	f024 0401 	bic.w	r4, r4, #1
 80014f2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014f4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014f6:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014fa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014fe:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001502:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001504:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001506:	6203      	str	r3, [r0, #32]
}
 8001508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800150c:	4770      	bx	lr

0800150e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800150e:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001510:	6a04      	ldr	r4, [r0, #32]
 8001512:	f024 0410 	bic.w	r4, r4, #16
 8001516:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001518:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800151a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800151c:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001520:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001524:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001528:	031b      	lsls	r3, r3, #12
 800152a:	b29b      	uxth	r3, r3
 800152c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001530:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001534:	0109      	lsls	r1, r1, #4
 8001536:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800153a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800153c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800153e:	6201      	str	r1, [r0, #32]
}
 8001540:	bc30      	pop	{r4, r5}
 8001542:	4770      	bx	lr

08001544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001544:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001546:	6a03      	ldr	r3, [r0, #32]
 8001548:	f023 0310 	bic.w	r3, r3, #16
 800154c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800154e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001550:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001552:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001556:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800155a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800155e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001562:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001564:	6203      	str	r3, [r0, #32]
}
 8001566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800156a:	4770      	bx	lr

0800156c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800156c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800156e:	6a04      	ldr	r4, [r0, #32]
 8001570:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8001574:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001576:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8001578:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800157a:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800157e:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001582:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	b2db      	uxtb	r3, r3
 800158a:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800158e:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001592:	0209      	lsls	r1, r1, #8
 8001594:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8001598:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800159a:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800159c:	6201      	str	r1, [r0, #32]
}
 800159e:	bc30      	pop	{r4, r5}
 80015a0:	4770      	bx	lr

080015a2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80015a2:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80015a4:	6a04      	ldr	r4, [r0, #32]
 80015a6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80015aa:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80015ac:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80015ae:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80015b0:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80015b4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80015b8:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80015bc:	031b      	lsls	r3, r3, #12
 80015be:	b29b      	uxth	r3, r3
 80015c0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80015c4:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80015c8:	0309      	lsls	r1, r1, #12
 80015ca:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 80015ce:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80015d0:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 80015d2:	6201      	str	r1, [r0, #32]
}
 80015d4:	bc30      	pop	{r4, r5}
 80015d6:	4770      	bx	lr

080015d8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80015d8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80015da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015de:	430b      	orrs	r3, r1
 80015e0:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015e4:	6083      	str	r3, [r0, #8]
}
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_IC_MspInit>:
}
 80015e8:	4770      	bx	lr

080015ea <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 80015ea:	290c      	cmp	r1, #12
 80015ec:	d814      	bhi.n	8001618 <HAL_TIM_ReadCapturedValue+0x2e>
 80015ee:	e8df f001 	tbb	[pc, r1]
 80015f2:	1307      	.short	0x1307
 80015f4:	130a1313 	.word	0x130a1313
 80015f8:	130d1313 	.word	0x130d1313
 80015fc:	1313      	.short	0x1313
 80015fe:	10          	.byte	0x10
 80015ff:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8001604:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8001606:	6803      	ldr	r3, [r0, #0]
 8001608:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800160a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 800160c:	6803      	ldr	r3, [r0, #0]
 800160e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8001610:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8001612:	6803      	ldr	r3, [r0, #0]
 8001614:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8001616:	4770      	bx	lr
  switch (Channel)
 8001618:	2000      	movs	r0, #0
}
 800161a:	4770      	bx	lr

0800161c <HAL_TIM_PeriodElapsedCallback>:
}
 800161c:	4770      	bx	lr

0800161e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800161e:	4770      	bx	lr

08001620 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001620:	4770      	bx	lr

08001622 <HAL_TIM_TriggerCallback>:
}
 8001622:	4770      	bx	lr

08001624 <HAL_TIM_IRQHandler>:
{
 8001624:	b510      	push	{r4, lr}
 8001626:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001628:	6803      	ldr	r3, [r0, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	f012 0f02 	tst.w	r2, #2
 8001630:	d011      	beq.n	8001656 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	f012 0f02 	tst.w	r2, #2
 8001638:	d00d      	beq.n	8001656 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800163a:	f06f 0202 	mvn.w	r2, #2
 800163e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001640:	2301      	movs	r3, #1
 8001642:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001644:	6803      	ldr	r3, [r0, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f013 0f03 	tst.w	r3, #3
 800164c:	d070      	beq.n	8001730 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800164e:	f7fe ffc7 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	2300      	movs	r3, #0
 8001654:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	f012 0f04 	tst.w	r2, #4
 800165e:	d012      	beq.n	8001686 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	f012 0f04 	tst.w	r2, #4
 8001666:	d00e      	beq.n	8001686 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001668:	f06f 0204 	mvn.w	r2, #4
 800166c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800166e:	2302      	movs	r3, #2
 8001670:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f413 7f40 	tst.w	r3, #768	; 0x300
 800167a:	d05f      	beq.n	800173c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800167c:	4620      	mov	r0, r4
 800167e:	f7fe ffaf 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	2300      	movs	r3, #0
 8001684:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	f012 0f08 	tst.w	r2, #8
 800168e:	d012      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	f012 0f08 	tst.w	r2, #8
 8001696:	d00e      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001698:	f06f 0208 	mvn.w	r2, #8
 800169c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800169e:	2304      	movs	r3, #4
 80016a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f013 0f03 	tst.w	r3, #3
 80016aa:	d04e      	beq.n	800174a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7fe ff97 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b2:	2300      	movs	r3, #0
 80016b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	f012 0f10 	tst.w	r2, #16
 80016be:	d012      	beq.n	80016e6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	f012 0f10 	tst.w	r2, #16
 80016c6:	d00e      	beq.n	80016e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016c8:	f06f 0210 	mvn.w	r2, #16
 80016cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ce:	2308      	movs	r3, #8
 80016d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80016da:	d03d      	beq.n	8001758 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80016dc:	4620      	mov	r0, r4
 80016de:	f7fe ff7f 	bl	80005e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e2:	2300      	movs	r3, #0
 80016e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	f012 0f01 	tst.w	r2, #1
 80016ee:	d003      	beq.n	80016f8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	f012 0f01 	tst.w	r2, #1
 80016f6:	d136      	bne.n	8001766 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001700:	d003      	beq.n	800170a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001708:	d134      	bne.n	8001774 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001712:	d003      	beq.n	800171c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	f012 0f40 	tst.w	r2, #64	; 0x40
 800171a:	d132      	bne.n	8001782 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	f012 0f20 	tst.w	r2, #32
 8001724:	d003      	beq.n	800172e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	f012 0f20 	tst.w	r2, #32
 800172c:	d130      	bne.n	8001790 <HAL_TIM_IRQHandler+0x16c>
}
 800172e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001730:	f7ff ff75 	bl	800161e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff ff73 	bl	8001620 <HAL_TIM_PWM_PulseFinishedCallback>
 800173a:	e78a      	b.n	8001652 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff ff6e 	bl	800161e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff ff6c 	bl	8001620 <HAL_TIM_PWM_PulseFinishedCallback>
 8001748:	e79b      	b.n	8001682 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff ff67 	bl	800161e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff ff65 	bl	8001620 <HAL_TIM_PWM_PulseFinishedCallback>
 8001756:	e7ac      	b.n	80016b2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff ff60 	bl	800161e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ff5e 	bl	8001620 <HAL_TIM_PWM_PulseFinishedCallback>
 8001764:	e7bd      	b.n	80016e2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001766:	f06f 0201 	mvn.w	r2, #1
 800176a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff ff55 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
 8001772:	e7c1      	b.n	80016f8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001778:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800177a:	4620      	mov	r0, r4
 800177c:	f000 fbed 	bl	8001f5a <HAL_TIMEx_BreakCallback>
 8001780:	e7c3      	b.n	800170a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001782:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001786:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff ff4a 	bl	8001622 <HAL_TIM_TriggerCallback>
 800178e:	e7c5      	b.n	800171c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001790:	f06f 0220 	mvn.w	r2, #32
 8001794:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001796:	4620      	mov	r0, r4
 8001798:	f000 fbde 	bl	8001f58 <HAL_TIMEx_CommutCallback>
}
 800179c:	e7c7      	b.n	800172e <HAL_TIM_IRQHandler+0x10a>
	...

080017a0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80017a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a2:	4a25      	ldr	r2, [pc, #148]	; (8001838 <TIM_Base_SetConfig+0x98>)
 80017a4:	4290      	cmp	r0, r2
 80017a6:	d00e      	beq.n	80017c6 <TIM_Base_SetConfig+0x26>
 80017a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017ac:	d00b      	beq.n	80017c6 <TIM_Base_SetConfig+0x26>
 80017ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80017b2:	4290      	cmp	r0, r2
 80017b4:	d007      	beq.n	80017c6 <TIM_Base_SetConfig+0x26>
 80017b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ba:	4290      	cmp	r0, r2
 80017bc:	d003      	beq.n	80017c6 <TIM_Base_SetConfig+0x26>
 80017be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c2:	4290      	cmp	r0, r2
 80017c4:	d103      	bne.n	80017ce <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017ca:	684a      	ldr	r2, [r1, #4]
 80017cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <TIM_Base_SetConfig+0x98>)
 80017d0:	4290      	cmp	r0, r2
 80017d2:	d01a      	beq.n	800180a <TIM_Base_SetConfig+0x6a>
 80017d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017d8:	d017      	beq.n	800180a <TIM_Base_SetConfig+0x6a>
 80017da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80017de:	4290      	cmp	r0, r2
 80017e0:	d013      	beq.n	800180a <TIM_Base_SetConfig+0x6a>
 80017e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e6:	4290      	cmp	r0, r2
 80017e8:	d00f      	beq.n	800180a <TIM_Base_SetConfig+0x6a>
 80017ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ee:	4290      	cmp	r0, r2
 80017f0:	d00b      	beq.n	800180a <TIM_Base_SetConfig+0x6a>
 80017f2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80017f6:	4290      	cmp	r0, r2
 80017f8:	d007      	beq.n	800180a <TIM_Base_SetConfig+0x6a>
 80017fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017fe:	4290      	cmp	r0, r2
 8001800:	d003      	beq.n	800180a <TIM_Base_SetConfig+0x6a>
 8001802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001806:	4290      	cmp	r0, r2
 8001808:	d103      	bne.n	8001812 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800180a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800180e:	68ca      	ldr	r2, [r1, #12]
 8001810:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001816:	694a      	ldr	r2, [r1, #20]
 8001818:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800181a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800181c:	688b      	ldr	r3, [r1, #8]
 800181e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001820:	680b      	ldr	r3, [r1, #0]
 8001822:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <TIM_Base_SetConfig+0x98>)
 8001826:	4298      	cmp	r0, r3
 8001828:	d002      	beq.n	8001830 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800182a:	2301      	movs	r3, #1
 800182c:	6143      	str	r3, [r0, #20]
}
 800182e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001830:	690b      	ldr	r3, [r1, #16]
 8001832:	6303      	str	r3, [r0, #48]	; 0x30
 8001834:	e7f9      	b.n	800182a <TIM_Base_SetConfig+0x8a>
 8001836:	bf00      	nop
 8001838:	40010000 	.word	0x40010000

0800183c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800183c:	b340      	cbz	r0, 8001890 <HAL_TIM_Base_Init+0x54>
{
 800183e:	b510      	push	{r4, lr}
 8001840:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001846:	b1f3      	cbz	r3, 8001886 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001848:	2302      	movs	r3, #2
 800184a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800184e:	4621      	mov	r1, r4
 8001850:	f851 0b04 	ldr.w	r0, [r1], #4
 8001854:	f7ff ffa4 	bl	80017a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001858:	2301      	movs	r3, #1
 800185a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800185e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001862:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001866:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800186a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800186e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001876:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800187a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800187e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001882:	2000      	movs	r0, #0
}
 8001884:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001886:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800188a:	f7ff f865 	bl	8000958 <HAL_TIM_Base_MspInit>
 800188e:	e7db      	b.n	8001848 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
}
 8001892:	4770      	bx	lr

08001894 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8001894:	b340      	cbz	r0, 80018e8 <HAL_TIM_IC_Init+0x54>
{
 8001896:	b510      	push	{r4, lr}
 8001898:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800189a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800189e:	b1f3      	cbz	r3, 80018de <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a6:	4621      	mov	r1, r4
 80018a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80018ac:	f7ff ff78 	bl	80017a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80018be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80018c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80018d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80018d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018da:	2000      	movs	r0, #0
}
 80018dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80018de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80018e2:	f7ff fe81 	bl	80015e8 <HAL_TIM_IC_MspInit>
 80018e6:	e7db      	b.n	80018a0 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 80018e8:	2001      	movs	r0, #1
}
 80018ea:	4770      	bx	lr

080018ec <TIM_TI1_SetConfig>:
{
 80018ec:	b470      	push	{r4, r5, r6}
 80018ee:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018f0:	6a04      	ldr	r4, [r0, #32]
 80018f2:	f024 0401 	bic.w	r4, r4, #1
 80018f6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018f8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80018fa:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80018fc:	4d14      	ldr	r5, [pc, #80]	; (8001950 <TIM_TI1_SetConfig+0x64>)
 80018fe:	42a8      	cmp	r0, r5
 8001900:	d014      	beq.n	800192c <TIM_TI1_SetConfig+0x40>
 8001902:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001906:	d011      	beq.n	800192c <TIM_TI1_SetConfig+0x40>
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <TIM_TI1_SetConfig+0x68>)
 800190a:	4290      	cmp	r0, r2
 800190c:	d00e      	beq.n	800192c <TIM_TI1_SetConfig+0x40>
 800190e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001912:	4290      	cmp	r0, r2
 8001914:	d00a      	beq.n	800192c <TIM_TI1_SetConfig+0x40>
 8001916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191a:	4290      	cmp	r0, r2
 800191c:	d006      	beq.n	800192c <TIM_TI1_SetConfig+0x40>
 800191e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001922:	4290      	cmp	r0, r2
 8001924:	d002      	beq.n	800192c <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001926:	f044 0201 	orr.w	r2, r4, #1
 800192a:	e003      	b.n	8001934 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800192c:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001930:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001934:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	b2db      	uxtb	r3, r3
 800193c:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800193e:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001942:	f001 010a 	and.w	r1, r1, #10
 8001946:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8001948:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800194a:	6201      	str	r1, [r0, #32]
}
 800194c:	bc70      	pop	{r4, r5, r6}
 800194e:	4770      	bx	lr
 8001950:	40010000 	.word	0x40010000
 8001954:	40000400 	.word	0x40000400

08001958 <HAL_TIM_IC_ConfigChannel>:
{
 8001958:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800195a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d05a      	beq.n	8001a18 <HAL_TIM_IC_ConfigChannel+0xc0>
 8001962:	4604      	mov	r4, r0
 8001964:	460d      	mov	r5, r1
 8001966:	2301      	movs	r3, #1
 8001968:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800196c:	b152      	cbz	r2, 8001984 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800196e:	2a04      	cmp	r2, #4
 8001970:	d01a      	beq.n	80019a8 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 8001972:	2a08      	cmp	r2, #8
 8001974:	d02b      	beq.n	80019ce <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8001976:	2a0c      	cmp	r2, #12
 8001978:	d03b      	beq.n	80019f2 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 800197a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800197c:	2300      	movs	r3, #0
 800197e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001982:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001984:	68cb      	ldr	r3, [r1, #12]
 8001986:	684a      	ldr	r2, [r1, #4]
 8001988:	6809      	ldr	r1, [r1, #0]
 800198a:	6800      	ldr	r0, [r0, #0]
 800198c:	f7ff ffae 	bl	80018ec <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001990:	6822      	ldr	r2, [r4, #0]
 8001992:	6993      	ldr	r3, [r2, #24]
 8001994:	f023 030c 	bic.w	r3, r3, #12
 8001998:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	6993      	ldr	r3, [r2, #24]
 800199e:	68a9      	ldr	r1, [r5, #8]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2000      	movs	r0, #0
 80019a6:	e7e9      	b.n	800197c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 80019a8:	68cb      	ldr	r3, [r1, #12]
 80019aa:	684a      	ldr	r2, [r1, #4]
 80019ac:	6809      	ldr	r1, [r1, #0]
 80019ae:	6800      	ldr	r0, [r0, #0]
 80019b0:	f7ff fdad 	bl	800150e <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	6993      	ldr	r3, [r2, #24]
 80019b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019bc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80019be:	6822      	ldr	r2, [r4, #0]
 80019c0:	6993      	ldr	r3, [r2, #24]
 80019c2:	68a9      	ldr	r1, [r5, #8]
 80019c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019c8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2000      	movs	r0, #0
 80019cc:	e7d6      	b.n	800197c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80019ce:	68cb      	ldr	r3, [r1, #12]
 80019d0:	684a      	ldr	r2, [r1, #4]
 80019d2:	6809      	ldr	r1, [r1, #0]
 80019d4:	6800      	ldr	r0, [r0, #0]
 80019d6:	f7ff fdc9 	bl	800156c <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	69d3      	ldr	r3, [r2, #28]
 80019de:	f023 030c 	bic.w	r3, r3, #12
 80019e2:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80019e4:	6822      	ldr	r2, [r4, #0]
 80019e6:	69d3      	ldr	r3, [r2, #28]
 80019e8:	68a9      	ldr	r1, [r5, #8]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80019ee:	2000      	movs	r0, #0
 80019f0:	e7c4      	b.n	800197c <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 80019f2:	68cb      	ldr	r3, [r1, #12]
 80019f4:	684a      	ldr	r2, [r1, #4]
 80019f6:	6809      	ldr	r1, [r1, #0]
 80019f8:	6800      	ldr	r0, [r0, #0]
 80019fa:	f7ff fdd2 	bl	80015a2 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	69d3      	ldr	r3, [r2, #28]
 8001a02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a06:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001a08:	6822      	ldr	r2, [r4, #0]
 8001a0a:	69d3      	ldr	r3, [r2, #28]
 8001a0c:	68a9      	ldr	r1, [r5, #8]
 8001a0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a12:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2000      	movs	r0, #0
 8001a16:	e7b1      	b.n	800197c <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8001a18:	2002      	movs	r0, #2
 8001a1a:	e7b2      	b.n	8001982 <HAL_TIM_IC_ConfigChannel+0x2a>

08001a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a1c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a1e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a20:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a24:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a2e:	6082      	str	r2, [r0, #8]
}
 8001a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001a36:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d078      	beq.n	8001b30 <HAL_TIM_ConfigClockSource+0xfa>
{
 8001a3e:	b510      	push	{r4, lr}
 8001a40:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001a42:	2301      	movs	r3, #1
 8001a44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a4e:	6802      	ldr	r2, [r0, #0]
 8001a50:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001a5a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a5c:	680b      	ldr	r3, [r1, #0]
 8001a5e:	2b60      	cmp	r3, #96	; 0x60
 8001a60:	d04c      	beq.n	8001afc <HAL_TIM_ConfigClockSource+0xc6>
 8001a62:	d829      	bhi.n	8001ab8 <HAL_TIM_ConfigClockSource+0x82>
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d054      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0xdc>
 8001a68:	d90c      	bls.n	8001a84 <HAL_TIM_ConfigClockSource+0x4e>
 8001a6a:	2b50      	cmp	r3, #80	; 0x50
 8001a6c:	d122      	bne.n	8001ab4 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a6e:	68ca      	ldr	r2, [r1, #12]
 8001a70:	6849      	ldr	r1, [r1, #4]
 8001a72:	6800      	ldr	r0, [r0, #0]
 8001a74:	f7ff fd38 	bl	80014e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a78:	2150      	movs	r1, #80	; 0x50
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	f7ff fdac 	bl	80015d8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001a80:	2000      	movs	r0, #0
      break;
 8001a82:	e005      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d00d      	beq.n	8001aa4 <HAL_TIM_ConfigClockSource+0x6e>
 8001a88:	d909      	bls.n	8001a9e <HAL_TIM_ConfigClockSource+0x68>
 8001a8a:	2b30      	cmp	r3, #48	; 0x30
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a96:	2300      	movs	r3, #0
 8001a98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001a9c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001a9e:	b10b      	cbz	r3, 8001aa4 <HAL_TIM_ConfigClockSource+0x6e>
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d105      	bne.n	8001ab0 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	f7ff fd96 	bl	80015d8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	2000      	movs	r0, #0
      break;
 8001aae:	e7ef      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	e7ed      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e7eb      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001abc:	d034      	beq.n	8001b28 <HAL_TIM_ConfigClockSource+0xf2>
 8001abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac2:	d10c      	bne.n	8001ade <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8001ac4:	68cb      	ldr	r3, [r1, #12]
 8001ac6:	684a      	ldr	r2, [r1, #4]
 8001ac8:	6889      	ldr	r1, [r1, #8]
 8001aca:	6800      	ldr	r0, [r0, #0]
 8001acc:	f7ff ffa6 	bl	8001a1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	6893      	ldr	r3, [r2, #8]
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001ada:	2000      	movs	r0, #0
      break;
 8001adc:	e7d8      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001ade:	2b70      	cmp	r3, #112	; 0x70
 8001ae0:	d124      	bne.n	8001b2c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001ae2:	68cb      	ldr	r3, [r1, #12]
 8001ae4:	684a      	ldr	r2, [r1, #4]
 8001ae6:	6889      	ldr	r1, [r1, #8]
 8001ae8:	6800      	ldr	r0, [r0, #0]
 8001aea:	f7ff ff97 	bl	8001a1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001aee:	6822      	ldr	r2, [r4, #0]
 8001af0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001af2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001af6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001af8:	2000      	movs	r0, #0
      break;
 8001afa:	e7c9      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001afc:	68ca      	ldr	r2, [r1, #12]
 8001afe:	6849      	ldr	r1, [r1, #4]
 8001b00:	6800      	ldr	r0, [r0, #0]
 8001b02:	f7ff fd1f 	bl	8001544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b06:	2160      	movs	r1, #96	; 0x60
 8001b08:	6820      	ldr	r0, [r4, #0]
 8001b0a:	f7ff fd65 	bl	80015d8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001b0e:	2000      	movs	r0, #0
      break;
 8001b10:	e7be      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b12:	68ca      	ldr	r2, [r1, #12]
 8001b14:	6849      	ldr	r1, [r1, #4]
 8001b16:	6800      	ldr	r0, [r0, #0]
 8001b18:	f7ff fce6 	bl	80014e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b1c:	2140      	movs	r1, #64	; 0x40
 8001b1e:	6820      	ldr	r0, [r4, #0]
 8001b20:	f7ff fd5a 	bl	80015d8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2000      	movs	r0, #0
      break;
 8001b26:	e7b3      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001b28:	2000      	movs	r0, #0
 8001b2a:	e7b1      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e7af      	b.n	8001a90 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001b30:	2002      	movs	r0, #2
}
 8001b32:	4770      	bx	lr

08001b34 <TIM_SlaveTimer_SetConfig>:
{
 8001b34:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8001b36:	6804      	ldr	r4, [r0, #0]
 8001b38:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001b3e:	684b      	ldr	r3, [r1, #4]
 8001b40:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001b42:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001b46:	680a      	ldr	r2, [r1, #0]
 8001b48:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 8001b4a:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8001b4c:	684b      	ldr	r3, [r1, #4]
 8001b4e:	2b50      	cmp	r3, #80	; 0x50
 8001b50:	d032      	beq.n	8001bb8 <TIM_SlaveTimer_SetConfig+0x84>
 8001b52:	d90b      	bls.n	8001b6c <TIM_SlaveTimer_SetConfig+0x38>
 8001b54:	2b60      	cmp	r3, #96	; 0x60
 8001b56:	d036      	beq.n	8001bc6 <TIM_SlaveTimer_SetConfig+0x92>
 8001b58:	2b70      	cmp	r3, #112	; 0x70
 8001b5a:	d143      	bne.n	8001be4 <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 8001b5c:	690b      	ldr	r3, [r1, #16]
 8001b5e:	688a      	ldr	r2, [r1, #8]
 8001b60:	68c9      	ldr	r1, [r1, #12]
 8001b62:	6800      	ldr	r0, [r0, #0]
 8001b64:	f7ff ff5a 	bl	8001a1c <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001b68:	2000      	movs	r0, #0
      break;
 8001b6a:	e00f      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d00e      	beq.n	8001b8e <TIM_SlaveTimer_SetConfig+0x5a>
 8001b70:	d901      	bls.n	8001b76 <TIM_SlaveTimer_SetConfig+0x42>
      status = HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
 8001b74:	e00a      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d02c      	beq.n	8001bd4 <TIM_SlaveTimer_SetConfig+0xa0>
 8001b7a:	d903      	bls.n	8001b84 <TIM_SlaveTimer_SetConfig+0x50>
 8001b7c:	2b30      	cmp	r3, #48	; 0x30
 8001b7e:	d12f      	bne.n	8001be0 <TIM_SlaveTimer_SetConfig+0xac>
 8001b80:	2000      	movs	r0, #0
 8001b82:	e003      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
 8001b84:	b343      	cbz	r3, 8001bd8 <TIM_SlaveTimer_SetConfig+0xa4>
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d128      	bne.n	8001bdc <TIM_SlaveTimer_SetConfig+0xa8>
 8001b8a:	2000      	movs	r0, #0
}
 8001b8c:	bd10      	pop	{r4, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001b8e:	680b      	ldr	r3, [r1, #0]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d029      	beq.n	8001be8 <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 8001b94:	6803      	ldr	r3, [r0, #0]
 8001b96:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001ba0:	6802      	ldr	r2, [r0, #0]
 8001ba2:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001ba8:	6909      	ldr	r1, [r1, #16]
 8001baa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001bae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8001bb0:	6803      	ldr	r3, [r0, #0]
 8001bb2:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb4:	2000      	movs	r0, #0
      break;
 8001bb6:	e7e9      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bb8:	690a      	ldr	r2, [r1, #16]
 8001bba:	6889      	ldr	r1, [r1, #8]
 8001bbc:	6800      	ldr	r0, [r0, #0]
 8001bbe:	f7ff fc93 	bl	80014e8 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2000      	movs	r0, #0
      break;
 8001bc4:	e7e2      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bc6:	690a      	ldr	r2, [r1, #16]
 8001bc8:	6889      	ldr	r1, [r1, #8]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	f7ff fcba 	bl	8001544 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8001bd0:	2000      	movs	r0, #0
      break;
 8001bd2:	e7db      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	e7d9      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e7d7      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
      status = HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e7d5      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
 8001be0:	2001      	movs	r0, #1
 8001be2:	e7d3      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
 8001be4:	2001      	movs	r0, #1
 8001be6:	e7d1      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>
        return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	e7cf      	b.n	8001b8c <TIM_SlaveTimer_SetConfig+0x58>

08001bec <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8001bec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d022      	beq.n	8001c3a <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001c04:	f7ff ff96 	bl	8001b34 <TIM_SlaveTimer_SetConfig>
 8001c08:	b980      	cbnz	r0, 8001c2c <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	68d3      	ldr	r3, [r2, #12]
 8001c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c12:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	68d3      	ldr	r3, [r2, #12]
 8001c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c1c:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c24:	2300      	movs	r3, #0
 8001c26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001c2a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001c32:	2300      	movs	r3, #0
 8001c34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001c38:	e7f7      	b.n	8001c2a <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8001c3a:	2002      	movs	r0, #2
}
 8001c3c:	4770      	bx	lr

08001c3e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c3e:	f001 011f 	and.w	r1, r1, #31
 8001c42:	f04f 0c01 	mov.w	ip, #1
 8001c46:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c4a:	6a03      	ldr	r3, [r0, #32]
 8001c4c:	ea23 030c 	bic.w	r3, r3, ip
 8001c50:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c52:	6a03      	ldr	r3, [r0, #32]
 8001c54:	408a      	lsls	r2, r1
 8001c56:	4313      	orrs	r3, r2
 8001c58:	6203      	str	r3, [r0, #32]
}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_TIM_IC_Start>:
{
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c60:	460b      	mov	r3, r1
 8001c62:	2900      	cmp	r1, #0
 8001c64:	d137      	bne.n	8001cd6 <HAL_TIM_IC_Start+0x7a>
 8001c66:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8001c6a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d142      	bne.n	8001cf6 <HAL_TIM_IC_Start+0x9a>
 8001c70:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8001c74:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c76:	2801      	cmp	r0, #1
 8001c78:	d178      	bne.n	8001d6c <HAL_TIM_IC_Start+0x110>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c7a:	2a01      	cmp	r2, #1
 8001c7c:	d177      	bne.n	8001d6e <HAL_TIM_IC_Start+0x112>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d149      	bne.n	8001d16 <HAL_TIM_IC_Start+0xba>
 8001c82:	2202      	movs	r2, #2
 8001c84:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d154      	bne.n	8001d36 <HAL_TIM_IC_Start+0xda>
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c92:	2201      	movs	r2, #1
 8001c94:	4619      	mov	r1, r3
 8001c96:	6820      	ldr	r0, [r4, #0]
 8001c98:	f7ff ffd1 	bl	8001c3e <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	4a35      	ldr	r2, [pc, #212]	; (8001d74 <HAL_TIM_IC_Start+0x118>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d058      	beq.n	8001d56 <HAL_TIM_IC_Start+0xfa>
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d055      	beq.n	8001d56 <HAL_TIM_IC_Start+0xfa>
 8001caa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d051      	beq.n	8001d56 <HAL_TIM_IC_Start+0xfa>
 8001cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d04d      	beq.n	8001d56 <HAL_TIM_IC_Start+0xfa>
 8001cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d049      	beq.n	8001d56 <HAL_TIM_IC_Start+0xfa>
 8001cc2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d045      	beq.n	8001d56 <HAL_TIM_IC_Start+0xfa>
    __HAL_TIM_ENABLE(htim);
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	e04b      	b.n	8001d6e <HAL_TIM_IC_Start+0x112>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001cd6:	2904      	cmp	r1, #4
 8001cd8:	d005      	beq.n	8001ce6 <HAL_TIM_IC_Start+0x8a>
 8001cda:	2908      	cmp	r1, #8
 8001cdc:	d007      	beq.n	8001cee <HAL_TIM_IC_Start+0x92>
 8001cde:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8001ce2:	b2c0      	uxtb	r0, r0
 8001ce4:	e7c2      	b.n	8001c6c <HAL_TIM_IC_Start+0x10>
 8001ce6:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8001cea:	b2c0      	uxtb	r0, r0
 8001cec:	e7be      	b.n	8001c6c <HAL_TIM_IC_Start+0x10>
 8001cee:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001cf2:	b2c0      	uxtb	r0, r0
 8001cf4:	e7ba      	b.n	8001c6c <HAL_TIM_IC_Start+0x10>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d005      	beq.n	8001d06 <HAL_TIM_IC_Start+0xaa>
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d007      	beq.n	8001d0e <HAL_TIM_IC_Start+0xb2>
 8001cfe:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	e7b7      	b.n	8001c76 <HAL_TIM_IC_Start+0x1a>
 8001d06:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	e7b3      	b.n	8001c76 <HAL_TIM_IC_Start+0x1a>
 8001d0e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	e7af      	b.n	8001c76 <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d005      	beq.n	8001d26 <HAL_TIM_IC_Start+0xca>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d007      	beq.n	8001d2e <HAL_TIM_IC_Start+0xd2>
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8001d24:	e7b0      	b.n	8001c88 <HAL_TIM_IC_Start+0x2c>
 8001d26:	2202      	movs	r2, #2
 8001d28:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8001d2c:	e7ac      	b.n	8001c88 <HAL_TIM_IC_Start+0x2c>
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8001d34:	e7a8      	b.n	8001c88 <HAL_TIM_IC_Start+0x2c>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d005      	beq.n	8001d46 <HAL_TIM_IC_Start+0xea>
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d007      	beq.n	8001d4e <HAL_TIM_IC_Start+0xf2>
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001d44:	e7a5      	b.n	8001c92 <HAL_TIM_IC_Start+0x36>
 8001d46:	2202      	movs	r2, #2
 8001d48:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d4c:	e7a1      	b.n	8001c92 <HAL_TIM_IC_Start+0x36>
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8001d54:	e79d      	b.n	8001c92 <HAL_TIM_IC_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	2a06      	cmp	r2, #6
 8001d5e:	d007      	beq.n	8001d70 <HAL_TIM_IC_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d68:	2000      	movs	r0, #0
 8001d6a:	e000      	b.n	8001d6e <HAL_TIM_IC_Start+0x112>
    return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
}
 8001d6e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001d70:	2000      	movs	r0, #0
 8001d72:	e7fc      	b.n	8001d6e <HAL_TIM_IC_Start+0x112>
 8001d74:	40010000 	.word	0x40010000

08001d78 <HAL_TIM_IC_Start_IT>:
{
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	bb09      	cbnz	r1, 8001dc4 <HAL_TIM_IC_Start_IT+0x4c>
 8001d80:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8001d84:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001d86:	bb6b      	cbnz	r3, 8001de4 <HAL_TIM_IC_Start_IT+0x6c>
 8001d88:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8001d8c:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d8e:	2801      	cmp	r0, #1
 8001d90:	f040 809c 	bne.w	8001ecc <HAL_TIM_IC_Start_IT+0x154>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d94:	2a01      	cmp	r2, #1
 8001d96:	f040 809a 	bne.w	8001ece <HAL_TIM_IC_Start_IT+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d9a:	bb9b      	cbnz	r3, 8001e04 <HAL_TIM_IC_Start_IT+0x8c>
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13e      	bne.n	8001e24 <HAL_TIM_IC_Start_IT+0xac>
 8001da6:	2102      	movs	r1, #2
 8001da8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  switch (Channel)
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	f200 808f 	bhi.w	8001ed0 <HAL_TIM_IC_Start_IT+0x158>
 8001db2:	e8df f003 	tbb	[pc, r3]
 8001db6:	8d47      	.short	0x8d47
 8001db8:	8d6e8d8d 	.word	0x8d6e8d8d
 8001dbc:	8d748d8d 	.word	0x8d748d8d
 8001dc0:	8d8d      	.short	0x8d8d
 8001dc2:	7a          	.byte	0x7a
 8001dc3:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001dc4:	2904      	cmp	r1, #4
 8001dc6:	d005      	beq.n	8001dd4 <HAL_TIM_IC_Start_IT+0x5c>
 8001dc8:	2908      	cmp	r1, #8
 8001dca:	d007      	beq.n	8001ddc <HAL_TIM_IC_Start_IT+0x64>
 8001dcc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8001dd0:	b2c0      	uxtb	r0, r0
 8001dd2:	e7d8      	b.n	8001d86 <HAL_TIM_IC_Start_IT+0xe>
 8001dd4:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8001dd8:	b2c0      	uxtb	r0, r0
 8001dda:	e7d4      	b.n	8001d86 <HAL_TIM_IC_Start_IT+0xe>
 8001ddc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001de0:	b2c0      	uxtb	r0, r0
 8001de2:	e7d0      	b.n	8001d86 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d005      	beq.n	8001df4 <HAL_TIM_IC_Start_IT+0x7c>
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d007      	beq.n	8001dfc <HAL_TIM_IC_Start_IT+0x84>
 8001dec:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	e7cc      	b.n	8001d8e <HAL_TIM_IC_Start_IT+0x16>
 8001df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	e7c8      	b.n	8001d8e <HAL_TIM_IC_Start_IT+0x16>
 8001dfc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	e7c4      	b.n	8001d8e <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d005      	beq.n	8001e14 <HAL_TIM_IC_Start_IT+0x9c>
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d007      	beq.n	8001e1c <HAL_TIM_IC_Start_IT+0xa4>
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 8001e12:	e7c6      	b.n	8001da2 <HAL_TIM_IC_Start_IT+0x2a>
 8001e14:	2102      	movs	r1, #2
 8001e16:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 8001e1a:	e7c2      	b.n	8001da2 <HAL_TIM_IC_Start_IT+0x2a>
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8001e22:	e7be      	b.n	8001da2 <HAL_TIM_IC_Start_IT+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d005      	beq.n	8001e34 <HAL_TIM_IC_Start_IT+0xbc>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d007      	beq.n	8001e3c <HAL_TIM_IC_Start_IT+0xc4>
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001e32:	e7bb      	b.n	8001dac <HAL_TIM_IC_Start_IT+0x34>
 8001e34:	2102      	movs	r1, #2
 8001e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e3a:	e7b7      	b.n	8001dac <HAL_TIM_IC_Start_IT+0x34>
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8001e42:	e7b3      	b.n	8001dac <HAL_TIM_IC_Start_IT+0x34>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e44:	6821      	ldr	r1, [r4, #0]
 8001e46:	68ca      	ldr	r2, [r1, #12]
 8001e48:	f042 0202 	orr.w	r2, r2, #2
 8001e4c:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4619      	mov	r1, r3
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	f7ff fef3 	bl	8001c3e <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_TIM_IC_Start_IT+0x160>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d02a      	beq.n	8001eb6 <HAL_TIM_IC_Start_IT+0x13e>
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e64:	d027      	beq.n	8001eb6 <HAL_TIM_IC_Start_IT+0x13e>
 8001e66:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d023      	beq.n	8001eb6 <HAL_TIM_IC_Start_IT+0x13e>
 8001e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_TIM_IC_Start_IT+0x13e>
 8001e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01b      	beq.n	8001eb6 <HAL_TIM_IC_Start_IT+0x13e>
 8001e7e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d017      	beq.n	8001eb6 <HAL_TIM_IC_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	2000      	movs	r0, #0
 8001e90:	e01d      	b.n	8001ece <HAL_TIM_IC_Start_IT+0x156>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e92:	6821      	ldr	r1, [r4, #0]
 8001e94:	68ca      	ldr	r2, [r1, #12]
 8001e96:	f042 0204 	orr.w	r2, r2, #4
 8001e9a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8001e9c:	e7d7      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e9e:	6821      	ldr	r1, [r4, #0]
 8001ea0:	68ca      	ldr	r2, [r1, #12]
 8001ea2:	f042 0208 	orr.w	r2, r2, #8
 8001ea6:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8001ea8:	e7d1      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001eaa:	6821      	ldr	r1, [r4, #0]
 8001eac:	68ca      	ldr	r2, [r1, #12]
 8001eae:	f042 0210 	orr.w	r2, r2, #16
 8001eb2:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8001eb4:	e7cb      	b.n	8001e4e <HAL_TIM_IC_Start_IT+0xd6>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebc:	2a06      	cmp	r2, #6
 8001ebe:	d009      	beq.n	8001ed4 <HAL_TIM_IC_Start_IT+0x15c>
        __HAL_TIM_ENABLE(htim);
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	2000      	movs	r0, #0
 8001eca:	e000      	b.n	8001ece <HAL_TIM_IC_Start_IT+0x156>
    return HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
}
 8001ece:	bd10      	pop	{r4, pc}
  switch (Channel)
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	e7fc      	b.n	8001ece <HAL_TIM_IC_Start_IT+0x156>
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	e7fa      	b.n	8001ece <HAL_TIM_IC_Start_IT+0x156>
 8001ed8:	40010000 	.word	0x40010000

08001edc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001edc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001ee0:	2a01      	cmp	r2, #1
 8001ee2:	d035      	beq.n	8001f50 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8001ee4:	b410      	push	{r4}
 8001ee6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ef4:	6802      	ldr	r2, [r0, #0]
 8001ef6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ef8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001efa:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001efe:	6808      	ldr	r0, [r1, #0]
 8001f00:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f04:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4812      	ldr	r0, [pc, #72]	; (8001f54 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001f0a:	4282      	cmp	r2, r0
 8001f0c:	d012      	beq.n	8001f34 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f0e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001f12:	d00f      	beq.n	8001f34 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f14:	f5a0 407c 	sub.w	r0, r0, #64512	; 0xfc00
 8001f18:	4282      	cmp	r2, r0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f1c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001f20:	4282      	cmp	r2, r0
 8001f22:	d007      	beq.n	8001f34 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f24:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001f28:	4282      	cmp	r2, r0
 8001f2a:	d003      	beq.n	8001f34 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001f2c:	f500 309a 	add.w	r0, r0, #78848	; 0x13400
 8001f30:	4282      	cmp	r2, r0
 8001f32:	d104      	bne.n	8001f3e <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f34:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f38:	6849      	ldr	r1, [r1, #4]
 8001f3a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f3c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8001f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001f50:	2002      	movs	r0, #2
}
 8001f52:	4770      	bx	lr
 8001f54:	40010000 	.word	0x40010000

08001f58 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f58:	4770      	bx	lr

08001f5a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f5a:	4770      	bx	lr

08001f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f5c:	b510      	push	{r4, lr}
 8001f5e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f60:	6802      	ldr	r2, [r0, #0]
 8001f62:	6913      	ldr	r3, [r2, #16]
 8001f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f68:	68c1      	ldr	r1, [r0, #12]
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6e:	6883      	ldr	r3, [r0, #8]
 8001f70:	6902      	ldr	r2, [r0, #16]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	6943      	ldr	r3, [r0, #20]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	69c3      	ldr	r3, [r0, #28]
 8001f7a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001f7c:	6801      	ldr	r1, [r0, #0]
 8001f7e:	68cb      	ldr	r3, [r1, #12]
 8001f80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f84:	f023 030c 	bic.w	r3, r3, #12
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f8c:	6802      	ldr	r2, [r0, #0]
 8001f8e:	6953      	ldr	r3, [r2, #20]
 8001f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f94:	6981      	ldr	r1, [r0, #24]
 8001f96:	430b      	orrs	r3, r1
 8001f98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f9a:	6803      	ldr	r3, [r0, #0]
 8001f9c:	4a31      	ldr	r2, [pc, #196]	; (8002064 <UART_SetConfig+0x108>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d006      	beq.n	8001fb0 <UART_SetConfig+0x54>
 8001fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d002      	beq.n	8001fb0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001faa:	f7ff fa7d 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001fae:	e001      	b.n	8001fb4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fb0:	f7ff fa8a 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb4:	69e3      	ldr	r3, [r4, #28]
 8001fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fba:	d029      	beq.n	8002010 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	1803      	adds	r3, r0, r0
 8001fc0:	4149      	adcs	r1, r1
 8001fc2:	181b      	adds	r3, r3, r0
 8001fc4:	f141 0100 	adc.w	r1, r1, #0
 8001fc8:	00c9      	lsls	r1, r1, #3
 8001fca:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1818      	adds	r0, r3, r0
 8001fd2:	6863      	ldr	r3, [r4, #4]
 8001fd4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001fd8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001fdc:	f141 0100 	adc.w	r1, r1, #0
 8001fe0:	f7fe f94e 	bl	8000280 <__aeabi_uldivmod>
 8001fe4:	4a20      	ldr	r2, [pc, #128]	; (8002068 <UART_SetConfig+0x10c>)
 8001fe6:	fba2 3100 	umull	r3, r1, r2, r0
 8001fea:	0949      	lsrs	r1, r1, #5
 8001fec:	2364      	movs	r3, #100	; 0x64
 8001fee:	fb03 0311 	mls	r3, r3, r1, r0
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	3332      	adds	r3, #50	; 0x32
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002000:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	6821      	ldr	r1, [r4, #0]
 800200a:	4413      	add	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }
}
 800200e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002010:	2300      	movs	r3, #0
 8002012:	1802      	adds	r2, r0, r0
 8002014:	eb43 0103 	adc.w	r1, r3, r3
 8002018:	1812      	adds	r2, r2, r0
 800201a:	f141 0100 	adc.w	r1, r1, #0
 800201e:	00c9      	lsls	r1, r1, #3
 8002020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002024:	00d2      	lsls	r2, r2, #3
 8002026:	1810      	adds	r0, r2, r0
 8002028:	f141 0100 	adc.w	r1, r1, #0
 800202c:	6862      	ldr	r2, [r4, #4]
 800202e:	1892      	adds	r2, r2, r2
 8002030:	415b      	adcs	r3, r3
 8002032:	f7fe f925 	bl	8000280 <__aeabi_uldivmod>
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <UART_SetConfig+0x10c>)
 8002038:	fba2 3100 	umull	r3, r1, r2, r0
 800203c:	0949      	lsrs	r1, r1, #5
 800203e:	2364      	movs	r3, #100	; 0x64
 8002040:	fb03 0311 	mls	r3, r3, r1, r0
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	3332      	adds	r3, #50	; 0x32
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	005a      	lsls	r2, r3, #1
 8002050:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002054:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	6821      	ldr	r1, [r4, #0]
 800205e:	4413      	add	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
 8002062:	e7d4      	b.n	800200e <UART_SetConfig+0xb2>
 8002064:	40011000 	.word	0x40011000
 8002068:	51eb851f 	.word	0x51eb851f

0800206c <UART_WaitOnFlagUntilTimeout>:
{
 800206c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002070:	4605      	mov	r5, r0
 8002072:	460f      	mov	r7, r1
 8002074:	4616      	mov	r6, r2
 8002076:	4699      	mov	r9, r3
 8002078:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	681c      	ldr	r4, [r3, #0]
 8002080:	ea37 0404 	bics.w	r4, r7, r4
 8002084:	bf0c      	ite	eq
 8002086:	2401      	moveq	r4, #1
 8002088:	2400      	movne	r4, #0
 800208a:	42b4      	cmp	r4, r6
 800208c:	d12d      	bne.n	80020ea <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 800208e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002092:	d0f3      	beq.n	800207c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002094:	f1b8 0f00 	cmp.w	r8, #0
 8002098:	d005      	beq.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x3a>
 800209a:	f7fe fda9 	bl	8000bf0 <HAL_GetTick>
 800209e:	eba0 0009 	sub.w	r0, r0, r9
 80020a2:	4540      	cmp	r0, r8
 80020a4:	d9ea      	bls.n	800207c <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020a6:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a8:	f102 030c 	add.w	r3, r2, #12
 80020ac:	e853 3f00 	ldrex	r3, [r3]
 80020b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b4:	320c      	adds	r2, #12
 80020b6:	e842 3100 	strex	r1, r3, [r2]
 80020ba:	2900      	cmp	r1, #0
 80020bc:	d1f3      	bne.n	80020a6 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020be:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c0:	f102 0314 	add.w	r3, r2, #20
 80020c4:	e853 3f00 	ldrex	r3, [r3]
 80020c8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020cc:	3214      	adds	r2, #20
 80020ce:	e842 3100 	strex	r1, r3, [r2]
 80020d2:	2900      	cmp	r1, #0
 80020d4:	d1f3      	bne.n	80020be <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 80020d6:	2320      	movs	r3, #32
 80020d8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020dc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80020e0:	2300      	movs	r3, #0
 80020e2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80020e6:	2003      	movs	r0, #3
 80020e8:	e000      	b.n	80020ec <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 80020ea:	2000      	movs	r0, #0
}
 80020ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020f0 <HAL_UART_Init>:
  if (huart == NULL)
 80020f0:	b358      	cbz	r0, 800214a <HAL_UART_Init+0x5a>
{
 80020f2:	b510      	push	{r4, lr}
 80020f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80020f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020fa:	b30b      	cbz	r3, 8002140 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80020fc:	2324      	movs	r3, #36	; 0x24
 80020fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	68d3      	ldr	r3, [r2, #12]
 8002106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800210a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff ff25 	bl	8001f5c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002112:	6822      	ldr	r2, [r4, #0]
 8002114:	6913      	ldr	r3, [r2, #16]
 8002116:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800211a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	6953      	ldr	r3, [r2, #20]
 8002120:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002124:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002126:	6822      	ldr	r2, [r4, #0]
 8002128:	68d3      	ldr	r3, [r2, #12]
 800212a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800212e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002130:	2000      	movs	r0, #0
 8002132:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002134:	2320      	movs	r3, #32
 8002136:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800213a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800213e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002140:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002144:	f7fe fc46 	bl	80009d4 <HAL_UART_MspInit>
 8002148:	e7d8      	b.n	80020fc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800214a:	2001      	movs	r0, #1
}
 800214c:	4770      	bx	lr

0800214e <HAL_UART_Transmit>:
{
 800214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002156:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b20      	cmp	r3, #32
 800215e:	d154      	bne.n	800220a <HAL_UART_Transmit+0xbc>
 8002160:	4604      	mov	r4, r0
 8002162:	460d      	mov	r5, r1
 8002164:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002166:	2900      	cmp	r1, #0
 8002168:	d053      	beq.n	8002212 <HAL_UART_Transmit+0xc4>
 800216a:	2a00      	cmp	r2, #0
 800216c:	d053      	beq.n	8002216 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800216e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d051      	beq.n	800221a <HAL_UART_Transmit+0xcc>
 8002176:	2301      	movs	r3, #1
 8002178:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217c:	2300      	movs	r3, #0
 800217e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002180:	2321      	movs	r3, #33	; 0x21
 8002182:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002186:	f7fe fd33 	bl	8000bf0 <HAL_GetTick>
 800218a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800218c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002190:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002194:	68a3      	ldr	r3, [r4, #8]
 8002196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219a:	d005      	beq.n	80021a8 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800219c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80021a0:	2300      	movs	r3, #0
 80021a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80021a6:	e012      	b.n	80021ce <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a8:	6923      	ldr	r3, [r4, #16]
 80021aa:	b113      	cbz	r3, 80021b2 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80021ac:	f04f 0800 	mov.w	r8, #0
 80021b0:	e7f6      	b.n	80021a0 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 80021b2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80021b4:	2500      	movs	r5, #0
 80021b6:	e7f3      	b.n	80021a0 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021b8:	f838 3b02 	ldrh.w	r3, [r8], #2
 80021bc:	6822      	ldr	r2, [r4, #0]
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80021c4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80021c6:	b292      	uxth	r2, r2
 80021c8:	3a01      	subs	r2, #1
 80021ca:	b292      	uxth	r2, r2
 80021cc:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b173      	cbz	r3, 80021f2 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021d4:	9600      	str	r6, [sp, #0]
 80021d6:	463b      	mov	r3, r7
 80021d8:	2200      	movs	r2, #0
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ff45 	bl	800206c <UART_WaitOnFlagUntilTimeout>
 80021e2:	b9e0      	cbnz	r0, 800221e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80021e4:	2d00      	cmp	r5, #0
 80021e6:	d0e7      	beq.n	80021b8 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021f0:	e7e8      	b.n	80021c4 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	9600      	str	r6, [sp, #0]
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	2140      	movs	r1, #64	; 0x40
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff ff36 	bl	800206c <UART_WaitOnFlagUntilTimeout>
 8002200:	b978      	cbnz	r0, 8002222 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8002202:	2320      	movs	r3, #32
 8002204:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002208:	e000      	b.n	800220c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800220a:	2002      	movs	r0, #2
}
 800220c:	b002      	add	sp, #8
 800220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002212:	2001      	movs	r0, #1
 8002214:	e7fa      	b.n	800220c <HAL_UART_Transmit+0xbe>
 8002216:	2001      	movs	r0, #1
 8002218:	e7f8      	b.n	800220c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800221a:	2002      	movs	r0, #2
 800221c:	e7f6      	b.n	800220c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800221e:	2003      	movs	r0, #3
 8002220:	e7f4      	b.n	800220c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8002222:	2003      	movs	r0, #3
 8002224:	e7f2      	b.n	800220c <HAL_UART_Transmit+0xbe>
	...

08002228 <std>:
 8002228:	2300      	movs	r3, #0
 800222a:	b510      	push	{r4, lr}
 800222c:	4604      	mov	r4, r0
 800222e:	e9c0 3300 	strd	r3, r3, [r0]
 8002232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002236:	6083      	str	r3, [r0, #8]
 8002238:	8181      	strh	r1, [r0, #12]
 800223a:	6643      	str	r3, [r0, #100]	; 0x64
 800223c:	81c2      	strh	r2, [r0, #14]
 800223e:	6183      	str	r3, [r0, #24]
 8002240:	4619      	mov	r1, r3
 8002242:	2208      	movs	r2, #8
 8002244:	305c      	adds	r0, #92	; 0x5c
 8002246:	f000 f8fc 	bl	8002442 <memset>
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <std+0x38>)
 800224c:	6263      	str	r3, [r4, #36]	; 0x24
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <std+0x3c>)
 8002250:	62a3      	str	r3, [r4, #40]	; 0x28
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <std+0x40>)
 8002254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <std+0x44>)
 8002258:	6224      	str	r4, [r4, #32]
 800225a:	6323      	str	r3, [r4, #48]	; 0x30
 800225c:	bd10      	pop	{r4, pc}
 800225e:	bf00      	nop
 8002260:	080023bd 	.word	0x080023bd
 8002264:	080023df 	.word	0x080023df
 8002268:	08002417 	.word	0x08002417
 800226c:	0800243b 	.word	0x0800243b

08002270 <stdio_exit_handler>:
 8002270:	4a02      	ldr	r2, [pc, #8]	; (800227c <stdio_exit_handler+0xc>)
 8002272:	4903      	ldr	r1, [pc, #12]	; (8002280 <stdio_exit_handler+0x10>)
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <stdio_exit_handler+0x14>)
 8002276:	f000 b869 	b.w	800234c <_fwalk_sglue>
 800227a:	bf00      	nop
 800227c:	2000000c 	.word	0x2000000c
 8002280:	08002ddd 	.word	0x08002ddd
 8002284:	20000018 	.word	0x20000018

08002288 <cleanup_stdio>:
 8002288:	6841      	ldr	r1, [r0, #4]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <cleanup_stdio+0x34>)
 800228c:	4299      	cmp	r1, r3
 800228e:	b510      	push	{r4, lr}
 8002290:	4604      	mov	r4, r0
 8002292:	d001      	beq.n	8002298 <cleanup_stdio+0x10>
 8002294:	f000 fda2 	bl	8002ddc <_fflush_r>
 8002298:	68a1      	ldr	r1, [r4, #8]
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <cleanup_stdio+0x38>)
 800229c:	4299      	cmp	r1, r3
 800229e:	d002      	beq.n	80022a6 <cleanup_stdio+0x1e>
 80022a0:	4620      	mov	r0, r4
 80022a2:	f000 fd9b 	bl	8002ddc <_fflush_r>
 80022a6:	68e1      	ldr	r1, [r4, #12]
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <cleanup_stdio+0x3c>)
 80022aa:	4299      	cmp	r1, r3
 80022ac:	d004      	beq.n	80022b8 <cleanup_stdio+0x30>
 80022ae:	4620      	mov	r0, r4
 80022b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022b4:	f000 bd92 	b.w	8002ddc <_fflush_r>
 80022b8:	bd10      	pop	{r4, pc}
 80022ba:	bf00      	nop
 80022bc:	20000124 	.word	0x20000124
 80022c0:	2000018c 	.word	0x2000018c
 80022c4:	200001f4 	.word	0x200001f4

080022c8 <global_stdio_init.part.0>:
 80022c8:	b510      	push	{r4, lr}
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <global_stdio_init.part.0+0x30>)
 80022cc:	4c0b      	ldr	r4, [pc, #44]	; (80022fc <global_stdio_init.part.0+0x34>)
 80022ce:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <global_stdio_init.part.0+0x38>)
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	4620      	mov	r0, r4
 80022d4:	2200      	movs	r2, #0
 80022d6:	2104      	movs	r1, #4
 80022d8:	f7ff ffa6 	bl	8002228 <std>
 80022dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80022e0:	2201      	movs	r2, #1
 80022e2:	2109      	movs	r1, #9
 80022e4:	f7ff ffa0 	bl	8002228 <std>
 80022e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80022ec:	2202      	movs	r2, #2
 80022ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f2:	2112      	movs	r1, #18
 80022f4:	f7ff bf98 	b.w	8002228 <std>
 80022f8:	2000025c 	.word	0x2000025c
 80022fc:	20000124 	.word	0x20000124
 8002300:	08002271 	.word	0x08002271

08002304 <__sfp_lock_acquire>:
 8002304:	4801      	ldr	r0, [pc, #4]	; (800230c <__sfp_lock_acquire+0x8>)
 8002306:	f000 b915 	b.w	8002534 <__retarget_lock_acquire_recursive>
 800230a:	bf00      	nop
 800230c:	20000265 	.word	0x20000265

08002310 <__sfp_lock_release>:
 8002310:	4801      	ldr	r0, [pc, #4]	; (8002318 <__sfp_lock_release+0x8>)
 8002312:	f000 b910 	b.w	8002536 <__retarget_lock_release_recursive>
 8002316:	bf00      	nop
 8002318:	20000265 	.word	0x20000265

0800231c <__sinit>:
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
 8002320:	f7ff fff0 	bl	8002304 <__sfp_lock_acquire>
 8002324:	6a23      	ldr	r3, [r4, #32]
 8002326:	b11b      	cbz	r3, 8002330 <__sinit+0x14>
 8002328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800232c:	f7ff bff0 	b.w	8002310 <__sfp_lock_release>
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__sinit+0x28>)
 8002332:	6223      	str	r3, [r4, #32]
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__sinit+0x2c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f5      	bne.n	8002328 <__sinit+0xc>
 800233c:	f7ff ffc4 	bl	80022c8 <global_stdio_init.part.0>
 8002340:	e7f2      	b.n	8002328 <__sinit+0xc>
 8002342:	bf00      	nop
 8002344:	08002289 	.word	0x08002289
 8002348:	2000025c 	.word	0x2000025c

0800234c <_fwalk_sglue>:
 800234c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002350:	4607      	mov	r7, r0
 8002352:	4688      	mov	r8, r1
 8002354:	4614      	mov	r4, r2
 8002356:	2600      	movs	r6, #0
 8002358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800235c:	f1b9 0901 	subs.w	r9, r9, #1
 8002360:	d505      	bpl.n	800236e <_fwalk_sglue+0x22>
 8002362:	6824      	ldr	r4, [r4, #0]
 8002364:	2c00      	cmp	r4, #0
 8002366:	d1f7      	bne.n	8002358 <_fwalk_sglue+0xc>
 8002368:	4630      	mov	r0, r6
 800236a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800236e:	89ab      	ldrh	r3, [r5, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d907      	bls.n	8002384 <_fwalk_sglue+0x38>
 8002374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002378:	3301      	adds	r3, #1
 800237a:	d003      	beq.n	8002384 <_fwalk_sglue+0x38>
 800237c:	4629      	mov	r1, r5
 800237e:	4638      	mov	r0, r7
 8002380:	47c0      	blx	r8
 8002382:	4306      	orrs	r6, r0
 8002384:	3568      	adds	r5, #104	; 0x68
 8002386:	e7e9      	b.n	800235c <_fwalk_sglue+0x10>

08002388 <iprintf>:
 8002388:	b40f      	push	{r0, r1, r2, r3}
 800238a:	b507      	push	{r0, r1, r2, lr}
 800238c:	4906      	ldr	r1, [pc, #24]	; (80023a8 <iprintf+0x20>)
 800238e:	ab04      	add	r3, sp, #16
 8002390:	6808      	ldr	r0, [r1, #0]
 8002392:	f853 2b04 	ldr.w	r2, [r3], #4
 8002396:	6881      	ldr	r1, [r0, #8]
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	f000 f9ef 	bl	800277c <_vfiprintf_r>
 800239e:	b003      	add	sp, #12
 80023a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80023a4:	b004      	add	sp, #16
 80023a6:	4770      	bx	lr
 80023a8:	20000064 	.word	0x20000064

080023ac <putchar>:
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <putchar+0xc>)
 80023ae:	4601      	mov	r1, r0
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	6882      	ldr	r2, [r0, #8]
 80023b4:	f000 bd3a 	b.w	8002e2c <_putc_r>
 80023b8:	20000064 	.word	0x20000064

080023bc <__sread>:
 80023bc:	b510      	push	{r4, lr}
 80023be:	460c      	mov	r4, r1
 80023c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c4:	f000 f868 	bl	8002498 <_read_r>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	bfab      	itete	ge
 80023cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023ce:	89a3      	ldrhlt	r3, [r4, #12]
 80023d0:	181b      	addge	r3, r3, r0
 80023d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023d6:	bfac      	ite	ge
 80023d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80023da:	81a3      	strhlt	r3, [r4, #12]
 80023dc:	bd10      	pop	{r4, pc}

080023de <__swrite>:
 80023de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e2:	461f      	mov	r7, r3
 80023e4:	898b      	ldrh	r3, [r1, #12]
 80023e6:	05db      	lsls	r3, r3, #23
 80023e8:	4605      	mov	r5, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	4616      	mov	r6, r2
 80023ee:	d505      	bpl.n	80023fc <__swrite+0x1e>
 80023f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023f4:	2302      	movs	r3, #2
 80023f6:	2200      	movs	r2, #0
 80023f8:	f000 f83c 	bl	8002474 <_lseek_r>
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	4632      	mov	r2, r6
 800240a:	463b      	mov	r3, r7
 800240c:	4628      	mov	r0, r5
 800240e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002412:	f000 b853 	b.w	80024bc <_write_r>

08002416 <__sseek>:
 8002416:	b510      	push	{r4, lr}
 8002418:	460c      	mov	r4, r1
 800241a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800241e:	f000 f829 	bl	8002474 <_lseek_r>
 8002422:	1c43      	adds	r3, r0, #1
 8002424:	89a3      	ldrh	r3, [r4, #12]
 8002426:	bf15      	itete	ne
 8002428:	6560      	strne	r0, [r4, #84]	; 0x54
 800242a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800242e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002432:	81a3      	strheq	r3, [r4, #12]
 8002434:	bf18      	it	ne
 8002436:	81a3      	strhne	r3, [r4, #12]
 8002438:	bd10      	pop	{r4, pc}

0800243a <__sclose>:
 800243a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800243e:	f000 b809 	b.w	8002454 <_close_r>

08002442 <memset>:
 8002442:	4402      	add	r2, r0
 8002444:	4603      	mov	r3, r0
 8002446:	4293      	cmp	r3, r2
 8002448:	d100      	bne.n	800244c <memset+0xa>
 800244a:	4770      	bx	lr
 800244c:	f803 1b01 	strb.w	r1, [r3], #1
 8002450:	e7f9      	b.n	8002446 <memset+0x4>
	...

08002454 <_close_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	4d06      	ldr	r5, [pc, #24]	; (8002470 <_close_r+0x1c>)
 8002458:	2300      	movs	r3, #0
 800245a:	4604      	mov	r4, r0
 800245c:	4608      	mov	r0, r1
 800245e:	602b      	str	r3, [r5, #0]
 8002460:	f7fe fb16 	bl	8000a90 <_close>
 8002464:	1c43      	adds	r3, r0, #1
 8002466:	d102      	bne.n	800246e <_close_r+0x1a>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	b103      	cbz	r3, 800246e <_close_r+0x1a>
 800246c:	6023      	str	r3, [r4, #0]
 800246e:	bd38      	pop	{r3, r4, r5, pc}
 8002470:	20000260 	.word	0x20000260

08002474 <_lseek_r>:
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	4d07      	ldr	r5, [pc, #28]	; (8002494 <_lseek_r+0x20>)
 8002478:	4604      	mov	r4, r0
 800247a:	4608      	mov	r0, r1
 800247c:	4611      	mov	r1, r2
 800247e:	2200      	movs	r2, #0
 8002480:	602a      	str	r2, [r5, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	f7fe fb0e 	bl	8000aa4 <_lseek>
 8002488:	1c43      	adds	r3, r0, #1
 800248a:	d102      	bne.n	8002492 <_lseek_r+0x1e>
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	b103      	cbz	r3, 8002492 <_lseek_r+0x1e>
 8002490:	6023      	str	r3, [r4, #0]
 8002492:	bd38      	pop	{r3, r4, r5, pc}
 8002494:	20000260 	.word	0x20000260

08002498 <_read_r>:
 8002498:	b538      	push	{r3, r4, r5, lr}
 800249a:	4d07      	ldr	r5, [pc, #28]	; (80024b8 <_read_r+0x20>)
 800249c:	4604      	mov	r4, r0
 800249e:	4608      	mov	r0, r1
 80024a0:	4611      	mov	r1, r2
 80024a2:	2200      	movs	r2, #0
 80024a4:	602a      	str	r2, [r5, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7fe fae2 	bl	8000a70 <_read>
 80024ac:	1c43      	adds	r3, r0, #1
 80024ae:	d102      	bne.n	80024b6 <_read_r+0x1e>
 80024b0:	682b      	ldr	r3, [r5, #0]
 80024b2:	b103      	cbz	r3, 80024b6 <_read_r+0x1e>
 80024b4:	6023      	str	r3, [r4, #0]
 80024b6:	bd38      	pop	{r3, r4, r5, pc}
 80024b8:	20000260 	.word	0x20000260

080024bc <_write_r>:
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	4d07      	ldr	r5, [pc, #28]	; (80024dc <_write_r+0x20>)
 80024c0:	4604      	mov	r4, r0
 80024c2:	4608      	mov	r0, r1
 80024c4:	4611      	mov	r1, r2
 80024c6:	2200      	movs	r2, #0
 80024c8:	602a      	str	r2, [r5, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f7fe f872 	bl	80005b4 <_write>
 80024d0:	1c43      	adds	r3, r0, #1
 80024d2:	d102      	bne.n	80024da <_write_r+0x1e>
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	b103      	cbz	r3, 80024da <_write_r+0x1e>
 80024d8:	6023      	str	r3, [r4, #0]
 80024da:	bd38      	pop	{r3, r4, r5, pc}
 80024dc:	20000260 	.word	0x20000260

080024e0 <__errno>:
 80024e0:	4b01      	ldr	r3, [pc, #4]	; (80024e8 <__errno+0x8>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000064 	.word	0x20000064

080024ec <__libc_init_array>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	4d0d      	ldr	r5, [pc, #52]	; (8002524 <__libc_init_array+0x38>)
 80024f0:	4c0d      	ldr	r4, [pc, #52]	; (8002528 <__libc_init_array+0x3c>)
 80024f2:	1b64      	subs	r4, r4, r5
 80024f4:	10a4      	asrs	r4, r4, #2
 80024f6:	2600      	movs	r6, #0
 80024f8:	42a6      	cmp	r6, r4
 80024fa:	d109      	bne.n	8002510 <__libc_init_array+0x24>
 80024fc:	4d0b      	ldr	r5, [pc, #44]	; (800252c <__libc_init_array+0x40>)
 80024fe:	4c0c      	ldr	r4, [pc, #48]	; (8002530 <__libc_init_array+0x44>)
 8002500:	f000 fdf2 	bl	80030e8 <_init>
 8002504:	1b64      	subs	r4, r4, r5
 8002506:	10a4      	asrs	r4, r4, #2
 8002508:	2600      	movs	r6, #0
 800250a:	42a6      	cmp	r6, r4
 800250c:	d105      	bne.n	800251a <__libc_init_array+0x2e>
 800250e:	bd70      	pop	{r4, r5, r6, pc}
 8002510:	f855 3b04 	ldr.w	r3, [r5], #4
 8002514:	4798      	blx	r3
 8002516:	3601      	adds	r6, #1
 8002518:	e7ee      	b.n	80024f8 <__libc_init_array+0xc>
 800251a:	f855 3b04 	ldr.w	r3, [r5], #4
 800251e:	4798      	blx	r3
 8002520:	3601      	adds	r6, #1
 8002522:	e7f2      	b.n	800250a <__libc_init_array+0x1e>
 8002524:	08003228 	.word	0x08003228
 8002528:	08003228 	.word	0x08003228
 800252c:	08003228 	.word	0x08003228
 8002530:	0800322c 	.word	0x0800322c

08002534 <__retarget_lock_acquire_recursive>:
 8002534:	4770      	bx	lr

08002536 <__retarget_lock_release_recursive>:
 8002536:	4770      	bx	lr

08002538 <_free_r>:
 8002538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800253a:	2900      	cmp	r1, #0
 800253c:	d044      	beq.n	80025c8 <_free_r+0x90>
 800253e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002542:	9001      	str	r0, [sp, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f1a1 0404 	sub.w	r4, r1, #4
 800254a:	bfb8      	it	lt
 800254c:	18e4      	addlt	r4, r4, r3
 800254e:	f000 f8df 	bl	8002710 <__malloc_lock>
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <_free_r+0x94>)
 8002554:	9801      	ldr	r0, [sp, #4]
 8002556:	6813      	ldr	r3, [r2, #0]
 8002558:	b933      	cbnz	r3, 8002568 <_free_r+0x30>
 800255a:	6063      	str	r3, [r4, #4]
 800255c:	6014      	str	r4, [r2, #0]
 800255e:	b003      	add	sp, #12
 8002560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002564:	f000 b8da 	b.w	800271c <__malloc_unlock>
 8002568:	42a3      	cmp	r3, r4
 800256a:	d908      	bls.n	800257e <_free_r+0x46>
 800256c:	6825      	ldr	r5, [r4, #0]
 800256e:	1961      	adds	r1, r4, r5
 8002570:	428b      	cmp	r3, r1
 8002572:	bf01      	itttt	eq
 8002574:	6819      	ldreq	r1, [r3, #0]
 8002576:	685b      	ldreq	r3, [r3, #4]
 8002578:	1949      	addeq	r1, r1, r5
 800257a:	6021      	streq	r1, [r4, #0]
 800257c:	e7ed      	b.n	800255a <_free_r+0x22>
 800257e:	461a      	mov	r2, r3
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	b10b      	cbz	r3, 8002588 <_free_r+0x50>
 8002584:	42a3      	cmp	r3, r4
 8002586:	d9fa      	bls.n	800257e <_free_r+0x46>
 8002588:	6811      	ldr	r1, [r2, #0]
 800258a:	1855      	adds	r5, r2, r1
 800258c:	42a5      	cmp	r5, r4
 800258e:	d10b      	bne.n	80025a8 <_free_r+0x70>
 8002590:	6824      	ldr	r4, [r4, #0]
 8002592:	4421      	add	r1, r4
 8002594:	1854      	adds	r4, r2, r1
 8002596:	42a3      	cmp	r3, r4
 8002598:	6011      	str	r1, [r2, #0]
 800259a:	d1e0      	bne.n	800255e <_free_r+0x26>
 800259c:	681c      	ldr	r4, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	6053      	str	r3, [r2, #4]
 80025a2:	440c      	add	r4, r1
 80025a4:	6014      	str	r4, [r2, #0]
 80025a6:	e7da      	b.n	800255e <_free_r+0x26>
 80025a8:	d902      	bls.n	80025b0 <_free_r+0x78>
 80025aa:	230c      	movs	r3, #12
 80025ac:	6003      	str	r3, [r0, #0]
 80025ae:	e7d6      	b.n	800255e <_free_r+0x26>
 80025b0:	6825      	ldr	r5, [r4, #0]
 80025b2:	1961      	adds	r1, r4, r5
 80025b4:	428b      	cmp	r3, r1
 80025b6:	bf04      	itt	eq
 80025b8:	6819      	ldreq	r1, [r3, #0]
 80025ba:	685b      	ldreq	r3, [r3, #4]
 80025bc:	6063      	str	r3, [r4, #4]
 80025be:	bf04      	itt	eq
 80025c0:	1949      	addeq	r1, r1, r5
 80025c2:	6021      	streq	r1, [r4, #0]
 80025c4:	6054      	str	r4, [r2, #4]
 80025c6:	e7ca      	b.n	800255e <_free_r+0x26>
 80025c8:	b003      	add	sp, #12
 80025ca:	bd30      	pop	{r4, r5, pc}
 80025cc:	20000268 	.word	0x20000268

080025d0 <sbrk_aligned>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	4e0e      	ldr	r6, [pc, #56]	; (800260c <sbrk_aligned+0x3c>)
 80025d4:	460c      	mov	r4, r1
 80025d6:	6831      	ldr	r1, [r6, #0]
 80025d8:	4605      	mov	r5, r0
 80025da:	b911      	cbnz	r1, 80025e2 <sbrk_aligned+0x12>
 80025dc:	f000 fcf0 	bl	8002fc0 <_sbrk_r>
 80025e0:	6030      	str	r0, [r6, #0]
 80025e2:	4621      	mov	r1, r4
 80025e4:	4628      	mov	r0, r5
 80025e6:	f000 fceb 	bl	8002fc0 <_sbrk_r>
 80025ea:	1c43      	adds	r3, r0, #1
 80025ec:	d00a      	beq.n	8002604 <sbrk_aligned+0x34>
 80025ee:	1cc4      	adds	r4, r0, #3
 80025f0:	f024 0403 	bic.w	r4, r4, #3
 80025f4:	42a0      	cmp	r0, r4
 80025f6:	d007      	beq.n	8002608 <sbrk_aligned+0x38>
 80025f8:	1a21      	subs	r1, r4, r0
 80025fa:	4628      	mov	r0, r5
 80025fc:	f000 fce0 	bl	8002fc0 <_sbrk_r>
 8002600:	3001      	adds	r0, #1
 8002602:	d101      	bne.n	8002608 <sbrk_aligned+0x38>
 8002604:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002608:	4620      	mov	r0, r4
 800260a:	bd70      	pop	{r4, r5, r6, pc}
 800260c:	2000026c 	.word	0x2000026c

08002610 <_malloc_r>:
 8002610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002614:	1ccd      	adds	r5, r1, #3
 8002616:	f025 0503 	bic.w	r5, r5, #3
 800261a:	3508      	adds	r5, #8
 800261c:	2d0c      	cmp	r5, #12
 800261e:	bf38      	it	cc
 8002620:	250c      	movcc	r5, #12
 8002622:	2d00      	cmp	r5, #0
 8002624:	4607      	mov	r7, r0
 8002626:	db01      	blt.n	800262c <_malloc_r+0x1c>
 8002628:	42a9      	cmp	r1, r5
 800262a:	d905      	bls.n	8002638 <_malloc_r+0x28>
 800262c:	230c      	movs	r3, #12
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	2600      	movs	r6, #0
 8002632:	4630      	mov	r0, r6
 8002634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800270c <_malloc_r+0xfc>
 800263c:	f000 f868 	bl	8002710 <__malloc_lock>
 8002640:	f8d8 3000 	ldr.w	r3, [r8]
 8002644:	461c      	mov	r4, r3
 8002646:	bb5c      	cbnz	r4, 80026a0 <_malloc_r+0x90>
 8002648:	4629      	mov	r1, r5
 800264a:	4638      	mov	r0, r7
 800264c:	f7ff ffc0 	bl	80025d0 <sbrk_aligned>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	4604      	mov	r4, r0
 8002654:	d155      	bne.n	8002702 <_malloc_r+0xf2>
 8002656:	f8d8 4000 	ldr.w	r4, [r8]
 800265a:	4626      	mov	r6, r4
 800265c:	2e00      	cmp	r6, #0
 800265e:	d145      	bne.n	80026ec <_malloc_r+0xdc>
 8002660:	2c00      	cmp	r4, #0
 8002662:	d048      	beq.n	80026f6 <_malloc_r+0xe6>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	4631      	mov	r1, r6
 8002668:	4638      	mov	r0, r7
 800266a:	eb04 0903 	add.w	r9, r4, r3
 800266e:	f000 fca7 	bl	8002fc0 <_sbrk_r>
 8002672:	4581      	cmp	r9, r0
 8002674:	d13f      	bne.n	80026f6 <_malloc_r+0xe6>
 8002676:	6821      	ldr	r1, [r4, #0]
 8002678:	1a6d      	subs	r5, r5, r1
 800267a:	4629      	mov	r1, r5
 800267c:	4638      	mov	r0, r7
 800267e:	f7ff ffa7 	bl	80025d0 <sbrk_aligned>
 8002682:	3001      	adds	r0, #1
 8002684:	d037      	beq.n	80026f6 <_malloc_r+0xe6>
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	442b      	add	r3, r5
 800268a:	6023      	str	r3, [r4, #0]
 800268c:	f8d8 3000 	ldr.w	r3, [r8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d038      	beq.n	8002706 <_malloc_r+0xf6>
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	42a2      	cmp	r2, r4
 8002698:	d12b      	bne.n	80026f2 <_malloc_r+0xe2>
 800269a:	2200      	movs	r2, #0
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	e00f      	b.n	80026c0 <_malloc_r+0xb0>
 80026a0:	6822      	ldr	r2, [r4, #0]
 80026a2:	1b52      	subs	r2, r2, r5
 80026a4:	d41f      	bmi.n	80026e6 <_malloc_r+0xd6>
 80026a6:	2a0b      	cmp	r2, #11
 80026a8:	d917      	bls.n	80026da <_malloc_r+0xca>
 80026aa:	1961      	adds	r1, r4, r5
 80026ac:	42a3      	cmp	r3, r4
 80026ae:	6025      	str	r5, [r4, #0]
 80026b0:	bf18      	it	ne
 80026b2:	6059      	strne	r1, [r3, #4]
 80026b4:	6863      	ldr	r3, [r4, #4]
 80026b6:	bf08      	it	eq
 80026b8:	f8c8 1000 	streq.w	r1, [r8]
 80026bc:	5162      	str	r2, [r4, r5]
 80026be:	604b      	str	r3, [r1, #4]
 80026c0:	4638      	mov	r0, r7
 80026c2:	f104 060b 	add.w	r6, r4, #11
 80026c6:	f000 f829 	bl	800271c <__malloc_unlock>
 80026ca:	f026 0607 	bic.w	r6, r6, #7
 80026ce:	1d23      	adds	r3, r4, #4
 80026d0:	1af2      	subs	r2, r6, r3
 80026d2:	d0ae      	beq.n	8002632 <_malloc_r+0x22>
 80026d4:	1b9b      	subs	r3, r3, r6
 80026d6:	50a3      	str	r3, [r4, r2]
 80026d8:	e7ab      	b.n	8002632 <_malloc_r+0x22>
 80026da:	42a3      	cmp	r3, r4
 80026dc:	6862      	ldr	r2, [r4, #4]
 80026de:	d1dd      	bne.n	800269c <_malloc_r+0x8c>
 80026e0:	f8c8 2000 	str.w	r2, [r8]
 80026e4:	e7ec      	b.n	80026c0 <_malloc_r+0xb0>
 80026e6:	4623      	mov	r3, r4
 80026e8:	6864      	ldr	r4, [r4, #4]
 80026ea:	e7ac      	b.n	8002646 <_malloc_r+0x36>
 80026ec:	4634      	mov	r4, r6
 80026ee:	6876      	ldr	r6, [r6, #4]
 80026f0:	e7b4      	b.n	800265c <_malloc_r+0x4c>
 80026f2:	4613      	mov	r3, r2
 80026f4:	e7cc      	b.n	8002690 <_malloc_r+0x80>
 80026f6:	230c      	movs	r3, #12
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4638      	mov	r0, r7
 80026fc:	f000 f80e 	bl	800271c <__malloc_unlock>
 8002700:	e797      	b.n	8002632 <_malloc_r+0x22>
 8002702:	6025      	str	r5, [r4, #0]
 8002704:	e7dc      	b.n	80026c0 <_malloc_r+0xb0>
 8002706:	605b      	str	r3, [r3, #4]
 8002708:	deff      	udf	#255	; 0xff
 800270a:	bf00      	nop
 800270c:	20000268 	.word	0x20000268

08002710 <__malloc_lock>:
 8002710:	4801      	ldr	r0, [pc, #4]	; (8002718 <__malloc_lock+0x8>)
 8002712:	f7ff bf0f 	b.w	8002534 <__retarget_lock_acquire_recursive>
 8002716:	bf00      	nop
 8002718:	20000264 	.word	0x20000264

0800271c <__malloc_unlock>:
 800271c:	4801      	ldr	r0, [pc, #4]	; (8002724 <__malloc_unlock+0x8>)
 800271e:	f7ff bf0a 	b.w	8002536 <__retarget_lock_release_recursive>
 8002722:	bf00      	nop
 8002724:	20000264 	.word	0x20000264

08002728 <__sfputc_r>:
 8002728:	6893      	ldr	r3, [r2, #8]
 800272a:	3b01      	subs	r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	b410      	push	{r4}
 8002730:	6093      	str	r3, [r2, #8]
 8002732:	da08      	bge.n	8002746 <__sfputc_r+0x1e>
 8002734:	6994      	ldr	r4, [r2, #24]
 8002736:	42a3      	cmp	r3, r4
 8002738:	db01      	blt.n	800273e <__sfputc_r+0x16>
 800273a:	290a      	cmp	r1, #10
 800273c:	d103      	bne.n	8002746 <__sfputc_r+0x1e>
 800273e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002742:	f000 bba7 	b.w	8002e94 <__swbuf_r>
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	1c58      	adds	r0, r3, #1
 800274a:	6010      	str	r0, [r2, #0]
 800274c:	7019      	strb	r1, [r3, #0]
 800274e:	4608      	mov	r0, r1
 8002750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002754:	4770      	bx	lr

08002756 <__sfputs_r>:
 8002756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002758:	4606      	mov	r6, r0
 800275a:	460f      	mov	r7, r1
 800275c:	4614      	mov	r4, r2
 800275e:	18d5      	adds	r5, r2, r3
 8002760:	42ac      	cmp	r4, r5
 8002762:	d101      	bne.n	8002768 <__sfputs_r+0x12>
 8002764:	2000      	movs	r0, #0
 8002766:	e007      	b.n	8002778 <__sfputs_r+0x22>
 8002768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800276c:	463a      	mov	r2, r7
 800276e:	4630      	mov	r0, r6
 8002770:	f7ff ffda 	bl	8002728 <__sfputc_r>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d1f3      	bne.n	8002760 <__sfputs_r+0xa>
 8002778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800277c <_vfiprintf_r>:
 800277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002780:	460d      	mov	r5, r1
 8002782:	b09d      	sub	sp, #116	; 0x74
 8002784:	4614      	mov	r4, r2
 8002786:	4698      	mov	r8, r3
 8002788:	4606      	mov	r6, r0
 800278a:	b118      	cbz	r0, 8002794 <_vfiprintf_r+0x18>
 800278c:	6a03      	ldr	r3, [r0, #32]
 800278e:	b90b      	cbnz	r3, 8002794 <_vfiprintf_r+0x18>
 8002790:	f7ff fdc4 	bl	800231c <__sinit>
 8002794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002796:	07d9      	lsls	r1, r3, #31
 8002798:	d405      	bmi.n	80027a6 <_vfiprintf_r+0x2a>
 800279a:	89ab      	ldrh	r3, [r5, #12]
 800279c:	059a      	lsls	r2, r3, #22
 800279e:	d402      	bmi.n	80027a6 <_vfiprintf_r+0x2a>
 80027a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027a2:	f7ff fec7 	bl	8002534 <__retarget_lock_acquire_recursive>
 80027a6:	89ab      	ldrh	r3, [r5, #12]
 80027a8:	071b      	lsls	r3, r3, #28
 80027aa:	d501      	bpl.n	80027b0 <_vfiprintf_r+0x34>
 80027ac:	692b      	ldr	r3, [r5, #16]
 80027ae:	b99b      	cbnz	r3, 80027d8 <_vfiprintf_r+0x5c>
 80027b0:	4629      	mov	r1, r5
 80027b2:	4630      	mov	r0, r6
 80027b4:	f000 fbac 	bl	8002f10 <__swsetup_r>
 80027b8:	b170      	cbz	r0, 80027d8 <_vfiprintf_r+0x5c>
 80027ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027bc:	07dc      	lsls	r4, r3, #31
 80027be:	d504      	bpl.n	80027ca <_vfiprintf_r+0x4e>
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c4:	b01d      	add	sp, #116	; 0x74
 80027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ca:	89ab      	ldrh	r3, [r5, #12]
 80027cc:	0598      	lsls	r0, r3, #22
 80027ce:	d4f7      	bmi.n	80027c0 <_vfiprintf_r+0x44>
 80027d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027d2:	f7ff feb0 	bl	8002536 <__retarget_lock_release_recursive>
 80027d6:	e7f3      	b.n	80027c0 <_vfiprintf_r+0x44>
 80027d8:	2300      	movs	r3, #0
 80027da:	9309      	str	r3, [sp, #36]	; 0x24
 80027dc:	2320      	movs	r3, #32
 80027de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80027e6:	2330      	movs	r3, #48	; 0x30
 80027e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800299c <_vfiprintf_r+0x220>
 80027ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027f0:	f04f 0901 	mov.w	r9, #1
 80027f4:	4623      	mov	r3, r4
 80027f6:	469a      	mov	sl, r3
 80027f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027fc:	b10a      	cbz	r2, 8002802 <_vfiprintf_r+0x86>
 80027fe:	2a25      	cmp	r2, #37	; 0x25
 8002800:	d1f9      	bne.n	80027f6 <_vfiprintf_r+0x7a>
 8002802:	ebba 0b04 	subs.w	fp, sl, r4
 8002806:	d00b      	beq.n	8002820 <_vfiprintf_r+0xa4>
 8002808:	465b      	mov	r3, fp
 800280a:	4622      	mov	r2, r4
 800280c:	4629      	mov	r1, r5
 800280e:	4630      	mov	r0, r6
 8002810:	f7ff ffa1 	bl	8002756 <__sfputs_r>
 8002814:	3001      	adds	r0, #1
 8002816:	f000 80a9 	beq.w	800296c <_vfiprintf_r+0x1f0>
 800281a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800281c:	445a      	add	r2, fp
 800281e:	9209      	str	r2, [sp, #36]	; 0x24
 8002820:	f89a 3000 	ldrb.w	r3, [sl]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80a1 	beq.w	800296c <_vfiprintf_r+0x1f0>
 800282a:	2300      	movs	r3, #0
 800282c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002834:	f10a 0a01 	add.w	sl, sl, #1
 8002838:	9304      	str	r3, [sp, #16]
 800283a:	9307      	str	r3, [sp, #28]
 800283c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002840:	931a      	str	r3, [sp, #104]	; 0x68
 8002842:	4654      	mov	r4, sl
 8002844:	2205      	movs	r2, #5
 8002846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800284a:	4854      	ldr	r0, [pc, #336]	; (800299c <_vfiprintf_r+0x220>)
 800284c:	f7fd fcc8 	bl	80001e0 <memchr>
 8002850:	9a04      	ldr	r2, [sp, #16]
 8002852:	b9d8      	cbnz	r0, 800288c <_vfiprintf_r+0x110>
 8002854:	06d1      	lsls	r1, r2, #27
 8002856:	bf44      	itt	mi
 8002858:	2320      	movmi	r3, #32
 800285a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800285e:	0713      	lsls	r3, r2, #28
 8002860:	bf44      	itt	mi
 8002862:	232b      	movmi	r3, #43	; 0x2b
 8002864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002868:	f89a 3000 	ldrb.w	r3, [sl]
 800286c:	2b2a      	cmp	r3, #42	; 0x2a
 800286e:	d015      	beq.n	800289c <_vfiprintf_r+0x120>
 8002870:	9a07      	ldr	r2, [sp, #28]
 8002872:	4654      	mov	r4, sl
 8002874:	2000      	movs	r0, #0
 8002876:	f04f 0c0a 	mov.w	ip, #10
 800287a:	4621      	mov	r1, r4
 800287c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002880:	3b30      	subs	r3, #48	; 0x30
 8002882:	2b09      	cmp	r3, #9
 8002884:	d94d      	bls.n	8002922 <_vfiprintf_r+0x1a6>
 8002886:	b1b0      	cbz	r0, 80028b6 <_vfiprintf_r+0x13a>
 8002888:	9207      	str	r2, [sp, #28]
 800288a:	e014      	b.n	80028b6 <_vfiprintf_r+0x13a>
 800288c:	eba0 0308 	sub.w	r3, r0, r8
 8002890:	fa09 f303 	lsl.w	r3, r9, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	9304      	str	r3, [sp, #16]
 8002898:	46a2      	mov	sl, r4
 800289a:	e7d2      	b.n	8002842 <_vfiprintf_r+0xc6>
 800289c:	9b03      	ldr	r3, [sp, #12]
 800289e:	1d19      	adds	r1, r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	9103      	str	r1, [sp, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bfbb      	ittet	lt
 80028a8:	425b      	neglt	r3, r3
 80028aa:	f042 0202 	orrlt.w	r2, r2, #2
 80028ae:	9307      	strge	r3, [sp, #28]
 80028b0:	9307      	strlt	r3, [sp, #28]
 80028b2:	bfb8      	it	lt
 80028b4:	9204      	strlt	r2, [sp, #16]
 80028b6:	7823      	ldrb	r3, [r4, #0]
 80028b8:	2b2e      	cmp	r3, #46	; 0x2e
 80028ba:	d10c      	bne.n	80028d6 <_vfiprintf_r+0x15a>
 80028bc:	7863      	ldrb	r3, [r4, #1]
 80028be:	2b2a      	cmp	r3, #42	; 0x2a
 80028c0:	d134      	bne.n	800292c <_vfiprintf_r+0x1b0>
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	1d1a      	adds	r2, r3, #4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	9203      	str	r2, [sp, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bfb8      	it	lt
 80028ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028d2:	3402      	adds	r4, #2
 80028d4:	9305      	str	r3, [sp, #20]
 80028d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80029ac <_vfiprintf_r+0x230>
 80028da:	7821      	ldrb	r1, [r4, #0]
 80028dc:	2203      	movs	r2, #3
 80028de:	4650      	mov	r0, sl
 80028e0:	f7fd fc7e 	bl	80001e0 <memchr>
 80028e4:	b138      	cbz	r0, 80028f6 <_vfiprintf_r+0x17a>
 80028e6:	9b04      	ldr	r3, [sp, #16]
 80028e8:	eba0 000a 	sub.w	r0, r0, sl
 80028ec:	2240      	movs	r2, #64	; 0x40
 80028ee:	4082      	lsls	r2, r0
 80028f0:	4313      	orrs	r3, r2
 80028f2:	3401      	adds	r4, #1
 80028f4:	9304      	str	r3, [sp, #16]
 80028f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028fa:	4829      	ldr	r0, [pc, #164]	; (80029a0 <_vfiprintf_r+0x224>)
 80028fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002900:	2206      	movs	r2, #6
 8002902:	f7fd fc6d 	bl	80001e0 <memchr>
 8002906:	2800      	cmp	r0, #0
 8002908:	d03f      	beq.n	800298a <_vfiprintf_r+0x20e>
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <_vfiprintf_r+0x228>)
 800290c:	bb1b      	cbnz	r3, 8002956 <_vfiprintf_r+0x1da>
 800290e:	9b03      	ldr	r3, [sp, #12]
 8002910:	3307      	adds	r3, #7
 8002912:	f023 0307 	bic.w	r3, r3, #7
 8002916:	3308      	adds	r3, #8
 8002918:	9303      	str	r3, [sp, #12]
 800291a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800291c:	443b      	add	r3, r7
 800291e:	9309      	str	r3, [sp, #36]	; 0x24
 8002920:	e768      	b.n	80027f4 <_vfiprintf_r+0x78>
 8002922:	fb0c 3202 	mla	r2, ip, r2, r3
 8002926:	460c      	mov	r4, r1
 8002928:	2001      	movs	r0, #1
 800292a:	e7a6      	b.n	800287a <_vfiprintf_r+0xfe>
 800292c:	2300      	movs	r3, #0
 800292e:	3401      	adds	r4, #1
 8002930:	9305      	str	r3, [sp, #20]
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 0c0a 	mov.w	ip, #10
 8002938:	4620      	mov	r0, r4
 800293a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800293e:	3a30      	subs	r2, #48	; 0x30
 8002940:	2a09      	cmp	r2, #9
 8002942:	d903      	bls.n	800294c <_vfiprintf_r+0x1d0>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0c6      	beq.n	80028d6 <_vfiprintf_r+0x15a>
 8002948:	9105      	str	r1, [sp, #20]
 800294a:	e7c4      	b.n	80028d6 <_vfiprintf_r+0x15a>
 800294c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002950:	4604      	mov	r4, r0
 8002952:	2301      	movs	r3, #1
 8002954:	e7f0      	b.n	8002938 <_vfiprintf_r+0x1bc>
 8002956:	ab03      	add	r3, sp, #12
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	462a      	mov	r2, r5
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <_vfiprintf_r+0x22c>)
 800295e:	a904      	add	r1, sp, #16
 8002960:	4630      	mov	r0, r6
 8002962:	f3af 8000 	nop.w
 8002966:	4607      	mov	r7, r0
 8002968:	1c78      	adds	r0, r7, #1
 800296a:	d1d6      	bne.n	800291a <_vfiprintf_r+0x19e>
 800296c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800296e:	07d9      	lsls	r1, r3, #31
 8002970:	d405      	bmi.n	800297e <_vfiprintf_r+0x202>
 8002972:	89ab      	ldrh	r3, [r5, #12]
 8002974:	059a      	lsls	r2, r3, #22
 8002976:	d402      	bmi.n	800297e <_vfiprintf_r+0x202>
 8002978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800297a:	f7ff fddc 	bl	8002536 <__retarget_lock_release_recursive>
 800297e:	89ab      	ldrh	r3, [r5, #12]
 8002980:	065b      	lsls	r3, r3, #25
 8002982:	f53f af1d 	bmi.w	80027c0 <_vfiprintf_r+0x44>
 8002986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002988:	e71c      	b.n	80027c4 <_vfiprintf_r+0x48>
 800298a:	ab03      	add	r3, sp, #12
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	462a      	mov	r2, r5
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <_vfiprintf_r+0x22c>)
 8002992:	a904      	add	r1, sp, #16
 8002994:	4630      	mov	r0, r6
 8002996:	f000 f879 	bl	8002a8c <_printf_i>
 800299a:	e7e4      	b.n	8002966 <_vfiprintf_r+0x1ea>
 800299c:	080031ec 	.word	0x080031ec
 80029a0:	080031f6 	.word	0x080031f6
 80029a4:	00000000 	.word	0x00000000
 80029a8:	08002757 	.word	0x08002757
 80029ac:	080031f2 	.word	0x080031f2

080029b0 <_printf_common>:
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	4616      	mov	r6, r2
 80029b6:	4699      	mov	r9, r3
 80029b8:	688a      	ldr	r2, [r1, #8]
 80029ba:	690b      	ldr	r3, [r1, #16]
 80029bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029c0:	4293      	cmp	r3, r2
 80029c2:	bfb8      	it	lt
 80029c4:	4613      	movlt	r3, r2
 80029c6:	6033      	str	r3, [r6, #0]
 80029c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029cc:	4607      	mov	r7, r0
 80029ce:	460c      	mov	r4, r1
 80029d0:	b10a      	cbz	r2, 80029d6 <_printf_common+0x26>
 80029d2:	3301      	adds	r3, #1
 80029d4:	6033      	str	r3, [r6, #0]
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	0699      	lsls	r1, r3, #26
 80029da:	bf42      	ittt	mi
 80029dc:	6833      	ldrmi	r3, [r6, #0]
 80029de:	3302      	addmi	r3, #2
 80029e0:	6033      	strmi	r3, [r6, #0]
 80029e2:	6825      	ldr	r5, [r4, #0]
 80029e4:	f015 0506 	ands.w	r5, r5, #6
 80029e8:	d106      	bne.n	80029f8 <_printf_common+0x48>
 80029ea:	f104 0a19 	add.w	sl, r4, #25
 80029ee:	68e3      	ldr	r3, [r4, #12]
 80029f0:	6832      	ldr	r2, [r6, #0]
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	42ab      	cmp	r3, r5
 80029f6:	dc26      	bgt.n	8002a46 <_printf_common+0x96>
 80029f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029fc:	1e13      	subs	r3, r2, #0
 80029fe:	6822      	ldr	r2, [r4, #0]
 8002a00:	bf18      	it	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	0692      	lsls	r2, r2, #26
 8002a06:	d42b      	bmi.n	8002a60 <_printf_common+0xb0>
 8002a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	4638      	mov	r0, r7
 8002a10:	47c0      	blx	r8
 8002a12:	3001      	adds	r0, #1
 8002a14:	d01e      	beq.n	8002a54 <_printf_common+0xa4>
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	6922      	ldr	r2, [r4, #16]
 8002a1a:	f003 0306 	and.w	r3, r3, #6
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	bf02      	ittt	eq
 8002a22:	68e5      	ldreq	r5, [r4, #12]
 8002a24:	6833      	ldreq	r3, [r6, #0]
 8002a26:	1aed      	subeq	r5, r5, r3
 8002a28:	68a3      	ldr	r3, [r4, #8]
 8002a2a:	bf0c      	ite	eq
 8002a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a30:	2500      	movne	r5, #0
 8002a32:	4293      	cmp	r3, r2
 8002a34:	bfc4      	itt	gt
 8002a36:	1a9b      	subgt	r3, r3, r2
 8002a38:	18ed      	addgt	r5, r5, r3
 8002a3a:	2600      	movs	r6, #0
 8002a3c:	341a      	adds	r4, #26
 8002a3e:	42b5      	cmp	r5, r6
 8002a40:	d11a      	bne.n	8002a78 <_printf_common+0xc8>
 8002a42:	2000      	movs	r0, #0
 8002a44:	e008      	b.n	8002a58 <_printf_common+0xa8>
 8002a46:	2301      	movs	r3, #1
 8002a48:	4652      	mov	r2, sl
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	4638      	mov	r0, r7
 8002a4e:	47c0      	blx	r8
 8002a50:	3001      	adds	r0, #1
 8002a52:	d103      	bne.n	8002a5c <_printf_common+0xac>
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a5c:	3501      	adds	r5, #1
 8002a5e:	e7c6      	b.n	80029ee <_printf_common+0x3e>
 8002a60:	18e1      	adds	r1, r4, r3
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	2030      	movs	r0, #48	; 0x30
 8002a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a6a:	4422      	add	r2, r4
 8002a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a74:	3302      	adds	r3, #2
 8002a76:	e7c7      	b.n	8002a08 <_printf_common+0x58>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	4638      	mov	r0, r7
 8002a80:	47c0      	blx	r8
 8002a82:	3001      	adds	r0, #1
 8002a84:	d0e6      	beq.n	8002a54 <_printf_common+0xa4>
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7d9      	b.n	8002a3e <_printf_common+0x8e>
	...

08002a8c <_printf_i>:
 8002a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a90:	7e0f      	ldrb	r7, [r1, #24]
 8002a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a94:	2f78      	cmp	r7, #120	; 0x78
 8002a96:	4691      	mov	r9, r2
 8002a98:	4680      	mov	r8, r0
 8002a9a:	460c      	mov	r4, r1
 8002a9c:	469a      	mov	sl, r3
 8002a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002aa2:	d807      	bhi.n	8002ab4 <_printf_i+0x28>
 8002aa4:	2f62      	cmp	r7, #98	; 0x62
 8002aa6:	d80a      	bhi.n	8002abe <_printf_i+0x32>
 8002aa8:	2f00      	cmp	r7, #0
 8002aaa:	f000 80d4 	beq.w	8002c56 <_printf_i+0x1ca>
 8002aae:	2f58      	cmp	r7, #88	; 0x58
 8002ab0:	f000 80c0 	beq.w	8002c34 <_printf_i+0x1a8>
 8002ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002abc:	e03a      	b.n	8002b34 <_printf_i+0xa8>
 8002abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ac2:	2b15      	cmp	r3, #21
 8002ac4:	d8f6      	bhi.n	8002ab4 <_printf_i+0x28>
 8002ac6:	a101      	add	r1, pc, #4	; (adr r1, 8002acc <_printf_i+0x40>)
 8002ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002acc:	08002b25 	.word	0x08002b25
 8002ad0:	08002b39 	.word	0x08002b39
 8002ad4:	08002ab5 	.word	0x08002ab5
 8002ad8:	08002ab5 	.word	0x08002ab5
 8002adc:	08002ab5 	.word	0x08002ab5
 8002ae0:	08002ab5 	.word	0x08002ab5
 8002ae4:	08002b39 	.word	0x08002b39
 8002ae8:	08002ab5 	.word	0x08002ab5
 8002aec:	08002ab5 	.word	0x08002ab5
 8002af0:	08002ab5 	.word	0x08002ab5
 8002af4:	08002ab5 	.word	0x08002ab5
 8002af8:	08002c3d 	.word	0x08002c3d
 8002afc:	08002b65 	.word	0x08002b65
 8002b00:	08002bf7 	.word	0x08002bf7
 8002b04:	08002ab5 	.word	0x08002ab5
 8002b08:	08002ab5 	.word	0x08002ab5
 8002b0c:	08002c5f 	.word	0x08002c5f
 8002b10:	08002ab5 	.word	0x08002ab5
 8002b14:	08002b65 	.word	0x08002b65
 8002b18:	08002ab5 	.word	0x08002ab5
 8002b1c:	08002ab5 	.word	0x08002ab5
 8002b20:	08002bff 	.word	0x08002bff
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	602a      	str	r2, [r5, #0]
 8002b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b34:	2301      	movs	r3, #1
 8002b36:	e09f      	b.n	8002c78 <_printf_i+0x1ec>
 8002b38:	6820      	ldr	r0, [r4, #0]
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	0607      	lsls	r7, r0, #24
 8002b3e:	f103 0104 	add.w	r1, r3, #4
 8002b42:	6029      	str	r1, [r5, #0]
 8002b44:	d501      	bpl.n	8002b4a <_printf_i+0xbe>
 8002b46:	681e      	ldr	r6, [r3, #0]
 8002b48:	e003      	b.n	8002b52 <_printf_i+0xc6>
 8002b4a:	0646      	lsls	r6, r0, #25
 8002b4c:	d5fb      	bpl.n	8002b46 <_printf_i+0xba>
 8002b4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002b52:	2e00      	cmp	r6, #0
 8002b54:	da03      	bge.n	8002b5e <_printf_i+0xd2>
 8002b56:	232d      	movs	r3, #45	; 0x2d
 8002b58:	4276      	negs	r6, r6
 8002b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b5e:	485a      	ldr	r0, [pc, #360]	; (8002cc8 <_printf_i+0x23c>)
 8002b60:	230a      	movs	r3, #10
 8002b62:	e012      	b.n	8002b8a <_printf_i+0xfe>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	1d19      	adds	r1, r3, #4
 8002b6a:	6029      	str	r1, [r5, #0]
 8002b6c:	0605      	lsls	r5, r0, #24
 8002b6e:	d501      	bpl.n	8002b74 <_printf_i+0xe8>
 8002b70:	681e      	ldr	r6, [r3, #0]
 8002b72:	e002      	b.n	8002b7a <_printf_i+0xee>
 8002b74:	0641      	lsls	r1, r0, #25
 8002b76:	d5fb      	bpl.n	8002b70 <_printf_i+0xe4>
 8002b78:	881e      	ldrh	r6, [r3, #0]
 8002b7a:	4853      	ldr	r0, [pc, #332]	; (8002cc8 <_printf_i+0x23c>)
 8002b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8002b7e:	bf0c      	ite	eq
 8002b80:	2308      	moveq	r3, #8
 8002b82:	230a      	movne	r3, #10
 8002b84:	2100      	movs	r1, #0
 8002b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b8a:	6865      	ldr	r5, [r4, #4]
 8002b8c:	60a5      	str	r5, [r4, #8]
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	bfa2      	ittt	ge
 8002b92:	6821      	ldrge	r1, [r4, #0]
 8002b94:	f021 0104 	bicge.w	r1, r1, #4
 8002b98:	6021      	strge	r1, [r4, #0]
 8002b9a:	b90e      	cbnz	r6, 8002ba0 <_printf_i+0x114>
 8002b9c:	2d00      	cmp	r5, #0
 8002b9e:	d04b      	beq.n	8002c38 <_printf_i+0x1ac>
 8002ba0:	4615      	mov	r5, r2
 8002ba2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ba6:	fb03 6711 	mls	r7, r3, r1, r6
 8002baa:	5dc7      	ldrb	r7, [r0, r7]
 8002bac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bb0:	4637      	mov	r7, r6
 8002bb2:	42bb      	cmp	r3, r7
 8002bb4:	460e      	mov	r6, r1
 8002bb6:	d9f4      	bls.n	8002ba2 <_printf_i+0x116>
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d10b      	bne.n	8002bd4 <_printf_i+0x148>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	07de      	lsls	r6, r3, #31
 8002bc0:	d508      	bpl.n	8002bd4 <_printf_i+0x148>
 8002bc2:	6923      	ldr	r3, [r4, #16]
 8002bc4:	6861      	ldr	r1, [r4, #4]
 8002bc6:	4299      	cmp	r1, r3
 8002bc8:	bfde      	ittt	le
 8002bca:	2330      	movle	r3, #48	; 0x30
 8002bcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002bd4:	1b52      	subs	r2, r2, r5
 8002bd6:	6122      	str	r2, [r4, #16]
 8002bd8:	f8cd a000 	str.w	sl, [sp]
 8002bdc:	464b      	mov	r3, r9
 8002bde:	aa03      	add	r2, sp, #12
 8002be0:	4621      	mov	r1, r4
 8002be2:	4640      	mov	r0, r8
 8002be4:	f7ff fee4 	bl	80029b0 <_printf_common>
 8002be8:	3001      	adds	r0, #1
 8002bea:	d14a      	bne.n	8002c82 <_printf_i+0x1f6>
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf0:	b004      	add	sp, #16
 8002bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	f043 0320 	orr.w	r3, r3, #32
 8002bfc:	6023      	str	r3, [r4, #0]
 8002bfe:	4833      	ldr	r0, [pc, #204]	; (8002ccc <_printf_i+0x240>)
 8002c00:	2778      	movs	r7, #120	; 0x78
 8002c02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	6829      	ldr	r1, [r5, #0]
 8002c0a:	061f      	lsls	r7, r3, #24
 8002c0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c10:	d402      	bmi.n	8002c18 <_printf_i+0x18c>
 8002c12:	065f      	lsls	r7, r3, #25
 8002c14:	bf48      	it	mi
 8002c16:	b2b6      	uxthmi	r6, r6
 8002c18:	07df      	lsls	r7, r3, #31
 8002c1a:	bf48      	it	mi
 8002c1c:	f043 0320 	orrmi.w	r3, r3, #32
 8002c20:	6029      	str	r1, [r5, #0]
 8002c22:	bf48      	it	mi
 8002c24:	6023      	strmi	r3, [r4, #0]
 8002c26:	b91e      	cbnz	r6, 8002c30 <_printf_i+0x1a4>
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	f023 0320 	bic.w	r3, r3, #32
 8002c2e:	6023      	str	r3, [r4, #0]
 8002c30:	2310      	movs	r3, #16
 8002c32:	e7a7      	b.n	8002b84 <_printf_i+0xf8>
 8002c34:	4824      	ldr	r0, [pc, #144]	; (8002cc8 <_printf_i+0x23c>)
 8002c36:	e7e4      	b.n	8002c02 <_printf_i+0x176>
 8002c38:	4615      	mov	r5, r2
 8002c3a:	e7bd      	b.n	8002bb8 <_printf_i+0x12c>
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	6826      	ldr	r6, [r4, #0]
 8002c40:	6961      	ldr	r1, [r4, #20]
 8002c42:	1d18      	adds	r0, r3, #4
 8002c44:	6028      	str	r0, [r5, #0]
 8002c46:	0635      	lsls	r5, r6, #24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	d501      	bpl.n	8002c50 <_printf_i+0x1c4>
 8002c4c:	6019      	str	r1, [r3, #0]
 8002c4e:	e002      	b.n	8002c56 <_printf_i+0x1ca>
 8002c50:	0670      	lsls	r0, r6, #25
 8002c52:	d5fb      	bpl.n	8002c4c <_printf_i+0x1c0>
 8002c54:	8019      	strh	r1, [r3, #0]
 8002c56:	2300      	movs	r3, #0
 8002c58:	6123      	str	r3, [r4, #16]
 8002c5a:	4615      	mov	r5, r2
 8002c5c:	e7bc      	b.n	8002bd8 <_printf_i+0x14c>
 8002c5e:	682b      	ldr	r3, [r5, #0]
 8002c60:	1d1a      	adds	r2, r3, #4
 8002c62:	602a      	str	r2, [r5, #0]
 8002c64:	681d      	ldr	r5, [r3, #0]
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f7fd fab8 	bl	80001e0 <memchr>
 8002c70:	b108      	cbz	r0, 8002c76 <_printf_i+0x1ea>
 8002c72:	1b40      	subs	r0, r0, r5
 8002c74:	6060      	str	r0, [r4, #4]
 8002c76:	6863      	ldr	r3, [r4, #4]
 8002c78:	6123      	str	r3, [r4, #16]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c80:	e7aa      	b.n	8002bd8 <_printf_i+0x14c>
 8002c82:	6923      	ldr	r3, [r4, #16]
 8002c84:	462a      	mov	r2, r5
 8002c86:	4649      	mov	r1, r9
 8002c88:	4640      	mov	r0, r8
 8002c8a:	47d0      	blx	sl
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	d0ad      	beq.n	8002bec <_printf_i+0x160>
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	079b      	lsls	r3, r3, #30
 8002c94:	d413      	bmi.n	8002cbe <_printf_i+0x232>
 8002c96:	68e0      	ldr	r0, [r4, #12]
 8002c98:	9b03      	ldr	r3, [sp, #12]
 8002c9a:	4298      	cmp	r0, r3
 8002c9c:	bfb8      	it	lt
 8002c9e:	4618      	movlt	r0, r3
 8002ca0:	e7a6      	b.n	8002bf0 <_printf_i+0x164>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	4632      	mov	r2, r6
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	4640      	mov	r0, r8
 8002caa:	47d0      	blx	sl
 8002cac:	3001      	adds	r0, #1
 8002cae:	d09d      	beq.n	8002bec <_printf_i+0x160>
 8002cb0:	3501      	adds	r5, #1
 8002cb2:	68e3      	ldr	r3, [r4, #12]
 8002cb4:	9903      	ldr	r1, [sp, #12]
 8002cb6:	1a5b      	subs	r3, r3, r1
 8002cb8:	42ab      	cmp	r3, r5
 8002cba:	dcf2      	bgt.n	8002ca2 <_printf_i+0x216>
 8002cbc:	e7eb      	b.n	8002c96 <_printf_i+0x20a>
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	f104 0619 	add.w	r6, r4, #25
 8002cc4:	e7f5      	b.n	8002cb2 <_printf_i+0x226>
 8002cc6:	bf00      	nop
 8002cc8:	080031fd 	.word	0x080031fd
 8002ccc:	0800320e 	.word	0x0800320e

08002cd0 <__sflush_r>:
 8002cd0:	898a      	ldrh	r2, [r1, #12]
 8002cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	0710      	lsls	r0, r2, #28
 8002cda:	460c      	mov	r4, r1
 8002cdc:	d458      	bmi.n	8002d90 <__sflush_r+0xc0>
 8002cde:	684b      	ldr	r3, [r1, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dc05      	bgt.n	8002cf0 <__sflush_r+0x20>
 8002ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	dc02      	bgt.n	8002cf0 <__sflush_r+0x20>
 8002cea:	2000      	movs	r0, #0
 8002cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cf2:	2e00      	cmp	r6, #0
 8002cf4:	d0f9      	beq.n	8002cea <__sflush_r+0x1a>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cfc:	682f      	ldr	r7, [r5, #0]
 8002cfe:	6a21      	ldr	r1, [r4, #32]
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	d032      	beq.n	8002d6a <__sflush_r+0x9a>
 8002d04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d06:	89a3      	ldrh	r3, [r4, #12]
 8002d08:	075a      	lsls	r2, r3, #29
 8002d0a:	d505      	bpl.n	8002d18 <__sflush_r+0x48>
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	1ac0      	subs	r0, r0, r3
 8002d10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d12:	b10b      	cbz	r3, 8002d18 <__sflush_r+0x48>
 8002d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d16:	1ac0      	subs	r0, r0, r3
 8002d18:	2300      	movs	r3, #0
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d1e:	6a21      	ldr	r1, [r4, #32]
 8002d20:	4628      	mov	r0, r5
 8002d22:	47b0      	blx	r6
 8002d24:	1c43      	adds	r3, r0, #1
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	d106      	bne.n	8002d38 <__sflush_r+0x68>
 8002d2a:	6829      	ldr	r1, [r5, #0]
 8002d2c:	291d      	cmp	r1, #29
 8002d2e:	d82b      	bhi.n	8002d88 <__sflush_r+0xb8>
 8002d30:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <__sflush_r+0x108>)
 8002d32:	410a      	asrs	r2, r1
 8002d34:	07d6      	lsls	r6, r2, #31
 8002d36:	d427      	bmi.n	8002d88 <__sflush_r+0xb8>
 8002d38:	2200      	movs	r2, #0
 8002d3a:	6062      	str	r2, [r4, #4]
 8002d3c:	04d9      	lsls	r1, r3, #19
 8002d3e:	6922      	ldr	r2, [r4, #16]
 8002d40:	6022      	str	r2, [r4, #0]
 8002d42:	d504      	bpl.n	8002d4e <__sflush_r+0x7e>
 8002d44:	1c42      	adds	r2, r0, #1
 8002d46:	d101      	bne.n	8002d4c <__sflush_r+0x7c>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	b903      	cbnz	r3, 8002d4e <__sflush_r+0x7e>
 8002d4c:	6560      	str	r0, [r4, #84]	; 0x54
 8002d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d50:	602f      	str	r7, [r5, #0]
 8002d52:	2900      	cmp	r1, #0
 8002d54:	d0c9      	beq.n	8002cea <__sflush_r+0x1a>
 8002d56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d5a:	4299      	cmp	r1, r3
 8002d5c:	d002      	beq.n	8002d64 <__sflush_r+0x94>
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f7ff fbea 	bl	8002538 <_free_r>
 8002d64:	2000      	movs	r0, #0
 8002d66:	6360      	str	r0, [r4, #52]	; 0x34
 8002d68:	e7c0      	b.n	8002cec <__sflush_r+0x1c>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	47b0      	blx	r6
 8002d70:	1c41      	adds	r1, r0, #1
 8002d72:	d1c8      	bne.n	8002d06 <__sflush_r+0x36>
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0c5      	beq.n	8002d06 <__sflush_r+0x36>
 8002d7a:	2b1d      	cmp	r3, #29
 8002d7c:	d001      	beq.n	8002d82 <__sflush_r+0xb2>
 8002d7e:	2b16      	cmp	r3, #22
 8002d80:	d101      	bne.n	8002d86 <__sflush_r+0xb6>
 8002d82:	602f      	str	r7, [r5, #0]
 8002d84:	e7b1      	b.n	8002cea <__sflush_r+0x1a>
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d8c:	81a3      	strh	r3, [r4, #12]
 8002d8e:	e7ad      	b.n	8002cec <__sflush_r+0x1c>
 8002d90:	690f      	ldr	r7, [r1, #16]
 8002d92:	2f00      	cmp	r7, #0
 8002d94:	d0a9      	beq.n	8002cea <__sflush_r+0x1a>
 8002d96:	0793      	lsls	r3, r2, #30
 8002d98:	680e      	ldr	r6, [r1, #0]
 8002d9a:	bf08      	it	eq
 8002d9c:	694b      	ldreq	r3, [r1, #20]
 8002d9e:	600f      	str	r7, [r1, #0]
 8002da0:	bf18      	it	ne
 8002da2:	2300      	movne	r3, #0
 8002da4:	eba6 0807 	sub.w	r8, r6, r7
 8002da8:	608b      	str	r3, [r1, #8]
 8002daa:	f1b8 0f00 	cmp.w	r8, #0
 8002dae:	dd9c      	ble.n	8002cea <__sflush_r+0x1a>
 8002db0:	6a21      	ldr	r1, [r4, #32]
 8002db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002db4:	4643      	mov	r3, r8
 8002db6:	463a      	mov	r2, r7
 8002db8:	4628      	mov	r0, r5
 8002dba:	47b0      	blx	r6
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	dc06      	bgt.n	8002dce <__sflush_r+0xfe>
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc6:	81a3      	strh	r3, [r4, #12]
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dcc:	e78e      	b.n	8002cec <__sflush_r+0x1c>
 8002dce:	4407      	add	r7, r0
 8002dd0:	eba8 0800 	sub.w	r8, r8, r0
 8002dd4:	e7e9      	b.n	8002daa <__sflush_r+0xda>
 8002dd6:	bf00      	nop
 8002dd8:	dfbffffe 	.word	0xdfbffffe

08002ddc <_fflush_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	690b      	ldr	r3, [r1, #16]
 8002de0:	4605      	mov	r5, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	b913      	cbnz	r3, 8002dec <_fflush_r+0x10>
 8002de6:	2500      	movs	r5, #0
 8002de8:	4628      	mov	r0, r5
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	b118      	cbz	r0, 8002df6 <_fflush_r+0x1a>
 8002dee:	6a03      	ldr	r3, [r0, #32]
 8002df0:	b90b      	cbnz	r3, 8002df6 <_fflush_r+0x1a>
 8002df2:	f7ff fa93 	bl	800231c <__sinit>
 8002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f3      	beq.n	8002de6 <_fflush_r+0xa>
 8002dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e00:	07d0      	lsls	r0, r2, #31
 8002e02:	d404      	bmi.n	8002e0e <_fflush_r+0x32>
 8002e04:	0599      	lsls	r1, r3, #22
 8002e06:	d402      	bmi.n	8002e0e <_fflush_r+0x32>
 8002e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e0a:	f7ff fb93 	bl	8002534 <__retarget_lock_acquire_recursive>
 8002e0e:	4628      	mov	r0, r5
 8002e10:	4621      	mov	r1, r4
 8002e12:	f7ff ff5d 	bl	8002cd0 <__sflush_r>
 8002e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e18:	07da      	lsls	r2, r3, #31
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	d4e4      	bmi.n	8002de8 <_fflush_r+0xc>
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	059b      	lsls	r3, r3, #22
 8002e22:	d4e1      	bmi.n	8002de8 <_fflush_r+0xc>
 8002e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e26:	f7ff fb86 	bl	8002536 <__retarget_lock_release_recursive>
 8002e2a:	e7dd      	b.n	8002de8 <_fflush_r+0xc>

08002e2c <_putc_r>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	460d      	mov	r5, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	4606      	mov	r6, r0
 8002e34:	b118      	cbz	r0, 8002e3e <_putc_r+0x12>
 8002e36:	6a03      	ldr	r3, [r0, #32]
 8002e38:	b90b      	cbnz	r3, 8002e3e <_putc_r+0x12>
 8002e3a:	f7ff fa6f 	bl	800231c <__sinit>
 8002e3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e40:	07d8      	lsls	r0, r3, #31
 8002e42:	d405      	bmi.n	8002e50 <_putc_r+0x24>
 8002e44:	89a3      	ldrh	r3, [r4, #12]
 8002e46:	0599      	lsls	r1, r3, #22
 8002e48:	d402      	bmi.n	8002e50 <_putc_r+0x24>
 8002e4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e4c:	f7ff fb72 	bl	8002534 <__retarget_lock_acquire_recursive>
 8002e50:	68a3      	ldr	r3, [r4, #8]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	60a3      	str	r3, [r4, #8]
 8002e58:	da05      	bge.n	8002e66 <_putc_r+0x3a>
 8002e5a:	69a2      	ldr	r2, [r4, #24]
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	db12      	blt.n	8002e86 <_putc_r+0x5a>
 8002e60:	b2eb      	uxtb	r3, r5
 8002e62:	2b0a      	cmp	r3, #10
 8002e64:	d00f      	beq.n	8002e86 <_putc_r+0x5a>
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	6022      	str	r2, [r4, #0]
 8002e6c:	701d      	strb	r5, [r3, #0]
 8002e6e:	b2ed      	uxtb	r5, r5
 8002e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e72:	07da      	lsls	r2, r3, #31
 8002e74:	d405      	bmi.n	8002e82 <_putc_r+0x56>
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	059b      	lsls	r3, r3, #22
 8002e7a:	d402      	bmi.n	8002e82 <_putc_r+0x56>
 8002e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e7e:	f7ff fb5a 	bl	8002536 <__retarget_lock_release_recursive>
 8002e82:	4628      	mov	r0, r5
 8002e84:	bd70      	pop	{r4, r5, r6, pc}
 8002e86:	4629      	mov	r1, r5
 8002e88:	4622      	mov	r2, r4
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f000 f802 	bl	8002e94 <__swbuf_r>
 8002e90:	4605      	mov	r5, r0
 8002e92:	e7ed      	b.n	8002e70 <_putc_r+0x44>

08002e94 <__swbuf_r>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	460e      	mov	r6, r1
 8002e98:	4614      	mov	r4, r2
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	b118      	cbz	r0, 8002ea6 <__swbuf_r+0x12>
 8002e9e:	6a03      	ldr	r3, [r0, #32]
 8002ea0:	b90b      	cbnz	r3, 8002ea6 <__swbuf_r+0x12>
 8002ea2:	f7ff fa3b 	bl	800231c <__sinit>
 8002ea6:	69a3      	ldr	r3, [r4, #24]
 8002ea8:	60a3      	str	r3, [r4, #8]
 8002eaa:	89a3      	ldrh	r3, [r4, #12]
 8002eac:	071a      	lsls	r2, r3, #28
 8002eae:	d525      	bpl.n	8002efc <__swbuf_r+0x68>
 8002eb0:	6923      	ldr	r3, [r4, #16]
 8002eb2:	b31b      	cbz	r3, 8002efc <__swbuf_r+0x68>
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	6922      	ldr	r2, [r4, #16]
 8002eb8:	1a98      	subs	r0, r3, r2
 8002eba:	6963      	ldr	r3, [r4, #20]
 8002ebc:	b2f6      	uxtb	r6, r6
 8002ebe:	4283      	cmp	r3, r0
 8002ec0:	4637      	mov	r7, r6
 8002ec2:	dc04      	bgt.n	8002ece <__swbuf_r+0x3a>
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	f7ff ff88 	bl	8002ddc <_fflush_r>
 8002ecc:	b9e0      	cbnz	r0, 8002f08 <__swbuf_r+0x74>
 8002ece:	68a3      	ldr	r3, [r4, #8]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60a3      	str	r3, [r4, #8]
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	6022      	str	r2, [r4, #0]
 8002eda:	701e      	strb	r6, [r3, #0]
 8002edc:	6962      	ldr	r2, [r4, #20]
 8002ede:	1c43      	adds	r3, r0, #1
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d004      	beq.n	8002eee <__swbuf_r+0x5a>
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	07db      	lsls	r3, r3, #31
 8002ee8:	d506      	bpl.n	8002ef8 <__swbuf_r+0x64>
 8002eea:	2e0a      	cmp	r6, #10
 8002eec:	d104      	bne.n	8002ef8 <__swbuf_r+0x64>
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f7ff ff73 	bl	8002ddc <_fflush_r>
 8002ef6:	b938      	cbnz	r0, 8002f08 <__swbuf_r+0x74>
 8002ef8:	4638      	mov	r0, r7
 8002efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002efc:	4621      	mov	r1, r4
 8002efe:	4628      	mov	r0, r5
 8002f00:	f000 f806 	bl	8002f10 <__swsetup_r>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d0d5      	beq.n	8002eb4 <__swbuf_r+0x20>
 8002f08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f0c:	e7f4      	b.n	8002ef8 <__swbuf_r+0x64>
	...

08002f10 <__swsetup_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <__swsetup_r+0xac>)
 8002f14:	4605      	mov	r5, r0
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	460c      	mov	r4, r1
 8002f1a:	b118      	cbz	r0, 8002f24 <__swsetup_r+0x14>
 8002f1c:	6a03      	ldr	r3, [r0, #32]
 8002f1e:	b90b      	cbnz	r3, 8002f24 <__swsetup_r+0x14>
 8002f20:	f7ff f9fc 	bl	800231c <__sinit>
 8002f24:	89a3      	ldrh	r3, [r4, #12]
 8002f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f2a:	0718      	lsls	r0, r3, #28
 8002f2c:	d422      	bmi.n	8002f74 <__swsetup_r+0x64>
 8002f2e:	06d9      	lsls	r1, r3, #27
 8002f30:	d407      	bmi.n	8002f42 <__swsetup_r+0x32>
 8002f32:	2309      	movs	r3, #9
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f3a:	81a3      	strh	r3, [r4, #12]
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f40:	e034      	b.n	8002fac <__swsetup_r+0x9c>
 8002f42:	0758      	lsls	r0, r3, #29
 8002f44:	d512      	bpl.n	8002f6c <__swsetup_r+0x5c>
 8002f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f48:	b141      	cbz	r1, 8002f5c <__swsetup_r+0x4c>
 8002f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f4e:	4299      	cmp	r1, r3
 8002f50:	d002      	beq.n	8002f58 <__swsetup_r+0x48>
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7ff faf0 	bl	8002538 <_free_r>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6363      	str	r3, [r4, #52]	; 0x34
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	2300      	movs	r3, #0
 8002f66:	6063      	str	r3, [r4, #4]
 8002f68:	6923      	ldr	r3, [r4, #16]
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	f043 0308 	orr.w	r3, r3, #8
 8002f72:	81a3      	strh	r3, [r4, #12]
 8002f74:	6923      	ldr	r3, [r4, #16]
 8002f76:	b94b      	cbnz	r3, 8002f8c <__swsetup_r+0x7c>
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f82:	d003      	beq.n	8002f8c <__swsetup_r+0x7c>
 8002f84:	4621      	mov	r1, r4
 8002f86:	4628      	mov	r0, r5
 8002f88:	f000 f850 	bl	800302c <__smakebuf_r>
 8002f8c:	89a0      	ldrh	r0, [r4, #12]
 8002f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f92:	f010 0301 	ands.w	r3, r0, #1
 8002f96:	d00a      	beq.n	8002fae <__swsetup_r+0x9e>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60a3      	str	r3, [r4, #8]
 8002f9c:	6963      	ldr	r3, [r4, #20]
 8002f9e:	425b      	negs	r3, r3
 8002fa0:	61a3      	str	r3, [r4, #24]
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	b943      	cbnz	r3, 8002fb8 <__swsetup_r+0xa8>
 8002fa6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002faa:	d1c4      	bne.n	8002f36 <__swsetup_r+0x26>
 8002fac:	bd38      	pop	{r3, r4, r5, pc}
 8002fae:	0781      	lsls	r1, r0, #30
 8002fb0:	bf58      	it	pl
 8002fb2:	6963      	ldrpl	r3, [r4, #20]
 8002fb4:	60a3      	str	r3, [r4, #8]
 8002fb6:	e7f4      	b.n	8002fa2 <__swsetup_r+0x92>
 8002fb8:	2000      	movs	r0, #0
 8002fba:	e7f7      	b.n	8002fac <__swsetup_r+0x9c>
 8002fbc:	20000064 	.word	0x20000064

08002fc0 <_sbrk_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	4d06      	ldr	r5, [pc, #24]	; (8002fdc <_sbrk_r+0x1c>)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	4608      	mov	r0, r1
 8002fca:	602b      	str	r3, [r5, #0]
 8002fcc:	f7fd fd6c 	bl	8000aa8 <_sbrk>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d102      	bne.n	8002fda <_sbrk_r+0x1a>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	b103      	cbz	r3, 8002fda <_sbrk_r+0x1a>
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	20000260 	.word	0x20000260

08002fe0 <__swhatbuf_r>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	b096      	sub	sp, #88	; 0x58
 8002fec:	4615      	mov	r5, r2
 8002fee:	461e      	mov	r6, r3
 8002ff0:	da0d      	bge.n	800300e <__swhatbuf_r+0x2e>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	bf0c      	ite	eq
 8002ffe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003002:	2340      	movne	r3, #64	; 0x40
 8003004:	2000      	movs	r0, #0
 8003006:	6031      	str	r1, [r6, #0]
 8003008:	602b      	str	r3, [r5, #0]
 800300a:	b016      	add	sp, #88	; 0x58
 800300c:	bd70      	pop	{r4, r5, r6, pc}
 800300e:	466a      	mov	r2, sp
 8003010:	f000 f848 	bl	80030a4 <_fstat_r>
 8003014:	2800      	cmp	r0, #0
 8003016:	dbec      	blt.n	8002ff2 <__swhatbuf_r+0x12>
 8003018:	9901      	ldr	r1, [sp, #4]
 800301a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800301e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003022:	4259      	negs	r1, r3
 8003024:	4159      	adcs	r1, r3
 8003026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302a:	e7eb      	b.n	8003004 <__swhatbuf_r+0x24>

0800302c <__smakebuf_r>:
 800302c:	898b      	ldrh	r3, [r1, #12]
 800302e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003030:	079d      	lsls	r5, r3, #30
 8003032:	4606      	mov	r6, r0
 8003034:	460c      	mov	r4, r1
 8003036:	d507      	bpl.n	8003048 <__smakebuf_r+0x1c>
 8003038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	6123      	str	r3, [r4, #16]
 8003040:	2301      	movs	r3, #1
 8003042:	6163      	str	r3, [r4, #20]
 8003044:	b002      	add	sp, #8
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	ab01      	add	r3, sp, #4
 800304a:	466a      	mov	r2, sp
 800304c:	f7ff ffc8 	bl	8002fe0 <__swhatbuf_r>
 8003050:	9900      	ldr	r1, [sp, #0]
 8003052:	4605      	mov	r5, r0
 8003054:	4630      	mov	r0, r6
 8003056:	f7ff fadb 	bl	8002610 <_malloc_r>
 800305a:	b948      	cbnz	r0, 8003070 <__smakebuf_r+0x44>
 800305c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003060:	059a      	lsls	r2, r3, #22
 8003062:	d4ef      	bmi.n	8003044 <__smakebuf_r+0x18>
 8003064:	f023 0303 	bic.w	r3, r3, #3
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	e7e3      	b.n	8003038 <__smakebuf_r+0xc>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	6020      	str	r0, [r4, #0]
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	81a3      	strh	r3, [r4, #12]
 800307a:	9b00      	ldr	r3, [sp, #0]
 800307c:	6163      	str	r3, [r4, #20]
 800307e:	9b01      	ldr	r3, [sp, #4]
 8003080:	6120      	str	r0, [r4, #16]
 8003082:	b15b      	cbz	r3, 800309c <__smakebuf_r+0x70>
 8003084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003088:	4630      	mov	r0, r6
 800308a:	f000 f81d 	bl	80030c8 <_isatty_r>
 800308e:	b128      	cbz	r0, 800309c <__smakebuf_r+0x70>
 8003090:	89a3      	ldrh	r3, [r4, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	431d      	orrs	r5, r3
 80030a0:	81a5      	strh	r5, [r4, #12]
 80030a2:	e7cf      	b.n	8003044 <__smakebuf_r+0x18>

080030a4 <_fstat_r>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	4d07      	ldr	r5, [pc, #28]	; (80030c4 <_fstat_r+0x20>)
 80030a8:	2300      	movs	r3, #0
 80030aa:	4604      	mov	r4, r0
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	602b      	str	r3, [r5, #0]
 80030b2:	f7fd fcf0 	bl	8000a96 <_fstat>
 80030b6:	1c43      	adds	r3, r0, #1
 80030b8:	d102      	bne.n	80030c0 <_fstat_r+0x1c>
 80030ba:	682b      	ldr	r3, [r5, #0]
 80030bc:	b103      	cbz	r3, 80030c0 <_fstat_r+0x1c>
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
 80030c2:	bf00      	nop
 80030c4:	20000260 	.word	0x20000260

080030c8 <_isatty_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4d06      	ldr	r5, [pc, #24]	; (80030e4 <_isatty_r+0x1c>)
 80030cc:	2300      	movs	r3, #0
 80030ce:	4604      	mov	r4, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	602b      	str	r3, [r5, #0]
 80030d4:	f7fd fce4 	bl	8000aa0 <_isatty>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_isatty_r+0x1a>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_isatty_r+0x1a>
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000260 	.word	0x20000260

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
