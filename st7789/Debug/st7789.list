
st7789.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003660  0800bd08  0800bd08  0001bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f368  0800f368  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f368  0800f368  0001f368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f370  0800f370  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f370  0800f370  0001f370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f374  0800f374  0001f374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd98  200001ec  0800f564  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000df84  0800f564  0002df84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006145d  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ab9e  00000000  00000000  00081679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000300f5  00000000  00000000  0008c217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027b8  00000000  00000000  000bc310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e58  00000000  00000000  000beac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cb0  00000000  00000000  000c1920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004dbab  00000000  00000000  000e55d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a408a  00000000  00000000  0013317b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d7205  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007844  00000000  00000000  001d7258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bcf0 	.word	0x0800bcf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800bcf0 	.word	0x0800bcf0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	2400      	movs	r4, #0
 80005ba:	9403      	str	r4, [sp, #12]
 80005bc:	9404      	str	r4, [sp, #16]
 80005be:	9405      	str	r4, [sp, #20]
 80005c0:	9406      	str	r4, [sp, #24]
 80005c2:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	9400      	str	r4, [sp, #0]
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_GPIO_Init+0xb8>)
 80005c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ca:	f042 0204 	orr.w	r2, r2, #4
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
 80005d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d2:	f002 0204 	and.w	r2, r2, #4
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	9401      	str	r4, [sp, #4]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
 80005e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	9402      	str	r4, [sp, #8]
 80005f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f2:	f042 0201 	orr.w	r2, r2, #1
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	9302      	str	r3, [sp, #8]
 8000600:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000602:	4f1b      	ldr	r7, [pc, #108]	; (8000670 <MX_GPIO_Init+0xbc>)
 8000604:	4622      	mov	r2, r4
 8000606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060a:	4638      	mov	r0, r7
 800060c:	f000 fe14 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8000610:	4d18      	ldr	r5, [pc, #96]	; (8000674 <MX_GPIO_Init+0xc0>)
 8000612:	4622      	mov	r2, r4
 8000614:	2148      	movs	r1, #72	; 0x48
 8000616:	4628      	mov	r0, r5
 8000618:	f000 fe0e 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2601      	movs	r6, #1
 8000624:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800062a:	a903      	add	r1, sp, #12
 800062c:	4638      	mov	r0, r7
 800062e:	f000 fd23 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000632:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000634:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000638:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800063c:	a903      	add	r1, sp, #12
 800063e:	4628      	mov	r0, r5
 8000640:	f000 fd1a 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8000644:	2348      	movs	r3, #72	; 0x48
 8000646:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	a903      	add	r1, sp, #12
 8000650:	4628      	mov	r0, r5
 8000652:	f000 fd11 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8000656:	2310      	movs	r3, #16
 8000658:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 800065e:	a903      	add	r1, sp, #12
 8000660:	4628      	mov	r0, r5
 8000662:	f000 fd09 	bl	8001078 <HAL_GPIO_Init>

}
 8000666:	b009      	add	sp, #36	; 0x24
 8000668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40020800 	.word	0x40020800
 8000674:	40020000 	.word	0x40020000

08000678 <MX_DMA_Init>:
{
 8000678:	b500      	push	{lr}
 800067a:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 800067c:	2100      	movs	r1, #0
 800067e:	9101      	str	r1, [sp, #4]
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_DMA_Init+0x30>)
 8000682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000684:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000694:	460a      	mov	r2, r1
 8000696:	203a      	movs	r0, #58	; 0x3a
 8000698:	f000 fad6 	bl	8000c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800069c:	203a      	movs	r0, #58	; 0x3a
 800069e:	f000 fb0b 	bl	8000cb8 <HAL_NVIC_EnableIRQ>
}
 80006a2:	b003      	add	sp, #12
 80006a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a8:	40023800 	.word	0x40023800

080006ac <_write>:
int _write(int file, char *ptr, int len) {
 80006ac:	b538      	push	{r3, r4, r5, lr}
 80006ae:	460d      	mov	r5, r1
 80006b0:	4614      	mov	r4, r2
	while((status = CDC_Transmit_FS((uint8_t*) ptr, len)) != HAL_OK) {
 80006b2:	b2a1      	uxth	r1, r4
 80006b4:	4628      	mov	r0, r5
 80006b6:	f003 fef7 	bl	80044a8 <CDC_Transmit_FS>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b110      	cbz	r0, 80006c4 <_write+0x18>
		if (status == HAL_ERROR) return 0; // Should prevent "hanging"
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d1f7      	bne.n	80006b2 <_write+0x6>
 80006c2:	2400      	movs	r4, #0
}
 80006c4:	4620      	mov	r0, r4
 80006c6:	bd38      	pop	{r3, r4, r5, pc}

080006c8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ca:	e7fe      	b.n	80006ca <Error_Handler+0x2>

080006cc <MX_SPI1_Init>:
{
 80006cc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_SPI1_Init+0x38>)
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_SPI1_Init+0x3c>)
 80006d2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80006d8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	2300      	movs	r3, #0
 80006dc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006de:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	230a      	movs	r3, #10
 80006f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f6:	f001 fe49 	bl	800238c <HAL_SPI_Init>
 80006fa:	b900      	cbnz	r0, 80006fe <MX_SPI1_Init+0x32>
}
 80006fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006fe:	f7ff ffe3 	bl	80006c8 <Error_Handler>
 8000702:	bf00      	nop
 8000704:	20000268 	.word	0x20000268
 8000708:	40013000 	.word	0x40013000

0800070c <MX_TIM9_Init>:
{
 800070c:	b500      	push	{lr}
 800070e:	b08d      	sub	sp, #52	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000710:	2300      	movs	r3, #0
 8000712:	9308      	str	r3, [sp, #32]
 8000714:	9309      	str	r3, [sp, #36]	; 0x24
 8000716:	930a      	str	r3, [sp, #40]	; 0x28
 8000718:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	9302      	str	r3, [sp, #8]
 800071e:	9303      	str	r3, [sp, #12]
 8000720:	9304      	str	r3, [sp, #16]
 8000722:	9305      	str	r3, [sp, #20]
 8000724:	9306      	str	r3, [sp, #24]
 8000726:	9307      	str	r3, [sp, #28]
  htim9.Instance = TIM9;
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <MX_TIM9_Init+0x88>)
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_TIM9_Init+0x8c>)
 800072c:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 479;
 800072e:	f240 12df 	movw	r2, #479	; 0x1df
 8000732:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 999;
 8000736:	f240 32e7 	movw	r2, #999	; 0x3e7
 800073a:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000740:	f001 ff86 	bl	8002650 <HAL_TIM_Base_Init>
 8000744:	b9e8      	cbnz	r0, 8000782 <MX_TIM9_Init+0x76>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800074c:	a908      	add	r1, sp, #32
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <MX_TIM9_Init+0x88>)
 8000750:	f002 f883 	bl	800285a <HAL_TIM_ConfigClockSource>
 8000754:	b9b8      	cbnz	r0, 8000786 <MX_TIM9_Init+0x7a>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000756:	480f      	ldr	r0, [pc, #60]	; (8000794 <MX_TIM9_Init+0x88>)
 8000758:	f001 ffa6 	bl	80026a8 <HAL_TIM_PWM_Init>
 800075c:	b9a8      	cbnz	r0, 800078a <MX_TIM9_Init+0x7e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075e:	2360      	movs	r3, #96	; 0x60
 8000760:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 100;
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000766:	2200      	movs	r2, #0
 8000768:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076a:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	a901      	add	r1, sp, #4
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_TIM9_Init+0x88>)
 8000770:	f001 fff8 	bl	8002764 <HAL_TIM_PWM_ConfigChannel>
 8000774:	b958      	cbnz	r0, 800078e <MX_TIM9_Init+0x82>
  HAL_TIM_MspPostInit(&htim9);
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <MX_TIM9_Init+0x88>)
 8000778:	f000 f932 	bl	80009e0 <HAL_TIM_MspPostInit>
}
 800077c:	b00d      	add	sp, #52	; 0x34
 800077e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000782:	f7ff ffa1 	bl	80006c8 <Error_Handler>
    Error_Handler();
 8000786:	f7ff ff9f 	bl	80006c8 <Error_Handler>
    Error_Handler();
 800078a:	f7ff ff9d 	bl	80006c8 <Error_Handler>
    Error_Handler();
 800078e:	f7ff ff9b 	bl	80006c8 <Error_Handler>
 8000792:	bf00      	nop
 8000794:	200002c0 	.word	0x200002c0
 8000798:	40014000 	.word	0x40014000

0800079c <SystemClock_Config>:
{
 800079c:	b500      	push	{lr}
 800079e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a0:	2230      	movs	r2, #48	; 0x30
 80007a2:	2100      	movs	r1, #0
 80007a4:	a808      	add	r0, sp, #32
 80007a6:	f00a faaf 	bl	800ad08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007aa:	2300      	movs	r3, #0
 80007ac:	9303      	str	r3, [sp, #12]
 80007ae:	9304      	str	r3, [sp, #16]
 80007b0:	9305      	str	r3, [sp, #20]
 80007b2:	9306      	str	r3, [sp, #24]
 80007b4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <SystemClock_Config+0x9c>)
 80007ba:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80007bc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007c0:	6411      	str	r1, [r2, #64]	; 0x40
 80007c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80007c4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80007c8:	9201      	str	r2, [sp, #4]
 80007ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <SystemClock_Config+0xa0>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e2:	2301      	movs	r3, #1
 80007e4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ea:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007f4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007f6:	2219      	movs	r2, #25
 80007f8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007fa:	22c0      	movs	r2, #192	; 0xc0
 80007fc:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fe:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	a808      	add	r0, sp, #32
 8000806:	f001 fabd 	bl	8001d84 <HAL_RCC_OscConfig>
 800080a:	b988      	cbnz	r0, 8000830 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800081c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000820:	2103      	movs	r1, #3
 8000822:	a803      	add	r0, sp, #12
 8000824:	f001 fcfc 	bl	8002220 <HAL_RCC_ClockConfig>
 8000828:	b920      	cbnz	r0, 8000834 <SystemClock_Config+0x98>
}
 800082a:	b015      	add	sp, #84	; 0x54
 800082c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000830:	f7ff ff4a 	bl	80006c8 <Error_Handler>
    Error_Handler();
 8000834:	f7ff ff48 	bl	80006c8 <Error_Handler>
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <main>:
{
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8000842:	f000 f9af 	bl	8000ba4 <HAL_Init>
  SystemClock_Config();
 8000846:	f7ff ffa9 	bl	800079c <SystemClock_Config>
  MX_GPIO_Init();
 800084a:	f7ff feb3 	bl	80005b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800084e:	f7ff ff13 	bl	8000678 <MX_DMA_Init>
  MX_SPI1_Init();
 8000852:	f7ff ff3b 	bl	80006cc <MX_SPI1_Init>
  MX_TIM9_Init();
 8000856:	f7ff ff59 	bl	800070c <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 800085a:	f003 fdd3 	bl	8004404 <MX_USB_DEVICE_Init>
  lv_init();
 800085e:	f004 f9bb 	bl	8004bd8 <lv_init>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8000862:	2100      	movs	r1, #0
 8000864:	4816      	ldr	r0, [pc, #88]	; (80008c0 <main+0x80>)
 8000866:	f002 f887 	bl	8002978 <HAL_TIM_PWM_Start>
  uint32_t now = 0, last_print = 0, lv_tick = 0, lv_tim = 0;
 800086a:	2500      	movs	r5, #0
 800086c:	462e      	mov	r6, r5
 800086e:	462f      	mov	r7, r5
 8000870:	e006      	b.n	8000880 <main+0x40>
	  if (now - lv_tick > 10) {
 8000872:	1ba3      	subs	r3, r4, r6
 8000874:	2b0a      	cmp	r3, #10
 8000876:	d80d      	bhi.n	8000894 <main+0x54>
	  if (now - last_print > 1000) {
 8000878:	1be3      	subs	r3, r4, r7
 800087a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800087e:	d80e      	bhi.n	800089e <main+0x5e>
	  now = HAL_GetTick();
 8000880:	f000 f9b6 	bl	8000bf0 <HAL_GetTick>
 8000884:	4604      	mov	r4, r0
	  if (now - lv_tim > 1) {
 8000886:	1b43      	subs	r3, r0, r5
 8000888:	2b01      	cmp	r3, #1
 800088a:	d9f2      	bls.n	8000872 <main+0x32>
		  lv_timer_handler();
 800088c:	f009 fd74 	bl	800a378 <lv_timer_handler>
		  lv_tim = now;
 8000890:	4625      	mov	r5, r4
 8000892:	e7ee      	b.n	8000872 <main+0x32>
		  lv_tick_inc(10);
 8000894:	200a      	movs	r0, #10
 8000896:	f008 fc71 	bl	800917c <lv_tick_inc>
		  lv_tick = now;
 800089a:	4626      	mov	r6, r4
 800089c:	e7ec      	b.n	8000878 <main+0x38>
		  DBG("Tick %lu", now % 1000);
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <main+0x84>)
 80008a0:	fba3 2304 	umull	r2, r3, r3, r4
 80008a4:	099b      	lsrs	r3, r3, #6
 80008a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008aa:	fb01 4113 	mls	r1, r1, r3, r4
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <main+0x88>)
 80008b0:	f00a fd20 	bl	800b2f4 <iprintf>
 80008b4:	200a      	movs	r0, #10
 80008b6:	f00a fd35 	bl	800b324 <putchar>
		  last_print = now;
 80008ba:	4627      	mov	r7, r4
 80008bc:	e7e0      	b.n	8000880 <main+0x40>
 80008be:	bf00      	nop
 80008c0:	200002c0 	.word	0x200002c0
 80008c4:	10624dd3 	.word	0x10624dd3
 80008c8:	0800bd18 	.word	0x0800bd18

080008cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2100      	movs	r1, #0
 80008d0:	9100      	str	r1, [sp, #0]
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_MspInit+0x34>)
 80008d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008da:	645a      	str	r2, [r3, #68]	; 0x44
 80008dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008e2:	9200      	str	r2, [sp, #0]
 80008e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	9101      	str	r1, [sp, #4]
 80008e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008ee:	641a      	str	r2, [r3, #64]	; 0x40
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	b002      	add	sp, #8
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b530      	push	{r4, r5, lr}
 8000906:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	2300      	movs	r3, #0
 800090a:	9303      	str	r3, [sp, #12]
 800090c:	9304      	str	r3, [sp, #16]
 800090e:	9305      	str	r3, [sp, #20]
 8000910:	9306      	str	r3, [sp, #24]
 8000912:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000914:	6802      	ldr	r2, [r0, #0]
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <HAL_SPI_MspInit+0x9c>)
 8000918:	429a      	cmp	r2, r3
 800091a:	d001      	beq.n	8000920 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800091c:	b009      	add	sp, #36	; 0x24
 800091e:	bd30      	pop	{r4, r5, pc}
 8000920:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000922:	2500      	movs	r5, #0
 8000924:	9501      	str	r5, [sp, #4]
 8000926:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800092a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800092c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000930:	645a      	str	r2, [r3, #68]	; 0x44
 8000932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000934:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000938:	9201      	str	r2, [sp, #4]
 800093a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	9502      	str	r5, [sp, #8]
 800093e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000940:	f042 0201 	orr.w	r2, r2, #1
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MOSI_Pin;
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800095c:	2305      	movs	r3, #5
 800095e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	a903      	add	r1, sp, #12
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <HAL_SPI_MspInit+0xa0>)
 8000964:	f000 fb88 	bl	8001078 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <HAL_SPI_MspInit+0xa4>)
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_SPI_MspInit+0xa8>)
 800096c:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800096e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000972:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800097a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097e:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000980:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000982:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000984:	61c5      	str	r5, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000986:	6205      	str	r5, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000988:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800098a:	f000 fa21 	bl	8000dd0 <HAL_DMA_Init>
 800098e:	b918      	cbnz	r0, 8000998 <HAL_SPI_MspInit+0x94>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_SPI_MspInit+0xa4>)
 8000992:	64a3      	str	r3, [r4, #72]	; 0x48
 8000994:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000996:	e7c1      	b.n	800091c <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000998:	f7ff fe96 	bl	80006c8 <Error_Handler>
 800099c:	e7f8      	b.n	8000990 <HAL_SPI_MspInit+0x8c>
 800099e:	bf00      	nop
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40020000 	.word	0x40020000
 80009a8:	20000208 	.word	0x20000208
 80009ac:	40026440 	.word	0x40026440

080009b0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM9)
 80009b0:	6802      	ldr	r2, [r0, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_TIM_Base_MspInit+0x28>)
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d000      	beq.n	80009ba <HAL_TIM_Base_MspInit+0xa>
 80009b8:	4770      	bx	lr
{
 80009ba:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_TIM_Base_MspInit+0x2c>)
 80009c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009c8:	645a      	str	r2, [r3, #68]	; 0x44
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80009d4:	b002      	add	sp, #8
 80009d6:	4770      	bx	lr
 80009d8:	40014000 	.word	0x40014000
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009e0:	b500      	push	{lr}
 80009e2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	2300      	movs	r3, #0
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	9303      	str	r3, [sp, #12]
 80009ec:	9304      	str	r3, [sp, #16]
 80009ee:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM9)
 80009f0:	6802      	ldr	r2, [r0, #0]
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_TIM_MspPostInit+0x4c>)
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d002      	beq.n	80009fe <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80009f8:	b007      	add	sp, #28
 80009fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_TIM_MspPostInit+0x50>)
 8000a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a06:	f042 0201 	orr.w	r2, r2, #1
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TFT_BL_Pin;
 8000a16:	2304      	movs	r3, #4
 8000a18:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TFT_BL_GPIO_Port, &GPIO_InitStruct);
 8000a22:	a901      	add	r1, sp, #4
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <HAL_TIM_MspPostInit+0x54>)
 8000a26:	f000 fb27 	bl	8001078 <HAL_GPIO_Init>
}
 8000a2a:	e7e5      	b.n	80009f8 <HAL_TIM_MspPostInit+0x18>
 8000a2c:	40014000 	.word	0x40014000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler>

08000a3a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler>

08000a3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler>

08000a3e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler>

08000a40 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler>

08000a42 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 f8c5 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4e:	bd08      	pop	{r3, pc}

08000a50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <DMA2_Stream2_IRQHandler+0xc>)
 8000a54:	f000 fa22 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000a58:	bd08      	pop	{r3, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000208 	.word	0x20000208

08000a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <OTG_FS_IRQHandler+0xc>)
 8000a64:	f000 fdb0 	bl	80015c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200017e4 	.word	0x200017e4

08000a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	460c      	mov	r4, r1
 8000a74:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	2500      	movs	r5, #0
 8000a78:	e006      	b.n	8000a88 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4621      	mov	r1, r4
 8000a80:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000a86:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	dbf6      	blt.n	8000a7a <_read+0xa>
	}

return len;
}
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}

08000a90 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	4770      	bx	lr

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b510      	push	{r4, lr}
 8000aaa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <_sbrk+0x38>)
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <_sbrk+0x40>)
 8000ab2:	6800      	ldr	r0, [r0, #0]
 8000ab4:	b140      	cbz	r0, 8000ac8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <_sbrk+0x40>)
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	4403      	add	r3, r0
 8000abc:	1a52      	subs	r2, r2, r1
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d806      	bhi.n	8000ad0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <_sbrk+0x40>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ac6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <_sbrk+0x40>)
 8000aca:	4c08      	ldr	r4, [pc, #32]	; (8000aec <_sbrk+0x44>)
 8000acc:	6004      	str	r4, [r0, #0]
 8000ace:	e7f2      	b.n	8000ab6 <_sbrk+0xe>
    errno = ENOMEM;
 8000ad0:	f00a f8e2 	bl	800ac98 <__errno>
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000adc:	e7f3      	b.n	8000ac6 <_sbrk+0x1e>
 8000ade:	bf00      	nop
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20000308 	.word	0x20000308
 8000aec:	2000df88 	.word	0x2000df88

08000af0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <SystemInit+0x10>)
 8000af2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000af6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffdf 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f00a f8b7 	bl	800aca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fe83 	bl	8000840 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000b48:	0800f378 	.word	0x0800f378
  ldr r2, =_sbss
 8000b4c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000b50:	2000df84 	.word	0x2000df84

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_InitTick+0x40>)
 8000b5e:	7818      	ldrb	r0, [r3, #0]
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <HAL_InitTick+0x44>)
 8000b6a:	6810      	ldr	r0, [r2, #0]
 8000b6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b70:	f000 f8b0 	bl	8000cd4 <HAL_SYSTICK_Config>
 8000b74:	b968      	cbnz	r0, 8000b92 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	2c0f      	cmp	r4, #15
 8000b78:	d901      	bls.n	8000b7e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	e00a      	b.n	8000b94 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4621      	mov	r1, r4
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b86:	f000 f85f 	bl	8000c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_InitTick+0x48>)
 8000b8c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2000      	movs	r0, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
}
 8000b94:	bd10      	pop	{r4, pc}
 8000b96:	bf00      	nop
 8000b98:	20000004 	.word	0x20000004
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_Init>:
{
 8000ba4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x30>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bb6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bbe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f82f 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f7ff ffc6 	bl	8000b58 <HAL_InitTick>
  HAL_MspInit();
 8000bcc:	f7ff fe7e 	bl	80008cc <HAL_MspInit>
}
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	bd08      	pop	{r3, pc}
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x10>)
 8000bda:	6811      	ldr	r1, [r2, #0]
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_IncTick+0x14>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	440b      	add	r3, r1
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000030c 	.word	0x2000030c
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bf0:	4b01      	ldr	r3, [pc, #4]	; (8000bf8 <HAL_GetTick+0x8>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2000030c 	.word	0x2000030c

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff fff6 	bl	8000bf0 <HAL_GetTick>
 8000c04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000c0a:	d002      	beq.n	8000c12 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_Delay+0x24>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	f7ff ffed 	bl	8000bf0 <HAL_GetTick>
 8000c16:	1b40      	subs	r0, r0, r5
 8000c18:	42a0      	cmp	r0, r4
 8000c1a:	d3fa      	bcc.n	8000c12 <HAL_Delay+0x16>
  {
  }
}
 8000c1c:	bd38      	pop	{r3, r4, r5, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c2c:	041b      	lsls	r3, r3, #16
 8000c2e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	0200      	lsls	r0, r0, #8
 8000c32:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c36:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c40:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_NVIC_SetPriority+0x68>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c52:	f1c3 0c07 	rsb	ip, r3, #7
 8000c56:	f1bc 0f04 	cmp.w	ip, #4
 8000c5a:	bf28      	it	cs
 8000c5c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c60:	f103 0e04 	add.w	lr, r3, #4
 8000c64:	f1be 0f06 	cmp.w	lr, #6
 8000c68:	d918      	bls.n	8000c9c <HAL_NVIC_SetPriority+0x54>
 8000c6a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000c70:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000c74:	ea21 010c 	bic.w	r1, r1, ip
 8000c78:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7a:	fa0e f303 	lsl.w	r3, lr, r3
 8000c7e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c82:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c84:	2800      	cmp	r0, #0
 8000c86:	db0b      	blt.n	8000ca0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	0109      	lsls	r1, r1, #4
 8000c8a:	b2c9      	uxtb	r1, r1
 8000c8c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c90:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c94:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c98:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e7e5      	b.n	8000c6c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	f000 000f 	and.w	r0, r0, #15
 8000ca4:	0109      	lsls	r1, r1, #4
 8000ca6:	b2c9      	uxtb	r1, r1
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <HAL_NVIC_SetPriority+0x6c>)
 8000caa:	5419      	strb	r1, [r3, r0]
 8000cac:	e7f4      	b.n	8000c98 <HAL_NVIC_SetPriority+0x50>
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	e000ed14 	.word	0xe000ed14

08000cb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	db07      	blt.n	8000ccc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbc:	f000 021f 	and.w	r2, r0, #31
 8000cc0:	0940      	lsrs	r0, r0, #5
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4093      	lsls	r3, r2
 8000cc6:	4a02      	ldr	r2, [pc, #8]	; (8000cd0 <HAL_NVIC_EnableIRQ+0x18>)
 8000cc8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cda:	d20b      	bcs.n	8000cf4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ce0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <HAL_SYSTICK_Config+0x24>)
 8000ce4:	21f0      	movs	r1, #240	; 0xf0
 8000ce6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cea:	2000      	movs	r0, #0
 8000cec:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	2207      	movs	r2, #7
 8000cf0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cf4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000cfe:	6803      	ldr	r3, [r0, #0]
 8000d00:	b2d9      	uxtb	r1, r3
 8000d02:	3910      	subs	r1, #16
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <DMA_CalcBaseAndBitshift+0x3c>)
 8000d06:	fba2 4201 	umull	r4, r2, r2, r1
 8000d0a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <DMA_CalcBaseAndBitshift+0x40>)
 8000d0e:	5ca2      	ldrb	r2, [r4, r2]
 8000d10:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d12:	295f      	cmp	r1, #95	; 0x5f
 8000d14:	d909      	bls.n	8000d2a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d1a:	f023 0303 	bic.w	r3, r3, #3
 8000d1e:	3304      	adds	r3, #4
 8000d20:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000d22:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d28:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d2e:	f023 0303 	bic.w	r3, r3, #3
 8000d32:	6583      	str	r3, [r0, #88]	; 0x58
 8000d34:	e7f5      	b.n	8000d22 <DMA_CalcBaseAndBitshift+0x26>
 8000d36:	bf00      	nop
 8000d38:	aaaaaaab 	.word	0xaaaaaaab
 8000d3c:	0800bd34 	.word	0x0800bd34

08000d40 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d40:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d42:	6982      	ldr	r2, [r0, #24]
 8000d44:	b992      	cbnz	r2, 8000d6c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d00a      	beq.n	8000d60 <DMA_CheckFifoParam+0x20>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d002      	beq.n	8000d54 <DMA_CheckFifoParam+0x14>
 8000d4e:	b10b      	cbz	r3, 8000d54 <DMA_CheckFifoParam+0x14>
 8000d50:	2000      	movs	r0, #0
 8000d52:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d56:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d5a:	d128      	bne.n	8000dae <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d60:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d66:	d024      	beq.n	8000db2 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	2000      	movs	r0, #0
 8000d6a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d6c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d70:	d009      	beq.n	8000d86 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d925      	bls.n	8000dc2 <DMA_CheckFifoParam+0x82>
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d125      	bne.n	8000dc6 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d80:	d123      	bne.n	8000dca <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000d82:	2000      	movs	r0, #0
 8000d84:	4770      	bx	lr
    switch (tmp)
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d803      	bhi.n	8000d92 <DMA_CheckFifoParam+0x52>
 8000d8a:	e8df f003 	tbb	[pc, r3]
 8000d8e:	0414      	.short	0x0414
 8000d90:	0a14      	.short	0x0a14
 8000d92:	2000      	movs	r0, #0
 8000d94:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d98:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d9c:	d10d      	bne.n	8000dba <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000d9e:	2000      	movs	r0, #0
 8000da0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000da2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000da8:	d009      	beq.n	8000dbe <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000daa:	2000      	movs	r0, #0
 8000dac:	4770      	bx	lr
        status = HAL_ERROR;
 8000dae:	2001      	movs	r0, #1
 8000db0:	4770      	bx	lr
        status = HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	4770      	bx	lr
      status = HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
 8000db8:	4770      	bx	lr
        status = HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4770      	bx	lr
        status = HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4770      	bx	lr
      status = HAL_ERROR;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	4770      	bx	lr
    switch (tmp)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000dca:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_DMA_Init>:
{
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ff0c 	bl	8000bf0 <HAL_GetTick>
  if(hdma == NULL)
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d05b      	beq.n	8000e94 <HAL_DMA_Init+0xc4>
 8000ddc:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8000de4:	2300      	movs	r3, #0
 8000de6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	f012 0f01 	tst.w	r2, #1
 8000dfc:	d00a      	beq.n	8000e14 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dfe:	f7ff fef7 	bl	8000bf0 <HAL_GetTick>
 8000e02:	1b43      	subs	r3, r0, r5
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	d9f5      	bls.n	8000df4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000e12:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000e14:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e16:	4820      	ldr	r0, [pc, #128]	; (8000e98 <HAL_DMA_Init+0xc8>)
 8000e18:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e1a:	6861      	ldr	r1, [r4, #4]
 8000e1c:	68a2      	ldr	r2, [r4, #8]
 8000e1e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e20:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e22:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e24:	6921      	ldr	r1, [r4, #16]
 8000e26:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e28:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2c:	69a1      	ldr	r1, [r4, #24]
 8000e2e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e30:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e32:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e34:	6a21      	ldr	r1, [r4, #32]
 8000e36:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e38:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e3c:	2904      	cmp	r1, #4
 8000e3e:	d01e      	beq.n	8000e7e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000e40:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000e42:	6826      	ldr	r6, [r4, #0]
 8000e44:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e46:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e4c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d107      	bne.n	8000e62 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000e52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e54:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e58:	b11b      	cbz	r3, 8000e62 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff ff70 	bl	8000d40 <DMA_CheckFifoParam>
 8000e60:	b990      	cbnz	r0, 8000e88 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000e62:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff ff49 	bl	8000cfc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e6c:	233f      	movs	r3, #63	; 0x3f
 8000e6e:	4093      	lsls	r3, r2
 8000e70:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e72:	2000      	movs	r0, #0
 8000e74:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000e7c:	e7c9      	b.n	8000e12 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e82:	4301      	orrs	r1, r0
 8000e84:	430a      	orrs	r2, r1
 8000e86:	e7db      	b.n	8000e40 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000e92:	e7be      	b.n	8000e12 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000e94:	2001      	movs	r0, #1
 8000e96:	e7bc      	b.n	8000e12 <HAL_DMA_Init+0x42>
 8000e98:	f010803f 	.word	0xf010803f

08000e9c <HAL_DMA_IRQHandler>:
{
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ea6:	4b72      	ldr	r3, [pc, #456]	; (8001070 <HAL_DMA_IRQHandler+0x1d4>)
 8000ea8:	681d      	ldr	r5, [r3, #0]
 8000eaa:	4b72      	ldr	r3, [pc, #456]	; (8001074 <HAL_DMA_IRQHandler+0x1d8>)
 8000eac:	fba3 3505 	umull	r3, r5, r3, r5
 8000eb0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eb2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000eb4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eb6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000eb8:	2308      	movs	r3, #8
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	4233      	tst	r3, r6
 8000ebe:	d010      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ec0:	6803      	ldr	r3, [r0, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f012 0f04 	tst.w	r2, #4
 8000ec8:	d00b      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f022 0204 	bic.w	r2, r2, #4
 8000ed0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ed2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000eda:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ee2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	4233      	tst	r3, r6
 8000eea:	d009      	beq.n	8000f00 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	6952      	ldr	r2, [r2, #20]
 8000ef0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000ef4:	d004      	beq.n	8000f00 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ef6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ef8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f02:	2304      	movs	r3, #4
 8000f04:	4093      	lsls	r3, r2
 8000f06:	4233      	tst	r3, r6
 8000f08:	d009      	beq.n	8000f1e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	f012 0f02 	tst.w	r2, #2
 8000f12:	d004      	beq.n	8000f1e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f14:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f20:	2310      	movs	r3, #16
 8000f22:	4093      	lsls	r3, r2
 8000f24:	4233      	tst	r3, r6
 8000f26:	d024      	beq.n	8000f72 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f012 0f08 	tst.w	r2, #8
 8000f30:	d01f      	beq.n	8000f72 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f32:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000f3c:	d00d      	beq.n	8000f5a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000f44:	d104      	bne.n	8000f50 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f48:	b19b      	cbz	r3, 8000f72 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	4798      	blx	r3
 8000f4e:	e010      	b.n	8000f72 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f52:	b173      	cbz	r3, 8000f72 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000f54:	4620      	mov	r0, r4
 8000f56:	4798      	blx	r3
 8000f58:	e00b      	b.n	8000f72 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000f60:	d103      	bne.n	8000f6a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f022 0208 	bic.w	r2, r2, #8
 8000f68:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f6c:	b10b      	cbz	r3, 8000f72 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f74:	2320      	movs	r3, #32
 8000f76:	4093      	lsls	r3, r2
 8000f78:	4233      	tst	r3, r6
 8000f7a:	d055      	beq.n	8001028 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	f012 0f10 	tst.w	r2, #16
 8000f84:	d050      	beq.n	8001028 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f86:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f88:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d00e      	beq.n	8000fb0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000f9a:	d033      	beq.n	8001004 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000fa2:	d12a      	bne.n	8000ffa <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000fa4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d03e      	beq.n	8001028 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000faa:	4620      	mov	r0, r4
 8000fac:	4798      	blx	r3
 8000fae:	e03b      	b.n	8001028 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb0:	6822      	ldr	r2, [r4, #0]
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	f023 0316 	bic.w	r3, r3, #22
 8000fb8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	6953      	ldr	r3, [r2, #20]
 8000fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fc2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc6:	b1a3      	cbz	r3, 8000ff2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fc8:	6822      	ldr	r2, [r4, #0]
 8000fca:	6813      	ldr	r3, [r2, #0]
 8000fcc:	f023 0308 	bic.w	r3, r3, #8
 8000fd0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fd4:	233f      	movs	r3, #63	; 0x3f
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8000fe6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d03f      	beq.n	800106c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000fec:	4620      	mov	r0, r4
 8000fee:	4798      	blx	r3
        return;
 8000ff0:	e03c      	b.n	800106c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ff2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e7      	bne.n	8000fc8 <HAL_DMA_IRQHandler+0x12c>
 8000ff8:	e7eb      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000ffa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ffc:	b1a3      	cbz	r3, 8001028 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000ffe:	4620      	mov	r0, r4
 8001000:	4798      	blx	r3
 8001002:	e011      	b.n	8001028 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f412 7f80 	tst.w	r2, #256	; 0x100
 800100a:	d109      	bne.n	8001020 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f022 0210 	bic.w	r2, r2, #16
 8001012:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001014:	2301      	movs	r3, #1
 8001016:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800101a:	2300      	movs	r3, #0
 800101c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001022:	b10b      	cbz	r3, 8001028 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001024:	4620      	mov	r0, r4
 8001026:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001028:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800102a:	b1fb      	cbz	r3, 800106c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800102c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800102e:	f013 0f01 	tst.w	r3, #1
 8001032:	d017      	beq.n	8001064 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001034:	2305      	movs	r3, #5
 8001036:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800103a:	6822      	ldr	r2, [r4, #0]
 800103c:	6813      	ldr	r3, [r2, #0]
 800103e:	f023 0301 	bic.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	3301      	adds	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	42ab      	cmp	r3, r5
 800104c:	d804      	bhi.n	8001058 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f013 0f01 	tst.w	r3, #1
 8001056:	d1f5      	bne.n	8001044 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001058:	2301      	movs	r3, #1
 800105a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800105e:	2300      	movs	r3, #0
 8001060:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001064:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001066:	b10b      	cbz	r3, 800106c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001068:	4620      	mov	r0, r4
 800106a:	4798      	blx	r3
}
 800106c:	b003      	add	sp, #12
 800106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	1b4e81b5 	.word	0x1b4e81b5

08001078 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001078:	2300      	movs	r3, #0
 800107a:	2b0f      	cmp	r3, #15
 800107c:	f200 80d2 	bhi.w	8001224 <HAL_GPIO_Init+0x1ac>
{
 8001080:	b570      	push	{r4, r5, r6, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	e060      	b.n	8001148 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001086:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	005e      	lsls	r6, r3, #1
 800108a:	2403      	movs	r4, #3
 800108c:	40b4      	lsls	r4, r6
 800108e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	68cc      	ldr	r4, [r1, #12]
 8001094:	40b4      	lsls	r4, r6
 8001096:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001098:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a0:	684c      	ldr	r4, [r1, #4]
 80010a2:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80010aa:	6042      	str	r2, [r0, #4]
 80010ac:	e05a      	b.n	8001164 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ae:	08dc      	lsrs	r4, r3, #3
 80010b0:	3408      	adds	r4, #8
 80010b2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	f003 0207 	and.w	r2, r3, #7
 80010ba:	0095      	lsls	r5, r2, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	40aa      	lsls	r2, r5
 80010c0:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c4:	690a      	ldr	r2, [r1, #16]
 80010c6:	40aa      	lsls	r2, r5
 80010c8:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010cc:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80010d0:	e05c      	b.n	800118c <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	2204      	movs	r2, #4
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x60>
 80010d6:	2200      	movs	r2, #0
 80010d8:	fa02 f20e 	lsl.w	r2, r2, lr
 80010dc:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010de:	3402      	adds	r4, #2
 80010e0:	4d51      	ldr	r5, [pc, #324]	; (8001228 <HAL_GPIO_Init+0x1b0>)
 80010e2:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e6:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x1b4>)
 80010e8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	ea6f 020c 	mvn.w	r2, ip
 80010ee:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f2:	684e      	ldr	r6, [r1, #4]
 80010f4:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80010f8:	d001      	beq.n	80010fe <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80010fa:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 80010fe:	4c4b      	ldr	r4, [pc, #300]	; (800122c <HAL_GPIO_Init+0x1b4>)
 8001100:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001102:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001104:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001108:	684e      	ldr	r6, [r1, #4]
 800110a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800110e:	d001      	beq.n	8001114 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001110:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001114:	4c45      	ldr	r4, [pc, #276]	; (800122c <HAL_GPIO_Init+0x1b4>)
 8001116:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001118:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800111a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	684e      	ldr	r6, [r1, #4]
 8001120:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001124:	d001      	beq.n	800112a <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8001126:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800112a:	4c40      	ldr	r4, [pc, #256]	; (800122c <HAL_GPIO_Init+0x1b4>)
 800112c:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800112e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001130:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001132:	684d      	ldr	r5, [r1, #4]
 8001134:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001138:	d001      	beq.n	800113e <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 800113a:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 800113e:	4c3b      	ldr	r4, [pc, #236]	; (800122c <HAL_GPIO_Init+0x1b4>)
 8001140:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	3301      	adds	r3, #1
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d86b      	bhi.n	8001220 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8001148:	2201      	movs	r2, #1
 800114a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114c:	680c      	ldr	r4, [r1, #0]
 800114e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001152:	ea32 0404 	bics.w	r4, r2, r4
 8001156:	d1f4      	bne.n	8001142 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001158:	684c      	ldr	r4, [r1, #4]
 800115a:	f004 0403 	and.w	r4, r4, #3
 800115e:	3c01      	subs	r4, #1
 8001160:	2c01      	cmp	r4, #1
 8001162:	d990      	bls.n	8001086 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001164:	684a      	ldr	r2, [r1, #4]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	2a03      	cmp	r2, #3
 800116c:	d009      	beq.n	8001182 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 800116e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001170:	005d      	lsls	r5, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	40aa      	lsls	r2, r5
 8001176:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117a:	688a      	ldr	r2, [r1, #8]
 800117c:	40aa      	lsls	r2, r5
 800117e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001180:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	684a      	ldr	r2, [r1, #4]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	2a02      	cmp	r2, #2
 800118a:	d090      	beq.n	80010ae <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800118c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f20e 	lsl.w	r2, r2, lr
 8001198:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	684a      	ldr	r2, [r1, #4]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	fa02 f20e 	lsl.w	r2, r2, lr
 80011a6:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80011a8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011aa:	684a      	ldr	r2, [r1, #4]
 80011ac:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80011b0:	d0c7      	beq.n	8001142 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2200      	movs	r2, #0
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_GPIO_Init+0x1b8>)
 80011b8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80011ba:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80011be:	6454      	str	r4, [r2, #68]	; 0x44
 80011c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011c6:	9201      	str	r2, [sp, #4]
 80011c8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	089c      	lsrs	r4, r3, #2
 80011cc:	1ca5      	adds	r5, r4, #2
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_GPIO_Init+0x1b0>)
 80011d0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f20e 	lsl.w	r2, r2, lr
 80011e2:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <HAL_GPIO_Init+0x1bc>)
 80011e8:	4290      	cmp	r0, r2
 80011ea:	f43f af74 	beq.w	80010d6 <HAL_GPIO_Init+0x5e>
 80011ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f2:	4290      	cmp	r0, r2
 80011f4:	d00e      	beq.n	8001214 <HAL_GPIO_Init+0x19c>
 80011f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fa:	4290      	cmp	r0, r2
 80011fc:	d00c      	beq.n	8001218 <HAL_GPIO_Init+0x1a0>
 80011fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001202:	4290      	cmp	r0, r2
 8001204:	d00a      	beq.n	800121c <HAL_GPIO_Init+0x1a4>
 8001206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120a:	4290      	cmp	r0, r2
 800120c:	f43f af61 	beq.w	80010d2 <HAL_GPIO_Init+0x5a>
 8001210:	2207      	movs	r2, #7
 8001212:	e761      	b.n	80010d8 <HAL_GPIO_Init+0x60>
 8001214:	2201      	movs	r2, #1
 8001216:	e75f      	b.n	80010d8 <HAL_GPIO_Init+0x60>
 8001218:	2202      	movs	r2, #2
 800121a:	e75d      	b.n	80010d8 <HAL_GPIO_Init+0x60>
 800121c:	2203      	movs	r2, #3
 800121e:	e75b      	b.n	80010d8 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8001220:	b002      	add	sp, #8
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40013800 	.word	0x40013800
 800122c:	40013c00 	.word	0x40013c00
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001238:	b10a      	cbz	r2, 800123e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	6181      	str	r1, [r0, #24]
 800123c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	0409      	lsls	r1, r1, #16
 8001240:	6181      	str	r1, [r0, #24]
  }
}
 8001242:	4770      	bx	lr

08001244 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001248:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800124a:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800124e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001252:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800125a:	429a      	cmp	r2, r3
 800125c:	d854      	bhi.n	8001308 <PCD_WriteEmptyTxFifo+0xc4>
 800125e:	4607      	mov	r7, r0
 8001260:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001262:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001264:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001268:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800126c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800126e:	429a      	cmp	r2, r3
 8001270:	d300      	bcc.n	8001274 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8001272:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001274:	f102 0903 	add.w	r9, r2, #3
 8001278:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800127c:	e015      	b.n	80012aa <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800127e:	f106 0903 	add.w	r9, r6, #3
 8001282:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001286:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800128a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800128e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001290:	7c3b      	ldrb	r3, [r7, #16]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	b2b3      	uxth	r3, r6
 8001296:	b2e2      	uxtb	r2, r4
 8001298:	4640      	mov	r0, r8
 800129a:	f001 ff2d 	bl	80030f8 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 800129e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80012a0:	4433      	add	r3, r6
 80012a2:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80012a4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80012a6:	4433      	add	r3, r6
 80012a8:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80012aa:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 80012ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	454b      	cmp	r3, r9
 80012b8:	d312      	bcc.n	80012e0 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80012ba:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80012be:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80012c2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80012c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80012c6:	4299      	cmp	r1, r3
 80012c8:	d20a      	bcs.n	80012e0 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80012ca:	b14b      	cbz	r3, 80012e0 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 80012cc:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80012ce:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80012d2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80012d6:	6c56      	ldr	r6, [r2, #68]	; 0x44
 80012d8:	429e      	cmp	r6, r3
 80012da:	d3d0      	bcc.n	800127e <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80012dc:	461e      	mov	r6, r3
 80012de:	e7ce      	b.n	800127e <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80012e0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80012e4:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80012e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d80f      	bhi.n	8001310 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012f0:	f004 040f 	and.w	r4, r4, #15
 80012f4:	2301      	movs	r3, #1
 80012f6:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012f8:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 80012fc:	ea24 0403 	bic.w	r4, r4, r3
 8001300:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8001304:	2000      	movs	r0, #0
 8001306:	e000      	b.n	800130a <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
}
 800130a:	b003      	add	sp, #12
 800130c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001310:	2000      	movs	r0, #0
 8001312:	e7fa      	b.n	800130a <PCD_WriteEmptyTxFifo+0xc6>

08001314 <HAL_PCD_Init>:
{
 8001314:	b570      	push	{r4, r5, r6, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8001318:	2800      	cmp	r0, #0
 800131a:	f000 8090 	beq.w	800143e <HAL_PCD_Init+0x12a>
 800131e:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8001320:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001322:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001326:	b33b      	cbz	r3, 8001378 <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001328:	2303      	movs	r3, #3
 800132a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800132e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001330:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001334:	d101      	bne.n	800133a <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800133a:	6828      	ldr	r0, [r5, #0]
 800133c:	f001 fc78 	bl	8002c30 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001340:	462c      	mov	r4, r5
 8001342:	f854 6b10 	ldr.w	r6, [r4], #16
 8001346:	46ec      	mov	ip, sp
 8001348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800134e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001358:	e88c 0003 	stmia.w	ip, {r0, r1}
 800135c:	1d2b      	adds	r3, r5, #4
 800135e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001360:	4630      	mov	r0, r6
 8001362:	f001 fba7 	bl	8002ab4 <USB_CoreInit>
 8001366:	4604      	mov	r4, r0
 8001368:	b158      	cbz	r0, 8001382 <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800136a:	2302      	movs	r3, #2
 800136c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001370:	2401      	movs	r4, #1
}
 8001372:	4620      	mov	r0, r4
 8001374:	b00a      	add	sp, #40	; 0x28
 8001376:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001378:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800137c:	f003 f944 	bl	8004608 <HAL_PCD_MspInit>
 8001380:	e7d2      	b.n	8001328 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001382:	2100      	movs	r1, #0
 8001384:	6828      	ldr	r0, [r5, #0]
 8001386:	f002 f8d1 	bl	800352c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138a:	4623      	mov	r3, r4
 800138c:	e016      	b.n	80013bc <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 800138e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001392:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001396:	2101      	movs	r1, #1
 8001398:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800139c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013a0:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013a4:	2100      	movs	r1, #0
 80013a6:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80013aa:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013ac:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ae:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80013b2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80013b6:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	6869      	ldr	r1, [r5, #4]
 80013be:	428b      	cmp	r3, r1
 80013c0:	d3e5      	bcc.n	800138e <HAL_PCD_Init+0x7a>
 80013c2:	e016      	b.n	80013f2 <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 80013c4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80013c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80013d2:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013d6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013e2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80013e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80013ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ee:	3401      	adds	r4, #1
 80013f0:	b2e4      	uxtb	r4, r4
 80013f2:	42a1      	cmp	r1, r4
 80013f4:	d8e6      	bhi.n	80013c4 <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013f6:	462c      	mov	r4, r5
 80013f8:	f854 6b10 	ldr.w	r6, [r4], #16
 80013fc:	46ec      	mov	ip, sp
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001406:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800140a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001412:	1d2b      	adds	r3, r5, #4
 8001414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001416:	4630      	mov	r0, r6
 8001418:	f001 fc46 	bl	8002ca8 <USB_DevInit>
 800141c:	4604      	mov	r4, r0
 800141e:	b120      	cbz	r0, 800142a <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001420:	2302      	movs	r3, #2
 8001422:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001426:	2401      	movs	r4, #1
 8001428:	e7a3      	b.n	8001372 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001430:	2301      	movs	r3, #1
 8001432:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001436:	6828      	ldr	r0, [r5, #0]
 8001438:	f002 f835 	bl	80034a6 <USB_DevDisconnect>
  return HAL_OK;
 800143c:	e799      	b.n	8001372 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 800143e:	2401      	movs	r4, #1
 8001440:	e797      	b.n	8001372 <HAL_PCD_Init+0x5e>

08001442 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001442:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8001444:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001448:	2b01      	cmp	r3, #1
 800144a:	d019      	beq.n	8001480 <HAL_PCD_Start+0x3e>
{
 800144c:	b510      	push	{r4, lr}
 800144e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001450:	2301      	movs	r3, #1
 8001452:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001456:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001458:	2b01      	cmp	r3, #1
 800145a:	d009      	beq.n	8001470 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 800145c:	6820      	ldr	r0, [r4, #0]
 800145e:	f001 fbe1 	bl	8002c24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001462:	6820      	ldr	r0, [r4, #0]
 8001464:	f002 f811 	bl	800348a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001468:	2000      	movs	r0, #0
 800146a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800146e:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001470:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001472:	2b01      	cmp	r3, #1
 8001474:	d0f2      	beq.n	800145c <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001476:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6393      	str	r3, [r2, #56]	; 0x38
 800147e:	e7ed      	b.n	800145c <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8001480:	2002      	movs	r0, #2
}
 8001482:	4770      	bx	lr

08001484 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	4604      	mov	r4, r0
 8001488:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800148a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800148c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800148e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001496:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001498:	6921      	ldr	r1, [r4, #16]
 800149a:	2901      	cmp	r1, #1
 800149c:	d011      	beq.n	80014c2 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800149e:	4934      	ldr	r1, [pc, #208]	; (8001570 <PCD_EP_OutXfrComplete_int+0xec>)
 80014a0:	428e      	cmp	r6, r1
 80014a2:	d04e      	beq.n	8001542 <PCD_EP_OutXfrComplete_int+0xbe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80014a4:	b93d      	cbnz	r5, 80014b6 <PCD_EP_OutXfrComplete_int+0x32>
 80014a6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80014aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80014ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d056      	beq.n	8001564 <PCD_EP_OutXfrComplete_int+0xe0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80014b6:	b2e9      	uxtb	r1, r5
 80014b8:	4620      	mov	r0, r4
 80014ba:	f003 f8ef 	bl	800469c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80014be:	2000      	movs	r0, #0
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80014c2:	f012 0f08 	tst.w	r2, #8
 80014c6:	d009      	beq.n	80014dc <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80014c8:	492a      	ldr	r1, [pc, #168]	; (8001574 <PCD_EP_OutXfrComplete_int+0xf0>)
 80014ca:	428e      	cmp	r6, r1
 80014cc:	d9f7      	bls.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
 80014ce:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80014d2:	d0f4      	beq.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80014d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	e7f0      	b.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80014dc:	f012 0f20 	tst.w	r2, #32
 80014e0:	d002      	beq.n	80014e8 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e2:	2220      	movs	r2, #32
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	e7ea      	b.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80014e8:	f012 0f28 	tst.w	r2, #40	; 0x28
 80014ec:	d1e7      	bne.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80014ee:	4921      	ldr	r1, [pc, #132]	; (8001574 <PCD_EP_OutXfrComplete_int+0xf0>)
 80014f0:	428e      	cmp	r6, r1
 80014f2:	d906      	bls.n	8001502 <PCD_EP_OutXfrComplete_int+0x7e>
 80014f4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80014f8:	d003      	beq.n	8001502 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80014fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e7dd      	b.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 8001502:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001506:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800150a:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001514:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001516:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800151a:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800151e:	440b      	add	r3, r1
 8001520:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001524:	b915      	cbnz	r5, 800152c <PCD_EP_OutXfrComplete_int+0xa8>
 8001526:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800152a:	b123      	cbz	r3, 8001536 <PCD_EP_OutXfrComplete_int+0xb2>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800152c:	b2e9      	uxtb	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f003 f8b4 	bl	800469c <HAL_PCD_DataOutStageCallback>
 8001534:	e7c3      	b.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001536:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800153a:	2101      	movs	r1, #1
 800153c:	f002 f838 	bl	80035b0 <USB_EP0_OutStart>
 8001540:	e7f4      	b.n	800152c <PCD_EP_OutXfrComplete_int+0xa8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001542:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001546:	d003      	beq.n	8001550 <PCD_EP_OutXfrComplete_int+0xcc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001548:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e7b6      	b.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001550:	f012 0f20 	tst.w	r2, #32
 8001554:	d001      	beq.n	800155a <PCD_EP_OutXfrComplete_int+0xd6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001556:	2220      	movs	r2, #32
 8001558:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800155a:	b2e9      	uxtb	r1, r5
 800155c:	4620      	mov	r0, r4
 800155e:	f003 f89d 	bl	800469c <HAL_PCD_DataOutStageCallback>
 8001562:	e7ac      	b.n	80014be <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001564:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001568:	2100      	movs	r1, #0
 800156a:	f002 f821 	bl	80035b0 <USB_EP0_OutStart>
 800156e:	e7a2      	b.n	80014b6 <PCD_EP_OutXfrComplete_int+0x32>
 8001570:	4f54310a 	.word	0x4f54310a
 8001574:	4f54300a 	.word	0x4f54300a

08001578 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001578:	b538      	push	{r3, r4, r5, lr}
 800157a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800157c:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800157e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001580:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001584:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <PCD_EP_OutSetupPacket_int+0x4c>)
 800158a:	4295      	cmp	r5, r2
 800158c:	d907      	bls.n	800159e <PCD_EP_OutSetupPacket_int+0x26>
 800158e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001592:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8001596:	d002      	beq.n	800159e <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001598:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800159c:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800159e:	4620      	mov	r0, r4
 80015a0:	f003 f874 	bl	800468c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <PCD_EP_OutSetupPacket_int+0x4c>)
 80015a6:	429d      	cmp	r5, r3
 80015a8:	d902      	bls.n	80015b0 <PCD_EP_OutSetupPacket_int+0x38>
 80015aa:	6923      	ldr	r3, [r4, #16]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d001      	beq.n	80015b4 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80015b0:	2000      	movs	r0, #0
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015b4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80015b8:	2101      	movs	r1, #1
 80015ba:	6820      	ldr	r0, [r4, #0]
 80015bc:	f001 fff8 	bl	80035b0 <USB_EP0_OutStart>
 80015c0:	e7f6      	b.n	80015b0 <PCD_EP_OutSetupPacket_int+0x38>
 80015c2:	bf00      	nop
 80015c4:	4f54300a 	.word	0x4f54300a

080015c8 <HAL_PCD_IRQHandler>:
{
 80015c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015cc:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ce:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015d0:	4628      	mov	r0, r5
 80015d2:	f001 ffa7 	bl	8003524 <USB_GetMode>
 80015d6:	b108      	cbz	r0, 80015dc <HAL_PCD_IRQHandler+0x14>
}
 80015d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015dc:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	f001 ff6f 	bl	80034c2 <USB_ReadInterrupts>
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d0f7      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015e8:	6820      	ldr	r0, [r4, #0]
 80015ea:	f001 ff6a 	bl	80034c2 <USB_ReadInterrupts>
 80015ee:	f010 0f02 	tst.w	r0, #2
 80015f2:	d004      	beq.n	80015fe <HAL_PCD_IRQHandler+0x36>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015f4:	6822      	ldr	r2, [r4, #0]
 80015f6:	6953      	ldr	r3, [r2, #20]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015fe:	6820      	ldr	r0, [r4, #0]
 8001600:	f001 ff5f 	bl	80034c2 <USB_ReadInterrupts>
 8001604:	f010 0f10 	tst.w	r0, #16
 8001608:	d013      	beq.n	8001632 <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	6993      	ldr	r3, [r2, #24]
 800160e:	f023 0310 	bic.w	r3, r3, #16
 8001612:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001614:	6a2f      	ldr	r7, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001616:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800161a:	f3c7 4343 	ubfx	r3, r7, #17, #4
 800161e:	2b02      	cmp	r3, #2
 8001620:	d068      	beq.n	80016f4 <HAL_PCD_IRQHandler+0x12c>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001622:	2b06      	cmp	r3, #6
 8001624:	f000 8084 	beq.w	8001730 <HAL_PCD_IRQHandler+0x168>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001628:	6822      	ldr	r2, [r4, #0]
 800162a:	6993      	ldr	r3, [r2, #24]
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001632:	6820      	ldr	r0, [r4, #0]
 8001634:	f001 ff45 	bl	80034c2 <USB_ReadInterrupts>
 8001638:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800163c:	f040 808a 	bne.w	8001754 <HAL_PCD_IRQHandler+0x18c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001640:	6820      	ldr	r0, [r4, #0]
 8001642:	f001 ff3e 	bl	80034c2 <USB_ReadInterrupts>
 8001646:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800164a:	f040 80cc 	bne.w	80017e6 <HAL_PCD_IRQHandler+0x21e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800164e:	6820      	ldr	r0, [r4, #0]
 8001650:	f001 ff37 	bl	80034c2 <USB_ReadInterrupts>
 8001654:	2800      	cmp	r0, #0
 8001656:	f2c0 8136 	blt.w	80018c6 <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800165a:	6820      	ldr	r0, [r4, #0]
 800165c:	f001 ff31 	bl	80034c2 <USB_ReadInterrupts>
 8001660:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001664:	d00a      	beq.n	800167c <HAL_PCD_IRQHandler+0xb4>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001666:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800166a:	f013 0f01 	tst.w	r3, #1
 800166e:	f040 8144 	bne.w	80018fa <HAL_PCD_IRQHandler+0x332>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	6953      	ldr	r3, [r2, #20]
 8001676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800167a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800167c:	6820      	ldr	r0, [r4, #0]
 800167e:	f001 ff20 	bl	80034c2 <USB_ReadInterrupts>
 8001682:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001686:	f040 813c 	bne.w	8001902 <HAL_PCD_IRQHandler+0x33a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800168a:	6820      	ldr	r0, [r4, #0]
 800168c:	f001 ff19 	bl	80034c2 <USB_ReadInterrupts>
 8001690:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001694:	f040 8191 	bne.w	80019ba <HAL_PCD_IRQHandler+0x3f2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f001 ff12 	bl	80034c2 <USB_ReadInterrupts>
 800169e:	f010 0f08 	tst.w	r0, #8
 80016a2:	f040 81a2 	bne.w	80019ea <HAL_PCD_IRQHandler+0x422>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016a6:	6820      	ldr	r0, [r4, #0]
 80016a8:	f001 ff0b 	bl	80034c2 <USB_ReadInterrupts>
 80016ac:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80016b0:	f040 81a4 	bne.w	80019fc <HAL_PCD_IRQHandler+0x434>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016b4:	6820      	ldr	r0, [r4, #0]
 80016b6:	f001 ff04 	bl	80034c2 <USB_ReadInterrupts>
 80016ba:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80016be:	f040 81a7 	bne.w	8001a10 <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	f001 fefd 	bl	80034c2 <USB_ReadInterrupts>
 80016c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80016cc:	f040 81aa 	bne.w	8001a24 <HAL_PCD_IRQHandler+0x45c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f001 fef6 	bl	80034c2 <USB_ReadInterrupts>
 80016d6:	f010 0f04 	tst.w	r0, #4
 80016da:	f43f af7d 	beq.w	80015d8 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80016e2:	f015 0f04 	tst.w	r5, #4
 80016e6:	f040 81a6 	bne.w	8001a36 <HAL_PCD_IRQHandler+0x46e>
      hpcd->Instance->GOTGINT |= temp;
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	6853      	ldr	r3, [r2, #4]
 80016ee:	432b      	orrs	r3, r5
 80016f0:	6053      	str	r3, [r2, #4]
 80016f2:	e771      	b.n	80015d8 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016f8:	421f      	tst	r7, r3
 80016fa:	d095      	beq.n	8001628 <HAL_PCD_IRQHandler+0x60>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016fc:	ea4f 1b17 	mov.w	fp, r7, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001700:	ebc8 09c8 	rsb	r9, r8, r8, lsl #3
 8001704:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 8001708:	f3c7 120a 	ubfx	r2, r7, #4, #11
 800170c:	f8d9 1208 	ldr.w	r1, [r9, #520]	; 0x208
 8001710:	4628      	mov	r0, r5
 8001712:	f001 fe25 	bl	8003360 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001716:	f3cb 020a 	ubfx	r2, fp, #0, #11
 800171a:	f8d9 3208 	ldr.w	r3, [r9, #520]	; 0x208
 800171e:	4413      	add	r3, r2
 8001720:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001724:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
 8001728:	441a      	add	r2, r3
 800172a:	f8c9 2214 	str.w	r2, [r9, #532]	; 0x214
 800172e:	e77b      	b.n	8001628 <HAL_PCD_IRQHandler+0x60>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001730:	2208      	movs	r2, #8
 8001732:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001736:	4628      	mov	r0, r5
 8001738:	f001 fe12 	bl	8003360 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800173c:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8001740:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 8001744:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001748:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800174c:	441f      	add	r7, r3
 800174e:	f8c2 7214 	str.w	r7, [r2, #532]	; 0x214
 8001752:	e769      	b.n	8001628 <HAL_PCD_IRQHandler+0x60>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	f001 feb8 	bl	80034ca <USB_ReadDevAllOutEpInterrupt>
 800175a:	4607      	mov	r7, r0
      epnum = 0U;
 800175c:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 800175e:	e016      	b.n	800178e <HAL_PCD_IRQHandler+0x1c6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001760:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8001764:	2201      	movs	r2, #1
 8001766:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800176a:	4641      	mov	r1, r8
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff fe89 	bl	8001484 <PCD_EP_OutXfrComplete_int>
 8001772:	e01b      	b.n	80017ac <HAL_PCD_IRQHandler+0x1e4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001774:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8001778:	2208      	movs	r2, #8
 800177a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800177e:	4641      	mov	r1, r8
 8001780:	4620      	mov	r0, r4
 8001782:	f7ff fef9 	bl	8001578 <PCD_EP_OutSetupPacket_int>
 8001786:	e014      	b.n	80017b2 <HAL_PCD_IRQHandler+0x1ea>
        epnum++;
 8001788:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 800178c:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 800178e:	2f00      	cmp	r7, #0
 8001790:	f43f af56 	beq.w	8001640 <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 8001794:	f017 0f01 	tst.w	r7, #1
 8001798:	d0f6      	beq.n	8001788 <HAL_PCD_IRQHandler+0x1c0>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800179a:	fa5f f188 	uxtb.w	r1, r8
 800179e:	6820      	ldr	r0, [r4, #0]
 80017a0:	f001 fea3 	bl	80034ea <USB_ReadDevOutEPInterrupt>
 80017a4:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017a6:	f010 0f01 	tst.w	r0, #1
 80017aa:	d1d9      	bne.n	8001760 <HAL_PCD_IRQHandler+0x198>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017ac:	f019 0f08 	tst.w	r9, #8
 80017b0:	d1e0      	bne.n	8001774 <HAL_PCD_IRQHandler+0x1ac>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017b2:	f019 0f10 	tst.w	r9, #16
 80017b6:	d004      	beq.n	80017c2 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017b8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80017bc:	2210      	movs	r2, #16
 80017be:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017c2:	f019 0f20 	tst.w	r9, #32
 80017c6:	d004      	beq.n	80017d2 <HAL_PCD_IRQHandler+0x20a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017c8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80017cc:	2220      	movs	r2, #32
 80017ce:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017d2:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80017d6:	d0d7      	beq.n	8001788 <HAL_PCD_IRQHandler+0x1c0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017d8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80017dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 80017e4:	e7d0      	b.n	8001788 <HAL_PCD_IRQHandler+0x1c0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	f001 fe77 	bl	80034da <USB_ReadDevAllInEpInterrupt>
 80017ec:	4607      	mov	r7, r0
      epnum = 0U;
 80017ee:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 80017f0:	e029      	b.n	8001846 <HAL_PCD_IRQHandler+0x27e>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017f2:	4651      	mov	r1, sl
 80017f4:	4620      	mov	r0, r4
 80017f6:	f002 ff5d 	bl	80046b4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017fa:	f019 0f08 	tst.w	r9, #8
 80017fe:	d004      	beq.n	800180a <HAL_PCD_IRQHandler+0x242>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001800:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8001804:	2208      	movs	r2, #8
 8001806:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800180a:	f019 0f10 	tst.w	r9, #16
 800180e:	d004      	beq.n	800181a <HAL_PCD_IRQHandler+0x252>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001810:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8001814:	2210      	movs	r2, #16
 8001816:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800181a:	f019 0f40 	tst.w	r9, #64	; 0x40
 800181e:	d004      	beq.n	800182a <HAL_PCD_IRQHandler+0x262>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001820:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8001824:	2240      	movs	r2, #64	; 0x40
 8001826:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800182a:	f019 0f02 	tst.w	r9, #2
 800182e:	d004      	beq.n	800183a <HAL_PCD_IRQHandler+0x272>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001830:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8001834:	2202      	movs	r2, #2
 8001836:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800183a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800183e:	d13d      	bne.n	80018bc <HAL_PCD_IRQHandler+0x2f4>
        epnum++;
 8001840:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8001844:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 8001846:	2f00      	cmp	r7, #0
 8001848:	f43f af01 	beq.w	800164e <HAL_PCD_IRQHandler+0x86>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800184c:	f017 0f01 	tst.w	r7, #1
 8001850:	d0f6      	beq.n	8001840 <HAL_PCD_IRQHandler+0x278>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001852:	fa5f fa88 	uxtb.w	sl, r8
 8001856:	4651      	mov	r1, sl
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	f001 fe4f 	bl	80034fc <USB_ReadDevInEPInterrupt>
 800185e:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001860:	f010 0f01 	tst.w	r0, #1
 8001864:	d0c9      	beq.n	80017fa <HAL_PCD_IRQHandler+0x232>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001866:	f008 030f 	and.w	r3, r8, #15
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001870:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
 8001874:	ea23 0302 	bic.w	r3, r3, r2
 8001878:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800187c:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8001880:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001884:	6923      	ldr	r3, [r4, #16]
 8001886:	428b      	cmp	r3, r1
 8001888:	d1b3      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x22a>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800188a:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 800188e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001892:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001894:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001896:	440a      	add	r2, r1
 8001898:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800189a:	f1b8 0f00 	cmp.w	r8, #0
 800189e:	d1a8      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x22a>
 80018a0:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
 80018a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80018a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1a1      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x22a>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018ae:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80018b2:	2101      	movs	r1, #1
 80018b4:	6820      	ldr	r0, [r4, #0]
 80018b6:	f001 fe7b 	bl	80035b0 <USB_EP0_OutStart>
 80018ba:	e79a      	b.n	80017f2 <HAL_PCD_IRQHandler+0x22a>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018bc:	4641      	mov	r1, r8
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff fcc0 	bl	8001244 <PCD_WriteEmptyTxFifo>
 80018c4:	e7bc      	b.n	8001840 <HAL_PCD_IRQHandler+0x278>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018c6:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80018d2:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d008      	beq.n	80018ec <HAL_PCD_IRQHandler+0x324>
        HAL_PCD_ResumeCallback(hpcd);
 80018da:	4620      	mov	r0, r4
 80018dc:	f002 ff26 	bl	800472c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018e0:	6822      	ldr	r2, [r4, #0]
 80018e2:	6953      	ldr	r3, [r2, #20]
 80018e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	e6b6      	b.n	800165a <HAL_PCD_IRQHandler+0x92>
        hpcd->LPM_State = LPM_L0;
 80018ec:	2100      	movs	r1, #0
 80018ee:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018f2:	4620      	mov	r0, r4
 80018f4:	f000 fa45 	bl	8001d82 <HAL_PCDEx_LPM_Callback>
 80018f8:	e7f2      	b.n	80018e0 <HAL_PCD_IRQHandler+0x318>
        HAL_PCD_SuspendCallback(hpcd);
 80018fa:	4620      	mov	r0, r4
 80018fc:	f002 fefe 	bl	80046fc <HAL_PCD_SuspendCallback>
 8001900:	e6b7      	b.n	8001672 <HAL_PCD_IRQHandler+0xaa>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001902:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800190e:	2110      	movs	r1, #16
 8001910:	6820      	ldr	r0, [r4, #0]
 8001912:	f001 f993 	bl	8002c3c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001916:	e020      	b.n	800195a <HAL_PCD_IRQHandler+0x392>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001918:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800191c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001920:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001924:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001928:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800192c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001930:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001934:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001938:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800193c:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001940:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001944:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001948:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800194c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001950:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001954:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001958:	3601      	adds	r6, #1
 800195a:	6863      	ldr	r3, [r4, #4]
 800195c:	42b3      	cmp	r3, r6
 800195e:	d8db      	bhi.n	8001918 <HAL_PCD_IRQHandler+0x350>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001966:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800196a:	b1db      	cbz	r3, 80019a4 <HAL_PCD_IRQHandler+0x3dc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800196c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001970:	f043 030b 	orr.w	r3, r3, #11
 8001974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197a:	f043 030b 	orr.w	r3, r3, #11
 800197e:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001980:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001984:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001988:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800198c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001990:	7c21      	ldrb	r1, [r4, #16]
 8001992:	6820      	ldr	r0, [r4, #0]
 8001994:	f001 fe0c 	bl	80035b0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	6953      	ldr	r3, [r2, #20]
 800199c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a0:	6153      	str	r3, [r2, #20]
 80019a2:	e672      	b.n	800168a <HAL_PCD_IRQHandler+0xc2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019ae:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f043 030b 	orr.w	r3, r3, #11
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e7e2      	b.n	8001980 <HAL_PCD_IRQHandler+0x3b8>
      (void)USB_ActivateSetup(hpcd->Instance);
 80019ba:	6820      	ldr	r0, [r4, #0]
 80019bc:	f001 fde7 	bl	800358e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019c0:	6820      	ldr	r0, [r4, #0]
 80019c2:	f001 fa39 	bl	8002e38 <USB_GetDevSpeed>
 80019c6:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c8:	6825      	ldr	r5, [r4, #0]
 80019ca:	f000 fcd9 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80019ce:	4601      	mov	r1, r0
 80019d0:	7b22      	ldrb	r2, [r4, #12]
 80019d2:	4628      	mov	r0, r5
 80019d4:	f001 f8b4 	bl	8002b40 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80019d8:	4620      	mov	r0, r4
 80019da:	f002 fe7c 	bl	80046d6 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	6953      	ldr	r3, [r2, #20]
 80019e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e6:	6153      	str	r3, [r2, #20]
 80019e8:	e656      	b.n	8001698 <HAL_PCD_IRQHandler+0xd0>
      HAL_PCD_SOFCallback(hpcd);
 80019ea:	4620      	mov	r0, r4
 80019ec:	f002 fe6d 	bl	80046ca <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019f0:	6822      	ldr	r2, [r4, #0]
 80019f2:	6953      	ldr	r3, [r2, #20]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	6153      	str	r3, [r2, #20]
 80019fa:	e654      	b.n	80016a6 <HAL_PCD_IRQHandler+0xde>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019fc:	2100      	movs	r1, #0
 80019fe:	4620      	mov	r0, r4
 8001a00:	f002 fea0 	bl	8004744 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	6953      	ldr	r3, [r2, #20]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	e651      	b.n	80016b4 <HAL_PCD_IRQHandler+0xec>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a10:	2100      	movs	r1, #0
 8001a12:	4620      	mov	r0, r4
 8001a14:	f002 fe90 	bl	8004738 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	6953      	ldr	r3, [r2, #20]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	6153      	str	r3, [r2, #20]
 8001a22:	e64e      	b.n	80016c2 <HAL_PCD_IRQHandler+0xfa>
      HAL_PCD_ConnectCallback(hpcd);
 8001a24:	4620      	mov	r0, r4
 8001a26:	f002 fe93 	bl	8004750 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a2a:	6822      	ldr	r2, [r4, #0]
 8001a2c:	6953      	ldr	r3, [r2, #20]
 8001a2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a32:	6153      	str	r3, [r2, #20]
 8001a34:	e64c      	b.n	80016d0 <HAL_PCD_IRQHandler+0x108>
        HAL_PCD_DisconnectCallback(hpcd);
 8001a36:	4620      	mov	r0, r4
 8001a38:	f002 fe90 	bl	800475c <HAL_PCD_DisconnectCallback>
 8001a3c:	e655      	b.n	80016ea <HAL_PCD_IRQHandler+0x122>

08001a3e <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001a3e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d00d      	beq.n	8001a62 <HAL_PCD_SetAddress+0x24>
{
 8001a46:	b510      	push	{r4, lr}
 8001a48:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a50:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a54:	6800      	ldr	r0, [r0, #0]
 8001a56:	f001 fd08 	bl	800346a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001a60:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001a62:	2002      	movs	r0, #2
}
 8001a64:	4770      	bx	lr

08001a66 <HAL_PCD_EP_Open>:
{
 8001a66:	b538      	push	{r3, r4, r5, lr}
 8001a68:	4605      	mov	r5, r0
 8001a6a:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001a6c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a70:	d129      	bne.n	8001ac6 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	f001 0e0f 	and.w	lr, r1, #15
 8001a76:	ebce 04ce 	rsb	r4, lr, lr, lsl #3
 8001a7a:	00a4      	lsls	r4, r4, #2
 8001a7c:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001a80:	4404      	add	r4, r0
 8001a82:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8001a84:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 8001a88:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f88e 01fd 	strb.w	r0, [lr, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a92:	f00c 0c0f 	and.w	ip, ip, #15
 8001a96:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8001a9a:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001a9c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001a9e:	784a      	ldrb	r2, [r1, #1]
 8001aa0:	b10a      	cbz	r2, 8001aa6 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8001aa2:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d01d      	beq.n	8001ae6 <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 8001aaa:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d01c      	beq.n	8001aec <HAL_PCD_EP_Open+0x86>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ab8:	6828      	ldr	r0, [r5, #0]
 8001aba:	f001 f9ce 	bl	8002e5a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8001ac4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac6:	f001 000f 	and.w	r0, r1, #15
 8001aca:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8001ace:	0089      	lsls	r1, r1, #2
 8001ad0:	3138      	adds	r1, #56	; 0x38
 8001ad2:	4429      	add	r1, r5
 8001ad4:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001ad6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001ada:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001ade:	2401      	movs	r4, #1
 8001ae0:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8001ae4:	e7d5      	b.n	8001a92 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	710b      	strb	r3, [r1, #4]
 8001aea:	e7de      	b.n	8001aaa <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8001aec:	2002      	movs	r0, #2
 8001aee:	e7e9      	b.n	8001ac4 <HAL_PCD_EP_Open+0x5e>

08001af0 <HAL_PCD_EP_Close>:
{
 8001af0:	b510      	push	{r4, lr}
 8001af2:	4604      	mov	r4, r0
 8001af4:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001af6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001afa:	d120      	bne.n	8001b3e <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afc:	f001 000f 	and.w	r0, r1, #15
 8001b00:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b0a:	4423      	add	r3, r4
 8001b0c:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8001b0e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001b12:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001b16:	2300      	movs	r3, #0
 8001b18:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b1c:	f002 020f 	and.w	r2, r2, #15
 8001b20:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001b22:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d019      	beq.n	8001b5e <HAL_PCD_EP_Close+0x6e>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b30:	6820      	ldr	r0, [r4, #0]
 8001b32:	f001 f9e1 	bl	8002ef8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001b3c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3e:	f001 000f 	and.w	r0, r1, #15
 8001b42:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	3338      	adds	r3, #56	; 0x38
 8001b4a:	4423      	add	r3, r4
 8001b4c:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8001b4e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001b52:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001b56:	2301      	movs	r3, #1
 8001b58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001b5c:	e7de      	b.n	8001b1c <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	e7ec      	b.n	8001b3c <HAL_PCD_EP_Close+0x4c>

08001b62 <HAL_PCD_EP_Receive>:
{
 8001b62:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b64:	f001 040f 	and.w	r4, r1, #15
 8001b68:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001b6c:	0089      	lsls	r1, r1, #2
 8001b6e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001b72:	4401      	add	r1, r0
 8001b74:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001b76:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8001b7a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001b7e:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 8001b82:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8001b8c:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001b94:	6903      	ldr	r3, [r0, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d006      	beq.n	8001ba8 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b9a:	b964      	cbnz	r4, 8001bb6 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	6800      	ldr	r0, [r0, #0]
 8001ba0:	f001 fa1a 	bl	8002fd8 <USB_EP0StartXfer>
}
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001ba8:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8001bac:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001bb0:	f8cc 220c 	str.w	r2, [ip, #524]	; 0x20c
 8001bb4:	e7f1      	b.n	8001b9a <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	6800      	ldr	r0, [r0, #0]
 8001bba:	f001 fab5 	bl	8003128 <USB_EPStartXfer>
 8001bbe:	e7f1      	b.n	8001ba4 <HAL_PCD_EP_Receive+0x42>

08001bc0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bc0:	f001 010f 	and.w	r1, r1, #15
 8001bc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8001bcc:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_PCD_EP_Transmit>:
{
 8001bd2:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd4:	f001 040f 	and.w	r4, r1, #15
 8001bd8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8001bdc:	0089      	lsls	r1, r1, #2
 8001bde:	3138      	adds	r1, #56	; 0x38
 8001be0:	4401      	add	r1, r0
 8001be2:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001be4:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8001be8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001bec:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 8001bf0:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c00:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001c04:	6903      	ldr	r3, [r0, #16]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d006      	beq.n	8001c18 <HAL_PCD_EP_Transmit+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c0a:	b964      	cbnz	r4, 8001c26 <HAL_PCD_EP_Transmit+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	6800      	ldr	r0, [r0, #0]
 8001c10:	f001 f9e2 	bl	8002fd8 <USB_EP0StartXfer>
}
 8001c14:	2000      	movs	r0, #0
 8001c16:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001c18:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8001c1c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001c20:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
 8001c24:	e7f1      	b.n	8001c0a <HAL_PCD_EP_Transmit+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	6800      	ldr	r0, [r0, #0]
 8001c2a:	f001 fa7d 	bl	8003128 <USB_EPStartXfer>
 8001c2e:	e7f1      	b.n	8001c14 <HAL_PCD_EP_Transmit+0x42>

08001c30 <HAL_PCD_EP_SetStall>:
{
 8001c30:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c32:	f001 050f 	and.w	r5, r1, #15
 8001c36:	6842      	ldr	r2, [r0, #4]
 8001c38:	4295      	cmp	r5, r2
 8001c3a:	d839      	bhi.n	8001cb0 <HAL_PCD_EP_SetStall+0x80>
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8001c40:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c44:	d11f      	bne.n	8001c86 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8001c46:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001c4a:	0089      	lsls	r1, r1, #2
 8001c4c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001c50:	4401      	add	r1, r0
 8001c52:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001c54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001c58:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8001c62:	2301      	movs	r3, #1
 8001c64:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c66:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8001c68:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d021      	beq.n	8001cb4 <HAL_PCD_EP_SetStall+0x84>
 8001c70:	2301      	movs	r3, #1
 8001c72:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c76:	6820      	ldr	r0, [r4, #0]
 8001c78:	f001 fb9c 	bl	80033b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7c:	b18d      	cbz	r5, 8001ca2 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8001c8a:	0089      	lsls	r1, r1, #2
 8001c8c:	3138      	adds	r1, #56	; 0x38
 8001c8e:	4401      	add	r1, r0
 8001c90:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001c92:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001c96:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001ca0:	e7df      	b.n	8001c62 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ca2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001ca6:	7c21      	ldrb	r1, [r4, #16]
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	f001 fc81 	bl	80035b0 <USB_EP0_OutStart>
 8001cae:	e7e6      	b.n	8001c7e <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	e7e7      	b.n	8001c84 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	e7e5      	b.n	8001c84 <HAL_PCD_EP_SetStall+0x54>

08001cb8 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cb8:	f001 030f 	and.w	r3, r1, #15
 8001cbc:	6842      	ldr	r2, [r0, #4]
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d831      	bhi.n	8001d26 <HAL_PCD_EP_ClrStall+0x6e>
{
 8001cc2:	b510      	push	{r4, lr}
 8001cc4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001cc6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cca:	d11e      	bne.n	8001d0a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001cd0:	0089      	lsls	r1, r1, #2
 8001cd2:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001cd6:	4401      	add	r1, r0
 8001cd8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001cda:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001cde:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001ce8:	2200      	movs	r2, #0
 8001cea:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cec:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001cee:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d019      	beq.n	8001d2a <HAL_PCD_EP_ClrStall+0x72>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	f001 fb86 	bl	800340e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001d08:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001d0e:	0089      	lsls	r1, r1, #2
 8001d10:	3138      	adds	r1, #56	; 0x38
 8001d12:	4401      	add	r1, r0
 8001d14:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001d16:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001d1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8001d24:	e7e0      	b.n	8001ce8 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	e7ec      	b.n	8001d08 <HAL_PCD_EP_ClrStall+0x50>

08001d2e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d2e:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d30:	6804      	ldr	r4, [r0, #0]
 8001d32:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001d34:	b931      	cbnz	r1, 8001d44 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d36:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001d3a:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d48:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e008      	b.n	8001d62 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d50:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001d54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001d58:	6849      	ldr	r1, [r1, #4]
 8001d5a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001d66:	428b      	cmp	r3, r1
 8001d68:	d3f2      	bcc.n	8001d50 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001d6a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001d6e:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 8001d72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001d76:	6048      	str	r0, [r1, #4]
 8001d78:	e7e0      	b.n	8001d3c <HAL_PCDEx_SetTxFiFo+0xe>

08001d7a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001d7a:	6803      	ldr	r3, [r0, #0]
 8001d7c:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001d7e:	2000      	movs	r0, #0
 8001d80:	4770      	bx	lr

08001d82 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001d82:	4770      	bx	lr

08001d84 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d84:	2800      	cmp	r0, #0
 8001d86:	f000 81e0 	beq.w	800214a <HAL_RCC_OscConfig+0x3c6>
{
 8001d8a:	b570      	push	{r4, r5, r6, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d90:	6803      	ldr	r3, [r0, #0]
 8001d92:	f013 0f01 	tst.w	r3, #1
 8001d96:	d03b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d98:	4b9f      	ldr	r3, [pc, #636]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d02c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da4:	4b9c      	ldr	r3, [pc, #624]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d021      	beq.n	8001df4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db0:	6863      	ldr	r3, [r4, #4]
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d04f      	beq.n	8001e58 <HAL_RCC_OscConfig+0xd4>
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d052      	beq.n	8001e64 <HAL_RCC_OscConfig+0xe0>
 8001dbe:	4b96      	ldr	r3, [pc, #600]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd0:	6863      	ldr	r3, [r4, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d050      	beq.n	8001e78 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe ff0b 	bl	8000bf0 <HAL_GetTick>
 8001dda:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ddc:	4b8e      	ldr	r3, [pc, #568]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001de4:	d114      	bne.n	8001e10 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de6:	f7fe ff03 	bl	8000bf0 <HAL_GetTick>
 8001dea:	1b40      	subs	r0, r0, r5
 8001dec:	2864      	cmp	r0, #100	; 0x64
 8001dee:	d9f5      	bls.n	8001ddc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001df0:	2003      	movs	r0, #3
 8001df2:	e1b1      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df4:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dfc:	d0d8      	beq.n	8001db0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfe:	4b86      	ldr	r3, [pc, #536]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e06:	d003      	beq.n	8001e10 <HAL_RCC_OscConfig+0x8c>
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 819f 	beq.w	800214e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	f013 0f02 	tst.w	r3, #2
 8001e16:	d054      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e18:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f013 0f0c 	tst.w	r3, #12
 8001e20:	d03e      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b7d      	ldr	r3, [pc, #500]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d033      	beq.n	8001e96 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e2e:	68e3      	ldr	r3, [r4, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d068      	beq.n	8001f06 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b79      	ldr	r3, [pc, #484]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fed9 	bl	8000bf0 <HAL_GetTick>
 8001e3e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	4b75      	ldr	r3, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f013 0f02 	tst.w	r3, #2
 8001e48:	d154      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7fe fed1 	bl	8000bf0 <HAL_GetTick>
 8001e4e:	1b40      	subs	r0, r0, r5
 8001e50:	2802      	cmp	r0, #2
 8001e52:	d9f5      	bls.n	8001e40 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001e54:	2003      	movs	r0, #3
 8001e56:	e17f      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	4a6f      	ldr	r2, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e7b5      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4c>
 8001e64:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e7ab      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001e78:	f7fe feba 	bl	8000bf0 <HAL_GetTick>
 8001e7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e86:	d0c3      	beq.n	8001e10 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7fe feb2 	bl	8000bf0 <HAL_GetTick>
 8001e8c:	1b40      	subs	r0, r0, r5
 8001e8e:	2864      	cmp	r0, #100	; 0x64
 8001e90:	d9f5      	bls.n	8001e7e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001e92:	2003      	movs	r0, #3
 8001e94:	e160      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e9e:	d1c6      	bne.n	8001e2e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea0:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f013 0f02 	tst.w	r3, #2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x12e>
 8001eaa:	68e3      	ldr	r3, [r4, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	f040 8150 	bne.w	8002152 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4a59      	ldr	r2, [pc, #356]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eba:	6921      	ldr	r1, [r4, #16]
 8001ebc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ec0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	f013 0f08 	tst.w	r3, #8
 8001ec8:	d042      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eca:	6963      	ldr	r3, [r4, #20]
 8001ecc:	b36b      	cbz	r3, 8001f2a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed6:	f7fe fe8b 	bl	8000bf0 <HAL_GetTick>
 8001eda:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee0:	f013 0f02 	tst.w	r3, #2
 8001ee4:	d134      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7fe fe83 	bl	8000bf0 <HAL_GetTick>
 8001eea:	1b40      	subs	r0, r0, r5
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d9f5      	bls.n	8001edc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	e131      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4a48      	ldr	r2, [pc, #288]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001efc:	6921      	ldr	r1, [r4, #16]
 8001efe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e7dd      	b.n	8001ec2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001f06:	4b45      	ldr	r3, [pc, #276]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f0c:	f7fe fe70 	bl	8000bf0 <HAL_GetTick>
 8001f10:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f013 0f02 	tst.w	r3, #2
 8001f1a:	d0d2      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fe68 	bl	8000bf0 <HAL_GetTick>
 8001f20:	1b40      	subs	r0, r0, r5
 8001f22:	2802      	cmp	r0, #2
 8001f24:	d9f5      	bls.n	8001f12 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001f26:	2003      	movs	r0, #3
 8001f28:	e116      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <HAL_RCC_OscConfig+0x298>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fe5d 	bl	8000bf0 <HAL_GetTick>
 8001f36:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b37      	ldr	r3, [pc, #220]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3c:	f013 0f02 	tst.w	r3, #2
 8001f40:	d006      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7fe fe55 	bl	8000bf0 <HAL_GetTick>
 8001f46:	1b40      	subs	r0, r0, r5
 8001f48:	2802      	cmp	r0, #2
 8001f4a:	d9f5      	bls.n	8001f38 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	e103      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	f013 0f04 	tst.w	r3, #4
 8001f56:	d077      	beq.n	8002048 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f58:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f60:	d133      	bne.n	8001fca <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f7a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_RCC_OscConfig+0x29c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f84:	d023      	beq.n	8001fce <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f86:	68a3      	ldr	r3, [r4, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d034      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x272>
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d038      	beq.n	8002002 <HAL_RCC_OscConfig+0x27e>
 8001f90:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001f92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	671a      	str	r2, [r3, #112]	; 0x70
 8001f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f9c:	f022 0204 	bic.w	r2, r2, #4
 8001fa0:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa2:	68a3      	ldr	r3, [r4, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03d      	beq.n	8002024 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fe22 	bl	8000bf0 <HAL_GetTick>
 8001fac:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	f013 0f02 	tst.w	r3, #2
 8001fb6:	d146      	bne.n	8002046 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe fe1a 	bl	8000bf0 <HAL_GetTick>
 8001fbc:	1b80      	subs	r0, r0, r6
 8001fbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fc2:	4298      	cmp	r0, r3
 8001fc4:	d9f3      	bls.n	8001fae <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	e0c6      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2500      	movs	r5, #0
 8001fcc:	e7d6      	b.n	8001f7c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4a14      	ldr	r2, [pc, #80]	; (8002020 <HAL_RCC_OscConfig+0x29c>)
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fe0a 	bl	8000bf0 <HAL_GetTick>
 8001fdc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_RCC_OscConfig+0x29c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fe6:	d1ce      	bne.n	8001f86 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7fe fe02 	bl	8000bf0 <HAL_GetTick>
 8001fec:	1b80      	subs	r0, r0, r6
 8001fee:	2802      	cmp	r0, #2
 8001ff0:	d9f5      	bls.n	8001fde <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	e0b0      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8001ff8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8002000:	e7cf      	b.n	8001fa2 <HAL_RCC_OscConfig+0x21e>
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_OscConfig+0x294>)
 8002004:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002006:	f042 0204 	orr.w	r2, r2, #4
 800200a:	671a      	str	r2, [r3, #112]	; 0x70
 800200c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	671a      	str	r2, [r3, #112]	; 0x70
 8002014:	e7c5      	b.n	8001fa2 <HAL_RCC_OscConfig+0x21e>
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	42470000 	.word	0x42470000
 8002020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7fe fde4 	bl	8000bf0 <HAL_GetTick>
 8002028:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202a:	4b52      	ldr	r3, [pc, #328]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	f013 0f02 	tst.w	r3, #2
 8002032:	d008      	beq.n	8002046 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7fe fddc 	bl	8000bf0 <HAL_GetTick>
 8002038:	1b80      	subs	r0, r0, r6
 800203a:	f241 3388 	movw	r3, #5000	; 0x1388
 800203e:	4298      	cmp	r0, r3
 8002040:	d9f3      	bls.n	800202a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
 8002044:	e088      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002046:	b9ed      	cbnz	r5, 8002084 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002048:	69a3      	ldr	r3, [r4, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8083 	beq.w	8002156 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 8002052:	6892      	ldr	r2, [r2, #8]
 8002054:	f002 020c 	and.w	r2, r2, #12
 8002058:	2a08      	cmp	r2, #8
 800205a:	d051      	beq.n	8002100 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205c:	2b02      	cmp	r3, #2
 800205e:	d017      	beq.n	8002090 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002060:	4b45      	ldr	r3, [pc, #276]	; (8002178 <HAL_RCC_OscConfig+0x3f4>)
 8002062:	2200      	movs	r2, #0
 8002064:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fdc3 	bl	8000bf0 <HAL_GetTick>
 800206a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206c:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002074:	d042      	beq.n	80020fc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fdbb 	bl	8000bf0 <HAL_GetTick>
 800207a:	1b00      	subs	r0, r0, r4
 800207c:	2802      	cmp	r0, #2
 800207e:	d9f5      	bls.n	800206c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002080:	2003      	movs	r0, #3
 8002082:	e069      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002084:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 8002086:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	e7db      	b.n	8002048 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x3f4>)
 8002092:	2200      	movs	r2, #0
 8002094:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002096:	f7fe fdab 	bl	8000bf0 <HAL_GetTick>
 800209a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020a4:	d006      	beq.n	80020b4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fda3 	bl	8000bf0 <HAL_GetTick>
 80020aa:	1b40      	subs	r0, r0, r5
 80020ac:	2802      	cmp	r0, #2
 80020ae:	d9f5      	bls.n	800209c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80020b0:	2003      	movs	r0, #3
 80020b2:	e051      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b4:	69e3      	ldr	r3, [r4, #28]
 80020b6:	6a22      	ldr	r2, [r4, #32]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80020c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020c2:	0852      	lsrs	r2, r2, #1
 80020c4:	3a01      	subs	r2, #1
 80020c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80020ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80020cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80020d0:	4a28      	ldr	r2, [pc, #160]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 80020d2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x3f4>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80020da:	f7fe fd89 	bl	8000bf0 <HAL_GetTick>
 80020de:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fd81 	bl	8000bf0 <HAL_GetTick>
 80020ee:	1b00      	subs	r0, r0, r4
 80020f0:	2802      	cmp	r0, #2
 80020f2:	d9f5      	bls.n	80020e0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e02f      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2000      	movs	r0, #0
 80020fa:	e02d      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
 80020fc:	2000      	movs	r0, #0
 80020fe:	e02b      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	2b01      	cmp	r3, #1
 8002102:	d02b      	beq.n	800215c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x3f0>)
 8002106:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800210c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210e:	4291      	cmp	r1, r2
 8002110:	d126      	bne.n	8002160 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002116:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002118:	428a      	cmp	r2, r1
 800211a:	d123      	bne.n	8002164 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800211c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002122:	401a      	ands	r2, r3
 8002124:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002128:	d11e      	bne.n	8002168 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800212a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800212e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002130:	0852      	lsrs	r2, r2, #1
 8002132:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002134:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800213a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800213e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002140:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002144:	d114      	bne.n	8002170 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002146:	2000      	movs	r0, #0
 8002148:	e006      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800214a:	2001      	movs	r0, #1
}
 800214c:	4770      	bx	lr
        return HAL_ERROR;
 800214e:	2001      	movs	r0, #1
 8002150:	e002      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002156:	2000      	movs	r0, #0
}
 8002158:	b002      	add	sp, #8
 800215a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800215c:	2001      	movs	r0, #1
 800215e:	e7fb      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002160:	2001      	movs	r0, #1
 8002162:	e7f9      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
 8002164:	2001      	movs	r0, #1
 8002166:	e7f7      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
 8002168:	2001      	movs	r0, #1
 800216a:	e7f5      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
 800216c:	2001      	movs	r0, #1
 800216e:	e7f3      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
 8002170:	2001      	movs	r0, #1
 8002172:	e7f1      	b.n	8002158 <HAL_RCC_OscConfig+0x3d4>
 8002174:	40023800 	.word	0x40023800
 8002178:	42470000 	.word	0x42470000

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d03f      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x8e>
 800218a:	2b08      	cmp	r3, #8
 800218c:	d13f      	bne.n	800220e <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800219c:	d012      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80021a6:	481c      	ldr	r0, [pc, #112]	; (8002218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a8:	2300      	movs	r3, #0
 80021aa:	fba1 0100 	umull	r0, r1, r1, r0
 80021ae:	f7fe f87f 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80021ba:	3301      	adds	r3, #1
 80021bc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80021be:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80021c2:	e025      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80021cc:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80021d0:	ebb1 000c 	subs.w	r0, r1, ip
 80021d4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80021d8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80021dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021e0:	0181      	lsls	r1, r0, #6
 80021e2:	1a09      	subs	r1, r1, r0
 80021e4:	eb63 030e 	sbc.w	r3, r3, lr
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ee:	00c9      	lsls	r1, r1, #3
 80021f0:	eb11 0c0c 	adds.w	ip, r1, ip
 80021f4:	f143 0300 	adc.w	r3, r3, #0
 80021f8:	0299      	lsls	r1, r3, #10
 80021fa:	2300      	movs	r3, #0
 80021fc:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002200:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002204:	f7fe f854 	bl	80002b0 <__aeabi_uldivmod>
 8002208:	e7d3      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800220a:	4803      	ldr	r0, [pc, #12]	; (8002218 <HAL_RCC_GetSysClockFreq+0x9c>)
 800220c:	e000      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220e:	4803      	ldr	r0, [pc, #12]	; (800221c <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002210:	bd08      	pop	{r3, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	017d7840 	.word	0x017d7840
 800221c:	00f42400 	.word	0x00f42400

08002220 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002220:	2800      	cmp	r0, #0
 8002222:	f000 809b 	beq.w	800235c <HAL_RCC_ClockConfig+0x13c>
{
 8002226:	b570      	push	{r4, r5, r6, lr}
 8002228:	460d      	mov	r5, r1
 800222a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b4f      	ldr	r3, [pc, #316]	; (800236c <HAL_RCC_ClockConfig+0x14c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	428b      	cmp	r3, r1
 8002236:	d208      	bcs.n	800224a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002238:	b2cb      	uxtb	r3, r1
 800223a:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_RCC_ClockConfig+0x14c>)
 800223c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	6813      	ldr	r3, [r2, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	428b      	cmp	r3, r1
 8002246:	f040 808b 	bne.w	8002360 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	f013 0f02 	tst.w	r3, #2
 8002250:	d017      	beq.n	8002282 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002252:	f013 0f04 	tst.w	r3, #4
 8002256:	d004      	beq.n	8002262 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4a45      	ldr	r2, [pc, #276]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 800225a:	6893      	ldr	r3, [r2, #8]
 800225c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002260:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f013 0f08 	tst.w	r3, #8
 8002268:	d004      	beq.n	8002274 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226a:	4a41      	ldr	r2, [pc, #260]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 800226c:	6893      	ldr	r3, [r2, #8]
 800226e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002272:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002274:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 8002276:	6893      	ldr	r3, [r2, #8]
 8002278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800227c:	68a1      	ldr	r1, [r4, #8]
 800227e:	430b      	orrs	r3, r1
 8002280:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	f013 0f01 	tst.w	r3, #1
 8002288:	d032      	beq.n	80022f0 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	6863      	ldr	r3, [r4, #4]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d021      	beq.n	80022d4 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002290:	1e9a      	subs	r2, r3, #2
 8002292:	2a01      	cmp	r2, #1
 8002294:	d925      	bls.n	80022e2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4a36      	ldr	r2, [pc, #216]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	f012 0f02 	tst.w	r2, #2
 800229e:	d061      	beq.n	8002364 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a0:	4933      	ldr	r1, [pc, #204]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 80022a2:	688a      	ldr	r2, [r1, #8]
 80022a4:	f022 0203 	bic.w	r2, r2, #3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80022ac:	f7fe fca0 	bl	8000bf0 <HAL_GetTick>
 80022b0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	6862      	ldr	r2, [r4, #4]
 80022bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022c0:	d016      	beq.n	80022f0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c2:	f7fe fc95 	bl	8000bf0 <HAL_GetTick>
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80022cc:	4298      	cmp	r0, r3
 80022ce:	d9f0      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80022d0:	2003      	movs	r0, #3
 80022d2:	e042      	b.n	800235a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80022dc:	d1e0      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80022de:	2001      	movs	r0, #1
 80022e0:	e03b      	b.n	800235a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80022ea:	d1d9      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
 80022ee:	e034      	b.n	800235a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_ClockConfig+0x14c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	42ab      	cmp	r3, r5
 80022fa:	d907      	bls.n	800230c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fc:	b2ea      	uxtb	r2, r5
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_ClockConfig+0x14c>)
 8002300:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	42ab      	cmp	r3, r5
 800230a:	d12d      	bne.n	8002368 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	f013 0f04 	tst.w	r3, #4
 8002312:	d006      	beq.n	8002322 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 8002316:	6893      	ldr	r3, [r2, #8]
 8002318:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800231c:	68e1      	ldr	r1, [r4, #12]
 800231e:	430b      	orrs	r3, r1
 8002320:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	f013 0f08 	tst.w	r3, #8
 8002328:	d007      	beq.n	800233a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 800232c:	6893      	ldr	r3, [r2, #8]
 800232e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002332:	6921      	ldr	r1, [r4, #16]
 8002334:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002338:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233a:	f7ff ff1f 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_ClockConfig+0x150>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x154>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	40d8      	lsrs	r0, r3
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x158>)
 800234e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x15c>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f7fe fc00 	bl	8000b58 <HAL_InitTick>
  return HAL_OK;
 8002358:	2000      	movs	r0, #0
}
 800235a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800235c:	2001      	movs	r0, #1
}
 800235e:	4770      	bx	lr
      return HAL_ERROR;
 8002360:	2001      	movs	r0, #1
 8002362:	e7fa      	b.n	800235a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
 8002366:	e7f8      	b.n	800235a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
 800236a:	e7f6      	b.n	800235a <HAL_RCC_ClockConfig+0x13a>
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40023800 	.word	0x40023800
 8002374:	0800bd24 	.word	0x0800bd24
 8002378:	20000000 	.word	0x20000000
 800237c:	20000008 	.word	0x20000008

08002380 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <HAL_RCC_GetHCLKFreq+0x8>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800238c:	2800      	cmp	r0, #0
 800238e:	d05a      	beq.n	8002446 <HAL_SPI_Init+0xba>
{
 8002390:	b510      	push	{r4, lr}
 8002392:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002396:	b933      	cbnz	r3, 80023a6 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002398:	6843      	ldr	r3, [r0, #4]
 800239a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800239e:	d005      	beq.n	80023ac <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61c3      	str	r3, [r0, #28]
 80023a4:	e002      	b.n	80023ac <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023aa:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023b0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d040      	beq.n	800243a <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b8:	2302      	movs	r3, #2
 80023ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c6:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80023ce:	68a2      	ldr	r2, [r4, #8]
 80023d0:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80023d4:	4313      	orrs	r3, r2
 80023d6:	68e2      	ldr	r2, [r4, #12]
 80023d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023dc:	4313      	orrs	r3, r2
 80023de:	6922      	ldr	r2, [r4, #16]
 80023e0:	f002 0202 	and.w	r2, r2, #2
 80023e4:	4313      	orrs	r3, r2
 80023e6:	6962      	ldr	r2, [r4, #20]
 80023e8:	f002 0201 	and.w	r2, r2, #1
 80023ec:	4313      	orrs	r3, r2
 80023ee:	69a2      	ldr	r2, [r4, #24]
 80023f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80023f4:	4313      	orrs	r3, r2
 80023f6:	69e2      	ldr	r2, [r4, #28]
 80023f8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80023fc:	4313      	orrs	r3, r2
 80023fe:	6a22      	ldr	r2, [r4, #32]
 8002400:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002404:	4313      	orrs	r3, r2
 8002406:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002408:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800240c:	6821      	ldr	r1, [r4, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002412:	8b63      	ldrh	r3, [r4, #26]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800241a:	f002 0210 	and.w	r2, r2, #16
 800241e:	6821      	ldr	r1, [r4, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	69d3      	ldr	r3, [r2, #28]
 8002428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800242c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800242e:	2000      	movs	r0, #0
 8002430:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002432:	2301      	movs	r3, #1
 8002434:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002438:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800243a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800243e:	4620      	mov	r0, r4
 8002440:	f7fe fa60 	bl	8000904 <HAL_SPI_MspInit>
 8002444:	e7b8      	b.n	80023b8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
}
 8002448:	4770      	bx	lr
	...

0800244c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800244c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244e:	6a03      	ldr	r3, [r0, #32]
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002458:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800245a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800245c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	680c      	ldr	r4, [r1, #0]
 8002462:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002466:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800246a:	688b      	ldr	r3, [r1, #8]
 800246c:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800246e:	4c0d      	ldr	r4, [pc, #52]	; (80024a4 <TIM_OC1_SetConfig+0x58>)
 8002470:	42a0      	cmp	r0, r4
 8002472:	d009      	beq.n	8002488 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002474:	4c0b      	ldr	r4, [pc, #44]	; (80024a4 <TIM_OC1_SetConfig+0x58>)
 8002476:	42a0      	cmp	r0, r4
 8002478:	d00d      	beq.n	8002496 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247a:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247c:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800247e:	684a      	ldr	r2, [r1, #4]
 8002480:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002482:	6203      	str	r3, [r0, #32]
}
 8002484:	bc70      	pop	{r4, r5, r6}
 8002486:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002488:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800248c:	68ca      	ldr	r2, [r1, #12]
 800248e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	e7ee      	b.n	8002474 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002496:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800249a:	694a      	ldr	r2, [r1, #20]
 800249c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800249e:	698e      	ldr	r6, [r1, #24]
 80024a0:	4316      	orrs	r6, r2
 80024a2:	e7ea      	b.n	800247a <TIM_OC1_SetConfig+0x2e>
 80024a4:	40010000 	.word	0x40010000

080024a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024a8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024aa:	6a03      	ldr	r3, [r0, #32]
 80024ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024bc:	680c      	ldr	r4, [r1, #0]
 80024be:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024c4:	688c      	ldr	r4, [r1, #8]
 80024c6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024ca:	4c0f      	ldr	r4, [pc, #60]	; (8002508 <TIM_OC3_SetConfig+0x60>)
 80024cc:	42a0      	cmp	r0, r4
 80024ce:	d009      	beq.n	80024e4 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d0:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <TIM_OC3_SetConfig+0x60>)
 80024d2:	42a0      	cmp	r0, r4
 80024d4:	d00e      	beq.n	80024f4 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024da:	684a      	ldr	r2, [r1, #4]
 80024dc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024de:	6203      	str	r3, [r0, #32]
}
 80024e0:	bc30      	pop	{r4, r5}
 80024e2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80024e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024e8:	68cc      	ldr	r4, [r1, #12]
 80024ea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f2:	e7ed      	b.n	80024d0 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024f4:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024f8:	694c      	ldr	r4, [r1, #20]
 80024fa:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024fe:	698c      	ldr	r4, [r1, #24]
 8002500:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8002504:	e7e7      	b.n	80024d6 <TIM_OC3_SetConfig+0x2e>
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000

0800250c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800250c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800250e:	6a03      	ldr	r3, [r0, #32]
 8002510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002514:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800251c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002520:	680d      	ldr	r5, [r1, #0]
 8002522:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800252a:	688d      	ldr	r5, [r1, #8]
 800252c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002530:	4d07      	ldr	r5, [pc, #28]	; (8002550 <TIM_OC4_SetConfig+0x44>)
 8002532:	42a8      	cmp	r0, r5
 8002534:	d006      	beq.n	8002544 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002536:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002538:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800253a:	684a      	ldr	r2, [r1, #4]
 800253c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253e:	6203      	str	r3, [r0, #32]
}
 8002540:	bc30      	pop	{r4, r5}
 8002542:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002544:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002548:	694d      	ldr	r5, [r1, #20]
 800254a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800254e:	e7f2      	b.n	8002536 <TIM_OC4_SetConfig+0x2a>
 8002550:	40010000 	.word	0x40010000

08002554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002554:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002556:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002558:	6a04      	ldr	r4, [r0, #32]
 800255a:	f024 0401 	bic.w	r4, r4, #1
 800255e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002560:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002562:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002566:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800256a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800256e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002570:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002572:	6203      	str	r3, [r0, #32]
}
 8002574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002578:	4770      	bx	lr

0800257a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800257c:	6a04      	ldr	r4, [r0, #32]
 800257e:	f024 0410 	bic.w	r4, r4, #16
 8002582:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002584:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002586:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002588:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800258c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002590:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002594:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002598:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800259a:	6203      	str	r3, [r0, #32]
}
 800259c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025a2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025a8:	430b      	orrs	r3, r1
 80025aa:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ae:	6083      	str	r3, [r0, #8]
}
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIM_PWM_MspInit>:
}
 80025b2:	4770      	bx	lr

080025b4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80025b4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b6:	4a25      	ldr	r2, [pc, #148]	; (800264c <TIM_Base_SetConfig+0x98>)
 80025b8:	4290      	cmp	r0, r2
 80025ba:	d00e      	beq.n	80025da <TIM_Base_SetConfig+0x26>
 80025bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025c0:	d00b      	beq.n	80025da <TIM_Base_SetConfig+0x26>
 80025c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80025c6:	4290      	cmp	r0, r2
 80025c8:	d007      	beq.n	80025da <TIM_Base_SetConfig+0x26>
 80025ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ce:	4290      	cmp	r0, r2
 80025d0:	d003      	beq.n	80025da <TIM_Base_SetConfig+0x26>
 80025d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d6:	4290      	cmp	r0, r2
 80025d8:	d103      	bne.n	80025e2 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025de:	684a      	ldr	r2, [r1, #4]
 80025e0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	4a1a      	ldr	r2, [pc, #104]	; (800264c <TIM_Base_SetConfig+0x98>)
 80025e4:	4290      	cmp	r0, r2
 80025e6:	d01a      	beq.n	800261e <TIM_Base_SetConfig+0x6a>
 80025e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025ec:	d017      	beq.n	800261e <TIM_Base_SetConfig+0x6a>
 80025ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80025f2:	4290      	cmp	r0, r2
 80025f4:	d013      	beq.n	800261e <TIM_Base_SetConfig+0x6a>
 80025f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025fa:	4290      	cmp	r0, r2
 80025fc:	d00f      	beq.n	800261e <TIM_Base_SetConfig+0x6a>
 80025fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002602:	4290      	cmp	r0, r2
 8002604:	d00b      	beq.n	800261e <TIM_Base_SetConfig+0x6a>
 8002606:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800260a:	4290      	cmp	r0, r2
 800260c:	d007      	beq.n	800261e <TIM_Base_SetConfig+0x6a>
 800260e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002612:	4290      	cmp	r0, r2
 8002614:	d003      	beq.n	800261e <TIM_Base_SetConfig+0x6a>
 8002616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800261a:	4290      	cmp	r0, r2
 800261c:	d103      	bne.n	8002626 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800261e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002622:	68ca      	ldr	r2, [r1, #12]
 8002624:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800262a:	694a      	ldr	r2, [r1, #20]
 800262c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800262e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	688b      	ldr	r3, [r1, #8]
 8002632:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002634:	680b      	ldr	r3, [r1, #0]
 8002636:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <TIM_Base_SetConfig+0x98>)
 800263a:	4298      	cmp	r0, r3
 800263c:	d002      	beq.n	8002644 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800263e:	2301      	movs	r3, #1
 8002640:	6143      	str	r3, [r0, #20]
}
 8002642:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002644:	690b      	ldr	r3, [r1, #16]
 8002646:	6303      	str	r3, [r0, #48]	; 0x30
 8002648:	e7f9      	b.n	800263e <TIM_Base_SetConfig+0x8a>
 800264a:	bf00      	nop
 800264c:	40010000 	.word	0x40010000

08002650 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002650:	b340      	cbz	r0, 80026a4 <HAL_TIM_Base_Init+0x54>
{
 8002652:	b510      	push	{r4, lr}
 8002654:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800265a:	b1f3      	cbz	r3, 800269a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	2302      	movs	r3, #2
 800265e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002662:	4621      	mov	r1, r4
 8002664:	f851 0b04 	ldr.w	r0, [r1], #4
 8002668:	f7ff ffa4 	bl	80025b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266c:	2301      	movs	r3, #1
 800266e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002672:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002676:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800267a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800267e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800268a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800268e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002692:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002696:	2000      	movs	r0, #0
}
 8002698:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800269a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800269e:	f7fe f987 	bl	80009b0 <HAL_TIM_Base_MspInit>
 80026a2:	e7db      	b.n	800265c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80026a8:	b340      	cbz	r0, 80026fc <HAL_TIM_PWM_Init+0x54>
{
 80026aa:	b510      	push	{r4, lr}
 80026ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80026ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026b2:	b1f3      	cbz	r3, 80026f2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ba:	4621      	mov	r1, r4
 80026bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80026c0:	f7ff ff78 	bl	80025b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80026ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80026d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80026d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80026e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80026ee:	2000      	movs	r0, #0
}
 80026f0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80026f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80026f6:	f7ff ff5c 	bl	80025b2 <HAL_TIM_PWM_MspInit>
 80026fa:	e7db      	b.n	80026b4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80026fc:	2001      	movs	r0, #1
}
 80026fe:	4770      	bx	lr

08002700 <TIM_OC2_SetConfig>:
{
 8002700:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002702:	6a03      	ldr	r3, [r0, #32]
 8002704:	f023 0310 	bic.w	r3, r3, #16
 8002708:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800270a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800270c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800270e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002710:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002714:	680d      	ldr	r5, [r1, #0]
 8002716:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800271a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800271e:	688d      	ldr	r5, [r1, #8]
 8002720:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002724:	4d0e      	ldr	r5, [pc, #56]	; (8002760 <TIM_OC2_SetConfig+0x60>)
 8002726:	42a8      	cmp	r0, r5
 8002728:	d009      	beq.n	800273e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272a:	4d0d      	ldr	r5, [pc, #52]	; (8002760 <TIM_OC2_SetConfig+0x60>)
 800272c:	42a8      	cmp	r0, r5
 800272e:	d00e      	beq.n	800274e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8002730:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002732:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002734:	684a      	ldr	r2, [r1, #4]
 8002736:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002738:	6203      	str	r3, [r0, #32]
}
 800273a:	bc30      	pop	{r4, r5}
 800273c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800273e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002742:	68cd      	ldr	r5, [r1, #12]
 8002744:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274c:	e7ed      	b.n	800272a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800274e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002752:	694d      	ldr	r5, [r1, #20]
 8002754:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002758:	698d      	ldr	r5, [r1, #24]
 800275a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800275e:	e7e7      	b.n	8002730 <TIM_OC2_SetConfig+0x30>
 8002760:	40010000 	.word	0x40010000

08002764 <HAL_TIM_PWM_ConfigChannel>:
{
 8002764:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002766:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d066      	beq.n	800283c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	2301      	movs	r3, #1
 8002774:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002778:	2a0c      	cmp	r2, #12
 800277a:	d85a      	bhi.n	8002832 <HAL_TIM_PWM_ConfigChannel+0xce>
 800277c:	e8df f002 	tbb	[pc, r2]
 8002780:	59595907 	.word	0x59595907
 8002784:	5959591b 	.word	0x5959591b
 8002788:	59595930 	.word	0x59595930
 800278c:	44          	.byte	0x44
 800278d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800278e:	6800      	ldr	r0, [r0, #0]
 8002790:	f7ff fe5c 	bl	800244c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002794:	6822      	ldr	r2, [r4, #0]
 8002796:	6993      	ldr	r3, [r2, #24]
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	6993      	ldr	r3, [r2, #24]
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027a8:	6822      	ldr	r2, [r4, #0]
 80027aa:	6993      	ldr	r3, [r2, #24]
 80027ac:	6929      	ldr	r1, [r5, #16]
 80027ae:	430b      	orrs	r3, r1
 80027b0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2000      	movs	r0, #0
      break;
 80027b4:	e03e      	b.n	8002834 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b6:	6800      	ldr	r0, [r0, #0]
 80027b8:	f7ff ffa2 	bl	8002700 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027bc:	6822      	ldr	r2, [r4, #0]
 80027be:	6993      	ldr	r3, [r2, #24]
 80027c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027c4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c6:	6822      	ldr	r2, [r4, #0]
 80027c8:	6993      	ldr	r3, [r2, #24]
 80027ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d0:	6822      	ldr	r2, [r4, #0]
 80027d2:	6993      	ldr	r3, [r2, #24]
 80027d4:	6929      	ldr	r1, [r5, #16]
 80027d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027da:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2000      	movs	r0, #0
      break;
 80027de:	e029      	b.n	8002834 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e0:	6800      	ldr	r0, [r0, #0]
 80027e2:	f7ff fe61 	bl	80024a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027e6:	6822      	ldr	r2, [r4, #0]
 80027e8:	69d3      	ldr	r3, [r2, #28]
 80027ea:	f043 0308 	orr.w	r3, r3, #8
 80027ee:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027f0:	6822      	ldr	r2, [r4, #0]
 80027f2:	69d3      	ldr	r3, [r2, #28]
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027fa:	6822      	ldr	r2, [r4, #0]
 80027fc:	69d3      	ldr	r3, [r2, #28]
 80027fe:	6929      	ldr	r1, [r5, #16]
 8002800:	430b      	orrs	r3, r1
 8002802:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002804:	2000      	movs	r0, #0
      break;
 8002806:	e015      	b.n	8002834 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002808:	6800      	ldr	r0, [r0, #0]
 800280a:	f7ff fe7f 	bl	800250c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	69d3      	ldr	r3, [r2, #28]
 8002812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002816:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002818:	6822      	ldr	r2, [r4, #0]
 800281a:	69d3      	ldr	r3, [r2, #28]
 800281c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002820:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	69d3      	ldr	r3, [r2, #28]
 8002826:	6929      	ldr	r1, [r5, #16]
 8002828:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800282c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2000      	movs	r0, #0
      break;
 8002830:	e000      	b.n	8002834 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002832:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002834:	2300      	movs	r3, #0
 8002836:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800283a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800283c:	2002      	movs	r0, #2
 800283e:	e7fc      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0xd6>

08002840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002840:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002842:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002844:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002848:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800284c:	430a      	orrs	r2, r1
 800284e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002852:	6082      	str	r2, [r0, #8]
}
 8002854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800285a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d078      	beq.n	8002954 <HAL_TIM_ConfigClockSource+0xfa>
{
 8002862:	b510      	push	{r4, lr}
 8002864:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002866:	2301      	movs	r3, #1
 8002868:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	2302      	movs	r3, #2
 800286e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002872:	6802      	ldr	r2, [r0, #0]
 8002874:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800287e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	2b60      	cmp	r3, #96	; 0x60
 8002884:	d04c      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0xc6>
 8002886:	d829      	bhi.n	80028dc <HAL_TIM_ConfigClockSource+0x82>
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d054      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0xdc>
 800288c:	d90c      	bls.n	80028a8 <HAL_TIM_ConfigClockSource+0x4e>
 800288e:	2b50      	cmp	r3, #80	; 0x50
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	68ca      	ldr	r2, [r1, #12]
 8002894:	6849      	ldr	r1, [r1, #4]
 8002896:	6800      	ldr	r0, [r0, #0]
 8002898:	f7ff fe5c 	bl	8002554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800289c:	2150      	movs	r1, #80	; 0x50
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	f7ff fe7f 	bl	80025a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2000      	movs	r0, #0
      break;
 80028a6:	e005      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d00d      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0x6e>
 80028ac:	d909      	bls.n	80028c2 <HAL_TIM_ConfigClockSource+0x68>
 80028ae:	2b30      	cmp	r3, #48	; 0x30
 80028b0:	d00a      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80028b2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80028ba:	2300      	movs	r3, #0
 80028bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80028c0:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80028c2:	b10b      	cbz	r3, 80028c8 <HAL_TIM_ConfigClockSource+0x6e>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d105      	bne.n	80028d4 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c8:	4619      	mov	r1, r3
 80028ca:	6820      	ldr	r0, [r4, #0]
 80028cc:	f7ff fe69 	bl	80025a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2000      	movs	r0, #0
      break;
 80028d2:	e7ef      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80028d4:	2001      	movs	r0, #1
 80028d6:	e7ed      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
 80028d8:	2001      	movs	r0, #1
 80028da:	e7eb      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d034      	beq.n	800294c <HAL_TIM_ConfigClockSource+0xf2>
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e6:	d10c      	bne.n	8002902 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80028e8:	68cb      	ldr	r3, [r1, #12]
 80028ea:	684a      	ldr	r2, [r1, #4]
 80028ec:	6889      	ldr	r1, [r1, #8]
 80028ee:	6800      	ldr	r0, [r0, #0]
 80028f0:	f7ff ffa6 	bl	8002840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f4:	6822      	ldr	r2, [r4, #0]
 80028f6:	6893      	ldr	r3, [r2, #8]
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2000      	movs	r0, #0
      break;
 8002900:	e7d8      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002902:	2b70      	cmp	r3, #112	; 0x70
 8002904:	d124      	bne.n	8002950 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002906:	68cb      	ldr	r3, [r1, #12]
 8002908:	684a      	ldr	r2, [r1, #4]
 800290a:	6889      	ldr	r1, [r1, #8]
 800290c:	6800      	ldr	r0, [r0, #0]
 800290e:	f7ff ff97 	bl	8002840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002912:	6822      	ldr	r2, [r4, #0]
 8002914:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002916:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800291a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2000      	movs	r0, #0
      break;
 800291e:	e7c9      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002920:	68ca      	ldr	r2, [r1, #12]
 8002922:	6849      	ldr	r1, [r1, #4]
 8002924:	6800      	ldr	r0, [r0, #0]
 8002926:	f7ff fe28 	bl	800257a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800292a:	2160      	movs	r1, #96	; 0x60
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	f7ff fe38 	bl	80025a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002932:	2000      	movs	r0, #0
      break;
 8002934:	e7be      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	68ca      	ldr	r2, [r1, #12]
 8002938:	6849      	ldr	r1, [r1, #4]
 800293a:	6800      	ldr	r0, [r0, #0]
 800293c:	f7ff fe0a 	bl	8002554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	f7ff fe2d 	bl	80025a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002948:	2000      	movs	r0, #0
      break;
 800294a:	e7b3      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800294c:	2000      	movs	r0, #0
 800294e:	e7b1      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002950:	2001      	movs	r0, #1
 8002952:	e7af      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002954:	2002      	movs	r0, #2
}
 8002956:	4770      	bx	lr

08002958 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002958:	f001 011f 	and.w	r1, r1, #31
 800295c:	2301      	movs	r3, #1
 800295e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002962:	6a03      	ldr	r3, [r0, #32]
 8002964:	ea23 030c 	bic.w	r3, r3, ip
 8002968:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800296a:	6a03      	ldr	r3, [r0, #32]
 800296c:	fa02 f101 	lsl.w	r1, r2, r1
 8002970:	430b      	orrs	r3, r1
 8002972:	6203      	str	r3, [r0, #32]
}
 8002974:	4770      	bx	lr
	...

08002978 <HAL_TIM_PWM_Start>:
{
 8002978:	b510      	push	{r4, lr}
 800297a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800297c:	4608      	mov	r0, r1
 800297e:	2900      	cmp	r1, #0
 8002980:	d132      	bne.n	80029e8 <HAL_TIM_PWM_Start+0x70>
 8002982:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	bf18      	it	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d163      	bne.n	8002a5a <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002992:	2800      	cmp	r0, #0
 8002994:	d141      	bne.n	8002a1a <HAL_TIM_PWM_Start+0xa2>
 8002996:	2302      	movs	r3, #2
 8002998:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800299c:	2201      	movs	r2, #1
 800299e:	4601      	mov	r1, r0
 80029a0:	6820      	ldr	r0, [r4, #0]
 80029a2:	f7ff ffd9 	bl	8002958 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	4a2e      	ldr	r2, [pc, #184]	; (8002a64 <HAL_TIM_PWM_Start+0xec>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d045      	beq.n	8002a3a <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <HAL_TIM_PWM_Start+0xec>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d046      	beq.n	8002a44 <HAL_TIM_PWM_Start+0xcc>
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d043      	beq.n	8002a44 <HAL_TIM_PWM_Start+0xcc>
 80029bc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d03f      	beq.n	8002a44 <HAL_TIM_PWM_Start+0xcc>
 80029c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d03b      	beq.n	8002a44 <HAL_TIM_PWM_Start+0xcc>
 80029cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d037      	beq.n	8002a44 <HAL_TIM_PWM_Start+0xcc>
 80029d4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80029d8:	4293      	cmp	r3, r2
 80029da:	d033      	beq.n	8002a44 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80029e4:	2000      	movs	r0, #0
 80029e6:	e037      	b.n	8002a58 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029e8:	2904      	cmp	r1, #4
 80029ea:	d008      	beq.n	80029fe <HAL_TIM_PWM_Start+0x86>
 80029ec:	2908      	cmp	r1, #8
 80029ee:	d00d      	beq.n	8002a0c <HAL_TIM_PWM_Start+0x94>
 80029f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	bf18      	it	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	e7c7      	b.n	800298e <HAL_TIM_PWM_Start+0x16>
 80029fe:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	bf18      	it	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	e7c0      	b.n	800298e <HAL_TIM_PWM_Start+0x16>
 8002a0c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	bf18      	it	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	e7b9      	b.n	800298e <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1a:	2804      	cmp	r0, #4
 8002a1c:	d005      	beq.n	8002a2a <HAL_TIM_PWM_Start+0xb2>
 8002a1e:	2808      	cmp	r0, #8
 8002a20:	d007      	beq.n	8002a32 <HAL_TIM_PWM_Start+0xba>
 8002a22:	2302      	movs	r3, #2
 8002a24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002a28:	e7b8      	b.n	800299c <HAL_TIM_PWM_Start+0x24>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a30:	e7b4      	b.n	800299c <HAL_TIM_PWM_Start+0x24>
 8002a32:	2302      	movs	r3, #2
 8002a34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a38:	e7b0      	b.n	800299c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
 8002a42:	e7b4      	b.n	80029ae <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	2a06      	cmp	r2, #6
 8002a4c:	d007      	beq.n	8002a5e <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a56:	2000      	movs	r0, #0
}
 8002a58:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	e7fc      	b.n	8002a58 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e7fa      	b.n	8002a58 <HAL_TIM_PWM_Start+0xe0>
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000

08002a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002a68:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002a6e:	9b01      	ldr	r3, [sp, #4]
 8002a70:	3301      	adds	r3, #1
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <USB_CoreReset+0x48>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d814      	bhi.n	8002aa4 <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a7a:	6903      	ldr	r3, [r0, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	daf6      	bge.n	8002a6e <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002a84:	6903      	ldr	r3, [r0, #16]
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002a8c:	9b01      	ldr	r3, [sp, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <USB_CoreReset+0x48>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d808      	bhi.n	8002aaa <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002a98:	6903      	ldr	r3, [r0, #16]
 8002a9a:	f013 0f01 	tst.w	r3, #1
 8002a9e:	d1f5      	bne.n	8002a8c <USB_CoreReset+0x24>

  return HAL_OK;
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e000      	b.n	8002aa6 <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8002aa4:	2003      	movs	r0, #3
}
 8002aa6:	b002      	add	sp, #8
 8002aa8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002aaa:	2003      	movs	r0, #3
 8002aac:	e7fb      	b.n	8002aa6 <USB_CoreReset+0x3e>
 8002aae:	bf00      	nop
 8002ab0:	00030d40 	.word	0x00030d40

08002ab4 <USB_CoreInit>:
{
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	b510      	push	{r4, lr}
 8002ab8:	4604      	mov	r4, r0
 8002aba:	a803      	add	r0, sp, #12
 8002abc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ac0:	9b08      	ldr	r3, [sp, #32]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d11f      	bne.n	8002b06 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002acc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ace:	68e3      	ldr	r3, [r4, #12]
 8002ad0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ada:	68e3      	ldr	r3, [r4, #12]
 8002adc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002ae0:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d009      	beq.n	8002afc <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff ffbd 	bl	8002a68 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002aee:	9b06      	ldr	r3, [sp, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d01b      	beq.n	8002b2c <USB_CoreInit+0x78>
}
 8002af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af8:	b004      	add	sp, #16
 8002afa:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002afc:	68e3      	ldr	r3, [r4, #12]
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b02:	60e3      	str	r3, [r4, #12]
 8002b04:	e7f0      	b.n	8002ae8 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b06:	68e3      	ldr	r3, [r4, #12]
 8002b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff ffaa 	bl	8002a68 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b16:	b923      	cbnz	r3, 8002b22 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002b20:	e7e5      	b.n	8002aee <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b28:	63a3      	str	r3, [r4, #56]	; 0x38
 8002b2a:	e7e0      	b.n	8002aee <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b2c:	68a3      	ldr	r3, [r4, #8]
 8002b2e:	f043 0306 	orr.w	r3, r3, #6
 8002b32:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b34:	68a3      	ldr	r3, [r4, #8]
 8002b36:	f043 0320 	orr.w	r3, r3, #32
 8002b3a:	60a3      	str	r3, [r4, #8]
 8002b3c:	e7da      	b.n	8002af4 <USB_CoreInit+0x40>
	...

08002b40 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002b40:	2a02      	cmp	r2, #2
 8002b42:	d00a      	beq.n	8002b5a <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b44:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b46:	68c2      	ldr	r2, [r0, #12]
 8002b48:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002b4c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b4e:	68c3      	ldr	r3, [r0, #12]
 8002b50:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002b54:	60c3      	str	r3, [r0, #12]
}
 8002b56:	2000      	movs	r0, #0
 8002b58:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <USB_SetTurnaroundTime+0xa8>)
 8002b5c:	440b      	add	r3, r1
 8002b5e:	4a23      	ldr	r2, [pc, #140]	; (8002bec <USB_SetTurnaroundTime+0xac>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d92f      	bls.n	8002bc4 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <USB_SetTurnaroundTime+0xb0>)
 8002b66:	440b      	add	r3, r1
 8002b68:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <USB_SetTurnaroundTime+0xb4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d92c      	bls.n	8002bc8 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002b6e:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8002b72:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <USB_SetTurnaroundTime+0xb8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d927      	bls.n	8002bcc <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b7c:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8002b80:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <USB_SetTurnaroundTime+0xbc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d322      	bcc.n	8002bd0 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <USB_SetTurnaroundTime+0xc0>)
 8002b8c:	440b      	add	r3, r1
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <USB_SetTurnaroundTime+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d91f      	bls.n	8002bd4 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <USB_SetTurnaroundTime+0xc8>)
 8002b96:	440b      	add	r3, r1
 8002b98:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <USB_SetTurnaroundTime+0xcc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d31c      	bcc.n	8002bd8 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <USB_SetTurnaroundTime+0xd0>)
 8002ba0:	440b      	add	r3, r1
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <USB_SetTurnaroundTime+0xd4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d319      	bcc.n	8002bdc <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ba8:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8002bac:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <USB_SetTurnaroundTime+0xd8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d314      	bcc.n	8002be0 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <USB_SetTurnaroundTime+0xdc>)
 8002bb8:	440b      	add	r3, r1
 8002bba:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <USB_SetTurnaroundTime+0xe0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d211      	bcs.n	8002be4 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8002bc0:	2107      	movs	r1, #7
 8002bc2:	e7c0      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8002bc4:	210f      	movs	r1, #15
 8002bc6:	e7be      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002bc8:	210e      	movs	r1, #14
 8002bca:	e7bc      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002bcc:	210d      	movs	r1, #13
 8002bce:	e7ba      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002bd0:	210c      	movs	r1, #12
 8002bd2:	e7b8      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8002bd4:	210b      	movs	r1, #11
 8002bd6:	e7b6      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002bd8:	210a      	movs	r1, #10
 8002bda:	e7b4      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002bdc:	2109      	movs	r1, #9
 8002bde:	e7b2      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002be0:	2108      	movs	r1, #8
 8002be2:	e7b0      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8002be4:	2106      	movs	r1, #6
 8002be6:	e7ae      	b.n	8002b46 <USB_SetTurnaroundTime+0x6>
 8002be8:	ff275340 	.word	0xff275340
 8002bec:	000c34ff 	.word	0x000c34ff
 8002bf0:	ff1b1e40 	.word	0xff1b1e40
 8002bf4:	000f423f 	.word	0x000f423f
 8002bf8:	00124f7f 	.word	0x00124f7f
 8002bfc:	0013d620 	.word	0x0013d620
 8002c00:	fee5b660 	.word	0xfee5b660
 8002c04:	0016e35f 	.word	0x0016e35f
 8002c08:	feced300 	.word	0xfeced300
 8002c0c:	001b7740 	.word	0x001b7740
 8002c10:	feb35bc0 	.word	0xfeb35bc0
 8002c14:	002191c0 	.word	0x002191c0
 8002c18:	00387520 	.word	0x00387520
 8002c1c:	fe5954e0 	.word	0xfe5954e0
 8002c20:	00419ce0 	.word	0x00419ce0

08002c24 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002c24:	6883      	ldr	r3, [r0, #8]
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6083      	str	r3, [r0, #8]
}
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	4770      	bx	lr

08002c30 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c30:	6883      	ldr	r3, [r0, #8]
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6083      	str	r3, [r0, #8]
}
 8002c38:	2000      	movs	r0, #0
 8002c3a:	4770      	bx	lr

08002c3c <USB_FlushTxFifo>:
{
 8002c3c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c42:	0189      	lsls	r1, r1, #6
 8002c44:	f041 0120 	orr.w	r1, r1, #32
 8002c48:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002c4a:	9b01      	ldr	r3, [sp, #4]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <USB_FlushTxFifo+0x2c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d805      	bhi.n	8002c62 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002c56:	6903      	ldr	r3, [r0, #16]
 8002c58:	f013 0f20 	tst.w	r3, #32
 8002c5c:	d1f5      	bne.n	8002c4a <USB_FlushTxFifo+0xe>
  return HAL_OK;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	e000      	b.n	8002c64 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8002c62:	2003      	movs	r0, #3
}
 8002c64:	b002      	add	sp, #8
 8002c66:	4770      	bx	lr
 8002c68:	00030d40 	.word	0x00030d40

08002c6c <USB_FlushRxFifo>:
{
 8002c6c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c72:	2310      	movs	r3, #16
 8002c74:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002c76:	9b01      	ldr	r3, [sp, #4]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <USB_FlushRxFifo+0x28>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d805      	bhi.n	8002c8e <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002c82:	6903      	ldr	r3, [r0, #16]
 8002c84:	f013 0f10 	tst.w	r3, #16
 8002c88:	d1f5      	bne.n	8002c76 <USB_FlushRxFifo+0xa>
  return HAL_OK;
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	e000      	b.n	8002c90 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 8002c8e:	2003      	movs	r0, #3
}
 8002c90:	b002      	add	sp, #8
 8002c92:	4770      	bx	lr
 8002c94:	00030d40 	.word	0x00030d40

08002c98 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002c98:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002c9c:	4319      	orrs	r1, r3
 8002c9e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	4770      	bx	lr
	...

08002ca8 <USB_DevInit>:
{
 8002ca8:	b084      	sub	sp, #16
 8002caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cae:	4604      	mov	r4, r0
 8002cb0:	a807      	add	r0, sp, #28
 8002cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e006      	b.n	8002cc8 <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 8002cba:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002cbe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	2b0e      	cmp	r3, #14
 8002cca:	d9f6      	bls.n	8002cba <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 8002ccc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8002cce:	bb27      	cbnz	r7, 8002d1a <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cd0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ce2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ce4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ce6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002cea:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002cfa:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 8002cfe:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002d02:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d114      	bne.n	8002d36 <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8002d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d0e:	b96b      	cbnz	r3, 8002d2c <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d10:	2100      	movs	r1, #0
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7ff ffc0 	bl	8002c98 <USB_SetDevSpeed>
 8002d18:	e011      	b.n	8002d3e <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d20:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d28:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d2a:	e7e3      	b.n	8002cf4 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff ffb2 	bl	8002c98 <USB_SetDevSpeed>
 8002d34:	e003      	b.n	8002d3e <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d36:	2103      	movs	r1, #3
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff ffad 	bl	8002c98 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d3e:	2110      	movs	r1, #16
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff ff7b 	bl	8002c3c <USB_FlushTxFifo>
 8002d46:	4680      	mov	r8, r0
 8002d48:	b108      	cbz	r0, 8002d4e <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8002d4a:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7ff ff8c 	bl	8002c6c <USB_FlushRxFifo>
 8002d54:	b108      	cbz	r0, 8002d5a <USB_DevInit+0xb2>
    ret = HAL_ERROR;
 8002d56:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d5e:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d60:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d62:	e00a      	b.n	8002d7a <USB_DevInit+0xd2>
      if (i == 0U)
 8002d64:	b9c3      	cbnz	r3, 8002d98 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d66:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002d6a:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d6e:	2200      	movs	r2, #0
 8002d70:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d72:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002d76:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d78:	3301      	adds	r3, #1
 8002d7a:	9907      	ldr	r1, [sp, #28]
 8002d7c:	4299      	cmp	r1, r3
 8002d7e:	d910      	bls.n	8002da2 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d80:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002d84:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8002d88:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	dbe9      	blt.n	8002d64 <USB_DevInit+0xbc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d90:	2000      	movs	r0, #0
 8002d92:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002d96:	e7ea      	b.n	8002d6e <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d9c:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002da0:	e7e5      	b.n	8002d6e <USB_DevInit+0xc6>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	e00a      	b.n	8002dbc <USB_DevInit+0x114>
      if (i == 0U)
 8002da6:	b1c3      	cbz	r3, 8002dda <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002da8:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 8002dac:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002db0:	2200      	movs	r2, #0
 8002db2:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002db4:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002db8:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4299      	cmp	r1, r3
 8002dbe:	d911      	bls.n	8002de4 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dc0:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002dc4:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8002dc8:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 8002dcc:	2e00      	cmp	r6, #0
 8002dce:	dbea      	blt.n	8002da6 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002dd0:	f04f 0c00 	mov.w	ip, #0
 8002dd4:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 8002dd8:	e7ea      	b.n	8002db0 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dda:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8002dde:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 8002de2:	e7e5      	b.n	8002db0 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002de4:	692b      	ldr	r3, [r5, #16]
 8002de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dea:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002df0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002df4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002df8:	b91b      	cbnz	r3, 8002e02 <USB_DevInit+0x15a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002dfa:	69a3      	ldr	r3, [r4, #24]
 8002dfc:	f043 0310 	orr.w	r3, r3, #16
 8002e00:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e02:	69a2      	ldr	r2, [r4, #24]
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <USB_DevInit+0x18c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e0c:	b11b      	cbz	r3, 8002e16 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e0e:	69a3      	ldr	r3, [r4, #24]
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002e16:	2f01      	cmp	r7, #1
 8002e18:	d004      	beq.n	8002e24 <USB_DevInit+0x17c>
}
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e20:	b004      	add	sp, #16
 8002e22:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e24:	69a3      	ldr	r3, [r4, #24]
 8002e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	61a3      	str	r3, [r4, #24]
 8002e30:	e7f3      	b.n	8002e1a <USB_DevInit+0x172>
 8002e32:	bf00      	nop
 8002e34:	803c3800 	.word	0x803c3800

08002e38 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002e38:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002e3c:	f013 0306 	ands.w	r3, r3, #6
 8002e40:	d007      	beq.n	8002e52 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d007      	beq.n	8002e56 <USB_GetDevSpeed+0x1e>
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d001      	beq.n	8002e4e <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8002e4a:	200f      	movs	r0, #15
}
 8002e4c:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002e4e:	2002      	movs	r0, #2
 8002e50:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8002e52:	2000      	movs	r0, #0
 8002e54:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8002e56:	2002      	movs	r0, #2
 8002e58:	4770      	bx	lr

08002e5a <USB_ActivateEndpoint>:
{
 8002e5a:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002e5c:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8002e60:	784b      	ldrb	r3, [r1, #1]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d023      	beq.n	8002eae <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002e66:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8002e6a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8002e6e:	f00c 040f 	and.w	r4, ip, #15
 8002e72:	2201      	movs	r2, #1
 8002e74:	40a2      	lsls	r2, r4
 8002e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e7a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002e7e:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002e82:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e86:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002e8a:	d10e      	bne.n	8002eaa <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e8c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e90:	688a      	ldr	r2, [r1, #8]
 8002e92:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002e96:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e98:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002eaa:	2000      	movs	r0, #0
 8002eac:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002eae:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002eb2:	f00c 0e0f 	and.w	lr, ip, #15
 8002eb6:	fa03 f30e 	lsl.w	r3, r3, lr
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002ec2:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8002ec6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002eca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ece:	d1ec      	bne.n	8002eaa <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ed0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002ed4:	688a      	ldr	r2, [r1, #8]
 8002ed6:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002eda:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002edc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002ee0:	ea42 5c8c 	orr.w	ip, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ee4:	ea43 030c 	orr.w	r3, r3, ip
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002ef4:	e7d9      	b.n	8002eaa <USB_ActivateEndpoint+0x50>
	...

08002ef8 <USB_DeactivateEndpoint>:
{
 8002ef8:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002efa:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002efc:	784a      	ldrb	r2, [r1, #1]
 8002efe:	2a01      	cmp	r2, #1
 8002f00:	d026      	beq.n	8002f50 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f02:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002f06:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002f0a:	2a00      	cmp	r2, #0
 8002f0c:	db52      	blt.n	8002fb4 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002f0e:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8002f12:	780a      	ldrb	r2, [r1, #0]
 8002f14:	f002 020f 	and.w	r2, r2, #15
 8002f18:	f04f 0c01 	mov.w	ip, #1
 8002f1c:	fa0c f202 	lsl.w	r2, ip, r2
 8002f20:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8002f24:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002f28:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002f2c:	7809      	ldrb	r1, [r1, #0]
 8002f2e:	f001 010f 	and.w	r1, r1, #15
 8002f32:	fa0c fc01 	lsl.w	ip, ip, r1
 8002f36:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8002f3a:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002f3e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8002f42:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <USB_DeactivateEndpoint+0xd8>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	bc30      	pop	{r4, r5}
 8002f4e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f50:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002f54:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	db1e      	blt.n	8002f9a <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002f5c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8002f60:	780a      	ldrb	r2, [r1, #0]
 8002f62:	f002 020f 	and.w	r2, r2, #15
 8002f66:	2401      	movs	r4, #1
 8002f68:	fa04 f202 	lsl.w	r2, r4, r2
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	ea25 0202 	bic.w	r2, r5, r2
 8002f72:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002f76:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002f7a:	7809      	ldrb	r1, [r1, #0]
 8002f7c:	f001 010f 	and.w	r1, r1, #15
 8002f80:	408c      	lsls	r4, r1
 8002f82:	b2a4      	uxth	r4, r4
 8002f84:	ea22 0404 	bic.w	r4, r2, r4
 8002f88:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002f8c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002f90:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <USB_DeactivateEndpoint+0xdc>)
 8002f92:	400a      	ands	r2, r1
 8002f94:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002f98:	e7d7      	b.n	8002f4a <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f9a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002f9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002fa2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002fa6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002faa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fae:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002fb2:	e7d3      	b.n	8002f5c <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fb4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002fb8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002fbc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002fc0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002fc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fc8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002fcc:	e79f      	b.n	8002f0e <USB_DeactivateEndpoint+0x16>
 8002fce:	bf00      	nop
 8002fd0:	eff37800 	.word	0xeff37800
 8002fd4:	ec337800 	.word	0xec337800

08002fd8 <USB_EP0StartXfer>:
{
 8002fd8:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002fda:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002fdc:	784c      	ldrb	r4, [r1, #1]
 8002fde:	2c01      	cmp	r4, #1
 8002fe0:	d027      	beq.n	8003032 <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fe2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002fe6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002fea:	691c      	ldr	r4, [r3, #16]
 8002fec:	0ce4      	lsrs	r4, r4, #19
 8002fee:	04e4      	lsls	r4, r4, #19
 8002ff0:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002ff2:	691c      	ldr	r4, [r3, #16]
 8002ff4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002ff8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002ffc:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8002ffe:	694c      	ldr	r4, [r1, #20]
 8003000:	b10c      	cbz	r4, 8003006 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8003002:	688c      	ldr	r4, [r1, #8]
 8003004:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003006:	691c      	ldr	r4, [r3, #16]
 8003008:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800300c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800300e:	691c      	ldr	r4, [r3, #16]
 8003010:	688d      	ldr	r5, [r1, #8]
 8003012:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 8003016:	ea44 040c 	orr.w	r4, r4, ip
 800301a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800301c:	2a01      	cmp	r2, #1
 800301e:	d066      	beq.n	80030ee <USB_EP0StartXfer+0x116>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003020:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003024:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003028:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800302c:	2000      	movs	r0, #0
 800302e:	bc70      	pop	{r4, r5, r6}
 8003030:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8003032:	694c      	ldr	r4, [r1, #20]
 8003034:	bb6c      	cbnz	r4, 8003092 <USB_EP0StartXfer+0xba>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003036:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800303a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800303e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003042:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003046:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800304a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800304e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003052:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003056:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800305a:	0ced      	lsrs	r5, r5, #19
 800305c:	04ed      	lsls	r5, r5, #19
 800305e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003062:	2a01      	cmp	r2, #1
 8003064:	d034      	beq.n	80030d0 <USB_EP0StartXfer+0xf8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003066:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800306a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800306e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003072:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8003076:	694b      	ldr	r3, [r1, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0d7      	beq.n	800302c <USB_EP0StartXfer+0x54>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800307c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003080:	780a      	ldrb	r2, [r1, #0]
 8003082:	f002 010f 	and.w	r1, r2, #15
 8003086:	2201      	movs	r2, #1
 8003088:	408a      	lsls	r2, r1
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003090:	e7cc      	b.n	800302c <USB_EP0StartXfer+0x54>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003092:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003096:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800309a:	6925      	ldr	r5, [r4, #16]
 800309c:	0ced      	lsrs	r5, r5, #19
 800309e:	04ed      	lsls	r5, r5, #19
 80030a0:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80030a2:	6925      	ldr	r5, [r4, #16]
 80030a4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80030a8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80030ac:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 80030ae:	688d      	ldr	r5, [r1, #8]
 80030b0:	694e      	ldr	r6, [r1, #20]
 80030b2:	42ae      	cmp	r6, r5
 80030b4:	d900      	bls.n	80030b8 <USB_EP0StartXfer+0xe0>
        ep->xfer_len = ep->maxpacket;
 80030b6:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80030b8:	6925      	ldr	r5, [r4, #16]
 80030ba:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80030be:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80030c0:	6925      	ldr	r5, [r4, #16]
 80030c2:	694e      	ldr	r6, [r1, #20]
 80030c4:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80030c8:	ea45 050c 	orr.w	r5, r5, ip
 80030cc:	6125      	str	r5, [r4, #16]
 80030ce:	e7c8      	b.n	8003062 <USB_EP0StartXfer+0x8a>
      if ((uint32_t)ep->dma_addr != 0U)
 80030d0:	690a      	ldr	r2, [r1, #16]
 80030d2:	b11a      	cbz	r2, 80030dc <USB_EP0StartXfer+0x104>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80030d4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80030d8:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80030dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80030e0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80030e4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80030e8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80030ec:	e79e      	b.n	800302c <USB_EP0StartXfer+0x54>
      if ((uint32_t)ep->xfer_buff != 0U)
 80030ee:	68ca      	ldr	r2, [r1, #12]
 80030f0:	2a00      	cmp	r2, #0
 80030f2:	d095      	beq.n	8003020 <USB_EP0StartXfer+0x48>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80030f4:	615a      	str	r2, [r3, #20]
 80030f6:	e793      	b.n	8003020 <USB_EP0StartXfer+0x48>

080030f8 <USB_WritePacket>:
{
 80030f8:	b510      	push	{r4, lr}
 80030fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80030fe:	b984      	cbnz	r4, 8003122 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003100:	3303      	adds	r3, #3
 8003102:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8003106:	f04f 0c00 	mov.w	ip, #0
 800310a:	e008      	b.n	800311e <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800310c:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8003110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003114:	f851 4b04 	ldr.w	r4, [r1], #4
 8003118:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 800311a:	f10c 0c01 	add.w	ip, ip, #1
 800311e:	45f4      	cmp	ip, lr
 8003120:	d3f4      	bcc.n	800310c <USB_WritePacket+0x14>
}
 8003122:	2000      	movs	r0, #0
 8003124:	bd10      	pop	{r4, pc}
	...

08003128 <USB_EPStartXfer>:
{
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 800312c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800312e:	784c      	ldrb	r4, [r1, #1]
 8003130:	2c01      	cmp	r4, #1
 8003132:	d033      	beq.n	800319c <USB_EPStartXfer+0x74>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003134:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003138:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 800313c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8003140:	0ce4      	lsrs	r4, r4, #19
 8003142:	04e4      	lsls	r4, r4, #19
 8003144:	f8cc 4010 	str.w	r4, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003148:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800314c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003150:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003154:	f8cc 4010 	str.w	r4, [ip, #16]
    if (ep->xfer_len == 0U)
 8003158:	694c      	ldr	r4, [r1, #20]
 800315a:	2c00      	cmp	r4, #0
 800315c:	f040 80ca 	bne.w	80032f4 <USB_EPStartXfer+0x1cc>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003160:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8003164:	688d      	ldr	r5, [r1, #8]
 8003166:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800316a:	432c      	orrs	r4, r5
 800316c:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003170:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8003174:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003178:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800317c:	2a01      	cmp	r2, #1
 800317e:	f000 80d3 	beq.w	8003328 <USB_EPStartXfer+0x200>
    if (ep->type == EP_TYPE_ISOC)
 8003182:	78ca      	ldrb	r2, [r1, #3]
 8003184:	2a01      	cmp	r2, #1
 8003186:	f000 80d6 	beq.w	8003336 <USB_EPStartXfer+0x20e>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800318a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800318e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003192:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003196:	2000      	movs	r0, #0
 8003198:	b003      	add	sp, #12
 800319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 800319c:	694c      	ldr	r4, [r1, #20]
 800319e:	bb84      	cbnz	r4, 8003202 <USB_EPStartXfer+0xda>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80031a0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80031a4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80031a8:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80031ac:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80031b0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80031b4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80031b8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80031bc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80031c0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80031c4:	0ced      	lsrs	r5, r5, #19
 80031c6:	04ed      	lsls	r5, r5, #19
 80031c8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80031cc:	2a01      	cmp	r2, #1
 80031ce:	d04f      	beq.n	8003270 <USB_EPStartXfer+0x148>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80031d0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80031d4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80031d8:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80031dc:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80031e0:	78cc      	ldrb	r4, [r1, #3]
 80031e2:	2c01      	cmp	r4, #1
 80031e4:	d06d      	beq.n	80032c2 <USB_EPStartXfer+0x19a>
        if (ep->xfer_len > 0U)
 80031e6:	694b      	ldr	r3, [r1, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0d4      	beq.n	8003196 <USB_EPStartXfer+0x6e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80031ec:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80031f0:	780a      	ldrb	r2, [r1, #0]
 80031f2:	f002 010f 	and.w	r1, r2, #15
 80031f6:	2201      	movs	r2, #1
 80031f8:	408a      	lsls	r2, r1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003200:	e7c9      	b.n	8003196 <USB_EPStartXfer+0x6e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003202:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003206:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800320a:	0ced      	lsrs	r5, r5, #19
 800320c:	04ed      	lsls	r5, r5, #19
 800320e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003212:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003216:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800321a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800321e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003222:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003226:	688e      	ldr	r6, [r1, #8]
 8003228:	694f      	ldr	r7, [r1, #20]
 800322a:	eb07 0c06 	add.w	ip, r7, r6
 800322e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8003232:	fbbc fcf6 	udiv	ip, ip, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003236:	4e49      	ldr	r6, [pc, #292]	; (800335c <USB_EPStartXfer+0x234>)
 8003238:	ea06 4ccc 	and.w	ip, r6, ip, lsl #19
 800323c:	ea45 050c 	orr.w	r5, r5, ip
 8003240:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003244:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003248:	694e      	ldr	r6, [r1, #20]
 800324a:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800324e:	4335      	orrs	r5, r6
 8003250:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003254:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8003258:	78cd      	ldrb	r5, [r1, #3]
 800325a:	2d01      	cmp	r5, #1
 800325c:	d1b6      	bne.n	80031cc <USB_EPStartXfer+0xa4>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800325e:	6925      	ldr	r5, [r4, #16]
 8003260:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8003264:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003266:	6925      	ldr	r5, [r4, #16]
 8003268:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800326c:	6125      	str	r5, [r4, #16]
 800326e:	e7ad      	b.n	80031cc <USB_EPStartXfer+0xa4>
      if ((uint32_t)ep->dma_addr != 0U)
 8003270:	690a      	ldr	r2, [r1, #16]
 8003272:	b11a      	cbz	r2, 800327c <USB_EPStartXfer+0x154>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003274:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003278:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 800327c:	78ca      	ldrb	r2, [r1, #3]
 800327e:	2a01      	cmp	r2, #1
 8003280:	d008      	beq.n	8003294 <USB_EPStartXfer+0x16c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003282:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003286:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800328a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800328e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003292:	e780      	b.n	8003196 <USB_EPStartXfer+0x6e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003294:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003298:	f412 7f80 	tst.w	r2, #256	; 0x100
 800329c:	d108      	bne.n	80032b0 <USB_EPStartXfer+0x188>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800329e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80032a2:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 80032a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80032aa:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 80032ae:	e7e8      	b.n	8003282 <USB_EPStartXfer+0x15a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80032b0:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80032b4:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 80032b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032bc:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 80032c0:	e7df      	b.n	8003282 <USB_EPStartXfer+0x15a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80032c2:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80032c6:	f414 7f80 	tst.w	r4, #256	; 0x100
 80032ca:	d10c      	bne.n	80032e6 <USB_EPStartXfer+0x1be>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80032cc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80032d0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80032d4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	8a8b      	ldrh	r3, [r1, #20]
 80032dc:	780a      	ldrb	r2, [r1, #0]
 80032de:	68c9      	ldr	r1, [r1, #12]
 80032e0:	f7ff ff0a 	bl	80030f8 <USB_WritePacket>
 80032e4:	e757      	b.n	8003196 <USB_EPStartXfer+0x6e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80032e6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80032ea:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80032ee:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80032f2:	e7f1      	b.n	80032d8 <USB_EPStartXfer+0x1b0>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80032f4:	688d      	ldr	r5, [r1, #8]
 80032f6:	442c      	add	r4, r5
 80032f8:	3c01      	subs	r4, #1
 80032fa:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80032fe:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8003302:	fa1f fe84 	uxth.w	lr, r4
 8003306:	4e15      	ldr	r6, [pc, #84]	; (800335c <USB_EPStartXfer+0x234>)
 8003308:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800330c:	4325      	orrs	r5, r4
 800330e:	f8cc 5010 	str.w	r5, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003312:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8003316:	688c      	ldr	r4, [r1, #8]
 8003318:	fb0e f404 	mul.w	r4, lr, r4
 800331c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003320:	432c      	orrs	r4, r5
 8003322:	f8cc 4010 	str.w	r4, [ip, #16]
 8003326:	e729      	b.n	800317c <USB_EPStartXfer+0x54>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003328:	68ca      	ldr	r2, [r1, #12]
 800332a:	2a00      	cmp	r2, #0
 800332c:	f43f af29 	beq.w	8003182 <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003330:	f8cc 2014 	str.w	r2, [ip, #20]
 8003334:	e725      	b.n	8003182 <USB_EPStartXfer+0x5a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003336:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800333a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800333e:	d106      	bne.n	800334e <USB_EPStartXfer+0x226>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003340:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003344:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003348:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800334c:	e71d      	b.n	800318a <USB_EPStartXfer+0x62>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800334e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003352:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003356:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800335a:	e716      	b.n	800318a <USB_EPStartXfer+0x62>
 800335c:	1ff80000 	.word	0x1ff80000

08003360 <USB_ReadPacket>:
{
 8003360:	b500      	push	{lr}
 8003362:	b083      	sub	sp, #12
 8003364:	4684      	mov	ip, r0
 8003366:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8003368:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800336c:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003370:	2300      	movs	r3, #0
 8003372:	e005      	b.n	8003380 <USB_ReadPacket+0x20>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003374:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 8003378:	6809      	ldr	r1, [r1, #0]
 800337a:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 800337e:	3301      	adds	r3, #1
 8003380:	4573      	cmp	r3, lr
 8003382:	d3f7      	bcc.n	8003374 <USB_ReadPacket+0x14>
  if (remaining_bytes != 0U)
 8003384:	b19a      	cbz	r2, 80033ae <USB_ReadPacket+0x4e>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003386:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800338a:	f8dc 3000 	ldr.w	r3, [ip]
 800338e:	9301      	str	r3, [sp, #4]
    i = 0U;
 8003390:	f04f 0c00 	mov.w	ip, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003394:	fa5f f38c 	uxtb.w	r3, ip
 8003398:	00d9      	lsls	r1, r3, #3
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	40cb      	lsrs	r3, r1
 800339e:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 80033a2:	f10c 0c01 	add.w	ip, ip, #1
      remaining_bytes--;
 80033a6:	3a01      	subs	r2, #1
 80033a8:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 80033aa:	2a00      	cmp	r2, #0
 80033ac:	d1f2      	bne.n	8003394 <USB_ReadPacket+0x34>
}
 80033ae:	b003      	add	sp, #12
 80033b0:	f85d fb04 	ldr.w	pc, [sp], #4

080033b4 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80033b4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80033b6:	784a      	ldrb	r2, [r1, #1]
 80033b8:	2a01      	cmp	r2, #1
 80033ba:	d014      	beq.n	80033e6 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80033bc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80033c0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80033c4:	2a00      	cmp	r2, #0
 80033c6:	db06      	blt.n	80033d6 <USB_EPSetStall+0x22>
 80033c8:	b12b      	cbz	r3, 80033d6 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80033ca:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80033ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033d2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80033d6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80033da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033de:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80033e2:	2000      	movs	r0, #0
 80033e4:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80033e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80033ea:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80033ee:	2a00      	cmp	r2, #0
 80033f0:	db06      	blt.n	8003400 <USB_EPSetStall+0x4c>
 80033f2:	b12b      	cbz	r3, 8003400 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80033f4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80033f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033fc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003400:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003408:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800340c:	e7e9      	b.n	80033e2 <USB_EPSetStall+0x2e>

0800340e <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800340e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003410:	784a      	ldrb	r2, [r1, #1]
 8003412:	2a01      	cmp	r2, #1
 8003414:	d00e      	beq.n	8003434 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003416:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800341a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800341e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003422:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003426:	78cb      	ldrb	r3, [r1, #3]
 8003428:	3b02      	subs	r3, #2
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d915      	bls.n	800345c <USB_EPClearStall+0x4e>
}
 8003430:	2000      	movs	r0, #0
 8003432:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003434:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003438:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800343c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003440:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003444:	78cb      	ldrb	r3, [r1, #3]
 8003446:	3b02      	subs	r3, #2
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d8f0      	bhi.n	8003430 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800344e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800345a:	e7e9      	b.n	8003430 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800345c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003468:	e7e2      	b.n	8003430 <USB_EPClearStall+0x22>

0800346a <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800346a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800346e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003472:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003476:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800347a:	0109      	lsls	r1, r1, #4
 800347c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003480:	4319      	orrs	r1, r3
 8003482:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003486:	2000      	movs	r0, #0
 8003488:	4770      	bx	lr

0800348a <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800348a:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003496:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800349a:	f023 0302 	bic.w	r3, r3, #2
 800349e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80034a2:	2000      	movs	r0, #0
 80034a4:	4770      	bx	lr

080034a6 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80034a6:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034b2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80034be:	2000      	movs	r0, #0
 80034c0:	4770      	bx	lr

080034c2 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80034c2:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80034c4:	6980      	ldr	r0, [r0, #24]
}
 80034c6:	4010      	ands	r0, r2
 80034c8:	4770      	bx	lr

080034ca <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80034ca:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80034ce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80034d2:	69c0      	ldr	r0, [r0, #28]
 80034d4:	4018      	ands	r0, r3
}
 80034d6:	0c00      	lsrs	r0, r0, #16
 80034d8:	4770      	bx	lr

080034da <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80034da:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80034de:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80034e2:	69c0      	ldr	r0, [r0, #28]
 80034e4:	4018      	ands	r0, r3
}
 80034e6:	b280      	uxth	r0, r0
 80034e8:	4770      	bx	lr

080034ea <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80034ea:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80034ee:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80034f2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80034f6:	6940      	ldr	r0, [r0, #20]
}
 80034f8:	4010      	ands	r0, r2
 80034fa:	4770      	bx	lr

080034fc <USB_ReadDevInEPInterrupt>:
{
 80034fc:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80034fe:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003502:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003506:	f001 020f 	and.w	r2, r1, #15
 800350a:	40d3      	lsrs	r3, r2
 800350c:	01db      	lsls	r3, r3, #7
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003512:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003516:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800351a:	6880      	ldr	r0, [r0, #8]
}
 800351c:	4018      	ands	r0, r3
 800351e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003522:	4770      	bx	lr

08003524 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003524:	6940      	ldr	r0, [r0, #20]
}
 8003526:	f000 0001 	and.w	r0, r0, #1
 800352a:	4770      	bx	lr

0800352c <USB_SetCurrentMode>:
{
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003530:	68c3      	ldr	r3, [r0, #12]
 8003532:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003536:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003538:	2901      	cmp	r1, #1
 800353a:	d013      	beq.n	8003564 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800353c:	bb19      	cbnz	r1, 8003586 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800353e:	68c3      	ldr	r3, [r0, #12]
 8003540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003544:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003546:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003548:	2001      	movs	r0, #1
 800354a:	f7fd fb57 	bl	8000bfc <HAL_Delay>
      ms++;
 800354e:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003550:	4628      	mov	r0, r5
 8003552:	f7ff ffe7 	bl	8003524 <USB_GetMode>
 8003556:	b108      	cbz	r0, 800355c <USB_SetCurrentMode+0x30>
 8003558:	2c31      	cmp	r4, #49	; 0x31
 800355a:	d9f5      	bls.n	8003548 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 800355c:	2c32      	cmp	r4, #50	; 0x32
 800355e:	d014      	beq.n	800358a <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003560:	2000      	movs	r0, #0
}
 8003562:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003564:	68c3      	ldr	r3, [r0, #12]
 8003566:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800356a:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800356c:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800356e:	2001      	movs	r0, #1
 8003570:	f7fd fb44 	bl	8000bfc <HAL_Delay>
      ms++;
 8003574:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003576:	4628      	mov	r0, r5
 8003578:	f7ff ffd4 	bl	8003524 <USB_GetMode>
 800357c:	2801      	cmp	r0, #1
 800357e:	d0ed      	beq.n	800355c <USB_SetCurrentMode+0x30>
 8003580:	2c31      	cmp	r4, #49	; 0x31
 8003582:	d9f4      	bls.n	800356e <USB_SetCurrentMode+0x42>
 8003584:	e7ea      	b.n	800355c <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003586:	2001      	movs	r0, #1
 8003588:	e7eb      	b.n	8003562 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 800358a:	2001      	movs	r0, #1
 800358c:	e7e9      	b.n	8003562 <USB_SetCurrentMode+0x36>

0800358e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800358e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003592:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003596:	f023 0307 	bic.w	r3, r3, #7
 800359a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800359e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80035aa:	2000      	movs	r0, #0
 80035ac:	4770      	bx	lr
	...

080035b0 <USB_EP0_OutStart>:
{
 80035b0:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <USB_EP0_OutStart+0x5c>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d903      	bls.n	80035c2 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035ba:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db16      	blt.n	80035f0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80035c2:	2400      	movs	r4, #0
 80035c4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80035c8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80035cc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80035d0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80035d4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80035d8:	f044 0418 	orr.w	r4, r4, #24
 80035dc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80035e0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80035e4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80035e8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 80035ec:	2901      	cmp	r1, #1
 80035ee:	d003      	beq.n	80035f8 <USB_EP0_OutStart+0x48>
}
 80035f0:	2000      	movs	r0, #0
 80035f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80035f8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80035fc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003600:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003604:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003608:	e7f2      	b.n	80035f0 <USB_EP0_OutStart+0x40>
 800360a:	bf00      	nop
 800360c:	4f54300a 	.word	0x4f54300a

08003610 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003610:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003612:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8003616:	b184      	cbz	r4, 800363a <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003618:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800361c:	b17b      	cbz	r3, 800363e <USBD_CDC_EP0_RxReady+0x2e>
 800361e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003622:	28ff      	cmp	r0, #255	; 0xff
 8003624:	d00d      	beq.n	8003642 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800362c:	4621      	mov	r1, r4
 800362e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003630:	23ff      	movs	r3, #255	; 0xff
 8003632:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8003636:	2000      	movs	r0, #0
}
 8003638:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800363a:	2003      	movs	r0, #3
 800363c:	e7fc      	b.n	8003638 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800363e:	2000      	movs	r0, #0
 8003640:	e7fa      	b.n	8003638 <USBD_CDC_EP0_RxReady+0x28>
 8003642:	2000      	movs	r0, #0
 8003644:	e7f8      	b.n	8003638 <USBD_CDC_EP0_RxReady+0x28>
	...

08003648 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8003648:	2343      	movs	r3, #67	; 0x43
 800364a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800364c:	4800      	ldr	r0, [pc, #0]	; (8003650 <USBD_CDC_GetFSCfgDesc+0x8>)
 800364e:	4770      	bx	lr
 8003650:	20000044 	.word	0x20000044

08003654 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8003654:	2343      	movs	r3, #67	; 0x43
 8003656:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8003658:	4800      	ldr	r0, [pc, #0]	; (800365c <USBD_CDC_GetHSCfgDesc+0x8>)
 800365a:	4770      	bx	lr
 800365c:	20000088 	.word	0x20000088

08003660 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003660:	2343      	movs	r3, #67	; 0x43
 8003662:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003664:	4800      	ldr	r0, [pc, #0]	; (8003668 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003666:	4770      	bx	lr
 8003668:	200000d8 	.word	0x200000d8

0800366c <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800366c:	230a      	movs	r3, #10
 800366e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8003670:	4800      	ldr	r0, [pc, #0]	; (8003674 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003672:	4770      	bx	lr
 8003674:	200000cc 	.word	0x200000cc

08003678 <USBD_CDC_DataOut>:
{
 8003678:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800367a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800367e:	b175      	cbz	r5, 800369e <USBD_CDC_DataOut+0x26>
 8003680:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003682:	f001 f8bc 	bl	80047fe <USBD_LL_GetRxDataSize>
 8003686:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800368a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003694:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003698:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800369a:	2000      	movs	r0, #0
}
 800369c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800369e:	2003      	movs	r0, #3
 80036a0:	e7fc      	b.n	800369c <USBD_CDC_DataOut+0x24>

080036a2 <USBD_CDC_DataIn>:
{
 80036a2:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80036a4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 80036a8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80036ac:	b353      	cbz	r3, 8003704 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80036ae:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80036b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80036b6:	6992      	ldr	r2, [r2, #24]
 80036b8:	b14a      	cbz	r2, 80036ce <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80036ba:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 80036be:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80036c2:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80036c4:	fbb2 fcf4 	udiv	ip, r2, r4
 80036c8:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80036cc:	b172      	cbz	r2, 80036ec <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80036d4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80036d8:	6914      	ldr	r4, [r2, #16]
 80036da:	b1ac      	cbz	r4, 8003708 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80036dc:	460a      	mov	r2, r1
 80036de:	f503 7104 	add.w	r1, r3, #528	; 0x210
 80036e2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80036e6:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 80036e8:	2000      	movs	r0, #0
}
 80036ea:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 80036ec:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80036f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80036f4:	2400      	movs	r4, #0
 80036f6:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80036f8:	4623      	mov	r3, r4
 80036fa:	4622      	mov	r2, r4
 80036fc:	f001 f8c8 	bl	8004890 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8003700:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003702:	e7f2      	b.n	80036ea <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 8003704:	2003      	movs	r0, #3
 8003706:	e7f0      	b.n	80036ea <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 8003708:	2000      	movs	r0, #0
 800370a:	e7ee      	b.n	80036ea <USBD_CDC_DataIn+0x48>

0800370c <USBD_CDC_Setup>:
{
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370e:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003710:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800371a:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800371e:	2e00      	cmp	r6, #0
 8003720:	d06c      	beq.n	80037fc <USBD_CDC_Setup+0xf0>
 8003722:	4607      	mov	r7, r0
 8003724:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003726:	780b      	ldrb	r3, [r1, #0]
 8003728:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800372c:	d02a      	beq.n	8003784 <USBD_CDC_Setup+0x78>
 800372e:	2d20      	cmp	r5, #32
 8003730:	d15e      	bne.n	80037f0 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 8003732:	88ca      	ldrh	r2, [r1, #6]
 8003734:	b1f2      	cbz	r2, 8003774 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 8003736:	f013 0f80 	tst.w	r3, #128	; 0x80
 800373a:	d00f      	beq.n	800375c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800373c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4631      	mov	r1, r6
 8003744:	7860      	ldrb	r0, [r4, #1]
 8003746:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8003748:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800374a:	2a07      	cmp	r2, #7
 800374c:	bf28      	it	cs
 800374e:	2207      	movcs	r2, #7
 8003750:	4631      	mov	r1, r6
 8003752:	4638      	mov	r0, r7
 8003754:	f000 fe14 	bl	8004380 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003758:	2500      	movs	r5, #0
 800375a:	e04c      	b.n	80037f6 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800375c:	784b      	ldrb	r3, [r1, #1]
 800375e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003762:	798b      	ldrb	r3, [r1, #6]
 8003764:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8003768:	88ca      	ldrh	r2, [r1, #6]
 800376a:	4631      	mov	r1, r6
 800376c:	f000 fe1d 	bl	80043aa <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8003770:	2500      	movs	r5, #0
 8003772:	e040      	b.n	80037f6 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003774:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	7848      	ldrb	r0, [r1, #1]
 800377e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8003780:	2500      	movs	r5, #0
 8003782:	e038      	b.n	80037f6 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 8003784:	784e      	ldrb	r6, [r1, #1]
 8003786:	2e0b      	cmp	r6, #11
 8003788:	d82e      	bhi.n	80037e8 <USBD_CDC_Setup+0xdc>
 800378a:	e8df f006 	tbb	[pc, r6]
 800378e:	3406      	.short	0x3406
 8003790:	2d2d2d2d 	.word	0x2d2d2d2d
 8003794:	2d2d2d2d 	.word	0x2d2d2d2d
 8003798:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800379a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d003      	beq.n	80037ac <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 80037a4:	f000 fac2 	bl	8003d2c <USBD_CtlError>
            ret = USBD_FAIL;
 80037a8:	2503      	movs	r5, #3
 80037aa:	e024      	b.n	80037f6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80037ac:	2202      	movs	r2, #2
 80037ae:	a901      	add	r1, sp, #4
 80037b0:	f000 fde6 	bl	8004380 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80037b4:	4635      	mov	r5, r6
 80037b6:	e01e      	b.n	80037f6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d003      	beq.n	80037ca <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 80037c2:	f000 fab3 	bl	8003d2c <USBD_CtlError>
            ret = USBD_FAIL;
 80037c6:	2503      	movs	r5, #3
 80037c8:	e015      	b.n	80037f6 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80037ca:	2201      	movs	r2, #1
 80037cc:	f10d 0107 	add.w	r1, sp, #7
 80037d0:	f000 fdd6 	bl	8004380 <USBD_CtlSendData>
 80037d4:	e00f      	b.n	80037f6 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80037d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d00a      	beq.n	80037f6 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 80037e0:	f000 faa4 	bl	8003d2c <USBD_CtlError>
            ret = USBD_FAIL;
 80037e4:	2503      	movs	r5, #3
 80037e6:	e006      	b.n	80037f6 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 80037e8:	f000 faa0 	bl	8003d2c <USBD_CtlError>
          ret = USBD_FAIL;
 80037ec:	2503      	movs	r5, #3
          break;
 80037ee:	e002      	b.n	80037f6 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 80037f0:	f000 fa9c 	bl	8003d2c <USBD_CtlError>
      ret = USBD_FAIL;
 80037f4:	2503      	movs	r5, #3
}
 80037f6:	4628      	mov	r0, r5
 80037f8:	b003      	add	sp, #12
 80037fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80037fc:	2503      	movs	r5, #3
 80037fe:	e7fa      	b.n	80037f6 <USBD_CDC_Setup+0xea>

08003800 <USBD_CDC_DeInit>:
{
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003804:	2181      	movs	r1, #129	; 0x81
 8003806:	f001 f823 	bl	8004850 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800380a:	2500      	movs	r5, #0
 800380c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800380e:	2101      	movs	r1, #1
 8003810:	4620      	mov	r0, r4
 8003812:	f001 f81d 	bl	8004850 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003816:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800381a:	2182      	movs	r1, #130	; 0x82
 800381c:	4620      	mov	r0, r4
 800381e:	f001 f817 	bl	8004850 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003822:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8003826:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800382a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800382e:	b14b      	cbz	r3, 8003844 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003830:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8003838:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800383c:	f000 ffea 	bl	8004814 <USBD_static_free>
    pdev->pClassData = NULL;
 8003840:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8003844:	2000      	movs	r0, #0
 8003846:	bd38      	pop	{r3, r4, r5, pc}

08003848 <USBD_CDC_Init>:
{
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800384c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003850:	f000 ffdc 	bl	800480c <USBD_static_malloc>
  if (hcdc == NULL)
 8003854:	b3b8      	cbz	r0, 80038c6 <USBD_CDC_Init+0x7e>
 8003856:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8003858:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800385c:	7c23      	ldrb	r3, [r4, #16]
 800385e:	bbbb      	cbnz	r3, 80038d0 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003864:	2202      	movs	r2, #2
 8003866:	2181      	movs	r1, #129	; 0x81
 8003868:	4620      	mov	r0, r4
 800386a:	f000 ffe6 	bl	800483a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800386e:	2501      	movs	r5, #1
 8003870:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003876:	2202      	movs	r2, #2
 8003878:	4629      	mov	r1, r5
 800387a:	4620      	mov	r0, r4
 800387c:	f000 ffdd 	bl	800483a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003880:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003884:	2310      	movs	r3, #16
 8003886:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800388a:	2308      	movs	r3, #8
 800388c:	2203      	movs	r2, #3
 800388e:	2182      	movs	r1, #130	; 0x82
 8003890:	4620      	mov	r0, r4
 8003892:	f000 ffd2 	bl	800483a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003896:	2301      	movs	r3, #1
 8003898:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800389c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4798      	blx	r3
  hcdc->TxState = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 80038aa:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80038ae:	7c25      	ldrb	r5, [r4, #16]
 80038b0:	bb15      	cbnz	r5, 80038f8 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80038b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038b6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80038ba:	2101      	movs	r1, #1
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 ffef 	bl	80048a0 <USBD_LL_PrepareReceive>
}
 80038c2:	4628      	mov	r0, r5
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80038cc:	2502      	movs	r5, #2
 80038ce:	e7f8      	b.n	80038c2 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80038d0:	2340      	movs	r3, #64	; 0x40
 80038d2:	2202      	movs	r2, #2
 80038d4:	2181      	movs	r1, #129	; 0x81
 80038d6:	4620      	mov	r0, r4
 80038d8:	f000 ffaf 	bl	800483a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80038dc:	2501      	movs	r5, #1
 80038de:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80038e0:	2340      	movs	r3, #64	; 0x40
 80038e2:	2202      	movs	r2, #2
 80038e4:	4629      	mov	r1, r5
 80038e6:	4620      	mov	r0, r4
 80038e8:	f000 ffa7 	bl	800483a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80038ec:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80038f0:	2310      	movs	r3, #16
 80038f2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80038f6:	e7c8      	b.n	800388a <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80038fe:	2101      	movs	r1, #1
 8003900:	4620      	mov	r0, r4
 8003902:	f000 ffcd 	bl	80048a0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003906:	2500      	movs	r5, #0
 8003908:	e7db      	b.n	80038c2 <USBD_CDC_Init+0x7a>

0800390a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800390a:	b119      	cbz	r1, 8003914 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800390c:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8003910:	2000      	movs	r0, #0
 8003912:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003914:	2003      	movs	r0, #3
}
 8003916:	4770      	bx	lr

08003918 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003918:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800391c:	b12b      	cbz	r3, 800392a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800391e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003922:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8003926:	2000      	movs	r0, #0
 8003928:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800392a:	2003      	movs	r0, #3
}
 800392c:	4770      	bx	lr

0800392e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800392e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 8003932:	b11b      	cbz	r3, 800393c <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8003934:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8003938:	2000      	movs	r0, #0
 800393a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800393c:	2003      	movs	r0, #3
}
 800393e:	4770      	bx	lr

08003940 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003940:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8003944:	b1a2      	cbz	r2, 8003970 <USBD_CDC_TransmitPacket+0x30>
{
 8003946:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8003948:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800394c:	b10b      	cbz	r3, 8003952 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800394e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8003950:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8003952:	2301      	movs	r3, #1
 8003954:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003958:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800395c:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800395e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003962:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003966:	2181      	movs	r1, #129	; 0x81
 8003968:	f000 ff92 	bl	8004890 <USBD_LL_Transmit>
    ret = USBD_OK;
 800396c:	2000      	movs	r0, #0
 800396e:	e7ef      	b.n	8003950 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 8003970:	2003      	movs	r0, #3
}
 8003972:	4770      	bx	lr

08003974 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003974:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003976:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800397a:	b192      	cbz	r2, 80039a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800397c:	7c04      	ldrb	r4, [r0, #16]
 800397e:	b944      	cbnz	r4, 8003992 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003984:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003988:	2101      	movs	r1, #1
 800398a:	f000 ff89 	bl	80048a0 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800398e:	4620      	mov	r0, r4
 8003990:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003992:	2340      	movs	r3, #64	; 0x40
 8003994:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003998:	2101      	movs	r1, #1
 800399a:	f000 ff81 	bl	80048a0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800399e:	2400      	movs	r4, #0
 80039a0:	e7f5      	b.n	800398e <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 80039a2:	2403      	movs	r4, #3
 80039a4:	e7f3      	b.n	800398e <USBD_CDC_ReceivePacket+0x1a>

080039a6 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80039a6:	b198      	cbz	r0, 80039d0 <USBD_Init+0x2a>
{
 80039a8:	b508      	push	{r3, lr}
 80039aa:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80039ac:	2000      	movs	r0, #0
 80039ae:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80039b2:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80039b6:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80039ba:	b109      	cbz	r1, 80039c0 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 80039bc:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80039c0:	2101      	movs	r1, #1
 80039c2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80039c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fecd 	bl	8004768 <USBD_LL_Init>

  return ret;
}
 80039ce:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80039d0:	2003      	movs	r0, #3
}
 80039d2:	4770      	bx	lr

080039d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80039d4:	b510      	push	{r4, lr}
 80039d6:	b082      	sub	sp, #8
  uint16_t len = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80039de:	b161      	cbz	r1, 80039fa <USBD_RegisterClass+0x26>
 80039e0:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80039e2:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80039e6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80039e8:	b14b      	cbz	r3, 80039fe <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80039ea:	f10d 0006 	add.w	r0, sp, #6
 80039ee:	4798      	blx	r3
 80039f0:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80039f4:	2000      	movs	r0, #0
}
 80039f6:	b002      	add	sp, #8
 80039f8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80039fa:	2003      	movs	r0, #3
 80039fc:	e7fb      	b.n	80039f6 <USBD_RegisterClass+0x22>
  return USBD_OK;
 80039fe:	2000      	movs	r0, #0
 8003a00:	e7f9      	b.n	80039f6 <USBD_RegisterClass+0x22>

08003a02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003a02:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003a04:	f000 ff11 	bl	800482a <USBD_LL_Start>
}
 8003a08:	bd08      	pop	{r3, pc}

08003a0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003a0a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003a0c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003a10:	b113      	cbz	r3, 8003a18 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4798      	blx	r3
  }

  return ret;
}
 8003a16:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003a18:	2003      	movs	r0, #3
 8003a1a:	e7fc      	b.n	8003a16 <USBD_SetClassConfig+0xc>

08003a1c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003a1c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8003a1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003a22:	b10b      	cbz	r3, 8003a28 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003a28:	2000      	movs	r0, #0
 8003a2a:	bd08      	pop	{r3, pc}

08003a2c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003a30:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8003a34:	4628      	mov	r0, r5
 8003a36:	f000 f965 	bl	8003d04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003a40:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8003a44:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003a48:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8003a4c:	f001 031f 	and.w	r3, r1, #31
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d00d      	beq.n	8003a70 <USBD_LL_SetupStage+0x44>
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d010      	beq.n	8003a7a <USBD_LL_SetupStage+0x4e>
 8003a58:	b12b      	cbz	r3, 8003a66 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003a5a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f000 fefe 	bl	8004860 <USBD_LL_StallEP>
      break;
 8003a64:	e003      	b.n	8003a6e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003a66:	4629      	mov	r1, r5
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 fb0a 	bl	8004082 <USBD_StdDevReq>
  }

  return ret;
}
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003a70:	4629      	mov	r1, r5
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 fb3d 	bl	80040f2 <USBD_StdItfReq>
      break;
 8003a78:	e7f9      	b.n	8003a6e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f000 fb6c 	bl	800415a <USBD_StdEPReq>
      break;
 8003a82:	e7f4      	b.n	8003a6e <USBD_LL_SetupStage+0x42>

08003a84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003a88:	460d      	mov	r5, r1
 8003a8a:	bb41      	cbnz	r1, 8003ade <USBD_LL_DataOutStage+0x5a>
 8003a8c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003a8e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003a92:	2a03      	cmp	r2, #3
 8003a94:	d001      	beq.n	8003a9a <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 8003a96:	4608      	mov	r0, r1
}
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003a9a:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8003a9e:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	d809      	bhi.n	8003aba <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003aa6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d00f      	beq.n	8003ad0 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f000 fc91 	bl	80043d8 <USBD_CtlSendStatus>
  return USBD_OK;
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	e7ee      	b.n	8003a98 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8003aba:	1a89      	subs	r1, r1, r2
 8003abc:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003ac0:	428a      	cmp	r2, r1
 8003ac2:	bf28      	it	cs
 8003ac4:	460a      	movcs	r2, r1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f000 fc7e 	bl	80043c8 <USBD_CtlContinueRx>
  return USBD_OK;
 8003acc:	4628      	mov	r0, r5
 8003ace:	e7e3      	b.n	8003a98 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 8003ad0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ea      	beq.n	8003ab0 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 8003ada:	4798      	blx	r3
 8003adc:	e7e8      	b.n	8003ab0 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ade:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d001      	beq.n	8003aec <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e7d5      	b.n	8003a98 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 8003aec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	b10b      	cbz	r3, 8003af8 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8003af4:	4798      	blx	r3
        if (ret != USBD_OK)
 8003af6:	e7cf      	b.n	8003a98 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 8003af8:	2000      	movs	r0, #0
 8003afa:	e7cd      	b.n	8003a98 <USBD_LL_DataOutStage+0x14>

08003afc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003b00:	460d      	mov	r5, r1
 8003b02:	2900      	cmp	r1, #0
 8003b04:	d14a      	bne.n	8003b9c <USBD_LL_DataInStage+0xa0>
 8003b06:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003b08:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003b0c:	2a02      	cmp	r2, #2
 8003b0e:	d005      	beq.n	8003b1c <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8003b10:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d03c      	beq.n	8003b92 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 8003b18:	4628      	mov	r0, r5
}
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003b1c:	69c2      	ldr	r2, [r0, #28]
 8003b1e:	6a01      	ldr	r1, [r0, #32]
 8003b20:	428a      	cmp	r2, r1
 8003b22:	d80e      	bhi.n	8003b42 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 8003b24:	428a      	cmp	r2, r1
 8003b26:	d018      	beq.n	8003b5a <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b28:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d027      	beq.n	8003b82 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003b32:	2180      	movs	r1, #128	; 0x80
 8003b34:	4620      	mov	r0, r4
 8003b36:	f000 fe93 	bl	8004860 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 fc57 	bl	80043ee <USBD_CtlReceiveStatus>
 8003b40:	e7e6      	b.n	8003b10 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8003b42:	1a52      	subs	r2, r2, r1
 8003b44:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003b46:	4619      	mov	r1, r3
 8003b48:	f000 fc27 	bl	800439a <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 fea4 	bl	80048a0 <USBD_LL_PrepareReceive>
 8003b58:	e7da      	b.n	8003b10 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8003b5a:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d8e3      	bhi.n	8003b28 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8003b60:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d2df      	bcs.n	8003b28 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	f000 fc15 	bl	800439a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003b70:	2100      	movs	r1, #0
 8003b72:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003b76:	460b      	mov	r3, r1
 8003b78:	460a      	mov	r2, r1
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 fe90 	bl	80048a0 <USBD_LL_PrepareReceive>
 8003b80:	e7c6      	b.n	8003b10 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8003b82:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0d2      	beq.n	8003b32 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	4798      	blx	r3
 8003b90:	e7cf      	b.n	8003b32 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8003b98:	4628      	mov	r0, r5
 8003b9a:	e7be      	b.n	8003b1a <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b9c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d001      	beq.n	8003baa <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	e7b7      	b.n	8003b1a <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 8003baa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	b10b      	cbz	r3, 8003bb6 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8003bb2:	4798      	blx	r3
        if (ret != USBD_OK)
 8003bb4:	e7b1      	b.n	8003b1a <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e7af      	b.n	8003b1a <USBD_LL_DataInStage+0x1e>

08003bba <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8003bc6:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8003bc8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8003bcc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003bd0:	b1f3      	cbz	r3, 8003c10 <USBD_LL_Reset+0x56>
{
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 8003bd6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003bda:	b11a      	cbz	r2, 8003be4 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	b10b      	cbz	r3, 8003be4 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003be0:	2100      	movs	r1, #0
 8003be2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003be4:	2340      	movs	r3, #64	; 0x40
 8003be6:	2200      	movs	r2, #0
 8003be8:	4611      	mov	r1, r2
 8003bea:	4620      	mov	r0, r4
 8003bec:	f000 fe25 	bl	800483a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003bf0:	2601      	movs	r6, #1
 8003bf2:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003bf6:	2540      	movs	r5, #64	; 0x40
 8003bf8:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 fe19 	bl	800483a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003c08:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003c0a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 8003c0c:	2000      	movs	r0, #0
}
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8003c10:	2003      	movs	r0, #3
}
 8003c12:	4770      	bx	lr

08003c14 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003c14:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003c16:	2000      	movs	r0, #0
 8003c18:	4770      	bx	lr

08003c1a <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8003c1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003c24:	2304      	movs	r3, #4
 8003c26:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	4770      	bx	lr

08003c2e <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003c2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d001      	beq.n	8003c3c <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8003c38:	2000      	movs	r0, #0
 8003c3a:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003c3c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8003c46:	e7f7      	b.n	8003c38 <USBD_LL_Resume+0xa>

08003c48 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8003c48:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003c4c:	b162      	cbz	r2, 8003c68 <USBD_LL_SOF+0x20>
{
 8003c4e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d001      	beq.n	8003c5e <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 8003c5a:	2000      	movs	r0, #0
}
 8003c5c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8003c5e:	69d3      	ldr	r3, [r2, #28]
 8003c60:	b123      	cbz	r3, 8003c6c <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8003c62:	4798      	blx	r3
  return USBD_OK;
 8003c64:	2000      	movs	r0, #0
 8003c66:	e7f9      	b.n	8003c5c <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 8003c68:	2003      	movs	r0, #3
}
 8003c6a:	4770      	bx	lr
  return USBD_OK;
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e7f5      	b.n	8003c5c <USBD_LL_SOF+0x14>

08003c70 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8003c70:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003c74:	b162      	cbz	r2, 8003c90 <USBD_LL_IsoINIncomplete+0x20>
{
 8003c76:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d001      	beq.n	8003c86 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003c82:	2000      	movs	r0, #0
}
 8003c84:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8003c86:	6a13      	ldr	r3, [r2, #32]
 8003c88:	b123      	cbz	r3, 8003c94 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8003c8a:	4798      	blx	r3
  return USBD_OK;
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	e7f9      	b.n	8003c84 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 8003c90:	2003      	movs	r0, #3
}
 8003c92:	4770      	bx	lr
  return USBD_OK;
 8003c94:	2000      	movs	r0, #0
 8003c96:	e7f5      	b.n	8003c84 <USBD_LL_IsoINIncomplete+0x14>

08003c98 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8003c98:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8003c9c:	b162      	cbz	r2, 8003cb8 <USBD_LL_IsoOUTIncomplete+0x20>
{
 8003c9e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ca0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d001      	beq.n	8003cae <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8003caa:	2000      	movs	r0, #0
}
 8003cac:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8003cae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003cb0:	b123      	cbz	r3, 8003cbc <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8003cb2:	4798      	blx	r3
  return USBD_OK;
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	e7f9      	b.n	8003cac <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 8003cb8:	2003      	movs	r0, #3
}
 8003cba:	4770      	bx	lr
  return USBD_OK;
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e7f5      	b.n	8003cac <USBD_LL_IsoOUTIncomplete+0x14>

08003cc0 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	4770      	bx	lr

08003cc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8003cc4:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8003ccc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003cd0:	b113      	cbz	r3, 8003cd8 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	7901      	ldrb	r1, [r0, #4]
 8003cd6:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003cd8:	2000      	movs	r0, #0
 8003cda:	bd08      	pop	{r3, pc}

08003cdc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003cdc:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8003cde:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8003ce0:	e002      	b.n	8003ce8 <USBD_GetLen+0xc>
  {
    len++;
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	b2c0      	uxtb	r0, r0
    pbuff++;
 8003ce6:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d1f9      	bne.n	8003ce2 <USBD_GetLen+0x6>
  }

  return len;
}
 8003cee:	4770      	bx	lr

08003cf0 <USBD_SetFeature>:
{
 8003cf0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003cf2:	884b      	ldrh	r3, [r1, #2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d000      	beq.n	8003cfa <USBD_SetFeature+0xa>
}
 8003cf8:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003cfa:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8003cfe:	f000 fb6b 	bl	80043d8 <USBD_CtlSendStatus>
}
 8003d02:	e7f9      	b.n	8003cf8 <USBD_SetFeature+0x8>

08003d04 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8003d04:	780b      	ldrb	r3, [r1, #0]
 8003d06:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003d08:	784b      	ldrb	r3, [r1, #1]
 8003d0a:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8003d0c:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8003d0e:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003d10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8003d14:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8003d16:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8003d18:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003d1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8003d1e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8003d20:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8003d22:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003d24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8003d28:	80c3      	strh	r3, [r0, #6]
}
 8003d2a:	4770      	bx	lr

08003d2c <USBD_CtlError>:
{
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	f000 fd95 	bl	8004860 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003d36:	2100      	movs	r1, #0
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 fd91 	bl	8004860 <USBD_LL_StallEP>
}
 8003d3e:	bd10      	pop	{r4, pc}

08003d40 <USBD_GetDescriptor>:
{
 8003d40:	b530      	push	{r4, r5, lr}
 8003d42:	b083      	sub	sp, #12
 8003d44:	4604      	mov	r4, r0
 8003d46:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003d4e:	884a      	ldrh	r2, [r1, #2]
 8003d50:	0a13      	lsrs	r3, r2, #8
 8003d52:	3b01      	subs	r3, #1
 8003d54:	2b06      	cmp	r3, #6
 8003d56:	f200 80ab 	bhi.w	8003eb0 <USBD_GetDescriptor+0x170>
 8003d5a:	e8df f003 	tbb	[pc, r3]
 8003d5e:	1f04      	.short	0x1f04
 8003d60:	8da9a933 	.word	0x8da9a933
 8003d64:	9a          	.byte	0x9a
 8003d65:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003d66:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f10d 0106 	add.w	r1, sp, #6
 8003d70:	7c00      	ldrb	r0, [r0, #16]
 8003d72:	4798      	blx	r3
  if (req->wLength != 0U)
 8003d74:	88ea      	ldrh	r2, [r5, #6]
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	f000 80a3 	beq.w	8003ec2 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8003d7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8099 	beq.w	8003eb8 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8003d86:	429a      	cmp	r2, r3
 8003d88:	bf28      	it	cs
 8003d8a:	461a      	movcs	r2, r3
 8003d8c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003d90:	4601      	mov	r1, r0
 8003d92:	4620      	mov	r0, r4
 8003d94:	f000 faf4 	bl	8004380 <USBD_CtlSendData>
}
 8003d98:	b003      	add	sp, #12
 8003d9a:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d9c:	7c03      	ldrb	r3, [r0, #16]
 8003d9e:	b943      	cbnz	r3, 8003db2 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003da0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	f10d 0006 	add.w	r0, sp, #6
 8003daa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003dac:	2302      	movs	r3, #2
 8003dae:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003db0:	e7e0      	b.n	8003d74 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003db2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	f10d 0006 	add.w	r0, sp, #6
 8003dbc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003dc2:	e7d7      	b.n	8003d74 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	2a05      	cmp	r2, #5
 8003dc8:	d852      	bhi.n	8003e70 <USBD_GetDescriptor+0x130>
 8003dca:	e8df f002 	tbb	[pc, r2]
 8003dce:	1003      	.short	0x1003
 8003dd0:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003dd4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b123      	cbz	r3, 8003de6 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003ddc:	f10d 0106 	add.w	r1, sp, #6
 8003de0:	7c00      	ldrb	r0, [r0, #16]
 8003de2:	4798      	blx	r3
  if (err != 0U)
 8003de4:	e7c6      	b.n	8003d74 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003de6:	4629      	mov	r1, r5
 8003de8:	f7ff ffa0 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003dec:	e7d4      	b.n	8003d98 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003dee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	b123      	cbz	r3, 8003e00 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003df6:	f10d 0106 	add.w	r1, sp, #6
 8003dfa:	7c00      	ldrb	r0, [r0, #16]
 8003dfc:	4798      	blx	r3
  if (err != 0U)
 8003dfe:	e7b9      	b.n	8003d74 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003e00:	4629      	mov	r1, r5
 8003e02:	f7ff ff93 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003e06:	e7c7      	b.n	8003d98 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003e08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	b123      	cbz	r3, 8003e1a <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003e10:	f10d 0106 	add.w	r1, sp, #6
 8003e14:	7c00      	ldrb	r0, [r0, #16]
 8003e16:	4798      	blx	r3
  if (err != 0U)
 8003e18:	e7ac      	b.n	8003d74 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	f7ff ff86 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003e20:	e7ba      	b.n	8003d98 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003e22:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	b123      	cbz	r3, 8003e34 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003e2a:	f10d 0106 	add.w	r1, sp, #6
 8003e2e:	7c00      	ldrb	r0, [r0, #16]
 8003e30:	4798      	blx	r3
  if (err != 0U)
 8003e32:	e79f      	b.n	8003d74 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003e34:	4629      	mov	r1, r5
 8003e36:	f7ff ff79 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003e3a:	e7ad      	b.n	8003d98 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003e3c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	b123      	cbz	r3, 8003e4e <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003e44:	f10d 0106 	add.w	r1, sp, #6
 8003e48:	7c00      	ldrb	r0, [r0, #16]
 8003e4a:	4798      	blx	r3
  if (err != 0U)
 8003e4c:	e792      	b.n	8003d74 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003e4e:	4629      	mov	r1, r5
 8003e50:	f7ff ff6c 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003e54:	e7a0      	b.n	8003d98 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003e56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	b123      	cbz	r3, 8003e68 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003e5e:	f10d 0106 	add.w	r1, sp, #6
 8003e62:	7c00      	ldrb	r0, [r0, #16]
 8003e64:	4798      	blx	r3
  if (err != 0U)
 8003e66:	e785      	b.n	8003d74 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8003e68:	4629      	mov	r1, r5
 8003e6a:	f7ff ff5f 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003e6e:	e793      	b.n	8003d98 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 8003e70:	4629      	mov	r1, r5
 8003e72:	f7ff ff5b 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003e76:	e78f      	b.n	8003d98 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e78:	7c03      	ldrb	r3, [r0, #16]
 8003e7a:	b933      	cbnz	r3, 8003e8a <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003e7c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	f10d 0006 	add.w	r0, sp, #6
 8003e86:	4798      	blx	r3
  if (err != 0U)
 8003e88:	e774      	b.n	8003d74 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7ff ff4e 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003e90:	e782      	b.n	8003d98 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e92:	7c03      	ldrb	r3, [r0, #16]
 8003e94:	b943      	cbnz	r3, 8003ea8 <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003e96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	f10d 0006 	add.w	r0, sp, #6
 8003ea0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003ea6:	e765      	b.n	8003d74 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7ff ff3f 	bl	8003d2c <USBD_CtlError>
  if (err != 0U)
 8003eae:	e773      	b.n	8003d98 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	f7ff ff3b 	bl	8003d2c <USBD_CtlError>
    return;
 8003eb6:	e76f      	b.n	8003d98 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f7ff ff36 	bl	8003d2c <USBD_CtlError>
 8003ec0:	e76a      	b.n	8003d98 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f000 fa88 	bl	80043d8 <USBD_CtlSendStatus>
 8003ec8:	e766      	b.n	8003d98 <USBD_GetDescriptor+0x58>

08003eca <USBD_SetAddress>:
{
 8003eca:	b538      	push	{r3, r4, r5, lr}
 8003ecc:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003ece:	888b      	ldrh	r3, [r1, #4]
 8003ed0:	b9fb      	cbnz	r3, 8003f12 <USBD_SetAddress+0x48>
 8003ed2:	88cb      	ldrh	r3, [r1, #6]
 8003ed4:	b9eb      	cbnz	r3, 8003f12 <USBD_SetAddress+0x48>
 8003ed6:	884b      	ldrh	r3, [r1, #2]
 8003ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eda:	d81a      	bhi.n	8003f12 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003edc:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ee0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d00c      	beq.n	8003f04 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 8003eea:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f000 fcc6 	bl	8004880 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f000 fa6f 	bl	80043d8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003efa:	b135      	cbz	r5, 8003f0a <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003efc:	2302      	movs	r3, #2
 8003efe:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003f02:	e009      	b.n	8003f18 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 8003f04:	f7ff ff12 	bl	8003d2c <USBD_CtlError>
 8003f08:	e006      	b.n	8003f18 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003f10:	e002      	b.n	8003f18 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff ff0a 	bl	8003d2c <USBD_CtlError>
}
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
	...

08003f1c <USBD_SetConfig>:
{
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4604      	mov	r4, r0
 8003f20:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8003f22:	788d      	ldrb	r5, [r1, #2]
 8003f24:	4b2e      	ldr	r3, [pc, #184]	; (8003fe0 <USBD_SetConfig+0xc4>)
 8003f26:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003f28:	2d01      	cmp	r5, #1
 8003f2a:	d810      	bhi.n	8003f4e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8003f2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d00f      	beq.n	8003f56 <USBD_SetConfig+0x3a>
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d023      	beq.n	8003f82 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 8003f3a:	f7ff fef7 	bl	8003d2c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003f3e:	4b28      	ldr	r3, [pc, #160]	; (8003fe0 <USBD_SetConfig+0xc4>)
 8003f40:	7819      	ldrb	r1, [r3, #0]
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7ff fd6a 	bl	8003a1c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8003f48:	2503      	movs	r5, #3
}
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8003f4e:	f7ff feed 	bl	8003d2c <USBD_CtlError>
    return USBD_FAIL;
 8003f52:	2503      	movs	r5, #3
 8003f54:	e7f9      	b.n	8003f4a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8003f56:	b18d      	cbz	r5, 8003f7c <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8003f58:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7ff fd55 	bl	8003a0a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8003f60:	4605      	mov	r5, r0
 8003f62:	b120      	cbz	r0, 8003f6e <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8003f64:	4631      	mov	r1, r6
 8003f66:	4620      	mov	r0, r4
 8003f68:	f7ff fee0 	bl	8003d2c <USBD_CtlError>
 8003f6c:	e7ed      	b.n	8003f4a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f000 fa32 	bl	80043d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003f74:	2303      	movs	r3, #3
 8003f76:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003f7a:	e7e6      	b.n	8003f4a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8003f7c:	f000 fa2c 	bl	80043d8 <USBD_CtlSendStatus>
 8003f80:	e7e3      	b.n	8003f4a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8003f82:	b1cd      	cbz	r5, 8003fb8 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8003f84:	6841      	ldr	r1, [r0, #4]
 8003f86:	428d      	cmp	r5, r1
 8003f88:	d025      	beq.n	8003fd6 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003f8a:	b2c9      	uxtb	r1, r1
 8003f8c:	f7ff fd46 	bl	8003a1c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <USBD_SetConfig+0xc4>)
 8003f92:	7819      	ldrb	r1, [r3, #0]
 8003f94:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff fd37 	bl	8003a0a <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	b1b0      	cbz	r0, 8003fce <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8003fa0:	4631      	mov	r1, r6
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f7ff fec2 	bl	8003d2c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003fa8:	7921      	ldrb	r1, [r4, #4]
 8003faa:	4620      	mov	r0, r4
 8003fac:	f7ff fd36 	bl	8003a1c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003fb6:	e7c8      	b.n	8003f4a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8003fbe:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f7ff fd2b 	bl	8003a1c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f000 fa06 	bl	80043d8 <USBD_CtlSendStatus>
 8003fcc:	e7bd      	b.n	8003f4a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 fa02 	bl	80043d8 <USBD_CtlSendStatus>
 8003fd4:	e7b9      	b.n	8003f4a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8003fd6:	f000 f9ff 	bl	80043d8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003fda:	2500      	movs	r5, #0
 8003fdc:	e7b5      	b.n	8003f4a <USBD_SetConfig+0x2e>
 8003fde:	bf00      	nop
 8003fe0:	20000310 	.word	0x20000310

08003fe4 <USBD_GetConfig>:
{
 8003fe4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8003fe6:	88cb      	ldrh	r3, [r1, #6]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d10b      	bne.n	8004004 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8003fec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d909      	bls.n	800400a <USBD_GetConfig+0x26>
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d109      	bne.n	800400e <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	1d01      	adds	r1, r0, #4
 8003ffe:	f000 f9bf 	bl	8004380 <USBD_CtlSendData>
        break;
 8004002:	e001      	b.n	8004008 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 8004004:	f7ff fe92 	bl	8003d2c <USBD_CtlError>
}
 8004008:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800400a:	b25b      	sxtb	r3, r3
 800400c:	b913      	cbnz	r3, 8004014 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800400e:	f7ff fe8d 	bl	8003d2c <USBD_CtlError>
}
 8004012:	e7f9      	b.n	8004008 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 8004014:	4601      	mov	r1, r0
 8004016:	2300      	movs	r3, #0
 8004018:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800401c:	2201      	movs	r2, #1
 800401e:	f000 f9af 	bl	8004380 <USBD_CtlSendData>
        break;
 8004022:	e7f1      	b.n	8004008 <USBD_GetConfig+0x24>

08004024 <USBD_GetStatus>:
{
 8004024:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004026:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800402a:	3b01      	subs	r3, #1
 800402c:	2b02      	cmp	r3, #2
 800402e:	d812      	bhi.n	8004056 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8004030:	88cb      	ldrh	r3, [r1, #6]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d10c      	bne.n	8004050 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004036:	2301      	movs	r3, #1
 8004038:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800403a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800403e:	b10b      	cbz	r3, 8004044 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004040:	2303      	movs	r3, #3
 8004042:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004044:	2202      	movs	r2, #2
 8004046:	f100 010c 	add.w	r1, r0, #12
 800404a:	f000 f999 	bl	8004380 <USBD_CtlSendData>
}
 800404e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004050:	f7ff fe6c 	bl	8003d2c <USBD_CtlError>
        break;
 8004054:	e7fb      	b.n	800404e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004056:	f7ff fe69 	bl	8003d2c <USBD_CtlError>
}
 800405a:	e7f8      	b.n	800404e <USBD_GetStatus+0x2a>

0800405c <USBD_ClrFeature>:
{
 800405c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800405e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004062:	3b01      	subs	r3, #1
 8004064:	2b02      	cmp	r3, #2
 8004066:	d809      	bhi.n	800407c <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004068:	884b      	ldrh	r3, [r1, #2]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d000      	beq.n	8004070 <USBD_ClrFeature+0x14>
}
 800406e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004076:	f000 f9af 	bl	80043d8 <USBD_CtlSendStatus>
 800407a:	e7f8      	b.n	800406e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800407c:	f7ff fe56 	bl	8003d2c <USBD_CtlError>
}
 8004080:	e7f5      	b.n	800406e <USBD_ClrFeature+0x12>

08004082 <USBD_StdDevReq>:
{
 8004082:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004084:	780c      	ldrb	r4, [r1, #0]
 8004086:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800408a:	2c20      	cmp	r4, #32
 800408c:	d006      	beq.n	800409c <USBD_StdDevReq+0x1a>
 800408e:	2c40      	cmp	r4, #64	; 0x40
 8004090:	d004      	beq.n	800409c <USBD_StdDevReq+0x1a>
 8004092:	b154      	cbz	r4, 80040aa <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8004094:	f7ff fe4a 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004098:	2400      	movs	r4, #0
      break;
 800409a:	e004      	b.n	80040a6 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800409c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4798      	blx	r3
 80040a4:	4604      	mov	r4, r0
}
 80040a6:	4620      	mov	r0, r4
 80040a8:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80040aa:	784d      	ldrb	r5, [r1, #1]
 80040ac:	2d09      	cmp	r5, #9
 80040ae:	d81d      	bhi.n	80040ec <USBD_StdDevReq+0x6a>
 80040b0:	e8df f005 	tbb	[pc, r5]
 80040b4:	161c1912 	.word	0x161c1912
 80040b8:	1c05081c 	.word	0x1c05081c
 80040bc:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80040be:	f7ff fe3f 	bl	8003d40 <USBD_GetDescriptor>
          break;
 80040c2:	e7f0      	b.n	80040a6 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 80040c4:	f7ff ff01 	bl	8003eca <USBD_SetAddress>
          break;
 80040c8:	e7ed      	b.n	80040a6 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 80040ca:	f7ff ff27 	bl	8003f1c <USBD_SetConfig>
 80040ce:	4604      	mov	r4, r0
          break;
 80040d0:	e7e9      	b.n	80040a6 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 80040d2:	f7ff ff87 	bl	8003fe4 <USBD_GetConfig>
          break;
 80040d6:	e7e6      	b.n	80040a6 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 80040d8:	f7ff ffa4 	bl	8004024 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80040dc:	462c      	mov	r4, r5
          break;
 80040de:	e7e2      	b.n	80040a6 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 80040e0:	f7ff fe06 	bl	8003cf0 <USBD_SetFeature>
          break;
 80040e4:	e7df      	b.n	80040a6 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 80040e6:	f7ff ffb9 	bl	800405c <USBD_ClrFeature>
          break;
 80040ea:	e7dc      	b.n	80040a6 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 80040ec:	f7ff fe1e 	bl	8003d2c <USBD_CtlError>
          break;
 80040f0:	e7d9      	b.n	80040a6 <USBD_StdDevReq+0x24>

080040f2 <USBD_StdItfReq>:
{
 80040f2:	b570      	push	{r4, r5, r6, lr}
 80040f4:	4605      	mov	r5, r0
 80040f6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040f8:	780b      	ldrb	r3, [r1, #0]
 80040fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d007      	beq.n	8004112 <USBD_StdItfReq+0x20>
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d005      	beq.n	8004112 <USBD_StdItfReq+0x20>
 8004106:	b123      	cbz	r3, 8004112 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 8004108:	f7ff fe10 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800410c:	2600      	movs	r6, #0
}
 800410e:	4630      	mov	r0, r6
 8004110:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004112:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004116:	3b01      	subs	r3, #1
 8004118:	2b02      	cmp	r3, #2
 800411a:	d818      	bhi.n	800414e <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800411c:	7923      	ldrb	r3, [r4, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d80f      	bhi.n	8004142 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004122:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4621      	mov	r1, r4
 800412a:	4628      	mov	r0, r5
 800412c:	4798      	blx	r3
 800412e:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004130:	88e3      	ldrh	r3, [r4, #6]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1eb      	bne.n	800410e <USBD_StdItfReq+0x1c>
 8004136:	2800      	cmp	r0, #0
 8004138:	d1e9      	bne.n	800410e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800413a:	4628      	mov	r0, r5
 800413c:	f000 f94c 	bl	80043d8 <USBD_CtlSendStatus>
 8004140:	e7e5      	b.n	800410e <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f7ff fdf1 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800414a:	2600      	movs	r6, #0
 800414c:	e7df      	b.n	800410e <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800414e:	4621      	mov	r1, r4
 8004150:	4628      	mov	r0, r5
 8004152:	f7ff fdeb 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004156:	2600      	movs	r6, #0
          break;
 8004158:	e7d9      	b.n	800410e <USBD_StdItfReq+0x1c>

0800415a <USBD_StdEPReq>:
{
 800415a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415c:	4606      	mov	r6, r0
 800415e:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8004160:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004162:	780c      	ldrb	r4, [r1, #0]
 8004164:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004168:	2c20      	cmp	r4, #32
 800416a:	d008      	beq.n	800417e <USBD_StdEPReq+0x24>
 800416c:	b2d9      	uxtb	r1, r3
 800416e:	2c40      	cmp	r4, #64	; 0x40
 8004170:	d005      	beq.n	800417e <USBD_StdEPReq+0x24>
 8004172:	b16c      	cbz	r4, 8004190 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8004174:	4629      	mov	r1, r5
 8004176:	f7ff fdd9 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800417a:	2400      	movs	r4, #0
      break;
 800417c:	e006      	b.n	800418c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800417e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4629      	mov	r1, r5
 8004186:	4630      	mov	r0, r6
 8004188:	4798      	blx	r3
 800418a:	4604      	mov	r4, r0
}
 800418c:	4620      	mov	r0, r4
 800418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8004190:	786f      	ldrb	r7, [r5, #1]
 8004192:	2f01      	cmp	r7, #1
 8004194:	d02f      	beq.n	80041f6 <USBD_StdEPReq+0x9c>
 8004196:	2f03      	cmp	r7, #3
 8004198:	d005      	beq.n	80041a6 <USBD_StdEPReq+0x4c>
 800419a:	2f00      	cmp	r7, #0
 800419c:	d059      	beq.n	8004252 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800419e:	4629      	mov	r1, r5
 80041a0:	f7ff fdc4 	bl	8003d2c <USBD_CtlError>
          break;
 80041a4:	e7f2      	b.n	800418c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 80041a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d005      	beq.n	80041bc <USBD_StdEPReq+0x62>
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d012      	beq.n	80041da <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7ff fdb9 	bl	8003d2c <USBD_CtlError>
              break;
 80041ba:	e7e7      	b.n	800418c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80041bc:	b109      	cbz	r1, 80041c2 <USBD_StdEPReq+0x68>
 80041be:	2980      	cmp	r1, #128	; 0x80
 80041c0:	d104      	bne.n	80041cc <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 80041c2:	4629      	mov	r1, r5
 80041c4:	4630      	mov	r0, r6
 80041c6:	f7ff fdb1 	bl	8003d2c <USBD_CtlError>
 80041ca:	e7df      	b.n	800418c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80041cc:	f000 fb48 	bl	8004860 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	4630      	mov	r0, r6
 80041d4:	f000 fb44 	bl	8004860 <USBD_LL_StallEP>
 80041d8:	e7d8      	b.n	800418c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80041da:	886b      	ldrh	r3, [r5, #2]
 80041dc:	b923      	cbnz	r3, 80041e8 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80041de:	b119      	cbz	r1, 80041e8 <USBD_StdEPReq+0x8e>
 80041e0:	2980      	cmp	r1, #128	; 0x80
 80041e2:	d001      	beq.n	80041e8 <USBD_StdEPReq+0x8e>
 80041e4:	88eb      	ldrh	r3, [r5, #6]
 80041e6:	b11b      	cbz	r3, 80041f0 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 80041e8:	4630      	mov	r0, r6
 80041ea:	f000 f8f5 	bl	80043d8 <USBD_CtlSendStatus>
              break;
 80041ee:	e7cd      	b.n	800418c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80041f0:	f000 fb36 	bl	8004860 <USBD_LL_StallEP>
 80041f4:	e7f8      	b.n	80041e8 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 80041f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d005      	beq.n	800420c <USBD_StdEPReq+0xb2>
 8004200:	2b03      	cmp	r3, #3
 8004202:	d012      	beq.n	800422a <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 8004204:	4629      	mov	r1, r5
 8004206:	f7ff fd91 	bl	8003d2c <USBD_CtlError>
              break;
 800420a:	e7bf      	b.n	800418c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800420c:	b109      	cbz	r1, 8004212 <USBD_StdEPReq+0xb8>
 800420e:	2980      	cmp	r1, #128	; 0x80
 8004210:	d104      	bne.n	800421c <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8004212:	4629      	mov	r1, r5
 8004214:	4630      	mov	r0, r6
 8004216:	f7ff fd89 	bl	8003d2c <USBD_CtlError>
 800421a:	e7b7      	b.n	800418c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800421c:	f000 fb20 	bl	8004860 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	4630      	mov	r0, r6
 8004224:	f000 fb1c 	bl	8004860 <USBD_LL_StallEP>
 8004228:	e7b0      	b.n	800418c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800422a:	886b      	ldrh	r3, [r5, #2]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ad      	bne.n	800418c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004230:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8004234:	d10a      	bne.n	800424c <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 8004236:	4630      	mov	r0, r6
 8004238:	f000 f8ce 	bl	80043d8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800423c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4629      	mov	r1, r5
 8004244:	4630      	mov	r0, r6
 8004246:	4798      	blx	r3
 8004248:	4604      	mov	r4, r0
 800424a:	e79f      	b.n	800418c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800424c:	f000 fb10 	bl	8004870 <USBD_LL_ClearStallEP>
 8004250:	e7f1      	b.n	8004236 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8004252:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	2a02      	cmp	r2, #2
 800425a:	d006      	beq.n	800426a <USBD_StdEPReq+0x110>
 800425c:	2a03      	cmp	r2, #3
 800425e:	d029      	beq.n	80042b4 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8004260:	4629      	mov	r1, r5
 8004262:	f7ff fd63 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004266:	463c      	mov	r4, r7
              break;
 8004268:	e790      	b.n	800418c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800426a:	b109      	cbz	r1, 8004270 <USBD_StdEPReq+0x116>
 800426c:	2980      	cmp	r1, #128	; 0x80
 800426e:	d113      	bne.n	8004298 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004270:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004274:	d115      	bne.n	80042a2 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004276:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800427a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800427e:	0089      	lsls	r1, r1, #2
 8004280:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8004284:	4431      	add	r1, r6
 8004286:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8004288:	2300      	movs	r3, #0
 800428a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800428c:	2202      	movs	r2, #2
 800428e:	4630      	mov	r0, r6
 8004290:	f000 f876 	bl	8004380 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004294:	463c      	mov	r4, r7
              break;
 8004296:	e779      	b.n	800418c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8004298:	4629      	mov	r1, r5
 800429a:	f7ff fd47 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800429e:	463c      	mov	r4, r7
                break;
 80042a0:	e774      	b.n	800418c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80042a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80042a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80042aa:	0089      	lsls	r1, r1, #2
 80042ac:	3110      	adds	r1, #16
 80042ae:	4431      	add	r1, r6
 80042b0:	3104      	adds	r1, #4
 80042b2:	e7e9      	b.n	8004288 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 80042b4:	b25b      	sxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	db1f      	blt.n	80042fa <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80042ba:	f001 020f 	and.w	r2, r1, #15
 80042be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042c2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80042c6:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 80042ca:	b322      	cbz	r2, 8004316 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db27      	blt.n	8004320 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80042d0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80042d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042d8:	009c      	lsls	r4, r3, #2
 80042da:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80042de:	4434      	add	r4, r6
 80042e0:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80042e2:	b109      	cbz	r1, 80042e8 <USBD_StdEPReq+0x18e>
 80042e4:	2980      	cmp	r1, #128	; 0x80
 80042e6:	d124      	bne.n	8004332 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80042ec:	2202      	movs	r2, #2
 80042ee:	4621      	mov	r1, r4
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 f845 	bl	8004380 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80042f6:	463c      	mov	r4, r7
              break;
 80042f8:	e748      	b.n	800418c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80042fa:	f001 020f 	and.w	r2, r1, #15
 80042fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004302:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004306:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004308:	2a00      	cmp	r2, #0
 800430a:	d1df      	bne.n	80042cc <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800430c:	4629      	mov	r1, r5
 800430e:	f7ff fd0d 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004312:	463c      	mov	r4, r7
                  break;
 8004314:	e73a      	b.n	800418c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 8004316:	4629      	mov	r1, r5
 8004318:	f7ff fd08 	bl	8003d2c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800431c:	463c      	mov	r4, r7
                  break;
 800431e:	e735      	b.n	800418c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004320:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8004324:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004328:	009c      	lsls	r4, r3, #2
 800432a:	3410      	adds	r4, #16
 800432c:	4434      	add	r4, r6
 800432e:	3404      	adds	r4, #4
 8004330:	e7d7      	b.n	80042e2 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004332:	4630      	mov	r0, r6
 8004334:	f000 fa4c 	bl	80047d0 <USBD_LL_IsStallEP>
 8004338:	b110      	cbz	r0, 8004340 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800433a:	2301      	movs	r3, #1
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	e7d5      	b.n	80042ec <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8004340:	2300      	movs	r3, #0
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	e7d2      	b.n	80042ec <USBD_StdEPReq+0x192>

08004346 <USBD_GetString>:
  if (desc == NULL)
 8004346:	b1d0      	cbz	r0, 800437e <USBD_GetString+0x38>
{
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	460d      	mov	r5, r1
 800434c:	4616      	mov	r6, r2
 800434e:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004350:	f7ff fcc4 	bl	8003cdc <USBD_GetLen>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800435c:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800435e:	2303      	movs	r3, #3
 8004360:	706b      	strb	r3, [r5, #1]
  idx++;
 8004362:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004364:	e007      	b.n	8004376 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 8004366:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004368:	3401      	adds	r4, #1
    idx++;
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800436e:	2100      	movs	r1, #0
 8004370:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004372:	3302      	adds	r3, #2
 8004374:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004376:	7822      	ldrb	r2, [r4, #0]
 8004378:	2a00      	cmp	r2, #0
 800437a:	d1f4      	bne.n	8004366 <USBD_GetString+0x20>
}
 800437c:	bd70      	pop	{r4, r5, r6, pc}
 800437e:	4770      	bx	lr

08004380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004380:	b508      	push	{r3, lr}
 8004382:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004384:	2202      	movs	r2, #2
 8004386:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800438a:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800438c:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800438e:	460a      	mov	r2, r1
 8004390:	2100      	movs	r1, #0
 8004392:	f000 fa7d 	bl	8004890 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004396:	2000      	movs	r0, #0
 8004398:	bd08      	pop	{r3, pc}

0800439a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800439a:	b508      	push	{r3, lr}
 800439c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800439e:	460a      	mov	r2, r1
 80043a0:	2100      	movs	r1, #0
 80043a2:	f000 fa75 	bl	8004890 <USBD_LL_Transmit>

  return USBD_OK;
}
 80043a6:	2000      	movs	r0, #0
 80043a8:	bd08      	pop	{r3, pc}

080043aa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80043aa:	b508      	push	{r3, lr}
 80043ac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80043ae:	2203      	movs	r2, #3
 80043b0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80043b4:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80043b8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80043bc:	460a      	mov	r2, r1
 80043be:	2100      	movs	r1, #0
 80043c0:	f000 fa6e 	bl	80048a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80043c4:	2000      	movs	r0, #0
 80043c6:	bd08      	pop	{r3, pc}

080043c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80043c8:	b508      	push	{r3, lr}
 80043ca:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80043cc:	460a      	mov	r2, r1
 80043ce:	2100      	movs	r1, #0
 80043d0:	f000 fa66 	bl	80048a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80043d4:	2000      	movs	r0, #0
 80043d6:	bd08      	pop	{r3, pc}

080043d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80043d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80043da:	2204      	movs	r2, #4
 80043dc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80043e0:	2300      	movs	r3, #0
 80043e2:	461a      	mov	r2, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	f000 fa53 	bl	8004890 <USBD_LL_Transmit>

  return USBD_OK;
}
 80043ea:	2000      	movs	r0, #0
 80043ec:	bd08      	pop	{r3, pc}

080043ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80043ee:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80043f0:	2205      	movs	r2, #5
 80043f2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043f6:	2300      	movs	r3, #0
 80043f8:	461a      	mov	r2, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	f000 fa50 	bl	80048a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004400:	2000      	movs	r0, #0
 8004402:	bd08      	pop	{r3, pc}

08004404 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004406:	2200      	movs	r2, #0
 8004408:	490f      	ldr	r1, [pc, #60]	; (8004448 <MX_USB_DEVICE_Init+0x44>)
 800440a:	4810      	ldr	r0, [pc, #64]	; (800444c <MX_USB_DEVICE_Init+0x48>)
 800440c:	f7ff facb 	bl	80039a6 <USBD_Init>
 8004410:	b970      	cbnz	r0, 8004430 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004412:	490f      	ldr	r1, [pc, #60]	; (8004450 <MX_USB_DEVICE_Init+0x4c>)
 8004414:	480d      	ldr	r0, [pc, #52]	; (800444c <MX_USB_DEVICE_Init+0x48>)
 8004416:	f7ff fadd 	bl	80039d4 <USBD_RegisterClass>
 800441a:	b960      	cbnz	r0, 8004436 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800441c:	490d      	ldr	r1, [pc, #52]	; (8004454 <MX_USB_DEVICE_Init+0x50>)
 800441e:	480b      	ldr	r0, [pc, #44]	; (800444c <MX_USB_DEVICE_Init+0x48>)
 8004420:	f7ff fa73 	bl	800390a <USBD_CDC_RegisterInterface>
 8004424:	b950      	cbnz	r0, 800443c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004426:	4809      	ldr	r0, [pc, #36]	; (800444c <MX_USB_DEVICE_Init+0x48>)
 8004428:	f7ff faeb 	bl	8003a02 <USBD_Start>
 800442c:	b948      	cbnz	r0, 8004442 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800442e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004430:	f7fc f94a 	bl	80006c8 <Error_Handler>
 8004434:	e7ed      	b.n	8004412 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004436:	f7fc f947 	bl	80006c8 <Error_Handler>
 800443a:	e7ef      	b.n	800441c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800443c:	f7fc f944 	bl	80006c8 <Error_Handler>
 8004440:	e7f1      	b.n	8004426 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004442:	f7fc f941 	bl	80006c8 <Error_Handler>
}
 8004446:	e7f2      	b.n	800442e <MX_USB_DEVICE_Init+0x2a>
 8004448:	20000130 	.word	0x20000130
 800444c:	20000314 	.word	0x20000314
 8004450:	2000000c 	.word	0x2000000c
 8004454:	2000011c 	.word	0x2000011c

08004458 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004458:	2000      	movs	r0, #0
 800445a:	4770      	bx	lr

0800445c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800445c:	2000      	movs	r0, #0
 800445e:	4770      	bx	lr

08004460 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8004460:	2000      	movs	r0, #0
 8004462:	4770      	bx	lr

08004464 <CDC_Receive_FS>:
{
 8004464:	b510      	push	{r4, lr}
 8004466:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004468:	4c04      	ldr	r4, [pc, #16]	; (800447c <CDC_Receive_FS+0x18>)
 800446a:	4620      	mov	r0, r4
 800446c:	f7ff fa5f 	bl	800392e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004470:	4620      	mov	r0, r4
 8004472:	f7ff fa7f 	bl	8003974 <USBD_CDC_ReceivePacket>
}
 8004476:	2000      	movs	r0, #0
 8004478:	bd10      	pop	{r4, pc}
 800447a:	bf00      	nop
 800447c:	20000314 	.word	0x20000314

08004480 <CDC_Init_FS>:
{
 8004480:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004482:	4c06      	ldr	r4, [pc, #24]	; (800449c <CDC_Init_FS+0x1c>)
 8004484:	2200      	movs	r2, #0
 8004486:	4906      	ldr	r1, [pc, #24]	; (80044a0 <CDC_Init_FS+0x20>)
 8004488:	4620      	mov	r0, r4
 800448a:	f7ff fa45 	bl	8003918 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800448e:	4905      	ldr	r1, [pc, #20]	; (80044a4 <CDC_Init_FS+0x24>)
 8004490:	4620      	mov	r0, r4
 8004492:	f7ff fa4c 	bl	800392e <USBD_CDC_SetRxBuffer>
}
 8004496:	2000      	movs	r0, #0
 8004498:	bd10      	pop	{r4, pc}
 800449a:	bf00      	nop
 800449c:	20000314 	.word	0x20000314
 80044a0:	20000de4 	.word	0x20000de4
 80044a4:	200005e4 	.word	0x200005e4

080044a8 <CDC_Transmit_FS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <CDC_Transmit_FS+0x28>)
 80044aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 80044ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044b2:	b10b      	cbz	r3, 80044b8 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80044b4:	2001      	movs	r0, #1
}
 80044b6:	4770      	bx	lr
{
 80044b8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80044ba:	4c05      	ldr	r4, [pc, #20]	; (80044d0 <CDC_Transmit_FS+0x28>)
 80044bc:	460a      	mov	r2, r1
 80044be:	4601      	mov	r1, r0
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff fa29 	bl	8003918 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7ff fa3a 	bl	8003940 <USBD_CDC_TransmitPacket>
}
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	20000314 	.word	0x20000314

080044d4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80044d4:	2312      	movs	r3, #18
 80044d6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80044d8:	4800      	ldr	r0, [pc, #0]	; (80044dc <USBD_FS_DeviceDescriptor+0x8>)
 80044da:	4770      	bx	lr
 80044dc:	2000014c 	.word	0x2000014c

080044e0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80044e0:	2304      	movs	r3, #4
 80044e2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80044e4:	4800      	ldr	r0, [pc, #0]	; (80044e8 <USBD_FS_LangIDStrDescriptor+0x8>)
 80044e6:	4770      	bx	lr
 80044e8:	20000160 	.word	0x20000160

080044ec <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d21e      	bcs.n	8004530 <IntToUnicode+0x44>
{
 80044f2:	b500      	push	{lr}
 80044f4:	e010      	b.n	8004518 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80044f6:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 80044fa:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80044fe:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004500:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004504:	f10c 0c01 	add.w	ip, ip, #1
 8004508:	f04f 0e00 	mov.w	lr, #0
 800450c:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004510:	3301      	adds	r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4293      	cmp	r3, r2
 8004516:	d209      	bcs.n	800452c <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8004518:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800451c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8004520:	d2e9      	bcs.n	80044f6 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004522:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004526:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800452a:	e7e8      	b.n	80044fe <IntToUnicode+0x12>
  }
}
 800452c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <Get_SerialNum>:
{
 8004534:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <Get_SerialNum+0x30>)
 8004538:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800453c:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004540:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8004544:	18c0      	adds	r0, r0, r3
 8004546:	d100      	bne.n	800454a <Get_SerialNum+0x16>
}
 8004548:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800454a:	4d07      	ldr	r5, [pc, #28]	; (8004568 <Get_SerialNum+0x34>)
 800454c:	2208      	movs	r2, #8
 800454e:	1ca9      	adds	r1, r5, #2
 8004550:	f7ff ffcc 	bl	80044ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004554:	2204      	movs	r2, #4
 8004556:	f105 0112 	add.w	r1, r5, #18
 800455a:	4620      	mov	r0, r4
 800455c:	f7ff ffc6 	bl	80044ec <IntToUnicode>
}
 8004560:	e7f2      	b.n	8004548 <Get_SerialNum+0x14>
 8004562:	bf00      	nop
 8004564:	1fff7000 	.word	0x1fff7000
 8004568:	20000164 	.word	0x20000164

0800456c <USBD_FS_SerialStrDescriptor>:
{
 800456c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800456e:	231a      	movs	r3, #26
 8004570:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004572:	f7ff ffdf 	bl	8004534 <Get_SerialNum>
}
 8004576:	4801      	ldr	r0, [pc, #4]	; (800457c <USBD_FS_SerialStrDescriptor+0x10>)
 8004578:	bd08      	pop	{r3, pc}
 800457a:	bf00      	nop
 800457c:	20000164 	.word	0x20000164

08004580 <USBD_FS_ProductStrDescriptor>:
{
 8004580:	b508      	push	{r3, lr}
 8004582:	460a      	mov	r2, r1
  if(speed == 0)
 8004584:	b928      	cbnz	r0, 8004592 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004586:	4905      	ldr	r1, [pc, #20]	; (800459c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004588:	4805      	ldr	r0, [pc, #20]	; (80045a0 <USBD_FS_ProductStrDescriptor+0x20>)
 800458a:	f7ff fedc 	bl	8004346 <USBD_GetString>
}
 800458e:	4803      	ldr	r0, [pc, #12]	; (800459c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004590:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004592:	4902      	ldr	r1, [pc, #8]	; (800459c <USBD_FS_ProductStrDescriptor+0x1c>)
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <USBD_FS_ProductStrDescriptor+0x20>)
 8004596:	f7ff fed6 	bl	8004346 <USBD_GetString>
 800459a:	e7f8      	b.n	800458e <USBD_FS_ProductStrDescriptor+0xe>
 800459c:	200015e4 	.word	0x200015e4
 80045a0:	0800bd3c 	.word	0x0800bd3c

080045a4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80045a4:	b510      	push	{r4, lr}
 80045a6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80045a8:	4c03      	ldr	r4, [pc, #12]	; (80045b8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80045aa:	4621      	mov	r1, r4
 80045ac:	4803      	ldr	r0, [pc, #12]	; (80045bc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80045ae:	f7ff feca 	bl	8004346 <USBD_GetString>
}
 80045b2:	4620      	mov	r0, r4
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	bf00      	nop
 80045b8:	200015e4 	.word	0x200015e4
 80045bc:	0800bd54 	.word	0x0800bd54

080045c0 <USBD_FS_ConfigStrDescriptor>:
{
 80045c0:	b508      	push	{r3, lr}
 80045c2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80045c4:	b928      	cbnz	r0, 80045d2 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80045c6:	4905      	ldr	r1, [pc, #20]	; (80045dc <USBD_FS_ConfigStrDescriptor+0x1c>)
 80045c8:	4805      	ldr	r0, [pc, #20]	; (80045e0 <USBD_FS_ConfigStrDescriptor+0x20>)
 80045ca:	f7ff febc 	bl	8004346 <USBD_GetString>
}
 80045ce:	4803      	ldr	r0, [pc, #12]	; (80045dc <USBD_FS_ConfigStrDescriptor+0x1c>)
 80045d0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80045d2:	4902      	ldr	r1, [pc, #8]	; (80045dc <USBD_FS_ConfigStrDescriptor+0x1c>)
 80045d4:	4802      	ldr	r0, [pc, #8]	; (80045e0 <USBD_FS_ConfigStrDescriptor+0x20>)
 80045d6:	f7ff feb6 	bl	8004346 <USBD_GetString>
 80045da:	e7f8      	b.n	80045ce <USBD_FS_ConfigStrDescriptor+0xe>
 80045dc:	200015e4 	.word	0x200015e4
 80045e0:	0800bd68 	.word	0x0800bd68

080045e4 <USBD_FS_InterfaceStrDescriptor>:
{
 80045e4:	b508      	push	{r3, lr}
 80045e6:	460a      	mov	r2, r1
  if(speed == 0)
 80045e8:	b928      	cbnz	r0, 80045f6 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80045ea:	4905      	ldr	r1, [pc, #20]	; (8004600 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80045ec:	4805      	ldr	r0, [pc, #20]	; (8004604 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80045ee:	f7ff feaa 	bl	8004346 <USBD_GetString>
}
 80045f2:	4803      	ldr	r0, [pc, #12]	; (8004600 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80045f4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80045f6:	4902      	ldr	r1, [pc, #8]	; (8004600 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 80045f8:	4802      	ldr	r0, [pc, #8]	; (8004604 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80045fa:	f7ff fea4 	bl	8004346 <USBD_GetString>
 80045fe:	e7f8      	b.n	80045f2 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004600:	200015e4 	.word	0x200015e4
 8004604:	0800bd74 	.word	0x0800bd74

08004608 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004608:	b530      	push	{r4, r5, lr}
 800460a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460c:	2300      	movs	r3, #0
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	9305      	str	r3, [sp, #20]
 8004614:	9306      	str	r3, [sp, #24]
 8004616:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004618:	6803      	ldr	r3, [r0, #0]
 800461a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800461e:	d001      	beq.n	8004624 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004620:	b009      	add	sp, #36	; 0x24
 8004622:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004624:	2500      	movs	r5, #0
 8004626:	9501      	str	r5, [sp, #4]
 8004628:	4c16      	ldr	r4, [pc, #88]	; (8004684 <HAL_PCD_MspInit+0x7c>)
 800462a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6323      	str	r3, [r4, #48]	; 0x30
 8004632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800463c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004640:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	2302      	movs	r3, #2
 8004644:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004646:	2303      	movs	r3, #3
 8004648:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800464a:	230a      	movs	r3, #10
 800464c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	a903      	add	r1, sp, #12
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <HAL_PCD_MspInit+0x80>)
 8004652:	f7fc fd11 	bl	8001078 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465c:	6363      	str	r3, [r4, #52]	; 0x34
 800465e:	9502      	str	r5, [sp, #8]
 8004660:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004666:	6463      	str	r3, [r4, #68]	; 0x44
 8004668:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800466a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466e:	9302      	str	r3, [sp, #8]
 8004670:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004672:	462a      	mov	r2, r5
 8004674:	4629      	mov	r1, r5
 8004676:	2043      	movs	r0, #67	; 0x43
 8004678:	f7fc fae6 	bl	8000c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800467c:	2043      	movs	r0, #67	; 0x43
 800467e:	f7fc fb1b 	bl	8000cb8 <HAL_NVIC_EnableIRQ>
}
 8004682:	e7cd      	b.n	8004620 <HAL_PCD_MspInit+0x18>
 8004684:	40023800 	.word	0x40023800
 8004688:	40020000 	.word	0x40020000

0800468c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800468c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800468e:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8004692:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004696:	f7ff f9c9 	bl	8003a2c <USBD_LL_SetupStage>
}
 800469a:	bd08      	pop	{r3, pc}

0800469c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800469c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800469e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80046a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80046a6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80046aa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80046ae:	f7ff f9e9 	bl	8003a84 <USBD_LL_DataOutStage>
}
 80046b2:	bd08      	pop	{r3, pc}

080046b4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80046b4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80046b6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80046ba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80046be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80046c4:	f7ff fa1a 	bl	8003afc <USBD_LL_DataInStage>
}
 80046c8:	bd08      	pop	{r3, pc}

080046ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80046ca:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80046cc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80046d0:	f7ff faba 	bl	8003c48 <USBD_LL_SOF>
}
 80046d4:	bd08      	pop	{r3, pc}

080046d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80046d6:	b510      	push	{r4, lr}
 80046d8:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80046da:	68c3      	ldr	r3, [r0, #12]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d109      	bne.n	80046f4 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80046e0:	2101      	movs	r1, #1
 80046e2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80046e6:	f7ff fa95 	bl	8003c14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80046ea:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80046ee:	f7ff fa64 	bl	8003bba <USBD_LL_Reset>
}
 80046f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80046f4:	f7fb ffe8 	bl	80006c8 <Error_Handler>
 80046f8:	e7f2      	b.n	80046e0 <HAL_PCD_ResetCallback+0xa>
	...

080046fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80046fc:	b510      	push	{r4, lr}
 80046fe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004700:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004704:	f7ff fa89 	bl	8003c1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004716:	6a23      	ldr	r3, [r4, #32]
 8004718:	b123      	cbz	r3, 8004724 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800471a:	4a03      	ldr	r2, [pc, #12]	; (8004728 <HAL_PCD_SuspendCallback+0x2c>)
 800471c:	6913      	ldr	r3, [r2, #16]
 800471e:	f043 0306 	orr.w	r3, r3, #6
 8004722:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004724:	bd10      	pop	{r4, pc}
 8004726:	bf00      	nop
 8004728:	e000ed00 	.word	0xe000ed00

0800472c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800472c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800472e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004732:	f7ff fa7c 	bl	8003c2e <USBD_LL_Resume>
}
 8004736:	bd08      	pop	{r3, pc}

08004738 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004738:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800473a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800473e:	f7ff faab 	bl	8003c98 <USBD_LL_IsoOUTIncomplete>
}
 8004742:	bd08      	pop	{r3, pc}

08004744 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004744:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004746:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800474a:	f7ff fa91 	bl	8003c70 <USBD_LL_IsoINIncomplete>
}
 800474e:	bd08      	pop	{r3, pc}

08004750 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004750:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004752:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004756:	f7ff fab3 	bl	8003cc0 <USBD_LL_DevConnected>
}
 800475a:	bd08      	pop	{r3, pc}

0800475c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800475c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800475e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8004762:	f7ff faaf 	bl	8003cc4 <USBD_LL_DevDisconnected>
}
 8004766:	bd08      	pop	{r3, pc}

08004768 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004768:	7802      	ldrb	r2, [r0, #0]
 800476a:	b10a      	cbz	r2, 8004770 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800476c:	2000      	movs	r0, #0
 800476e:	4770      	bx	lr
{
 8004770:	b510      	push	{r4, lr}
 8004772:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8004774:	4815      	ldr	r0, [pc, #84]	; (80047cc <USBD_LL_Init+0x64>)
 8004776:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800477a:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800477e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004782:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004784:	2304      	movs	r3, #4
 8004786:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004788:	2202      	movs	r2, #2
 800478a:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800478c:	2300      	movs	r3, #0
 800478e:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004790:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004792:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004794:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004796:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004798:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800479a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800479c:	f7fc fdba 	bl	8001314 <HAL_PCD_Init>
 80047a0:	b980      	cbnz	r0, 80047c4 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80047a2:	4c0a      	ldr	r4, [pc, #40]	; (80047cc <USBD_LL_Init+0x64>)
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7fd fae7 	bl	8001d7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80047ac:	2240      	movs	r2, #64	; 0x40
 80047ae:	2100      	movs	r1, #0
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7fd fabc 	bl	8001d2e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80047b6:	2280      	movs	r2, #128	; 0x80
 80047b8:	2101      	movs	r1, #1
 80047ba:	4620      	mov	r0, r4
 80047bc:	f7fd fab7 	bl	8001d2e <HAL_PCDEx_SetTxFiFo>
}
 80047c0:	2000      	movs	r0, #0
 80047c2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80047c4:	f7fb ff80 	bl	80006c8 <Error_Handler>
 80047c8:	e7eb      	b.n	80047a2 <USBD_LL_Init+0x3a>
 80047ca:	bf00      	nop
 80047cc:	200017e4 	.word	0x200017e4

080047d0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80047d0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 80047d4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80047d8:	d108      	bne.n	80047ec <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80047da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80047de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80047e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80047e6:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 80047ea:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80047ec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80047f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80047f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80047f8:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80047fc:	4770      	bx	lr

080047fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80047fe:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004800:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004804:	f7fd f9dc 	bl	8001bc0 <HAL_PCD_EP_GetRxCount>
}
 8004808:	bd08      	pop	{r3, pc}
	...

0800480c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800480c:	4800      	ldr	r0, [pc, #0]	; (8004810 <USBD_static_malloc+0x4>)
 800480e:	4770      	bx	lr
 8004810:	20001bec 	.word	0x20001bec

08004814 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004814:	4770      	bx	lr

08004816 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004816:	2803      	cmp	r0, #3
 8004818:	d805      	bhi.n	8004826 <USBD_Get_USB_Status+0x10>
 800481a:	e8df f000 	tbb	[pc, r0]
 800481e:	0405      	.short	0x0405
 8004820:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004822:	2001      	movs	r0, #1
    break;
 8004824:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8004826:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004828:	4770      	bx	lr

0800482a <USBD_LL_Start>:
{
 800482a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800482c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004830:	f7fc fe07 	bl	8001442 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004834:	f7ff ffef 	bl	8004816 <USBD_Get_USB_Status>
}
 8004838:	bd08      	pop	{r3, pc}

0800483a <USBD_LL_OpenEP>:
{
 800483a:	b508      	push	{r3, lr}
 800483c:	4694      	mov	ip, r2
 800483e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004840:	4663      	mov	r3, ip
 8004842:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004846:	f7fd f90e 	bl	8001a66 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800484a:	f7ff ffe4 	bl	8004816 <USBD_Get_USB_Status>
}
 800484e:	bd08      	pop	{r3, pc}

08004850 <USBD_LL_CloseEP>:
{
 8004850:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004852:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004856:	f7fd f94b 	bl	8001af0 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800485a:	f7ff ffdc 	bl	8004816 <USBD_Get_USB_Status>
}
 800485e:	bd08      	pop	{r3, pc}

08004860 <USBD_LL_StallEP>:
{
 8004860:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004862:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004866:	f7fd f9e3 	bl	8001c30 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800486a:	f7ff ffd4 	bl	8004816 <USBD_Get_USB_Status>
}
 800486e:	bd08      	pop	{r3, pc}

08004870 <USBD_LL_ClearStallEP>:
{
 8004870:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004872:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004876:	f7fd fa1f 	bl	8001cb8 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800487a:	f7ff ffcc 	bl	8004816 <USBD_Get_USB_Status>
}
 800487e:	bd08      	pop	{r3, pc}

08004880 <USBD_LL_SetUSBAddress>:
{
 8004880:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004882:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004886:	f7fd f8da 	bl	8001a3e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800488a:	f7ff ffc4 	bl	8004816 <USBD_Get_USB_Status>
}
 800488e:	bd08      	pop	{r3, pc}

08004890 <USBD_LL_Transmit>:
{
 8004890:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004892:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8004896:	f7fd f99c 	bl	8001bd2 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800489a:	f7ff ffbc 	bl	8004816 <USBD_Get_USB_Status>
}
 800489e:	bd08      	pop	{r3, pc}

080048a0 <USBD_LL_PrepareReceive>:
{
 80048a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80048a2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80048a6:	f7fd f95c 	bl	8001b62 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048aa:	f7ff ffb4 	bl	8004816 <USBD_Get_USB_Status>
}
 80048ae:	bd08      	pop	{r3, pc}

080048b0 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 80048b0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80048b2:	4603      	mov	r3, r0
 80048b4:	b110      	cbz	r0, 80048bc <lv_disp_get_scr_act+0xc>
    if(!disp) {
 80048b6:	b12b      	cbz	r3, 80048c4 <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 80048b8:	6918      	ldr	r0, [r3, #16]
}
 80048ba:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 80048bc:	f004 fc0a 	bl	80090d4 <lv_disp_get_default>
 80048c0:	4603      	mov	r3, r0
 80048c2:	e7f8      	b.n	80048b6 <lv_disp_get_scr_act+0x6>
        return NULL;
 80048c4:	4618      	mov	r0, r3
 80048c6:	e7f8      	b.n	80048ba <lv_disp_get_scr_act+0xa>

080048c8 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 80048c8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80048ca:	4603      	mov	r3, r0
 80048cc:	b110      	cbz	r0, 80048d4 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
 80048ce:	b12b      	cbz	r3, 80048dc <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 80048d0:	6958      	ldr	r0, [r3, #20]
}
 80048d2:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 80048d4:	f004 fbfe 	bl	80090d4 <lv_disp_get_default>
 80048d8:	4603      	mov	r3, r0
 80048da:	e7f8      	b.n	80048ce <lv_disp_get_scr_prev+0x6>
        return NULL;
 80048dc:	4618      	mov	r0, r3
 80048de:	e7f8      	b.n	80048d2 <lv_disp_get_scr_prev+0xa>

080048e0 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80048e0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80048e2:	4603      	mov	r3, r0
 80048e4:	b110      	cbz	r0, 80048ec <lv_disp_get_layer_top+0xc>
    if(!disp) {
 80048e6:	b12b      	cbz	r3, 80048f4 <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 80048e8:	69d8      	ldr	r0, [r3, #28]
}
 80048ea:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 80048ec:	f004 fbf2 	bl	80090d4 <lv_disp_get_default>
 80048f0:	4603      	mov	r3, r0
 80048f2:	e7f8      	b.n	80048e6 <lv_disp_get_layer_top+0x6>
        return NULL;
 80048f4:	4618      	mov	r0, r3
 80048f6:	e7f8      	b.n	80048ea <lv_disp_get_layer_top+0xa>

080048f8 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80048f8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80048fa:	4603      	mov	r3, r0
 80048fc:	b110      	cbz	r0, 8004904 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
 80048fe:	b12b      	cbz	r3, 800490c <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8004900:	6a18      	ldr	r0, [r3, #32]
}
 8004902:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8004904:	f004 fbe6 	bl	80090d4 <lv_disp_get_default>
 8004908:	4603      	mov	r3, r0
 800490a:	e7f8      	b.n	80048fe <lv_disp_get_layer_sys+0x6>
        return NULL;
 800490c:	4618      	mov	r0, r3
 800490e:	e7f8      	b.n	8004902 <lv_disp_get_layer_sys+0xa>

08004910 <lv_obj_get_event_dsc>:

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8004910:	6880      	ldr	r0, [r0, #8]
 8004912:	b148      	cbz	r0, 8004928 <lv_obj_get_event_dsc+0x18>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004914:	7e83      	ldrb	r3, [r0, #26]
 8004916:	428b      	cmp	r3, r1
 8004918:	d905      	bls.n	8004926 <lv_obj_get_event_dsc+0x16>

    return &obj->spec_attr->event_dsc[id];
 800491a:	68c0      	ldr	r0, [r0, #12]
 800491c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004920:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004924:	4770      	bx	lr
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004926:	2000      	movs	r0, #0
}
 8004928:	4770      	bx	lr
	...

0800492c <event_is_bubbled>:
    return res;
}

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 800492c:	7e03      	ldrb	r3, [r0, #24]
 800492e:	f013 0f04 	tst.w	r3, #4
 8004932:	d14f      	bne.n	80049d4 <event_is_bubbled+0xa8>
{
 8004934:	b510      	push	{r4, lr}
 8004936:	4604      	mov	r4, r0

    /*Event codes that always bubble*/
    switch(e->code) {
 8004938:	7a03      	ldrb	r3, [r0, #8]
 800493a:	3b23      	subs	r3, #35	; 0x23
 800493c:	2b01      	cmp	r3, #1
 800493e:	d801      	bhi.n	8004944 <event_is_bubbled+0x18>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8004940:	2001      	movs	r0, #1
        case LV_EVENT_GET_SELF_SIZE:
            return false;
        default:
            return true;
    }
}
 8004942:	bd10      	pop	{r4, pc}
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8004944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004948:	6840      	ldr	r0, [r0, #4]
 800494a:	f000 f971 	bl	8004c30 <lv_obj_has_flag>
 800494e:	2800      	cmp	r0, #0
 8004950:	d0f7      	beq.n	8004942 <event_is_bubbled+0x16>
    switch(e->code) {
 8004952:	7a23      	ldrb	r3, [r4, #8]
 8004954:	3b11      	subs	r3, #17
 8004956:	2b1b      	cmp	r3, #27
 8004958:	d8f3      	bhi.n	8004942 <event_is_bubbled+0x16>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <event_is_bubbled+0x34>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	080049d1 	.word	0x080049d1
 8004964:	080049d1 	.word	0x080049d1
 8004968:	080049d1 	.word	0x080049d1
 800496c:	080049d1 	.word	0x080049d1
 8004970:	080049d1 	.word	0x080049d1
 8004974:	080049d1 	.word	0x080049d1
 8004978:	080049d1 	.word	0x080049d1
 800497c:	080049d1 	.word	0x080049d1
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d1 	.word	0x080049d1
 8004988:	080049d1 	.word	0x080049d1
 800498c:	08004943 	.word	0x08004943
 8004990:	08004943 	.word	0x08004943
 8004994:	080049d1 	.word	0x080049d1
 8004998:	08004943 	.word	0x08004943
 800499c:	08004943 	.word	0x08004943
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	08004943 	.word	0x08004943
 80049b4:	08004943 	.word	0x08004943
 80049b8:	08004943 	.word	0x08004943
 80049bc:	08004943 	.word	0x08004943
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049d1 	.word	0x080049d1
 80049c8:	08004943 	.word	0x08004943
 80049cc:	080049d1 	.word	0x080049d1
 80049d0:	2000      	movs	r0, #0
 80049d2:	e7b6      	b.n	8004942 <event_is_bubbled+0x16>
    if(e->stop_bubbling) return false;
 80049d4:	2000      	movs	r0, #0
}
 80049d6:	4770      	bx	lr

080049d8 <lv_obj_event_base>:
{
 80049d8:	b510      	push	{r4, lr}
 80049da:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 80049dc:	b108      	cbz	r0, 80049e2 <lv_obj_event_base+0xa>
    else base = class_p->base_class;
 80049de:	6800      	ldr	r0, [r0, #0]
 80049e0:	e003      	b.n	80049ea <lv_obj_event_base+0x12>
    if(class_p == NULL) base = e->current_target->class_p;
 80049e2:	684b      	ldr	r3, [r1, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	e000      	b.n	80049ea <lv_obj_event_base+0x12>
    while(base && base->event_cb == NULL) base = base->base_class;
 80049e8:	6800      	ldr	r0, [r0, #0]
 80049ea:	b110      	cbz	r0, 80049f2 <lv_obj_event_base+0x1a>
 80049ec:	6903      	ldr	r3, [r0, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0fa      	beq.n	80049e8 <lv_obj_event_base+0x10>
    if(base == NULL) return LV_RES_OK;
 80049f2:	b160      	cbz	r0, 8004a0e <lv_obj_event_base+0x36>
    if(base->event_cb == NULL) return LV_RES_OK;
 80049f4:	6903      	ldr	r3, [r0, #16]
 80049f6:	b163      	cbz	r3, 8004a12 <lv_obj_event_base+0x3a>
    e->user_data = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60e3      	str	r3, [r4, #12]
    base->event_cb(base, e);
 80049fc:	6903      	ldr	r3, [r0, #16]
 80049fe:	4621      	mov	r1, r4
 8004a00:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 8004a02:	7e23      	ldrb	r3, [r4, #24]
 8004a04:	f013 0f01 	tst.w	r3, #1
 8004a08:	d105      	bne.n	8004a16 <lv_obj_event_base+0x3e>
    lv_res_t res = LV_RES_OK;
 8004a0a:	2001      	movs	r0, #1
}
 8004a0c:	bd10      	pop	{r4, pc}
    if(base == NULL) return LV_RES_OK;
 8004a0e:	2001      	movs	r0, #1
 8004a10:	e7fc      	b.n	8004a0c <lv_obj_event_base+0x34>
    if(base->event_cb == NULL) return LV_RES_OK;
 8004a12:	2001      	movs	r0, #1
 8004a14:	e7fa      	b.n	8004a0c <lv_obj_event_base+0x34>
    if(e->deleted) res = LV_RES_INV;
 8004a16:	2000      	movs	r0, #0
 8004a18:	e7f8      	b.n	8004a0c <lv_obj_event_base+0x34>

08004a1a <event_send_core>:
{
 8004a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1c:	4606      	mov	r6, r0
    lv_indev_t * indev_act = lv_indev_get_act();
 8004a1e:	f000 f8b7 	bl	8004b90 <lv_indev_get_act>
    if(indev_act) {
 8004a22:	b158      	cbz	r0, 8004a3c <event_send_core+0x22>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8004a24:	6800      	ldr	r0, [r0, #0]
 8004a26:	6883      	ldr	r3, [r0, #8]
 8004a28:	b10b      	cbz	r3, 8004a2e <event_send_core+0x14>
 8004a2a:	7a31      	ldrb	r1, [r6, #8]
 8004a2c:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8004a2e:	7e33      	ldrb	r3, [r6, #24]
 8004a30:	f013 0702 	ands.w	r7, r3, #2
 8004a34:	d174      	bne.n	8004b20 <event_send_core+0x106>
        if(e->deleted) return LV_RES_INV;
 8004a36:	f013 0f01 	tst.w	r3, #1
 8004a3a:	d15b      	bne.n	8004af4 <event_send_core+0xda>
    lv_event_dsc_t * event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	6870      	ldr	r0, [r6, #4]
 8004a40:	f7ff ff66 	bl	8004910 <lv_obj_get_event_dsc>
 8004a44:	4604      	mov	r4, r0
    uint32_t i = 0;
 8004a46:	2500      	movs	r5, #0
    while(event_dsc && res == LV_RES_OK) {
 8004a48:	e011      	b.n	8004a6e <event_send_core+0x54>
            e->user_data = event_dsc->user_data;
 8004a4a:	6863      	ldr	r3, [r4, #4]
 8004a4c:	60f3      	str	r3, [r6, #12]
            event_dsc->cb(e);
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	4630      	mov	r0, r6
 8004a52:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8004a54:	7e33      	ldrb	r3, [r6, #24]
 8004a56:	f013 0702 	ands.w	r7, r3, #2
 8004a5a:	d163      	bne.n	8004b24 <event_send_core+0x10a>
            if(e->deleted) return LV_RES_INV;
 8004a5c:	f013 0f01 	tst.w	r3, #1
 8004a60:	d148      	bne.n	8004af4 <event_send_core+0xda>
        i++;
 8004a62:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004a64:	4629      	mov	r1, r5
 8004a66:	6870      	ldr	r0, [r6, #4]
 8004a68:	f7ff ff52 	bl	8004910 <lv_obj_get_event_dsc>
 8004a6c:	4604      	mov	r4, r0
    while(event_dsc && res == LV_RES_OK) {
 8004a6e:	b17c      	cbz	r4, 8004a90 <event_send_core+0x76>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f5      	beq.n	8004a62 <event_send_core+0x48>
 8004a76:	7a23      	ldrb	r3, [r4, #8]
 8004a78:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8004a7c:	2a00      	cmp	r2, #0
 8004a7e:	daf0      	bge.n	8004a62 <event_send_core+0x48>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d0e2      	beq.n	8004a4a <event_send_core+0x30>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a88:	7a32      	ldrb	r2, [r6, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d1e9      	bne.n	8004a62 <event_send_core+0x48>
 8004a8e:	e7dc      	b.n	8004a4a <event_send_core+0x30>
    res = lv_obj_event_base(NULL, e);
 8004a90:	4631      	mov	r1, r6
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7ff ffa0 	bl	80049d8 <lv_obj_event_base>
    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8004a98:	4607      	mov	r7, r0
 8004a9a:	b120      	cbz	r0, 8004aa6 <event_send_core+0x8c>
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	6870      	ldr	r0, [r6, #4]
 8004aa0:	f7ff ff36 	bl	8004910 <lv_obj_get_event_dsc>
 8004aa4:	4604      	mov	r4, r0
    uint32_t i = 0;
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	e011      	b.n	8004ace <event_send_core+0xb4>
            e->user_data = event_dsc->user_data;
 8004aaa:	6863      	ldr	r3, [r4, #4]
 8004aac:	60f3      	str	r3, [r6, #12]
            event_dsc->cb(e);
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8004ab4:	7e33      	ldrb	r3, [r6, #24]
 8004ab6:	f013 0202 	ands.w	r2, r3, #2
 8004aba:	d11b      	bne.n	8004af4 <event_send_core+0xda>
            if(e->deleted) return LV_RES_INV;
 8004abc:	f013 0f01 	tst.w	r3, #1
 8004ac0:	d132      	bne.n	8004b28 <event_send_core+0x10e>
        i++;
 8004ac2:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	6870      	ldr	r0, [r6, #4]
 8004ac8:	f7ff ff22 	bl	8004910 <lv_obj_get_event_dsc>
 8004acc:	4604      	mov	r4, r0
    while(event_dsc && res == LV_RES_OK) {
 8004ace:	b17c      	cbz	r4, 8004af0 <event_send_core+0xd6>
 8004ad0:	2f01      	cmp	r7, #1
 8004ad2:	d10d      	bne.n	8004af0 <event_send_core+0xd6>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f3      	beq.n	8004ac2 <event_send_core+0xa8>
 8004ada:	7a22      	ldrb	r2, [r4, #8]
 8004adc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dbee      	blt.n	8004ac2 <event_send_core+0xa8>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	d0e0      	beq.n	8004aaa <event_send_core+0x90>
 8004ae8:	7a33      	ldrb	r3, [r6, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d1e9      	bne.n	8004ac2 <event_send_core+0xa8>
 8004aee:	e7dc      	b.n	8004aaa <event_send_core+0x90>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8004af0:	2f01      	cmp	r7, #1
 8004af2:	d001      	beq.n	8004af8 <event_send_core+0xde>
}
 8004af4:	4638      	mov	r0, r7
 8004af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8004af8:	6873      	ldr	r3, [r6, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f9      	beq.n	8004af4 <event_send_core+0xda>
 8004b00:	4630      	mov	r0, r6
 8004b02:	f7ff ff13 	bl	800492c <event_is_bubbled>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d0f4      	beq.n	8004af4 <event_send_core+0xda>
        e->current_target = e->current_target->parent;
 8004b0a:	6873      	ldr	r3, [r6, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	6073      	str	r3, [r6, #4]
        res = event_send_core(e);
 8004b10:	4630      	mov	r0, r6
 8004b12:	f7ff ff82 	bl	8004a1a <event_send_core>
 8004b16:	4607      	mov	r7, r0
        if(res != LV_RES_OK) return LV_RES_INV;
 8004b18:	2801      	cmp	r0, #1
 8004b1a:	d0eb      	beq.n	8004af4 <event_send_core+0xda>
 8004b1c:	2700      	movs	r7, #0
 8004b1e:	e7e9      	b.n	8004af4 <event_send_core+0xda>
        if(e->stop_processing) return LV_RES_OK;
 8004b20:	2701      	movs	r7, #1
 8004b22:	e7e7      	b.n	8004af4 <event_send_core+0xda>
            if(e->stop_processing) return LV_RES_OK;
 8004b24:	2701      	movs	r7, #1
 8004b26:	e7e5      	b.n	8004af4 <event_send_core+0xda>
            if(e->deleted) return LV_RES_INV;
 8004b28:	4617      	mov	r7, r2
 8004b2a:	e7e3      	b.n	8004af4 <event_send_core+0xda>

08004b2c <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
 8004b2c:	b318      	cbz	r0, 8004b76 <lv_event_send+0x4a>
{
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	b088      	sub	sp, #32
    e.target = obj;
 8004b32:	9001      	str	r0, [sp, #4]
    e.current_target = obj;
 8004b34:	9002      	str	r0, [sp, #8]
    e.code = event_code;
 8004b36:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9304      	str	r3, [sp, #16]
    e.param = param;
 8004b3e:	9205      	str	r2, [sp, #20]
    e.deleted = 0;
 8004b40:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8004b44:	f363 0200 	bfi	r2, r3, #0, #1
 8004b48:	f88d 201c 	strb.w	r2, [sp, #28]
    e.stop_bubbling = 0;
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	f363 0282 	bfi	r2, r3, #2, #1
 8004b52:	f88d 201c 	strb.w	r2, [sp, #28]
    e.stop_processing = 0;
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	f363 0241 	bfi	r2, r3, #1, #1
 8004b5c:	f88d 201c 	strb.w	r2, [sp, #28]
    e.prev = event_head;
 8004b60:	4c06      	ldr	r4, [pc, #24]	; (8004b7c <lv_event_send+0x50>)
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	9306      	str	r3, [sp, #24]
    event_head = &e;
 8004b66:	a801      	add	r0, sp, #4
 8004b68:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8004b6a:	f7ff ff56 	bl	8004a1a <event_send_core>
    event_head = e.prev;
 8004b6e:	9b06      	ldr	r3, [sp, #24]
 8004b70:	6023      	str	r3, [r4, #0]
}
 8004b72:	b008      	add	sp, #32
 8004b74:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8004b76:	2001      	movs	r0, #1
}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20001e0c 	.word	0x20001e0c

08004b80 <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 8004b80:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8004b82:	211c      	movs	r1, #28
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <_lv_group_init+0xc>)
 8004b86:	f005 f829 	bl	8009bdc <_lv_ll_init>
}
 8004b8a:	bd08      	pop	{r3, pc}
 8004b8c:	20001e90 	.word	0x20001e90

08004b90 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 8004b90:	4b01      	ldr	r3, [pc, #4]	; (8004b98 <lv_indev_get_act+0x8>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20001e10 	.word	0x20001e10

08004b9c <lv_indev_get_scroll_dir>:
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	b150      	cbz	r0, 8004bb6 <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8004ba0:	6802      	ldr	r2, [r0, #0]
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	2a01      	cmp	r2, #1
 8004ba6:	d001      	beq.n	8004bac <lv_indev_get_scroll_dir+0x10>
 8004ba8:	2a03      	cmp	r2, #3
 8004baa:	d106      	bne.n	8004bba <lv_indev_get_scroll_dir+0x1e>
    return indev->proc.types.pointer.scroll_dir;
 8004bac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8004bb0:	f000 000f 	and.w	r0, r0, #15
 8004bb4:	4770      	bx	lr
    if(indev == NULL) return false;
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8004bba:	2000      	movs	r0, #0
}
 8004bbc:	4770      	bx	lr

08004bbe <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
    if(indev == NULL) return NULL;
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b138      	cbz	r0, 8004bd2 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8004bc2:	6802      	ldr	r2, [r0, #0]
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	2a01      	cmp	r2, #1
 8004bc8:	d001      	beq.n	8004bce <lv_indev_get_scroll_obj+0x10>
 8004bca:	2a03      	cmp	r2, #3
 8004bcc:	d102      	bne.n	8004bd4 <lv_indev_get_scroll_obj+0x16>
    return indev->proc.types.pointer.scroll_obj;
 8004bce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004bd0:	4770      	bx	lr
 8004bd2:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8004bd4:	2000      	movs	r0, #0
}
 8004bd6:	4770      	bx	lr

08004bd8 <lv_init>:
{
    return lv_initialized;
}

void lv_init(void)
{
 8004bd8:	b508      	push	{r3, lr}
    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <lv_init+0x4c>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <lv_init+0xa>
    lv_extra_init();

    lv_initialized = true;

    LV_LOG_TRACE("finished");
}
 8004be0:	bd08      	pop	{r3, pc}
    lv_mem_init();
 8004be2:	f005 f8cf 	bl	8009d84 <lv_mem_init>
    _lv_timer_core_init();
 8004be6:	f005 fc75 	bl	800a4d4 <_lv_timer_core_init>
    _lv_fs_init();
 8004bea:	f004 fee3 	bl	80099b4 <_lv_fs_init>
    _lv_anim_core_init();
 8004bee:	f004 fbd5 	bl	800939c <_lv_anim_core_init>
    _lv_group_init();
 8004bf2:	f7ff ffc5 	bl	8004b80 <_lv_group_init>
    lv_draw_init();
 8004bf6:	f002 f9d7 	bl	8006fa8 <lv_draw_init>
    _lv_obj_style_init();
 8004bfa:	f001 fff5 	bl	8006be8 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004bfe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004c02:	4809      	ldr	r0, [pc, #36]	; (8004c28 <lv_init+0x50>)
 8004c04:	f004 ffea 	bl	8009bdc <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8004c08:	2158      	movs	r1, #88	; 0x58
 8004c0a:	4808      	ldr	r0, [pc, #32]	; (8004c2c <lv_init+0x54>)
 8004c0c:	f004 ffe6 	bl	8009bdc <_lv_ll_init>
    _lv_refr_init();
 8004c10:	f002 f949 	bl	8006ea6 <_lv_refr_init>
    _lv_img_decoder_init();
 8004c14:	f002 fd44 	bl	80076a0 <_lv_img_decoder_init>
    lv_extra_init();
 8004c18:	f004 f904 	bl	8008e24 <lv_extra_init>
    lv_initialized = true;
 8004c1c:	4b01      	ldr	r3, [pc, #4]	; (8004c24 <lv_init+0x4c>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
    LV_LOG_TRACE("finished");
 8004c22:	e7dd      	b.n	8004be0 <lv_init+0x8>
 8004c24:	20001e14 	.word	0x20001e14
 8004c28:	20001e78 	.word	0x20001e78
 8004c2c:	20001ea8 	.word	0x20001ea8

08004c30 <lv_obj_has_flag>:

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f ? true : false;
 8004c30:	69c3      	ldr	r3, [r0, #28]
 8004c32:	ea31 0303 	bics.w	r3, r1, r3
}
 8004c36:	bf0c      	ite	eq
 8004c38:	2001      	moveq	r0, #1
 8004c3a:	2000      	movne	r0, #0
 8004c3c:	4770      	bx	lr

08004c3e <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f) ? true : false;
 8004c3e:	69c3      	ldr	r3, [r0, #28]
 8004c40:	420b      	tst	r3, r1
}
 8004c42:	bf14      	ite	ne
 8004c44:	2001      	movne	r0, #1
 8004c46:	2000      	moveq	r0, #0
 8004c48:	4770      	bx	lr
	...

08004c4c <lv_obj_allocate_spec_attr>:

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 8004c4c:	6883      	ldr	r3, [r0, #8]
 8004c4e:	b103      	cbz	r3, 8004c52 <lv_obj_allocate_spec_attr+0x6>
 8004c50:	4770      	bx	lr
{
 8004c52:	b510      	push	{r4, lr}
 8004c54:	4604      	mov	r4, r0
        static uint32_t x = 0;
        x++;
 8004c56:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <lv_obj_allocate_spec_attr+0x3c>)
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8004c5e:	201c      	movs	r0, #28
 8004c60:	f005 f9b4 	bl	8009fcc <lv_mem_alloc>
 8004c64:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8004c66:	b168      	cbz	r0, 8004c84 <lv_obj_allocate_spec_attr+0x38>
        if(obj->spec_attr == NULL) return;

        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8004c68:	211c      	movs	r1, #28
 8004c6a:	f005 fa41 	bl	800a0f0 <lv_memset_00>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8004c6e:	68a2      	ldr	r2, [r4, #8]
 8004c70:	7e53      	ldrb	r3, [r2, #25]
 8004c72:	f043 030f 	orr.w	r3, r3, #15
 8004c76:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8004c78:	68a2      	ldr	r2, [r4, #8]
 8004c7a:	7e13      	ldrb	r3, [r2, #24]
 8004c7c:	f043 0303 	orr.w	r3, r3, #3
 8004c80:	7613      	strb	r3, [r2, #24]
    }
}
 8004c82:	bd10      	pop	{r4, pc}
        LV_ASSERT_MALLOC(obj->spec_attr);
 8004c84:	e7fe      	b.n	8004c84 <lv_obj_allocate_spec_attr+0x38>
 8004c86:	bf00      	nop
 8004c88:	20001e18 	.word	0x20001e18

08004c8c <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8004c8c:	6883      	ldr	r3, [r0, #8]
 8004c8e:	b113      	cbz	r3, 8004c96 <_lv_obj_get_ext_draw_size+0xa>
 8004c90:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8004c94:	4770      	bx	lr
    else return 0;
 8004c96:	2000      	movs	r0, #0
}
 8004c98:	4770      	bx	lr
	...

08004c9c <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4604      	mov	r4, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004ca0:	490b      	ldr	r1, [pc, #44]	; (8004cd0 <lv_obj_is_layout_positioned+0x34>)
 8004ca2:	f7ff ffcc 	bl	8004c3e <lv_obj_has_flag_any>
 8004ca6:	b110      	cbz	r0, 8004cae <lv_obj_is_layout_positioned+0x12>
 8004ca8:	2500      	movs	r5, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
 8004caa:	4628      	mov	r0, r5
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
 8004cae:	4605      	mov	r5, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f002 f8b3 	bl	8006e1c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d0f7      	beq.n	8004caa <lv_obj_is_layout_positioned+0xe>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004cba:	f241 0269 	movw	r2, #4201	; 0x1069
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	f002 f832 	bl	8006d28 <lv_obj_get_style_prop>
    if(layout) return true;
 8004cc4:	b280      	uxth	r0, r0
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d0ef      	beq.n	8004caa <lv_obj_is_layout_positioned+0xe>
 8004cca:	2501      	movs	r5, #1
 8004ccc:	e7ed      	b.n	8004caa <lv_obj_is_layout_positioned+0xe>
 8004cce:	bf00      	nop
 8004cd0:	00060001 	.word	0x00060001

08004cd4 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	460c      	mov	r4, r1
    layout_cnt++;
 8004cda:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <lv_layout_register+0x3c>)
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004ce2:	4e0c      	ldr	r6, [pc, #48]	; (8004d14 <lv_layout_register+0x40>)
 8004ce4:	00d9      	lsls	r1, r3, #3
 8004ce6:	6830      	ldr	r0, [r6, #0]
 8004ce8:	f005 f988 	bl	8009ffc <lv_mem_realloc>
 8004cec:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8004cee:	b168      	cbz	r0, 8004d0c <lv_layout_register+0x38>
 8004cf0:	4603      	mov	r3, r0

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8004cf2:	4a07      	ldr	r2, [pc, #28]	; (8004d10 <lv_layout_register+0x3c>)
 8004cf4:	6810      	ldr	r0, [r2, #0]
 8004cf6:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <lv_layout_register+0x40>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004d08:	6054      	str	r4, [r2, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8004d0c:	e7fe      	b.n	8004d0c <lv_layout_register+0x38>
 8004d0e:	bf00      	nop
 8004d10:	20001e1c 	.word	0x20001e1c
 8004d14:	20001eb4 	.word	0x20001eb4

08004d18 <lv_obj_get_coords>:
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 8004d18:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8004d1c:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8004d1e:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8004d22:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8004d24:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8004d28:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8004d2a:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8004d2e:	80cb      	strh	r3, [r1, #6]
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
}
 8004d30:	4770      	bx	lr

08004d32 <lv_obj_get_width>:
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}


lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8004d32:	4603      	mov	r3, r0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004d34:	8b00      	ldrh	r0, [r0, #24]
 8004d36:	8a9b      	ldrh	r3, [r3, #20]
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	b280      	uxth	r0, r0
 8004d3c:	3001      	adds	r0, #1
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
}
 8004d3e:	b200      	sxth	r0, r0
 8004d40:	4770      	bx	lr

08004d42 <lv_obj_get_height>:

lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8004d42:	4603      	mov	r3, r0
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004d44:	8b40      	ldrh	r0, [r0, #26]
 8004d46:	8adb      	ldrh	r3, [r3, #22]
 8004d48:	1ac0      	subs	r0, r0, r3
 8004d4a:	b280      	uxth	r0, r0
 8004d4c:	3001      	adds	r0, #1
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
}
 8004d4e:	b200      	sxth	r0, r0
 8004d50:	4770      	bx	lr

08004d52 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8004d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d54:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004d56:	f641 0212 	movw	r2, #6162	; 0x1812
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f001 ffe4 	bl	8006d28 <lv_obj_get_style_prop>
 8004d60:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004d62:	f641 0213 	movw	r2, #6163	; 0x1813
 8004d66:	2100      	movs	r1, #0
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f001 ffdd 	bl	8006d28 <lv_obj_get_style_prop>
 8004d6e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004d70:	f241 0232 	movw	r2, #4146	; 0x1032
 8004d74:	2100      	movs	r1, #0
 8004d76:	4628      	mov	r0, r5
 8004d78:	f001 ffd6 	bl	8006d28 <lv_obj_get_style_prop>
 8004d7c:	4604      	mov	r4, r0

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f7ff ffd7 	bl	8004d32 <lv_obj_get_width>
 8004d84:	b283      	uxth	r3, r0
 8004d86:	1bdb      	subs	r3, r3, r7
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	1b9b      	subs	r3, r3, r6
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	0060      	lsls	r0, r4, #1
 8004d90:	b280      	uxth	r0, r0
 8004d92:	1a18      	subs	r0, r3, r0
}
 8004d94:	b200      	sxth	r0, r0
 8004d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d98 <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004d9c:	f641 0210 	movw	r2, #6160	; 0x1810
 8004da0:	2100      	movs	r1, #0
 8004da2:	f001 ffc1 	bl	8006d28 <lv_obj_get_style_prop>
 8004da6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004da8:	f641 0211 	movw	r2, #6161	; 0x1811
 8004dac:	2100      	movs	r1, #0
 8004dae:	4628      	mov	r0, r5
 8004db0:	f001 ffba 	bl	8006d28 <lv_obj_get_style_prop>
 8004db4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004db6:	f241 0232 	movw	r2, #4146	; 0x1032
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f001 ffb3 	bl	8006d28 <lv_obj_get_style_prop>
 8004dc2:	4604      	mov	r4, r0

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f7ff ffbc 	bl	8004d42 <lv_obj_get_height>
 8004dca:	b283      	uxth	r3, r0
 8004dcc:	1bdb      	subs	r3, r3, r7
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	1b9b      	subs	r3, r3, r6
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	0060      	lsls	r0, r4, #1
 8004dd6:	b280      	uxth	r0, r0
 8004dd8:	1a18      	subs	r0, r3, r0
}
 8004dda:	b200      	sxth	r0, r0
 8004ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dde <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8004dde:	b570      	push	{r4, r5, r6, lr}
 8004de0:	4606      	mov	r6, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	f241 0232 	movw	r2, #4146	; 0x1032
 8004de8:	2100      	movs	r1, #0
 8004dea:	f001 ff9d 	bl	8006d28 <lv_obj_get_style_prop>
 8004dee:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    lv_obj_get_coords(obj, area);
 8004df0:	4621      	mov	r1, r4
 8004df2:	4630      	mov	r0, r6
 8004df4:	f7ff ff90 	bl	8004d18 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8004df8:	4269      	negs	r1, r5
 8004dfa:	b209      	sxth	r1, r1
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f004 fbe6 	bl	80095d0 <lv_area_increase>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004e04:	f641 0212 	movw	r2, #6162	; 0x1812
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f001 ff8c 	bl	8006d28 <lv_obj_get_style_prop>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004e10:	8823      	ldrh	r3, [r4, #0]
 8004e12:	fa13 f080 	uxtah	r0, r3, r0
 8004e16:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004e18:	f641 0213 	movw	r2, #6163	; 0x1813
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f001 ff82 	bl	8006d28 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8004e24:	b283      	uxth	r3, r0
 8004e26:	88a0      	ldrh	r0, [r4, #4]
 8004e28:	1ac0      	subs	r0, r0, r3
 8004e2a:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004e2c:	f641 0210 	movw	r2, #6160	; 0x1810
 8004e30:	2100      	movs	r1, #0
 8004e32:	4630      	mov	r0, r6
 8004e34:	f001 ff78 	bl	8006d28 <lv_obj_get_style_prop>
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004e38:	8863      	ldrh	r3, [r4, #2]
 8004e3a:	fa13 f080 	uxtah	r0, r3, r0
 8004e3e:	8060      	strh	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004e40:	f641 0211 	movw	r2, #6161	; 0x1811
 8004e44:	2100      	movs	r1, #0
 8004e46:	4630      	mov	r0, r6
 8004e48:	f001 ff6e 	bl	8006d28 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8004e4c:	b283      	uxth	r3, r0
 8004e4e:	88e0      	ldrh	r0, [r4, #6]
 8004e50:	1ac0      	subs	r0, r0, r3
 8004e52:	80e0      	strh	r0, [r4, #6]

}
 8004e54:	bd70      	pop	{r4, r5, r6, pc}

08004e56 <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 8004e56:	b500      	push	{lr}
 8004e58:	b083      	sub	sp, #12
    lv_point_t p = {0, LV_COORD_MIN};
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004e60:	f24e 0301 	movw	r3, #57345	; 0xe001
 8004e64:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004e68:	aa01      	add	r2, sp, #4
 8004e6a:	212c      	movs	r1, #44	; 0x2c
 8004e6c:	f7ff fe5e 	bl	8004b2c <lv_event_send>
    return p.x;
}
 8004e70:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004e74:	b003      	add	sp, #12
 8004e76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004e7c <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
 8004e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	b083      	sub	sp, #12
 8004e82:	4605      	mov	r5, r0
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8004e84:	2200      	movs	r2, #0
 8004e86:	4611      	mov	r1, r2
 8004e88:	f001 f9fa 	bl	8006280 <lv_obj_scroll_to_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004e8c:	f241 0232 	movw	r2, #4146	; 0x1032
 8004e90:	2100      	movs	r1, #0
 8004e92:	4628      	mov	r0, r5
 8004e94:	f001 ff48 	bl	8006d28 <lv_obj_get_style_prop>
 8004e98:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004e9a:	f641 0213 	movw	r2, #6163	; 0x1813
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f001 ff41 	bl	8006d28 <lv_obj_get_style_prop>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8004ea6:	b2a4      	uxth	r4, r4
 8004ea8:	fa14 f080 	uxtah	r0, r4, r0
 8004eac:	fa1f fa80 	uxth.w	sl, r0
 8004eb0:	b203      	sxth	r3, r0
 8004eb2:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004eb4:	f641 0212 	movw	r2, #6162	; 0x1812
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f001 ff34 	bl	8006d28 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8004ec0:	fa14 f480 	uxtah	r4, r4, r0
 8004ec4:	fa1f fb84 	uxth.w	fp, r4
 8004ec8:	b223      	sxth	r3, r4
 8004eca:	9300      	str	r3, [sp, #0]

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f7ff ffc2 	bl	8004e56 <lv_obj_get_self_width>
 8004ed2:	fa1b f980 	uxtah	r9, fp, r0
 8004ed6:	fa1a f989 	uxtah	r9, sl, r9
 8004eda:	fa0f f989 	sxth.w	r9, r9

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f001 ffdb 	bl	8006e9a <lv_obj_get_child_cnt>
 8004ee4:	4680      	mov	r8, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8004ee6:	f241 426a 	movw	r2, #5226	; 0x146a
 8004eea:	2100      	movs	r1, #0
 8004eec:	4628      	mov	r0, r5
 8004eee:	f001 ff1b 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8004ef2:	b2c0      	uxtb	r0, r0
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8004ef4:	2801      	cmp	r0, #1
 8004ef6:	d050      	beq.n	8004f9a <calc_content_width+0x11e>
            child_res += pad_left;
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 8004ef8:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8004efa:	4f5a      	ldr	r7, [pc, #360]	; (8005064 <calc_content_width+0x1e8>)
 8004efc:	e070      	b.n	8004fe0 <calc_content_width+0x164>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004efe:	f241 0209 	movw	r2, #4105	; 0x1009
 8004f02:	2100      	movs	r1, #0
 8004f04:	4630      	mov	r0, r6
 8004f06:	f001 ff0f 	bl	8006d28 <lv_obj_get_style_prop>
                switch(align) {
 8004f0a:	b2c0      	uxtb	r0, r0
 8004f0c:	2808      	cmp	r0, #8
 8004f0e:	d82d      	bhi.n	8004f6c <calc_content_width+0xf0>
 8004f10:	e8df f000 	tbb	[pc, r0]
 8004f14:	052c2c05 	.word	0x052c2c05
 8004f18:	2c052c2c 	.word	0x2c052c2c
 8004f1c:	05          	.byte	0x05
 8004f1d:	00          	.byte	0x00
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8004f1e:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8004f22:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	3301      	adds	r3, #1
 8004f2a:	429f      	cmp	r7, r3
 8004f2c:	bfb8      	it	lt
 8004f2e:	461f      	movlt	r7, r3
 8004f30:	b23f      	sxth	r7, r7
        for(i = 0; i < child_cnt; i++) {
 8004f32:	3401      	adds	r4, #1
 8004f34:	4544      	cmp	r4, r8
 8004f36:	d233      	bcs.n	8004fa0 <calc_content_width+0x124>
            lv_obj_t * child = obj->spec_attr->children[i];
 8004f38:	68ab      	ldr	r3, [r5, #8]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004f40:	4949      	ldr	r1, [pc, #292]	; (8005068 <calc_content_width+0x1ec>)
 8004f42:	4630      	mov	r0, r6
 8004f44:	f7ff fe7b 	bl	8004c3e <lv_obj_has_flag_any>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d1f2      	bne.n	8004f32 <calc_content_width+0xb6>
            if(!lv_obj_is_layout_positioned(child)) {
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff fea5 	bl	8004c9c <lv_obj_is_layout_positioned>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d0d3      	beq.n	8004efe <calc_content_width+0x82>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8004f56:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8004f5a:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	3301      	adds	r3, #1
 8004f62:	429f      	cmp	r7, r3
 8004f64:	bfb8      	it	lt
 8004f66:	461f      	movlt	r7, r3
 8004f68:	b23f      	sxth	r7, r7
 8004f6a:	e7e2      	b.n	8004f32 <calc_content_width+0xb6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8004f6c:	f241 0207 	movw	r2, #4103	; 0x1007
 8004f70:	2100      	movs	r1, #0
 8004f72:	4630      	mov	r0, r6
 8004f74:	f001 fed8 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004f78:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1d9      	bne.n	8004f32 <calc_content_width+0xb6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004f7e:	8b33      	ldrh	r3, [r6, #24]
 8004f80:	8ab2      	ldrh	r2, [r6, #20]
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3301      	adds	r3, #1
 8004f88:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8004f8a:	9901      	ldr	r1, [sp, #4]
 8004f8c:	fa01 f383 	sxtah	r3, r1, r3
 8004f90:	429f      	cmp	r7, r3
 8004f92:	dcce      	bgt.n	8004f32 <calc_content_width+0xb6>
 8004f94:	4452      	add	r2, sl
 8004f96:	b217      	sxth	r7, r2
 8004f98:	e7cb      	b.n	8004f32 <calc_content_width+0xb6>
        for(i = 0; i < child_cnt; i++) {
 8004f9a:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8004f9c:	4f31      	ldr	r7, [pc, #196]	; (8005064 <calc_content_width+0x1e8>)
 8004f9e:	e7c9      	b.n	8004f34 <calc_content_width+0xb8>
        if(child_res != LV_COORD_MIN) {
 8004fa0:	4b30      	ldr	r3, [pc, #192]	; (8005064 <calc_content_width+0x1e8>)
 8004fa2:	429f      	cmp	r7, r3
 8004fa4:	d054      	beq.n	8005050 <calc_content_width+0x1d4>
            child_res += pad_left;
 8004fa6:	445f      	add	r7, fp
 8004fa8:	b23f      	sxth	r7, r7
 8004faa:	e051      	b.n	8005050 <calc_content_width+0x1d4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004fac:	f241 0209 	movw	r2, #4105	; 0x1009
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f001 feb8 	bl	8006d28 <lv_obj_get_style_prop>
            lv_obj_t * child = obj->spec_attr->children[i];
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;

            if(!lv_obj_is_layout_positioned(child)) {
                lv_align_t align = lv_obj_get_style_align(child, 0);
                switch(align) {
 8004fb8:	b2c0      	uxtb	r0, r0
 8004fba:	2807      	cmp	r0, #7
 8004fbc:	d82c      	bhi.n	8005018 <calc_content_width+0x19c>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8004fc4:	f010 0f93 	tst.w	r0, #147	; 0x93
 8004fc8:	d026      	beq.n	8005018 <calc_content_width+0x19c>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8004fca:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8004fce:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	429f      	cmp	r7, r3
 8004fd8:	bfb8      	it	lt
 8004fda:	461f      	movlt	r7, r3
 8004fdc:	b23f      	sxth	r7, r7
        for(i = 0; i < child_cnt; i++) {
 8004fde:	3401      	adds	r4, #1
 8004fe0:	4544      	cmp	r4, r8
 8004fe2:	d230      	bcs.n	8005046 <calc_content_width+0x1ca>
            lv_obj_t * child = obj->spec_attr->children[i];
 8004fe4:	68ab      	ldr	r3, [r5, #8]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8004fec:	491e      	ldr	r1, [pc, #120]	; (8005068 <calc_content_width+0x1ec>)
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f7ff fe25 	bl	8004c3e <lv_obj_has_flag_any>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d1f2      	bne.n	8004fde <calc_content_width+0x162>
            if(!lv_obj_is_layout_positioned(child)) {
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7ff fe4f 	bl	8004c9c <lv_obj_is_layout_positioned>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d0d4      	beq.n	8004fac <calc_content_width+0x130>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8005002:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8005006:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	3301      	adds	r3, #1
 800500e:	429f      	cmp	r7, r3
 8005010:	bfb8      	it	lt
 8005012:	461f      	movlt	r7, r3
 8005014:	b23f      	sxth	r7, r7
 8005016:	e7e2      	b.n	8004fde <calc_content_width+0x162>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005018:	f241 0208 	movw	r2, #4104	; 0x1008
 800501c:	2100      	movs	r1, #0
 800501e:	4630      	mov	r0, r6
 8005020:	f001 fe82 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005024:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8005026:	2800      	cmp	r0, #0
 8005028:	d1d9      	bne.n	8004fde <calc_content_width+0x162>
 800502a:	8b33      	ldrh	r3, [r6, #24]
 800502c:	8ab2      	ldrh	r2, [r6, #20]
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	b29b      	uxth	r3, r3
 8005032:	3301      	adds	r3, #1
 8005034:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8005036:	9900      	ldr	r1, [sp, #0]
 8005038:	fa01 f383 	sxtah	r3, r1, r3
 800503c:	429f      	cmp	r7, r3
 800503e:	dcce      	bgt.n	8004fde <calc_content_width+0x162>
 8005040:	445a      	add	r2, fp
 8005042:	b217      	sxth	r7, r2
 8005044:	e7cb      	b.n	8004fde <calc_content_width+0x162>
            }
        }

        if(child_res != LV_COORD_MIN) {
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <calc_content_width+0x1e8>)
 8005048:	429f      	cmp	r7, r3
 800504a:	d001      	beq.n	8005050 <calc_content_width+0x1d4>
            child_res += pad_right;
 800504c:	4457      	add	r7, sl
 800504e:	b23f      	sxth	r7, r7
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <calc_content_width+0x1e8>)
 8005052:	429f      	cmp	r7, r3
 8005054:	d002      	beq.n	800505c <calc_content_width+0x1e0>
    else return LV_MAX(child_res, self_w);
 8005056:	45b9      	cmp	r9, r7
 8005058:	bfb8      	it	lt
 800505a:	46b9      	movlt	r9, r7
}
 800505c:	4648      	mov	r0, r9
 800505e:	b003      	add	sp, #12
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	ffffe001 	.word	0xffffe001
 8005068:	00040001 	.word	0x00040001

0800506c <lv_obj_get_self_height>:
{
 800506c:	b500      	push	{lr}
 800506e:	b083      	sub	sp, #12
    lv_point_t p = {LV_COORD_MIN, 0};
 8005070:	f24e 0301 	movw	r3, #57345	; 0xe001
 8005074:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005078:	2300      	movs	r3, #0
 800507a:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 800507e:	aa01      	add	r2, sp, #4
 8005080:	212c      	movs	r1, #44	; 0x2c
 8005082:	f7ff fd53 	bl	8004b2c <lv_event_send>
}
 8005086:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800508a:	b003      	add	sp, #12
 800508c:	f85d fb04 	ldr.w	pc, [sp], #4

08005090 <calc_content_height>:

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
 8005090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005094:	b083      	sub	sp, #12
 8005096:	4606      	mov	r6, r0
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8005098:	2200      	movs	r2, #0
 800509a:	4611      	mov	r1, r2
 800509c:	f001 f904 	bl	80062a8 <lv_obj_scroll_to_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80050a0:	f241 0232 	movw	r2, #4146	; 0x1032
 80050a4:	2100      	movs	r1, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	f001 fe3e 	bl	8006d28 <lv_obj_get_style_prop>
 80050ac:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80050ae:	f641 0210 	movw	r2, #6160	; 0x1810
 80050b2:	2100      	movs	r1, #0
 80050b4:	4630      	mov	r0, r6
 80050b6:	f001 fe37 	bl	8006d28 <lv_obj_get_style_prop>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80050ba:	b2a4      	uxth	r4, r4
 80050bc:	fa14 f080 	uxtah	r0, r4, r0
 80050c0:	fa1f fb80 	uxth.w	fp, r0
 80050c4:	b203      	sxth	r3, r0
 80050c6:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80050c8:	f641 0211 	movw	r2, #6161	; 0x1811
 80050cc:	2100      	movs	r1, #0
 80050ce:	4630      	mov	r0, r6
 80050d0:	f001 fe2a 	bl	8006d28 <lv_obj_get_style_prop>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 80050d4:	fa14 fa80 	uxtah	sl, r4, r0
 80050d8:	fa1f fa8a 	uxth.w	sl, sl

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 80050dc:	4630      	mov	r0, r6
 80050de:	f7ff ffc5 	bl	800506c <lv_obj_get_self_height>
 80050e2:	fa1b f980 	uxtah	r9, fp, r0
 80050e6:	fa1a f989 	uxtah	r9, sl, r9
 80050ea:	fa0f f989 	sxth.w	r9, r9

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80050ee:	4630      	mov	r0, r6
 80050f0:	f001 fed3 	bl	8006e9a <lv_obj_get_child_cnt>
 80050f4:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 80050f6:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 80050f8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80051b0 <calc_content_height+0x120>
    for(i = 0; i < child_cnt; i++) {
 80050fc:	e014      	b.n	8005128 <calc_content_height+0x98>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80050fe:	f241 0209 	movw	r2, #4105	; 0x1009
 8005102:	2100      	movs	r1, #0
 8005104:	4628      	mov	r0, r5
 8005106:	f001 fe0f 	bl	8006d28 <lv_obj_get_style_prop>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;


        if(!lv_obj_is_layout_positioned(child)) {
            lv_align_t align = lv_obj_get_style_align(child, 0);
            switch(align) {
 800510a:	b2c0      	uxtb	r0, r0
 800510c:	2803      	cmp	r0, #3
 800510e:	d828      	bhi.n	8005162 <calc_content_height+0xd2>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8005110:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8005114:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	3301      	adds	r3, #1
 800511c:	4598      	cmp	r8, r3
 800511e:	bfb8      	it	lt
 8005120:	4698      	movlt	r8, r3
 8005122:	fa0f f888 	sxth.w	r8, r8
    for(i = 0; i < child_cnt; i++) {
 8005126:	3401      	adds	r4, #1
 8005128:	42bc      	cmp	r4, r7
 800512a:	d232      	bcs.n	8005192 <calc_content_height+0x102>
        lv_obj_t * child = obj->spec_attr->children[i];
 800512c:	68b3      	ldr	r3, [r6, #8]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005134:	491d      	ldr	r1, [pc, #116]	; (80051ac <calc_content_height+0x11c>)
 8005136:	4628      	mov	r0, r5
 8005138:	f7ff fd81 	bl	8004c3e <lv_obj_has_flag_any>
 800513c:	2800      	cmp	r0, #0
 800513e:	d1f2      	bne.n	8005126 <calc_content_height+0x96>
        if(!lv_obj_is_layout_positioned(child)) {
 8005140:	4628      	mov	r0, r5
 8005142:	f7ff fdab 	bl	8004c9c <lv_obj_is_layout_positioned>
 8005146:	2800      	cmp	r0, #0
 8005148:	d0d9      	beq.n	80050fe <calc_content_height+0x6e>
                    }
                    break;
            }
        }
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 800514a:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 800514e:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	3301      	adds	r3, #1
 8005156:	4598      	cmp	r8, r3
 8005158:	bfb8      	it	lt
 800515a:	4698      	movlt	r8, r3
 800515c:	fa0f f888 	sxth.w	r8, r8
 8005160:	e7e1      	b.n	8005126 <calc_content_height+0x96>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005162:	f241 0208 	movw	r2, #4104	; 0x1008
 8005166:	2100      	movs	r1, #0
 8005168:	4628      	mov	r0, r5
 800516a:	f001 fddd 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800516e:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8005170:	2800      	cmp	r0, #0
 8005172:	d1d8      	bne.n	8005126 <calc_content_height+0x96>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005174:	8b6b      	ldrh	r3, [r5, #26]
 8005176:	8aea      	ldrh	r2, [r5, #22]
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	b29b      	uxth	r3, r3
 800517c:	3301      	adds	r3, #1
 800517e:	b29a      	uxth	r2, r3
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8005180:	9901      	ldr	r1, [sp, #4]
 8005182:	fa01 f383 	sxtah	r3, r1, r3
 8005186:	4598      	cmp	r8, r3
 8005188:	dccd      	bgt.n	8005126 <calc_content_height+0x96>
 800518a:	445a      	add	r2, fp
 800518c:	fa0f f882 	sxth.w	r8, r2
 8005190:	e7c9      	b.n	8005126 <calc_content_height+0x96>
        }
    }

    if(child_res != LV_COORD_MIN) {
 8005192:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <calc_content_height+0x120>)
 8005194:	4598      	cmp	r8, r3
 8005196:	d005      	beq.n	80051a4 <calc_content_height+0x114>
        child_res += pad_bottom;
 8005198:	44d0      	add	r8, sl
 800519a:	fa0f f888 	sxth.w	r8, r8
        return LV_MAX(child_res, self_h);
 800519e:	45c1      	cmp	r9, r8
 80051a0:	bfb8      	it	lt
 80051a2:	46c1      	movlt	r9, r8
    }
    else {
        return self_h;
    }

}
 80051a4:	4648      	mov	r0, r9
 80051a6:	b003      	add	sp, #12
 80051a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ac:	00040001 	.word	0x00040001
 80051b0:	ffffe001 	.word	0xffffe001

080051b4 <lv_obj_move_children_by>:
{
 80051b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	4682      	mov	sl, r0
 80051ba:	460f      	mov	r7, r1
 80051bc:	4616      	mov	r6, r2
 80051be:	4699      	mov	r9, r3
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80051c0:	f001 fe6b 	bl	8006e9a <lv_obj_get_child_cnt>
 80051c4:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 80051c6:	2500      	movs	r5, #0
 80051c8:	e016      	b.n	80051f8 <lv_obj_move_children_by+0x44>
        child->coords.x1 += x_diff;
 80051ca:	b2bb      	uxth	r3, r7
 80051cc:	8aa2      	ldrh	r2, [r4, #20]
 80051ce:	441a      	add	r2, r3
 80051d0:	82a2      	strh	r2, [r4, #20]
        child->coords.y1 += y_diff;
 80051d2:	fa1f fc86 	uxth.w	ip, r6
 80051d6:	8ae2      	ldrh	r2, [r4, #22]
 80051d8:	4462      	add	r2, ip
 80051da:	82e2      	strh	r2, [r4, #22]
        child->coords.x2 += x_diff;
 80051dc:	8b22      	ldrh	r2, [r4, #24]
 80051de:	4413      	add	r3, r2
 80051e0:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 80051e2:	8b63      	ldrh	r3, [r4, #26]
 80051e4:	449c      	add	ip, r3
 80051e6:	f8a4 c01a 	strh.w	ip, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80051ea:	2300      	movs	r3, #0
 80051ec:	4632      	mov	r2, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7ff ffdf 	bl	80051b4 <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 80051f6:	3501      	adds	r5, #1
 80051f8:	4545      	cmp	r5, r8
 80051fa:	d20f      	bcs.n	800521c <lv_obj_move_children_by+0x68>
        lv_obj_t * child = obj->spec_attr->children[i];
 80051fc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8005206:	f1b9 0f00 	cmp.w	r9, #0
 800520a:	d0de      	beq.n	80051ca <lv_obj_move_children_by+0x16>
 800520c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005210:	4620      	mov	r0, r4
 8005212:	f7ff fd0d 	bl	8004c30 <lv_obj_has_flag>
 8005216:	2800      	cmp	r0, #0
 8005218:	d0d7      	beq.n	80051ca <lv_obj_move_children_by+0x16>
 800521a:	e7ec      	b.n	80051f6 <lv_obj_move_children_by+0x42>
}
 800521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005220 <lv_obj_area_is_visible>:
{
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	4604      	mov	r4, r0
 8005228:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 800522a:	2101      	movs	r1, #1
 800522c:	f7ff fd00 	bl	8004c30 <lv_obj_has_flag>
 8005230:	b120      	cbz	r0, 800523c <lv_obj_area_is_visible+0x1c>
 8005232:	2600      	movs	r6, #0
}
 8005234:	4630      	mov	r0, r6
 8005236:	b002      	add	sp, #8
 8005238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800523c:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 800523e:	4620      	mov	r0, r4
 8005240:	f001 fdf0 	bl	8006e24 <lv_obj_get_screen>
 8005244:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8005246:	f001 fdf5 	bl	8006e34 <lv_obj_get_disp>
 800524a:	4680      	mov	r8, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800524c:	f7ff fb30 	bl	80048b0 <lv_disp_get_scr_act>
 8005250:	4287      	cmp	r7, r0
 8005252:	d00e      	beq.n	8005272 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8005254:	4640      	mov	r0, r8
 8005256:	f7ff fb37 	bl	80048c8 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800525a:	4287      	cmp	r7, r0
 800525c:	d009      	beq.n	8005272 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800525e:	4640      	mov	r0, r8
 8005260:	f7ff fb3e 	bl	80048e0 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8005264:	4287      	cmp	r7, r0
 8005266:	d004      	beq.n	8005272 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8005268:	4640      	mov	r0, r8
 800526a:	f7ff fb45 	bl	80048f8 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800526e:	4287      	cmp	r7, r0
 8005270:	d1e0      	bne.n	8005234 <lv_obj_area_is_visible+0x14>
    if(!lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8005272:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005276:	4620      	mov	r0, r4
 8005278:	f7ff fcda 	bl	8004c30 <lv_obj_has_flag>
 800527c:	bb28      	cbnz	r0, 80052ca <lv_obj_area_is_visible+0xaa>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff fd04 	bl	8004c8c <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8005284:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8005288:	f8ad 1000 	strh.w	r1, [sp]
    dest->y1 = src->y1;
 800528c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8005290:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 8005294:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8005298:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 800529c:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
 80052a0:	f8ad 7006 	strh.w	r7, [sp, #6]
        obj_coords.x1 -= ext_size;
 80052a4:	b280      	uxth	r0, r0
 80052a6:	1a09      	subs	r1, r1, r0
 80052a8:	f8ad 1000 	strh.w	r1, [sp]
        obj_coords.y1 -= ext_size;
 80052ac:	1a12      	subs	r2, r2, r0
 80052ae:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
 80052b2:	4403      	add	r3, r0
 80052b4:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
 80052b8:	4438      	add	r0, r7
 80052ba:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 80052be:	466a      	mov	r2, sp
 80052c0:	4629      	mov	r1, r5
 80052c2:	4628      	mov	r0, r5
 80052c4:	f004 f993 	bl	80095ee <_lv_area_intersect>
 80052c8:	b120      	cbz	r0, 80052d4 <lv_obj_area_is_visible+0xb4>
    lv_obj_t * par = lv_obj_get_parent(obj);
 80052ca:	4620      	mov	r0, r4
 80052cc:	f001 fda6 	bl	8006e1c <lv_obj_get_parent>
 80052d0:	4604      	mov	r4, r0
    while(par != NULL) {
 80052d2:	e005      	b.n	80052e0 <lv_obj_area_is_visible+0xc0>
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 80052d4:	4606      	mov	r6, r0
 80052d6:	e7ad      	b.n	8005234 <lv_obj_area_is_visible+0x14>
        par = lv_obj_get_parent(par);
 80052d8:	4620      	mov	r0, r4
 80052da:	f001 fd9f 	bl	8006e1c <lv_obj_get_parent>
 80052de:	4604      	mov	r4, r0
    while(par != NULL) {
 80052e0:	b1b4      	cbz	r4, 8005310 <lv_obj_area_is_visible+0xf0>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 80052e2:	2101      	movs	r1, #1
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7ff fca3 	bl	8004c30 <lv_obj_has_flag>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d1a2      	bne.n	8005234 <lv_obj_area_is_visible+0x14>
        if(!lv_obj_has_flag(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80052ee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7ff fc9c 	bl	8004c30 <lv_obj_has_flag>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d1ed      	bne.n	80052d8 <lv_obj_area_is_visible+0xb8>
            if(!_lv_area_intersect(area, area, &par->coords)) return false;
 80052fc:	f104 0214 	add.w	r2, r4, #20
 8005300:	4629      	mov	r1, r5
 8005302:	4628      	mov	r0, r5
 8005304:	f004 f973 	bl	80095ee <_lv_area_intersect>
 8005308:	2800      	cmp	r0, #0
 800530a:	d1e5      	bne.n	80052d8 <lv_obj_area_is_visible+0xb8>
 800530c:	4606      	mov	r6, r0
 800530e:	e791      	b.n	8005234 <lv_obj_area_is_visible+0x14>
    return true;
 8005310:	2601      	movs	r6, #1
 8005312:	e78f      	b.n	8005234 <lv_obj_area_is_visible+0x14>

08005314 <lv_obj_invalidate_area>:
{
 8005314:	b510      	push	{r4, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	4604      	mov	r4, r0
    dest->x1 = src->x1;
 800531a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800531e:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8005322:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005326:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 800532a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800532e:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8005332:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005336:	f8ad 3006 	strh.w	r3, [sp, #6]
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 800533a:	4669      	mov	r1, sp
 800533c:	f7ff ff70 	bl	8005220 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8005340:	b908      	cbnz	r0, 8005346 <lv_obj_invalidate_area+0x32>
}
 8005342:	b002      	add	sp, #8
 8005344:	bd10      	pop	{r4, pc}
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8005346:	4620      	mov	r0, r4
 8005348:	f001 fd74 	bl	8006e34 <lv_obj_get_disp>
 800534c:	4669      	mov	r1, sp
 800534e:	f001 fdab 	bl	8006ea8 <_lv_inv_area>
}
 8005352:	e7f6      	b.n	8005342 <lv_obj_invalidate_area+0x2e>

08005354 <lv_obj_invalidate>:
{
 8005354:	b510      	push	{r4, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	4604      	mov	r4, r0
    while(lv_obj_get_parent(obj) && lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800535a:	e003      	b.n	8005364 <lv_obj_invalidate+0x10>
        obj = lv_obj_get_parent(obj);
 800535c:	4620      	mov	r0, r4
 800535e:	f001 fd5d 	bl	8006e1c <lv_obj_get_parent>
 8005362:	4604      	mov	r4, r0
    while(lv_obj_get_parent(obj) && lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8005364:	4620      	mov	r0, r4
 8005366:	f001 fd59 	bl	8006e1c <lv_obj_get_parent>
 800536a:	b130      	cbz	r0, 800537a <lv_obj_invalidate+0x26>
 800536c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005370:	4620      	mov	r0, r4
 8005372:	f7ff fc5d 	bl	8004c30 <lv_obj_has_flag>
 8005376:	2800      	cmp	r0, #0
 8005378:	d1f0      	bne.n	800535c <lv_obj_invalidate+0x8>
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff fc86 	bl	8004c8c <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8005380:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8005384:	f8ad 1000 	strh.w	r1, [sp]
    dest->y1 = src->y1;
 8005388:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800538c:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 8005390:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8005394:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8005398:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
 800539c:	f8ad c006 	strh.w	ip, [sp, #6]
    obj_coords.x1 -= ext_size;
 80053a0:	b280      	uxth	r0, r0
 80053a2:	1a09      	subs	r1, r1, r0
 80053a4:	f8ad 1000 	strh.w	r1, [sp]
    obj_coords.y1 -= ext_size;
 80053a8:	1a12      	subs	r2, r2, r0
 80053aa:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
 80053ae:	4403      	add	r3, r0
 80053b0:	f8ad 3004 	strh.w	r3, [sp, #4]
    obj_coords.y2 += ext_size;
 80053b4:	4460      	add	r0, ip
 80053b6:	f8ad 0006 	strh.w	r0, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 80053ba:	4669      	mov	r1, sp
 80053bc:	4620      	mov	r0, r4
 80053be:	f7ff ffa9 	bl	8005314 <lv_obj_invalidate_area>
}
 80053c2:	b002      	add	sp, #8
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <lv_obj_move_to>:
{
 80053c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	b087      	sub	sp, #28
 80053cc:	4604      	mov	r4, r0
 80053ce:	460d      	mov	r5, r1
 80053d0:	4616      	mov	r6, r2
    lv_obj_t * parent = obj->parent;
 80053d2:	6847      	ldr	r7, [r0, #4]
    if(parent) {
 80053d4:	b36f      	cbz	r7, 8005432 <lv_obj_move_to+0x6c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80053d6:	f641 0212 	movw	r2, #6162	; 0x1812
 80053da:	2100      	movs	r1, #0
 80053dc:	4638      	mov	r0, r7
 80053de:	f001 fca3 	bl	8006d28 <lv_obj_get_style_prop>
 80053e2:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
 80053e4:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80053e8:	f641 0210 	movw	r2, #6160	; 0x1810
 80053ec:	2100      	movs	r1, #0
 80053ee:	4638      	mov	r0, r7
 80053f0:	f001 fc9a 	bl	8006d28 <lv_obj_get_style_prop>
 80053f4:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 80053f6:	fa0f f880 	sxth.w	r8, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80053fa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80053fe:	4620      	mov	r0, r4
 8005400:	f7ff fc16 	bl	8004c30 <lv_obj_has_flag>
 8005404:	2800      	cmp	r0, #0
 8005406:	d03c      	beq.n	8005482 <lv_obj_move_to+0xbc>
            x += pad_left + parent->coords.x1;
 8005408:	8ab8      	ldrh	r0, [r7, #20]
 800540a:	4482      	add	sl, r0
 800540c:	fa15 f58a 	uxtah	r5, r5, sl
 8005410:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1;
 8005412:	8afa      	ldrh	r2, [r7, #22]
 8005414:	444a      	add	r2, r9
 8005416:	fa16 f682 	uxtah	r6, r6, r2
 800541a:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800541c:	f241 0232 	movw	r2, #4146	; 0x1032
 8005420:	2100      	movs	r1, #0
 8005422:	4638      	mov	r0, r7
 8005424:	f001 fc80 	bl	8006d28 <lv_obj_get_style_prop>
        x += border_width;
 8005428:	b280      	uxth	r0, r0
 800542a:	4405      	add	r5, r0
 800542c:	b22d      	sxth	r5, r5
        y += border_width;
 800542e:	4406      	add	r6, r0
 8005430:	b236      	sxth	r6, r6
    diff.x = x - obj->coords.x1;
 8005432:	8aa1      	ldrh	r1, [r4, #20]
 8005434:	1a6d      	subs	r5, r5, r1
 8005436:	fa1f f885 	uxth.w	r8, r5
 800543a:	b22d      	sxth	r5, r5
 800543c:	f8ad 5014 	strh.w	r5, [sp, #20]
    diff.y = y - obj->coords.y1;
 8005440:	8ae2      	ldrh	r2, [r4, #22]
 8005442:	1ab2      	subs	r2, r6, r2
 8005444:	fa1f f982 	uxth.w	r9, r2
 8005448:	b216      	sxth	r6, r2
 800544a:	f8ad 6016 	strh.w	r6, [sp, #22]
    if(diff.x == 0 && diff.y == 0) return;
 800544e:	b90d      	cbnz	r5, 8005454 <lv_obj_move_to+0x8e>
 8005450:	2e00      	cmp	r6, #0
 8005452:	d058      	beq.n	8005506 <lv_obj_move_to+0x140>
    lv_obj_invalidate(obj);
 8005454:	4620      	mov	r0, r4
 8005456:	f7ff ff7d 	bl	8005354 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 800545a:	a903      	add	r1, sp, #12
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff fc5b 	bl	8004d18 <lv_obj_get_coords>
    if(parent) {
 8005462:	b31f      	cbz	r7, 80054ac <lv_obj_move_to+0xe6>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8005464:	a901      	add	r1, sp, #4
 8005466:	4638      	mov	r0, r7
 8005468:	f7ff fcb9 	bl	8004dde <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800546c:	2200      	movs	r2, #0
 800546e:	a901      	add	r1, sp, #4
 8005470:	a803      	add	r0, sp, #12
 8005472:	f004 f9ad 	bl	80097d0 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8005476:	4682      	mov	sl, r0
 8005478:	b9d0      	cbnz	r0, 80054b0 <lv_obj_move_to+0xea>
 800547a:	4638      	mov	r0, r7
 800547c:	f001 fb44 	bl	8006b08 <lv_obj_scrollbar_invalidate>
 8005480:	e016      	b.n	80054b0 <lv_obj_move_to+0xea>
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8005482:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005486:	449b      	add	fp, r3
 8005488:	4638      	mov	r0, r7
 800548a:	f000 fc7b 	bl	8005d84 <lv_obj_get_scroll_x>
 800548e:	ebab 0b00 	sub.w	fp, fp, r0
 8005492:	445d      	add	r5, fp
 8005494:	b22d      	sxth	r5, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8005496:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800549a:	4498      	add	r8, r3
 800549c:	4638      	mov	r0, r7
 800549e:	f000 fc86 	bl	8005dae <lv_obj_get_scroll_y>
 80054a2:	eba8 0800 	sub.w	r8, r8, r0
 80054a6:	4446      	add	r6, r8
 80054a8:	b236      	sxth	r6, r6
 80054aa:	e7b7      	b.n	800541c <lv_obj_move_to+0x56>
    bool on1 = false;
 80054ac:	f04f 0a00 	mov.w	sl, #0
    obj->coords.x1 += diff.x;
 80054b0:	8aa3      	ldrh	r3, [r4, #20]
 80054b2:	4443      	add	r3, r8
 80054b4:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 80054b6:	8ae3      	ldrh	r3, [r4, #22]
 80054b8:	444b      	add	r3, r9
 80054ba:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 80054bc:	8b23      	ldrh	r3, [r4, #24]
 80054be:	4498      	add	r8, r3
 80054c0:	f8a4 8018 	strh.w	r8, [r4, #24]
    obj->coords.y2 += diff.y;
 80054c4:	8b63      	ldrh	r3, [r4, #26]
 80054c6:	4499      	add	r9, r3
 80054c8:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 80054cc:	2300      	movs	r3, #0
 80054ce:	4632      	mov	r2, r6
 80054d0:	4629      	mov	r1, r5
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7ff fe6e 	bl	80051b4 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80054d8:	b127      	cbz	r7, 80054e4 <lv_obj_move_to+0x11e>
 80054da:	4622      	mov	r2, r4
 80054dc:	2122      	movs	r1, #34	; 0x22
 80054de:	4638      	mov	r0, r7
 80054e0:	f7ff fb24 	bl	8004b2c <lv_event_send>
    lv_obj_invalidate(obj);
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7ff ff35 	bl	8005354 <lv_obj_invalidate>
    if(parent) {
 80054ea:	b167      	cbz	r7, 8005506 <lv_obj_move_to+0x140>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80054ec:	2200      	movs	r2, #0
 80054ee:	a901      	add	r1, sp, #4
 80054f0:	f104 0014 	add.w	r0, r4, #20
 80054f4:	f004 f96c 	bl	80097d0 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80054f8:	f1ba 0f00 	cmp.w	sl, #0
 80054fc:	d100      	bne.n	8005500 <lv_obj_move_to+0x13a>
 80054fe:	b110      	cbz	r0, 8005506 <lv_obj_move_to+0x140>
 8005500:	4638      	mov	r0, r7
 8005502:	f001 fb01 	bl	8006b08 <lv_obj_scrollbar_invalidate>
}
 8005506:	b007      	add	sp, #28
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800550c <lv_obj_refr_pos>:
{
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	b085      	sub	sp, #20
 8005512:	4604      	mov	r4, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 8005514:	f7ff fbc2 	bl	8004c9c <lv_obj_is_layout_positioned>
 8005518:	b110      	cbz	r0, 8005520 <lv_obj_refr_pos+0x14>
}
 800551a:	b005      	add	sp, #20
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005520:	4620      	mov	r0, r4
 8005522:	f001 fc7b 	bl	8006e1c <lv_obj_get_parent>
 8005526:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8005528:	f241 0207 	movw	r2, #4103	; 0x1007
 800552c:	2100      	movs	r1, #0
 800552e:	4620      	mov	r0, r4
 8005530:	f001 fbfa 	bl	8006d28 <lv_obj_get_style_prop>
 8005534:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 8005536:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005538:	f241 0208 	movw	r2, #4104	; 0x1008
 800553c:	2100      	movs	r1, #0
 800553e:	4620      	mov	r0, r4
 8005540:	f001 fbf2 	bl	8006d28 <lv_obj_get_style_prop>
 8005544:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8005546:	b206      	sxth	r6, r0
    if(parent == NULL) {
 8005548:	2f00      	cmp	r7, #0
 800554a:	d052      	beq.n	80055f2 <lv_obj_refr_pos+0xe6>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 800554c:	4638      	mov	r0, r7
 800554e:	f7ff fc00 	bl	8004d52 <lv_obj_get_content_width>
 8005552:	9000      	str	r0, [sp, #0]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8005554:	4638      	mov	r0, r7
 8005556:	f7ff fc1f 	bl	8004d98 <lv_obj_get_content_height>
 800555a:	9001      	str	r0, [sp, #4]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800555c:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 8005560:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8005564:	d04b      	beq.n	80055fe <lv_obj_refr_pos+0xf2>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8005566:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800556a:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800556e:	d05b      	beq.n	8005628 <lv_obj_refr_pos+0x11c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8005570:	f243 020c 	movw	r2, #12300	; 0x300c
 8005574:	2100      	movs	r1, #0
 8005576:	4620      	mov	r0, r4
 8005578:	f001 fbd6 	bl	8006d28 <lv_obj_get_style_prop>
 800557c:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800557e:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8005582:	f243 020d 	movw	r2, #12301	; 0x300d
 8005586:	2100      	movs	r1, #0
 8005588:	4620      	mov	r0, r4
 800558a:	f001 fbcd 	bl	8006d28 <lv_obj_get_style_prop>
 800558e:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8005590:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(obj);
 8005594:	4620      	mov	r0, r4
 8005596:	f7ff fbcc 	bl	8004d32 <lv_obj_get_width>
 800559a:	9002      	str	r0, [sp, #8]
    lv_coord_t h = lv_obj_get_height(obj);
 800559c:	4620      	mov	r0, r4
 800559e:	f7ff fbd0 	bl	8004d42 <lv_obj_get_height>
 80055a2:	9003      	str	r0, [sp, #12]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80055a4:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 80055a8:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 80055ac:	d051      	beq.n	8005652 <lv_obj_refr_pos+0x146>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80055ae:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 80055b2:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 80055b6:	d063      	beq.n	8005680 <lv_obj_refr_pos+0x174>
    x += tr_x;
 80055b8:	445d      	add	r5, fp
 80055ba:	fa1f f885 	uxth.w	r8, r5
 80055be:	b22d      	sxth	r5, r5
    y += tr_y;
 80055c0:	4456      	add	r6, sl
 80055c2:	fa1f f986 	uxth.w	r9, r6
 80055c6:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80055c8:	f241 0209 	movw	r2, #4105	; 0x1009
 80055cc:	2100      	movs	r1, #0
 80055ce:	4620      	mov	r0, r4
 80055d0:	f001 fbaa 	bl	8006d28 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 80055d4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80055d8:	d069      	beq.n	80056ae <lv_obj_refr_pos+0x1a2>
    if(align == LV_ALIGN_TOP_LEFT) {
 80055da:	2801      	cmp	r0, #1
 80055dc:	d070      	beq.n	80056c0 <lv_obj_refr_pos+0x1b4>
        switch(align) {
 80055de:	3802      	subs	r0, #2
 80055e0:	2807      	cmp	r0, #7
 80055e2:	f200 8081 	bhi.w	80056e8 <lv_obj_refr_pos+0x1dc>
 80055e6:	e8df f000 	tbb	[pc, r0]
 80055ea:	8573      	.short	0x8573
 80055ec:	8cb3a099 	.word	0x8cb3a099
 80055f0:	d3c0      	.short	0xd3c0
        lv_obj_move_to(obj, x, y);
 80055f2:	4632      	mov	r2, r6
 80055f4:	4629      	mov	r1, r5
 80055f6:	4620      	mov	r0, r4
 80055f8:	f7ff fee5 	bl	80053c6 <lv_obj_move_to>
        return;
 80055fc:	e78d      	b.n	800551a <lv_obj_refr_pos+0xe>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80055fe:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
 8005602:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005606:	dcae      	bgt.n	8005566 <lv_obj_refr_pos+0x5a>
 8005608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800560c:	dd01      	ble.n	8005612 <lv_obj_refr_pos+0x106>
 800560e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8005612:	9a00      	ldr	r2, [sp, #0]
 8005614:	fb02 f303 	mul.w	r3, r2, r3
 8005618:	4a6a      	ldr	r2, [pc, #424]	; (80057c4 <lv_obj_refr_pos+0x2b8>)
 800561a:	fb82 1203 	smull	r1, r2, r2, r3
 800561e:	17dd      	asrs	r5, r3, #31
 8005620:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 8005624:	b22d      	sxth	r5, r5
 8005626:	e79e      	b.n	8005566 <lv_obj_refr_pos+0x5a>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8005628:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 800562c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005630:	dc9e      	bgt.n	8005570 <lv_obj_refr_pos+0x64>
 8005632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005636:	dd01      	ble.n	800563c <lv_obj_refr_pos+0x130>
 8005638:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800563c:	9a01      	ldr	r2, [sp, #4]
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	4a60      	ldr	r2, [pc, #384]	; (80057c4 <lv_obj_refr_pos+0x2b8>)
 8005644:	fb82 1203 	smull	r1, r2, r2, r3
 8005648:	17de      	asrs	r6, r3, #31
 800564a:	ebc6 1662 	rsb	r6, r6, r2, asr #5
 800564e:	b236      	sxth	r6, r6
 8005650:	e78e      	b.n	8005570 <lv_obj_refr_pos+0x64>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8005652:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 8005656:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800565a:	dca8      	bgt.n	80055ae <lv_obj_refr_pos+0xa2>
 800565c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005660:	dd01      	ble.n	8005666 <lv_obj_refr_pos+0x15a>
 8005662:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8005666:	9a02      	ldr	r2, [sp, #8]
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	4a55      	ldr	r2, [pc, #340]	; (80057c4 <lv_obj_refr_pos+0x2b8>)
 800566e:	fb82 1203 	smull	r1, r2, r2, r3
 8005672:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8005676:	ebcb 1b62 	rsb	fp, fp, r2, asr #5
 800567a:	fa0f fb8b 	sxth.w	fp, fp
 800567e:	e796      	b.n	80055ae <lv_obj_refr_pos+0xa2>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8005680:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 8005684:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005688:	dc96      	bgt.n	80055b8 <lv_obj_refr_pos+0xac>
 800568a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800568e:	dd01      	ble.n	8005694 <lv_obj_refr_pos+0x188>
 8005690:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8005694:	9a03      	ldr	r2, [sp, #12]
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	4a4a      	ldr	r2, [pc, #296]	; (80057c4 <lv_obj_refr_pos+0x2b8>)
 800569c:	fb82 1203 	smull	r1, r2, r2, r3
 80056a0:	ea4f 7ae3 	mov.w	sl, r3, asr #31
 80056a4:	ebca 1a62 	rsb	sl, sl, r2, asr #5
 80056a8:	fa0f fa8a 	sxth.w	sl, sl
 80056ac:	e784      	b.n	80055b8 <lv_obj_refr_pos+0xac>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80056ae:	f241 426a 	movw	r2, #5226	; 0x146a
 80056b2:	2100      	movs	r1, #0
 80056b4:	4638      	mov	r0, r7
 80056b6:	f001 fb37 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80056ba:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80056bc:	2801      	cmp	r0, #1
 80056be:	d005      	beq.n	80056cc <lv_obj_refr_pos+0x1c0>
        lv_obj_move_to(obj, x, y);
 80056c0:	4632      	mov	r2, r6
 80056c2:	4629      	mov	r1, r5
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7ff fe7e 	bl	80053c6 <lv_obj_move_to>
 80056ca:	e726      	b.n	800551a <lv_obj_refr_pos+0xe>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80056cc:	2003      	movs	r0, #3
 80056ce:	e786      	b.n	80055de <lv_obj_refr_pos+0xd2>
                x += pw / 2 - w / 2;
 80056d0:	9b00      	ldr	r3, [sp, #0]
 80056d2:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 80056dc:	106d      	asrs	r5, r5, #1
 80056de:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 80056e2:	fa18 f585 	uxtah	r5, r8, r5
 80056e6:	b22d      	sxth	r5, r5
        lv_obj_move_to(obj, x, y);
 80056e8:	4632      	mov	r2, r6
 80056ea:	4629      	mov	r1, r5
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7ff fe6a 	bl	80053c6 <lv_obj_move_to>
 80056f2:	e712      	b.n	800551a <lv_obj_refr_pos+0xe>
                x += pw - w;
 80056f4:	9b00      	ldr	r3, [sp, #0]
 80056f6:	9a02      	ldr	r2, [sp, #8]
 80056f8:	1a9d      	subs	r5, r3, r2
 80056fa:	fa18 f585 	uxtah	r5, r8, r5
 80056fe:	b22d      	sxth	r5, r5
                break;
 8005700:	e7f2      	b.n	80056e8 <lv_obj_refr_pos+0x1dc>
                y += ph / 2 - h / 2;
 8005702:	9b01      	ldr	r3, [sp, #4]
 8005704:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8005708:	9b03      	ldr	r3, [sp, #12]
 800570a:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 800570e:	1076      	asrs	r6, r6, #1
 8005710:	ebc6 0660 	rsb	r6, r6, r0, asr #1
 8005714:	fa19 f686 	uxtah	r6, r9, r6
 8005718:	b236      	sxth	r6, r6
                break;
 800571a:	e7e5      	b.n	80056e8 <lv_obj_refr_pos+0x1dc>
                y += ph - h;
 800571c:	9b01      	ldr	r3, [sp, #4]
 800571e:	9a03      	ldr	r2, [sp, #12]
 8005720:	1a9e      	subs	r6, r3, r2
 8005722:	fa19 f686 	uxtah	r6, r9, r6
 8005726:	b236      	sxth	r6, r6
                break;
 8005728:	e7de      	b.n	80056e8 <lv_obj_refr_pos+0x1dc>
                x += pw / 2 - w / 2;
 800572a:	9b00      	ldr	r3, [sp, #0]
 800572c:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 8005736:	106d      	asrs	r5, r5, #1
 8005738:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 800573c:	fa18 f585 	uxtah	r5, r8, r5
 8005740:	b22d      	sxth	r5, r5
                y += ph - h;
 8005742:	9b01      	ldr	r3, [sp, #4]
 8005744:	9a03      	ldr	r2, [sp, #12]
 8005746:	1a9e      	subs	r6, r3, r2
 8005748:	fa19 f686 	uxtah	r6, r9, r6
 800574c:	b236      	sxth	r6, r6
                break;
 800574e:	e7cb      	b.n	80056e8 <lv_obj_refr_pos+0x1dc>
                x += pw - w;
 8005750:	9b00      	ldr	r3, [sp, #0]
 8005752:	9a02      	ldr	r2, [sp, #8]
 8005754:	1a9d      	subs	r5, r3, r2
 8005756:	fa18 f585 	uxtah	r5, r8, r5
 800575a:	b22d      	sxth	r5, r5
                y += ph - h;
 800575c:	9b01      	ldr	r3, [sp, #4]
 800575e:	9a03      	ldr	r2, [sp, #12]
 8005760:	1a9e      	subs	r6, r3, r2
 8005762:	fa19 f686 	uxtah	r6, r9, r6
 8005766:	b236      	sxth	r6, r6
                break;
 8005768:	e7be      	b.n	80056e8 <lv_obj_refr_pos+0x1dc>
                x += pw - w;
 800576a:	9b00      	ldr	r3, [sp, #0]
 800576c:	9a02      	ldr	r2, [sp, #8]
 800576e:	1a9d      	subs	r5, r3, r2
 8005770:	fa18 f585 	uxtah	r5, r8, r5
 8005774:	b22d      	sxth	r5, r5
                y += ph / 2 - h / 2;
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 8005782:	1076      	asrs	r6, r6, #1
 8005784:	ebc6 0660 	rsb	r6, r6, r0, asr #1
 8005788:	fa19 f686 	uxtah	r6, r9, r6
 800578c:	b236      	sxth	r6, r6
                break;
 800578e:	e7ab      	b.n	80056e8 <lv_obj_refr_pos+0x1dc>
                x += pw / 2 - w / 2;
 8005790:	9b00      	ldr	r3, [sp, #0]
 8005792:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8005796:	9b02      	ldr	r3, [sp, #8]
 8005798:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 800579c:	106d      	asrs	r5, r5, #1
 800579e:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 80057a2:	fa18 f585 	uxtah	r5, r8, r5
 80057a6:	b22d      	sxth	r5, r5
                y += ph / 2 - h / 2;
 80057a8:	9b01      	ldr	r3, [sp, #4]
 80057aa:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 80057b4:	1076      	asrs	r6, r6, #1
 80057b6:	ebc6 0660 	rsb	r6, r6, r0, asr #1
 80057ba:	fa19 f686 	uxtah	r6, r9, r6
 80057be:	b236      	sxth	r6, r6
                break;
 80057c0:	e792      	b.n	80056e8 <lv_obj_refr_pos+0x1dc>
 80057c2:	bf00      	nop
 80057c4:	51eb851f 	.word	0x51eb851f

080057c8 <lv_clamp_width>:
{
 80057c8:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80057ca:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 80057ce:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 80057d2:	d00c      	beq.n	80057ee <lv_clamp_width+0x26>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80057d4:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 80057d8:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 80057dc:	d01c      	beq.n	8005818 <lv_clamp_width+0x50>
    return LV_CLAMP(min_width, width, max_width);
 80057de:	4290      	cmp	r0, r2
 80057e0:	bfa8      	it	ge
 80057e2:	4610      	movge	r0, r2
}
 80057e4:	4288      	cmp	r0, r1
 80057e6:	bfb8      	it	lt
 80057e8:	4608      	movlt	r0, r1
 80057ea:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80057ee:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 80057f2:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 80057f6:	dced      	bgt.n	80057d4 <lv_clamp_width+0xc>
 80057f8:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 80057fc:	dd01      	ble.n	8005802 <lv_clamp_width+0x3a>
 80057fe:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 8005802:	fb0c fc03 	mul.w	ip, ip, r3
 8005806:	490e      	ldr	r1, [pc, #56]	; (8005840 <lv_clamp_width+0x78>)
 8005808:	fb81 1e0c 	smull	r1, lr, r1, ip
 800580c:	ea4f 71ec 	mov.w	r1, ip, asr #31
 8005810:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 8005814:	b209      	sxth	r1, r1
 8005816:	e7dd      	b.n	80057d4 <lv_clamp_width+0xc>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8005818:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 800581c:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8005820:	dcdd      	bgt.n	80057de <lv_clamp_width+0x16>
 8005822:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8005826:	dd01      	ble.n	800582c <lv_clamp_width+0x64>
 8005828:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 800582c:	fb0c f303 	mul.w	r3, ip, r3
 8005830:	4a03      	ldr	r2, [pc, #12]	; (8005840 <lv_clamp_width+0x78>)
 8005832:	fb82 c203 	smull	ip, r2, r2, r3
 8005836:	17db      	asrs	r3, r3, #31
 8005838:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800583c:	b21a      	sxth	r2, r3
 800583e:	e7ce      	b.n	80057de <lv_clamp_width+0x16>
 8005840:	51eb851f 	.word	0x51eb851f

08005844 <lv_clamp_height>:
{
 8005844:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8005846:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 800584a:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 800584e:	d00c      	beq.n	800586a <lv_clamp_height+0x26>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8005850:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 8005854:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 8005858:	d01c      	beq.n	8005894 <lv_clamp_height+0x50>
    return LV_CLAMP(min_height, height, max_height);
 800585a:	4290      	cmp	r0, r2
 800585c:	bfa8      	it	ge
 800585e:	4610      	movge	r0, r2
}
 8005860:	4288      	cmp	r0, r1
 8005862:	bfb8      	it	lt
 8005864:	4608      	movlt	r0, r1
 8005866:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 800586a:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 800586e:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8005872:	dced      	bgt.n	8005850 <lv_clamp_height+0xc>
 8005874:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8005878:	dd01      	ble.n	800587e <lv_clamp_height+0x3a>
 800587a:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 800587e:	fb0c fc03 	mul.w	ip, ip, r3
 8005882:	490e      	ldr	r1, [pc, #56]	; (80058bc <lv_clamp_height+0x78>)
 8005884:	fb81 1e0c 	smull	r1, lr, r1, ip
 8005888:	ea4f 71ec 	mov.w	r1, ip, asr #31
 800588c:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 8005890:	b209      	sxth	r1, r1
 8005892:	e7dd      	b.n	8005850 <lv_clamp_height+0xc>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8005894:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 8005898:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 800589c:	dcdd      	bgt.n	800585a <lv_clamp_height+0x16>
 800589e:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 80058a2:	dd01      	ble.n	80058a8 <lv_clamp_height+0x64>
 80058a4:	f5cc 7c7a 	rsb	ip, ip, #1000	; 0x3e8
 80058a8:	fb0c f303 	mul.w	r3, ip, r3
 80058ac:	4a03      	ldr	r2, [pc, #12]	; (80058bc <lv_clamp_height+0x78>)
 80058ae:	fb82 c203 	smull	ip, r2, r2, r3
 80058b2:	17db      	asrs	r3, r3, #31
 80058b4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80058b8:	b21a      	sxth	r2, r3
 80058ba:	e7ce      	b.n	800585a <lv_clamp_height+0x16>
 80058bc:	51eb851f 	.word	0x51eb851f

080058c0 <lv_obj_refr_size>:
    if(obj->w_layout && obj->h_layout) return false;
 80058c0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80058c4:	f003 0306 	and.w	r3, r3, #6
 80058c8:	2b06      	cmp	r3, #6
 80058ca:	f000 81a4 	beq.w	8005c16 <lv_obj_refr_size+0x356>
{
 80058ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d2:	b087      	sub	sp, #28
 80058d4:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80058d6:	f001 faa1 	bl	8006e1c <lv_obj_get_parent>
    if(parent == NULL) return false;
 80058da:	4605      	mov	r5, r0
 80058dc:	2800      	cmp	r0, #0
 80058de:	f000 819c 	beq.w	8005c1a <lv_obj_refr_size+0x35a>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 fade 	bl	8005ea4 <lv_obj_get_scroll_left>
 80058e8:	9000      	str	r0, [sp, #0]
    if(obj->w_layout) {
 80058ea:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80058ee:	f013 0f04 	tst.w	r3, #4
 80058f2:	d076      	beq.n	80059e2 <lv_obj_refr_size+0x122>
        w = lv_obj_get_width(obj);
 80058f4:	4620      	mov	r0, r4
 80058f6:	f7ff fa1c 	bl	8004d32 <lv_obj_get_width>
 80058fa:	4606      	mov	r6, r0
    bool w_is_content = false;
 80058fc:	f04f 0900 	mov.w	r9, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fa69 	bl	8005dd8 <lv_obj_get_scroll_top>
 8005906:	4607      	mov	r7, r0
    if(obj->h_layout) {
 8005908:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800590c:	f013 0f02 	tst.w	r3, #2
 8005910:	f000 80ec 	beq.w	8005aec <lv_obj_refr_size+0x22c>
        h = lv_obj_get_height(obj);
 8005914:	4620      	mov	r0, r4
 8005916:	f7ff fa14 	bl	8004d42 <lv_obj_get_height>
 800591a:	4680      	mov	r8, r0
    bool h_is_content = false;
 800591c:	f04f 0a00 	mov.w	sl, #0
    if(w_is_content || h_is_content) {
 8005920:	f1b9 0f00 	cmp.w	r9, #0
 8005924:	d102      	bne.n	800592c <lv_obj_refr_size+0x6c>
 8005926:	f1ba 0f00 	cmp.w	sl, #0
 800592a:	d005      	beq.n	8005938 <lv_obj_refr_size+0x78>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 800592c:	2300      	movs	r3, #0
 800592e:	463a      	mov	r2, r7
 8005930:	9900      	ldr	r1, [sp, #0]
 8005932:	4620      	mov	r0, r4
 8005934:	f000 fccc 	bl	80062d0 <lv_obj_scroll_to>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8005938:	4620      	mov	r0, r4
 800593a:	f7ff f9fa 	bl	8004d32 <lv_obj_get_width>
 800593e:	42b0      	cmp	r0, r6
 8005940:	d105      	bne.n	800594e <lv_obj_refr_size+0x8e>
 8005942:	4620      	mov	r0, r4
 8005944:	f7ff f9fd 	bl	8004d42 <lv_obj_get_height>
 8005948:	4540      	cmp	r0, r8
 800594a:	f000 8168 	beq.w	8005c1e <lv_obj_refr_size+0x35e>
    lv_obj_invalidate(obj);
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff fd00 	bl	8005354 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 8005954:	a904      	add	r1, sp, #16
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff f9de 	bl	8004d18 <lv_obj_get_coords>
    lv_obj_get_content_coords(parent, &parent_fit_area);
 800595c:	a902      	add	r1, sp, #8
 800595e:	4628      	mov	r0, r5
 8005960:	f7ff fa3d 	bl	8004dde <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8005964:	2200      	movs	r2, #0
 8005966:	a902      	add	r1, sp, #8
 8005968:	a804      	add	r0, sp, #16
 800596a:	f003 ff31 	bl	80097d0 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 800596e:	4607      	mov	r7, r0
 8005970:	2800      	cmp	r0, #0
 8005972:	f000 8146 	beq.w	8005c02 <lv_obj_refr_size+0x342>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8005976:	8ae3      	ldrh	r3, [r4, #22]
 8005978:	4443      	add	r3, r8
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	8363      	strh	r3, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005980:	f241 426a 	movw	r2, #5226	; 0x146a
 8005984:	2100      	movs	r1, #0
 8005986:	4620      	mov	r0, r4
 8005988:	f001 f9ce 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800598c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800598e:	2801      	cmp	r0, #1
 8005990:	f000 813b 	beq.w	8005c0a <lv_obj_refr_size+0x34a>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005994:	8aa0      	ldrh	r0, [r4, #20]
 8005996:	4406      	add	r6, r0
 8005998:	b2b6      	uxth	r6, r6
 800599a:	3e01      	subs	r6, #1
 800599c:	8326      	strh	r6, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 800599e:	aa04      	add	r2, sp, #16
 80059a0:	2129      	movs	r1, #41	; 0x29
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7ff f8c2 	bl	8004b2c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80059a8:	4622      	mov	r2, r4
 80059aa:	2122      	movs	r1, #34	; 0x22
 80059ac:	4628      	mov	r0, r5
 80059ae:	f7ff f8bd 	bl	8004b2c <lv_event_send>
    lv_obj_invalidate(obj);
 80059b2:	4620      	mov	r0, r4
 80059b4:	f7ff fcce 	bl	8005354 <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 80059b8:	2100      	movs	r1, #0
 80059ba:	4620      	mov	r0, r4
 80059bc:	f001 f8c7 	bl	8006b4e <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80059c0:	2200      	movs	r2, #0
 80059c2:	a902      	add	r1, sp, #8
 80059c4:	f104 0014 	add.w	r0, r4, #20
 80059c8:	f003 ff02 	bl	80097d0 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80059cc:	b917      	cbnz	r7, 80059d4 <lv_obj_refr_size+0x114>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f000 8127 	beq.w	8005c22 <lv_obj_refr_size+0x362>
 80059d4:	4628      	mov	r0, r5
 80059d6:	f001 f897 	bl	8006b08 <lv_obj_scrollbar_invalidate>
    return true;
 80059da:	2001      	movs	r0, #1
}
 80059dc:	b007      	add	sp, #28
 80059de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80059e2:	f241 0201 	movw	r2, #4097	; 0x1001
 80059e6:	2100      	movs	r1, #0
 80059e8:	4620      	mov	r0, r4
 80059ea:	f001 f99d 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80059ee:	b206      	sxth	r6, r0
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 80059f0:	f242 79d1 	movw	r9, #10193	; 0x27d1
 80059f4:	454e      	cmp	r6, r9
 80059f6:	bf14      	ite	ne
 80059f8:	f04f 0900 	movne.w	r9, #0
 80059fc:	f04f 0901 	moveq.w	r9, #1
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8005a00:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8005a04:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005a08:	d038      	beq.n	8005a7c <lv_obj_refr_size+0x1bc>
 8005a0a:	f04f 0800 	mov.w	r8, #0
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f7ff f99f 	bl	8004d52 <lv_obj_get_content_width>
 8005a14:	4607      	mov	r7, r0
        if(w_is_content) {
 8005a16:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005a1a:	429e      	cmp	r6, r3
 8005a1c:	d039      	beq.n	8005a92 <lv_obj_refr_size+0x1d2>
        else if(w_is_pct) {
 8005a1e:	f1b8 0f00 	cmp.w	r8, #0
 8005a22:	d015      	beq.n	8005a50 <lv_obj_refr_size+0x190>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8005a24:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8005a28:	f013 0f04 	tst.w	r3, #4
 8005a2c:	d036      	beq.n	8005a9c <lv_obj_refr_size+0x1dc>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8005a2e:	f426 42c0 	bic.w	r2, r6, #24576	; 0x6000
 8005a32:	b212      	sxth	r2, r2
 8005a34:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005a38:	dd01      	ble.n	8005a3e <lv_obj_refr_size+0x17e>
 8005a3a:	f5c2 727a 	rsb	r2, r2, #1000	; 0x3e8
 8005a3e:	fb07 f202 	mul.w	r2, r7, r2
 8005a42:	4b79      	ldr	r3, [pc, #484]	; (8005c28 <lv_obj_refr_size+0x368>)
 8005a44:	fb83 1302 	smull	r1, r3, r3, r2
 8005a48:	17d6      	asrs	r6, r2, #31
 8005a4a:	ebc6 1663 	rsb	r6, r6, r3, asr #5
 8005a4e:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8005a50:	f241 0202 	movw	r2, #4098	; 0x1002
 8005a54:	2100      	movs	r1, #0
 8005a56:	4620      	mov	r0, r4
 8005a58:	f001 f966 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005a5c:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8005a60:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a64:	2100      	movs	r1, #0
 8005a66:	4620      	mov	r0, r4
 8005a68:	f001 f95e 	bl	8006d28 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	b202      	sxth	r2, r0
 8005a70:	4641      	mov	r1, r8
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff fea8 	bl	80057c8 <lv_clamp_width>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	e741      	b.n	8005900 <lv_obj_refr_size+0x40>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8005a7c:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
 8005a80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005a84:	dd02      	ble.n	8005a8c <lv_obj_refr_size+0x1cc>
 8005a86:	f04f 0800 	mov.w	r8, #0
 8005a8a:	e7c0      	b.n	8005a0e <lv_obj_refr_size+0x14e>
 8005a8c:	f04f 0801 	mov.w	r8, #1
 8005a90:	e7bd      	b.n	8005a0e <lv_obj_refr_size+0x14e>
            w = calc_content_width(obj);
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7ff f9f2 	bl	8004e7c <calc_content_width>
 8005a98:	4606      	mov	r6, r0
 8005a9a:	e7d9      	b.n	8005a50 <lv_obj_refr_size+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005a9c:	f241 0201 	movw	r2, #4097	; 0x1001
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f001 f940 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005aa8:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8005aaa:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005aae:	4298      	cmp	r0, r3
 8005ab0:	d1bd      	bne.n	8005a2e <lv_obj_refr_size+0x16e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005ab2:	f241 0232 	movw	r2, #4146	; 0x1032
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f001 f935 	bl	8006d28 <lv_obj_get_style_prop>
 8005abe:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8005ac0:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005ac4:	f641 0212 	movw	r2, #6162	; 0x1812
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f001 f92c 	bl	8006d28 <lv_obj_get_style_prop>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8005ad0:	fa16 f680 	uxtah	r6, r6, r0
 8005ad4:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005ad6:	f641 0213 	movw	r2, #6163	; 0x1813
 8005ada:	2100      	movs	r1, #0
 8005adc:	4620      	mov	r0, r4
 8005ade:	f001 f923 	bl	8006d28 <lv_obj_get_style_prop>
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8005ae2:	fa08 f380 	sxtah	r3, r8, r0
 8005ae6:	441e      	add	r6, r3
 8005ae8:	b236      	sxth	r6, r6
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8005aea:	e7b1      	b.n	8005a50 <lv_obj_refr_size+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005aec:	f241 0204 	movw	r2, #4100	; 0x1004
 8005af0:	2100      	movs	r1, #0
 8005af2:	4620      	mov	r0, r4
 8005af4:	f001 f918 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005af8:	fa0f f880 	sxth.w	r8, r0
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 8005afc:	f242 7ad1 	movw	sl, #10193	; 0x27d1
 8005b00:	45d0      	cmp	r8, sl
 8005b02:	bf14      	ite	ne
 8005b04:	f04f 0a00 	movne.w	sl, #0
 8005b08:	f04f 0a01 	moveq.w	sl, #1
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8005b0c:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8005b10:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005b14:	d03b      	beq.n	8005b8e <lv_obj_refr_size+0x2ce>
 8005b16:	f04f 0b00 	mov.w	fp, #0
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7ff f93c 	bl	8004d98 <lv_obj_get_content_height>
 8005b20:	9001      	str	r0, [sp, #4]
        if(h_is_content) {
 8005b22:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005b26:	4598      	cmp	r8, r3
 8005b28:	d03c      	beq.n	8005ba4 <lv_obj_refr_size+0x2e4>
        else if(h_is_pct) {
 8005b2a:	f1bb 0f00 	cmp.w	fp, #0
 8005b2e:	d018      	beq.n	8005b62 <lv_obj_refr_size+0x2a2>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8005b30:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8005b34:	f013 0f02 	tst.w	r3, #2
 8005b38:	d039      	beq.n	8005bae <lv_obj_refr_size+0x2ee>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8005b3a:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 8005b3e:	b21b      	sxth	r3, r3
 8005b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b44:	dd01      	ble.n	8005b4a <lv_obj_refr_size+0x28a>
 8005b46:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8005b4a:	9a01      	ldr	r2, [sp, #4]
 8005b4c:	fb02 f303 	mul.w	r3, r2, r3
 8005b50:	4a35      	ldr	r2, [pc, #212]	; (8005c28 <lv_obj_refr_size+0x368>)
 8005b52:	fb82 1203 	smull	r1, r2, r2, r3
 8005b56:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8005b5a:	ebc8 1862 	rsb	r8, r8, r2, asr #5
 8005b5e:	fa0f f888 	sxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8005b62:	f241 0205 	movw	r2, #4101	; 0x1005
 8005b66:	2100      	movs	r1, #0
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f001 f8dd 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005b6e:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005b72:	f241 0206 	movw	r2, #4102	; 0x1006
 8005b76:	2100      	movs	r1, #0
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f001 f8d5 	bl	8006d28 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	b202      	sxth	r2, r0
 8005b82:	4659      	mov	r1, fp
 8005b84:	4640      	mov	r0, r8
 8005b86:	f7ff fe5d 	bl	8005844 <lv_clamp_height>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	e6c8      	b.n	8005920 <lv_obj_refr_size+0x60>
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8005b8e:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 8005b92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b96:	dd02      	ble.n	8005b9e <lv_obj_refr_size+0x2de>
 8005b98:	f04f 0b00 	mov.w	fp, #0
 8005b9c:	e7bd      	b.n	8005b1a <lv_obj_refr_size+0x25a>
 8005b9e:	f04f 0b01 	mov.w	fp, #1
 8005ba2:	e7ba      	b.n	8005b1a <lv_obj_refr_size+0x25a>
            h = calc_content_height(obj);
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7ff fa73 	bl	8005090 <calc_content_height>
 8005baa:	4680      	mov	r8, r0
 8005bac:	e7d9      	b.n	8005b62 <lv_obj_refr_size+0x2a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005bae:	f241 0204 	movw	r2, #4100	; 0x1004
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f001 f8b7 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005bba:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8005bbc:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005bc0:	4298      	cmp	r0, r3
 8005bc2:	d1ba      	bne.n	8005b3a <lv_obj_refr_size+0x27a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005bc4:	f241 0232 	movw	r2, #4146	; 0x1032
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f001 f8ac 	bl	8006d28 <lv_obj_get_style_prop>
 8005bd0:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8005bd2:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005bd6:	f641 0210 	movw	r2, #6160	; 0x1810
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f001 f8a3 	bl	8006d28 <lv_obj_get_style_prop>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 8005be2:	fa18 f880 	uxtah	r8, r8, r0
 8005be6:	fa1f f888 	uxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005bea:	f641 0211 	movw	r2, #6161	; 0x1811
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f001 f899 	bl	8006d28 <lv_obj_get_style_prop>
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8005bf6:	fa0b fb80 	sxtah	fp, fp, r0
 8005bfa:	44d8      	add	r8, fp
 8005bfc:	fa0f f888 	sxth.w	r8, r8
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8005c00:	e7af      	b.n	8005b62 <lv_obj_refr_size+0x2a2>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 ff80 	bl	8006b08 <lv_obj_scrollbar_invalidate>
 8005c08:	e6b5      	b.n	8005976 <lv_obj_refr_size+0xb6>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005c0a:	8b20      	ldrh	r0, [r4, #24]
 8005c0c:	1b86      	subs	r6, r0, r6
 8005c0e:	b2b6      	uxth	r6, r6
 8005c10:	3601      	adds	r6, #1
 8005c12:	82a6      	strh	r6, [r4, #20]
 8005c14:	e6c3      	b.n	800599e <lv_obj_refr_size+0xde>
    if(obj->w_layout && obj->h_layout) return false;
 8005c16:	2000      	movs	r0, #0
}
 8005c18:	4770      	bx	lr
    if(parent == NULL) return false;
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e6de      	b.n	80059dc <lv_obj_refr_size+0x11c>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8005c1e:	2000      	movs	r0, #0
 8005c20:	e6dc      	b.n	80059dc <lv_obj_refr_size+0x11c>
    return true;
 8005c22:	2001      	movs	r0, #1
 8005c24:	e6da      	b.n	80059dc <lv_obj_refr_size+0x11c>
 8005c26:	bf00      	nop
 8005c28:	51eb851f 	.word	0x51eb851f

08005c2c <layout_update_core>:

static void layout_update_core(lv_obj_t * obj)
{
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4605      	mov	r5, r0
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005c30:	f001 f933 	bl	8006e9a <lv_obj_get_child_cnt>
 8005c34:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 8005c36:	2400      	movs	r4, #0
 8005c38:	e006      	b.n	8005c48 <layout_update_core+0x1c>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005c3a:	68ab      	ldr	r3, [r5, #8]
 8005c3c:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 8005c3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005c42:	f7ff fff3 	bl	8005c2c <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8005c46:	3401      	adds	r4, #1
 8005c48:	42b4      	cmp	r4, r6
 8005c4a:	d3f6      	bcc.n	8005c3a <layout_update_core+0xe>
    }

    if(obj->layout_inv == 0) return;
 8005c4c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8005c50:	f013 0f01 	tst.w	r3, #1
 8005c54:	d100      	bne.n	8005c58 <layout_update_core+0x2c>
        if(layout_id > 0 && layout_id <= layout_cnt) {
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
        }
    }
}
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
    obj->layout_inv = 0;
 8005c58:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8005c5c:	f36f 0300 	bfc	r3, #0, #1
 8005c60:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_refr_size(obj);
 8005c64:	4628      	mov	r0, r5
 8005c66:	f7ff fe2b 	bl	80058c0 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f7ff fc4e 	bl	800550c <lv_obj_refr_pos>
    if(child_cnt > 0) {
 8005c70:	2e00      	cmp	r6, #0
 8005c72:	d0f0      	beq.n	8005c56 <layout_update_core+0x2a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005c74:	f241 0269 	movw	r2, #4201	; 0x1069
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f001 f854 	bl	8006d28 <lv_obj_get_style_prop>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8005c80:	b280      	uxth	r0, r0
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0e7      	beq.n	8005c56 <layout_update_core+0x2a>
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <layout_update_core+0x7c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4283      	cmp	r3, r0
 8005c8c:	d3e3      	bcc.n	8005c56 <layout_update_core+0x2a>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8005c8e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8005c92:	3801      	subs	r0, #1
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <layout_update_core+0x80>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8005c9c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8005ca0:	6851      	ldr	r1, [r2, #4]
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	4798      	blx	r3
 8005ca6:	e7d6      	b.n	8005c56 <layout_update_core+0x2a>
 8005ca8:	20001e1c 	.word	0x20001e1c
 8005cac:	20001eb4 	.word	0x20001eb4

08005cb0 <lv_obj_update_layout>:
    if(mutex) {
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <lv_obj_update_layout+0x3c>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b103      	cbz	r3, 8005cb8 <lv_obj_update_layout+0x8>
 8005cb6:	4770      	bx	lr
{
 8005cb8:	b510      	push	{r4, lr}
    mutex = true;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <lv_obj_update_layout+0x3c>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	701a      	strb	r2, [r3, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8005cc0:	f001 f8b0 	bl	8006e24 <lv_obj_get_screen>
 8005cc4:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 8005cc6:	e008      	b.n	8005cda <lv_obj_update_layout+0x2a>
        scr->scr_layout_inv = 0;
 8005cc8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005ccc:	f36f 0341 	bfc	r3, #1, #1
 8005cd0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f7ff ffa9 	bl	8005c2c <layout_update_core>
    while(scr->scr_layout_inv) {
 8005cda:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005cde:	f013 0f02 	tst.w	r3, #2
 8005ce2:	d1f1      	bne.n	8005cc8 <lv_obj_update_layout+0x18>
    mutex = false;
 8005ce4:	4b01      	ldr	r3, [pc, #4]	; (8005cec <lv_obj_update_layout+0x3c>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
}
 8005cea:	bd10      	pop	{r4, pc}
 8005cec:	20001e20 	.word	0x20001e20

08005cf0 <scroll_by_raw>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4615      	mov	r5, r2
    if(x == 0 && y == 0) return;
 8005cf6:	460e      	mov	r6, r1
 8005cf8:	b901      	cbnz	r1, 8005cfc <scroll_by_raw+0xc>
 8005cfa:	b1ba      	cbz	r2, 8005d2c <scroll_by_raw+0x3c>

    lv_obj_allocate_spec_attr(obj);
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7fe ffa5 	bl	8004c4c <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 8005d02:	68a2      	ldr	r2, [r4, #8]
 8005d04:	8a13      	ldrh	r3, [r2, #16]
 8005d06:	4433      	add	r3, r6
 8005d08:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
 8005d0a:	68a2      	ldr	r2, [r4, #8]
 8005d0c:	8a53      	ldrh	r3, [r2, #18]
 8005d0e:	442b      	add	r3, r5
 8005d10:	8253      	strh	r3, [r2, #18]

    lv_obj_move_children_by(obj, x, y, true);
 8005d12:	2301      	movs	r3, #1
 8005d14:	462a      	mov	r2, r5
 8005d16:	4631      	mov	r1, r6
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f7ff fa4b 	bl	80051b4 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	210b      	movs	r1, #11
 8005d22:	4620      	mov	r0, r4
 8005d24:	f7fe ff02 	bl	8004b2c <lv_event_send>
    if(res != LV_RES_OK) return;
 8005d28:	2801      	cmp	r0, #1
 8005d2a:	d000      	beq.n	8005d2e <scroll_by_raw+0x3e>
    lv_obj_invalidate(obj);
}
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_invalidate(obj);
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff fb10 	bl	8005354 <lv_obj_invalidate>
 8005d34:	e7fa      	b.n	8005d2c <scroll_by_raw+0x3c>

08005d36 <scroll_anim_ready_cb>:
{
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 8005d36:	b508      	push	{r3, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 8005d38:	2200      	movs	r2, #0
 8005d3a:	210a      	movs	r1, #10
 8005d3c:	6800      	ldr	r0, [r0, #0]
 8005d3e:	f7fe fef5 	bl	8004b2c <lv_event_send>
}
 8005d42:	bd08      	pop	{r3, pc}

08005d44 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8005d44:	6883      	ldr	r3, [r0, #8]
 8005d46:	b11b      	cbz	r3, 8005d50 <lv_obj_get_scrollbar_mode+0xc>
 8005d48:	7e18      	ldrb	r0, [r3, #24]
 8005d4a:	f000 0003 	and.w	r0, r0, #3
 8005d4e:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 8005d50:	2003      	movs	r0, #3
}
 8005d52:	4770      	bx	lr

08005d54 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8005d54:	6883      	ldr	r3, [r0, #8]
 8005d56:	b11b      	cbz	r3, 8005d60 <lv_obj_get_scroll_dir+0xc>
 8005d58:	7e58      	ldrb	r0, [r3, #25]
 8005d5a:	f000 000f 	and.w	r0, r0, #15
 8005d5e:	4770      	bx	lr
    else return LV_DIR_ALL;
 8005d60:	200f      	movs	r0, #15
}
 8005d62:	4770      	bx	lr

08005d64 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8005d64:	6883      	ldr	r3, [r0, #8]
 8005d66:	b11b      	cbz	r3, 8005d70 <lv_obj_get_scroll_snap_x+0xc>
 8005d68:	7e18      	ldrb	r0, [r3, #24]
 8005d6a:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8005d6e:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 8005d70:	2000      	movs	r0, #0
}
 8005d72:	4770      	bx	lr

08005d74 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8005d74:	6883      	ldr	r3, [r0, #8]
 8005d76:	b11b      	cbz	r3, 8005d80 <lv_obj_get_scroll_snap_y+0xc>
 8005d78:	7e18      	ldrb	r0, [r3, #24]
 8005d7a:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8005d7e:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 8005d80:	2000      	movs	r0, #0
}
 8005d82:	4770      	bx	lr

08005d84 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8005d84:	6883      	ldr	r3, [r0, #8]
 8005d86:	b11b      	cbz	r3, 8005d90 <lv_obj_get_scroll_x+0xc>
    return -obj->spec_attr->scroll.x;
 8005d88:	8a18      	ldrh	r0, [r3, #16]
 8005d8a:	4240      	negs	r0, r0
 8005d8c:	b200      	sxth	r0, r0
 8005d8e:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8005d90:	2000      	movs	r0, #0
}
 8005d92:	4770      	bx	lr

08005d94 <scroll_x_anim>:
{
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	460d      	mov	r5, r1
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8005d9a:	f7ff fff3 	bl	8005d84 <lv_obj_get_scroll_x>
 8005d9e:	fa15 f180 	uxtah	r1, r5, r0
 8005da2:	2200      	movs	r2, #0
 8005da4:	b209      	sxth	r1, r1
 8005da6:	4620      	mov	r0, r4
 8005da8:	f7ff ffa2 	bl	8005cf0 <scroll_by_raw>
}
 8005dac:	bd38      	pop	{r3, r4, r5, pc}

08005dae <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 8005dae:	6883      	ldr	r3, [r0, #8]
 8005db0:	b11b      	cbz	r3, 8005dba <lv_obj_get_scroll_y+0xc>
    return -obj->spec_attr->scroll.y;
 8005db2:	8a58      	ldrh	r0, [r3, #18]
 8005db4:	4240      	negs	r0, r0
 8005db6:	b200      	sxth	r0, r0
 8005db8:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8005dba:	2000      	movs	r0, #0
}
 8005dbc:	4770      	bx	lr

08005dbe <scroll_y_anim>:
{
 8005dbe:	b538      	push	{r3, r4, r5, lr}
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	460d      	mov	r5, r1
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8005dc4:	f7ff fff3 	bl	8005dae <lv_obj_get_scroll_y>
 8005dc8:	fa15 f280 	uxtah	r2, r5, r0
 8005dcc:	b212      	sxth	r2, r2
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7ff ff8d 	bl	8005cf0 <scroll_by_raw>
}
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}

08005dd8 <lv_obj_get_scroll_top>:
    if(obj->spec_attr == NULL) return 0;
 8005dd8:	6883      	ldr	r3, [r0, #8]
 8005dda:	b11b      	cbz	r3, 8005de4 <lv_obj_get_scroll_top+0xc>
    return -obj->spec_attr->scroll.y;
 8005ddc:	8a58      	ldrh	r0, [r3, #18]
 8005dde:	4240      	negs	r0, r0
 8005de0:	b200      	sxth	r0, r0
 8005de2:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8005de4:	2000      	movs	r0, #0
}
 8005de6:	4770      	bx	lr

08005de8 <lv_obj_get_scroll_bottom>:
{
 8005de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005dee:	f001 f854 	bl	8006e9a <lv_obj_get_child_cnt>
 8005df2:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8005df4:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8005df6:	4f29      	ldr	r7, [pc, #164]	; (8005e9c <lv_obj_get_scroll_bottom+0xb4>)
    for(i = 0; i < child_cnt; i++) {
 8005df8:	e005      	b.n	8005e06 <lv_obj_get_scroll_bottom+0x1e>
        child_res = LV_MAX(child_res, child->coords.y2);
 8005dfa:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8005dfe:	429f      	cmp	r7, r3
 8005e00:	bfb8      	it	lt
 8005e02:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8005e04:	3401      	adds	r4, #1
 8005e06:	4544      	cmp	r4, r8
 8005e08:	d20a      	bcs.n	8005e20 <lv_obj_get_scroll_bottom+0x38>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005e0a:	68b3      	ldr	r3, [r6, #8]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005e12:	4923      	ldr	r1, [pc, #140]	; (8005ea0 <lv_obj_get_scroll_bottom+0xb8>)
 8005e14:	4628      	mov	r0, r5
 8005e16:	f7fe ff12 	bl	8004c3e <lv_obj_has_flag_any>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d0ed      	beq.n	8005dfa <lv_obj_get_scroll_bottom+0x12>
 8005e1e:	e7f1      	b.n	8005e04 <lv_obj_get_scroll_bottom+0x1c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005e20:	f641 0210 	movw	r2, #6160	; 0x1810
 8005e24:	2100      	movs	r1, #0
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 ff7e 	bl	8006d28 <lv_obj_get_style_prop>
 8005e2c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005e2e:	f641 0211 	movw	r2, #6161	; 0x1811
 8005e32:	2100      	movs	r1, #0
 8005e34:	4630      	mov	r0, r6
 8005e36:	f000 ff77 	bl	8006d28 <lv_obj_get_style_prop>
 8005e3a:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005e3c:	f241 0232 	movw	r2, #4146	; 0x1032
 8005e40:	2100      	movs	r1, #0
 8005e42:	4630      	mov	r0, r6
 8005e44:	f000 ff70 	bl	8006d28 <lv_obj_get_style_prop>
 8005e48:	4680      	mov	r8, r0
    if(child_res != LV_COORD_MIN) {
 8005e4a:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <lv_obj_get_scroll_bottom+0xb4>)
 8005e4c:	429f      	cmp	r7, r3
 8005e4e:	d005      	beq.n	8005e5c <lv_obj_get_scroll_bottom+0x74>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8005e50:	8b73      	ldrh	r3, [r6, #26]
 8005e52:	ebaa 0303 	sub.w	r3, sl, r3
 8005e56:	4403      	add	r3, r0
 8005e58:	441f      	add	r7, r3
 8005e5a:	b23f      	sxth	r7, r7
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7ff f905 	bl	800506c <lv_obj_get_self_height>
 8005e62:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005e64:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8005e68:	fa1f f888 	uxth.w	r8, r8
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7fe ff68 	bl	8004d42 <lv_obj_get_height>
 8005e72:	b284      	uxth	r4, r0
 8005e74:	1b2d      	subs	r5, r5, r4
 8005e76:	fa1a f485 	uxtah	r4, sl, r5
 8005e7a:	fa18 f484 	uxtah	r4, r8, r4
 8005e7e:	fa19 f484 	uxtah	r4, r9, r4
 8005e82:	b2a4      	uxth	r4, r4
    self_h -= lv_obj_get_scroll_y(obj);
 8005e84:	4630      	mov	r0, r6
 8005e86:	f7ff ff92 	bl	8005dae <lv_obj_get_scroll_y>
 8005e8a:	b280      	uxth	r0, r0
 8005e8c:	1a20      	subs	r0, r4, r0
 8005e8e:	b200      	sxth	r0, r0
}
 8005e90:	42b8      	cmp	r0, r7
 8005e92:	bfb8      	it	lt
 8005e94:	4638      	movlt	r0, r7
 8005e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9a:	bf00      	nop
 8005e9c:	ffffe001 	.word	0xffffe001
 8005ea0:	00040001 	.word	0x00040001

08005ea4 <lv_obj_get_scroll_left>:
{
 8005ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005eaa:	f241 426a 	movw	r2, #5226	; 0x146a
 8005eae:	2100      	movs	r1, #0
 8005eb0:	f000 ff3a 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005eb4:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005eb6:	2801      	cmp	r0, #1
 8005eb8:	d007      	beq.n	8005eca <lv_obj_get_scroll_left+0x26>
        if(obj->spec_attr == NULL) return 0;
 8005eba:	68a3      	ldr	r3, [r4, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d060      	beq.n	8005f82 <lv_obj_get_scroll_left+0xde>
        return -obj->spec_attr->scroll.x;
 8005ec0:	8a18      	ldrh	r0, [r3, #16]
 8005ec2:	4240      	negs	r0, r0
 8005ec4:	b200      	sxth	r0, r0
}
 8005ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005eca:	f641 0213 	movw	r2, #6163	; 0x1813
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 ff29 	bl	8006d28 <lv_obj_get_style_prop>
 8005ed6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005ed8:	f641 0212 	movw	r2, #6162	; 0x1812
 8005edc:	2100      	movs	r1, #0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 ff22 	bl	8006d28 <lv_obj_get_style_prop>
 8005ee4:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005ee6:	f241 0232 	movw	r2, #4146	; 0x1032
 8005eea:	2100      	movs	r1, #0
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 ff1b 	bl	8006d28 <lv_obj_get_style_prop>
 8005ef2:	4681      	mov	r9, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 ffd0 	bl	8006e9a <lv_obj_get_child_cnt>
 8005efa:	4683      	mov	fp, r0
    lv_coord_t x1 = LV_COORD_MAX;
 8005efc:	f641 78ff 	movw	r8, #8191	; 0x1fff
    for(i = 0; i < child_cnt; i++) {
 8005f00:	2500      	movs	r5, #0
 8005f02:	e005      	b.n	8005f10 <lv_obj_get_scroll_left+0x6c>
        x1 = LV_MIN(x1, child->coords.x1);
 8005f04:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8005f08:	4598      	cmp	r8, r3
 8005f0a:	bfa8      	it	ge
 8005f0c:	4698      	movge	r8, r3
    for(i = 0; i < child_cnt; i++) {
 8005f0e:	3501      	adds	r5, #1
 8005f10:	455d      	cmp	r5, fp
 8005f12:	d20a      	bcs.n	8005f2a <lv_obj_get_scroll_left+0x86>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005f1c:	491a      	ldr	r1, [pc, #104]	; (8005f88 <lv_obj_get_scroll_left+0xe4>)
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7fe fe8d 	bl	8004c3e <lv_obj_has_flag_any>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0ed      	beq.n	8005f04 <lv_obj_get_scroll_left+0x60>
 8005f28:	e7f1      	b.n	8005f0e <lv_obj_get_scroll_left+0x6a>
    if(x1 != LV_COORD_MAX) {
 8005f2a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005f2e:	4598      	cmp	r8, r3
 8005f30:	d025      	beq.n	8005f7e <lv_obj_get_scroll_left+0xda>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005f32:	8aa0      	ldrh	r0, [r4, #20]
 8005f34:	4450      	add	r0, sl
 8005f36:	fa19 f080 	uxtah	r0, r9, r0
 8005f3a:	b280      	uxth	r0, r0
 8005f3c:	eba0 0008 	sub.w	r0, r0, r8
 8005f40:	b205      	sxth	r5, r0
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7fe ff87 	bl	8004e56 <lv_obj_get_self_width>
 8005f48:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005f4a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8005f4e:	fa1f f989 	uxth.w	r9, r9
 8005f52:	4620      	mov	r0, r4
 8005f54:	f7fe feed 	bl	8004d32 <lv_obj_get_width>
 8005f58:	b286      	uxth	r6, r0
 8005f5a:	1bbe      	subs	r6, r7, r6
 8005f5c:	fa1a fa86 	uxtah	sl, sl, r6
 8005f60:	fa19 f68a 	uxtah	r6, r9, sl
 8005f64:	fa18 f686 	uxtah	r6, r8, r6
 8005f68:	b2b6      	uxth	r6, r6
    self_w += lv_obj_get_scroll_x(obj);
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7ff ff0a 	bl	8005d84 <lv_obj_get_scroll_x>
 8005f70:	fa16 f080 	uxtah	r0, r6, r0
 8005f74:	b200      	sxth	r0, r0
    return LV_MAX(child_res, self_w);
 8005f76:	42a8      	cmp	r0, r5
 8005f78:	bfb8      	it	lt
 8005f7a:	4628      	movlt	r0, r5
 8005f7c:	e7a3      	b.n	8005ec6 <lv_obj_get_scroll_left+0x22>
        child_res = LV_COORD_MIN;
 8005f7e:	4d03      	ldr	r5, [pc, #12]	; (8005f8c <lv_obj_get_scroll_left+0xe8>)
 8005f80:	e7df      	b.n	8005f42 <lv_obj_get_scroll_left+0x9e>
        if(obj->spec_attr == NULL) return 0;
 8005f82:	2000      	movs	r0, #0
 8005f84:	e79f      	b.n	8005ec6 <lv_obj_get_scroll_left+0x22>
 8005f86:	bf00      	nop
 8005f88:	00040001 	.word	0x00040001
 8005f8c:	ffffe001 	.word	0xffffe001

08005f90 <lv_obj_get_scroll_right>:
{
 8005f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f94:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005f96:	f241 426a 	movw	r2, #5226	; 0x146a
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	f000 fec4 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005fa0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005fa2:	2801      	cmp	r0, #1
 8005fa4:	d105      	bne.n	8005fb2 <lv_obj_get_scroll_right+0x22>
        if(obj->spec_attr == NULL) return 0;
 8005fa6:	68ab      	ldr	r3, [r5, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d056      	beq.n	800605a <lv_obj_get_scroll_right+0xca>
        return obj->spec_attr->scroll.x;
 8005fac:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
 8005fb0:	e051      	b.n	8006056 <lv_obj_get_scroll_right+0xc6>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 ff71 	bl	8006e9a <lv_obj_get_child_cnt>
 8005fb8:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8005fba:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8005fbc:	4f28      	ldr	r7, [pc, #160]	; (8006060 <lv_obj_get_scroll_right+0xd0>)
    for(i = 0; i < child_cnt; i++) {
 8005fbe:	e005      	b.n	8005fcc <lv_obj_get_scroll_right+0x3c>
        child_res = LV_MAX(child_res, child->coords.x2);
 8005fc0:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8005fc4:	429f      	cmp	r7, r3
 8005fc6:	bfb8      	it	lt
 8005fc8:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8005fca:	3401      	adds	r4, #1
 8005fcc:	4544      	cmp	r4, r8
 8005fce:	d20a      	bcs.n	8005fe6 <lv_obj_get_scroll_right+0x56>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005fd0:	68ab      	ldr	r3, [r5, #8]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005fd8:	4922      	ldr	r1, [pc, #136]	; (8006064 <lv_obj_get_scroll_right+0xd4>)
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7fe fe2f 	bl	8004c3e <lv_obj_has_flag_any>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d0ed      	beq.n	8005fc0 <lv_obj_get_scroll_right+0x30>
 8005fe4:	e7f1      	b.n	8005fca <lv_obj_get_scroll_right+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005fe6:	f641 0213 	movw	r2, #6163	; 0x1813
 8005fea:	2100      	movs	r1, #0
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 fe9b 	bl	8006d28 <lv_obj_get_style_prop>
 8005ff2:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005ff4:	f641 0212 	movw	r2, #6162	; 0x1812
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 fe94 	bl	8006d28 <lv_obj_get_style_prop>
 8006000:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006002:	f241 0232 	movw	r2, #4146	; 0x1032
 8006006:	2100      	movs	r1, #0
 8006008:	4628      	mov	r0, r5
 800600a:	f000 fe8d 	bl	8006d28 <lv_obj_get_style_prop>
 800600e:	4606      	mov	r6, r0
    if(child_res != LV_COORD_MIN) {
 8006010:	4b13      	ldr	r3, [pc, #76]	; (8006060 <lv_obj_get_scroll_right+0xd0>)
 8006012:	429f      	cmp	r7, r3
 8006014:	d004      	beq.n	8006020 <lv_obj_get_scroll_right+0x90>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8006016:	8b28      	ldrh	r0, [r5, #24]
 8006018:	1a20      	subs	r0, r4, r0
 800601a:	4430      	add	r0, r6
 800601c:	4407      	add	r7, r0
 800601e:	b23f      	sxth	r7, r7
    self_w = lv_obj_get_self_width(obj);
 8006020:	4628      	mov	r0, r5
 8006022:	f7fe ff18 	bl	8004e56 <lv_obj_get_self_width>
 8006026:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006028:	0076      	lsls	r6, r6, #1
 800602a:	b2b6      	uxth	r6, r6
 800602c:	4628      	mov	r0, r5
 800602e:	f7fe fe80 	bl	8004d32 <lv_obj_get_width>
 8006032:	b280      	uxth	r0, r0
 8006034:	1a24      	subs	r4, r4, r0
 8006036:	fa19 f484 	uxtah	r4, r9, r4
 800603a:	fa16 f484 	uxtah	r4, r6, r4
 800603e:	fa18 f484 	uxtah	r4, r8, r4
 8006042:	b2a4      	uxth	r4, r4
    self_w -= lv_obj_get_scroll_x(obj);
 8006044:	4628      	mov	r0, r5
 8006046:	f7ff fe9d 	bl	8005d84 <lv_obj_get_scroll_x>
 800604a:	b280      	uxth	r0, r0
 800604c:	1a20      	subs	r0, r4, r0
 800604e:	b200      	sxth	r0, r0
    return LV_MAX(child_res, self_w);
 8006050:	42b8      	cmp	r0, r7
 8006052:	bfb8      	it	lt
 8006054:	4638      	movlt	r0, r7
}
 8006056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(obj->spec_attr == NULL) return 0;
 800605a:	2000      	movs	r0, #0
 800605c:	e7fb      	b.n	8006056 <lv_obj_get_scroll_right+0xc6>
 800605e:	bf00      	nop
 8006060:	ffffe001 	.word	0xffffe001
 8006064:	00040001 	.word	0x00040001

08006068 <lv_obj_scroll_by>:
{
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	b090      	sub	sp, #64	; 0x40
 800606e:	4604      	mov	r4, r0
 8006070:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 8006072:	460f      	mov	r7, r1
 8006074:	b901      	cbnz	r1, 8006078 <lv_obj_scroll_by+0x10>
 8006076:	b1ca      	cbz	r2, 80060ac <lv_obj_scroll_by+0x44>
    if(anim_en == LV_ANIM_ON) {
 8006078:	2b01      	cmp	r3, #1
 800607a:	d01a      	beq.n	80060b2 <lv_obj_scroll_by+0x4a>
        bool y_del = lv_anim_del(obj, scroll_y_anim);
 800607c:	493d      	ldr	r1, [pc, #244]	; (8006174 <lv_obj_scroll_by+0x10c>)
 800607e:	4620      	mov	r0, r4
 8006080:	f003 f9c0 	bl	8009404 <lv_anim_del>
 8006084:	4606      	mov	r6, r0
        bool x_del = lv_anim_del(obj, scroll_x_anim);
 8006086:	493c      	ldr	r1, [pc, #240]	; (8006178 <lv_obj_scroll_by+0x110>)
 8006088:	4620      	mov	r0, r4
 800608a:	f003 f9bb 	bl	8009404 <lv_anim_del>
 800608e:	4680      	mov	r8, r0
        scroll_by_raw(obj, dx, dy);
 8006090:	462a      	mov	r2, r5
 8006092:	4639      	mov	r1, r7
 8006094:	4620      	mov	r0, r4
 8006096:	f7ff fe2b 	bl	8005cf0 <scroll_by_raw>
        if(y_del || x_del) {
 800609a:	b916      	cbnz	r6, 80060a2 <lv_obj_scroll_by+0x3a>
 800609c:	f1b8 0f00 	cmp.w	r8, #0
 80060a0:	d004      	beq.n	80060ac <lv_obj_scroll_by+0x44>
            res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 80060a2:	2200      	movs	r2, #0
 80060a4:	210a      	movs	r1, #10
 80060a6:	4620      	mov	r0, r4
 80060a8:	f7fe fd40 	bl	8004b2c <lv_event_send>
}
 80060ac:	b010      	add	sp, #64	; 0x40
 80060ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 febe 	bl	8006e34 <lv_obj_get_disp>
 80060b8:	4606      	mov	r6, r0
        lv_anim_init(&a);
 80060ba:	4668      	mov	r0, sp
 80060bc:	f003 f988 	bl	80093d0 <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 80060c0:	9400      	str	r4, [sp, #0]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 80060c2:	4b2e      	ldr	r3, [pc, #184]	; (800617c <lv_obj_scroll_by+0x114>)
 80060c4:	9303      	str	r3, [sp, #12]
        if(dx) {
 80060c6:	b997      	cbnz	r7, 80060ee <lv_obj_scroll_by+0x86>
        if(dy) {
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	d0ef      	beq.n	80060ac <lv_obj_scroll_by+0x44>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 80060cc:	4630      	mov	r0, r6
 80060ce:	f003 f81f 	bl	8009110 <lv_disp_get_ver_res>
 80060d2:	462a      	mov	r2, r5
 80060d4:	2100      	movs	r1, #0
 80060d6:	f340 005d 	sbfx	r0, r0, #1, #30
 80060da:	f003 fa07 	bl	80094ec <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 80060de:	28c7      	cmp	r0, #199	; 0xc7
 80060e0:	d92f      	bls.n	8006142 <lv_obj_scroll_by+0xda>
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 80060e2:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 80060e6:	d92d      	bls.n	8006144 <lv_obj_scroll_by+0xdc>
 80060e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80060ec:	e02a      	b.n	8006144 <lv_obj_scroll_by+0xdc>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 80060ee:	4630      	mov	r0, r6
 80060f0:	f002 fff6 	bl	80090e0 <lv_disp_get_hor_res>
 80060f4:	463a      	mov	r2, r7
 80060f6:	2100      	movs	r1, #0
 80060f8:	f340 005d 	sbfx	r0, r0, #1, #30
 80060fc:	f003 f9f6 	bl	80094ec <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8006100:	28c7      	cmp	r0, #199	; 0xc7
 8006102:	d905      	bls.n	8006110 <lv_obj_scroll_by+0xa8>
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 8006104:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8006108:	d903      	bls.n	8006112 <lv_obj_scroll_by+0xaa>
 800610a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800610e:	e000      	b.n	8006112 <lv_obj_scroll_by+0xaa>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8006110:	20c8      	movs	r0, #200	; 0xc8
    a->time = duration;
 8006112:	900a      	str	r0, [sp, #40]	; 0x28
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff fe35 	bl	8005d84 <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 800611a:	4243      	negs	r3, r0
 800611c:	1a38      	subs	r0, r7, r0
    a->start_value = start;
 800611e:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 8006120:	9308      	str	r3, [sp, #32]
    a->end_value = end;
 8006122:	9009      	str	r0, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <lv_obj_scroll_by+0x110>)
 8006126:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 8006128:	4b15      	ldr	r3, [pc, #84]	; (8006180 <lv_obj_scroll_by+0x118>)
 800612a:	9306      	str	r3, [sp, #24]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800612c:	466a      	mov	r2, sp
 800612e:	2109      	movs	r1, #9
 8006130:	4620      	mov	r0, r4
 8006132:	f7fe fcfb 	bl	8004b2c <lv_event_send>
            if(res != LV_RES_OK) return;
 8006136:	2801      	cmp	r0, #1
 8006138:	d1b8      	bne.n	80060ac <lv_obj_scroll_by+0x44>
            lv_anim_start(&a);
 800613a:	4668      	mov	r0, sp
 800613c:	f003 f990 	bl	8009460 <lv_anim_start>
 8006140:	e7c2      	b.n	80060c8 <lv_obj_scroll_by+0x60>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8006142:	20c8      	movs	r0, #200	; 0xc8
    a->time = duration;
 8006144:	900a      	str	r0, [sp, #40]	; 0x28
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8006146:	4620      	mov	r0, r4
 8006148:	f7ff fe31 	bl	8005dae <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 800614c:	4243      	negs	r3, r0
 800614e:	1a28      	subs	r0, r5, r0
    a->start_value = start;
 8006150:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 8006152:	9308      	str	r3, [sp, #32]
    a->end_value = end;
 8006154:	9009      	str	r0, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <lv_obj_scroll_by+0x10c>)
 8006158:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <lv_obj_scroll_by+0x118>)
 800615c:	9306      	str	r3, [sp, #24]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800615e:	466a      	mov	r2, sp
 8006160:	2109      	movs	r1, #9
 8006162:	4620      	mov	r0, r4
 8006164:	f7fe fce2 	bl	8004b2c <lv_event_send>
            if(res != LV_RES_OK) return;
 8006168:	2801      	cmp	r0, #1
 800616a:	d19f      	bne.n	80060ac <lv_obj_scroll_by+0x44>
            lv_anim_start(&a);
 800616c:	4668      	mov	r0, sp
 800616e:	f003 f977 	bl	8009460 <lv_anim_start>
 8006172:	e79b      	b.n	80060ac <lv_obj_scroll_by+0x44>
 8006174:	08005dbf 	.word	0x08005dbf
 8006178:	08005d95 	.word	0x08005d95
 800617c:	08005d37 	.word	0x08005d37
 8006180:	0800950b 	.word	0x0800950b

08006184 <lv_obj_scroll_by_bounded>:
{
 8006184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	4605      	mov	r5, r0
 800618a:	4614      	mov	r4, r2
 800618c:	461e      	mov	r6, r3
    if(dx == 0 && dy == 0) return;
 800618e:	4688      	mov	r8, r1
 8006190:	b901      	cbnz	r1, 8006194 <lv_obj_scroll_by_bounded+0x10>
 8006192:	b382      	cbz	r2, 80061f6 <lv_obj_scroll_by_bounded+0x72>
    lv_obj_update_layout(obj);
 8006194:	4628      	mov	r0, r5
 8006196:	f7ff fd8b 	bl	8005cb0 <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800619a:	4628      	mov	r0, r5
 800619c:	f7ff fdf2 	bl	8005d84 <lv_obj_get_scroll_x>
 80061a0:	fa1f f980 	uxth.w	r9, r0
    lv_coord_t x_bounded = x_current + dx;
 80061a4:	fa1f f888 	uxth.w	r8, r8
 80061a8:	eba8 0109 	sub.w	r1, r8, r9
 80061ac:	fa0f f881 	sxth.w	r8, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80061b0:	f241 426a 	movw	r2, #5226	; 0x146a
 80061b4:	2100      	movs	r1, #0
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fdb6 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80061bc:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80061be:	2801      	cmp	r0, #1
 80061c0:	d030      	beq.n	8006224 <lv_obj_scroll_by_bounded+0xa0>
        if(x_bounded > 0) x_bounded = 0;
 80061c2:	f1b8 0f00 	cmp.w	r8, #0
 80061c6:	dd18      	ble.n	80061fa <lv_obj_scroll_by_bounded+0x76>
 80061c8:	f04f 0800 	mov.w	r8, #0
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 80061cc:	4628      	mov	r0, r5
 80061ce:	f7ff fdee 	bl	8005dae <lv_obj_get_scroll_y>
 80061d2:	b287      	uxth	r7, r0
    lv_coord_t y_bounded = y_current + dy;
 80061d4:	b2a4      	uxth	r4, r4
 80061d6:	1be4      	subs	r4, r4, r7
 80061d8:	b224      	sxth	r4, r4
    if(y_bounded > 0) y_bounded = 0;
 80061da:	2c00      	cmp	r4, #0
 80061dc:	dd3b      	ble.n	8006256 <lv_obj_scroll_by_bounded+0xd2>
 80061de:	2400      	movs	r4, #0
    dx = x_bounded - x_current;
 80061e0:	eb09 0108 	add.w	r1, r9, r8
 80061e4:	b209      	sxth	r1, r1
    dy = y_bounded - y_current;
 80061e6:	193a      	adds	r2, r7, r4
 80061e8:	b212      	sxth	r2, r2
    if(dx || dy) {
 80061ea:	b901      	cbnz	r1, 80061ee <lv_obj_scroll_by_bounded+0x6a>
 80061ec:	b11a      	cbz	r2, 80061f6 <lv_obj_scroll_by_bounded+0x72>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 80061ee:	4633      	mov	r3, r6
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff ff39 	bl	8006068 <lv_obj_scroll_by>
}
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(x_bounded < 0) {
 80061fa:	dae7      	bge.n	80061cc <lv_obj_scroll_by_bounded+0x48>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 80061fc:	4628      	mov	r0, r5
 80061fe:	f7ff fe51 	bl	8005ea4 <lv_obj_get_scroll_left>
 8006202:	b287      	uxth	r7, r0
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff fec3 	bl	8005f90 <lv_obj_get_scroll_right>
 800620a:	fa17 f380 	uxtah	r3, r7, r0
 800620e:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 8006210:	2b00      	cmp	r3, #0
 8006212:	db05      	blt.n	8006220 <lv_obj_scroll_by_bounded+0x9c>
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8006214:	425a      	negs	r2, r3
 8006216:	4590      	cmp	r8, r2
 8006218:	dad8      	bge.n	80061cc <lv_obj_scroll_by_bounded+0x48>
 800621a:	fa0f f882 	sxth.w	r8, r2
 800621e:	e7d5      	b.n	80061cc <lv_obj_scroll_by_bounded+0x48>
            if(scroll_max < 0) scroll_max = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	e7f7      	b.n	8006214 <lv_obj_scroll_by_bounded+0x90>
        if(x_bounded < 0) x_bounded = 0;
 8006224:	f1b8 0f00 	cmp.w	r8, #0
 8006228:	db12      	blt.n	8006250 <lv_obj_scroll_by_bounded+0xcc>
        if(x_bounded > 0) {
 800622a:	ddcf      	ble.n	80061cc <lv_obj_scroll_by_bounded+0x48>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800622c:	4628      	mov	r0, r5
 800622e:	f7ff fe39 	bl	8005ea4 <lv_obj_get_scroll_left>
 8006232:	b287      	uxth	r7, r0
 8006234:	4628      	mov	r0, r5
 8006236:	f7ff feab 	bl	8005f90 <lv_obj_get_scroll_right>
 800623a:	fa17 f080 	uxtah	r0, r7, r0
 800623e:	b200      	sxth	r0, r0
            if(scroll_max < 0) scroll_max = 0;
 8006240:	2800      	cmp	r0, #0
 8006242:	db03      	blt.n	800624c <lv_obj_scroll_by_bounded+0xc8>
            if(x_bounded > scroll_max) x_bounded = scroll_max;
 8006244:	4540      	cmp	r0, r8
 8006246:	dac1      	bge.n	80061cc <lv_obj_scroll_by_bounded+0x48>
 8006248:	4680      	mov	r8, r0
 800624a:	e7bf      	b.n	80061cc <lv_obj_scroll_by_bounded+0x48>
            if(scroll_max < 0) scroll_max = 0;
 800624c:	2000      	movs	r0, #0
 800624e:	e7f9      	b.n	8006244 <lv_obj_scroll_by_bounded+0xc0>
        if(x_bounded < 0) x_bounded = 0;
 8006250:	f04f 0800 	mov.w	r8, #0
 8006254:	e7ba      	b.n	80061cc <lv_obj_scroll_by_bounded+0x48>
    if(y_bounded < 0) {
 8006256:	dac3      	bge.n	80061e0 <lv_obj_scroll_by_bounded+0x5c>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8006258:	4628      	mov	r0, r5
 800625a:	f7ff fdbd 	bl	8005dd8 <lv_obj_get_scroll_top>
 800625e:	fa1f fa80 	uxth.w	sl, r0
 8006262:	4628      	mov	r0, r5
 8006264:	f7ff fdc0 	bl	8005de8 <lv_obj_get_scroll_bottom>
 8006268:	fa1a f080 	uxtah	r0, sl, r0
 800626c:	b200      	sxth	r0, r0
        if(scroll_max < 0) scroll_max = 0;
 800626e:	2800      	cmp	r0, #0
 8006270:	db04      	blt.n	800627c <lv_obj_scroll_by_bounded+0xf8>
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 8006272:	4243      	negs	r3, r0
 8006274:	429c      	cmp	r4, r3
 8006276:	dab3      	bge.n	80061e0 <lv_obj_scroll_by_bounded+0x5c>
 8006278:	b21c      	sxth	r4, r3
 800627a:	e7b1      	b.n	80061e0 <lv_obj_scroll_by_bounded+0x5c>
        if(scroll_max < 0) scroll_max = 0;
 800627c:	2000      	movs	r0, #0
 800627e:	e7f8      	b.n	8006272 <lv_obj_scroll_by_bounded+0xee>

08006280 <lv_obj_scroll_to_x>:
{
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4604      	mov	r4, r0
 8006284:	460e      	mov	r6, r1
 8006286:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_x_anim);
 8006288:	4906      	ldr	r1, [pc, #24]	; (80062a4 <lv_obj_scroll_to_x+0x24>)
 800628a:	f003 f8bb 	bl	8009404 <lv_anim_del>
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800628e:	4620      	mov	r0, r4
 8006290:	f7ff fd78 	bl	8005d84 <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 8006294:	1b81      	subs	r1, r0, r6
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 8006296:	462b      	mov	r3, r5
 8006298:	2200      	movs	r2, #0
 800629a:	b209      	sxth	r1, r1
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff ff71 	bl	8006184 <lv_obj_scroll_by_bounded>
}
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	08005d95 	.word	0x08005d95

080062a8 <lv_obj_scroll_to_y>:
{
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4604      	mov	r4, r0
 80062ac:	460e      	mov	r6, r1
 80062ae:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_y_anim);
 80062b0:	4906      	ldr	r1, [pc, #24]	; (80062cc <lv_obj_scroll_to_y+0x24>)
 80062b2:	f003 f8a7 	bl	8009404 <lv_anim_del>
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff fd79 	bl	8005dae <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 80062bc:	1b80      	subs	r0, r0, r6
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 80062be:	462b      	mov	r3, r5
 80062c0:	b202      	sxth	r2, r0
 80062c2:	2100      	movs	r1, #0
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff ff5d 	bl	8006184 <lv_obj_scroll_by_bounded>
}
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	08005dbf 	.word	0x08005dbf

080062d0 <lv_obj_scroll_to>:
{
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4605      	mov	r5, r0
 80062d4:	4616      	mov	r6, r2
 80062d6:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 80062d8:	461a      	mov	r2, r3
 80062da:	f7ff ffd1 	bl	8006280 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 80062de:	4622      	mov	r2, r4
 80062e0:	4631      	mov	r1, r6
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7ff ffe0 	bl	80062a8 <lv_obj_scroll_to_y>
}
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080062ec <lv_obj_get_scrollbar_area>:
{
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f0:	b095      	sub	sp, #84	; 0x54
 80062f2:	4604      	mov	r4, r0
 80062f4:	460f      	mov	r7, r1
 80062f6:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 80062f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80062fc:	9500      	str	r5, [sp, #0]
 80062fe:	462b      	mov	r3, r5
 8006300:	2200      	movs	r2, #0
 8006302:	4611      	mov	r1, r2
 8006304:	4638      	mov	r0, r7
 8006306:	f003 f942 	bl	800958e <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800630a:	9500      	str	r5, [sp, #0]
 800630c:	462b      	mov	r3, r5
 800630e:	2200      	movs	r2, #0
 8006310:	4611      	mov	r1, r2
 8006312:	4630      	mov	r0, r6
 8006314:	f003 f93b 	bl	800958e <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8006318:	2110      	movs	r1, #16
 800631a:	4620      	mov	r0, r4
 800631c:	f7fe fc88 	bl	8004c30 <lv_obj_has_flag>
 8006320:	9003      	str	r0, [sp, #12]
 8006322:	b120      	cbz	r0, 800632e <lv_obj_get_scrollbar_area+0x42>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 8006324:	4620      	mov	r0, r4
 8006326:	f7ff fd0d 	bl	8005d44 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800632a:	4681      	mov	r9, r0
 800632c:	b910      	cbnz	r0, 8006334 <lv_obj_get_scrollbar_area+0x48>
}
 800632e:	b015      	add	sp, #84	; 0x54
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8006334:	2000      	movs	r0, #0
 8006336:	f002 ff13 	bl	8009160 <lv_indev_get_next>
 800633a:	4605      	mov	r5, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800633c:	f1b9 0f02 	cmp.w	r9, #2
 8006340:	d10c      	bne.n	800635c <lv_obj_get_scrollbar_area+0x70>
        while(indev) {
 8006342:	b14d      	cbz	r5, 8006358 <lv_obj_get_scrollbar_area+0x6c>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8006344:	4628      	mov	r0, r5
 8006346:	f7fe fc3a 	bl	8004bbe <lv_indev_get_scroll_obj>
 800634a:	4284      	cmp	r4, r0
 800634c:	d004      	beq.n	8006358 <lv_obj_get_scrollbar_area+0x6c>
            indev = lv_indev_get_next(indev);
 800634e:	4628      	mov	r0, r5
 8006350:	f002 ff06 	bl	8009160 <lv_indev_get_next>
 8006354:	4605      	mov	r5, r0
 8006356:	e7f4      	b.n	8006342 <lv_obj_get_scrollbar_area+0x56>
        if(indev == NULL)  return;
 8006358:	2d00      	cmp	r5, #0
 800635a:	d0e8      	beq.n	800632e <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800635c:	4620      	mov	r0, r4
 800635e:	f7ff fd3b 	bl	8005dd8 <lv_obj_get_scroll_top>
 8006362:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8006364:	4620      	mov	r0, r4
 8006366:	f7ff fd3f 	bl	8005de8 <lv_obj_get_scroll_bottom>
 800636a:	9004      	str	r0, [sp, #16]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800636c:	4620      	mov	r0, r4
 800636e:	f7ff fd99 	bl	8005ea4 <lv_obj_get_scroll_left>
 8006372:	9005      	str	r0, [sp, #20]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006374:	4620      	mov	r0, r4
 8006376:	f7ff fe0b 	bl	8005f90 <lv_obj_get_scroll_right>
 800637a:	9006      	str	r0, [sp, #24]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800637c:	4620      	mov	r0, r4
 800637e:	f7ff fce9 	bl	8005d54 <lv_obj_get_scroll_dir>
 8006382:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
 8006384:	f010 0f0c 	tst.w	r0, #12
 8006388:	d021      	beq.n	80063ce <lv_obj_get_scrollbar_area+0xe2>
 800638a:	f1b9 0f01 	cmp.w	r9, #1
 800638e:	f000 8132 	beq.w	80065f6 <lv_obj_get_scrollbar_area+0x30a>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8006392:	f1b9 0f03 	cmp.w	r9, #3
 8006396:	d005      	beq.n	80063a4 <lv_obj_get_scrollbar_area+0xb8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006398:	f1b9 0f02 	cmp.w	r9, #2
 800639c:	d00e      	beq.n	80063bc <lv_obj_get_scrollbar_area+0xd0>
    bool ver_draw = false;
 800639e:	f04f 0b00 	mov.w	fp, #0
 80063a2:	e016      	b.n	80063d2 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 80063a4:	f1b8 0f00 	cmp.w	r8, #0
 80063a8:	dd02      	ble.n	80063b0 <lv_obj_get_scrollbar_area+0xc4>
        ver_draw = true;
 80063aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80063ae:	e010      	b.n	80063d2 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 80063b0:	9b04      	ldr	r3, [sp, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	ddf0      	ble.n	8006398 <lv_obj_get_scrollbar_area+0xac>
        ver_draw = true;
 80063b6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80063ba:	e00a      	b.n	80063d2 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 80063bc:	4628      	mov	r0, r5
 80063be:	f7fe fbed 	bl	8004b9c <lv_indev_get_scroll_dir>
 80063c2:	280c      	cmp	r0, #12
 80063c4:	f000 811a 	beq.w	80065fc <lv_obj_get_scrollbar_area+0x310>
    bool ver_draw = false;
 80063c8:	f04f 0b00 	mov.w	fp, #0
 80063cc:	e001      	b.n	80063d2 <lv_obj_get_scrollbar_area+0xe6>
 80063ce:	f04f 0b00 	mov.w	fp, #0
    if((dir & LV_DIR_HOR) &&
 80063d2:	f01a 0f03 	tst.w	sl, #3
 80063d6:	d00a      	beq.n	80063ee <lv_obj_get_scrollbar_area+0x102>
 80063d8:	f1b9 0f01 	cmp.w	r9, #1
 80063dc:	d00c      	beq.n	80063f8 <lv_obj_get_scrollbar_area+0x10c>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 80063de:	f1b9 0f03 	cmp.w	r9, #3
 80063e2:	f000 810e 	beq.w	8006602 <lv_obj_get_scrollbar_area+0x316>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80063e6:	f1b9 0f02 	cmp.w	r9, #2
 80063ea:	f000 8113 	beq.w	8006614 <lv_obj_get_scrollbar_area+0x328>
    if(!hor_draw && !ver_draw) return;
 80063ee:	f1bb 0f00 	cmp.w	fp, #0
 80063f2:	d09c      	beq.n	800632e <lv_obj_get_scrollbar_area+0x42>
 80063f4:	2300      	movs	r3, #0
 80063f6:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80063f8:	f241 426a 	movw	r2, #5226	; 0x146a
 80063fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fc91 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006406:	b2c3      	uxtb	r3, r0
 8006408:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800640a:	f641 0210 	movw	r2, #6160	; 0x1810
 800640e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006412:	4620      	mov	r0, r4
 8006414:	f000 fc88 	bl	8006d28 <lv_obj_get_style_prop>
 8006418:	9012      	str	r0, [sp, #72]	; 0x48
    return (lv_coord_t)v.num;
 800641a:	b203      	sxth	r3, r0
 800641c:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800641e:	f641 0211 	movw	r2, #6161	; 0x1811
 8006422:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006426:	4620      	mov	r0, r4
 8006428:	f000 fc7e 	bl	8006d28 <lv_obj_get_style_prop>
 800642c:	9009      	str	r0, [sp, #36]	; 0x24
    return (lv_coord_t)v.num;
 800642e:	b203      	sxth	r3, r0
 8006430:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006432:	f641 0212 	movw	r2, #6162	; 0x1812
 8006436:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800643a:	4620      	mov	r0, r4
 800643c:	f000 fc74 	bl	8006d28 <lv_obj_get_style_prop>
 8006440:	9011      	str	r0, [sp, #68]	; 0x44
    return (lv_coord_t)v.num;
 8006442:	b203      	sxth	r3, r0
 8006444:	9310      	str	r3, [sp, #64]	; 0x40
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006446:	f641 0213 	movw	r2, #6163	; 0x1813
 800644a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800644e:	4620      	mov	r0, r4
 8006450:	f000 fc6a 	bl	8006d28 <lv_obj_get_style_prop>
 8006454:	900d      	str	r0, [sp, #52]	; 0x34
    return (lv_coord_t)v.num;
 8006456:	b203      	sxth	r3, r0
 8006458:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800645a:	f241 0201 	movw	r2, #4097	; 0x1001
 800645e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fc60 	bl	8006d28 <lv_obj_get_style_prop>
 8006468:	9008      	str	r0, [sp, #32]
    return (lv_coord_t)v.num;
 800646a:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t obj_h = lv_obj_get_height(obj);
 800646e:	4620      	mov	r0, r4
 8006470:	f7fe fc67 	bl	8004d42 <lv_obj_get_height>
 8006474:	4605      	mov	r5, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8006476:	4620      	mov	r0, r4
 8006478:	f7fe fc5b 	bl	8004d32 <lv_obj_get_width>
 800647c:	9007      	str	r0, [sp, #28]
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800647e:	f1bb 0f00 	cmp.w	fp, #0
 8006482:	f000 80ce 	beq.w	8006622 <lv_obj_get_scrollbar_area+0x336>
 8006486:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800648a:	9b03      	ldr	r3, [sp, #12]
 800648c:	b90b      	cbnz	r3, 8006492 <lv_obj_get_scrollbar_area+0x1a6>
 800648e:	f04f 0900 	mov.w	r9, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8006492:	2221      	movs	r2, #33	; 0x21
 8006494:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fc45 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800649e:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 80064a0:	2801      	cmp	r0, #1
 80064a2:	f240 80c1 	bls.w	8006628 <lv_obj_get_scrollbar_area+0x33c>
    lv_coord_t content_h = obj_h + st + sb;
 80064a6:	fa1f fa85 	uxth.w	sl, r5
 80064aa:	eb0a 0008 	add.w	r0, sl, r8
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	fa13 f080 	uxtah	r0, r3, r0
 80064b4:	fa1f f880 	uxth.w	r8, r0
 80064b8:	b200      	sxth	r0, r0
    if(ver_draw && content_h) {
 80064ba:	f1bb 0f00 	cmp.w	fp, #0
 80064be:	f000 80fe 	beq.w	80066be <lv_obj_get_scrollbar_area+0x3d2>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f000 80fb 	beq.w	80066be <lv_obj_get_scrollbar_area+0x3d2>
        ver_area->y1 = obj->coords.y1;
 80064c8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80064cc:	8073      	strh	r3, [r6, #2]
        ver_area->y2 = obj->coords.y2;
 80064ce:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80064d2:	80f3      	strh	r3, [r6, #6]
        if(rtl) {
 80064d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	f000 80b1 	beq.w	800663e <lv_obj_get_scrollbar_area+0x352>
            ver_area->x2 = obj->coords.x2 - right_space;
 80064dc:	8b22      	ldrh	r2, [r4, #24]
 80064de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	b293      	uxth	r3, r2
 80064e4:	80b2      	strh	r2, [r6, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 80064e6:	9a08      	ldr	r2, [sp, #32]
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3301      	adds	r3, #1
 80064ee:	8033      	strh	r3, [r6, #0]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 80064f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064f2:	eba5 0b03 	sub.w	fp, r5, r3
 80064f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f8:	ebab 0b03 	sub.w	fp, fp, r3
 80064fc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006500:	ebab 0b09 	sub.w	fp, fp, r9
 8006504:	fb0b f505 	mul.w	r5, fp, r5
 8006508:	fb95 f0f0 	sdiv	r0, r5, r0
 800650c:	fa0f fb80 	sxth.w	fp, r0
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006510:	465d      	mov	r5, fp
 8006512:	2000      	movs	r0, #0
 8006514:	f002 fe14 	bl	8009140 <lv_disp_get_dpi>
 8006518:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800651c:	0040      	lsls	r0, r0, #1
 800651e:	28ef      	cmp	r0, #239	; 0xef
 8006520:	f300 8098 	bgt.w	8006654 <lv_obj_get_scrollbar_area+0x368>
 8006524:	2301      	movs	r3, #1
 8006526:	429d      	cmp	r5, r3
 8006528:	f340 80a2 	ble.w	8006670 <lv_obj_get_scrollbar_area+0x384>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800652c:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 8006530:	ebaa 0300 	sub.w	r3, sl, r0
 8006534:	b29b      	uxth	r3, r3
 8006536:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 800653a:	1b5b      	subs	r3, r3, r5
 800653c:	b29b      	uxth	r3, r3
 800653e:	fa1f f989 	uxth.w	r9, r9
 8006542:	eba3 0309 	sub.w	r3, r3, r9
 8006546:	b29b      	uxth	r3, r3
 8006548:	fa1f fb8b 	uxth.w	fp, fp
 800654c:	eba3 030b 	sub.w	r3, r3, fp
 8006550:	b29a      	uxth	r2, r3
 8006552:	b21b      	sxth	r3, r3
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8006554:	eba8 080a 	sub.w	r8, r8, sl
 8006558:	fa0f f888 	sxth.w	r8, r8
        if(scroll_h <= 0) {
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	f340 80a2 	ble.w	80066a8 <lv_obj_get_scrollbar_area+0x3bc>
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8006564:	9904      	ldr	r1, [sp, #16]
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	fb93 f3f8 	sdiv	r3, r3, r8
            sb_y = rem - sb_y;
 800656e:	1ad3      	subs	r3, r2, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8006570:	8ae2      	ldrh	r2, [r4, #22]
 8006572:	fa12 f383 	uxtah	r3, r2, r3
 8006576:	fa10 f383 	uxtah	r3, r0, r3
 800657a:	b21a      	sxth	r2, r3
 800657c:	8072      	strh	r2, [r6, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800657e:	fa1b f383 	uxtah	r3, fp, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	80f3      	strh	r3, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 8006588:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 800658c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800658e:	440b      	add	r3, r1
 8006590:	429a      	cmp	r2, r3
 8006592:	f2c0 8137 	blt.w	8006804 <lv_obj_get_scrollbar_area+0x518>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 8006596:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 800659a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800659e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80065a4:	1a1b      	subs	r3, r3, r0
 80065a6:	4299      	cmp	r1, r3
 80065a8:	f340 8089 	ble.w	80066be <lv_obj_get_scrollbar_area+0x3d2>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 80065ac:	b293      	uxth	r3, r2
 80065ae:	eba3 0909 	sub.w	r9, r3, r9
 80065b2:	fa1f f389 	uxth.w	r3, r9
 80065b6:	1b5d      	subs	r5, r3, r5
 80065b8:	b22d      	sxth	r5, r5
 80065ba:	80f5      	strh	r5, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 80065bc:	2000      	movs	r0, #0
 80065be:	f002 fdbf 	bl	8009140 <lv_disp_get_dpi>
 80065c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065c6:	0043      	lsls	r3, r0, #1
 80065c8:	2bef      	cmp	r3, #239	; 0xef
 80065ca:	f300 815b 	bgt.w	8006884 <lv_obj_get_scrollbar_area+0x598>
 80065ce:	2301      	movs	r3, #1
 80065d0:	1aeb      	subs	r3, r5, r3
 80065d2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80065d6:	4293      	cmp	r3, r2
 80065d8:	da71      	bge.n	80066be <lv_obj_get_scrollbar_area+0x3d2>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 80065da:	88f5      	ldrh	r5, [r6, #6]
 80065dc:	2000      	movs	r0, #0
 80065de:	f002 fdaf 	bl	8009140 <lv_disp_get_dpi>
 80065e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065e6:	0043      	lsls	r3, r0, #1
 80065e8:	2bef      	cmp	r3, #239	; 0xef
 80065ea:	f300 8159 	bgt.w	80068a0 <lv_obj_get_scrollbar_area+0x5b4>
 80065ee:	2301      	movs	r3, #1
 80065f0:	1aeb      	subs	r3, r5, r3
 80065f2:	8073      	strh	r3, [r6, #2]
 80065f4:	e063      	b.n	80066be <lv_obj_get_scrollbar_area+0x3d2>
        ver_draw = true;
 80065f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80065fa:	e6ea      	b.n	80063d2 <lv_obj_get_scrollbar_area+0xe6>
 80065fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006600:	e6e7      	b.n	80063d2 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8006602:	9b05      	ldr	r3, [sp, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f73f aef7 	bgt.w	80063f8 <lv_obj_get_scrollbar_area+0x10c>
 800660a:	9b06      	ldr	r3, [sp, #24]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f73f aef3 	bgt.w	80063f8 <lv_obj_get_scrollbar_area+0x10c>
 8006612:	e6e8      	b.n	80063e6 <lv_obj_get_scrollbar_area+0xfa>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8006614:	4628      	mov	r0, r5
 8006616:	f7fe fac1 	bl	8004b9c <lv_indev_get_scroll_dir>
 800661a:	2803      	cmp	r0, #3
 800661c:	f47f aee7 	bne.w	80063ee <lv_obj_get_scrollbar_area+0x102>
 8006620:	e6ea      	b.n	80063f8 <lv_obj_get_scrollbar_area+0x10c>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 8006622:	2300      	movs	r3, #0
 8006624:	930e      	str	r3, [sp, #56]	; 0x38
 8006626:	e730      	b.n	800648a <lv_obj_get_scrollbar_area+0x19e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8006628:	2231      	movs	r2, #49	; 0x31
 800662a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800662e:	4620      	mov	r0, r4
 8006630:	f000 fb7a 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006634:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8006636:	2801      	cmp	r0, #1
 8006638:	f63f af35 	bhi.w	80064a6 <lv_obj_get_scrollbar_area+0x1ba>
 800663c:	e677      	b.n	800632e <lv_obj_get_scrollbar_area+0x42>
            ver_area->x1 = obj->coords.x1 + left_space;
 800663e:	8aa3      	ldrh	r3, [r4, #20]
 8006640:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006642:	4413      	add	r3, r2
 8006644:	8033      	strh	r3, [r6, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8006646:	9a08      	ldr	r2, [sp, #32]
 8006648:	fa12 f383 	uxtah	r3, r2, r3
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	80b3      	strh	r3, [r6, #4]
 8006652:	e74d      	b.n	80064f0 <lv_obj_get_scrollbar_area+0x204>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006654:	2000      	movs	r0, #0
 8006656:	f002 fd73 	bl	8009140 <lv_disp_get_dpi>
 800665a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800665e:	0043      	lsls	r3, r0, #1
 8006660:	3350      	adds	r3, #80	; 0x50
 8006662:	4ab7      	ldr	r2, [pc, #732]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 8006664:	fb82 1203 	smull	r1, r2, r2, r3
 8006668:	17db      	asrs	r3, r3, #31
 800666a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800666e:	e75a      	b.n	8006526 <lv_obj_get_scrollbar_area+0x23a>
 8006670:	2000      	movs	r0, #0
 8006672:	f002 fd65 	bl	8009140 <lv_disp_get_dpi>
 8006676:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800667a:	0043      	lsls	r3, r0, #1
 800667c:	2bef      	cmp	r3, #239	; 0xef
 800667e:	dc02      	bgt.n	8006686 <lv_obj_get_scrollbar_area+0x39a>
 8006680:	f04f 0b01 	mov.w	fp, #1
 8006684:	e752      	b.n	800652c <lv_obj_get_scrollbar_area+0x240>
 8006686:	2000      	movs	r0, #0
 8006688:	f002 fd5a 	bl	8009140 <lv_disp_get_dpi>
 800668c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006690:	0043      	lsls	r3, r0, #1
 8006692:	3350      	adds	r3, #80	; 0x50
 8006694:	4aaa      	ldr	r2, [pc, #680]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 8006696:	fb82 1203 	smull	r1, r2, r2, r3
 800669a:	ea4f 7be3 	mov.w	fp, r3, asr #31
 800669e:	ebcb 1ba2 	rsb	fp, fp, r2, asr #6
 80066a2:	fa0f fb8b 	sxth.w	fp, fp
 80066a6:	e741      	b.n	800652c <lv_obj_get_scrollbar_area+0x240>
            ver_area->y1 = obj->coords.y1 + top_space;
 80066a8:	8ae3      	ldrh	r3, [r4, #22]
 80066aa:	4418      	add	r0, r3
 80066ac:	8070      	strh	r0, [r6, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 80066ae:	8b63      	ldrh	r3, [r4, #26]
 80066b0:	1b5b      	subs	r3, r3, r5
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	eba3 0309 	sub.w	r3, r3, r9
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	80f3      	strh	r3, [r6, #6]
    lv_coord_t content_w = obj_w + sl + sr;
 80066be:	f8bd 801c 	ldrh.w	r8, [sp, #28]
 80066c2:	9805      	ldr	r0, [sp, #20]
 80066c4:	4440      	add	r0, r8
 80066c6:	9b06      	ldr	r3, [sp, #24]
 80066c8:	fa13 f080 	uxtah	r0, r3, r0
 80066cc:	fa1f fa80 	uxth.w	sl, r0
 80066d0:	b200      	sxth	r0, r0
    if(hor_draw && content_w) {
 80066d2:	9b03      	ldr	r3, [sp, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f43f ae2a 	beq.w	800632e <lv_obj_get_scrollbar_area+0x42>
 80066da:	2800      	cmp	r0, #0
 80066dc:	f43f ae27 	beq.w	800632e <lv_obj_get_scrollbar_area+0x42>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 80066e0:	8b62      	ldrh	r2, [r4, #26]
 80066e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e4:	1ad2      	subs	r2, r2, r3
 80066e6:	b293      	uxth	r3, r2
 80066e8:	80fa      	strh	r2, [r7, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 80066ea:	9a08      	ldr	r2, [sp, #32]
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3301      	adds	r3, #1
 80066f2:	807b      	strh	r3, [r7, #2]
        hor_area->x1 = obj->coords.x1;
 80066f4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80066f8:	803b      	strh	r3, [r7, #0]
        hor_area->x2 = obj->coords.x2;
 80066fa:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 80066fe:	80bb      	strh	r3, [r7, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 8006700:	9b07      	ldr	r3, [sp, #28]
 8006702:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006704:	1a9d      	subs	r5, r3, r2
 8006706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006708:	1aad      	subs	r5, r5, r2
 800670a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800670c:	4693      	mov	fp, r2
 800670e:	1aad      	subs	r5, r5, r2
 8006710:	fb03 f505 	mul.w	r5, r3, r5
 8006714:	fb95 f0f0 	sdiv	r0, r5, r0
 8006718:	b205      	sxth	r5, r0
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800671a:	462e      	mov	r6, r5
 800671c:	2000      	movs	r0, #0
 800671e:	f002 fd0f 	bl	8009140 <lv_disp_get_dpi>
 8006722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006726:	0040      	lsls	r0, r0, #1
 8006728:	28ef      	cmp	r0, #239	; 0xef
 800672a:	f300 80c8 	bgt.w	80068be <lv_obj_get_scrollbar_area+0x5d2>
 800672e:	2301      	movs	r3, #1
 8006730:	429e      	cmp	r6, r3
 8006732:	f340 80d2 	ble.w	80068da <lv_obj_get_scrollbar_area+0x5ee>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 8006736:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 800673a:	eba8 0300 	sub.w	r3, r8, r0
 800673e:	b29b      	uxth	r3, r3
 8006740:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 8006744:	1b9b      	subs	r3, r3, r6
 8006746:	b29b      	uxth	r3, r3
 8006748:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 800674c:	eba3 0309 	sub.w	r3, r3, r9
 8006750:	b29b      	uxth	r3, r3
 8006752:	b2ad      	uxth	r5, r5
 8006754:	1b5b      	subs	r3, r3, r5
 8006756:	b29a      	uxth	r2, r3
 8006758:	b21b      	sxth	r3, r3
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800675a:	ebaa 0808 	sub.w	r8, sl, r8
 800675e:	fa0f f888 	sxth.w	r8, r8
        if(scroll_w <= 0) {
 8006762:	f1b8 0f00 	cmp.w	r8, #0
 8006766:	f340 80d1 	ble.w	800690c <lv_obj_get_scrollbar_area+0x620>
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800676a:	9906      	ldr	r1, [sp, #24]
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	fb93 f3f8 	sdiv	r3, r3, r8
            sb_x = rem - sb_x;
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	b29b      	uxth	r3, r3
            if(rtl) {
 8006778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677a:	2a01      	cmp	r2, #1
 800677c:	f000 80e2 	beq.w	8006944 <lv_obj_get_scrollbar_area+0x658>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 8006780:	8aa2      	ldrh	r2, [r4, #20]
 8006782:	4413      	add	r3, r2
 8006784:	fa10 f383 	uxtah	r3, r0, r3
 8006788:	b21a      	sxth	r2, r3
 800678a:	803a      	strh	r2, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800678c:	fa15 f383 	uxtah	r3, r5, r3
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	80bb      	strh	r3, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 8006796:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800679a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800679c:	440b      	add	r3, r1
 800679e:	429a      	cmp	r2, r3
 80067a0:	f2c0 815c 	blt.w	8006a5c <lv_obj_get_scrollbar_area+0x770>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 80067a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067a8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80067ac:	eba2 030b 	sub.w	r3, r2, fp
 80067b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80067b2:	1a1b      	subs	r3, r3, r0
 80067b4:	4299      	cmp	r1, r3
 80067b6:	f77f adba 	ble.w	800632e <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 80067ba:	b294      	uxth	r4, r2
 80067bc:	eba4 0409 	sub.w	r4, r4, r9
 80067c0:	b2a4      	uxth	r4, r4
 80067c2:	1ba4      	subs	r4, r4, r6
 80067c4:	b224      	sxth	r4, r4
 80067c6:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 80067c8:	2000      	movs	r0, #0
 80067ca:	f002 fcb9 	bl	8009140 <lv_disp_get_dpi>
 80067ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067d2:	0043      	lsls	r3, r0, #1
 80067d4:	2bef      	cmp	r3, #239	; 0xef
 80067d6:	f300 817b 	bgt.w	8006ad0 <lv_obj_get_scrollbar_area+0x7e4>
 80067da:	2301      	movs	r3, #1
 80067dc:	1ae3      	subs	r3, r4, r3
 80067de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	f6bf ada3 	bge.w	800632e <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 80067e8:	88bc      	ldrh	r4, [r7, #4]
 80067ea:	2000      	movs	r0, #0
 80067ec:	f002 fca8 	bl	8009140 <lv_disp_get_dpi>
 80067f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067f4:	0043      	lsls	r3, r0, #1
 80067f6:	2bef      	cmp	r3, #239	; 0xef
 80067f8:	f300 8178 	bgt.w	8006aec <lv_obj_get_scrollbar_area+0x800>
 80067fc:	2301      	movs	r3, #1
 80067fe:	1ae3      	subs	r3, r4, r3
 8006800:	803b      	strh	r3, [r7, #0]
 8006802:	e594      	b.n	800632e <lv_obj_get_scrollbar_area+0x42>
                ver_area->y1 = obj->coords.y1 + top_space;
 8006804:	fa10 f181 	uxtah	r1, r0, r1
 8006808:	fa0f f881 	sxth.w	r8, r1
 800680c:	f8a6 8002 	strh.w	r8, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 8006810:	2000      	movs	r0, #0
 8006812:	f002 fc95 	bl	8009140 <lv_disp_get_dpi>
 8006816:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800681a:	0043      	lsls	r3, r0, #1
 800681c:	2bef      	cmp	r3, #239	; 0xef
 800681e:	dc14      	bgt.n	800684a <lv_obj_get_scrollbar_area+0x55e>
 8006820:	2301      	movs	r3, #1
 8006822:	4443      	add	r3, r8
 8006824:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8006828:	4293      	cmp	r3, r2
 800682a:	f77f aeb4 	ble.w	8006596 <lv_obj_get_scrollbar_area+0x2aa>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800682e:	f8b6 8002 	ldrh.w	r8, [r6, #2]
 8006832:	2000      	movs	r0, #0
 8006834:	f002 fc84 	bl	8009140 <lv_disp_get_dpi>
 8006838:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800683c:	0043      	lsls	r3, r0, #1
 800683e:	2bef      	cmp	r3, #239	; 0xef
 8006840:	dc11      	bgt.n	8006866 <lv_obj_get_scrollbar_area+0x57a>
 8006842:	2301      	movs	r3, #1
 8006844:	4443      	add	r3, r8
 8006846:	80f3      	strh	r3, [r6, #6]
 8006848:	e6a5      	b.n	8006596 <lv_obj_get_scrollbar_area+0x2aa>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800684a:	2000      	movs	r0, #0
 800684c:	f002 fc78 	bl	8009140 <lv_disp_get_dpi>
 8006850:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006854:	0043      	lsls	r3, r0, #1
 8006856:	3350      	adds	r3, #80	; 0x50
 8006858:	4a39      	ldr	r2, [pc, #228]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 800685a:	fb82 1203 	smull	r1, r2, r2, r3
 800685e:	17db      	asrs	r3, r3, #31
 8006860:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8006864:	e7dd      	b.n	8006822 <lv_obj_get_scrollbar_area+0x536>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006866:	2000      	movs	r0, #0
 8006868:	f002 fc6a 	bl	8009140 <lv_disp_get_dpi>
 800686c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006870:	0043      	lsls	r3, r0, #1
 8006872:	3350      	adds	r3, #80	; 0x50
 8006874:	4a32      	ldr	r2, [pc, #200]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 8006876:	fb82 1203 	smull	r1, r2, r2, r3
 800687a:	17db      	asrs	r3, r3, #31
 800687c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8006880:	b29b      	uxth	r3, r3
 8006882:	e7df      	b.n	8006844 <lv_obj_get_scrollbar_area+0x558>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 8006884:	2000      	movs	r0, #0
 8006886:	f002 fc5b 	bl	8009140 <lv_disp_get_dpi>
 800688a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800688e:	0043      	lsls	r3, r0, #1
 8006890:	3350      	adds	r3, #80	; 0x50
 8006892:	4a2b      	ldr	r2, [pc, #172]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 8006894:	fb82 1203 	smull	r1, r2, r2, r3
 8006898:	17db      	asrs	r3, r3, #31
 800689a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800689e:	e697      	b.n	80065d0 <lv_obj_get_scrollbar_area+0x2e4>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 80068a0:	2000      	movs	r0, #0
 80068a2:	f002 fc4d 	bl	8009140 <lv_disp_get_dpi>
 80068a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068aa:	0043      	lsls	r3, r0, #1
 80068ac:	3350      	adds	r3, #80	; 0x50
 80068ae:	4a24      	ldr	r2, [pc, #144]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 80068b0:	fb82 1203 	smull	r1, r2, r2, r3
 80068b4:	17db      	asrs	r3, r3, #31
 80068b6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	e698      	b.n	80065f0 <lv_obj_get_scrollbar_area+0x304>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 80068be:	2000      	movs	r0, #0
 80068c0:	f002 fc3e 	bl	8009140 <lv_disp_get_dpi>
 80068c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068c8:	0043      	lsls	r3, r0, #1
 80068ca:	3350      	adds	r3, #80	; 0x50
 80068cc:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 80068ce:	fb82 1203 	smull	r1, r2, r2, r3
 80068d2:	17db      	asrs	r3, r3, #31
 80068d4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80068d8:	e72a      	b.n	8006730 <lv_obj_get_scrollbar_area+0x444>
 80068da:	2000      	movs	r0, #0
 80068dc:	f002 fc30 	bl	8009140 <lv_disp_get_dpi>
 80068e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068e4:	0043      	lsls	r3, r0, #1
 80068e6:	2bef      	cmp	r3, #239	; 0xef
 80068e8:	dc01      	bgt.n	80068ee <lv_obj_get_scrollbar_area+0x602>
 80068ea:	2501      	movs	r5, #1
 80068ec:	e723      	b.n	8006736 <lv_obj_get_scrollbar_area+0x44a>
 80068ee:	2000      	movs	r0, #0
 80068f0:	f002 fc26 	bl	8009140 <lv_disp_get_dpi>
 80068f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068f8:	0043      	lsls	r3, r0, #1
 80068fa:	3350      	adds	r3, #80	; 0x50
 80068fc:	4a10      	ldr	r2, [pc, #64]	; (8006940 <lv_obj_get_scrollbar_area+0x654>)
 80068fe:	fb82 1203 	smull	r1, r2, r2, r3
 8006902:	17dd      	asrs	r5, r3, #31
 8006904:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
 8006908:	b22d      	sxth	r5, r5
 800690a:	e714      	b.n	8006736 <lv_obj_get_scrollbar_area+0x44a>
            if(rtl) {
 800690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690e:	2b01      	cmp	r3, #1
 8006910:	d00b      	beq.n	800692a <lv_obj_get_scrollbar_area+0x63e>
                hor_area->x1 = obj->coords.x1 + left_space;
 8006912:	8aa3      	ldrh	r3, [r4, #20]
 8006914:	4418      	add	r0, r3
 8006916:	8038      	strh	r0, [r7, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 8006918:	8b23      	ldrh	r3, [r4, #24]
 800691a:	1b9b      	subs	r3, r3, r6
 800691c:	b29b      	uxth	r3, r3
 800691e:	eba3 0309 	sub.w	r3, r3, r9
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	80bb      	strh	r3, [r7, #4]
 8006928:	e501      	b.n	800632e <lv_obj_get_scrollbar_area+0x42>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800692a:	8aa3      	ldrh	r3, [r4, #20]
 800692c:	4403      	add	r3, r0
 800692e:	fa19 f383 	uxtah	r3, r9, r3
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	803b      	strh	r3, [r7, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 8006938:	8b23      	ldrh	r3, [r4, #24]
 800693a:	1b9e      	subs	r6, r3, r6
 800693c:	80be      	strh	r6, [r7, #4]
 800693e:	e4f6      	b.n	800632e <lv_obj_get_scrollbar_area+0x42>
 8006940:	66666667 	.word	0x66666667
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 8006944:	8aa2      	ldrh	r2, [r4, #20]
 8006946:	4413      	add	r3, r2
 8006948:	fa10 f383 	uxtah	r3, r0, r3
 800694c:	fa19 f383 	uxtah	r3, r9, r3
 8006950:	b21a      	sxth	r2, r3
 8006952:	803a      	strh	r2, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006954:	fa15 f383 	uxtah	r3, r5, r3
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	80bb      	strh	r3, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800695e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8006962:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006964:	440b      	add	r3, r1
 8006966:	449b      	add	fp, r3
 8006968:	455a      	cmp	r2, fp
 800696a:	db28      	blt.n	80069be <lv_obj_get_scrollbar_area+0x6d2>
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800696c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006970:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8006974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006976:	1a9a      	subs	r2, r3, r2
 8006978:	4291      	cmp	r1, r2
 800697a:	f77f acd8 	ble.w	800632e <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800697e:	b29c      	uxth	r4, r3
 8006980:	1ba4      	subs	r4, r4, r6
 8006982:	b224      	sxth	r4, r4
 8006984:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8006986:	2000      	movs	r0, #0
 8006988:	f002 fbda 	bl	8009140 <lv_disp_get_dpi>
 800698c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006990:	0043      	lsls	r3, r0, #1
 8006992:	2bef      	cmp	r3, #239	; 0xef
 8006994:	dc4b      	bgt.n	8006a2e <lv_obj_get_scrollbar_area+0x742>
 8006996:	2301      	movs	r3, #1
 8006998:	1ae3      	subs	r3, r4, r3
 800699a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800699e:	4293      	cmp	r3, r2
 80069a0:	f6bf acc5 	bge.w	800632e <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 80069a4:	88bc      	ldrh	r4, [r7, #4]
 80069a6:	2000      	movs	r0, #0
 80069a8:	f002 fbca 	bl	8009140 <lv_disp_get_dpi>
 80069ac:	230a      	movs	r3, #10
 80069ae:	fb00 f303 	mul.w	r3, r0, r3
 80069b2:	2bef      	cmp	r3, #239	; 0xef
 80069b4:	dc46      	bgt.n	8006a44 <lv_obj_get_scrollbar_area+0x758>
 80069b6:	2301      	movs	r3, #1
 80069b8:	1ae3      	subs	r3, r4, r3
 80069ba:	803b      	strh	r3, [r7, #0]
 80069bc:	e4b7      	b.n	800632e <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 80069be:	fa10 f581 	uxtah	r5, r0, r1
 80069c2:	fa19 f585 	uxtah	r5, r9, r5
 80069c6:	b22d      	sxth	r5, r5
 80069c8:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 80069ca:	2000      	movs	r0, #0
 80069cc:	f002 fbb8 	bl	8009140 <lv_disp_get_dpi>
 80069d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069d4:	0043      	lsls	r3, r0, #1
 80069d6:	2bef      	cmp	r3, #239	; 0xef
 80069d8:	dc12      	bgt.n	8006a00 <lv_obj_get_scrollbar_area+0x714>
 80069da:	2301      	movs	r3, #1
 80069dc:	442b      	add	r3, r5
 80069de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80069e2:	4293      	cmp	r3, r2
 80069e4:	ddc2      	ble.n	800696c <lv_obj_get_scrollbar_area+0x680>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80069e6:	883d      	ldrh	r5, [r7, #0]
 80069e8:	2000      	movs	r0, #0
 80069ea:	f002 fba9 	bl	8009140 <lv_disp_get_dpi>
 80069ee:	230a      	movs	r3, #10
 80069f0:	fb00 f303 	mul.w	r3, r0, r3
 80069f4:	2bef      	cmp	r3, #239	; 0xef
 80069f6:	dc0e      	bgt.n	8006a16 <lv_obj_get_scrollbar_area+0x72a>
 80069f8:	2301      	movs	r3, #1
 80069fa:	442b      	add	r3, r5
 80069fc:	80bb      	strh	r3, [r7, #4]
 80069fe:	e7b5      	b.n	800696c <lv_obj_get_scrollbar_area+0x680>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8006a00:	2000      	movs	r0, #0
 8006a02:	f002 fb9d 	bl	8009140 <lv_disp_get_dpi>
 8006a06:	220a      	movs	r2, #10
 8006a08:	fb02 f300 	mul.w	r3, r2, r0
 8006a0c:	3350      	adds	r3, #80	; 0x50
 8006a0e:	22a0      	movs	r2, #160	; 0xa0
 8006a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a14:	e7e2      	b.n	80069dc <lv_obj_get_scrollbar_area+0x6f0>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006a16:	2000      	movs	r0, #0
 8006a18:	f002 fb92 	bl	8009140 <lv_disp_get_dpi>
 8006a1c:	220a      	movs	r2, #10
 8006a1e:	fb02 f300 	mul.w	r3, r2, r0
 8006a22:	3350      	adds	r3, #80	; 0x50
 8006a24:	22a0      	movs	r2, #160	; 0xa0
 8006a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	e7e5      	b.n	80069fa <lv_obj_get_scrollbar_area+0x70e>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f002 fb86 	bl	8009140 <lv_disp_get_dpi>
 8006a34:	220a      	movs	r2, #10
 8006a36:	fb02 f300 	mul.w	r3, r2, r0
 8006a3a:	3350      	adds	r3, #80	; 0x50
 8006a3c:	22a0      	movs	r2, #160	; 0xa0
 8006a3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a42:	e7a9      	b.n	8006998 <lv_obj_get_scrollbar_area+0x6ac>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006a44:	2000      	movs	r0, #0
 8006a46:	f002 fb7b 	bl	8009140 <lv_disp_get_dpi>
 8006a4a:	220a      	movs	r2, #10
 8006a4c:	fb02 f300 	mul.w	r3, r2, r0
 8006a50:	3350      	adds	r3, #80	; 0x50
 8006a52:	22a0      	movs	r2, #160	; 0xa0
 8006a54:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	e7ad      	b.n	80069b8 <lv_obj_get_scrollbar_area+0x6cc>
                    hor_area->x1 = obj->coords.x1 + left_space;
 8006a5c:	fa10 f181 	uxtah	r1, r0, r1
 8006a60:	b20d      	sxth	r5, r1
 8006a62:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8006a64:	2000      	movs	r0, #0
 8006a66:	f002 fb6b 	bl	8009140 <lv_disp_get_dpi>
 8006a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a6e:	0043      	lsls	r3, r0, #1
 8006a70:	2bef      	cmp	r3, #239	; 0xef
 8006a72:	dc13      	bgt.n	8006a9c <lv_obj_get_scrollbar_area+0x7b0>
 8006a74:	2301      	movs	r3, #1
 8006a76:	442b      	add	r3, r5
 8006a78:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	f77f ae91 	ble.w	80067a4 <lv_obj_get_scrollbar_area+0x4b8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006a82:	883d      	ldrh	r5, [r7, #0]
 8006a84:	2000      	movs	r0, #0
 8006a86:	f002 fb5b 	bl	8009140 <lv_disp_get_dpi>
 8006a8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a8e:	0043      	lsls	r3, r0, #1
 8006a90:	2bef      	cmp	r3, #239	; 0xef
 8006a92:	dc11      	bgt.n	8006ab8 <lv_obj_get_scrollbar_area+0x7cc>
 8006a94:	2301      	movs	r3, #1
 8006a96:	442b      	add	r3, r5
 8006a98:	80bb      	strh	r3, [r7, #4]
 8006a9a:	e683      	b.n	80067a4 <lv_obj_get_scrollbar_area+0x4b8>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f002 fb4f 	bl	8009140 <lv_disp_get_dpi>
 8006aa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006aa6:	0043      	lsls	r3, r0, #1
 8006aa8:	3350      	adds	r3, #80	; 0x50
 8006aaa:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <lv_obj_get_scrollbar_area+0x818>)
 8006aac:	fb82 1203 	smull	r1, r2, r2, r3
 8006ab0:	17db      	asrs	r3, r3, #31
 8006ab2:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8006ab6:	e7de      	b.n	8006a76 <lv_obj_get_scrollbar_area+0x78a>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f002 fb41 	bl	8009140 <lv_disp_get_dpi>
 8006abe:	220a      	movs	r2, #10
 8006ac0:	fb02 f300 	mul.w	r3, r2, r0
 8006ac4:	3350      	adds	r3, #80	; 0x50
 8006ac6:	22a0      	movs	r2, #160	; 0xa0
 8006ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	e7e2      	b.n	8006a96 <lv_obj_get_scrollbar_area+0x7aa>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f002 fb35 	bl	8009140 <lv_disp_get_dpi>
 8006ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ada:	0043      	lsls	r3, r0, #1
 8006adc:	3350      	adds	r3, #80	; 0x50
 8006ade:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <lv_obj_get_scrollbar_area+0x818>)
 8006ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8006ae4:	17db      	asrs	r3, r3, #31
 8006ae6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8006aea:	e677      	b.n	80067dc <lv_obj_get_scrollbar_area+0x4f0>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006aec:	2000      	movs	r0, #0
 8006aee:	f002 fb27 	bl	8009140 <lv_disp_get_dpi>
 8006af2:	220a      	movs	r2, #10
 8006af4:	fb02 f300 	mul.w	r3, r2, r0
 8006af8:	3350      	adds	r3, #80	; 0x50
 8006afa:	22a0      	movs	r2, #160	; 0xa0
 8006afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	e67c      	b.n	80067fe <lv_obj_get_scrollbar_area+0x512>
 8006b04:	66666667 	.word	0x66666667

08006b08 <lv_obj_scrollbar_invalidate>:
{
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006b0e:	466a      	mov	r2, sp
 8006b10:	a902      	add	r1, sp, #8
 8006b12:	f7ff fbeb 	bl	80062ec <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8006b16:	a802      	add	r0, sp, #8
 8006b18:	f002 fd4c 	bl	80095b4 <lv_area_get_size>
 8006b1c:	b918      	cbnz	r0, 8006b26 <lv_obj_scrollbar_invalidate+0x1e>
 8006b1e:	4668      	mov	r0, sp
 8006b20:	f002 fd48 	bl	80095b4 <lv_area_get_size>
 8006b24:	b138      	cbz	r0, 8006b36 <lv_obj_scrollbar_invalidate+0x2e>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8006b26:	a802      	add	r0, sp, #8
 8006b28:	f002 fd44 	bl	80095b4 <lv_area_get_size>
 8006b2c:	b928      	cbnz	r0, 8006b3a <lv_obj_scrollbar_invalidate+0x32>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8006b2e:	4668      	mov	r0, sp
 8006b30:	f002 fd40 	bl	80095b4 <lv_area_get_size>
 8006b34:	b930      	cbnz	r0, 8006b44 <lv_obj_scrollbar_invalidate+0x3c>
}
 8006b36:	b004      	add	sp, #16
 8006b38:	bd10      	pop	{r4, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8006b3a:	a902      	add	r1, sp, #8
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7fe fbe9 	bl	8005314 <lv_obj_invalidate_area>
 8006b42:	e7f4      	b.n	8006b2e <lv_obj_scrollbar_invalidate+0x26>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8006b44:	4669      	mov	r1, sp
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7fe fbe4 	bl	8005314 <lv_obj_invalidate_area>
 8006b4c:	e7f3      	b.n	8006b36 <lv_obj_scrollbar_invalidate+0x2e>

08006b4e <lv_obj_readjust_scroll>:
{
 8006b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b50:	4604      	mov	r4, r0
 8006b52:	460d      	mov	r5, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 8006b54:	f7ff f90e 	bl	8005d74 <lv_obj_get_scroll_snap_y>
 8006b58:	b120      	cbz	r0, 8006b64 <lv_obj_readjust_scroll+0x16>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f7ff f902 	bl	8005d64 <lv_obj_get_scroll_snap_x>
 8006b60:	b1b0      	cbz	r0, 8006b90 <lv_obj_readjust_scroll+0x42>
}
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 8006b64:	4620      	mov	r0, r4
 8006b66:	f7ff f937 	bl	8005dd8 <lv_obj_get_scroll_top>
 8006b6a:	4606      	mov	r6, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7ff f93b 	bl	8005de8 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 8006b72:	1e03      	subs	r3, r0, #0
 8006b74:	daf1      	bge.n	8006b5a <lv_obj_readjust_scroll+0xc>
 8006b76:	2e00      	cmp	r6, #0
 8006b78:	ddef      	ble.n	8006b5a <lv_obj_readjust_scroll+0xc>
            sb = LV_MIN(st, -sb);
 8006b7a:	425a      	negs	r2, r3
 8006b7c:	42b2      	cmp	r2, r6
 8006b7e:	bfa8      	it	ge
 8006b80:	4632      	movge	r2, r6
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 8006b82:	462b      	mov	r3, r5
 8006b84:	b212      	sxth	r2, r2
 8006b86:	2100      	movs	r1, #0
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f7ff fa6d 	bl	8006068 <lv_obj_scroll_by>
 8006b8e:	e7e4      	b.n	8006b5a <lv_obj_readjust_scroll+0xc>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7ff f987 	bl	8005ea4 <lv_obj_get_scroll_left>
 8006b96:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f7ff f9f9 	bl	8005f90 <lv_obj_get_scroll_right>
 8006b9e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006ba0:	f241 426a 	movw	r2, #5226	; 0x146a
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f8be 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006bac:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8006bae:	2801      	cmp	r0, #1
 8006bb0:	d00e      	beq.n	8006bd0 <lv_obj_readjust_scroll+0x82>
            if(sr < 0 && sl > 0) {
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	dad5      	bge.n	8006b62 <lv_obj_readjust_scroll+0x14>
 8006bb6:	2f00      	cmp	r7, #0
 8006bb8:	ddd3      	ble.n	8006b62 <lv_obj_readjust_scroll+0x14>
                sr = LV_MIN(sl, -sr);
 8006bba:	4271      	negs	r1, r6
 8006bbc:	42b9      	cmp	r1, r7
 8006bbe:	bfa8      	it	ge
 8006bc0:	4639      	movge	r1, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 8006bc2:	462b      	mov	r3, r5
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	b209      	sxth	r1, r1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7ff fa4d 	bl	8006068 <lv_obj_scroll_by>
 8006bce:	e7c8      	b.n	8006b62 <lv_obj_readjust_scroll+0x14>
            if(sl < 0 && sr > 0) {
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	dac6      	bge.n	8006b62 <lv_obj_readjust_scroll+0x14>
 8006bd4:	2e00      	cmp	r6, #0
 8006bd6:	ddc4      	ble.n	8006b62 <lv_obj_readjust_scroll+0x14>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 8006bd8:	462b      	mov	r3, r5
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4639      	mov	r1, r7
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7ff fa42 	bl	8006068 <lv_obj_scroll_by>
}
 8006be4:	e7bd      	b.n	8006b62 <lv_obj_readjust_scroll+0x14>
	...

08006be8 <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 8006be8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8006bea:	2114      	movs	r1, #20
 8006bec:	4801      	ldr	r0, [pc, #4]	; (8006bf4 <_lv_obj_style_init+0xc>)
 8006bee:	f002 fff5 	bl	8009bdc <_lv_ll_init>
}
 8006bf2:	bd08      	pop	{r3, pc}
 8006bf4:	20001eb8 	.word	0x20001eb8

08006bf8 <lv_obj_style_get_selector_state>:
}

lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
{
    return selector & 0xFFFF;
}
 8006bf8:	b280      	uxth	r0, r0
 8006bfa:	4770      	bx	lr

08006bfc <lv_obj_style_get_selector_part>:

lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
{
    return selector & 0xFF0000;
}
 8006bfc:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8006c00:	4770      	bx	lr

08006c02 <get_prop_core>:
    return &obj->styles[0];
}


static bool get_prop_core(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, lv_style_value_t * v)
{
 8006c02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	b087      	sub	sp, #28
 8006c08:	4606      	mov	r6, r0
 8006c0a:	4689      	mov	r9, r1
 8006c0c:	9201      	str	r2, [sp, #4]
 8006c0e:	9302      	str	r3, [sp, #8]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8006c10:	4610      	mov	r0, r2
 8006c12:	f003 fb3d 	bl	800a290 <_lv_style_get_prop_group>
 8006c16:	f04f 0a01 	mov.w	sl, #1
 8006c1a:	fa0a fa00 	lsl.w	sl, sl, r0
 8006c1e:	fa5f fa8a 	uxtb.w	sl, sl
    int32_t weight = -1;
    lv_state_t state = obj->state;
 8006c22:	8c33      	ldrh	r3, [r6, #32]
 8006c24:	9303      	str	r3, [sp, #12]
    lv_state_t state_inv = ~state;
 8006c26:	ea6f 0b03 	mvn.w	fp, r3
 8006c2a:	fa1f fb8b 	uxth.w	fp, fp
    lv_style_value_t value_tmp;
    bool skip_trans = obj->skip_trans;
 8006c2e:	f896 8022 	ldrb.w	r8, [r6, #34]	; 0x22
 8006c32:	f3c8 0880 	ubfx	r8, r8, #2, #1
    uint32_t i;
    bool found;
    for(i = 0; i < obj->style_cnt; i++) {
 8006c36:	2400      	movs	r4, #0
 8006c38:	4645      	mov	r5, r8
 8006c3a:	e000      	b.n	8006c3e <get_prop_core+0x3c>
 8006c3c:	3401      	adds	r4, #1
 8006c3e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8006c40:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	d922      	bls.n	8006c8e <get_prop_core+0x8c>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8006c48:	68f7      	ldr	r7, [r6, #12]
 8006c4a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006c4e:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
        if(obj_style->is_trans == false) break;
 8006c52:	79da      	ldrb	r2, [r3, #7]
 8006c54:	f012 0f02 	tst.w	r2, #2
 8006c58:	d055      	beq.n	8006d06 <get_prop_core+0x104>
        if(skip_trans) continue;
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	d1ee      	bne.n	8006c3c <get_prop_core+0x3a>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006c5e:	6858      	ldr	r0, [r3, #4]
 8006c60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006c64:	f7ff ffca 	bl	8006bfc <lv_obj_style_get_selector_part>

        if(part_act != part) continue;
 8006c68:	4548      	cmp	r0, r9
 8006c6a:	d1e7      	bne.n	8006c3c <get_prop_core+0x3a>
        if((obj_style->style->has_group & group) == 0) continue;
 8006c6c:	f857 0008 	ldr.w	r0, [r7, r8]
 8006c70:	7983      	ldrb	r3, [r0, #6]
 8006c72:	ea13 0f0a 	tst.w	r3, sl
 8006c76:	d0e1      	beq.n	8006c3c <get_prop_core+0x3a>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8006c78:	aa05      	add	r2, sp, #20
 8006c7a:	9901      	ldr	r1, [sp, #4]
 8006c7c:	f003 fa6a 	bl	800a154 <lv_style_get_prop>
        if(found) {
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d0db      	beq.n	8006c3c <get_prop_core+0x3a>
            *v = value_tmp;
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	9a02      	ldr	r2, [sp, #8]
 8006c88:	6013      	str	r3, [r2, #0]
            return true;
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e047      	b.n	8006d1e <get_prop_core+0x11c>
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	46b0      	mov	r8, r6
 8006c96:	e005      	b.n	8006ca4 <get_prop_core+0xa2>

        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);

        if(found) {
            if(state_act == state) {
                *v = value_tmp;
 8006c98:	9b05      	ldr	r3, [sp, #20]
 8006c9a:	9a02      	ldr	r2, [sp, #8]
 8006c9c:	6013      	str	r3, [r2, #0]
                return true;
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	e03d      	b.n	8006d1e <get_prop_core+0x11c>
    for(; i < obj->style_cnt; i++) {
 8006ca2:	3401      	adds	r4, #1
 8006ca4:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8006ca8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d92f      	bls.n	8006d10 <get_prop_core+0x10e>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8006cb0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006cb4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006cb8:	685d      	ldr	r5, [r3, #4]
 8006cba:	f3c5 0517 	ubfx	r5, r5, #0, #24
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f7ff ff9c 	bl	8006bfc <lv_obj_style_get_selector_part>
 8006cc4:	4607      	mov	r7, r0
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f7ff ff96 	bl	8006bf8 <lv_obj_style_get_selector_state>
 8006ccc:	4605      	mov	r5, r0
        if(part_act != part) continue;
 8006cce:	45b9      	cmp	r9, r7
 8006cd0:	d1e7      	bne.n	8006ca2 <get_prop_core+0xa0>
        if((obj_style->style->has_group & group) == 0) continue;
 8006cd2:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
 8006cd6:	7983      	ldrb	r3, [r0, #6]
 8006cd8:	ea13 0f0a 	tst.w	r3, sl
 8006cdc:	d0e1      	beq.n	8006ca2 <get_prop_core+0xa0>
        if((state_act & state_inv)) continue;
 8006cde:	ea1b 0f05 	tst.w	fp, r5
 8006ce2:	d1de      	bne.n	8006ca2 <get_prop_core+0xa0>
        if(state_act <= weight) continue;
 8006ce4:	9b00      	ldr	r3, [sp, #0]
 8006ce6:	429d      	cmp	r5, r3
 8006ce8:	dddb      	ble.n	8006ca2 <get_prop_core+0xa0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8006cea:	aa05      	add	r2, sp, #20
 8006cec:	9901      	ldr	r1, [sp, #4]
 8006cee:	f003 fa31 	bl	800a154 <lv_style_get_prop>
        if(found) {
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d0d5      	beq.n	8006ca2 <get_prop_core+0xa0>
            if(state_act == state) {
 8006cf6:	9b03      	ldr	r3, [sp, #12]
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	d0cd      	beq.n	8006c98 <get_prop_core+0x96>
            }
            if(weight < state_act) {
                weight = state_act;
                *v = value_tmp;
 8006cfc:	9b05      	ldr	r3, [sp, #20]
 8006cfe:	9a02      	ldr	r2, [sp, #8]
 8006d00:	6013      	str	r3, [r2, #0]
                weight = state_act;
 8006d02:	9500      	str	r5, [sp, #0]
 8006d04:	e7cd      	b.n	8006ca2 <get_prop_core+0xa0>
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	46b0      	mov	r8, r6
 8006d0e:	e7c9      	b.n	8006ca4 <get_prop_core+0xa2>
            }
        }
    }

    if(weight >= 0) {
 8006d10:	9b00      	ldr	r3, [sp, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	db06      	blt.n	8006d24 <get_prop_core+0x122>
        *v = value_tmp;
 8006d16:	9b05      	ldr	r3, [sp, #20]
 8006d18:	9a02      	ldr	r2, [sp, #8]
 8006d1a:	6013      	str	r3, [r2, #0]
        return true;
 8006d1c:	2001      	movs	r0, #1
    }
    else return false;
}
 8006d1e:	b007      	add	sp, #28
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else return false;
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7fa      	b.n	8006d1e <get_prop_core+0x11c>

08006d28 <lv_obj_get_style_prop>:
{
 8006d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	4616      	mov	r6, r2
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 8006d34:	f3c2 2880 	ubfx	r8, r2, #10, #1
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 8006d38:	f3c2 3980 	ubfx	r9, r2, #14, #1
    if(filter) {
 8006d3c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006d40:	d002      	beq.n	8006d48 <lv_obj_get_style_prop+0x20>
        prop &= ~LV_STYLE_PROP_FILTER;
 8006d42:	f422 4680 	bic.w	r6, r2, #16384	; 0x4000
 8006d46:	b2b6      	uxth	r6, r6
    bool found = false;
 8006d48:	2700      	movs	r7, #0
    while(obj) {
 8006d4a:	e000      	b.n	8006d4e <lv_obj_get_style_prop+0x26>
            part = LV_PART_MAIN;
 8006d4c:	2500      	movs	r5, #0
    while(obj) {
 8006d4e:	b18c      	cbz	r4, 8006d74 <lv_obj_get_style_prop+0x4c>
        found = get_prop_core(obj, part, prop, &value_act);
 8006d50:	ab01      	add	r3, sp, #4
 8006d52:	4632      	mov	r2, r6
 8006d54:	4629      	mov	r1, r5
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff ff53 	bl	8006c02 <get_prop_core>
        if(found) break;
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	b948      	cbnz	r0, 8006d74 <lv_obj_get_style_prop+0x4c>
        if(!inherit) break;
 8006d60:	f1b8 0f00 	cmp.w	r8, #0
 8006d64:	d006      	beq.n	8006d74 <lv_obj_get_style_prop+0x4c>
        if(part != LV_PART_MAIN) {
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	d1f0      	bne.n	8006d4c <lv_obj_get_style_prop+0x24>
        obj = lv_obj_get_parent(obj);
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 f856 	bl	8006e1c <lv_obj_get_parent>
 8006d70:	4604      	mov	r4, r0
 8006d72:	e7ec      	b.n	8006d4e <lv_obj_get_style_prop+0x26>
    if(!found) {
 8006d74:	b967      	cbnz	r7, 8006d90 <lv_obj_get_style_prop+0x68>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8006d76:	b93d      	cbnz	r5, 8006d88 <lv_obj_get_style_prop+0x60>
 8006d78:	f241 0301 	movw	r3, #4097	; 0x1001
 8006d7c:	429e      	cmp	r6, r3
 8006d7e:	d00e      	beq.n	8006d9e <lv_obj_get_style_prop+0x76>
 8006d80:	f241 0304 	movw	r3, #4100	; 0x1004
 8006d84:	429e      	cmp	r6, r3
 8006d86:	d00a      	beq.n	8006d9e <lv_obj_get_style_prop+0x76>
            value_act = lv_style_prop_get_default(prop);
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f003 fa1b 	bl	800a1c4 <lv_style_prop_get_default>
 8006d8e:	9001      	str	r0, [sp, #4]
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8006d90:	f1b9 0f00 	cmp.w	r9, #0
 8006d94:	d11d      	bne.n	8006dd2 <lv_obj_get_style_prop+0xaa>
}
 8006d96:	9801      	ldr	r0, [sp, #4]
 8006d98:	b003      	add	sp, #12
 8006d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const lv_obj_class_t * cls = obj->class_p;
 8006d9e:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 8006da0:	e003      	b.n	8006daa <lv_obj_get_style_prop+0x82>
                    if(cls->width_def != 0) break;
 8006da2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8006da6:	b94a      	cbnz	r2, 8006dbc <lv_obj_get_style_prop+0x94>
                cls = cls->base_class;
 8006da8:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 8006daa:	b13b      	cbz	r3, 8006dbc <lv_obj_get_style_prop+0x94>
                if(prop == LV_STYLE_WIDTH) {
 8006dac:	f241 0201 	movw	r2, #4097	; 0x1001
 8006db0:	4296      	cmp	r6, r2
 8006db2:	d0f6      	beq.n	8006da2 <lv_obj_get_style_prop+0x7a>
                    if(cls->height_def != 0) break;
 8006db4:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	d0f5      	beq.n	8006da8 <lv_obj_get_style_prop+0x80>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 8006dbc:	f241 0201 	movw	r2, #4097	; 0x1001
 8006dc0:	4296      	cmp	r6, r2
 8006dc2:	d003      	beq.n	8006dcc <lv_obj_get_style_prop+0xa4>
 8006dc4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006dc8:	9301      	str	r3, [sp, #4]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8006dca:	e7e1      	b.n	8006d90 <lv_obj_get_style_prop+0x68>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 8006dcc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006dd0:	e7fa      	b.n	8006dc8 <lv_obj_get_style_prop+0xa0>
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8006dd2:	9a01      	ldr	r2, [sp, #4]
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f802 	bl	8006de0 <apply_color_filter>
 8006ddc:	9001      	str	r0, [sp, #4]
 8006dde:	e7da      	b.n	8006d96 <lv_obj_get_style_prop+0x6e>

08006de0 <apply_color_filter>:

static lv_style_value_t apply_color_filter(const lv_obj_t * obj, uint32_t part, lv_style_value_t v)
{
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	4614      	mov	r4, r2
    if(obj == NULL) return v;
 8006de4:	b1c0      	cbz	r0, 8006e18 <apply_color_filter+0x38>
 8006de6:	460d      	mov	r5, r1
 8006de8:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 8006dea:	2263      	movs	r2, #99	; 0x63
 8006dec:	f7ff ff9c 	bl	8006d28 <lv_obj_get_style_prop>
    const lv_color_filter_dsc_t * f = lv_obj_get_style_color_filter_dsc(obj, part);
    if(f && f->filter_cb) {
 8006df0:	4607      	mov	r7, r0
 8006df2:	b178      	cbz	r0, 8006e14 <apply_color_filter+0x34>
 8006df4:	6803      	ldr	r3, [r0, #0]
 8006df6:	b16b      	cbz	r3, 8006e14 <apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 8006df8:	2264      	movs	r2, #100	; 0x64
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff ff93 	bl	8006d28 <lv_obj_get_style_prop>
        lv_opa_t f_opa = lv_obj_get_style_color_filter_opa(obj, part);
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 8006e02:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8006e06:	d005      	beq.n	8006e14 <apply_color_filter+0x34>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	4798      	blx	r3
 8006e10:	f360 040f 	bfi	r4, r0, #0, #16
    }
    return v;
 8006e14:	4620      	mov	r0, r4
}
 8006e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj == NULL) return v;
 8006e18:	4610      	mov	r0, r2
 8006e1a:	e7fc      	b.n	8006e16 <apply_color_filter+0x36>

08006e1c <lv_obj_get_parent>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 8006e1c:	b108      	cbz	r0, 8006e22 <lv_obj_get_parent+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 8006e1e:	6840      	ldr	r0, [r0, #4]
 8006e20:	4770      	bx	lr
}
 8006e22:	4770      	bx	lr

08006e24 <lv_obj_get_screen>:
{
 8006e24:	b510      	push	{r4, lr}
        par = lv_obj_get_parent(act_par);
 8006e26:	4604      	mov	r4, r0
 8006e28:	f7ff fff8 	bl	8006e1c <lv_obj_get_parent>
    } while(par != NULL);
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1fa      	bne.n	8006e26 <lv_obj_get_screen+0x2>
}
 8006e30:	4620      	mov	r0, r4
 8006e32:	bd10      	pop	{r4, pc}

08006e34 <lv_obj_get_disp>:
{
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8006e38:	6843      	ldr	r3, [r0, #4]
 8006e3a:	b113      	cbz	r3, 8006e42 <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 8006e3c:	f7ff fff2 	bl	8006e24 <lv_obj_get_screen>
 8006e40:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8006e42:	480a      	ldr	r0, [pc, #40]	; (8006e6c <lv_obj_get_disp+0x38>)
 8006e44:	f002 fef1 	bl	8009c2a <_lv_ll_get_head>
 8006e48:	b150      	cbz	r0, 8006e60 <lv_obj_get_disp+0x2c>
        for(i = 0; i < d->screen_cnt; i++) {
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e000      	b.n	8006e50 <lv_obj_get_disp+0x1c>
 8006e4e:	3301      	adds	r3, #1
 8006e50:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d905      	bls.n	8006e62 <lv_obj_get_disp+0x2e>
            if(d->screens[i] == scr) return d;
 8006e56:	68c2      	ldr	r2, [r0, #12]
 8006e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e5c:	42a2      	cmp	r2, r4
 8006e5e:	d1f6      	bne.n	8006e4e <lv_obj_get_disp+0x1a>
}
 8006e60:	bd10      	pop	{r4, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8006e62:	4601      	mov	r1, r0
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <lv_obj_get_disp+0x38>)
 8006e66:	f002 fee8 	bl	8009c3a <_lv_ll_get_next>
 8006e6a:	e7ed      	b.n	8006e48 <lv_obj_get_disp+0x14>
 8006e6c:	20001e78 	.word	0x20001e78

08006e70 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8006e70:	6880      	ldr	r0, [r0, #8]
 8006e72:	b188      	cbz	r0, 8006e98 <lv_obj_get_child+0x28>

    uint32_t idu;
    if(id < 0) {
 8006e74:	2900      	cmp	r1, #0
 8006e76:	db07      	blt.n	8006e88 <lv_obj_get_child+0x18>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
        idu = (uint32_t) id;
    }
    else {
        idu = id;
 8006e78:	460b      	mov	r3, r1
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8006e7a:	6842      	ldr	r2, [r0, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d90a      	bls.n	8006e96 <lv_obj_get_child+0x26>
    else return obj->spec_attr->children[id];
 8006e80:	6803      	ldr	r3, [r0, #0]
 8006e82:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006e86:	4770      	bx	lr
        id = obj->spec_attr->child_cnt + id;
 8006e88:	6843      	ldr	r3, [r0, #4]
 8006e8a:	4419      	add	r1, r3
 8006e8c:	460b      	mov	r3, r1
        if(id < 0) return NULL;
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	daf3      	bge.n	8006e7a <lv_obj_get_child+0xa>
 8006e92:	2000      	movs	r0, #0
 8006e94:	4770      	bx	lr
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8006e96:	2000      	movs	r0, #0
}
 8006e98:	4770      	bx	lr

08006e9a <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8006e9a:	6883      	ldr	r3, [r0, #8]
 8006e9c:	b10b      	cbz	r3, 8006ea2 <lv_obj_get_child_cnt+0x8>
    return obj->spec_attr->child_cnt;
 8006e9e:	6858      	ldr	r0, [r3, #4]
 8006ea0:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8006ea2:	2000      	movs	r0, #0
}
 8006ea4:	4770      	bx	lr

08006ea6 <_lv_refr_init>:
    perf_monitor_init(&perf_monitor);
#endif
#if LV_USE_MEM_MONITOR
    mem_monitor_init(&mem_monitor);
#endif
}
 8006ea6:	4770      	bx	lr

08006ea8 <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 8006ea8:	b530      	push	{r4, r5, lr}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
 8006eae:	4605      	mov	r5, r0
 8006eb0:	b3a0      	cbz	r0, 8006f1c <_lv_inv_area+0x74>
    if(!disp) return;
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	d039      	beq.n	8006f2a <_lv_inv_area+0x82>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 8006eb6:	b3ac      	cbz	r4, 8006f24 <_lv_inv_area+0x7c>
        disp->inv_p = 0;
        return;
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
 8006ebe:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f002 f90c 	bl	80090e0 <lv_disp_get_hor_res>
 8006ec8:	b280      	uxth	r0, r0
 8006eca:	3801      	subs	r0, #1
 8006ecc:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f002 f91d 	bl	8009110 <lv_disp_get_ver_res>
 8006ed6:	b280      	uxth	r0, r0
 8006ed8:	3801      	subs	r0, #1
 8006eda:	f8ad 000e 	strh.w	r0, [sp, #14]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8006ede:	aa02      	add	r2, sp, #8
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4668      	mov	r0, sp
 8006ee4:	f002 fb83 	bl	80095ee <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 8006ee8:	b1f8      	cbz	r0, 8006f2a <_lv_inv_area+0x82>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
 8006eea:	6828      	ldr	r0, [r5, #0]
 8006eec:	7c03      	ldrb	r3, [r0, #16]
 8006eee:	f013 0f02 	tst.w	r3, #2
 8006ef2:	d11c      	bne.n	8006f2e <_lv_inv_area+0x86>
        disp->inv_p = 1;
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
        return;
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 8006ef4:	6983      	ldr	r3, [r0, #24]
 8006ef6:	b10b      	cbz	r3, 8006efc <_lv_inv_area+0x54>
 8006ef8:	4669      	mov	r1, sp
 8006efa:	4798      	blx	r3
{
 8006efc:	2400      	movs	r4, #0

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 8006efe:	f8b5 3150 	ldrh.w	r3, [r5, #336]	; 0x150
 8006f02:	42a3      	cmp	r3, r4
 8006f04:	d923      	bls.n	8006f4e <_lv_inv_area+0xa6>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8006f06:	1da1      	adds	r1, r4, #6
 8006f08:	2200      	movs	r2, #0
 8006f0a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8006f0e:	4668      	mov	r0, sp
 8006f10:	f002 fc5e 	bl	80097d0 <_lv_area_is_in>
 8006f14:	b948      	cbnz	r0, 8006f2a <_lv_inv_area+0x82>
    for(i = 0; i < disp->inv_p; i++) {
 8006f16:	3401      	adds	r4, #1
 8006f18:	b2a4      	uxth	r4, r4
 8006f1a:	e7f0      	b.n	8006efe <_lv_inv_area+0x56>
    if(!disp) disp = lv_disp_get_default();
 8006f1c:	f002 f8da 	bl	80090d4 <lv_disp_get_default>
 8006f20:	4605      	mov	r5, r0
 8006f22:	e7c6      	b.n	8006eb2 <_lv_inv_area+0xa>
        disp->inv_p = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	f8a5 3150 	strh.w	r3, [r5, #336]	; 0x150
        disp->inv_p = 0;
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
    }
    disp->inv_p++;
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
}
 8006f2a:	b005      	add	sp, #20
 8006f2c:	bd30      	pop	{r4, r5, pc}
        disp->inv_areas[0] = scr_area;
 8006f2e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8006f32:	aa04      	add	r2, sp, #16
 8006f34:	e912 0003 	ldmdb	r2, {r0, r1}
 8006f38:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f8a5 3150 	strh.w	r3, [r5, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8006f42:	6868      	ldr	r0, [r5, #4]
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d0f0      	beq.n	8006f2a <_lv_inv_area+0x82>
 8006f48:	f003 fab9 	bl	800a4be <lv_timer_resume>
        return;
 8006f4c:	e7ed      	b.n	8006f2a <_lv_inv_area+0x82>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 8006f4e:	2b1f      	cmp	r3, #31
 8006f50:	d81a      	bhi.n	8006f88 <_lv_inv_area+0xe0>
    dest->x1 = src->x1;
 8006f52:	f9bd 2000 	ldrsh.w	r2, [sp]
 8006f56:	3306      	adds	r3, #6
 8006f58:	f825 2033 	strh.w	r2, [r5, r3, lsl #3]
    dest->y1 = src->y1;
 8006f5c:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8006f60:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8006f64:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8006f66:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8006f6a:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8006f6c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8006f70:	80da      	strh	r2, [r3, #6]
    disp->inv_p++;
 8006f72:	f8b5 3150 	ldrh.w	r3, [r5, #336]	; 0x150
 8006f76:	3301      	adds	r3, #1
 8006f78:	f8a5 3150 	strh.w	r3, [r5, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8006f7c:	6868      	ldr	r0, [r5, #4]
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d0d3      	beq.n	8006f2a <_lv_inv_area+0x82>
 8006f82:	f003 fa9c 	bl	800a4be <lv_timer_resume>
 8006f86:	e7d0      	b.n	8006f2a <_lv_inv_area+0x82>
        disp->inv_p = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8a5 3150 	strh.w	r3, [r5, #336]	; 0x150
    dest->x1 = src->x1;
 8006f8e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8006f92:	862b      	strh	r3, [r5, #48]	; 0x30
    dest->y1 = src->y1;
 8006f94:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006f98:	866b      	strh	r3, [r5, #50]	; 0x32
    dest->x2 = src->x2;
 8006f9a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8006f9e:	86ab      	strh	r3, [r5, #52]	; 0x34
    dest->y2 = src->y2;
 8006fa0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006fa4:	86eb      	strh	r3, [r5, #54]	; 0x36
}
 8006fa6:	e7e4      	b.n	8006f72 <_lv_inv_area+0xca>

08006fa8 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 8006fa8:	4770      	bx	lr

08006faa <lv_img_cf_get_px_size>:
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
    uint8_t px_size = 0;

    switch(cf) {
 8006faa:	3804      	subs	r0, #4
 8006fac:	280a      	cmp	r0, #10
 8006fae:	d807      	bhi.n	8006fc0 <lv_img_cf_get_px_size+0x16>
 8006fb0:	e8df f000 	tbb	[pc, r0]
 8006fb4:	0a120812 	.word	0x0a120812
 8006fb8:	0a100e0c 	.word	0x0a100e0c
 8006fbc:	0e0c      	.short	0x0e0c
 8006fbe:	10          	.byte	0x10
 8006fbf:	00          	.byte	0x00
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	4770      	bx	lr
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
            break;
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 8006fc4:	2018      	movs	r0, #24
            break;
 8006fc6:	4770      	bx	lr
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 8006fc8:	2001      	movs	r0, #1
            break;
 8006fca:	4770      	bx	lr
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 8006fcc:	2002      	movs	r0, #2
            break;
 8006fce:	4770      	bx	lr
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 8006fd0:	2004      	movs	r0, #4
            break;
 8006fd2:	4770      	bx	lr
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 8006fd4:	2008      	movs	r0, #8
            break;
 8006fd6:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
 8006fd8:	2010      	movs	r0, #16
            px_size = 0;
            break;
    }

    return px_size;
}
 8006fda:	4770      	bx	lr

08006fdc <lv_img_src_get_type>:
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;

    if(src == NULL) return img_src_type;
 8006fdc:	b160      	cbz	r0, 8006ff8 <lv_img_src_get_type+0x1c>
    const uint8_t * u8_p = src;

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8006fde:	7802      	ldrb	r2, [r0, #0]
 8006fe0:	f1a2 0320 	sub.w	r3, r2, #32
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b5f      	cmp	r3, #95	; 0x5f
 8006fe8:	d908      	bls.n	8006ffc <lv_img_src_get_type+0x20>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    }
    else if(u8_p[0] >= 0x80) {
 8006fea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006fee:	d101      	bne.n	8006ff4 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 8006ff0:	2000      	movs	r0, #0
    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
}
 8006ff2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8006ff8:	2003      	movs	r0, #3
 8006ffa:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	4770      	bx	lr

08007000 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	460d      	mov	r5, r1
 8007006:	4614      	mov	r4, r2
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8007008:	4608      	mov	r0, r1
 800700a:	f7ff ffe7 	bl	8006fdc <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800700e:	4606      	mov	r6, r0
 8007010:	b9e8      	cbnz	r0, 800704e <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8007012:	782b      	ldrb	r3, [r5, #0]
 8007014:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8007018:	3b04      	subs	r3, #4
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b0a      	cmp	r3, #10
 800701e:	d813      	bhi.n	8007048 <lv_img_decoder_built_in_info+0x48>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	f363 2294 	bfi	r2, r3, #10, #11
 800702c:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800702e:	886b      	ldrh	r3, [r5, #2]
 8007030:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8007034:	8862      	ldrh	r2, [r4, #2]
 8007036:	f363 124f 	bfi	r2, r3, #5, #11
 800703a:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800703c:	782a      	ldrb	r2, [r5, #0]
 800703e:	7823      	ldrb	r3, [r4, #0]
 8007040:	f362 0304 	bfi	r3, r2, #0, #5
 8007044:	7023      	strb	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 8007046:	2601      	movs	r6, #1
}
 8007048:	4630      	mov	r0, r6
 800704a:	b004      	add	sp, #16
 800704c:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800704e:	2801      	cmp	r0, #1
 8007050:	d010      	beq.n	8007074 <lv_img_decoder_built_in_info+0x74>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8007052:	2802      	cmp	r0, #2
 8007054:	d137      	bne.n	80070c6 <lv_img_decoder_built_in_info+0xc6>
        header->w = 1;
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	2601      	movs	r6, #1
 800705a:	f366 2394 	bfi	r3, r6, #10, #11
 800705e:	6023      	str	r3, [r4, #0]
        header->h = 1;
 8007060:	8863      	ldrh	r3, [r4, #2]
 8007062:	f366 134f 	bfi	r3, r6, #5, #11
 8007066:	8063      	strh	r3, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8007068:	7823      	ldrb	r3, [r4, #0]
 800706a:	220b      	movs	r2, #11
 800706c:	f362 0304 	bfi	r3, r2, #0, #5
 8007070:	7023      	strb	r3, [r4, #0]
 8007072:	e7e9      	b.n	8007048 <lv_img_decoder_built_in_info+0x48>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8007074:	4628      	mov	r0, r5
 8007076:	f002 fd8d 	bl	8009b94 <lv_fs_get_ext>
 800707a:	4914      	ldr	r1, [pc, #80]	; (80070cc <lv_img_decoder_built_in_info+0xcc>)
 800707c:	f7f9 f8b0 	bl	80001e0 <strcmp>
 8007080:	b108      	cbz	r0, 8007086 <lv_img_decoder_built_in_info+0x86>
 8007082:	2600      	movs	r6, #0
 8007084:	e7e0      	b.n	8007048 <lv_img_decoder_built_in_info+0x48>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8007086:	2202      	movs	r2, #2
 8007088:	4629      	mov	r1, r5
 800708a:	a801      	add	r0, sp, #4
 800708c:	f002 fd46 	bl	8009b1c <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8007090:	b140      	cbz	r0, 80070a4 <lv_img_decoder_built_in_info+0xa4>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8007092:	7823      	ldrb	r3, [r4, #0]
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	331c      	adds	r3, #28
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	2b0a      	cmp	r3, #10
 80070a0:	d9d2      	bls.n	8007048 <lv_img_decoder_built_in_info+0x48>
 80070a2:	e7ee      	b.n	8007082 <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 80070a4:	466b      	mov	r3, sp
 80070a6:	2204      	movs	r2, #4
 80070a8:	4621      	mov	r1, r4
 80070aa:	eb0d 0002 	add.w	r0, sp, r2
 80070ae:	f002 fca8 	bl	8009a02 <lv_fs_read>
 80070b2:	4605      	mov	r5, r0
            lv_fs_close(&f);
 80070b4:	a801      	add	r0, sp, #4
 80070b6:	f002 fc85 	bl	80099c4 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 80070ba:	2d00      	cmp	r5, #0
 80070bc:	d1e1      	bne.n	8007082 <lv_img_decoder_built_in_info+0x82>
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d1de      	bne.n	8007082 <lv_img_decoder_built_in_info+0x82>
 80070c4:	e7e5      	b.n	8007092 <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
 80070c6:	2600      	movs	r6, #0
 80070c8:	e7be      	b.n	8007048 <lv_img_decoder_built_in_info+0x48>
 80070ca:	bf00      	nop
 80070cc:	0800bd84 	.word	0x0800bd84

080070d0 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80070d0:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80070d2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    if(user_data) {
 80070d4:	b185      	cbz	r5, 80070f8 <lv_img_decoder_built_in_close+0x28>
 80070d6:	460c      	mov	r4, r1
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80070d8:	7c0b      	ldrb	r3, [r1, #16]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d00d      	beq.n	80070fa <lv_img_decoder_built_in_close+0x2a>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 80070de:	68e8      	ldr	r0, [r5, #12]
 80070e0:	b108      	cbz	r0, 80070e6 <lv_img_decoder_built_in_close+0x16>
 80070e2:	f002 fe5d 	bl	8009da0 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 80070e6:	6928      	ldr	r0, [r5, #16]
 80070e8:	b108      	cbz	r0, 80070ee <lv_img_decoder_built_in_close+0x1e>
 80070ea:	f002 fe59 	bl	8009da0 <lv_mem_free>

        lv_mem_free(user_data);
 80070ee:	4628      	mov	r0, r5
 80070f0:	f002 fe56 	bl	8009da0 <lv_mem_free>
        dsc->user_data = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
            lv_fs_close(&user_data->f);
 80070fa:	4628      	mov	r0, r5
 80070fc:	f002 fc62 	bl	80099c4 <lv_fs_close>
 8007100:	e7ed      	b.n	80070de <lv_img_decoder_built_in_close+0xe>
	...

08007104 <lv_img_decoder_built_in_open>:
{
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	4605      	mov	r5, r0
 800710c:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800710e:	7c08      	ldrb	r0, [r1, #16]
 8007110:	2801      	cmp	r0, #1
 8007112:	d015      	beq.n	8007140 <lv_img_decoder_built_in_open+0x3c>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8007114:	b910      	cbnz	r0, 800711c <lv_img_decoder_built_in_open+0x18>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8007116:	684b      	ldr	r3, [r1, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	b173      	cbz	r3, 800713a <lv_img_decoder_built_in_open+0x36>
    lv_img_cf_t cf = dsc->header.cf;
 800711c:	7d23      	ldrb	r3, [r4, #20]
 800711e:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8007122:	1f02      	subs	r2, r0, #4
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	2a02      	cmp	r2, #2
 8007128:	d832      	bhi.n	8007190 <lv_img_decoder_built_in_open+0x8c>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800712a:	7c23      	ldrb	r3, [r4, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f040 80ba 	bne.w	80072a6 <lv_img_decoder_built_in_open+0x1a2>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 8007138:	2001      	movs	r0, #1
}
 800713a:	b004      	add	sp, #16
 800713c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8007140:	6848      	ldr	r0, [r1, #4]
 8007142:	f002 fd27 	bl	8009b94 <lv_fs_get_ext>
 8007146:	4959      	ldr	r1, [pc, #356]	; (80072ac <lv_img_decoder_built_in_open+0x1a8>)
 8007148:	f7f9 f84a 	bl	80001e0 <strcmp>
 800714c:	b108      	cbz	r0, 8007152 <lv_img_decoder_built_in_open+0x4e>
 800714e:	2000      	movs	r0, #0
 8007150:	e7f3      	b.n	800713a <lv_img_decoder_built_in_open+0x36>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8007152:	2202      	movs	r2, #2
 8007154:	6861      	ldr	r1, [r4, #4]
 8007156:	a801      	add	r0, sp, #4
 8007158:	f002 fce0 	bl	8009b1c <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800715c:	2800      	cmp	r0, #0
 800715e:	d1f6      	bne.n	800714e <lv_img_decoder_built_in_open+0x4a>
        if(dsc->user_data == NULL) {
 8007160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007162:	b11b      	cbz	r3, 800716c <lv_img_decoder_built_in_open+0x68>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8007164:	6a61      	ldr	r1, [r4, #36]	; 0x24
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
 8007166:	aa01      	add	r2, sp, #4

    while(len) {
 8007168:	230c      	movs	r3, #12
 800716a:	e00e      	b.n	800718a <lv_img_decoder_built_in_open+0x86>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800716c:	2014      	movs	r0, #20
 800716e:	f002 ff2d 	bl	8009fcc <lv_mem_alloc>
 8007172:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8007174:	b118      	cbz	r0, 800717e <lv_img_decoder_built_in_open+0x7a>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8007176:	2114      	movs	r1, #20
 8007178:	f002 ffba 	bl	800a0f0 <lv_memset_00>
 800717c:	e7f2      	b.n	8007164 <lv_img_decoder_built_in_open+0x60>
            LV_ASSERT_MALLOC(dsc->user_data);
 800717e:	e7fe      	b.n	800717e <lv_img_decoder_built_in_open+0x7a>
        *d8 = *s8;
 8007180:	f812 0b01 	ldrb.w	r0, [r2], #1
 8007184:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
 8007188:	3b01      	subs	r3, #1
    while(len) {
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f8      	bne.n	8007180 <lv_img_decoder_built_in_open+0x7c>
 800718e:	e7c5      	b.n	800711c <lv_img_decoder_built_in_open+0x18>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8007190:	1fc2      	subs	r2, r0, #7
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	2a03      	cmp	r2, #3
 8007196:	d906      	bls.n	80071a6 <lv_img_decoder_built_in_open+0xa2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8007198:	f1a0 030b 	sub.w	r3, r0, #11
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d87b      	bhi.n	800729a <lv_img_decoder_built_in_open+0x196>
        return LV_RES_OK; /*Nothing to process*/
 80071a2:	2001      	movs	r0, #1
 80071a4:	e7c9      	b.n	800713a <lv_img_decoder_built_in_open+0x36>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 80071a6:	f7ff ff00 	bl	8006faa <lv_img_cf_get_px_size>
 80071aa:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
 80071ac:	f04f 0901 	mov.w	r9, #1
 80071b0:	fa09 f900 	lsl.w	r9, r9, r0
        if(dsc->user_data == NULL) {
 80071b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071b6:	b39b      	cbz	r3, 8007220 <lv_img_decoder_built_in_open+0x11c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80071b8:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80071bc:	2002      	movs	r0, #2
 80071be:	fa00 f00a 	lsl.w	r0, r0, sl
 80071c2:	f002 ff03 	bl	8009fcc <lv_mem_alloc>
 80071c6:	f8c8 000c 	str.w	r0, [r8, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 80071ca:	b398      	cbz	r0, 8007234 <lv_img_decoder_built_in_open+0x130>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80071cc:	4648      	mov	r0, r9
 80071ce:	f002 fefd 	bl	8009fcc <lv_mem_alloc>
 80071d2:	f8c8 0010 	str.w	r0, [r8, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 80071d6:	b370      	cbz	r0, 8007236 <lv_img_decoder_built_in_open+0x132>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 80071d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071dc:	b363      	cbz	r3, 8007238 <lv_img_decoder_built_in_open+0x134>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80071de:	7c23      	ldrb	r3, [r4, #16]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d02f      	beq.n	8007244 <lv_img_decoder_built_in_open+0x140>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	689f      	ldr	r7, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 80071e8:	2300      	movs	r3, #0
 80071ea:	454b      	cmp	r3, r9
 80071ec:	d253      	bcs.n	8007296 <lv_img_decoder_built_in_open+0x192>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80071ee:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80071f2:	7891      	ldrb	r1, [r2, #2]
 80071f4:	7854      	ldrb	r4, [r2, #1]
 80071f6:	f817 5023 	ldrb.w	r5, [r7, r3, lsl #2]
 80071fa:	f8d8 000c 	ldr.w	r0, [r8, #12]
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80071fe:	08ed      	lsrs	r5, r5, #3
 8007200:	08a4      	lsrs	r4, r4, #2
 8007202:	08c9      	lsrs	r1, r1, #3
 8007204:	f365 0604 	bfi	r6, r5, #0, #5
 8007208:	f364 164a 	bfi	r6, r4, #5, #6
 800720c:	f361 26cf 	bfi	r6, r1, #11, #5
 8007210:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8007214:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8007218:	78d2      	ldrb	r2, [r2, #3]
 800721a:	54ca      	strb	r2, [r1, r3]
            for(i = 0; i < palette_size; i++) {
 800721c:	3301      	adds	r3, #1
 800721e:	e7e4      	b.n	80071ea <lv_img_decoder_built_in_open+0xe6>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8007220:	2014      	movs	r0, #20
 8007222:	f002 fed3 	bl	8009fcc <lv_mem_alloc>
 8007226:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8007228:	b118      	cbz	r0, 8007232 <lv_img_decoder_built_in_open+0x12e>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800722a:	2114      	movs	r1, #20
 800722c:	f002 ff60 	bl	800a0f0 <lv_memset_00>
 8007230:	e7c2      	b.n	80071b8 <lv_img_decoder_built_in_open+0xb4>
            LV_ASSERT_MALLOC(dsc->user_data);
 8007232:	e7fe      	b.n	8007232 <lv_img_decoder_built_in_open+0x12e>
        LV_ASSERT_MALLOC(user_data->palette);
 8007234:	e7fe      	b.n	8007234 <lv_img_decoder_built_in_open+0x130>
        LV_ASSERT_MALLOC(user_data->opa);
 8007236:	e7fe      	b.n	8007236 <lv_img_decoder_built_in_open+0x132>
            lv_img_decoder_built_in_close(decoder, dsc);
 8007238:	4621      	mov	r1, r4
 800723a:	4628      	mov	r0, r5
 800723c:	f7ff ff48 	bl	80070d0 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8007240:	2000      	movs	r0, #0
 8007242:	e77a      	b.n	800713a <lv_img_decoder_built_in_open+0x36>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8007244:	2200      	movs	r2, #0
 8007246:	2104      	movs	r1, #4
 8007248:	4640      	mov	r0, r8
 800724a:	f002 fbff 	bl	8009a4c <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800724e:	2400      	movs	r4, #0
 8007250:	e01f      	b.n	8007292 <lv_img_decoder_built_in_open+0x18e>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8007252:	2300      	movs	r3, #0
 8007254:	2204      	movs	r2, #4
 8007256:	eb0d 0102 	add.w	r1, sp, r2
 800725a:	4640      	mov	r0, r8
 800725c:	f002 fbd1 	bl	8009a02 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8007260:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007264:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007268:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800726c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007270:	08c0      	lsrs	r0, r0, #3
 8007272:	0892      	lsrs	r2, r2, #2
 8007274:	08db      	lsrs	r3, r3, #3
 8007276:	f360 0704 	bfi	r7, r0, #0, #5
 800727a:	f362 174a 	bfi	r7, r2, #5, #6
 800727e:	f363 27cf 	bfi	r7, r3, #11, #5
 8007282:	f821 7014 	strh.w	r7, [r1, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 8007286:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800728a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800728e:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 8007290:	3401      	adds	r4, #1
 8007292:	454c      	cmp	r4, r9
 8007294:	d3dd      	bcc.n	8007252 <lv_img_decoder_built_in_open+0x14e>
        return LV_RES_OK;
 8007296:	2001      	movs	r0, #1
 8007298:	e74f      	b.n	800713a <lv_img_decoder_built_in_open+0x36>
        lv_img_decoder_built_in_close(decoder, dsc);
 800729a:	4621      	mov	r1, r4
 800729c:	4628      	mov	r0, r5
 800729e:	f7ff ff17 	bl	80070d0 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 80072a2:	2000      	movs	r0, #0
 80072a4:	e749      	b.n	800713a <lv_img_decoder_built_in_open+0x36>
            return LV_RES_OK;
 80072a6:	2001      	movs	r0, #1
 80072a8:	e747      	b.n	800713a <lv_img_decoder_built_in_open+0x36>
 80072aa:	bf00      	nop
 80072ac:	0800bd84 	.word	0x0800bd84

080072b0 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 80072b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072b4:	b083      	sub	sp, #12
 80072b6:	4605      	mov	r5, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	4691      	mov	r9, r2
 80072bc:	461f      	mov	r7, r3
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80072be:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80072c2:	7d00      	ldrb	r0, [r0, #20]
 80072c4:	f000 001f 	and.w	r0, r0, #31
 80072c8:	f7ff fe6f 	bl	8006faa <lv_img_cf_get_px_size>
 80072cc:	4606      	mov	r6, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 80072ce:	6969      	ldr	r1, [r5, #20]
 80072d0:	f3c1 218a 	ubfx	r1, r1, #10, #11
 80072d4:	fb01 4109 	mla	r1, r1, r9, r4
 80072d8:	fb00 f101 	mul.w	r1, r0, r1
 80072dc:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 80072de:	2200      	movs	r2, #0
 80072e0:	3104      	adds	r1, #4
 80072e2:	4640      	mov	r0, r8
 80072e4:	f002 fbb2 	bl	8009a4c <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 80072e8:	b120      	cbz	r0, 80072f4 <lv_img_decoder_built_in_line_true_color+0x44>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 80072ea:	2400      	movs	r4, #0
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
    }

    return LV_RES_OK;
}
 80072ec:	4620      	mov	r0, r4
 80072ee:	b003      	add	sp, #12
 80072f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072f4:	4604      	mov	r4, r0
    uint32_t btr = len * (px_size >> 3);
 80072f6:	f3c6 06c7 	ubfx	r6, r6, #3, #8
 80072fa:	fb07 f606 	mul.w	r6, r7, r6
    uint32_t br  = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	9301      	str	r3, [sp, #4]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8007302:	ab01      	add	r3, sp, #4
 8007304:	4632      	mov	r2, r6
 8007306:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007308:	4640      	mov	r0, r8
 800730a:	f002 fb7a 	bl	8009a02 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800730e:	2800      	cmp	r0, #0
 8007310:	d1ec      	bne.n	80072ec <lv_img_decoder_built_in_line_true_color+0x3c>
 8007312:	9b01      	ldr	r3, [sp, #4]
 8007314:	42b3      	cmp	r3, r6
 8007316:	d1e9      	bne.n	80072ec <lv_img_decoder_built_in_line_true_color+0x3c>
    return LV_RES_OK;
 8007318:	2401      	movs	r4, #1
 800731a:	e7e7      	b.n	80072ec <lv_img_decoder_built_in_line_true_color+0x3c>

0800731c <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	b08b      	sub	sp, #44	; 0x2c
 8007322:	4607      	mov	r7, r0
 8007324:	460c      	mov	r4, r1
 8007326:	4692      	mov	sl, r2
 8007328:	461e      	mov	r6, r3
 800732a:	9d14      	ldr	r5, [sp, #80]	; 0x50
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800732c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8007330:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8007334:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 8007338:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800733c:	9308      	str	r3, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800733e:	4b59      	ldr	r3, [pc, #356]	; (80074a4 <lv_img_decoder_built_in_line_alpha+0x188>)
 8007340:	f10d 0c10 	add.w	ip, sp, #16
 8007344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007346:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800734a:	8938      	ldrh	r0, [r7, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800734c:	2300      	movs	r3, #0
 800734e:	e008      	b.n	8007362 <lv_img_decoder_built_in_line_alpha+0x46>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8007350:	b282      	uxth	r2, r0
 8007352:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007356:	546a      	strb	r2, [r5, r1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8007358:	3101      	adds	r1, #1
 800735a:	0a12      	lsrs	r2, r2, #8
 800735c:	546a      	strb	r2, [r5, r1]
    for(i = 0; i < len; i++) {
 800735e:	3301      	adds	r3, #1
 8007360:	b21b      	sxth	r3, r3
 8007362:	42b3      	cmp	r3, r6
 8007364:	dbf4      	blt.n	8007350 <lv_img_decoder_built_in_line_alpha+0x34>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8007366:	7d38      	ldrb	r0, [r7, #20]
 8007368:	f000 001f 	and.w	r0, r0, #31
 800736c:	f7ff fe1d 	bl	8006faa <lv_img_cf_get_px_size>
 8007370:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8007372:	f04f 0801 	mov.w	r8, #1
 8007376:	fa08 f800 	lsl.w	r8, r8, r0
 800737a:	fa1f f888 	uxth.w	r8, r8
 800737e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007382:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 8007386:	7d3b      	ldrb	r3, [r7, #20]
 8007388:	f003 031f 	and.w	r3, r3, #31
 800738c:	3b0b      	subs	r3, #11
 800738e:	2b03      	cmp	r3, #3
 8007390:	d847      	bhi.n	8007422 <lv_img_decoder_built_in_line_alpha+0x106>
 8007392:	e8df f003 	tbb	[pc, r3]
 8007396:	1e02      	.short	0x1e02
 8007398:	3d2e      	.short	0x3d2e
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80073a0:	3007      	adds	r0, #7
 80073a2:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 80073a4:	10e3      	asrs	r3, r4, #3
 80073a6:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 7 - (x & 0x7);
 80073aa:	43e4      	mvns	r4, r4
 80073ac:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 80073b0:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
            ofs += w * y + x;  /*First pixel*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	9302      	str	r3, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80073b8:	9003      	str	r0, [sp, #12]
 80073ba:	f002 fe37 	bl	800a02c <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 80073be:	9001      	str	r0, [sp, #4]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d06d      	beq.n	80074a0 <lv_img_decoder_built_in_line_alpha+0x184>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80073c4:	7c3b      	ldrb	r3, [r7, #16]
 80073c6:	bbab      	cbnz	r3, 8007434 <lv_img_decoder_built_in_line_alpha+0x118>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80073c8:	687b      	ldr	r3, [r7, #4]

        data_tmp = img_dsc->data + ofs;
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	449a      	add	sl, r3
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
 80073ce:	2200      	movs	r2, #0
 80073d0:	e041      	b.n	8007456 <lv_img_decoder_built_in_line_alpha+0x13a>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80073d8:	3003      	adds	r0, #3
 80073da:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 80073dc:	10a3      	asrs	r3, r4, #2
 80073de:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 6 - (x & 0x3) * 2;
 80073e2:	b2a4      	uxth	r4, r4
 80073e4:	43e4      	mvns	r4, r4
 80073e6:	f004 0403 	and.w	r4, r4, #3
 80073ea:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 80073ec:	f10d 0b20 	add.w	fp, sp, #32
            break;
 80073f0:	e7e0      	b.n	80073b4 <lv_img_decoder_built_in_line_alpha+0x98>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80073f8:	3001      	adds	r0, #1
 80073fa:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 80073fc:	1063      	asrs	r3, r4, #1
 80073fe:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 4 - (x & 0x1) * 4;
 8007402:	f014 0f01 	tst.w	r4, #1
 8007406:	d111      	bne.n	800742c <lv_img_decoder_built_in_line_alpha+0x110>
 8007408:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
 800740a:	f10d 0b10 	add.w	fp, sp, #16
 800740e:	e7d1      	b.n	80073b4 <lv_img_decoder_built_in_line_alpha+0x98>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8007410:	6978      	ldr	r0, [r7, #20]
 8007412:	f3c0 238a 	ubfx	r3, r0, #10, #11
 8007416:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 8007418:	fb0a 4a03 	mla	sl, sl, r3, r4
            pos = 0;
 800741c:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800741e:	46a3      	mov	fp, r4
            break;
 8007420:	e7c8      	b.n	80073b4 <lv_img_decoder_built_in_line_alpha+0x98>
    switch(dsc->header.cf) {
 8007422:	2400      	movs	r4, #0
 8007424:	46a2      	mov	sl, r4
 8007426:	4620      	mov	r0, r4
 8007428:	46a3      	mov	fp, r4
 800742a:	e7c3      	b.n	80073b4 <lv_img_decoder_built_in_line_alpha+0x98>
            pos = 4 - (x & 0x1) * 4;
 800742c:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
 800742e:	f10d 0b10 	add.w	fp, sp, #16
 8007432:	e7bf      	b.n	80073b4 <lv_img_decoder_built_in_line_alpha+0x98>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8007434:	2200      	movs	r2, #0
 8007436:	f10a 0104 	add.w	r1, sl, #4
 800743a:	9802      	ldr	r0, [sp, #8]
 800743c:	f002 fb06 	bl	8009a4c <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8007440:	2300      	movs	r3, #0
 8007442:	9a03      	ldr	r2, [sp, #12]
 8007444:	f8dd a004 	ldr.w	sl, [sp, #4]
 8007448:	4651      	mov	r1, sl
 800744a:	9802      	ldr	r0, [sp, #8]
 800744c:	f002 fad9 	bl	8009a02 <lv_fs_read>
        data_tmp = fs_buf;
 8007450:	e7bd      	b.n	80073ce <lv_img_decoder_built_in_line_alpha+0xb2>
    }

    for(i = 0; i < len; i++) {
 8007452:	3201      	adds	r2, #1
 8007454:	b212      	sxth	r2, r2
 8007456:	42b2      	cmp	r2, r6
 8007458:	da1b      	bge.n	8007492 <lv_img_decoder_built_in_line_alpha+0x176>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800745a:	f89a 3000 	ldrb.w	r3, [sl]
 800745e:	4123      	asrs	r3, r4
 8007460:	ea03 0308 	and.w	r3, r3, r8
 8007464:	b2db      	uxtb	r3, r3

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8007466:	7d39      	ldrb	r1, [r7, #20]
 8007468:	f001 011f 	and.w	r1, r1, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800746c:	290e      	cmp	r1, #14
 800746e:	d001      	beq.n	8007474 <lv_img_decoder_built_in_line_alpha+0x158>
 8007470:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8007474:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8007478:	3102      	adds	r1, #2
 800747a:	546b      	strb	r3, [r5, r1]

        pos -= px_size;
 800747c:	eba4 0409 	sub.w	r4, r4, r9
 8007480:	b264      	sxtb	r4, r4
        if(pos < 0) {
 8007482:	2c00      	cmp	r4, #0
 8007484:	dae5      	bge.n	8007452 <lv_img_decoder_built_in_line_alpha+0x136>
            pos = 8 - px_size;
 8007486:	f1c9 0408 	rsb	r4, r9, #8
 800748a:	b264      	sxtb	r4, r4
            data_tmp++;
 800748c:	f10a 0a01 	add.w	sl, sl, #1
 8007490:	e7df      	b.n	8007452 <lv_img_decoder_built_in_line_alpha+0x136>
        }
    }
    lv_mem_buf_release(fs_buf);
 8007492:	9801      	ldr	r0, [sp, #4]
 8007494:	f002 fc94 	bl	8009dc0 <lv_mem_buf_release>
    return LV_RES_OK;
 8007498:	2001      	movs	r0, #1
}
 800749a:	b00b      	add	sp, #44	; 0x2c
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(fs_buf == NULL) return LV_RES_INV;
 80074a0:	2000      	movs	r0, #0
 80074a2:	e7fa      	b.n	800749a <lv_img_decoder_built_in_line_alpha+0x17e>
 80074a4:	0800bd08 	.word	0x0800bd08

080074a8 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	b083      	sub	sp, #12
 80074ae:	4682      	mov	sl, r0
 80074b0:	460c      	mov	r4, r1
 80074b2:	4693      	mov	fp, r2
 80074b4:	4699      	mov	r9, r3
 80074b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80074b8:	7d00      	ldrb	r0, [r0, #20]
 80074ba:	f000 001f 	and.w	r0, r0, #31
 80074be:	f7ff fd74 	bl	8006faa <lv_img_cf_get_px_size>
 80074c2:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80074c4:	2601      	movs	r6, #1
 80074c6:	4086      	lsls	r6, r0
 80074c8:	b2b6      	uxth	r6, r6
 80074ca:	3e01      	subs	r6, #1
 80074cc:	b2b6      	uxth	r6, r6

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 80074ce:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80074d2:	f003 031f 	and.w	r3, r3, #31
 80074d6:	3b07      	subs	r3, #7
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d84e      	bhi.n	800757a <lv_img_decoder_built_in_line_indexed+0xd2>
 80074dc:	e8df f003 	tbb	[pc, r3]
 80074e0:	42322102 	.word	0x42322102
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80074e4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80074e8:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80074ec:	3007      	adds	r0, #7
 80074ee:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 80074f0:	10e3      	asrs	r3, r4, #3
 80074f2:	fb0b 3b00 	mla	fp, fp, r0, r3
            ofs += 8;                /*Skip the palette*/
 80074f6:	f10b 0b08 	add.w	fp, fp, #8
            pos = 7 - (x & 0x7);
 80074fa:	43e4      	mvns	r4, r4
 80074fc:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8007500:	f8da 7024 	ldr.w	r7, [sl, #36]	; 0x24

    uint8_t * fs_buf = lv_mem_buf_get(w);
 8007504:	9001      	str	r0, [sp, #4]
 8007506:	f002 fd91 	bl	800a02c <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 800750a:	9000      	str	r0, [sp, #0]
 800750c:	2800      	cmp	r0, #0
 800750e:	d074      	beq.n	80075fa <lv_img_decoder_built_in_line_indexed+0x152>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8007510:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8007514:	bbc3      	cbnz	r3, 8007588 <lv_img_decoder_built_in_line_indexed+0xe0>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8007516:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	449b      	add	fp, r3
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
 800751e:	2000      	movs	r0, #0
 8007520:	e043      	b.n	80075aa <lv_img_decoder_built_in_line_indexed+0x102>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8007522:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007526:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800752a:	3003      	adds	r0, #3
 800752c:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800752e:	10a3      	asrs	r3, r4, #2
 8007530:	fb0b 3b00 	mla	fp, fp, r0, r3
            ofs += 16;               /*Skip the palette*/
 8007534:	f10b 0b10 	add.w	fp, fp, #16
            pos = 6 - (x & 0x3) * 2;
 8007538:	b2a4      	uxth	r4, r4
 800753a:	43e4      	mvns	r4, r4
 800753c:	f004 0403 	and.w	r4, r4, #3
 8007540:	0064      	lsls	r4, r4, #1
            break;
 8007542:	e7dd      	b.n	8007500 <lv_img_decoder_built_in_line_indexed+0x58>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8007544:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007548:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800754c:	3001      	adds	r0, #1
 800754e:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8007550:	1063      	asrs	r3, r4, #1
 8007552:	fb0b 3b00 	mla	fp, fp, r0, r3
            ofs += 64;               /*Skip the palette*/
 8007556:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 800755a:	f014 0f01 	tst.w	r4, #1
 800755e:	d111      	bne.n	8007584 <lv_img_decoder_built_in_line_indexed+0xdc>
 8007560:	2404      	movs	r4, #4
 8007562:	e7cd      	b.n	8007500 <lv_img_decoder_built_in_line_indexed+0x58>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8007564:	f8da 0014 	ldr.w	r0, [sl, #20]
 8007568:	f3c0 238a 	ubfx	r3, r0, #10, #11
 800756c:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 800756e:	fb0b 4b03 	mla	fp, fp, r3, r4
            ofs += 1024;       /*Skip the palette*/
 8007572:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
            pos = 0;
 8007576:	2400      	movs	r4, #0
            break;
 8007578:	e7c2      	b.n	8007500 <lv_img_decoder_built_in_line_indexed+0x58>
    switch(dsc->header.cf) {
 800757a:	f04f 0b00 	mov.w	fp, #0
 800757e:	465c      	mov	r4, fp
 8007580:	4658      	mov	r0, fp
 8007582:	e7bd      	b.n	8007500 <lv_img_decoder_built_in_line_indexed+0x58>
            pos = 4 - (x & 0x1) * 4;
 8007584:	2400      	movs	r4, #0
 8007586:	e7bb      	b.n	8007500 <lv_img_decoder_built_in_line_indexed+0x58>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8007588:	2200      	movs	r2, #0
 800758a:	f10b 0104 	add.w	r1, fp, #4
 800758e:	4638      	mov	r0, r7
 8007590:	f002 fa5c 	bl	8009a4c <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8007594:	2300      	movs	r3, #0
 8007596:	9a01      	ldr	r2, [sp, #4]
 8007598:	f8dd b000 	ldr.w	fp, [sp]
 800759c:	4659      	mov	r1, fp
 800759e:	4638      	mov	r0, r7
 80075a0:	f002 fa2f 	bl	8009a02 <lv_fs_read>
        data_tmp = fs_buf;
 80075a4:	e7bb      	b.n	800751e <lv_img_decoder_built_in_line_indexed+0x76>
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80075a6:	3001      	adds	r0, #1
 80075a8:	b200      	sxth	r0, r0
 80075aa:	4548      	cmp	r0, r9
 80075ac:	da1e      	bge.n	80075ec <lv_img_decoder_built_in_line_indexed+0x144>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80075ae:	f89b 3000 	ldrb.w	r3, [fp]
 80075b2:	4123      	asrs	r3, r4
 80075b4:	4033      	ands	r3, r6
 80075b6:	b2db      	uxtb	r3, r3

        lv_color_t color = user_data->palette[val_act];
 80075b8:	68fa      	ldr	r2, [r7, #12]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 80075ba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80075be:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80075c2:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 80075c4:	f102 0c01 	add.w	ip, r2, #1
 80075c8:	0a09      	lsrs	r1, r1, #8
 80075ca:	f805 100c 	strb.w	r1, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 80075ce:	6939      	ldr	r1, [r7, #16]
 80075d0:	3202      	adds	r2, #2
 80075d2:	5ccb      	ldrb	r3, [r1, r3]
 80075d4:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
 80075d6:	eba4 0408 	sub.w	r4, r4, r8
 80075da:	b264      	sxtb	r4, r4
        if(pos < 0) {
 80075dc:	2c00      	cmp	r4, #0
 80075de:	dae2      	bge.n	80075a6 <lv_img_decoder_built_in_line_indexed+0xfe>
            pos = 8 - px_size;
 80075e0:	f1c8 0408 	rsb	r4, r8, #8
 80075e4:	b264      	sxtb	r4, r4
            data_tmp++;
 80075e6:	f10b 0b01 	add.w	fp, fp, #1
 80075ea:	e7dc      	b.n	80075a6 <lv_img_decoder_built_in_line_indexed+0xfe>
        }
    }
    lv_mem_buf_release(fs_buf);
 80075ec:	9800      	ldr	r0, [sp, #0]
 80075ee:	f002 fbe7 	bl	8009dc0 <lv_mem_buf_release>
    return LV_RES_OK;
 80075f2:	2001      	movs	r0, #1
}
 80075f4:	b003      	add	sp, #12
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(fs_buf == NULL) return LV_RES_INV;
 80075fa:	2000      	movs	r0, #0
 80075fc:	e7fa      	b.n	80075f4 <lv_img_decoder_built_in_line_indexed+0x14c>

080075fe <lv_img_decoder_built_in_read_line>:
{
 80075fe:	b510      	push	{r4, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	461a      	mov	r2, r3
 8007608:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800760c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8007610:	f00c 0e1e 	and.w	lr, ip, #30
 8007614:	f1be 0f04 	cmp.w	lr, #4
 8007618:	d014      	beq.n	8007644 <lv_img_decoder_built_in_read_line+0x46>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800761a:	f00c 0c1f 	and.w	ip, ip, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800761e:	f1bc 0f06 	cmp.w	ip, #6
 8007622:	d00f      	beq.n	8007644 <lv_img_decoder_built_in_read_line+0x46>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8007624:	f1ac 0e0b 	sub.w	lr, ip, #11
 8007628:	fa5f fe8e 	uxtb.w	lr, lr
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800762c:	f1be 0f03 	cmp.w	lr, #3
 8007630:	d915      	bls.n	800765e <lv_img_decoder_built_in_read_line+0x60>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8007632:	f1ac 0c07 	sub.w	ip, ip, #7
 8007636:	fa5f fc8c 	uxtb.w	ip, ip
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800763a:	f1bc 0f03 	cmp.w	ip, #3
 800763e:	d913      	bls.n	8007668 <lv_img_decoder_built_in_read_line+0x6a>
        return LV_RES_INV;
 8007640:	2000      	movs	r0, #0
 8007642:	e005      	b.n	8007650 <lv_img_decoder_built_in_read_line+0x52>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8007644:	f890 c010 	ldrb.w	ip, [r0, #16]
 8007648:	f1bc 0f01 	cmp.w	ip, #1
 800764c:	d002      	beq.n	8007654 <lv_img_decoder_built_in_read_line+0x56>
    lv_res_t res = LV_RES_INV;
 800764e:	2000      	movs	r0, #0
}
 8007650:	b002      	add	sp, #8
 8007652:	bd10      	pop	{r4, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8007654:	9c05      	ldr	r4, [sp, #20]
 8007656:	9400      	str	r4, [sp, #0]
 8007658:	f7ff fe2a 	bl	80072b0 <lv_img_decoder_built_in_line_true_color>
 800765c:	e7f8      	b.n	8007650 <lv_img_decoder_built_in_read_line+0x52>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 800765e:	9c05      	ldr	r4, [sp, #20]
 8007660:	9400      	str	r4, [sp, #0]
 8007662:	f7ff fe5b 	bl	800731c <lv_img_decoder_built_in_line_alpha>
 8007666:	e7f3      	b.n	8007650 <lv_img_decoder_built_in_read_line+0x52>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8007668:	9c05      	ldr	r4, [sp, #20]
 800766a:	9400      	str	r4, [sp, #0]
 800766c:	f7ff ff1c 	bl	80074a8 <lv_img_decoder_built_in_line_indexed>
 8007670:	e7ee      	b.n	8007650 <lv_img_decoder_built_in_read_line+0x52>
	...

08007674 <lv_img_decoder_create>:
{
 8007674:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 8007676:	4805      	ldr	r0, [pc, #20]	; (800768c <lv_img_decoder_create+0x18>)
 8007678:	f002 fab8 	bl	8009bec <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 800767c:	b128      	cbz	r0, 800768a <lv_img_decoder_create+0x16>
 800767e:	4604      	mov	r4, r0
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 8007680:	2114      	movs	r1, #20
 8007682:	f002 fd35 	bl	800a0f0 <lv_memset_00>
}
 8007686:	4620      	mov	r0, r4
 8007688:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 800768a:	e7fe      	b.n	800768a <lv_img_decoder_create+0x16>
 800768c:	20001e9c 	.word	0x20001e9c

08007690 <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
 8007690:	6001      	str	r1, [r0, #0]
}
 8007692:	4770      	bx	lr

08007694 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
 8007694:	6041      	str	r1, [r0, #4]
}
 8007696:	4770      	bx	lr

08007698 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
 8007698:	6081      	str	r1, [r0, #8]
}
 800769a:	4770      	bx	lr

0800769c <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
 800769c:	60c1      	str	r1, [r0, #12]
}
 800769e:	4770      	bx	lr

080076a0 <_lv_img_decoder_init>:
{
 80076a0:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 80076a2:	2114      	movs	r1, #20
 80076a4:	480b      	ldr	r0, [pc, #44]	; (80076d4 <_lv_img_decoder_init+0x34>)
 80076a6:	f002 fa99 	bl	8009bdc <_lv_ll_init>
    decoder = lv_img_decoder_create();
 80076aa:	f7ff ffe3 	bl	8007674 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 80076ae:	b180      	cbz	r0, 80076d2 <_lv_img_decoder_init+0x32>
 80076b0:	4604      	mov	r4, r0
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 80076b2:	4909      	ldr	r1, [pc, #36]	; (80076d8 <_lv_img_decoder_init+0x38>)
 80076b4:	f7ff ffec 	bl	8007690 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 80076b8:	4908      	ldr	r1, [pc, #32]	; (80076dc <_lv_img_decoder_init+0x3c>)
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff ffea 	bl	8007694 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 80076c0:	4907      	ldr	r1, [pc, #28]	; (80076e0 <_lv_img_decoder_init+0x40>)
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff ffe8 	bl	8007698 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 80076c8:	4906      	ldr	r1, [pc, #24]	; (80076e4 <_lv_img_decoder_init+0x44>)
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff ffe6 	bl	800769c <lv_img_decoder_set_close_cb>
}
 80076d0:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 80076d2:	e7fe      	b.n	80076d2 <_lv_img_decoder_init+0x32>
 80076d4:	20001e9c 	.word	0x20001e9c
 80076d8:	08007001 	.word	0x08007001
 80076dc:	08007105 	.word	0x08007105
 80076e0:	080075ff 	.word	0x080075ff
 80076e4:	080070d1 	.word	0x080070d1

080076e8 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80076e8:	4603      	mov	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80076ea:	8880      	ldrh	r0, [r0, #4]
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	1ac0      	subs	r0, r0, r3
 80076f0:	b280      	uxth	r0, r0
 80076f2:	3001      	adds	r0, #1
}
 80076f4:	b200      	sxth	r0, r0
 80076f6:	4770      	bx	lr

080076f8 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80076f8:	4603      	mov	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80076fa:	88c0      	ldrh	r0, [r0, #6]
 80076fc:	885b      	ldrh	r3, [r3, #2]
 80076fe:	1ac0      	subs	r0, r0, r3
 8007700:	b280      	uxth	r0, r0
 8007702:	3001      	adds	r0, #1
}
 8007704:	b200      	sxth	r0, r0
 8007706:	4770      	bx	lr

08007708 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
 8007708:	b410      	push	{r4}
 800770a:	9c01      	ldr	r4, [sp, #4]
    if(item_cnt <= 1) {
 800770c:	2b01      	cmp	r3, #1
 800770e:	dd07      	ble.n	8007720 <place_content+0x18>
            default:
                break;
        }
    }

    switch(place) {
 8007710:	3801      	subs	r0, #1
 8007712:	2804      	cmp	r0, #4
 8007714:	d847      	bhi.n	80077a6 <place_content+0x9e>
 8007716:	e8df f000 	tbb	[pc, r0]
 800771a:	0815      	.short	0x0815
 800771c:	2738      	.short	0x2738
 800771e:	1e          	.byte	0x1e
 800771f:	00          	.byte	0x00
        switch(place) {
 8007720:	f1a0 0c03 	sub.w	ip, r0, #3
 8007724:	f1bc 0f02 	cmp.w	ip, #2
 8007728:	d8f2      	bhi.n	8007710 <place_content+0x8>
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	9802      	ldr	r0, [sp, #8]
 800772e:	8003      	strh	r3, [r0, #0]
            *start_pos += (max_size - content_size) / 2;
 8007730:	1a89      	subs	r1, r1, r2
 8007732:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8007736:	8823      	ldrh	r3, [r4, #0]
 8007738:	eb03 0161 	add.w	r1, r3, r1, asr #1
 800773c:	8021      	strh	r1, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 800773e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007742:	4770      	bx	lr
            *gap = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	9802      	ldr	r0, [sp, #8]
 8007748:	8003      	strh	r3, [r0, #0]
            *start_pos += max_size - content_size;
 800774a:	1a89      	subs	r1, r1, r2
 800774c:	8823      	ldrh	r3, [r4, #0]
 800774e:	fa13 f181 	uxtah	r1, r3, r1
 8007752:	8021      	strh	r1, [r4, #0]
            break;
 8007754:	e7f3      	b.n	800773e <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 8007756:	1a89      	subs	r1, r1, r2
 8007758:	b209      	sxth	r1, r1
 800775a:	3b01      	subs	r3, #1
 800775c:	b21b      	sxth	r3, r3
 800775e:	fb91 f1f3 	sdiv	r1, r1, r3
 8007762:	9b02      	ldr	r3, [sp, #8]
 8007764:	8019      	strh	r1, [r3, #0]
            break;
 8007766:	e7ea      	b.n	800773e <place_content+0x36>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 8007768:	1a89      	subs	r1, r1, r2
 800776a:	b209      	sxth	r1, r1
 800776c:	fb91 f3f3 	sdiv	r3, r1, r3
 8007770:	9a02      	ldr	r2, [sp, #8]
 8007772:	8812      	ldrh	r2, [r2, #0]
 8007774:	4413      	add	r3, r2
 8007776:	b21b      	sxth	r3, r3
 8007778:	9a02      	ldr	r2, [sp, #8]
 800777a:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap / 2;
 800777c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007780:	8822      	ldrh	r2, [r4, #0]
 8007782:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8007786:	8023      	strh	r3, [r4, #0]
            break;
 8007788:	e7d9      	b.n	800773e <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 800778a:	1a89      	subs	r1, r1, r2
 800778c:	b209      	sxth	r1, r1
 800778e:	3301      	adds	r3, #1
 8007790:	b21b      	sxth	r3, r3
 8007792:	fb91 f3f3 	sdiv	r3, r1, r3
 8007796:	b21b      	sxth	r3, r3
 8007798:	9a02      	ldr	r2, [sp, #8]
 800779a:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap;
 800779c:	8822      	ldrh	r2, [r4, #0]
 800779e:	fa12 f383 	uxtah	r3, r2, r3
 80077a2:	8023      	strh	r3, [r4, #0]
            break;
 80077a4:	e7cb      	b.n	800773e <place_content+0x36>
            *gap = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	9a02      	ldr	r2, [sp, #8]
 80077aa:	8013      	strh	r3, [r2, #0]
}
 80077ac:	e7c7      	b.n	800773e <place_content+0x36>

080077ae <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 80077ae:	b149      	cbz	r1, 80077c4 <get_next_item+0x16>
        (*item_id)--;
 80077b0:	6813      	ldr	r3, [r2, #0]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	db0f      	blt.n	80077da <get_next_item+0x2c>
 80077ba:	6882      	ldr	r2, [r0, #8]
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80077c2:	4770      	bx	lr
        else return NULL;
    }
    else {
        (*item_id)++;
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	3301      	adds	r3, #1
 80077c8:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 80077ca:	6882      	ldr	r2, [r0, #8]
 80077cc:	6851      	ldr	r1, [r2, #4]
 80077ce:	428b      	cmp	r3, r1
 80077d0:	da05      	bge.n	80077de <get_next_item+0x30>
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80077d8:	4770      	bx	lr
        else return NULL;
 80077da:	2000      	movs	r0, #0
 80077dc:	4770      	bx	lr
        else return NULL;
 80077de:	2000      	movs	r0, #0
    }
}
 80077e0:	4770      	bx	lr
	...

080077e4 <find_track_end>:
{
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	b087      	sub	sp, #28
 80077ea:	4681      	mov	r9, r0
 80077ec:	460e      	mov	r6, r1
 80077ee:	4690      	mov	r8, r2
 80077f0:	9302      	str	r3, [sp, #8]
 80077f2:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
 80077f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80077f8:	f241 0201 	movw	r2, #4097	; 0x1001
 80077fc:	2100      	movs	r1, #0
 80077fe:	f7ff fa93 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007802:	b204      	sxth	r4, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007804:	f241 0204 	movw	r2, #4100	; 0x1004
 8007808:	2100      	movs	r1, #0
 800780a:	4648      	mov	r0, r9
 800780c:	f7ff fa8c 	bl	8006d28 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 8007810:	78f3      	ldrb	r3, [r6, #3]
 8007812:	f013 0f02 	tst.w	r3, #2
 8007816:	d010      	beq.n	800783a <find_track_end+0x56>
 8007818:	b200      	sxth	r0, r0
 800781a:	f013 0301 	ands.w	r3, r3, #1
 800781e:	d003      	beq.n	8007828 <find_track_end+0x44>
 8007820:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8007824:	4294      	cmp	r4, r2
 8007826:	d004      	beq.n	8007832 <find_track_end+0x4e>
 8007828:	b93b      	cbnz	r3, 800783a <find_track_end+0x56>
 800782a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800782e:	4298      	cmp	r0, r3
 8007830:	d103      	bne.n	800783a <find_track_end+0x56>
        f->wrap = false;
 8007832:	78f3      	ldrb	r3, [r6, #3]
 8007834:	f36f 0341 	bfc	r3, #1, #1
 8007838:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800783a:	78f3      	ldrb	r3, [r6, #3]
 800783c:	f013 0301 	ands.w	r3, r3, #1
 8007840:	d013      	beq.n	800786a <find_track_end+0x86>
 8007842:	4a82      	ldr	r2, [pc, #520]	; (8007a4c <find_track_end+0x268>)
 8007844:	9203      	str	r2, [sp, #12]
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8007846:	b99b      	cbnz	r3, 8007870 <find_track_end+0x8c>
 8007848:	f8df a200 	ldr.w	sl, [pc, #512]	; 8007a4c <find_track_end+0x268>
    t->track_main_size = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	806b      	strh	r3, [r5, #2]
    t->track_fix_main_size = 0;
 8007850:	80ab      	strh	r3, [r5, #4]
    t->grow_item_cnt = 0;
 8007852:	612b      	str	r3, [r5, #16]
    t->track_cross_size = 0;
 8007854:	802b      	strh	r3, [r5, #0]
    t->item_cnt = 0;
 8007856:	60ab      	str	r3, [r5, #8]
    t->grow_dsc = NULL;
 8007858:	60eb      	str	r3, [r5, #12]
    int32_t item_id = item_start_id;
 800785a:	f8cd 8014 	str.w	r8, [sp, #20]
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 800785e:	4641      	mov	r1, r8
 8007860:	4648      	mov	r0, r9
 8007862:	f7ff fb05 	bl	8006e70 <lv_obj_get_child>
 8007866:	4604      	mov	r4, r0
    while(item) {
 8007868:	e0aa      	b.n	80079c0 <find_track_end+0x1dc>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800786a:	4a79      	ldr	r2, [pc, #484]	; (8007a50 <find_track_end+0x26c>)
 800786c:	9203      	str	r2, [sp, #12]
 800786e:	e7ea      	b.n	8007846 <find_track_end+0x62>
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8007870:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8007a50 <find_track_end+0x26c>
 8007874:	e7ea      	b.n	800784c <find_track_end+0x68>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8007876:	4b77      	ldr	r3, [pc, #476]	; (8007a54 <find_track_end+0x270>)
 8007878:	881a      	ldrh	r2, [r3, #0]
 800787a:	2100      	movs	r1, #0
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff fa53 	bl	8006d28 <lv_obj_get_style_prop>
 8007882:	4607      	mov	r7, r0
            if(grow_value) {
 8007884:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007888:	d070      	beq.n	800796c <find_track_end+0x188>
                t->grow_item_cnt++;
 800788a:	6928      	ldr	r0, [r5, #16]
 800788c:	3001      	adds	r0, #1
 800788e:	6128      	str	r0, [r5, #16]
                t->track_fix_main_size += item_gap;
 8007890:	88ab      	ldrh	r3, [r5, #4]
 8007892:	445b      	add	r3, fp
 8007894:	80ab      	strh	r3, [r5, #4]
                if(t->grow_dsc_calc) {
 8007896:	7d2b      	ldrb	r3, [r5, #20]
 8007898:	f013 0f01 	tst.w	r3, #1
 800789c:	d078      	beq.n	8007990 <find_track_end+0x1ac>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 800789e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80078a2:	0080      	lsls	r0, r0, #2
 80078a4:	f002 fbc2 	bl	800a02c <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 80078a8:	9001      	str	r0, [sp, #4]
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d04d      	beq.n	800794a <find_track_end+0x166>
                    if(t->grow_dsc) {
 80078ae:	68e9      	ldr	r1, [r5, #12]
 80078b0:	b151      	cbz	r1, 80078c8 <find_track_end+0xe4>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 80078b2:	692b      	ldr	r3, [r5, #16]
 80078b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078b8:	009a      	lsls	r2, r3, #2
 80078ba:	3a14      	subs	r2, #20
 80078bc:	9801      	ldr	r0, [sp, #4]
 80078be:	f002 fa97 	bl	8009df0 <lv_memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 80078c2:	68e8      	ldr	r0, [r5, #12]
 80078c4:	f002 fa7c 	bl	8009dc0 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 80078c8:	692b      	ldr	r3, [r5, #16]
 80078ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	3b14      	subs	r3, #20
 80078d2:	9a01      	ldr	r2, [sp, #4]
 80078d4:	50d4      	str	r4, [r2, r3]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 80078d6:	78f3      	ldrb	r3, [r6, #3]
 80078d8:	f013 0f01 	tst.w	r3, #1
 80078dc:	d036      	beq.n	800794c <find_track_end+0x168>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80078de:	f241 0202 	movw	r2, #4098	; 0x1002
 80078e2:	2100      	movs	r1, #0
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff fa1f 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80078ea:	b200      	sxth	r0, r0
 80078ec:	692b      	ldr	r3, [r5, #16]
 80078ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	3b14      	subs	r3, #20
 80078f6:	9a01      	ldr	r2, [sp, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	8098      	strh	r0, [r3, #4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 80078fc:	78f3      	ldrb	r3, [r6, #3]
 80078fe:	f013 0f01 	tst.w	r3, #1
 8007902:	d02b      	beq.n	800795c <find_track_end+0x178>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8007904:	f241 0203 	movw	r2, #4099	; 0x1003
 8007908:	2100      	movs	r1, #0
 800790a:	4620      	mov	r0, r4
 800790c:	f7ff fa0c 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007910:	b200      	sxth	r0, r0
 8007912:	692b      	ldr	r3, [r5, #16]
 8007914:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3b14      	subs	r3, #20
 800791c:	9901      	ldr	r1, [sp, #4]
 800791e:	440b      	add	r3, r1
 8007920:	80d8      	strh	r0, [r3, #6]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 8007922:	692b      	ldr	r3, [r5, #16]
 8007924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	3b14      	subs	r3, #20
 800792c:	440b      	add	r3, r1
 800792e:	b2ff      	uxtb	r7, r7
 8007930:	60df      	str	r7, [r3, #12]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8007932:	692b      	ldr	r3, [r5, #16]
 8007934:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	3b14      	subs	r3, #20
 800793c:	440b      	add	r3, r1
 800793e:	7c1a      	ldrb	r2, [r3, #16]
 8007940:	f36f 0200 	bfc	r2, #0, #1
 8007944:	741a      	strb	r2, [r3, #16]
                    t->grow_dsc = new_dsc;
 8007946:	60e9      	str	r1, [r5, #12]
 8007948:	e022      	b.n	8007990 <find_track_end+0x1ac>
                    LV_ASSERT_MALLOC(new_dsc);
 800794a:	e7fe      	b.n	800794a <find_track_end+0x166>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800794c:	f241 0205 	movw	r2, #4101	; 0x1005
 8007950:	2100      	movs	r1, #0
 8007952:	4620      	mov	r0, r4
 8007954:	f7ff f9e8 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007958:	b200      	sxth	r0, r0
 800795a:	e7c7      	b.n	80078ec <find_track_end+0x108>
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800795c:	f241 0206 	movw	r2, #4102	; 0x1006
 8007960:	2100      	movs	r1, #0
 8007962:	4620      	mov	r0, r4
 8007964:	f7ff f9e0 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007968:	b200      	sxth	r0, r0
 800796a:	e7d2      	b.n	8007912 <find_track_end+0x12e>
                lv_coord_t item_size = get_main_size(item);
 800796c:	4620      	mov	r0, r4
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 8007972:	78f3      	ldrb	r3, [r6, #3]
 8007974:	f013 0f02 	tst.w	r3, #2
 8007978:	d005      	beq.n	8007986 <find_track_end+0x1a2>
 800797a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800797e:	4403      	add	r3, r0
 8007980:	9a02      	ldr	r2, [sp, #8]
 8007982:	4293      	cmp	r3, r2
 8007984:	dc34      	bgt.n	80079f0 <find_track_end+0x20c>
                t->track_fix_main_size += item_size + item_gap;
 8007986:	4458      	add	r0, fp
 8007988:	88ab      	ldrh	r3, [r5, #4]
 800798a:	fa13 f080 	uxtah	r0, r3, r0
 800798e:	80a8      	strh	r0, [r5, #4]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 8007990:	4620      	mov	r0, r4
 8007992:	47d0      	blx	sl
 8007994:	f9b5 3000 	ldrsh.w	r3, [r5]
 8007998:	4298      	cmp	r0, r3
 800799a:	dd02      	ble.n	80079a2 <find_track_end+0x1be>
 800799c:	4620      	mov	r0, r4
 800799e:	47d0      	blx	sl
 80079a0:	4603      	mov	r3, r0
 80079a2:	802b      	strh	r3, [r5, #0]
            t->item_cnt++;
 80079a4:	68ab      	ldr	r3, [r5, #8]
 80079a6:	3301      	adds	r3, #1
 80079a8:	60ab      	str	r3, [r5, #8]
 80079aa:	e01a      	b.n	80079e2 <find_track_end+0x1fe>
        item_id += f->rev ? -1 : +1;
 80079ac:	2101      	movs	r1, #1
 80079ae:	9b05      	ldr	r3, [sp, #20]
 80079b0:	4419      	add	r1, r3
 80079b2:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 80079b4:	2900      	cmp	r1, #0
 80079b6:	db1b      	blt.n	80079f0 <find_track_end+0x20c>
        item = lv_obj_get_child(cont, item_id);
 80079b8:	4648      	mov	r0, r9
 80079ba:	f7ff fa59 	bl	8006e70 <lv_obj_get_child>
 80079be:	4604      	mov	r4, r0
    while(item) {
 80079c0:	b1b4      	cbz	r4, 80079f0 <find_track_end+0x20c>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 80079c2:	9b05      	ldr	r3, [sp, #20]
 80079c4:	4543      	cmp	r3, r8
 80079c6:	d005      	beq.n	80079d4 <find_track_end+0x1f0>
 80079c8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80079cc:	4620      	mov	r0, r4
 80079ce:	f7fd f92f 	bl	8004c30 <lv_obj_has_flag>
 80079d2:	b968      	cbnz	r0, 80079f0 <find_track_end+0x20c>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 80079d4:	4920      	ldr	r1, [pc, #128]	; (8007a58 <find_track_end+0x274>)
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7fd f931 	bl	8004c3e <lv_obj_has_flag_any>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f43f af4a 	beq.w	8007876 <find_track_end+0x92>
        item_id += f->rev ? -1 : +1;
 80079e2:	78f3      	ldrb	r3, [r6, #3]
 80079e4:	f013 0f04 	tst.w	r3, #4
 80079e8:	d0e0      	beq.n	80079ac <find_track_end+0x1c8>
 80079ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80079ee:	e7de      	b.n	80079ae <find_track_end+0x1ca>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 80079f0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd02      	ble.n	80079fe <find_track_end+0x21a>
 80079f8:	eba3 030b 	sub.w	r3, r3, fp
 80079fc:	80ab      	strh	r3, [r5, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 80079fe:	692b      	ldr	r3, [r5, #16]
 8007a00:	b913      	cbnz	r3, 8007a08 <find_track_end+0x224>
 8007a02:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007a06:	9302      	str	r3, [sp, #8]
 8007a08:	9b02      	ldr	r3, [sp, #8]
 8007a0a:	806b      	strh	r3, [r5, #2]
    if(item && item_id == item_start_id) {
 8007a0c:	b114      	cbz	r4, 8007a14 <find_track_end+0x230>
 8007a0e:	9b05      	ldr	r3, [sp, #20]
 8007a10:	4543      	cmp	r3, r8
 8007a12:	d003      	beq.n	8007a1c <find_track_end+0x238>
}
 8007a14:	9805      	ldr	r0, [sp, #20]
 8007a16:	b007      	add	sp, #28
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        item = cont->spec_attr->children[item_id];
 8007a1c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 8007a26:	78f1      	ldrb	r1, [r6, #3]
 8007a28:	aa05      	add	r2, sp, #20
 8007a2a:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8007a2e:	4648      	mov	r0, r9
 8007a30:	f7ff febd 	bl	80077ae <get_next_item>
        if(item) {
 8007a34:	2c00      	cmp	r4, #0
 8007a36:	d0ed      	beq.n	8007a14 <find_track_end+0x230>
            t->track_cross_size = get_cross_size(item);
 8007a38:	4620      	mov	r0, r4
 8007a3a:	47d0      	blx	sl
 8007a3c:	8028      	strh	r0, [r5, #0]
            t->track_main_size = get_main_size(item);
 8007a3e:	4620      	mov	r0, r4
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	4798      	blx	r3
 8007a44:	8068      	strh	r0, [r5, #2]
            t->item_cnt = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	60ab      	str	r3, [r5, #8]
 8007a4a:	e7e3      	b.n	8007a14 <find_track_end+0x230>
 8007a4c:	08004d33 	.word	0x08004d33
 8007a50:	08004d43 	.word	0x08004d43
 8007a54:	20001e2c 	.word	0x20001e2c
 8007a58:	00060001 	.word	0x00060001

08007a5c <children_repos>:
{
 8007a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	b093      	sub	sp, #76	; 0x4c
 8007a62:	9004      	str	r0, [sp, #16]
 8007a64:	4689      	mov	r9, r1
 8007a66:	920d      	str	r2, [sp, #52]	; 0x34
 8007a68:	9305      	str	r3, [sp, #20]
 8007a6a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8007a6e:	9308      	str	r3, [sp, #32]
 8007a70:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8007a74:	9309      	str	r3, [sp, #36]	; 0x24
 8007a76:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8007a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a7c:	9c20      	ldr	r4, [sp, #128]	; 0x80
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 8007a7e:	78cb      	ldrb	r3, [r1, #3]
 8007a80:	f013 0301 	ands.w	r3, r3, #1
 8007a84:	d00a      	beq.n	8007a9c <children_repos+0x40>
 8007a86:	4a81      	ldr	r2, [pc, #516]	; (8007c8c <children_repos+0x230>)
 8007a88:	920c      	str	r2, [sp, #48]	; 0x30
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 8007a8a:	b153      	cbz	r3, 8007aa2 <children_repos+0x46>
 8007a8c:	4a80      	ldr	r2, [pc, #512]	; (8007c90 <children_repos+0x234>)
 8007a8e:	9206      	str	r2, [sp, #24]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 8007a90:	b953      	cbnz	r3, 8007aa8 <children_repos+0x4c>
 8007a92:	4b7f      	ldr	r3, [pc, #508]	; (8007c90 <children_repos+0x234>)
 8007a94:	930b      	str	r3, [sp, #44]	; 0x2c
    bool grow_reiterate  = true;
 8007a96:	f04f 0c01 	mov.w	ip, #1
    while(grow_reiterate) {
 8007a9a:	e052      	b.n	8007b42 <children_repos+0xe6>
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 8007a9c:	4a7d      	ldr	r2, [pc, #500]	; (8007c94 <children_repos+0x238>)
 8007a9e:	920c      	str	r2, [sp, #48]	; 0x30
 8007aa0:	e7f3      	b.n	8007a8a <children_repos+0x2e>
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 8007aa2:	4a7d      	ldr	r2, [pc, #500]	; (8007c98 <children_repos+0x23c>)
 8007aa4:	9206      	str	r2, [sp, #24]
 8007aa6:	e7f3      	b.n	8007a90 <children_repos+0x34>
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 8007aa8:	4b7b      	ldr	r3, [pc, #492]	; (8007c98 <children_repos+0x23c>)
 8007aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aac:	e7f3      	b.n	8007a96 <children_repos+0x3a>
                grow_max_size -= t->grow_dsc[i].final_size;
 8007aae:	8900      	ldrh	r0, [r0, #8]
 8007ab0:	1a12      	subs	r2, r2, r0
 8007ab2:	b212      	sxth	r2, r2
        for(i = 0; i < t->grow_item_cnt; i++) {
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	6920      	ldr	r0, [r4, #16]
 8007ab8:	4298      	cmp	r0, r3
 8007aba:	d90c      	bls.n	8007ad6 <children_repos+0x7a>
            if(t->grow_dsc[i].clamped == 0) {
 8007abc:	68e0      	ldr	r0, [r4, #12]
 8007abe:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8007ac2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8007ac6:	7c05      	ldrb	r5, [r0, #16]
 8007ac8:	f015 0f01 	tst.w	r5, #1
 8007acc:	d1ef      	bne.n	8007aae <children_repos+0x52>
                grow_value_sum += t->grow_dsc[i].grow_value;
 8007ace:	68c0      	ldr	r0, [r0, #12]
 8007ad0:	4401      	add	r1, r0
 8007ad2:	b209      	sxth	r1, r1
 8007ad4:	e7ee      	b.n	8007ab4 <children_repos+0x58>
        grow_reiterate = false;
 8007ad6:	f04f 0e00 	mov.w	lr, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 8007ada:	4670      	mov	r0, lr
 8007adc:	e010      	b.n	8007b00 <children_repos+0xa4>
                    t->grow_dsc[i].clamped = 1;
 8007ade:	7c1d      	ldrb	r5, [r3, #16]
 8007ae0:	f045 0501 	orr.w	r5, r5, #1
 8007ae4:	741d      	strb	r5, [r3, #16]
                    grow_reiterate = true;
 8007ae6:	46e6      	mov	lr, ip
                t->grow_dsc[i].final_size = size_clamp;
 8007ae8:	68e3      	ldr	r3, [r4, #12]
 8007aea:	4433      	add	r3, r6
 8007aec:	811f      	strh	r7, [r3, #8]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 8007aee:	68e3      	ldr	r3, [r4, #12]
 8007af0:	4433      	add	r3, r6
 8007af2:	68dd      	ldr	r5, [r3, #12]
 8007af4:	1b49      	subs	r1, r1, r5
 8007af6:	b209      	sxth	r1, r1
                grow_max_size  -= t->grow_dsc[i].final_size;
 8007af8:	891b      	ldrh	r3, [r3, #8]
 8007afa:	1ad2      	subs	r2, r2, r3
 8007afc:	b212      	sxth	r2, r2
        for(i = 0; i < t->grow_item_cnt; i++) {
 8007afe:	3001      	adds	r0, #1
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	4283      	cmp	r3, r0
 8007b04:	d91c      	bls.n	8007b40 <children_repos+0xe4>
            if(t->grow_dsc[i].clamped == 0) {
 8007b06:	68e3      	ldr	r3, [r4, #12]
 8007b08:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8007b0c:	00ae      	lsls	r6, r5, #2
 8007b0e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007b12:	7c1d      	ldrb	r5, [r3, #16]
 8007b14:	f015 0f01 	tst.w	r5, #1
 8007b18:	d1f1      	bne.n	8007afe <children_repos+0xa2>
                grow_unit = grow_max_size / grow_value_sum;
 8007b1a:	fb92 f5f1 	sdiv	r5, r2, r1
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 8007b1e:	68df      	ldr	r7, [r3, #12]
 8007b20:	fb15 f507 	smulbb	r5, r5, r7
 8007b24:	b22d      	sxth	r5, r5
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 8007b26:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 8007b2a:	42af      	cmp	r7, r5
 8007b2c:	bfa8      	it	ge
 8007b2e:	462f      	movge	r7, r5
 8007b30:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8007b34:	4547      	cmp	r7, r8
 8007b36:	bfb8      	it	lt
 8007b38:	4647      	movlt	r7, r8
                if(size_clamp != size) {
 8007b3a:	42bd      	cmp	r5, r7
 8007b3c:	d1cf      	bne.n	8007ade <children_repos+0x82>
 8007b3e:	e7d3      	b.n	8007ae8 <children_repos+0x8c>
 8007b40:	46f4      	mov	ip, lr
    while(grow_reiterate) {
 8007b42:	f1bc 0f00 	cmp.w	ip, #0
 8007b46:	d006      	beq.n	8007b56 <children_repos+0xfa>
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 8007b48:	8862      	ldrh	r2, [r4, #2]
 8007b4a:	88a3      	ldrh	r3, [r4, #4]
 8007b4c:	1ad2      	subs	r2, r2, r3
 8007b4e:	b212      	sxth	r2, r2
        lv_coord_t grow_value_sum = 0;
 8007b50:	2100      	movs	r1, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 8007b52:	460b      	mov	r3, r1
 8007b54:	e7af      	b.n	8007ab6 <children_repos+0x5a>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8007b56:	f241 426a 	movw	r2, #5226	; 0x146a
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	9804      	ldr	r0, [sp, #16]
 8007b5e:	f7ff f8e3 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8007b62:	b2c5      	uxtb	r5, r0
 8007b64:	9507      	str	r5, [sp, #28]
    lv_coord_t main_pos = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_coord_t place_gap = 0;
 8007b6c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 8007b70:	ab11      	add	r3, sp, #68	; 0x44
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8007b7e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8007b82:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 8007b86:	f899 0000 	ldrb.w	r0, [r9]
 8007b8a:	f7ff fdbd 	bl	8007708 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 8007b8e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8007b92:	f013 0f01 	tst.w	r3, #1
 8007b96:	d001      	beq.n	8007b9c <children_repos+0x140>
 8007b98:	2d01      	cmp	r5, #1
 8007b9a:	d005      	beq.n	8007ba8 <children_repos+0x14c>
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 8007b9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b9e:	9804      	ldr	r0, [sp, #16]
 8007ba0:	f7ff f966 	bl	8006e70 <lv_obj_get_child>
 8007ba4:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 8007ba6:	e106      	b.n	8007db6 <children_repos+0x35a>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 8007ba8:	9804      	ldr	r0, [sp, #16]
 8007baa:	f7fd f8d2 	bl	8004d52 <lv_obj_get_content_width>
 8007bae:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8007bb2:	fa13 f380 	uxtah	r3, r3, r0
 8007bb6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8007bba:	e7ef      	b.n	8007b9c <children_repos+0x140>
            item = get_next_item(cont, f->rev, &item_first_id);
 8007bbc:	f899 1003 	ldrb.w	r1, [r9, #3]
 8007bc0:	aa0d      	add	r2, sp, #52	; 0x34
 8007bc2:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8007bc6:	9804      	ldr	r0, [sp, #16]
 8007bc8:	f7ff fdf1 	bl	80077ae <get_next_item>
 8007bcc:	4605      	mov	r5, r0
            continue;
 8007bce:	e0f2      	b.n	8007db6 <children_repos+0x35a>
                    s = t->grow_dsc[i].final_size;
 8007bd0:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
                    break;
 8007bd4:	e00f      	b.n	8007bf6 <children_repos+0x19a>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6922      	ldr	r2, [r4, #16]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d90a      	bls.n	8007bf4 <children_repos+0x198>
                if(t->grow_dsc[i].item == item) {
 8007bde:	68e2      	ldr	r2, [r4, #12]
 8007be0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007be4:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8007be8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007bec:	42aa      	cmp	r2, r5
 8007bee:	d0ef      	beq.n	8007bd0 <children_repos+0x174>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	e7f1      	b.n	8007bd8 <children_repos+0x17c>
            lv_coord_t s = 0;
 8007bf4:	2700      	movs	r7, #0
            if(f->row) item->w_layout = 1;
 8007bf6:	f899 3003 	ldrb.w	r3, [r9, #3]
 8007bfa:	f013 0f01 	tst.w	r3, #1
 8007bfe:	d034      	beq.n	8007c6a <children_repos+0x20e>
 8007c00:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8007c04:	f043 0304 	orr.w	r3, r3, #4
 8007c08:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 8007c0c:	f105 0614 	add.w	r6, r5, #20
 8007c10:	4630      	mov	r0, r6
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	4798      	blx	r3
 8007c16:	42b8      	cmp	r0, r7
 8007c18:	f000 80f0 	beq.w	8007dfc <children_repos+0x3a0>
                lv_obj_invalidate(item);
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7fd fb99 	bl	8005354 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8007c22:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8007c26:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    dest->y1 = src->y1;
 8007c2a:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8007c2e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    dest->x2 = src->x2;
 8007c32:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8007c36:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    dest->y2 = src->y2;
 8007c3a:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8007c3e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                area_set_main_size(&item->coords, s);
 8007c42:	4639      	mov	r1, r7
 8007c44:	4630      	mov	r0, r6
 8007c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c48:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8007c4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8007c4c:	2129      	movs	r1, #41	; 0x29
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f7fc ff6c 	bl	8004b2c <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7ff f8e1 	bl	8006e1c <lv_obj_get_parent>
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	2122      	movs	r1, #34	; 0x22
 8007c5e:	f7fc ff65 	bl	8004b2c <lv_event_send>
                lv_obj_invalidate(item);
 8007c62:	4628      	mov	r0, r5
 8007c64:	f7fd fb76 	bl	8005354 <lv_obj_invalidate>
 8007c68:	e0c8      	b.n	8007dfc <children_repos+0x3a0>
            else item->h_layout = 1;
 8007c6a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8007c6e:	f043 0302 	orr.w	r3, r3, #2
 8007c72:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 8007c76:	e7c9      	b.n	8007c0c <children_repos+0x1b0>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 8007c78:	8826      	ldrh	r6, [r4, #0]
 8007c7a:	f105 0014 	add.w	r0, r5, #20
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c80:	4798      	blx	r3
 8007c82:	b280      	uxth	r0, r0
 8007c84:	1a36      	subs	r6, r6, r0
 8007c86:	b233      	sxth	r3, r6
 8007c88:	9303      	str	r3, [sp, #12]
                break;
 8007c8a:	e009      	b.n	8007ca0 <children_repos+0x244>
 8007c8c:	0800959d 	.word	0x0800959d
 8007c90:	080076e9 	.word	0x080076e9
 8007c94:	080095a9 	.word	0x080095a9
 8007c98:	080076f9 	.word	0x080076f9
        switch(f->cross_place) {
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9303      	str	r3, [sp, #12]
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8007ca0:	f899 3003 	ldrb.w	r3, [r9, #3]
 8007ca4:	f013 0f01 	tst.w	r3, #1
 8007ca8:	d003      	beq.n	8007cb2 <children_repos+0x256>
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	f000 80bd 	beq.w	8007e2c <children_repos+0x3d0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8007cb2:	f243 020c 	movw	r2, #12300	; 0x300c
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f7ff f835 	bl	8006d28 <lv_obj_get_style_prop>
 8007cbe:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 8007cc0:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8007cc4:	f243 020d 	movw	r2, #12301	; 0x300d
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f7ff f82c 	bl	8006d28 <lv_obj_get_style_prop>
 8007cd0:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8007cd2:	fa0f fa80 	sxth.w	sl, r0
        lv_coord_t w = lv_obj_get_width(item);
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7fd f82b 	bl	8004d32 <lv_obj_get_width>
 8007cdc:	4680      	mov	r8, r0
        lv_coord_t h = lv_obj_get_height(item);
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7fd f82f 	bl	8004d42 <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8007ce4:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 8007ce8:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8007cec:	f000 80a9 	beq.w	8007e42 <children_repos+0x3e6>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8007cf0:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 8007cf4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8007cf8:	f000 80ba 	beq.w	8007e70 <children_repos+0x414>
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 8007cfc:	8aae      	ldrh	r6, [r5, #20]
 8007cfe:	9b08      	ldr	r3, [sp, #32]
 8007d00:	1b9e      	subs	r6, r3, r6
 8007d02:	fa1b f686 	uxtah	r6, fp, r6
 8007d06:	b2b6      	uxth	r6, r6
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 8007d08:	8aea      	ldrh	r2, [r5, #22]
 8007d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0c:	1a9a      	subs	r2, r3, r2
 8007d0e:	fa1a f282 	uxtah	r2, sl, r2
 8007d12:	b292      	uxth	r2, r2
        diff_x += f->row ? main_pos : cross_pos;
 8007d14:	f899 3003 	ldrb.w	r3, [r9, #3]
 8007d18:	f013 0301 	ands.w	r3, r3, #1
 8007d1c:	f000 80bf 	beq.w	8007e9e <children_repos+0x442>
 8007d20:	f8bd b046 	ldrh.w	fp, [sp, #70]	; 0x46
 8007d24:	445e      	add	r6, fp
 8007d26:	fa1f f886 	uxth.w	r8, r6
 8007d2a:	b236      	sxth	r6, r6
        diff_y += f->row ? cross_pos : main_pos;
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80b9 	beq.w	8007ea4 <children_repos+0x448>
 8007d32:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8007d36:	4452      	add	r2, sl
 8007d38:	fa1f fa82 	uxth.w	sl, r2
 8007d3c:	b217      	sxth	r7, r2
        if(diff_x || diff_y) {
 8007d3e:	b906      	cbnz	r6, 8007d42 <children_repos+0x2e6>
 8007d40:	b1cf      	cbz	r7, 8007d76 <children_repos+0x31a>
            lv_obj_invalidate(item);
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7fd fb06 	bl	8005354 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 8007d48:	8aab      	ldrh	r3, [r5, #20]
 8007d4a:	4443      	add	r3, r8
 8007d4c:	82ab      	strh	r3, [r5, #20]
            item->coords.x2 += diff_x;
 8007d4e:	8b2b      	ldrh	r3, [r5, #24]
 8007d50:	4498      	add	r8, r3
 8007d52:	f8a5 8018 	strh.w	r8, [r5, #24]
            item->coords.y1 += diff_y;
 8007d56:	8aeb      	ldrh	r3, [r5, #22]
 8007d58:	4453      	add	r3, sl
 8007d5a:	82eb      	strh	r3, [r5, #22]
            item->coords.y2 += diff_y;
 8007d5c:	8b6b      	ldrh	r3, [r5, #26]
 8007d5e:	449a      	add	sl, r3
 8007d60:	f8a5 a01a 	strh.w	sl, [r5, #26]
            lv_obj_invalidate(item);
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7fd faf5 	bl	8005354 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, true);
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	f7fd fa1f 	bl	80051b4 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 8007d76:	f899 3003 	ldrb.w	r3, [r9, #3]
 8007d7a:	f013 0f01 	tst.w	r3, #1
 8007d7e:	d003      	beq.n	8007d88 <children_repos+0x32c>
 8007d80:	9b07      	ldr	r3, [sp, #28]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	f000 8091 	beq.w	8007eaa <children_repos+0x44e>
 8007d88:	f105 0014 	add.w	r0, r5, #20
 8007d8c:	9b06      	ldr	r3, [sp, #24]
 8007d8e:	4798      	blx	r3
 8007d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d92:	4418      	add	r0, r3
 8007d94:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8007d98:	4403      	add	r3, r0
 8007d9a:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8007d9e:	4413      	add	r3, r2
 8007da0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        item = get_next_item(cont, f->rev, &item_first_id);
 8007da4:	f899 1003 	ldrb.w	r1, [r9, #3]
 8007da8:	aa0d      	add	r2, sp, #52	; 0x34
 8007daa:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8007dae:	9804      	ldr	r0, [sp, #16]
 8007db0:	f7ff fcfd 	bl	80077ae <get_next_item>
 8007db4:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 8007db6:	2d00      	cmp	r5, #0
 8007db8:	f000 8082 	beq.w	8007ec0 <children_repos+0x464>
 8007dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dbe:	9a05      	ldr	r2, [sp, #20]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d07d      	beq.n	8007ec0 <children_repos+0x464>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8007dc4:	4940      	ldr	r1, [pc, #256]	; (8007ec8 <children_repos+0x46c>)
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7fc ff39 	bl	8004c3e <lv_obj_has_flag_any>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	f47f aef5 	bne.w	8007bbc <children_repos+0x160>
 8007dd2:	4b3e      	ldr	r3, [pc, #248]	; (8007ecc <children_repos+0x470>)
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f7fe ffa5 	bl	8006d28 <lv_obj_get_style_prop>
        if(grow_size) {
 8007dde:	f010 0fff 	tst.w	r0, #255	; 0xff
 8007de2:	f47f aef8 	bne.w	8007bd6 <children_repos+0x17a>
            item->w_layout = 0;
 8007de6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8007dea:	f36f 0382 	bfc	r3, #2, #1
 8007dee:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            item->h_layout = 0;
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f36f 0341 	bfc	r3, #1, #1
 8007df8:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
        switch(f->cross_place) {
 8007dfc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	f43f af39 	beq.w	8007c78 <children_repos+0x21c>
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	f47f af48 	bne.w	8007c9c <children_repos+0x240>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 8007e0c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8007e10:	3001      	adds	r0, #1
 8007e12:	f020 0601 	bic.w	r6, r0, #1
 8007e16:	f105 0014 	add.w	r0, r5, #20
 8007e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e1c:	4798      	blx	r3
 8007e1e:	1a30      	subs	r0, r6, r0
 8007e20:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007e24:	f340 034f 	sbfx	r3, r0, #1, #16
 8007e28:	9303      	str	r3, [sp, #12]
                break;
 8007e2a:	e739      	b.n	8007ca0 <children_repos+0x244>
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8007e2c:	f105 0014 	add.w	r0, r5, #20
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	4798      	blx	r3
 8007e34:	b282      	uxth	r2, r0
 8007e36:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8007e3a:	1a9b      	subs	r3, r3, r2
 8007e3c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8007e40:	e737      	b.n	8007cb2 <children_repos+0x256>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8007e42:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 8007e46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e4a:	f73f af51 	bgt.w	8007cf0 <children_repos+0x294>
 8007e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e52:	dd01      	ble.n	8007e58 <children_repos+0x3fc>
 8007e54:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007e58:	fb03 f808 	mul.w	r8, r3, r8
 8007e5c:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <children_repos+0x474>)
 8007e5e:	fb83 3b08 	smull	r3, fp, r3, r8
 8007e62:	ea4f 78e8 	mov.w	r8, r8, asr #31
 8007e66:	ebc8 1b6b 	rsb	fp, r8, fp, asr #5
 8007e6a:	fa0f fb8b 	sxth.w	fp, fp
 8007e6e:	e73f      	b.n	8007cf0 <children_repos+0x294>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8007e70:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 8007e74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e78:	f73f af40 	bgt.w	8007cfc <children_repos+0x2a0>
 8007e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e80:	dd01      	ble.n	8007e86 <children_repos+0x42a>
 8007e82:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8007e86:	fb00 f303 	mul.w	r3, r0, r3
 8007e8a:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <children_repos+0x474>)
 8007e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8007e90:	ea4f 7ae3 	mov.w	sl, r3, asr #31
 8007e94:	ebca 1a62 	rsb	sl, sl, r2, asr #5
 8007e98:	fa0f fa8a 	sxth.w	sl, sl
 8007e9c:	e72e      	b.n	8007cfc <children_repos+0x2a0>
        diff_x += f->row ? main_pos : cross_pos;
 8007e9e:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8007ea2:	e73f      	b.n	8007d24 <children_repos+0x2c8>
        diff_y += f->row ? cross_pos : main_pos;
 8007ea4:	f8bd a046 	ldrh.w	sl, [sp, #70]	; 0x46
 8007ea8:	e745      	b.n	8007d36 <children_repos+0x2da>
        else main_pos -= item_gap + place_gap;
 8007eaa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8007eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb0:	4413      	add	r3, r2
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8007ebe:	e771      	b.n	8007da4 <children_repos+0x348>
}
 8007ec0:	b013      	add	sp, #76	; 0x4c
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	bf00      	nop
 8007ec8:	00060001 	.word	0x00060001
 8007ecc:	20001e2c 	.word	0x20001e2c
 8007ed0:	51eb851f 	.word	0x51eb851f

08007ed4 <flex_update>:
{
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	b095      	sub	sp, #84	; 0x54
 8007eda:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 8007edc:	4bb7      	ldr	r3, [pc, #732]	; (80081bc <flex_update+0x2e8>)
 8007ede:	881a      	ldrh	r2, [r3, #0]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	f7fe ff21 	bl	8006d28 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 8007ee6:	f010 0f01 	tst.w	r0, #1
 8007eea:	bf0c      	ite	eq
 8007eec:	2201      	moveq	r2, #1
 8007eee:	2200      	movne	r2, #0
 8007ef0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8007ef4:	f362 0300 	bfi	r3, r2, #0, #1
 8007ef8:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    f.wrap = flow & _LV_FLEX_WRAP ? 1 : 0;
 8007efc:	f3c0 0280 	ubfx	r2, r0, #2, #1
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f362 0341 	bfi	r3, r2, #1, #1
 8007f06:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    f.rev = flow & _LV_FLEX_REVERSE ? 1 : 0;
 8007f0a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f360 0382 	bfi	r3, r0, #2, #1
 8007f14:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 8007f18:	4ba9      	ldr	r3, [pc, #676]	; (80081c0 <flex_update+0x2ec>)
 8007f1a:	881a      	ldrh	r2, [r3, #0]
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7fe ff02 	bl	8006d28 <lv_obj_get_style_prop>
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 8007f24:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 8007f28:	4ba6      	ldr	r3, [pc, #664]	; (80081c4 <flex_update+0x2f0>)
 8007f2a:	881a      	ldrh	r2, [r3, #0]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7fe fefa 	bl	8006d28 <lv_obj_get_style_prop>
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 8007f34:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 8007f38:	4ba3      	ldr	r3, [pc, #652]	; (80081c8 <flex_update+0x2f4>)
 8007f3a:	881a      	ldrh	r2, [r3, #0]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f7fe fef2 	bl	8006d28 <lv_obj_get_style_prop>
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 8007f44:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8007f48:	f241 426a 	movw	r2, #5226	; 0x146a
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7fe feea 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8007f54:	fa5f f880 	uxtb.w	r8, r0
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8007f58:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8007f5c:	f013 0f01 	tst.w	r3, #1
 8007f60:	f040 808d 	bne.w	800807e <flex_update+0x1aa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8007f64:	f641 0215 	movw	r2, #6165	; 0x1815
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f7fe fedc 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007f70:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8007f74:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8007f78:	f013 0f01 	tst.w	r3, #1
 8007f7c:	f000 8088 	beq.w	8008090 <flex_update+0x1bc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8007f80:	f641 0215 	movw	r2, #6165	; 0x1815
 8007f84:	2100      	movs	r1, #0
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7fe fece 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007f8c:	b206      	sxth	r6, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 8007f8e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8007f92:	f013 0f01 	tst.w	r3, #1
 8007f96:	f000 8083 	beq.w	80080a0 <flex_update+0x1cc>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f7fc fed9 	bl	8004d52 <lv_obj_get_content_width>
 8007fa0:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007fa2:	f241 0232 	movw	r2, #4146	; 0x1032
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7fe febd 	bl	8006d28 <lv_obj_get_style_prop>
 8007fae:	4681      	mov	r9, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 8007fb0:	8ae5      	ldrh	r5, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007fb2:	f641 0210 	movw	r2, #6160	; 0x1810
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f7fe feb5 	bl	8006d28 <lv_obj_get_style_prop>
 8007fbe:	fa15 f580 	uxtah	r5, r5, r0
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 8007fc2:	fa1f f989 	uxth.w	r9, r9
 8007fc6:	fa19 f585 	uxtah	r5, r9, r5
 8007fca:	b2ad      	uxth	r5, r5
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f7fd feee 	bl	8005dae <lv_obj_get_scroll_y>
 8007fd2:	b280      	uxth	r0, r0
 8007fd4:	1a2d      	subs	r5, r5, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 8007fd6:	f8ad 504a 	strh.w	r5, [sp, #74]	; 0x4a
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 8007fda:	8aa5      	ldrh	r5, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007fdc:	f641 0212 	movw	r2, #6162	; 0x1812
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7fe fea0 	bl	8006d28 <lv_obj_get_style_prop>
 8007fe8:	fa15 f580 	uxtah	r5, r5, r0
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 8007fec:	fa19 f585 	uxtah	r5, r9, r5
 8007ff0:	b2ad      	uxth	r5, r5
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7fd fec6 	bl	8005d84 <lv_obj_get_scroll_x>
 8007ff8:	b280      	uxth	r0, r0
 8007ffa:	1a2d      	subs	r5, r5, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 8007ffc:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
    lv_flex_align_t track_cross_place = f.track_place;
 8008000:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8008004:	9307      	str	r3, [sp, #28]
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 8008006:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800800a:	f013 0f01 	tst.w	r3, #1
 800800e:	d04c      	beq.n	80080aa <flex_update+0x1d6>
 8008010:	f10d 094a 	add.w	r9, sp, #74	; 0x4a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008014:	f241 0201 	movw	r2, #4097	; 0x1001
 8008018:	2100      	movs	r1, #0
 800801a:	4620      	mov	r0, r4
 800801c:	f7fe fe84 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008020:	b203      	sxth	r3, r0
 8008022:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008024:	f241 0204 	movw	r2, #4100	; 0x1004
 8008028:	2100      	movs	r1, #0
 800802a:	4620      	mov	r0, r4
 800802c:	f7fe fe7c 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008030:	b203      	sxth	r3, r0
 8008032:	4618      	mov	r0, r3
 8008034:	9309      	str	r3, [sp, #36]	; 0x24
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 8008036:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800803a:	f013 0201 	ands.w	r2, r3, #1
 800803e:	d003      	beq.n	8008048 <flex_update+0x174>
 8008040:	f242 71d1 	movw	r1, #10193	; 0x27d1
 8008044:	4288      	cmp	r0, r1
 8008046:	d033      	beq.n	80080b0 <flex_update+0x1dc>
 8008048:	b922      	cbnz	r2, 8008054 <flex_update+0x180>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 800804a:	f242 71d1 	movw	r1, #10193	; 0x27d1
 800804e:	9808      	ldr	r0, [sp, #32]
 8008050:	4288      	cmp	r0, r1
 8008052:	d035      	beq.n	80080c0 <flex_update+0x1ec>
    if(rtl && !f.row) {
 8008054:	f1b8 0f01 	cmp.w	r8, #1
 8008058:	d03a      	beq.n	80080d0 <flex_update+0x1fc>
    lv_coord_t gap = 0;
 800805a:	2200      	movs	r2, #0
 800805c:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 8008060:	9a07      	ldr	r2, [sp, #28]
 8008062:	2a00      	cmp	r2, #0
 8008064:	f000 8097 	beq.w	8008196 <flex_update+0x2c2>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8008068:	f013 0f04 	tst.w	r3, #4
 800806c:	f000 808c 	beq.w	8008188 <flex_update+0x2b4>
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	3a01      	subs	r2, #1
 8008076:	f04f 0b00 	mov.w	fp, #0
 800807a:	465d      	mov	r5, fp
 800807c:	e04f      	b.n	800811e <flex_update+0x24a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800807e:	f641 0214 	movw	r2, #6164	; 0x1814
 8008082:	2100      	movs	r1, #0
 8008084:	4620      	mov	r0, r4
 8008086:	f7fe fe4f 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800808a:	fa0f fa80 	sxth.w	sl, r0
 800808e:	e771      	b.n	8007f74 <flex_update+0xa0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8008090:	f641 0214 	movw	r2, #6164	; 0x1814
 8008094:	2100      	movs	r1, #0
 8008096:	4620      	mov	r0, r4
 8008098:	f7fe fe46 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800809c:	b206      	sxth	r6, r0
 800809e:	e776      	b.n	8007f8e <flex_update+0xba>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7fc fe79 	bl	8004d98 <lv_obj_get_content_height>
 80080a6:	4607      	mov	r7, r0
 80080a8:	e77b      	b.n	8007fa2 <flex_update+0xce>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 80080aa:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 80080ae:	e7b1      	b.n	8008014 <flex_update+0x140>
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 80080b0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80080b4:	f011 0f02 	tst.w	r1, #2
 80080b8:	d1c6      	bne.n	8008048 <flex_update+0x174>
        track_cross_place = LV_FLEX_ALIGN_START;
 80080ba:	2100      	movs	r1, #0
 80080bc:	9107      	str	r1, [sp, #28]
 80080be:	e7c9      	b.n	8008054 <flex_update+0x180>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 80080c0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80080c4:	f011 0f04 	tst.w	r1, #4
 80080c8:	d1c4      	bne.n	8008054 <flex_update+0x180>
        track_cross_place = LV_FLEX_ALIGN_START;
 80080ca:	2100      	movs	r1, #0
 80080cc:	9107      	str	r1, [sp, #28]
 80080ce:	e7c1      	b.n	8008054 <flex_update+0x180>
    if(rtl && !f.row) {
 80080d0:	2a00      	cmp	r2, #0
 80080d2:	d1c2      	bne.n	800805a <flex_update+0x186>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 80080d4:	9a07      	ldr	r2, [sp, #28]
 80080d6:	b922      	cbnz	r2, 80080e2 <flex_update+0x20e>
    lv_coord_t gap = 0;
 80080d8:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 80080dc:	f8cd 801c 	str.w	r8, [sp, #28]
 80080e0:	e7c2      	b.n	8008068 <flex_update+0x194>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	2a01      	cmp	r2, #1
 80080e6:	d1b8      	bne.n	800805a <flex_update+0x186>
    lv_coord_t gap = 0;
 80080e8:	2500      	movs	r5, #0
 80080ea:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 80080ee:	e036      	b.n	800815e <flex_update+0x28a>
            t.grow_dsc_calc = 0;
 80080f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80080f4:	f36f 0300 	bfc	r3, #0, #1
 80080f8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 80080fc:	ab0b      	add	r3, sp, #44	; 0x2c
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	9600      	str	r6, [sp, #0]
 8008102:	463b      	mov	r3, r7
 8008104:	a913      	add	r1, sp, #76	; 0x4c
 8008106:	4620      	mov	r0, r4
 8008108:	f7ff fb6c 	bl	80077e4 <find_track_end>
 800810c:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800810e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8008112:	4453      	add	r3, sl
 8008114:	fa15 f583 	uxtah	r5, r5, r3
 8008118:	b22d      	sxth	r5, r5
            track_cnt++;
 800811a:	f10b 0b01 	add.w	fp, fp, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4293      	cmp	r3, r2
 8008124:	dd01      	ble.n	800812a <flex_update+0x256>
 8008126:	2a00      	cmp	r2, #0
 8008128:	dae2      	bge.n	80080f0 <flex_update+0x21c>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800812a:	f1bb 0f00 	cmp.w	fp, #0
 800812e:	d002      	beq.n	8008136 <flex_update+0x262>
 8008130:	eba5 050a 	sub.w	r5, r5, sl
 8008134:	b22d      	sxth	r5, r5
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 8008136:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800813a:	f013 0f01 	tst.w	r3, #1
 800813e:	d025      	beq.n	800818c <flex_update+0x2b8>
 8008140:	4620      	mov	r0, r4
 8008142:	f7fc fe29 	bl	8004d98 <lv_obj_get_content_height>
 8008146:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 8008148:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f8cd 9000 	str.w	r9, [sp]
 8008152:	fa0f f38b 	sxth.w	r3, fp
 8008156:	462a      	mov	r2, r5
 8008158:	9807      	ldr	r0, [sp, #28]
 800815a:	f7ff fad5 	bl	8007708 <place_content>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800815e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008162:	f013 0f04 	tst.w	r3, #4
 8008166:	d018      	beq.n	800819a <flex_update+0x2c6>
 8008168:	68a2      	ldr	r2, [r4, #8]
 800816a:	6852      	ldr	r2, [r2, #4]
 800816c:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
    if(rtl && !f.row) {
 8008170:	f1b8 0f01 	cmp.w	r8, #1
 8008174:	d138      	bne.n	80081e8 <flex_update+0x314>
 8008176:	f013 0f01 	tst.w	r3, #1
 800817a:	d135      	bne.n	80081e8 <flex_update+0x314>
        *cross_pos += total_track_cross_size;
 800817c:	f8b9 3000 	ldrh.w	r3, [r9]
 8008180:	441d      	add	r5, r3
 8008182:	f8a9 5000 	strh.w	r5, [r9]
 8008186:	e02f      	b.n	80081e8 <flex_update+0x314>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8008188:	2200      	movs	r2, #0
 800818a:	e774      	b.n	8008076 <flex_update+0x1a2>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800818c:	4620      	mov	r0, r4
 800818e:	f7fc fde0 	bl	8004d52 <lv_obj_get_content_width>
 8008192:	4601      	mov	r1, r0
 8008194:	e7d8      	b.n	8008148 <flex_update+0x274>
    lv_coord_t total_track_cross_size = 0;
 8008196:	2500      	movs	r5, #0
 8008198:	e7e1      	b.n	800815e <flex_update+0x28a>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800819a:	f04f 0b00 	mov.w	fp, #0
 800819e:	e7e7      	b.n	8008170 <flex_update+0x29c>
        if(rtl && !f.row) {
 80081a0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80081a4:	f013 0f01 	tst.w	r3, #1
 80081a8:	d138      	bne.n	800821c <flex_update+0x348>
            *cross_pos -= t.track_cross_size;
 80081aa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80081ae:	f8b9 3000 	ldrh.w	r3, [r9]
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	f8a9 3000 	strh.w	r3, [r9]
 80081b8:	e030      	b.n	800821c <flex_update+0x348>
 80081ba:	bf00      	nop
 80081bc:	20001e2a 	.word	0x20001e2a
 80081c0:	20001e2e 	.word	0x20001e2e
 80081c4:	20001e28 	.word	0x20001e28
 80081c8:	20001e30 	.word	0x20001e30
            *cross_pos += t.track_cross_size + gap + track_gap;
 80081cc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80081d0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 80081d4:	441a      	add	r2, r3
 80081d6:	fa1a f282 	uxtah	r2, sl, r2
 80081da:	f8b9 3000 	ldrh.w	r3, [r9]
 80081de:	fa13 f282 	uxtah	r2, r3, r2
 80081e2:	f8a9 2000 	strh.w	r2, [r9]
        track_first_item = next_track_first_item;
 80081e6:	46ab      	mov	fp, r5
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	455b      	cmp	r3, fp
 80081ee:	dd3c      	ble.n	800826a <flex_update+0x396>
 80081f0:	f1bb 0f00 	cmp.w	fp, #0
 80081f4:	db39      	blt.n	800826a <flex_update+0x396>
        t.grow_dsc_calc = 1;
 80081f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8008202:	ab0b      	add	r3, sp, #44	; 0x2c
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	9600      	str	r6, [sp, #0]
 8008208:	463b      	mov	r3, r7
 800820a:	465a      	mov	r2, fp
 800820c:	a913      	add	r1, sp, #76	; 0x4c
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff fae8 	bl	80077e4 <find_track_end>
 8008214:	4605      	mov	r5, r0
        if(rtl && !f.row) {
 8008216:	f1b8 0f01 	cmp.w	r8, #1
 800821a:	d0c1      	beq.n	80081a0 <flex_update+0x2cc>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800821c:	ab0b      	add	r3, sp, #44	; 0x2c
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	9603      	str	r6, [sp, #12]
 8008222:	9702      	str	r7, [sp, #8]
 8008224:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	462b      	mov	r3, r5
 8008232:	465a      	mov	r2, fp
 8008234:	a913      	add	r1, sp, #76	; 0x4c
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff fc10 	bl	8007a5c <children_repos>
        lv_mem_buf_release(t.grow_dsc);
 800823c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800823e:	f001 fdbf 	bl	8009dc0 <lv_mem_buf_release>
        t.grow_dsc = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	930e      	str	r3, [sp, #56]	; 0x38
        if(rtl && !f.row) {
 8008246:	f1b8 0f01 	cmp.w	r8, #1
 800824a:	d1bf      	bne.n	80081cc <flex_update+0x2f8>
 800824c:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008250:	f013 0f01 	tst.w	r3, #1
 8008254:	d1ba      	bne.n	80081cc <flex_update+0x2f8>
            *cross_pos -= gap + track_gap;
 8008256:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800825a:	4453      	add	r3, sl
 800825c:	b29b      	uxth	r3, r3
 800825e:	f8b9 2000 	ldrh.w	r2, [r9]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	f8a9 3000 	strh.w	r3, [r9]
 8008268:	e7bd      	b.n	80081e6 <flex_update+0x312>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800826a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800826e:	9a08      	ldr	r2, [sp, #32]
 8008270:	429a      	cmp	r2, r3
 8008272:	d00a      	beq.n	800828a <flex_update+0x3b6>
 8008274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008276:	429a      	cmp	r2, r3
 8008278:	d007      	beq.n	800828a <flex_update+0x3b6>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800827a:	2200      	movs	r2, #0
 800827c:	212b      	movs	r1, #43	; 0x2b
 800827e:	4620      	mov	r0, r4
 8008280:	f7fc fc54 	bl	8004b2c <lv_event_send>
}
 8008284:	b015      	add	sp, #84	; 0x54
 8008286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
 800828a:	4620      	mov	r0, r4
 800828c:	f7fd fb18 	bl	80058c0 <lv_obj_refr_size>
 8008290:	e7f3      	b.n	800827a <flex_update+0x3a6>
 8008292:	bf00      	nop

08008294 <lv_flex_init>:
{
 8008294:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 8008296:	2100      	movs	r1, #0
 8008298:	480d      	ldr	r0, [pc, #52]	; (80082d0 <lv_flex_init+0x3c>)
 800829a:	f7fc fd1b 	bl	8004cd4 <lv_layout_register>
 800829e:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <lv_flex_init+0x40>)
 80082a0:	6018      	str	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop();
 80082a2:	f001 ff4f 	bl	800a144 <lv_style_register_prop>
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <lv_flex_init+0x44>)
 80082a8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80082aa:	f001 ff4b 	bl	800a144 <lv_style_register_prop>
 80082ae:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <lv_flex_init+0x48>)
 80082b4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80082b6:	f001 ff45 	bl	800a144 <lv_style_register_prop>
 80082ba:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80082be:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <lv_flex_init+0x4c>)
 80082c0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80082c2:	f001 ff3f 	bl	800a144 <lv_style_register_prop>
 80082c6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80082ca:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <lv_flex_init+0x50>)
 80082cc:	8018      	strh	r0, [r3, #0]
}
 80082ce:	bd08      	pop	{r3, pc}
 80082d0:	08007ed5 	.word	0x08007ed5
 80082d4:	20001e24 	.word	0x20001e24
 80082d8:	20001e2a 	.word	0x20001e2a
 80082dc:	20001e2e 	.word	0x20001e2e
 80082e0:	20001e28 	.word	0x20001e28
 80082e4:	20001e30 	.word	0x20001e30

080082e8 <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 80082e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ec:	4684      	mov	ip, r0
 80082ee:	9d06      	ldr	r5, [sp, #24]
 80082f0:	9e07      	ldr	r6, [sp, #28]
 80082f2:	9c08      	ldr	r4, [sp, #32]
 80082f4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 80082f8:	b119      	cbz	r1, 8008302 <grid_align+0x1a>
        pos_array[0] = 0;
 80082fa:	2200      	movs	r2, #0
 80082fc:	8022      	strh	r2, [r4, #0]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 80082fe:	2200      	movs	r2, #0
 8008300:	e06c      	b.n	80083dc <grid_align+0xf4>
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 8008302:	1f11      	subs	r1, r2, #4
 8008304:	b2c9      	uxtb	r1, r1
 8008306:	2902      	cmp	r1, #2
 8008308:	d802      	bhi.n	8008310 <grid_align+0x28>
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 800830a:	2d01      	cmp	r5, #1
 800830c:	d00c      	beq.n	8008328 <grid_align+0x40>
            gap = 0;
 800830e:	2300      	movs	r3, #0
        for(i = 0; i < track_num; i++) {
 8008310:	2000      	movs	r0, #0
    lv_coord_t grid_size = 0;
 8008312:	4601      	mov	r1, r0
        for(i = 0; i < track_num; i++) {
 8008314:	42a8      	cmp	r0, r5
 8008316:	d20a      	bcs.n	800832e <grid_align+0x46>
            grid_size += size_array[i] + gap;
 8008318:	f836 e010 	ldrh.w	lr, [r6, r0, lsl #1]
 800831c:	449e      	add	lr, r3
 800831e:	fa11 f18e 	uxtah	r1, r1, lr
 8008322:	b209      	sxth	r1, r1
        for(i = 0; i < track_num; i++) {
 8008324:	3001      	adds	r0, #1
 8008326:	e7f5      	b.n	8008314 <grid_align+0x2c>
            gap = 0;
 8008328:	2300      	movs	r3, #0
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 800832a:	2201      	movs	r2, #1
 800832c:	e7f0      	b.n	8008310 <grid_align+0x28>
        grid_size -= gap;
 800832e:	b289      	uxth	r1, r1
 8008330:	b298      	uxth	r0, r3
 8008332:	eba1 0e00 	sub.w	lr, r1, r0
 8008336:	fa0f fe8e 	sxth.w	lr, lr
        switch(align) {
 800833a:	2a06      	cmp	r2, #6
 800833c:	d8df      	bhi.n	80082fe <grid_align+0x16>
 800833e:	f20f 0808 	addw	r8, pc, #8
 8008342:	f858 f022 	ldr.w	pc, [r8, r2, lsl #2]
 8008346:	bf00      	nop
 8008348:	08008365 	.word	0x08008365
 800834c:	0800836b 	.word	0x0800836b
 8008350:	0800837b 	.word	0x0800837b
 8008354:	080082ff 	.word	0x080082ff
 8008358:	080083b5 	.word	0x080083b5
 800835c:	0800839b 	.word	0x0800839b
 8008360:	08008385 	.word	0x08008385
                pos_array[0] = 0;
 8008364:	2200      	movs	r2, #0
 8008366:	8022      	strh	r2, [r4, #0]
                break;
 8008368:	e7c9      	b.n	80082fe <grid_align+0x16>
                pos_array[0] = (cont_size - grid_size) / 2;
 800836a:	ebac 0e0e 	sub.w	lr, ip, lr
 800836e:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
 8008372:	ea4f 026e 	mov.w	r2, lr, asr #1
 8008376:	8022      	strh	r2, [r4, #0]
                break;
 8008378:	e7c1      	b.n	80082fe <grid_align+0x16>
                pos_array[0] = cont_size - grid_size;
 800837a:	1a41      	subs	r1, r0, r1
 800837c:	eb01 020c 	add.w	r2, r1, ip
 8008380:	8022      	strh	r2, [r4, #0]
                break;
 8008382:	e7bc      	b.n	80082fe <grid_align+0x16>
                pos_array[0] = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	8023      	strh	r3, [r4, #0]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 8008388:	1a43      	subs	r3, r0, r1
 800838a:	4463      	add	r3, ip
 800838c:	b21b      	sxth	r3, r3
 800838e:	1e6a      	subs	r2, r5, #1
 8008390:	b212      	sxth	r2, r2
 8008392:	fb93 f3f2 	sdiv	r3, r3, r2
 8008396:	b21b      	sxth	r3, r3
                break;
 8008398:	e7b1      	b.n	80082fe <grid_align+0x16>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800839a:	1a42      	subs	r2, r0, r1
 800839c:	4462      	add	r2, ip
 800839e:	b212      	sxth	r2, r2
 80083a0:	b22b      	sxth	r3, r5
 80083a2:	fb92 f2f3 	sdiv	r2, r2, r3
 80083a6:	b213      	sxth	r3, r2
                pos_array[0] = gap / 2;
 80083a8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80083ac:	441a      	add	r2, r3
 80083ae:	1052      	asrs	r2, r2, #1
 80083b0:	8022      	strh	r2, [r4, #0]
                break;
 80083b2:	e7a4      	b.n	80082fe <grid_align+0x16>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 80083b4:	1a43      	subs	r3, r0, r1
 80083b6:	4463      	add	r3, ip
 80083b8:	b21b      	sxth	r3, r3
 80083ba:	1c6a      	adds	r2, r5, #1
 80083bc:	b212      	sxth	r2, r2
 80083be:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c2:	b21b      	sxth	r3, r3
                pos_array[0] = gap;
 80083c4:	8023      	strh	r3, [r4, #0]
                break;
 80083c6:	e79a      	b.n	80082fe <grid_align+0x16>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 80083c8:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 80083cc:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
 80083d0:	4401      	add	r1, r0
 80083d2:	3201      	adds	r2, #1
 80083d4:	fa13 f181 	uxtah	r1, r3, r1
 80083d8:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
    for(i = 0; i < track_num - 1; i++) {
 80083dc:	1e69      	subs	r1, r5, #1
 80083de:	4291      	cmp	r1, r2
 80083e0:	d8f2      	bhi.n	80083c8 <grid_align+0xe0>
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 80083e2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80083e6:	3b01      	subs	r3, #1
 80083e8:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 80083ec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80083f0:	4418      	add	r0, r3
 80083f2:	b280      	uxth	r0, r0
 80083f4:	8823      	ldrh	r3, [r4, #0]
 80083f6:	1ac0      	subs	r0, r0, r3
 80083f8:	b200      	sxth	r0, r0

    if(reverse) {
 80083fa:	b90f      	cbnz	r7, 8008400 <grid_align+0x118>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(i = 0; i < track_num; i++) {
 8008400:	2200      	movs	r2, #0
 8008402:	42aa      	cmp	r2, r5
 8008404:	d2fa      	bcs.n	80083fc <grid_align+0x114>
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 8008406:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800840a:	ebac 0303 	sub.w	r3, ip, r3
 800840e:	b29b      	uxth	r3, r3
 8008410:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 8008414:	1a5b      	subs	r3, r3, r1
 8008416:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
        for(i = 0; i < track_num; i++) {
 800841a:	3201      	adds	r2, #1
 800841c:	e7f1      	b.n	8008402 <grid_align+0x11a>
 800841e:	bf00      	nop

08008420 <count_tracks>:

static uint32_t count_tracks(const lv_coord_t * templ)
{
 8008420:	4601      	mov	r1, r0
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8008422:	2000      	movs	r0, #0
 8008424:	e000      	b.n	8008428 <count_tracks+0x8>
 8008426:	3001      	adds	r0, #1
 8008428:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
 800842c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8008430:	429a      	cmp	r2, r3
 8008432:	d1f8      	bne.n	8008426 <count_tracks+0x6>

    return i;
}
 8008434:	4770      	bx	lr
	...

08008438 <item_repos>:
{
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b089      	sub	sp, #36	; 0x24
 800843e:	4604      	mov	r4, r0
 8008440:	460d      	mov	r5, r1
 8008442:	9201      	str	r2, [sp, #4]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 8008444:	49c2      	ldr	r1, [pc, #776]	; (8008750 <item_repos+0x318>)
 8008446:	f7fc fbfa 	bl	8004c3e <lv_obj_has_flag_any>
 800844a:	b110      	cbz	r0, 8008452 <item_repos+0x1a>
}
 800844c:	b009      	add	sp, #36	; 0x24
 800844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_column_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 8008452:	4bc0      	ldr	r3, [pc, #768]	; (8008754 <item_repos+0x31c>)
 8008454:	881a      	ldrh	r2, [r3, #0]
 8008456:	2100      	movs	r1, #0
 8008458:	4620      	mov	r0, r4
 800845a:	f7fe fc65 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_column_span(obj, 0);
 800845e:	b2c7      	uxtb	r7, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 8008460:	4bbd      	ldr	r3, [pc, #756]	; (8008758 <item_repos+0x320>)
 8008462:	881a      	ldrh	r2, [r3, #0]
 8008464:	2100      	movs	r1, #0
 8008466:	4620      	mov	r0, r4
 8008468:	f7fe fc5e 	bl	8006d28 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 800846c:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8008470:	d0ec      	beq.n	800844c <item_repos+0x14>
 8008472:	2f00      	cmp	r7, #0
 8008474:	d0ea      	beq.n	800844c <item_repos+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8008476:	4bb9      	ldr	r3, [pc, #740]	; (800875c <item_repos+0x324>)
 8008478:	881a      	ldrh	r2, [r3, #0]
 800847a:	2100      	movs	r1, #0
 800847c:	4620      	mov	r0, r4
 800847e:	f7fe fc53 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_column_pos(obj, 0);
 8008482:	fa5f fb80 	uxtb.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8008486:	4bb6      	ldr	r3, [pc, #728]	; (8008760 <item_repos+0x328>)
 8008488:	881a      	ldrh	r2, [r3, #0]
 800848a:	2100      	movs	r1, #0
 800848c:	4620      	mov	r0, r4
 800848e:	f7fe fc4b 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_row_pos(obj, 0);
 8008492:	fa5f fa80 	uxtb.w	sl, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 8008496:	4bb3      	ldr	r3, [pc, #716]	; (8008764 <item_repos+0x32c>)
 8008498:	881a      	ldrh	r2, [r3, #0]
 800849a:	2100      	movs	r1, #0
 800849c:	4620      	mov	r0, r4
 800849e:	f7fe fc43 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
 80084a2:	fa5f f880 	uxtb.w	r8, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 80084a6:	4bb0      	ldr	r3, [pc, #704]	; (8008768 <item_repos+0x330>)
 80084a8:	881a      	ldrh	r2, [r3, #0]
 80084aa:	2100      	movs	r1, #0
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7fe fc3b 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 80084b2:	fa5f f980 	uxtb.w	r9, r0
    lv_coord_t col_x1 = c->x[col_pos];
 80084b6:	682b      	ldr	r3, [r5, #0]
 80084b8:	f933 201b 	ldrsh.w	r2, [r3, fp, lsl #1]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80084bc:	445f      	add	r7, fp
 80084be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084c2:	440f      	add	r7, r1
 80084c4:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80084c8:	68a8      	ldr	r0, [r5, #8]
 80084ca:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
 80084ce:	4403      	add	r3, r0
 80084d0:	b29b      	uxth	r3, r3
    lv_coord_t col_w = col_x2 - col_x1;
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	9204      	str	r2, [sp, #16]
 80084d8:	b21b      	sxth	r3, r3
 80084da:	9302      	str	r3, [sp, #8]
    lv_coord_t row_y1 = c->y[row_pos];
 80084dc:	686b      	ldr	r3, [r5, #4]
 80084de:	f933 201a 	ldrsh.w	r2, [r3, sl, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80084e2:	4456      	add	r6, sl
 80084e4:	440e      	add	r6, r1
 80084e6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80084ea:	68e9      	ldr	r1, [r5, #12]
 80084ec:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
 80084f0:	440b      	add	r3, r1
 80084f2:	b29b      	uxth	r3, r3
    lv_coord_t row_h = row_y2 - row_y1;
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	9205      	str	r2, [sp, #20]
 80084fa:	b21b      	sxth	r3, r3
 80084fc:	9303      	str	r3, [sp, #12]
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80084fe:	f241 426a 	movw	r2, #5226	; 0x146a
 8008502:	2100      	movs	r1, #0
 8008504:	4620      	mov	r0, r4
 8008506:	f7fe fc0f 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800850a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800850c:	2801      	cmp	r0, #1
 800850e:	f000 80c3 	beq.w	8008698 <item_repos+0x260>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008512:	8b26      	ldrh	r6, [r4, #24]
 8008514:	8aa3      	ldrh	r3, [r4, #20]
 8008516:	1af6      	subs	r6, r6, r3
 8008518:	b2b6      	uxth	r6, r6
 800851a:	3601      	adds	r6, #1
 800851c:	b236      	sxth	r6, r6
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800851e:	8b67      	ldrh	r7, [r4, #26]
 8008520:	8ae3      	ldrh	r3, [r4, #22]
 8008522:	1aff      	subs	r7, r7, r3
 8008524:	b2bf      	uxth	r7, r7
 8008526:	3701      	adds	r7, #1
 8008528:	b23f      	sxth	r7, r7
    switch(col_align) {
 800852a:	f1b8 0f02 	cmp.w	r8, #2
 800852e:	f000 80dd 	beq.w	80086ec <item_repos+0x2b4>
 8008532:	f1b8 0f03 	cmp.w	r8, #3
 8008536:	f000 80bc 	beq.w	80086b2 <item_repos+0x27a>
 800853a:	f1b8 0f01 	cmp.w	r8, #1
 800853e:	f000 80c3 	beq.w	80086c8 <item_repos+0x290>
            x = c->x[col_pos];
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	f933 801b 	ldrsh.w	r8, [r3, fp, lsl #1]
            item->w_layout = 0;
 8008548:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800854c:	f36f 0382 	bfc	r3, #2, #1
 8008550:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    switch(row_align) {
 8008554:	f1b9 0f02 	cmp.w	r9, #2
 8008558:	f000 8108 	beq.w	800876c <item_repos+0x334>
 800855c:	f1b9 0f03 	cmp.w	r9, #3
 8008560:	f000 80da 	beq.w	8008718 <item_repos+0x2e0>
 8008564:	f1b9 0f01 	cmp.w	r9, #1
 8008568:	f000 80e1 	beq.w	800872e <item_repos+0x2f6>
            y = c->y[row_pos];
 800856c:	686b      	ldr	r3, [r5, #4]
 800856e:	f933 501a 	ldrsh.w	r5, [r3, sl, lsl #1]
            item->h_layout = 0;
 8008572:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008576:	f36f 0341 	bfc	r3, #1, #1
 800857a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 800857e:	4620      	mov	r0, r4
 8008580:	f7fc fbd7 	bl	8004d32 <lv_obj_get_width>
 8008584:	42b0      	cmp	r0, r6
 8008586:	f000 8104 	beq.w	8008792 <item_repos+0x35a>
    dest->x1 = src->x1;
 800858a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800858e:	f8ad 3018 	strh.w	r3, [sp, #24]
    dest->y1 = src->y1;
 8008592:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8008596:	f8ad 301a 	strh.w	r3, [sp, #26]
    dest->x2 = src->x2;
 800859a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800859e:	f8ad 301c 	strh.w	r3, [sp, #28]
    dest->y2 = src->y2;
 80085a2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80085a6:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_obj_invalidate(item);
 80085aa:	4620      	mov	r0, r4
 80085ac:	f7fc fed2 	bl	8005354 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 80085b0:	f104 0314 	add.w	r3, r4, #20
 80085b4:	4631      	mov	r1, r6
 80085b6:	461e      	mov	r6, r3
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 ffef 	bl	800959c <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 80085be:	4639      	mov	r1, r7
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 fff1 	bl	80095a8 <lv_area_set_height>
        lv_obj_invalidate(item);
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7fc fec4 	bl	8005354 <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 80085cc:	aa06      	add	r2, sp, #24
 80085ce:	2129      	movs	r1, #41	; 0x29
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7fc faab 	bl	8004b2c <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 80085d6:	4620      	mov	r0, r4
 80085d8:	f7fe fc20 	bl	8006e1c <lv_obj_get_parent>
 80085dc:	4622      	mov	r2, r4
 80085de:	2122      	movs	r1, #34	; 0x22
 80085e0:	f7fc faa4 	bl	8004b2c <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80085e4:	f243 020c 	movw	r2, #12300	; 0x300c
 80085e8:	2100      	movs	r1, #0
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7fe fb9c 	bl	8006d28 <lv_obj_get_style_prop>
 80085f0:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 80085f2:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80085f6:	f243 020d 	movw	r2, #12301	; 0x300d
 80085fa:	2100      	movs	r1, #0
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7fe fb93 	bl	8006d28 <lv_obj_get_style_prop>
 8008602:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8008604:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t w = lv_obj_get_width(item);
 8008608:	4620      	mov	r0, r4
 800860a:	f7fc fb92 	bl	8004d32 <lv_obj_get_width>
 800860e:	4683      	mov	fp, r0
    lv_coord_t h = lv_obj_get_height(item);
 8008610:	4620      	mov	r0, r4
 8008612:	f7fc fb96 	bl	8004d42 <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8008616:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 800861a:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 800861e:	f000 80bf 	beq.w	80087a0 <item_repos+0x368>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8008622:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 8008626:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800862a:	f000 80d0 	beq.w	80087ce <item_repos+0x396>
    x += tr_x;
 800862e:	eb08 060a 	add.w	r6, r8, sl
    y += tr_y;
 8008632:	eb05 0209 	add.w	r2, r5, r9
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 8008636:	9901      	ldr	r1, [sp, #4]
 8008638:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 800863c:	fa18 f686 	uxtah	r6, r8, r6
 8008640:	b2b6      	uxth	r6, r6
 8008642:	8aa3      	ldrh	r3, [r4, #20]
 8008644:	1af6      	subs	r6, r6, r3
 8008646:	b2b7      	uxth	r7, r6
 8008648:	b236      	sxth	r6, r6
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 800864a:	894d      	ldrh	r5, [r1, #10]
 800864c:	fa15 f282 	uxtah	r2, r5, r2
 8008650:	b292      	uxth	r2, r2
 8008652:	8ae3      	ldrh	r3, [r4, #22]
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	fa1f f882 	uxth.w	r8, r2
 800865a:	b215      	sxth	r5, r2
    if(diff_x || diff_y) {
 800865c:	b916      	cbnz	r6, 8008664 <item_repos+0x22c>
 800865e:	2d00      	cmp	r5, #0
 8008660:	f43f aef4 	beq.w	800844c <item_repos+0x14>
        lv_obj_invalidate(item);
 8008664:	4620      	mov	r0, r4
 8008666:	f7fc fe75 	bl	8005354 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 800866a:	8aa3      	ldrh	r3, [r4, #20]
 800866c:	443b      	add	r3, r7
 800866e:	82a3      	strh	r3, [r4, #20]
        item->coords.x2 += diff_x;
 8008670:	8b23      	ldrh	r3, [r4, #24]
 8008672:	441f      	add	r7, r3
 8008674:	8327      	strh	r7, [r4, #24]
        item->coords.y1 += diff_y;
 8008676:	8ae3      	ldrh	r3, [r4, #22]
 8008678:	4443      	add	r3, r8
 800867a:	82e3      	strh	r3, [r4, #22]
        item->coords.y2 += diff_y;
 800867c:	8b63      	ldrh	r3, [r4, #26]
 800867e:	4498      	add	r8, r3
 8008680:	f8a4 801a 	strh.w	r8, [r4, #26]
        lv_obj_invalidate(item);
 8008684:	4620      	mov	r0, r4
 8008686:	f7fc fe65 	bl	8005354 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, true);
 800868a:	2301      	movs	r3, #1
 800868c:	462a      	mov	r2, r5
 800868e:	4631      	mov	r1, r6
 8008690:	4620      	mov	r0, r4
 8008692:	f7fc fd8f 	bl	80051b4 <lv_obj_move_children_by>
 8008696:	e6d9      	b.n	800844c <item_repos+0x14>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 8008698:	f1b8 0f00 	cmp.w	r8, #0
 800869c:	d006      	beq.n	80086ac <item_repos+0x274>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 800869e:	f1b8 0f02 	cmp.w	r8, #2
 80086a2:	f47f af36 	bne.w	8008512 <item_repos+0xda>
 80086a6:	f04f 0800 	mov.w	r8, #0
 80086aa:	e732      	b.n	8008512 <item_repos+0xda>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 80086ac:	f04f 0802 	mov.w	r8, #2
 80086b0:	e72f      	b.n	8008512 <item_repos+0xda>
            x = c->x[col_pos];
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	f933 801b 	ldrsh.w	r8, [r3, fp, lsl #1]
            item->w_layout = 1;
 80086b8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80086bc:	f043 0304 	orr.w	r3, r3, #4
 80086c0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_w = col_w;
 80086c4:	9e02      	ldr	r6, [sp, #8]
            break;
 80086c6:	e745      	b.n	8008554 <item_repos+0x11c>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	1b9b      	subs	r3, r3, r6
 80086d2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80086d6:	eb08 0363 	add.w	r3, r8, r3, asr #1
 80086da:	fa0f f883 	sxth.w	r8, r3
            item->w_layout = 0;
 80086de:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80086e2:	f36f 0382 	bfc	r3, #2, #1
 80086e6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 80086ea:	e733      	b.n	8008554 <item_repos+0x11c>
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	4443      	add	r3, r8
 80086f6:	fa1f f883 	uxth.w	r8, r3
 80086fa:	4620      	mov	r0, r4
 80086fc:	f7fc fb19 	bl	8004d32 <lv_obj_get_width>
 8008700:	b280      	uxth	r0, r0
 8008702:	eba8 0800 	sub.w	r8, r8, r0
 8008706:	fa0f f888 	sxth.w	r8, r8
            item->w_layout = 0;
 800870a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800870e:	f36f 0382 	bfc	r3, #2, #1
 8008712:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8008716:	e71d      	b.n	8008554 <item_repos+0x11c>
            y = c->y[row_pos];
 8008718:	686b      	ldr	r3, [r5, #4]
 800871a:	f933 501a 	ldrsh.w	r5, [r3, sl, lsl #1]
            item->h_layout = 1;
 800871e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008722:	f043 0302 	orr.w	r3, r3, #2
 8008726:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_h = row_h;
 800872a:	9f03      	ldr	r7, [sp, #12]
            break;
 800872c:	e727      	b.n	800857e <item_repos+0x146>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 800872e:	686b      	ldr	r3, [r5, #4]
 8008730:	f833 501a 	ldrh.w	r5, [r3, sl, lsl #1]
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	1bdb      	subs	r3, r3, r7
 8008738:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800873c:	eb05 0363 	add.w	r3, r5, r3, asr #1
 8008740:	b21d      	sxth	r5, r3
            item->h_layout = 0;
 8008742:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008746:	f36f 0341 	bfc	r3, #1, #1
 800874a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 800874e:	e716      	b.n	800857e <item_repos+0x146>
 8008750:	00060001 	.word	0x00060001
 8008754:	20001e3a 	.word	0x20001e3a
 8008758:	20001e3e 	.word	0x20001e3e
 800875c:	20001e38 	.word	0x20001e38
 8008760:	20001e3c 	.word	0x20001e3c
 8008764:	20001e40 	.word	0x20001e40
 8008768:	20001e42 	.word	0x20001e42
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 800876c:	686b      	ldr	r3, [r5, #4]
 800876e:	f833 501a 	ldrh.w	r5, [r3, sl, lsl #1]
 8008772:	9b05      	ldr	r3, [sp, #20]
 8008774:	442b      	add	r3, r5
 8008776:	b29d      	uxth	r5, r3
 8008778:	4620      	mov	r0, r4
 800877a:	f7fc fae2 	bl	8004d42 <lv_obj_get_height>
 800877e:	b280      	uxth	r0, r0
 8008780:	1a2d      	subs	r5, r5, r0
 8008782:	b22d      	sxth	r5, r5
            item->h_layout = 0;
 8008784:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008788:	f36f 0341 	bfc	r3, #1, #1
 800878c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8008790:	e6f5      	b.n	800857e <item_repos+0x146>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8008792:	4620      	mov	r0, r4
 8008794:	f7fc fad5 	bl	8004d42 <lv_obj_get_height>
 8008798:	42b8      	cmp	r0, r7
 800879a:	f47f aef6 	bne.w	800858a <item_repos+0x152>
 800879e:	e721      	b.n	80085e4 <item_repos+0x1ac>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80087a0:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 80087a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80087a8:	f73f af3b 	bgt.w	8008622 <item_repos+0x1ea>
 80087ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087b0:	dd01      	ble.n	80087b6 <item_repos+0x37e>
 80087b2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80087b6:	fb03 fb0b 	mul.w	fp, r3, fp
 80087ba:	4b10      	ldr	r3, [pc, #64]	; (80087fc <item_repos+0x3c4>)
 80087bc:	fb83 3a0b 	smull	r3, sl, r3, fp
 80087c0:	ea4f 7beb 	mov.w	fp, fp, asr #31
 80087c4:	ebcb 1a6a 	rsb	sl, fp, sl, asr #5
 80087c8:	fa0f fa8a 	sxth.w	sl, sl
 80087cc:	e729      	b.n	8008622 <item_repos+0x1ea>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80087ce:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 80087d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80087d6:	f73f af2a 	bgt.w	800862e <item_repos+0x1f6>
 80087da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087de:	dd01      	ble.n	80087e4 <item_repos+0x3ac>
 80087e0:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80087e4:	fb00 f303 	mul.w	r3, r0, r3
 80087e8:	4a04      	ldr	r2, [pc, #16]	; (80087fc <item_repos+0x3c4>)
 80087ea:	fb82 1203 	smull	r1, r2, r2, r3
 80087ee:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80087f2:	ebc9 1962 	rsb	r9, r9, r2, asr #5
 80087f6:	fa0f f989 	sxth.w	r9, r9
 80087fa:	e718      	b.n	800862e <item_repos+0x1f6>
 80087fc:	51eb851f 	.word	0x51eb851f

08008800 <calc_free>:
{
 8008800:	b510      	push	{r4, lr}
 8008802:	4604      	mov	r4, r0
    lv_mem_buf_release(calc->x);
 8008804:	6800      	ldr	r0, [r0, #0]
 8008806:	f001 fadb 	bl	8009dc0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 800880a:	6860      	ldr	r0, [r4, #4]
 800880c:	f001 fad8 	bl	8009dc0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 8008810:	68a0      	ldr	r0, [r4, #8]
 8008812:	f001 fad5 	bl	8009dc0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 8008816:	68e0      	ldr	r0, [r4, #12]
 8008818:	f001 fad2 	bl	8009dc0 <lv_mem_buf_release>
}
 800881c:	bd10      	pop	{r4, pc}
	...

08008820 <calc_rows>:
{
 8008820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	4680      	mov	r8, r0
 8008826:	460c      	mov	r4, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 8008828:	4b57      	ldr	r3, [pc, #348]	; (8008988 <calc_rows+0x168>)
 800882a:	881a      	ldrh	r2, [r3, #0]
 800882c:	2100      	movs	r1, #0
 800882e:	f7fe fa7b 	bl	8006d28 <lv_obj_get_style_prop>
 8008832:	4606      	mov	r6, r0
    c->row_num = count_tracks(row_templ);
 8008834:	f7ff fdf4 	bl	8008420 <count_tracks>
 8008838:	6160      	str	r0, [r4, #20]
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800883a:	0040      	lsls	r0, r0, #1
 800883c:	f001 fbf6 	bl	800a02c <lv_mem_buf_get>
 8008840:	6060      	str	r0, [r4, #4]
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8008842:	6960      	ldr	r0, [r4, #20]
 8008844:	0040      	lsls	r0, r0, #1
 8008846:	f001 fbf1 	bl	800a02c <lv_mem_buf_get>
 800884a:	60e0      	str	r0, [r4, #12]
    for(i = 0; i < c->row_num; i++) {
 800884c:	2700      	movs	r7, #0
 800884e:	e032      	b.n	80088b6 <calc_rows+0x96>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8008850:	3501      	adds	r5, #1
 8008852:	4640      	mov	r0, r8
 8008854:	f7fe fb21 	bl	8006e9a <lv_obj_get_child_cnt>
 8008858:	42a8      	cmp	r0, r5
 800885a:	d925      	bls.n	80088a8 <calc_rows+0x88>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800885c:	4629      	mov	r1, r5
 800885e:	4640      	mov	r0, r8
 8008860:	f7fe fb06 	bl	8006e70 <lv_obj_get_child>
 8008864:	4681      	mov	r9, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008866:	4949      	ldr	r1, [pc, #292]	; (800898c <calc_rows+0x16c>)
 8008868:	f7fc f9e9 	bl	8004c3e <lv_obj_has_flag_any>
 800886c:	2800      	cmp	r0, #0
 800886e:	d1ef      	bne.n	8008850 <calc_rows+0x30>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 8008870:	4b47      	ldr	r3, [pc, #284]	; (8008990 <calc_rows+0x170>)
 8008872:	881a      	ldrh	r2, [r3, #0]
 8008874:	2100      	movs	r1, #0
 8008876:	4648      	mov	r0, r9
 8008878:	f7fe fa56 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_row_span(obj, 0);
 800887c:	b2c0      	uxtb	r0, r0
                if(row_span != 1) continue;
 800887e:	2801      	cmp	r0, #1
 8008880:	d1e6      	bne.n	8008850 <calc_rows+0x30>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8008882:	4b44      	ldr	r3, [pc, #272]	; (8008994 <calc_rows+0x174>)
 8008884:	881a      	ldrh	r2, [r3, #0]
 8008886:	2100      	movs	r1, #0
 8008888:	4648      	mov	r0, r9
 800888a:	f7fe fa4d 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_row_pos(obj, 0);
 800888e:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 8008890:	4287      	cmp	r7, r0
 8008892:	d1dd      	bne.n	8008850 <calc_rows+0x30>
                size = LV_MAX(size, lv_obj_get_height(item));
 8008894:	4648      	mov	r0, r9
 8008896:	f7fc fa54 	bl	8004d42 <lv_obj_get_height>
 800889a:	4558      	cmp	r0, fp
 800889c:	dbd8      	blt.n	8008850 <calc_rows+0x30>
 800889e:	4648      	mov	r0, r9
 80088a0:	f7fc fa4f 	bl	8004d42 <lv_obj_get_height>
 80088a4:	4683      	mov	fp, r0
 80088a6:	e7d3      	b.n	8008850 <calc_rows+0x30>
            if(size >= 0) c->h[i] = size;
 80088a8:	f1bb 0f00 	cmp.w	fp, #0
 80088ac:	db12      	blt.n	80088d4 <calc_rows+0xb4>
 80088ae:	68e3      	ldr	r3, [r4, #12]
 80088b0:	f823 b00a 	strh.w	fp, [r3, sl]
    for(i = 0; i < c->row_num; i++) {
 80088b4:	3701      	adds	r7, #1
 80088b6:	6963      	ldr	r3, [r4, #20]
 80088b8:	42bb      	cmp	r3, r7
 80088ba:	d910      	bls.n	80088de <calc_rows+0xbe>
        if(IS_CONTENT(row_templ[i])) {
 80088bc:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80088c0:	f936 2017 	ldrsh.w	r2, [r6, r7, lsl #1]
 80088c4:	f641 739a 	movw	r3, #8090	; 0x1f9a
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d1f3      	bne.n	80088b4 <calc_rows+0x94>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 80088cc:	2500      	movs	r5, #0
        lv_coord_t size = LV_COORD_MIN;
 80088ce:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8008998 <calc_rows+0x178>
 80088d2:	e7be      	b.n	8008852 <calc_rows+0x32>
            else c->h[i] = 0;
 80088d4:	68e3      	ldr	r3, [r4, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f823 200a 	strh.w	r2, [r3, sl]
 80088dc:	e7ea      	b.n	80088b4 <calc_rows+0x94>
    lv_coord_t grid_h = 0;
 80088de:	2700      	movs	r7, #0
    uint32_t row_fr_cnt = 0;
 80088e0:	463d      	mov	r5, r7
    for(i = 0; i < c->row_num; i++) {
 80088e2:	463a      	mov	r2, r7
 80088e4:	e008      	b.n	80088f8 <calc_rows+0xd8>
        else if(IS_CONTENT(x)) {
 80088e6:	f641 719a 	movw	r1, #8090	; 0x1f9a
 80088ea:	428b      	cmp	r3, r1
 80088ec:	d013      	beq.n	8008916 <calc_rows+0xf6>
            c->h[i] = x;
 80088ee:	68e1      	ldr	r1, [r4, #12]
 80088f0:	520b      	strh	r3, [r1, r0]
            grid_h += x;
 80088f2:	443b      	add	r3, r7
 80088f4:	b21f      	sxth	r7, r3
    for(i = 0; i < c->row_num; i++) {
 80088f6:	3201      	adds	r2, #1
 80088f8:	6963      	ldr	r3, [r4, #20]
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d910      	bls.n	8008920 <calc_rows+0x100>
        lv_coord_t x = row_templ[i];
 80088fe:	0050      	lsls	r0, r2, #1
 8008900:	f936 3012 	ldrsh.w	r3, [r6, r2, lsl #1]
        if(IS_FR(x)) {
 8008904:	f641 719a 	movw	r1, #8090	; 0x1f9a
 8008908:	428b      	cmp	r3, r1
 800890a:	ddec      	ble.n	80088e6 <calc_rows+0xc6>
            row_fr_cnt += GET_FR(x);
 800890c:	441d      	add	r5, r3
 800890e:	f5a5 55fc 	sub.w	r5, r5, #8064	; 0x1f80
 8008912:	3d1b      	subs	r5, #27
 8008914:	e7ef      	b.n	80088f6 <calc_rows+0xd6>
            grid_h += c->h[i];
 8008916:	68e3      	ldr	r3, [r4, #12]
 8008918:	5a1b      	ldrh	r3, [r3, r0]
 800891a:	443b      	add	r3, r7
 800891c:	b21f      	sxth	r7, r3
 800891e:	e7ea      	b.n	80088f6 <calc_rows+0xd6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8008920:	f641 0214 	movw	r2, #6164	; 0x1814
 8008924:	2100      	movs	r1, #0
 8008926:	4640      	mov	r0, r8
 8008928:	f7fe f9fe 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800892c:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 8008930:	4640      	mov	r0, r8
 8008932:	f7fc fa31 	bl	8004d98 <lv_obj_get_content_height>
 8008936:	b283      	uxth	r3, r0
 8008938:	6962      	ldr	r2, [r4, #20]
 800893a:	3a01      	subs	r2, #1
 800893c:	fb19 f902 	smulbb	r9, r9, r2
 8008940:	eba3 0309 	sub.w	r3, r3, r9
 8008944:	b29b      	uxth	r3, r3
    lv_coord_t free_h = cont_h - grid_h;
 8008946:	1bdf      	subs	r7, r3, r7
 8008948:	b23f      	sxth	r7, r7
    if(free_h < 0) free_h = 0;
 800894a:	2f00      	cmp	r7, #0
 800894c:	db01      	blt.n	8008952 <calc_rows+0x132>
    for(i = 0; i < c->row_num; i++) {
 800894e:	2200      	movs	r2, #0
 8008950:	e002      	b.n	8008958 <calc_rows+0x138>
    if(free_h < 0) free_h = 0;
 8008952:	2700      	movs	r7, #0
 8008954:	e7fb      	b.n	800894e <calc_rows+0x12e>
    for(i = 0; i < c->row_num; i++) {
 8008956:	3201      	adds	r2, #1
 8008958:	6961      	ldr	r1, [r4, #20]
 800895a:	4291      	cmp	r1, r2
 800895c:	d911      	bls.n	8008982 <calc_rows+0x162>
        lv_coord_t x = row_templ[i];
 800895e:	f936 3012 	ldrsh.w	r3, [r6, r2, lsl #1]
        if(IS_FR(x)) {
 8008962:	f641 719a 	movw	r1, #8090	; 0x1f9a
 8008966:	428b      	cmp	r3, r1
 8008968:	ddf5      	ble.n	8008956 <calc_rows+0x136>
            lv_coord_t f = GET_FR(x);
 800896a:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 800896e:	3b1b      	subs	r3, #27
 8008970:	b21b      	sxth	r3, r3
            c->h[i] = (free_h * f) / row_fr_cnt;
 8008972:	fb07 f303 	mul.w	r3, r7, r3
 8008976:	fbb3 f3f5 	udiv	r3, r3, r5
 800897a:	68e1      	ldr	r1, [r4, #12]
 800897c:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8008980:	e7e9      	b.n	8008956 <calc_rows+0x136>
}
 8008982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	bf00      	nop
 8008988:	20001e4a 	.word	0x20001e4a
 800898c:	00060001 	.word	0x00060001
 8008990:	20001e3e 	.word	0x20001e3e
 8008994:	20001e3c 	.word	0x20001e3c
 8008998:	ffffe001 	.word	0xffffe001

0800899c <calc_cols>:
{
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	b083      	sub	sp, #12
 80089a2:	4681      	mov	r9, r0
 80089a4:	460c      	mov	r4, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 80089a6:	4b5f      	ldr	r3, [pc, #380]	; (8008b24 <calc_cols+0x188>)
 80089a8:	881a      	ldrh	r2, [r3, #0]
 80089aa:	2100      	movs	r1, #0
 80089ac:	f7fe f9bc 	bl	8006d28 <lv_obj_get_style_prop>
 80089b0:	4680      	mov	r8, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 80089b2:	4648      	mov	r0, r9
 80089b4:	f7fc f9cd 	bl	8004d52 <lv_obj_get_content_width>
 80089b8:	9001      	str	r0, [sp, #4]
    c->col_num = count_tracks(col_templ);
 80089ba:	4640      	mov	r0, r8
 80089bc:	f7ff fd30 	bl	8008420 <count_tracks>
 80089c0:	6120      	str	r0, [r4, #16]
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 80089c2:	0040      	lsls	r0, r0, #1
 80089c4:	f001 fb32 	bl	800a02c <lv_mem_buf_get>
 80089c8:	6020      	str	r0, [r4, #0]
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 80089ca:	6920      	ldr	r0, [r4, #16]
 80089cc:	0040      	lsls	r0, r0, #1
 80089ce:	f001 fb2d 	bl	800a02c <lv_mem_buf_get>
 80089d2:	60a0      	str	r0, [r4, #8]
    for(i = 0; i < c->col_num; i++) {
 80089d4:	2600      	movs	r6, #0
 80089d6:	e032      	b.n	8008a3e <calc_cols+0xa2>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 80089d8:	3501      	adds	r5, #1
 80089da:	4648      	mov	r0, r9
 80089dc:	f7fe fa5d 	bl	8006e9a <lv_obj_get_child_cnt>
 80089e0:	42a8      	cmp	r0, r5
 80089e2:	d925      	bls.n	8008a30 <calc_cols+0x94>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 80089e4:	4629      	mov	r1, r5
 80089e6:	4648      	mov	r0, r9
 80089e8:	f7fe fa42 	bl	8006e70 <lv_obj_get_child>
 80089ec:	4607      	mov	r7, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80089ee:	494e      	ldr	r1, [pc, #312]	; (8008b28 <calc_cols+0x18c>)
 80089f0:	f7fc f925 	bl	8004c3e <lv_obj_has_flag_any>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d1ef      	bne.n	80089d8 <calc_cols+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 80089f8:	4b4c      	ldr	r3, [pc, #304]	; (8008b2c <calc_cols+0x190>)
 80089fa:	881a      	ldrh	r2, [r3, #0]
 80089fc:	2100      	movs	r1, #0
 80089fe:	4638      	mov	r0, r7
 8008a00:	f7fe f992 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_column_span(obj, 0);
 8008a04:	b2c0      	uxtb	r0, r0
                if(col_span != 1) continue;
 8008a06:	2801      	cmp	r0, #1
 8008a08:	d1e6      	bne.n	80089d8 <calc_cols+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8008a0a:	4b49      	ldr	r3, [pc, #292]	; (8008b30 <calc_cols+0x194>)
 8008a0c:	881a      	ldrh	r2, [r3, #0]
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7fe f989 	bl	8006d28 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_column_pos(obj, 0);
 8008a16:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 8008a18:	4286      	cmp	r6, r0
 8008a1a:	d1dd      	bne.n	80089d8 <calc_cols+0x3c>
                size = LV_MAX(size, lv_obj_get_width(item));
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f7fc f988 	bl	8004d32 <lv_obj_get_width>
 8008a22:	4558      	cmp	r0, fp
 8008a24:	dbd8      	blt.n	80089d8 <calc_cols+0x3c>
 8008a26:	4638      	mov	r0, r7
 8008a28:	f7fc f983 	bl	8004d32 <lv_obj_get_width>
 8008a2c:	4683      	mov	fp, r0
 8008a2e:	e7d3      	b.n	80089d8 <calc_cols+0x3c>
            if(size >= 0) c->w[i] = size;
 8008a30:	f1bb 0f00 	cmp.w	fp, #0
 8008a34:	db12      	blt.n	8008a5c <calc_cols+0xc0>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	f823 b00a 	strh.w	fp, [r3, sl]
    for(i = 0; i < c->col_num; i++) {
 8008a3c:	3601      	adds	r6, #1
 8008a3e:	6923      	ldr	r3, [r4, #16]
 8008a40:	42b3      	cmp	r3, r6
 8008a42:	d910      	bls.n	8008a66 <calc_cols+0xca>
        if(IS_CONTENT(col_templ[i])) {
 8008a44:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8008a48:	f938 2016 	ldrsh.w	r2, [r8, r6, lsl #1]
 8008a4c:	f641 739a 	movw	r3, #8090	; 0x1f9a
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d1f3      	bne.n	8008a3c <calc_cols+0xa0>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8008a54:	2500      	movs	r5, #0
        lv_coord_t size = LV_COORD_MIN;
 8008a56:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8008b34 <calc_cols+0x198>
 8008a5a:	e7be      	b.n	80089da <calc_cols+0x3e>
            else c->w[i] = 0;
 8008a5c:	68a3      	ldr	r3, [r4, #8]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f823 200a 	strh.w	r2, [r3, sl]
 8008a64:	e7ea      	b.n	8008a3c <calc_cols+0xa0>
    lv_coord_t grid_w = 0;
 8008a66:	2600      	movs	r6, #0
    uint32_t col_fr_cnt = 0;
 8008a68:	4635      	mov	r5, r6
    for(i = 0; i < c->col_num; i++) {
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	e008      	b.n	8008a80 <calc_cols+0xe4>
        else if(IS_CONTENT(x)) {
 8008a6e:	f641 719a 	movw	r1, #8090	; 0x1f9a
 8008a72:	428b      	cmp	r3, r1
 8008a74:	d013      	beq.n	8008a9e <calc_cols+0x102>
            c->w[i] = x;
 8008a76:	68a1      	ldr	r1, [r4, #8]
 8008a78:	520b      	strh	r3, [r1, r0]
            grid_w += x;
 8008a7a:	4433      	add	r3, r6
 8008a7c:	b21e      	sxth	r6, r3
    for(i = 0; i < c->col_num; i++) {
 8008a7e:	3201      	adds	r2, #1
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d910      	bls.n	8008aa8 <calc_cols+0x10c>
        lv_coord_t x = col_templ[i];
 8008a86:	0050      	lsls	r0, r2, #1
 8008a88:	f938 3012 	ldrsh.w	r3, [r8, r2, lsl #1]
        if(IS_FR(x)) {
 8008a8c:	f641 719a 	movw	r1, #8090	; 0x1f9a
 8008a90:	428b      	cmp	r3, r1
 8008a92:	ddec      	ble.n	8008a6e <calc_cols+0xd2>
            col_fr_cnt += GET_FR(x);
 8008a94:	442b      	add	r3, r5
 8008a96:	f5a3 55fc 	sub.w	r5, r3, #8064	; 0x1f80
 8008a9a:	3d1b      	subs	r5, #27
 8008a9c:	e7ef      	b.n	8008a7e <calc_cols+0xe2>
            grid_w += c->w[i];
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	5a1b      	ldrh	r3, [r3, r0]
 8008aa2:	4433      	add	r3, r6
 8008aa4:	b21e      	sxth	r6, r3
 8008aa6:	e7ea      	b.n	8008a7e <calc_cols+0xe2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8008aa8:	f641 0215 	movw	r2, #6165	; 0x1815
 8008aac:	2100      	movs	r1, #0
 8008aae:	4648      	mov	r0, r9
 8008ab0:	f7fe f93a 	bl	8006d28 <lv_obj_get_style_prop>
    cont_w -= col_gap * (c->col_num - 1);
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	fb10 f303 	smulbb	r3, r0, r3
 8008abc:	9a01      	ldr	r2, [sp, #4]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	b29b      	uxth	r3, r3
    lv_coord_t free_w = cont_w - grid_w;
 8008ac2:	1b9e      	subs	r6, r3, r6
 8008ac4:	b236      	sxth	r6, r6
    if(free_w < 0) free_w = 0;
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	db04      	blt.n	8008ad4 <calc_cols+0x138>
    int32_t last_fr_x = 0;
 8008aca:	2700      	movs	r7, #0
    int32_t last_fr_i = -1;
 8008acc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    for(i = 0; i < c->col_num; i++) {
 8008ad0:	463a      	mov	r2, r7
 8008ad2:	e002      	b.n	8008ada <calc_cols+0x13e>
    if(free_w < 0) free_w = 0;
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	e7f8      	b.n	8008aca <calc_cols+0x12e>
    for(i = 0; i < c->col_num; i++) {
 8008ad8:	3201      	adds	r2, #1
 8008ada:	6920      	ldr	r0, [r4, #16]
 8008adc:	4290      	cmp	r0, r2
 8008ade:	d912      	bls.n	8008b06 <calc_cols+0x16a>
        lv_coord_t x = col_templ[i];
 8008ae0:	f938 1012 	ldrsh.w	r1, [r8, r2, lsl #1]
        if(IS_FR(x)) {
 8008ae4:	f641 739a 	movw	r3, #8090	; 0x1f9a
 8008ae8:	4299      	cmp	r1, r3
 8008aea:	ddf5      	ble.n	8008ad8 <calc_cols+0x13c>
            lv_coord_t f = GET_FR(x);
 8008aec:	f5a1 51fc 	sub.w	r1, r1, #8064	; 0x1f80
 8008af0:	391b      	subs	r1, #27
 8008af2:	b20f      	sxth	r7, r1
            c->w[i] = (free_w * f) / col_fr_cnt;
 8008af4:	fb07 f306 	mul.w	r3, r7, r6
 8008af8:	fbb3 f3f5 	udiv	r3, r3, r5
 8008afc:	68a1      	ldr	r1, [r4, #8]
 8008afe:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            last_fr_i = i;
 8008b02:	4694      	mov	ip, r2
            last_fr_x = f;
 8008b04:	e7e8      	b.n	8008ad8 <calc_cols+0x13c>
    if(last_fr_i >= 0) {
 8008b06:	f1bc 0f00 	cmp.w	ip, #0
 8008b0a:	db08      	blt.n	8008b1e <calc_cols+0x182>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 8008b0c:	1beb      	subs	r3, r5, r7
 8008b0e:	fb06 f303 	mul.w	r3, r6, r3
 8008b12:	fbb3 f3f5 	udiv	r3, r3, r5
 8008b16:	68a2      	ldr	r2, [r4, #8]
 8008b18:	1af3      	subs	r3, r6, r3
 8008b1a:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
}
 8008b1e:	b003      	add	sp, #12
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	20001e46 	.word	0x20001e46
 8008b28:	00060001 	.word	0x00060001
 8008b2c:	20001e3a 	.word	0x20001e3a
 8008b30:	20001e38 	.word	0x20001e38
 8008b34:	ffffe001 	.word	0xffffe001

08008b38 <calc>:
{
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	4604      	mov	r4, r0
 8008b40:	460d      	mov	r5, r1
    if(lv_obj_get_child(cont, 0) == NULL) {
 8008b42:	2100      	movs	r1, #0
 8008b44:	f7fe f994 	bl	8006e70 <lv_obj_get_child>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d071      	beq.n	8008c30 <calc+0xf8>
    calc_rows(cont, calc_out);
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7ff fe66 	bl	8008820 <calc_rows>
    calc_cols(cont, calc_out);
 8008b54:	4629      	mov	r1, r5
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7ff ff20 	bl	800899c <calc_cols>
 8008b5c:	f641 0215 	movw	r2, #6165	; 0x1815
 8008b60:	2100      	movs	r1, #0
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7fe f8e0 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008b68:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8008b6c:	f641 0214 	movw	r2, #6164	; 0x1814
 8008b70:	2100      	movs	r1, #0
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7fe f8d8 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008b78:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008b7a:	f241 426a 	movw	r2, #5226	; 0x146a
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7fe f8d1 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008b86:	b2c6      	uxtb	r6, r0
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 8008b88:	2e01      	cmp	r6, #1
 8008b8a:	bf14      	ite	ne
 8008b8c:	2600      	movne	r6, #0
 8008b8e:	2601      	moveq	r6, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008b90:	f241 0201 	movw	r2, #4097	; 0x1001
 8008b94:	2100      	movs	r1, #0
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7fe f8c6 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008b9c:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008ba0:	f241 0204 	movw	r2, #4100	; 0x1004
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7fe f8be 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008bac:	fa0f f880 	sxth.w	r8, r0
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 8008bb0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008bb4:	4599      	cmp	r9, r3
 8008bb6:	d040      	beq.n	8008c3a <calc+0x102>
 8008bb8:	f04f 0b00 	mov.w	fp, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f7fc f8c8 	bl	8004d52 <lv_obj_get_content_width>
 8008bc2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 8008bc4:	4b28      	ldr	r3, [pc, #160]	; (8008c68 <calc+0x130>)
 8008bc6:	881a      	ldrh	r2, [r3, #0]
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7fe f8ac 	bl	8006d28 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 8008bd0:	9603      	str	r6, [sp, #12]
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	68ab      	ldr	r3, [r5, #8]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	692b      	ldr	r3, [r5, #16]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	4653      	mov	r3, sl
 8008be0:	b2c2      	uxtb	r2, r0
 8008be2:	4659      	mov	r1, fp
 8008be4:	4648      	mov	r0, r9
 8008be6:	f7ff fb7f 	bl	80082e8 <grid_align>
 8008bea:	8328      	strh	r0, [r5, #24]
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 8008bec:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008bf0:	4598      	cmp	r8, r3
 8008bf2:	d02d      	beq.n	8008c50 <calc+0x118>
 8008bf4:	f04f 0800 	mov.w	r8, #0
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f7fc f8cd 	bl	8004d98 <lv_obj_get_content_height>
 8008bfe:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <calc+0x134>)
 8008c02:	881a      	ldrh	r2, [r3, #0]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7fe f88e 	bl	8006d28 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9303      	str	r3, [sp, #12]
 8008c10:	686b      	ldr	r3, [r5, #4]
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	68eb      	ldr	r3, [r5, #12]
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	696b      	ldr	r3, [r5, #20]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	b2c2      	uxtb	r2, r0
 8008c20:	4641      	mov	r1, r8
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7ff fb60 	bl	80082e8 <grid_align>
 8008c28:	8368      	strh	r0, [r5, #26]
}
 8008c2a:	b005      	add	sp, #20
 8008c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 8008c30:	211c      	movs	r1, #28
 8008c32:	4628      	mov	r0, r5
 8008c34:	f001 fa5c 	bl	800a0f0 <lv_memset_00>
        return;
 8008c38:	e7f7      	b.n	8008c2a <calc+0xf2>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 8008c3a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008c3e:	f013 0f04 	tst.w	r3, #4
 8008c42:	d002      	beq.n	8008c4a <calc+0x112>
 8008c44:	f04f 0b00 	mov.w	fp, #0
 8008c48:	e7b8      	b.n	8008bbc <calc+0x84>
 8008c4a:	f04f 0b01 	mov.w	fp, #1
 8008c4e:	e7b5      	b.n	8008bbc <calc+0x84>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 8008c50:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008c54:	f013 0f02 	tst.w	r3, #2
 8008c58:	d002      	beq.n	8008c60 <calc+0x128>
 8008c5a:	f04f 0800 	mov.w	r8, #0
 8008c5e:	e7cb      	b.n	8008bf8 <calc+0xc0>
 8008c60:	f04f 0801 	mov.w	r8, #1
 8008c64:	e7c8      	b.n	8008bf8 <calc+0xc0>
 8008c66:	bf00      	nop
 8008c68:	20001e44 	.word	0x20001e44
 8008c6c:	20001e48 	.word	0x20001e48

08008c70 <grid_update>:
{
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	b08a      	sub	sp, #40	; 0x28
 8008c74:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8008c76:	4b3b      	ldr	r3, [pc, #236]	; (8008d64 <grid_update+0xf4>)
 8008c78:	881a      	ldrh	r2, [r3, #0]
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	f7fe f854 	bl	8006d28 <lv_obj_get_style_prop>
 8008c80:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 8008c82:	4b39      	ldr	r3, [pc, #228]	; (8008d68 <grid_update+0xf8>)
 8008c84:	881a      	ldrh	r2, [r3, #0]
 8008c86:	2100      	movs	r1, #0
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f7fe f84d 	bl	8006d28 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 8008c8e:	2c00      	cmp	r4, #0
 8008c90:	d061      	beq.n	8008d56 <grid_update+0xe6>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d05f      	beq.n	8008d56 <grid_update+0xe6>
    calc(cont, &c);
 8008c96:	a903      	add	r1, sp, #12
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f7ff ff4d 	bl	8008b38 <calc>
    lv_memset_00(&hint, sizeof(hint));
 8008c9e:	210c      	movs	r1, #12
 8008ca0:	4668      	mov	r0, sp
 8008ca2:	f001 fa25 	bl	800a0f0 <lv_memset_00>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008ca6:	f241 0232 	movw	r2, #4146	; 0x1032
 8008caa:	2100      	movs	r1, #0
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7fe f83b 	bl	8006d28 <lv_obj_get_style_prop>
 8008cb2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008cb4:	f641 0212 	movw	r2, #6162	; 0x1812
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7fe f834 	bl	8006d28 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 8008cc0:	b2b6      	uxth	r6, r6
 8008cc2:	fa16 f480 	uxtah	r4, r6, r0
 8008cc6:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008cc8:	f641 0210 	movw	r2, #6160	; 0x1810
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7fe f82a 	bl	8006d28 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 8008cd4:	fa16 f680 	uxtah	r6, r6, r0
 8008cd8:	b2b6      	uxth	r6, r6
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 8008cda:	8aab      	ldrh	r3, [r5, #20]
 8008cdc:	441c      	add	r4, r3
 8008cde:	b2a4      	uxth	r4, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f7fd f84f 	bl	8005d84 <lv_obj_get_scroll_x>
 8008ce6:	b280      	uxth	r0, r0
 8008ce8:	1a24      	subs	r4, r4, r0
 8008cea:	f8ad 4008 	strh.w	r4, [sp, #8]
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 8008cee:	8aec      	ldrh	r4, [r5, #22]
 8008cf0:	4434      	add	r4, r6
 8008cf2:	b2a4      	uxth	r4, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f7fd f85a 	bl	8005dae <lv_obj_get_scroll_y>
 8008cfa:	b280      	uxth	r0, r0
 8008cfc:	1a24      	subs	r4, r4, r0
 8008cfe:	f8ad 400a 	strh.w	r4, [sp, #10]
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8008d02:	2400      	movs	r4, #0
 8008d04:	e007      	b.n	8008d16 <grid_update+0xa6>
        lv_obj_t * item = cont->spec_attr->children[i];
 8008d06:	681b      	ldr	r3, [r3, #0]
        item_repos(item, &c, &hint);
 8008d08:	466a      	mov	r2, sp
 8008d0a:	a903      	add	r1, sp, #12
 8008d0c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008d10:	f7ff fb92 	bl	8008438 <item_repos>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8008d14:	3401      	adds	r4, #1
 8008d16:	68ab      	ldr	r3, [r5, #8]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	42a2      	cmp	r2, r4
 8008d1c:	d8f3      	bhi.n	8008d06 <grid_update+0x96>
    calc_free(&c);
 8008d1e:	a803      	add	r0, sp, #12
 8008d20:	f7ff fd6e 	bl	8008800 <calc_free>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008d24:	f241 0201 	movw	r2, #4097	; 0x1001
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f7fd fffc 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008d30:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008d32:	f241 0204 	movw	r2, #4100	; 0x1004
 8008d36:	2100      	movs	r1, #0
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f7fd fff5 	bl	8006d28 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008d3e:	b200      	sxth	r0, r0
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8008d40:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d008      	beq.n	8008d5a <grid_update+0xea>
 8008d48:	4298      	cmp	r0, r3
 8008d4a:	d006      	beq.n	8008d5a <grid_update+0xea>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	212b      	movs	r1, #43	; 0x2b
 8008d50:	4628      	mov	r0, r5
 8008d52:	f7fb feeb 	bl	8004b2c <lv_event_send>
}
 8008d56:	b00a      	add	sp, #40	; 0x28
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_refr_size(cont);
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f7fc fdb0 	bl	80058c0 <lv_obj_refr_size>
 8008d60:	e7f4      	b.n	8008d4c <grid_update+0xdc>
 8008d62:	bf00      	nop
 8008d64:	20001e46 	.word	0x20001e46
 8008d68:	20001e4a 	.word	0x20001e4a

08008d6c <lv_grid_init>:
{
 8008d6c:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4820      	ldr	r0, [pc, #128]	; (8008df4 <lv_grid_init+0x88>)
 8008d72:	f7fb ffaf 	bl	8004cd4 <lv_layout_register>
 8008d76:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <lv_grid_init+0x8c>)
 8008d78:	6018      	str	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008d7a:	f001 f9e3 	bl	800a144 <lv_style_register_prop>
 8008d7e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008d82:	4b1e      	ldr	r3, [pc, #120]	; (8008dfc <lv_grid_init+0x90>)
 8008d84:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008d86:	f001 f9dd 	bl	800a144 <lv_style_register_prop>
 8008d8a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008d8e:	4b1c      	ldr	r3, [pc, #112]	; (8008e00 <lv_grid_init+0x94>)
 8008d90:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008d92:	f001 f9d7 	bl	800a144 <lv_style_register_prop>
 8008d96:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008d9a:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <lv_grid_init+0x98>)
 8008d9c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008d9e:	f001 f9d1 	bl	800a144 <lv_style_register_prop>
 8008da2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008da6:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <lv_grid_init+0x9c>)
 8008da8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008daa:	f001 f9cb 	bl	800a144 <lv_style_register_prop>
 8008dae:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008db2:	4b16      	ldr	r3, [pc, #88]	; (8008e0c <lv_grid_init+0xa0>)
 8008db4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008db6:	f001 f9c5 	bl	800a144 <lv_style_register_prop>
 8008dba:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008dbe:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <lv_grid_init+0xa4>)
 8008dc0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008dc2:	f001 f9bf 	bl	800a144 <lv_style_register_prop>
 8008dc6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <lv_grid_init+0xa8>)
 8008dcc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008dce:	f001 f9b9 	bl	800a144 <lv_style_register_prop>
 8008dd2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008dd6:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <lv_grid_init+0xac>)
 8008dd8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008dda:	f001 f9b3 	bl	800a144 <lv_style_register_prop>
 8008dde:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008de2:	4b0e      	ldr	r3, [pc, #56]	; (8008e1c <lv_grid_init+0xb0>)
 8008de4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8008de6:	f001 f9ad 	bl	800a144 <lv_style_register_prop>
 8008dea:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8008dee:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <lv_grid_init+0xb4>)
 8008df0:	8018      	strh	r0, [r3, #0]
}
 8008df2:	bd08      	pop	{r3, pc}
 8008df4:	08008c71 	.word	0x08008c71
 8008df8:	20001e34 	.word	0x20001e34
 8008dfc:	20001e46 	.word	0x20001e46
 8008e00:	20001e4a 	.word	0x20001e4a
 8008e04:	20001e44 	.word	0x20001e44
 8008e08:	20001e48 	.word	0x20001e48
 8008e0c:	20001e3e 	.word	0x20001e3e
 8008e10:	20001e3c 	.word	0x20001e3c
 8008e14:	20001e3a 	.word	0x20001e3a
 8008e18:	20001e38 	.word	0x20001e38
 8008e1c:	20001e40 	.word	0x20001e40
 8008e20:	20001e42 	.word	0x20001e42

08008e24 <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 8008e24:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 8008e26:	f7ff fa35 	bl	8008294 <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
 8008e2a:	f7ff ff9f 	bl	8008d6c <lv_grid_init>
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8008e2e:	bd08      	pop	{r3, pc}

08008e30 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8008e30:	7803      	ldrb	r3, [r0, #0]
 8008e32:	780a      	ldrb	r2, [r1, #0]
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d001      	beq.n	8008e3c <kern_pair_8_compare+0xc>
 8008e38:	1a98      	subs	r0, r3, r2
 8008e3a:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 8008e3c:	7840      	ldrb	r0, [r0, #1]
 8008e3e:	784b      	ldrb	r3, [r1, #1]
 8008e40:	1ac0      	subs	r0, r0, r3

}
 8008e42:	4770      	bx	lr

08008e44 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8008e44:	8803      	ldrh	r3, [r0, #0]
 8008e46:	880a      	ldrh	r2, [r1, #0]
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d001      	beq.n	8008e50 <kern_pair_16_compare+0xc>
 8008e4c:	1a98      	subs	r0, r3, r2
 8008e4e:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 8008e50:	8840      	ldrh	r0, [r0, #2]
 8008e52:	884b      	ldrh	r3, [r1, #2]
 8008e54:	1ac0      	subs	r0, r0, r3
}
 8008e56:	4770      	bx	lr

08008e58 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8008e58:	8800      	ldrh	r0, [r0, #0]
 8008e5a:	880b      	ldrh	r3, [r1, #0]
}
 8008e5c:	1ac0      	subs	r0, r0, r3
 8008e5e:	4770      	bx	lr

08008e60 <get_glyph_dsc_id>:
{
 8008e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e62:	b085      	sub	sp, #20
    if(letter == '\0') return 0;
 8008e64:	460d      	mov	r5, r1
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d06a      	beq.n	8008f40 <get_glyph_dsc_id+0xe0>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8008e6a:	6904      	ldr	r4, [r0, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8008e6c:	6967      	ldr	r7, [r4, #20]
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	d05e      	beq.n	8008f30 <get_glyph_dsc_id+0xd0>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	428b      	cmp	r3, r1
 8008e76:	d019      	beq.n	8008eac <get_glyph_dsc_id+0x4c>
 8008e78:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
 8008e7a:	8a63      	ldrh	r3, [r4, #18]
 8008e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d957      	bls.n	8008f34 <get_glyph_dsc_id+0xd4>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8008e84:	68a1      	ldr	r1, [r4, #8]
 8008e86:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8008e8a:	009e      	lsls	r6, r3, #2
 8008e8c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008e90:	5988      	ldr	r0, [r1, r6]
 8008e92:	1a28      	subs	r0, r5, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8008e94:	8899      	ldrh	r1, [r3, #4]
 8008e96:	4281      	cmp	r1, r0
 8008e98:	d30a      	bcc.n	8008eb0 <get_glyph_dsc_id+0x50>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8008e9a:	7c9a      	ldrb	r2, [r3, #18]
 8008e9c:	2a02      	cmp	r2, #2
 8008e9e:	d00a      	beq.n	8008eb6 <get_glyph_dsc_id+0x56>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8008ea0:	b992      	cbnz	r2, 8008ec8 <get_glyph_dsc_id+0x68>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 8008ea2:	68da      	ldr	r2, [r3, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8008ea4:	88db      	ldrh	r3, [r3, #6]
 8008ea6:	5c10      	ldrb	r0, [r2, r0]
 8008ea8:	4418      	add	r0, r3
 8008eaa:	e006      	b.n	8008eba <get_glyph_dsc_id+0x5a>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	e009      	b.n	8008ec4 <get_glyph_dsc_id+0x64>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	b292      	uxth	r2, r2
 8008eb4:	e7e1      	b.n	8008e7a <get_glyph_dsc_id+0x1a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8008eb6:	88db      	ldrh	r3, [r3, #6]
 8008eb8:	4418      	add	r0, r3
        if(fdsc->cache) {
 8008eba:	6963      	ldr	r3, [r4, #20]
 8008ebc:	b113      	cbz	r3, 8008ec4 <get_glyph_dsc_id+0x64>
            fdsc->cache->last_letter = letter;
 8008ebe:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8008ec0:	6963      	ldr	r3, [r4, #20]
 8008ec2:	6058      	str	r0, [r3, #4]
}
 8008ec4:	b005      	add	sp, #20
 8008ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8008ec8:	2a03      	cmp	r2, #3
 8008eca:	d003      	beq.n	8008ed4 <get_glyph_dsc_id+0x74>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8008ecc:	2a01      	cmp	r2, #1
 8008ece:	d018      	beq.n	8008f02 <get_glyph_dsc_id+0xa2>
        uint32_t glyph_id = 0;
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7f2      	b.n	8008eba <get_glyph_dsc_id+0x5a>
            uint16_t key = rcp;
 8008ed4:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8008ed8:	6899      	ldr	r1, [r3, #8]
 8008eda:	8a1a      	ldrh	r2, [r3, #16]
 8008edc:	4b1a      	ldr	r3, [pc, #104]	; (8008f48 <get_glyph_dsc_id+0xe8>)
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	f10d 000e 	add.w	r0, sp, #14
 8008ee6:	f001 feb5 	bl	800ac54 <_lv_utils_bsearch>
            if(p) {
 8008eea:	4602      	mov	r2, r0
 8008eec:	b138      	cbz	r0, 8008efe <get_glyph_dsc_id+0x9e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	441e      	add	r6, r3
 8008ef2:	68b0      	ldr	r0, [r6, #8]
 8008ef4:	1a12      	subs	r2, r2, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8008ef6:	88f0      	ldrh	r0, [r6, #6]
 8008ef8:	eb00 0062 	add.w	r0, r0, r2, asr #1
 8008efc:	e7dd      	b.n	8008eba <get_glyph_dsc_id+0x5a>
        uint32_t glyph_id = 0;
 8008efe:	2000      	movs	r0, #0
 8008f00:	e7db      	b.n	8008eba <get_glyph_dsc_id+0x5a>
            uint16_t key = rcp;
 8008f02:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8008f06:	6899      	ldr	r1, [r3, #8]
 8008f08:	8a1a      	ldrh	r2, [r3, #16]
 8008f0a:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <get_glyph_dsc_id+0xe8>)
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	2302      	movs	r3, #2
 8008f10:	f10d 000e 	add.w	r0, sp, #14
 8008f14:	f001 fe9e 	bl	800ac54 <_lv_utils_bsearch>
            if(p) {
 8008f18:	b140      	cbz	r0, 8008f2c <get_glyph_dsc_id+0xcc>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	441e      	add	r6, r3
 8008f1e:	68b3      	ldr	r3, [r6, #8]
 8008f20:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 8008f22:	68f3      	ldr	r3, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8008f24:	88f0      	ldrh	r0, [r6, #6]
 8008f26:	5a9b      	ldrh	r3, [r3, r2]
 8008f28:	4418      	add	r0, r3
 8008f2a:	e7c6      	b.n	8008eba <get_glyph_dsc_id+0x5a>
        uint32_t glyph_id = 0;
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e7c4      	b.n	8008eba <get_glyph_dsc_id+0x5a>
 8008f30:	2200      	movs	r2, #0
 8008f32:	e7a2      	b.n	8008e7a <get_glyph_dsc_id+0x1a>
    if(fdsc->cache) {
 8008f34:	b137      	cbz	r7, 8008f44 <get_glyph_dsc_id+0xe4>
        fdsc->cache->last_letter = letter;
 8008f36:	603d      	str	r5, [r7, #0]
        fdsc->cache->last_glyph_id = 0;
 8008f38:	6963      	ldr	r3, [r4, #20]
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	6058      	str	r0, [r3, #4]
 8008f3e:	e7c1      	b.n	8008ec4 <get_glyph_dsc_id+0x64>
    if(letter == '\0') return 0;
 8008f40:	4608      	mov	r0, r1
 8008f42:	e7bf      	b.n	8008ec4 <get_glyph_dsc_id+0x64>
    return 0;
 8008f44:	2000      	movs	r0, #0
 8008f46:	e7bd      	b.n	8008ec4 <get_glyph_dsc_id+0x64>
 8008f48:	08008e59 	.word	0x08008e59

08008f4c <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8008f4c:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
 8008f4e:	7cd8      	ldrb	r0, [r3, #19]
 8008f50:	f010 0f20 	tst.w	r0, #32
 8008f54:	d139      	bne.n	8008fca <get_kern_value+0x7e>
{
 8008f56:	b530      	push	{r4, r5, lr}
 8008f58:	b085      	sub	sp, #20
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8008f5a:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
 8008f5c:	7ae3      	ldrb	r3, [r4, #11]
 8008f5e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 8008f62:	d004      	beq.n	8008f6e <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
 8008f64:	2b40      	cmp	r3, #64	; 0x40
 8008f66:	d01a      	beq.n	8008f9e <get_kern_value+0x52>
    int8_t value = 0;
 8008f68:	2000      	movs	r0, #0
}
 8008f6a:	b005      	add	sp, #20
 8008f6c:	bd30      	pop	{r4, r5, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
 8008f6e:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8008f70:	0212      	lsls	r2, r2, #8
 8008f72:	b293      	uxth	r3, r2
 8008f74:	185a      	adds	r2, r3, r1
 8008f76:	f8ad 200c 	strh.w	r2, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8008f7a:	68a2      	ldr	r2, [r4, #8]
 8008f7c:	4b1c      	ldr	r3, [pc, #112]	; (8008ff0 <get_kern_value+0xa4>)
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2302      	movs	r3, #2
 8008f82:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8008f86:	4629      	mov	r1, r5
 8008f88:	a803      	add	r0, sp, #12
 8008f8a:	f001 fe63 	bl	800ac54 <_lv_utils_bsearch>
            if(kid_p) {
 8008f8e:	b120      	cbz	r0, 8008f9a <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
 8008f90:	1b43      	subs	r3, r0, r5
 8008f92:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 8008f94:	6862      	ldr	r2, [r4, #4]
 8008f96:	56d0      	ldrsb	r0, [r2, r3]
 8008f98:	e7e7      	b.n	8008f6a <get_kern_value+0x1e>
    int8_t value = 0;
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e7e5      	b.n	8008f6a <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
 8008f9e:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8008fa0:	eb01 4202 	add.w	r2, r1, r2, lsl #16
 8008fa4:	9203      	str	r2, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8008fa6:	68a2      	ldr	r2, [r4, #8]
 8008fa8:	4b12      	ldr	r3, [pc, #72]	; (8008ff4 <get_kern_value+0xa8>)
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	2304      	movs	r3, #4
 8008fae:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	a803      	add	r0, sp, #12
 8008fb6:	f001 fe4d 	bl	800ac54 <_lv_utils_bsearch>
            if(kid_p) {
 8008fba:	b120      	cbz	r0, 8008fc6 <get_kern_value+0x7a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8008fbc:	1b43      	subs	r3, r0, r5
 8008fbe:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
 8008fc0:	6862      	ldr	r2, [r4, #4]
 8008fc2:	56d0      	ldrsb	r0, [r2, r3]
 8008fc4:	e7d1      	b.n	8008f6a <get_kern_value+0x1e>
    int8_t value = 0;
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e7cf      	b.n	8008f6a <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8008fca:	68db      	ldr	r3, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8008fcc:	6858      	ldr	r0, [r3, #4]
 8008fce:	5c41      	ldrb	r1, [r0, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8008fd0:	6898      	ldr	r0, [r3, #8]
 8008fd2:	5c82      	ldrb	r2, [r0, r2]
        if(left_class > 0 && right_class > 0) {
 8008fd4:	b141      	cbz	r1, 8008fe8 <get_kern_value+0x9c>
 8008fd6:	b14a      	cbz	r2, 8008fec <get_kern_value+0xa0>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	3901      	subs	r1, #1
 8008fdc:	7b5b      	ldrb	r3, [r3, #13]
 8008fde:	3a01      	subs	r2, #1
 8008fe0:	fb03 2201 	mla	r2, r3, r1, r2
 8008fe4:	5680      	ldrsb	r0, [r0, r2]
 8008fe6:	4770      	bx	lr
    int8_t value = 0;
 8008fe8:	2000      	movs	r0, #0
 8008fea:	4770      	bx	lr
 8008fec:	2000      	movs	r0, #0
}
 8008fee:	4770      	bx	lr
 8008ff0:	08008e31 	.word	0x08008e31
 8008ff4:	08008e45 	.word	0x08008e45

08008ff8 <lv_font_get_bitmap_fmt_txt>:
{
 8008ff8:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8008ffa:	2909      	cmp	r1, #9
 8008ffc:	d010      	beq.n	8009020 <lv_font_get_bitmap_fmt_txt+0x28>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8008ffe:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8009000:	f7ff ff2e 	bl	8008e60 <get_glyph_dsc_id>
    if(!gid) return NULL;
 8009004:	4602      	mov	r2, r0
 8009006:	b168      	cbz	r0, 8009024 <lv_font_get_bitmap_fmt_txt+0x2c>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8009008:	6861      	ldr	r1, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 800900a:	7ce3      	ldrb	r3, [r4, #19]
 800900c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8009010:	d10a      	bne.n	8009028 <lv_font_get_bitmap_fmt_txt+0x30>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8009012:	6820      	ldr	r0, [r4, #0]
 8009014:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
 8009018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800901c:	4418      	add	r0, r3
}
 800901e:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8009020:	2120      	movs	r1, #32
 8009022:	e7ec      	b.n	8008ffe <lv_font_get_bitmap_fmt_txt+0x6>
    if(!gid) return NULL;
 8009024:	2000      	movs	r0, #0
 8009026:	e7fa      	b.n	800901e <lv_font_get_bitmap_fmt_txt+0x26>
        return NULL;
 8009028:	2000      	movs	r0, #0
 800902a:	e7f8      	b.n	800901e <lv_font_get_bitmap_fmt_txt+0x26>

0800902c <lv_font_get_glyph_dsc_fmt_txt>:
{
 800902c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009030:	4607      	mov	r7, r0
 8009032:	460c      	mov	r4, r1
 8009034:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
 8009036:	2a09      	cmp	r2, #9
 8009038:	d012      	beq.n	8009060 <lv_font_get_glyph_dsc_fmt_txt+0x34>
 800903a:	4611      	mov	r1, r2
    bool is_tab = false;
 800903c:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 800903e:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ff0d 	bl	8008e60 <get_glyph_dsc_id>
    if(!gid) return false;
 8009046:	4680      	mov	r8, r0
 8009048:	2800      	cmp	r0, #0
 800904a:	d03c      	beq.n	80090c6 <lv_font_get_glyph_dsc_fmt_txt+0x9a>
    if(fdsc->kern_dsc) {
 800904c:	68f3      	ldr	r3, [r6, #12]
 800904e:	b183      	cbz	r3, 8009072 <lv_font_get_glyph_dsc_fmt_txt+0x46>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8009050:	4649      	mov	r1, r9
 8009052:	4638      	mov	r0, r7
 8009054:	f7ff ff04 	bl	8008e60 <get_glyph_dsc_id>
        if(gid_next) {
 8009058:	4602      	mov	r2, r0
 800905a:	b920      	cbnz	r0, 8009066 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t kvalue = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	e009      	b.n	8009074 <lv_font_get_glyph_dsc_fmt_txt+0x48>
        is_tab = true;
 8009060:	2501      	movs	r5, #1
        unicode_letter = ' ';
 8009062:	2120      	movs	r1, #32
 8009064:	e7eb      	b.n	800903e <lv_font_get_glyph_dsc_fmt_txt+0x12>
            kvalue = get_kern_value(font, gid, gid_next);
 8009066:	4641      	mov	r1, r8
 8009068:	4638      	mov	r0, r7
 800906a:	f7ff ff6f 	bl	8008f4c <get_kern_value>
 800906e:	4603      	mov	r3, r0
 8009070:	e000      	b.n	8009074 <lv_font_get_glyph_dsc_fmt_txt+0x48>
    int8_t kvalue = 0;
 8009072:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8009074:	6871      	ldr	r1, [r6, #4]
 8009076:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800907a:	8a30      	ldrh	r0, [r6, #16]
 800907c:	fb00 f303 	mul.w	r3, r0, r3
 8009080:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8009082:	884a      	ldrh	r2, [r1, #2]
 8009084:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
 8009088:	b105      	cbz	r5, 800908c <lv_font_get_glyph_dsc_fmt_txt+0x60>
 800908a:	0052      	lsls	r2, r2, #1
    adv_w += kv;
 800908c:	4413      	add	r3, r2
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800908e:	3308      	adds	r3, #8
 8009090:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8009092:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 8009094:	794b      	ldrb	r3, [r1, #5]
 8009096:	8123      	strh	r3, [r4, #8]
    dsc_out->box_w = gdsc->box_w;
 8009098:	790a      	ldrb	r2, [r1, #4]
 800909a:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 800909c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 80090a0:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 80090a2:	f991 3007 	ldrsb.w	r3, [r1, #7]
 80090a6:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80090a8:	7cf3      	ldrb	r3, [r6, #19]
 80090aa:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80090ae:	7ba1      	ldrb	r1, [r4, #14]
 80090b0:	f363 0103 	bfi	r1, r3, #0, #4
 80090b4:	73a1      	strb	r1, [r4, #14]
    dsc_out->is_placeholder = false;
 80090b6:	b2cb      	uxtb	r3, r1
 80090b8:	f36f 1304 	bfc	r3, #4, #1
 80090bc:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80090be:	b135      	cbz	r5, 80090ce <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 80090c0:	0052      	lsls	r2, r2, #1
 80090c2:	80e2      	strh	r2, [r4, #6]
 80090c4:	e000      	b.n	80090c8 <lv_font_get_glyph_dsc_fmt_txt+0x9c>
    if(!gid) return false;
 80090c6:	2500      	movs	r5, #0
}
 80090c8:	4628      	mov	r0, r5
 80090ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
 80090ce:	2501      	movs	r5, #1
 80090d0:	e7fa      	b.n	80090c8 <lv_font_get_glyph_dsc_fmt_txt+0x9c>
	...

080090d4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 80090d4:	4b01      	ldr	r3, [pc, #4]	; (80090dc <lv_disp_get_default+0x8>)
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20001e54 	.word	0x20001e54

080090e0 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 80090e0:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 80090e2:	4603      	mov	r3, r0
 80090e4:	b158      	cbz	r0, 80090fe <lv_disp_get_hor_res+0x1e>

    if(disp == NULL) {
 80090e6:	b18b      	cbz	r3, 800910c <lv_disp_get_hor_res+0x2c>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	7c13      	ldrb	r3, [r2, #16]
 80090ec:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d008      	beq.n	8009106 <lv_disp_get_hor_res+0x26>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d006      	beq.n	8009106 <lv_disp_get_hor_res+0x26>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
            default:
                return disp->driver->hor_res;
 80090f8:	f9b2 0000 	ldrsh.w	r0, [r2]
 80090fc:	e005      	b.n	800910a <lv_disp_get_hor_res+0x2a>
    if(disp == NULL) disp = lv_disp_get_default();
 80090fe:	f7ff ffe9 	bl	80090d4 <lv_disp_get_default>
 8009102:	4603      	mov	r3, r0
 8009104:	e7ef      	b.n	80090e6 <lv_disp_get_hor_res+0x6>
                return disp->driver->ver_res;
 8009106:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
        }
    }
}
 800910a:	bd08      	pop	{r3, pc}
        return 0;
 800910c:	2000      	movs	r0, #0
 800910e:	e7fc      	b.n	800910a <lv_disp_get_hor_res+0x2a>

08009110 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 8009110:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8009112:	4603      	mov	r3, r0
 8009114:	b158      	cbz	r0, 800912e <lv_disp_get_ver_res+0x1e>

    if(disp == NULL) {
 8009116:	b18b      	cbz	r3, 800913c <lv_disp_get_ver_res+0x2c>
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	7c13      	ldrb	r3, [r2, #16]
 800911c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009120:	2b01      	cmp	r3, #1
 8009122:	d008      	beq.n	8009136 <lv_disp_get_ver_res+0x26>
 8009124:	2b03      	cmp	r3, #3
 8009126:	d006      	beq.n	8009136 <lv_disp_get_ver_res+0x26>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
            default:
                return disp->driver->ver_res;
 8009128:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800912c:	e005      	b.n	800913a <lv_disp_get_ver_res+0x2a>
    if(disp == NULL) disp = lv_disp_get_default();
 800912e:	f7ff ffd1 	bl	80090d4 <lv_disp_get_default>
 8009132:	4603      	mov	r3, r0
 8009134:	e7ef      	b.n	8009116 <lv_disp_get_ver_res+0x6>
                return disp->driver->hor_res;
 8009136:	f9b2 0000 	ldrsh.w	r0, [r2]
        }
    }
}
 800913a:	bd08      	pop	{r3, pc}
        return 0;
 800913c:	2000      	movs	r0, #0
 800913e:	e7fc      	b.n	800913a <lv_disp_get_ver_res+0x2a>

08009140 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 8009140:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8009142:	4603      	mov	r3, r0
 8009144:	b128      	cbz	r0, 8009152 <lv_disp_get_dpi+0x12>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8009146:	b143      	cbz	r3, 800915a <lv_disp_get_dpi+0x1a>
    return disp->driver->dpi;
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6918      	ldr	r0, [r3, #16]
 800914c:	f3c0 10c9 	ubfx	r0, r0, #7, #10
}
 8009150:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 8009152:	f7ff ffbf 	bl	80090d4 <lv_disp_get_default>
 8009156:	4603      	mov	r3, r0
 8009158:	e7f5      	b.n	8009146 <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 800915a:	2082      	movs	r0, #130	; 0x82
 800915c:	e7f8      	b.n	8009150 <lv_disp_get_dpi+0x10>
	...

08009160 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8009160:	b508      	push	{r3, lr}
    if(indev == NULL)
 8009162:	b120      	cbz	r0, 800916e <lv_indev_get_next+0xe>
 8009164:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8009166:	4804      	ldr	r0, [pc, #16]	; (8009178 <lv_indev_get_next+0x18>)
 8009168:	f000 fd67 	bl	8009c3a <_lv_ll_get_next>
}
 800916c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800916e:	4802      	ldr	r0, [pc, #8]	; (8009178 <lv_indev_get_next+0x18>)
 8009170:	f000 fd5b 	bl	8009c2a <_lv_ll_get_head>
 8009174:	e7fa      	b.n	800916c <lv_indev_get_next+0xc>
 8009176:	bf00      	nop
 8009178:	20001ea8 	.word	0x20001ea8

0800917c <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 800917c:	4b03      	ldr	r3, [pc, #12]	; (800918c <lv_tick_inc+0x10>)
 800917e:	2200      	movs	r2, #0
 8009180:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8009182:	4a03      	ldr	r2, [pc, #12]	; (8009190 <lv_tick_inc+0x14>)
 8009184:	6813      	ldr	r3, [r2, #0]
 8009186:	4403      	add	r3, r0
 8009188:	6013      	str	r3, [r2, #0]
}
 800918a:	4770      	bx	lr
 800918c:	20001e5c 	.word	0x20001e5c
 8009190:	20001e58 	.word	0x20001e58

08009194 <lv_tick_get>:
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8009194:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <lv_tick_get+0x14>)
 8009196:	2201      	movs	r2, #1
 8009198:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 800919a:	4a04      	ldr	r2, [pc, #16]	; (80091ac <lv_tick_get+0x18>)
 800919c:	6810      	ldr	r0, [r2, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0f7      	beq.n	8009194 <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20001e5c 	.word	0x20001e5c
 80091ac:	20001e58 	.word	0x20001e58

080091b0 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 80091b0:	b510      	push	{r4, lr}
 80091b2:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 80091b4:	f7ff ffee 	bl	8009194 <lv_tick_get>

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 80091b8:	42a0      	cmp	r0, r4
 80091ba:	d301      	bcc.n	80091c0 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
 80091bc:	1b00      	subs	r0, r0, r4
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 80091be:	bd10      	pop	{r4, pc}
        prev_tick += act_time;
 80091c0:	1b00      	subs	r0, r0, r4
    return prev_tick;
 80091c2:	e7fc      	b.n	80091be <lv_tick_elaps+0xe>

080091c4 <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 80091c4:	b508      	push	{r3, lr}
    anim_list_changed = true;
 80091c6:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <anim_mark_list_change+0x24>)
 80091c8:	2201      	movs	r2, #1
 80091ca:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80091cc:	4807      	ldr	r0, [pc, #28]	; (80091ec <anim_mark_list_change+0x28>)
 80091ce:	f000 fd2c 	bl	8009c2a <_lv_ll_get_head>
 80091d2:	b120      	cbz	r0, 80091de <anim_mark_list_change+0x1a>
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
 80091d4:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <anim_mark_list_change+0x2c>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	f001 f971 	bl	800a4be <lv_timer_resume>
}
 80091dc:	bd08      	pop	{r3, pc}
        lv_timer_pause(_lv_anim_tmr);
 80091de:	4b04      	ldr	r3, [pc, #16]	; (80091f0 <anim_mark_list_change+0x2c>)
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	f001 f967 	bl	800a4b4 <lv_timer_pause>
 80091e6:	e7f9      	b.n	80091dc <anim_mark_list_change+0x18>
 80091e8:	20001e64 	.word	0x20001e64
 80091ec:	20001e6c 	.word	0x20001e6c
 80091f0:	20001e60 	.word	0x20001e60

080091f4 <anim_ready_handler>:
{
 80091f4:	b510      	push	{r4, lr}
 80091f6:	4604      	mov	r4, r0
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 80091f8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80091fc:	f013 0302 	ands.w	r3, r3, #2
 8009200:	d107      	bne.n	8009212 <anim_ready_handler+0x1e>
 8009202:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8009204:	b12a      	cbz	r2, 8009212 <anim_ready_handler+0x1e>
 8009206:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800920a:	428a      	cmp	r2, r1
 800920c:	d001      	beq.n	8009212 <anim_ready_handler+0x1e>
        a->repeat_cnt--;
 800920e:	3a01      	subs	r2, #1
 8009210:	8782      	strh	r2, [r0, #60]	; 0x3c
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8009212:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8009214:	b982      	cbnz	r2, 8009238 <anim_ready_handler+0x44>
 8009216:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009218:	b102      	cbz	r2, 800921c <anim_ready_handler+0x28>
 800921a:	b16b      	cbz	r3, 8009238 <anim_ready_handler+0x44>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800921c:	4621      	mov	r1, r4
 800921e:	4813      	ldr	r0, [pc, #76]	; (800926c <anim_ready_handler+0x78>)
 8009220:	f000 fd12 	bl	8009c48 <_lv_ll_remove>
        anim_mark_list_change();
 8009224:	f7ff ffce 	bl	80091c4 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 8009228:	68e3      	ldr	r3, [r4, #12]
 800922a:	b10b      	cbz	r3, 8009230 <anim_ready_handler+0x3c>
 800922c:	4620      	mov	r0, r4
 800922e:	4798      	blx	r3
        lv_mem_free(a);
 8009230:	4620      	mov	r0, r4
 8009232:	f000 fdb5 	bl	8009da0 <lv_mem_free>
 8009236:	e018      	b.n	800926a <anim_ready_handler+0x76>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8009238:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800923a:	4252      	negs	r2, r2
 800923c:	62e2      	str	r2, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 800923e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009240:	b19a      	cbz	r2, 800926a <anim_ready_handler+0x76>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8009242:	b913      	cbnz	r3, 800924a <anim_ready_handler+0x56>
 8009244:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009246:	4249      	negs	r1, r1
 8009248:	62e1      	str	r1, [r4, #44]	; 0x2c
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800924a:	fab3 f383 	clz	r3, r3
 800924e:	095b      	lsrs	r3, r3, #5
 8009250:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8009254:	f363 0141 	bfi	r1, r3, #1, #1
 8009258:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
            int32_t tmp    = a->start_value;
 800925c:	69e3      	ldr	r3, [r4, #28]
            a->start_value = a->end_value;
 800925e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009260:	61e1      	str	r1, [r4, #28]
            a->end_value   = tmp;
 8009262:	6263      	str	r3, [r4, #36]	; 0x24
            tmp = a->time;
 8009264:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            a->time = a->playback_time;
 8009266:	62a2      	str	r2, [r4, #40]	; 0x28
            a->playback_time = tmp;
 8009268:	6363      	str	r3, [r4, #52]	; 0x34
}
 800926a:	bd10      	pop	{r4, pc}
 800926c:	20001e6c 	.word	0x20001e6c

08009270 <anim_timer>:
{
 8009270:	b538      	push	{r3, r4, r5, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8009272:	4b3b      	ldr	r3, [pc, #236]	; (8009360 <anim_timer+0xf0>)
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f7ff ff9b 	bl	80091b0 <lv_tick_elaps>
 800927a:	4605      	mov	r5, r0
    anim_run_round = anim_run_round ? false : true;
 800927c:	4a39      	ldr	r2, [pc, #228]	; (8009364 <anim_timer+0xf4>)
 800927e:	7813      	ldrb	r3, [r2, #0]
 8009280:	f083 0301 	eor.w	r3, r3, #1
 8009284:	7013      	strb	r3, [r2, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8009286:	4838      	ldr	r0, [pc, #224]	; (8009368 <anim_timer+0xf8>)
 8009288:	f000 fccf 	bl	8009c2a <_lv_ll_get_head>
 800928c:	4604      	mov	r4, r0
    while(a != NULL) {
 800928e:	e025      	b.n	80092dc <anim_timer+0x6c>
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8009290:	2900      	cmp	r1, #0
 8009292:	db3f      	blt.n	8009314 <anim_timer+0xa4>
                if(a->early_apply == 0 && a->get_value_cb) {
 8009294:	f012 0f01 	tst.w	r2, #1
 8009298:	d109      	bne.n	80092ae <anim_timer+0x3e>
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	b13b      	cbz	r3, 80092ae <anim_timer+0x3e>
                    int32_t v_ofs = a->get_value_cb(a);
 800929e:	4620      	mov	r0, r4
 80092a0:	4798      	blx	r3
                    a->start_value += v_ofs;
 80092a2:	69e3      	ldr	r3, [r4, #28]
 80092a4:	4403      	add	r3, r0
 80092a6:	61e3      	str	r3, [r4, #28]
                    a->end_value += v_ofs;
 80092a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092aa:	4418      	add	r0, r3
 80092ac:	6260      	str	r0, [r4, #36]	; 0x24
                if(a->start_cb) a->start_cb(a);
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	b10b      	cbz	r3, 80092b6 <anim_timer+0x46>
 80092b2:	4620      	mov	r0, r4
 80092b4:	4798      	blx	r3
                a->start_cb_called = 1;
 80092b6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80092ba:	f043 0308 	orr.w	r3, r3, #8
 80092be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80092c2:	e027      	b.n	8009314 <anim_timer+0xa4>
                if(a->act_time >= a->time) {
 80092c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80092c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092c8:	429a      	cmp	r2, r3
 80092ca:	da3a      	bge.n	8009342 <anim_timer+0xd2>
        if(anim_list_changed)
 80092cc:	4b27      	ldr	r3, [pc, #156]	; (800936c <anim_timer+0xfc>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d03a      	beq.n	800934a <anim_timer+0xda>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80092d4:	4824      	ldr	r0, [pc, #144]	; (8009368 <anim_timer+0xf8>)
 80092d6:	f000 fca8 	bl	8009c2a <_lv_ll_get_head>
 80092da:	4604      	mov	r4, r0
    while(a != NULL) {
 80092dc:	2c00      	cmp	r4, #0
 80092de:	d03a      	beq.n	8009356 <anim_timer+0xe6>
        anim_list_changed = false;
 80092e0:	4b22      	ldr	r3, [pc, #136]	; (800936c <anim_timer+0xfc>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
        if(a->run_round != anim_run_round) {
 80092e6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80092ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80092ee:	4a1d      	ldr	r2, [pc, #116]	; (8009364 <anim_timer+0xf4>)
 80092f0:	7812      	ldrb	r2, [r2, #0]
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d0ea      	beq.n	80092cc <anim_timer+0x5c>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 80092f6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80092fa:	f362 0382 	bfi	r3, r2, #2, #1
 80092fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            int32_t new_act_time = a->act_time + elaps;
 8009302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009304:	1959      	adds	r1, r3, r5
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8009306:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800930a:	f012 0f08 	tst.w	r2, #8
 800930e:	d101      	bne.n	8009314 <anim_timer+0xa4>
 8009310:	2b00      	cmp	r3, #0
 8009312:	ddbd      	ble.n	8009290 <anim_timer+0x20>
            a->act_time += elaps;
 8009314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009316:	442b      	add	r3, r5
 8009318:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
 800931a:	2b00      	cmp	r3, #0
 800931c:	dbd6      	blt.n	80092cc <anim_timer+0x5c>
                if(a->act_time > a->time) a->act_time = a->time;
 800931e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009320:	4293      	cmp	r3, r2
 8009322:	dd00      	ble.n	8009326 <anim_timer+0xb6>
 8009324:	62e2      	str	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 8009326:	69a3      	ldr	r3, [r4, #24]
 8009328:	4620      	mov	r0, r4
 800932a:	4798      	blx	r3
                if(new_value != a->current_value) {
 800932c:	6a23      	ldr	r3, [r4, #32]
 800932e:	4283      	cmp	r3, r0
 8009330:	d0c8      	beq.n	80092c4 <anim_timer+0x54>
                    a->current_value = new_value;
 8009332:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0c4      	beq.n	80092c4 <anim_timer+0x54>
 800933a:	4601      	mov	r1, r0
 800933c:	6820      	ldr	r0, [r4, #0]
 800933e:	4798      	blx	r3
 8009340:	e7c0      	b.n	80092c4 <anim_timer+0x54>
                    anim_ready_handler(a);
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff ff56 	bl	80091f4 <anim_ready_handler>
 8009348:	e7c0      	b.n	80092cc <anim_timer+0x5c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800934a:	4621      	mov	r1, r4
 800934c:	4806      	ldr	r0, [pc, #24]	; (8009368 <anim_timer+0xf8>)
 800934e:	f000 fc74 	bl	8009c3a <_lv_ll_get_next>
 8009352:	4604      	mov	r4, r0
 8009354:	e7c2      	b.n	80092dc <anim_timer+0x6c>
    last_timer_run = lv_tick_get();
 8009356:	f7ff ff1d 	bl	8009194 <lv_tick_get>
 800935a:	4b01      	ldr	r3, [pc, #4]	; (8009360 <anim_timer+0xf0>)
 800935c:	6018      	str	r0, [r3, #0]
}
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20001e68 	.word	0x20001e68
 8009364:	20001e65 	.word	0x20001e65
 8009368:	20001e6c 	.word	0x20001e6c
 800936c:	20001e64 	.word	0x20001e64

08009370 <lv_anim_path_linear>:
{
 8009370:	b510      	push	{r4, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8009376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	2300      	movs	r3, #0
 800937e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009380:	4619      	mov	r1, r3
 8009382:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009384:	f000 fcd8 	bl	8009d38 <lv_map>
    new_value = step * (a->end_value - a->start_value);
 8009388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800938a:	69e2      	ldr	r2, [r4, #28]
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	fb03 f000 	mul.w	r0, r3, r0
}
 8009392:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8009396:	b002      	add	sp, #8
 8009398:	bd10      	pop	{r4, pc}
	...

0800939c <_lv_anim_core_init>:
{
 800939c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800939e:	2140      	movs	r1, #64	; 0x40
 80093a0:	4807      	ldr	r0, [pc, #28]	; (80093c0 <_lv_anim_core_init+0x24>)
 80093a2:	f000 fc1b 	bl	8009bdc <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 80093a6:	2200      	movs	r2, #0
 80093a8:	211e      	movs	r1, #30
 80093aa:	4806      	ldr	r0, [pc, #24]	; (80093c4 <_lv_anim_core_init+0x28>)
 80093ac:	f000 ff84 	bl	800a2b8 <lv_timer_create>
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <_lv_anim_core_init+0x2c>)
 80093b2:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 80093b4:	f7ff ff06 	bl	80091c4 <anim_mark_list_change>
    anim_list_changed = false;
 80093b8:	4b04      	ldr	r3, [pc, #16]	; (80093cc <_lv_anim_core_init+0x30>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]
}
 80093be:	bd08      	pop	{r3, pc}
 80093c0:	20001e6c 	.word	0x20001e6c
 80093c4:	08009271 	.word	0x08009271
 80093c8:	20001e60 	.word	0x20001e60
 80093cc:	20001e64 	.word	0x20001e64

080093d0 <lv_anim_init>:
{
 80093d0:	b510      	push	{r4, lr}
 80093d2:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 80093d4:	2140      	movs	r1, #64	; 0x40
 80093d6:	f000 fe8b 	bl	800a0f0 <lv_memset_00>
    a->time = 500;
 80093da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80093de:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	61e3      	str	r3, [r4, #28]
    a->end_value = 100;
 80093e4:	2364      	movs	r3, #100	; 0x64
 80093e6:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
 80093e8:	2301      	movs	r3, #1
 80093ea:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <lv_anim_init+0x30>)
 80093ee:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
 80093f0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80093f4:	f043 0301 	orr.w	r3, r3, #1
 80093f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80093fc:	bd10      	pop	{r4, pc}
 80093fe:	bf00      	nop
 8009400:	08009371 	.word	0x08009371

08009404 <lv_anim_del>:
{
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800940c:	4813      	ldr	r0, [pc, #76]	; (800945c <lv_anim_del+0x58>)
 800940e:	f000 fc0c 	bl	8009c2a <_lv_ll_get_head>
 8009412:	4604      	mov	r4, r0
    bool del = false;
 8009414:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
 8009418:	e004      	b.n	8009424 <lv_anim_del+0x20>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800941a:	6863      	ldr	r3, [r4, #4]
 800941c:	42bb      	cmp	r3, r7
 800941e:	d00d      	beq.n	800943c <lv_anim_del+0x38>
 8009420:	b167      	cbz	r7, 800943c <lv_anim_del+0x38>
            del = true;
 8009422:	462c      	mov	r4, r5
    while(a != NULL) {
 8009424:	b1b4      	cbz	r4, 8009454 <lv_anim_del+0x50>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8009426:	4621      	mov	r1, r4
 8009428:	480c      	ldr	r0, [pc, #48]	; (800945c <lv_anim_del+0x58>)
 800942a:	f000 fc06 	bl	8009c3a <_lv_ll_get_next>
 800942e:	4605      	mov	r5, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	42b3      	cmp	r3, r6
 8009434:	d0f1      	beq.n	800941a <lv_anim_del+0x16>
 8009436:	2e00      	cmp	r6, #0
 8009438:	d1f3      	bne.n	8009422 <lv_anim_del+0x1e>
 800943a:	e7ee      	b.n	800941a <lv_anim_del+0x16>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 800943c:	4621      	mov	r1, r4
 800943e:	4807      	ldr	r0, [pc, #28]	; (800945c <lv_anim_del+0x58>)
 8009440:	f000 fc02 	bl	8009c48 <_lv_ll_remove>
            lv_mem_free(a);
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fcab 	bl	8009da0 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 800944a:	f7ff febb 	bl	80091c4 <anim_mark_list_change>
            del = true;
 800944e:	f04f 0801 	mov.w	r8, #1
 8009452:	e7e6      	b.n	8009422 <lv_anim_del+0x1e>
}
 8009454:	4640      	mov	r0, r8
 8009456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800945a:	bf00      	nop
 800945c:	20001e6c 	.word	0x20001e6c

08009460 <lv_anim_start>:
{
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 8009464:	6841      	ldr	r1, [r0, #4]
 8009466:	b111      	cbz	r1, 800946e <lv_anim_start+0xe>
 8009468:	6800      	ldr	r0, [r0, #0]
 800946a:	f7ff ffcb 	bl	8009404 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 800946e:	481c      	ldr	r0, [pc, #112]	; (80094e0 <lv_anim_start+0x80>)
 8009470:	f000 fc2c 	bl	8009ccc <_lv_ll_is_empty>
 8009474:	bb58      	cbnz	r0, 80094ce <lv_anim_start+0x6e>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8009476:	481a      	ldr	r0, [pc, #104]	; (80094e0 <lv_anim_start+0x80>)
 8009478:	f000 fbb8 	bl	8009bec <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 800947c:	4605      	mov	r5, r0
 800947e:	b358      	cbz	r0, 80094d8 <lv_anim_start+0x78>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8009480:	2240      	movs	r2, #64	; 0x40
 8009482:	4621      	mov	r1, r4
 8009484:	f000 fcb4 	bl	8009df0 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	42a3      	cmp	r3, r4
 800948c:	d025      	beq.n	80094da <lv_anim_start+0x7a>
    new_anim->run_round = anim_run_round;
 800948e:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8009492:	4a14      	ldr	r2, [pc, #80]	; (80094e4 <lv_anim_start+0x84>)
 8009494:	7812      	ldrb	r2, [r2, #0]
 8009496:	f362 0382 	bfi	r3, r2, #2, #1
 800949a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    if(new_anim->early_apply) {
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	f013 0f01 	tst.w	r3, #1
 80094a4:	d00f      	beq.n	80094c6 <lv_anim_start+0x66>
        if(new_anim->get_value_cb) {
 80094a6:	692b      	ldr	r3, [r5, #16]
 80094a8:	b13b      	cbz	r3, 80094ba <lv_anim_start+0x5a>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 80094aa:	4628      	mov	r0, r5
 80094ac:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 80094ae:	69eb      	ldr	r3, [r5, #28]
 80094b0:	4403      	add	r3, r0
 80094b2:	61eb      	str	r3, [r5, #28]
            new_anim->end_value += v_ofs;
 80094b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b6:	4403      	add	r3, r0
 80094b8:	626b      	str	r3, [r5, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 80094ba:	686b      	ldr	r3, [r5, #4]
 80094bc:	b11b      	cbz	r3, 80094c6 <lv_anim_start+0x66>
 80094be:	6828      	ldr	r0, [r5, #0]
 80094c0:	b108      	cbz	r0, 80094c6 <lv_anim_start+0x66>
 80094c2:	69e9      	ldr	r1, [r5, #28]
 80094c4:	4798      	blx	r3
    anim_mark_list_change();
 80094c6:	f7ff fe7d 	bl	80091c4 <anim_mark_list_change>
}
 80094ca:	4628      	mov	r0, r5
 80094cc:	bd38      	pop	{r3, r4, r5, pc}
        last_timer_run = lv_tick_get();
 80094ce:	f7ff fe61 	bl	8009194 <lv_tick_get>
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <lv_anim_start+0x88>)
 80094d4:	6018      	str	r0, [r3, #0]
 80094d6:	e7ce      	b.n	8009476 <lv_anim_start+0x16>
    LV_ASSERT_MALLOC(new_anim);
 80094d8:	e7fe      	b.n	80094d8 <lv_anim_start+0x78>
    if(a->var == a) new_anim->var = new_anim;
 80094da:	602d      	str	r5, [r5, #0]
 80094dc:	e7d7      	b.n	800948e <lv_anim_start+0x2e>
 80094de:	bf00      	nop
 80094e0:	20001e6c 	.word	0x20001e6c
 80094e4:	20001e65 	.word	0x20001e65
 80094e8:	20001e68 	.word	0x20001e68

080094ec <lv_anim_speed_to_time>:
{
 80094ec:	4603      	mov	r3, r0
    uint32_t d    = LV_ABS(start - end);
 80094ee:	1a8a      	subs	r2, r1, r2
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	bfb8      	it	lt
 80094f4:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 80094f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80094fa:	fb01 f202 	mul.w	r2, r1, r2
 80094fe:	fbb2 f0f0 	udiv	r0, r2, r0
    if(time == 0) {
 8009502:	429a      	cmp	r2, r3
 8009504:	d200      	bcs.n	8009508 <lv_anim_speed_to_time+0x1c>
        time++;
 8009506:	3001      	adds	r0, #1
}
 8009508:	4770      	bx	lr

0800950a <lv_anim_path_ease_out>:
{
 800950a:	b530      	push	{r4, r5, lr}
 800950c:	b083      	sub	sp, #12
 800950e:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8009510:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009514:	9500      	str	r5, [sp, #0]
 8009516:	2300      	movs	r3, #0
 8009518:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800951a:	4619      	mov	r1, r3
 800951c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800951e:	f000 fc0b 	bl	8009d38 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 8009522:	9500      	str	r5, [sp, #0]
 8009524:	f240 33b6 	movw	r3, #950	; 0x3b6
 8009528:	f44f 7261 	mov.w	r2, #900	; 0x384
 800952c:	2100      	movs	r1, #0
 800952e:	f000 fbda 	bl	8009ce6 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 8009532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009534:	69e2      	ldr	r2, [r4, #28]
 8009536:	1a9b      	subs	r3, r3, r2
 8009538:	fb03 f000 	mul.w	r0, r3, r0
}
 800953c:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8009540:	b003      	add	sp, #12
 8009542:	bd30      	pop	{r4, r5, pc}

08009544 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 8009544:	b500      	push	{lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8009546:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800954a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800954e:	1a9b      	subs	r3, r3, r2
 8009550:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8009554:	f343 0e4f 	sbfx	lr, r3, #1, #16

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 8009558:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800955c:	fa13 f282 	uxtah	r2, r3, r2
 8009560:	fa1f fc82 	uxth.w	ip, r2
    lv_coord_t cy = area->y1 + r;
 8009564:	8842      	ldrh	r2, [r0, #2]
 8009566:	4413      	add	r3, r2
 8009568:	b29b      	uxth	r3, r3

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 800956a:	880a      	ldrh	r2, [r1, #0]
 800956c:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t py = p->y - cy;
 8009570:	8849      	ldrh	r1, [r1, #2]
 8009572:	1acb      	subs	r3, r1, r3

    uint32_t r_sqrd = r * r;
 8009574:	fb0e fe0e 	mul.w	lr, lr, lr
    uint32_t dist = (px * px) + (py * py);
 8009578:	fb13 f303 	smulbb	r3, r3, r3
 800957c:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
 8009580:	4596      	cmp	lr, r2
 8009582:	d302      	bcc.n	800958a <lv_point_within_circle+0x46>
        return true;
 8009584:	2001      	movs	r0, #1
    else
        return false;
}
 8009586:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800958a:	2000      	movs	r0, #0
 800958c:	e7fb      	b.n	8009586 <lv_point_within_circle+0x42>

0800958e <lv_area_set>:
    area_p->x1 = x1;
 800958e:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8009590:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 8009592:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 8009594:	f9bd 3000 	ldrsh.w	r3, [sp]
 8009598:	80c3      	strh	r3, [r0, #6]
}
 800959a:	4770      	bx	lr

0800959c <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 800959c:	8803      	ldrh	r3, [r0, #0]
 800959e:	440b      	add	r3, r1
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	3b01      	subs	r3, #1
 80095a4:	8083      	strh	r3, [r0, #4]
}
 80095a6:	4770      	bx	lr

080095a8 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 80095a8:	8843      	ldrh	r3, [r0, #2]
 80095aa:	440b      	add	r3, r1
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	80c3      	strh	r3, [r0, #6]
}
 80095b2:	4770      	bx	lr

080095b4 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80095b4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80095b8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80095bc:	1ad2      	subs	r2, r2, r3
 80095be:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80095c2:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80095c6:	1a18      	subs	r0, r3, r0
 80095c8:	3001      	adds	r0, #1
}
 80095ca:	fb02 0000 	mla	r0, r2, r0, r0
 80095ce:	4770      	bx	lr

080095d0 <lv_area_increase>:
    area->x1 -= w_extra;
 80095d0:	b289      	uxth	r1, r1
 80095d2:	8803      	ldrh	r3, [r0, #0]
 80095d4:	1a5b      	subs	r3, r3, r1
 80095d6:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 80095d8:	8883      	ldrh	r3, [r0, #4]
 80095da:	4419      	add	r1, r3
 80095dc:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 80095de:	b292      	uxth	r2, r2
 80095e0:	8843      	ldrh	r3, [r0, #2]
 80095e2:	1a9b      	subs	r3, r3, r2
 80095e4:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 80095e6:	88c3      	ldrh	r3, [r0, #6]
 80095e8:	441a      	add	r2, r3
 80095ea:	80c2      	strh	r2, [r0, #6]
}
 80095ec:	4770      	bx	lr

080095ee <_lv_area_intersect>:
{
 80095ee:	b510      	push	{r4, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 80095f0:	f9b2 c000 	ldrsh.w	ip, [r2]
 80095f4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80095f8:	459c      	cmp	ip, r3
 80095fa:	bfb8      	it	lt
 80095fc:	469c      	movlt	ip, r3
 80095fe:	f8a0 c000 	strh.w	ip, [r0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8009602:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8009606:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800960a:	459e      	cmp	lr, r3
 800960c:	bfb8      	it	lt
 800960e:	469e      	movlt	lr, r3
 8009610:	f8a0 e002 	strh.w	lr, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8009614:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009618:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800961c:	42a3      	cmp	r3, r4
 800961e:	bfa8      	it	ge
 8009620:	4623      	movge	r3, r4
 8009622:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8009624:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8009628:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800962c:	428a      	cmp	r2, r1
 800962e:	bfa8      	it	ge
 8009630:	460a      	movge	r2, r1
 8009632:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8009634:	459c      	cmp	ip, r3
 8009636:	dc03      	bgt.n	8009640 <_lv_area_intersect+0x52>
 8009638:	4596      	cmp	lr, r2
 800963a:	dc03      	bgt.n	8009644 <_lv_area_intersect+0x56>
    bool union_ok = true;
 800963c:	2001      	movs	r0, #1
 800963e:	e000      	b.n	8009642 <_lv_area_intersect+0x54>
        union_ok = false;
 8009640:	2000      	movs	r0, #0
}
 8009642:	bd10      	pop	{r4, pc}
        union_ok = false;
 8009644:	2000      	movs	r0, #0
 8009646:	e7fc      	b.n	8009642 <_lv_area_intersect+0x54>

08009648 <_lv_area_is_point_on>:
{
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	4604      	mov	r4, r0
 800964e:	460d      	mov	r5, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8009650:	f9b1 1000 	ldrsh.w	r1, [r1]
 8009654:	f9b0 0000 	ldrsh.w	r0, [r0]
 8009658:	4281      	cmp	r1, r0
 800965a:	f2c0 80ae 	blt.w	80097ba <_lv_area_is_point_on+0x172>
 800965e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009662:	4299      	cmp	r1, r3
 8009664:	f300 80ac 	bgt.w	80097c0 <_lv_area_is_point_on+0x178>
 8009668:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 800966c:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
 8009670:	4576      	cmp	r6, lr
 8009672:	f2c0 80a7 	blt.w	80097c4 <_lv_area_is_point_on+0x17c>
 8009676:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800967a:	428e      	cmp	r6, r1
 800967c:	f300 80a4 	bgt.w	80097c8 <_lv_area_is_point_on+0x180>
    if(radius <= 0) {
 8009680:	2a00      	cmp	r2, #0
 8009682:	f340 80a3 	ble.w	80097cc <_lv_area_is_point_on+0x184>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009686:	b29b      	uxth	r3, r3
 8009688:	fa1f fc80 	uxth.w	ip, r0
 800968c:	eba3 030c 	sub.w	r3, r3, ip
 8009690:	b29b      	uxth	r3, r3
 8009692:	3301      	adds	r3, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8009694:	f3c3 36c0 	ubfx	r6, r3, #15, #1
 8009698:	fa06 f383 	sxtah	r3, r6, r3
 800969c:	105b      	asrs	r3, r3, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800969e:	b289      	uxth	r1, r1
 80096a0:	fa1f fe8e 	uxth.w	lr, lr
 80096a4:	eba1 010e 	sub.w	r1, r1, lr
 80096a8:	b289      	uxth	r1, r1
 80096aa:	3101      	adds	r1, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80096ac:	f3c1 36c0 	ubfx	r6, r1, #15, #1
 80096b0:	fa06 f181 	sxtah	r1, r6, r1
 80096b4:	1049      	asrs	r1, r1, #1
    lv_coord_t max_radius = LV_MIN(w, h);
 80096b6:	428b      	cmp	r3, r1
 80096b8:	bfa8      	it	ge
 80096ba:	460b      	movge	r3, r1
    if(radius > max_radius)
 80096bc:	429a      	cmp	r2, r3
 80096be:	dc00      	bgt.n	80096c2 <_lv_area_is_point_on+0x7a>
 80096c0:	4613      	mov	r3, r2
    corner_area.x1 = a_p->x1;
 80096c2:	f8ad 0000 	strh.w	r0, [sp]
    corner_area.x2 = a_p->x1 + radius;
 80096c6:	b29e      	uxth	r6, r3
 80096c8:	44b4      	add	ip, r6
 80096ca:	f8ad c004 	strh.w	ip, [sp, #4]
    corner_area.y1 = a_p->y1;
 80096ce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80096d2:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
 80096d6:	fa16 f383 	uxtah	r3, r6, r3
 80096da:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80096de:	2200      	movs	r2, #0
 80096e0:	4629      	mov	r1, r5
 80096e2:	4668      	mov	r0, sp
 80096e4:	f7ff ffb0 	bl	8009648 <_lv_area_is_point_on>
 80096e8:	b170      	cbz	r0, 8009708 <_lv_area_is_point_on+0xc0>
        corner_area.x2 += radius;
 80096ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80096ee:	4433      	add	r3, r6
 80096f0:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
 80096f4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80096f8:	440e      	add	r6, r1
 80096fa:	f8ad 6006 	strh.w	r6, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
 80096fe:	4629      	mov	r1, r5
 8009700:	4668      	mov	r0, sp
 8009702:	f7ff ff1f 	bl	8009544 <lv_point_within_circle>
 8009706:	e059      	b.n	80097bc <_lv_area_is_point_on+0x174>
    corner_area.y1 = a_p->y2 - radius;
 8009708:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800970c:	b293      	uxth	r3, r2
 800970e:	1b9b      	subs	r3, r3, r6
 8009710:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
 8009714:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8009718:	2200      	movs	r2, #0
 800971a:	4629      	mov	r1, r5
 800971c:	4668      	mov	r0, sp
 800971e:	f7ff ff93 	bl	8009648 <_lv_area_is_point_on>
 8009722:	b170      	cbz	r0, 8009742 <_lv_area_is_point_on+0xfa>
        corner_area.x2 += radius;
 8009724:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009728:	4433      	add	r3, r6
 800972a:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
 800972e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009732:	1b9e      	subs	r6, r3, r6
 8009734:	f8ad 6002 	strh.w	r6, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
 8009738:	4629      	mov	r1, r5
 800973a:	4668      	mov	r0, sp
 800973c:	f7ff ff02 	bl	8009544 <lv_point_within_circle>
 8009740:	e03c      	b.n	80097bc <_lv_area_is_point_on+0x174>
    corner_area.x1 = a_p->x2 - radius;
 8009742:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8009746:	b293      	uxth	r3, r2
 8009748:	1b9b      	subs	r3, r3, r6
 800974a:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
 800974e:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8009752:	2200      	movs	r2, #0
 8009754:	4629      	mov	r1, r5
 8009756:	4668      	mov	r0, sp
 8009758:	f7ff ff76 	bl	8009648 <_lv_area_is_point_on>
 800975c:	b170      	cbz	r0, 800977c <_lv_area_is_point_on+0x134>
        corner_area.x1 -= radius;
 800975e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009762:	1b9b      	subs	r3, r3, r6
 8009764:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
 8009768:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800976c:	1b9e      	subs	r6, r3, r6
 800976e:	f8ad 6002 	strh.w	r6, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
 8009772:	4629      	mov	r1, r5
 8009774:	4668      	mov	r0, sp
 8009776:	f7ff fee5 	bl	8009544 <lv_point_within_circle>
 800977a:	e01f      	b.n	80097bc <_lv_area_is_point_on+0x174>
    corner_area.y1 = a_p->y1;
 800977c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8009780:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
 8009784:	fa16 f383 	uxtah	r3, r6, r3
 8009788:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 800978c:	2200      	movs	r2, #0
 800978e:	4629      	mov	r1, r5
 8009790:	4668      	mov	r0, sp
 8009792:	f7ff ff59 	bl	8009648 <_lv_area_is_point_on>
 8009796:	b908      	cbnz	r0, 800979c <_lv_area_is_point_on+0x154>
    return true;
 8009798:	2001      	movs	r0, #1
 800979a:	e00f      	b.n	80097bc <_lv_area_is_point_on+0x174>
        corner_area.x1 -= radius;
 800979c:	f8bd 3000 	ldrh.w	r3, [sp]
 80097a0:	1b9b      	subs	r3, r3, r6
 80097a2:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
 80097a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80097aa:	441e      	add	r6, r3
 80097ac:	f8ad 6006 	strh.w	r6, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
 80097b0:	4629      	mov	r1, r5
 80097b2:	4668      	mov	r0, sp
 80097b4:	f7ff fec6 	bl	8009544 <lv_point_within_circle>
 80097b8:	e000      	b.n	80097bc <_lv_area_is_point_on+0x174>
        return false;
 80097ba:	2000      	movs	r0, #0
}
 80097bc:	b002      	add	sp, #8
 80097be:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 80097c0:	2000      	movs	r0, #0
 80097c2:	e7fb      	b.n	80097bc <_lv_area_is_point_on+0x174>
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7f9      	b.n	80097bc <_lv_area_is_point_on+0x174>
 80097c8:	2000      	movs	r0, #0
 80097ca:	e7f7      	b.n	80097bc <_lv_area_is_point_on+0x174>
        return true;
 80097cc:	2001      	movs	r0, #1
 80097ce:	e7f5      	b.n	80097bc <_lv_area_is_point_on+0x174>

080097d0 <_lv_area_is_in>:
{
 80097d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80097d8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80097dc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80097e0:	428b      	cmp	r3, r1
 80097e2:	db40      	blt.n	8009866 <_lv_area_is_in+0x96>
 80097e4:	4606      	mov	r6, r0
 80097e6:	4615      	mov	r5, r2
 80097e8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80097ec:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80097f0:	428a      	cmp	r2, r1
 80097f2:	db3c      	blt.n	800986e <_lv_area_is_in+0x9e>
 80097f4:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80097f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80097fc:	428f      	cmp	r7, r1
 80097fe:	dc38      	bgt.n	8009872 <_lv_area_is_in+0xa2>
       ain_p->y2 <= aholder_p->y2) {
 8009800:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8009804:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8009808:	4588      	cmp	r8, r1
 800980a:	dc34      	bgt.n	8009876 <_lv_area_is_in+0xa6>
    if(radius == 0) return true;
 800980c:	b90d      	cbnz	r5, 8009812 <_lv_area_is_in+0x42>
 800980e:	2001      	movs	r0, #1
 8009810:	e02a      	b.n	8009868 <_lv_area_is_in+0x98>
    p.x = ain_p->x1;
 8009812:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y1;
 8009816:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800981a:	462a      	mov	r2, r5
 800981c:	a901      	add	r1, sp, #4
 800981e:	4620      	mov	r0, r4
 8009820:	f7ff ff12 	bl	8009648 <_lv_area_is_point_on>
 8009824:	b300      	cbz	r0, 8009868 <_lv_area_is_in+0x98>
    p.x = ain_p->x2;
 8009826:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 800982a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800982e:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8009832:	462a      	mov	r2, r5
 8009834:	a901      	add	r1, sp, #4
 8009836:	4620      	mov	r0, r4
 8009838:	f7ff ff06 	bl	8009648 <_lv_area_is_point_on>
 800983c:	b1a0      	cbz	r0, 8009868 <_lv_area_is_in+0x98>
    p.x = ain_p->x1;
 800983e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8009842:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
 8009846:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800984a:	462a      	mov	r2, r5
 800984c:	a901      	add	r1, sp, #4
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff fefa 	bl	8009648 <_lv_area_is_point_on>
 8009854:	b140      	cbz	r0, 8009868 <_lv_area_is_in+0x98>
    p.x = ain_p->x2;
 8009856:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 800985a:	462a      	mov	r2, r5
 800985c:	a901      	add	r1, sp, #4
 800985e:	4620      	mov	r0, r4
 8009860:	f7ff fef2 	bl	8009648 <_lv_area_is_point_on>
 8009864:	e000      	b.n	8009868 <_lv_area_is_in+0x98>
    if(!is_in) return false;
 8009866:	2000      	movs	r0, #0
}
 8009868:	b002      	add	sp, #8
 800986a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!is_in) return false;
 800986e:	2000      	movs	r0, #0
 8009870:	e7fa      	b.n	8009868 <_lv_area_is_in+0x98>
 8009872:	2000      	movs	r0, #0
 8009874:	e7f8      	b.n	8009868 <_lv_area_is_in+0x98>
 8009876:	2000      	movs	r0, #0
 8009878:	e7f6      	b.n	8009868 <_lv_area_is_in+0x98>

0800987a <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 800987a:	4603      	mov	r3, r0
    path++; /*Ignore the driver letter*/
 800987c:	3001      	adds	r0, #1
    if(*path == ':') path++;
 800987e:	785a      	ldrb	r2, [r3, #1]
 8009880:	2a3a      	cmp	r2, #58	; 0x3a
 8009882:	d000      	beq.n	8009886 <lv_fs_get_real_path+0xc>

    return path;
}
 8009884:	4770      	bx	lr
    if(*path == ':') path++;
 8009886:	1c98      	adds	r0, r3, #2
    return path;
 8009888:	e7fc      	b.n	8009884 <lv_fs_get_real_path+0xa>

0800988a <lv_fs_read_cached>:
{
 800988a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988e:	b085      	sub	sp, #20
 8009890:	4604      	mov	r4, r0
 8009892:	460f      	mov	r7, r1
 8009894:	4615      	mov	r5, r2
 8009896:	4698      	mov	r8, r3
    uint32_t file_position = file_p->cache->file_position;
 8009898:	6886      	ldr	r6, [r0, #8]
 800989a:	f8d6 9008 	ldr.w	r9, [r6, #8]
    uint32_t start = file_p->cache->start;
 800989e:	6833      	ldr	r3, [r6, #0]
    uint32_t end = file_p->cache->end;
 80098a0:	6872      	ldr	r2, [r6, #4]
    char * buffer = file_p->cache->buffer;
 80098a2:	f8d6 b00c 	ldr.w	fp, [r6, #12]
    uint16_t buffer_size = file_p->drv->cache_size;
 80098a6:	6840      	ldr	r0, [r0, #4]
 80098a8:	f8b0 a002 	ldrh.w	sl, [r0, #2]
    if(start <= file_position && file_position < end) {
 80098ac:	4599      	cmp	r9, r3
 80098ae:	d343      	bcc.n	8009938 <lv_fs_read_cached+0xae>
 80098b0:	4591      	cmp	r9, r2
 80098b2:	d241      	bcs.n	8009938 <lv_fs_read_cached+0xae>
        uint16_t buffer_offset = file_position - start;
 80098b4:	fa1f f689 	uxth.w	r6, r9
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	1af1      	subs	r1, r6, r3
 80098bc:	b289      	uxth	r1, r1
        uint16_t buffer_remaining_length = buffer_size - buffer_offset;
 80098be:	1b9b      	subs	r3, r3, r6
 80098c0:	eb0a 0603 	add.w	r6, sl, r3
 80098c4:	b2b6      	uxth	r6, r6
        if(btr <= buffer_remaining_length) {
 80098c6:	42ae      	cmp	r6, r5
 80098c8:	d307      	bcc.n	80098da <lv_fs_read_cached+0x50>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 80098ca:	462a      	mov	r2, r5
 80098cc:	4459      	add	r1, fp
 80098ce:	4638      	mov	r0, r7
 80098d0:	f000 fa8e 	bl	8009df0 <lv_memcpy>
    lv_fs_res_t res = LV_FS_RES_OK;
 80098d4:	f04f 0a00 	mov.w	sl, #0
 80098d8:	e03b      	b.n	8009952 <lv_fs_read_cached+0xc8>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 80098da:	4632      	mov	r2, r6
 80098dc:	4459      	add	r1, fp
 80098de:	4638      	mov	r0, r7
 80098e0:	f000 fa86 	bl	8009df0 <lv_memcpy>
            if(btr > buffer_size) {
 80098e4:	45aa      	cmp	sl, r5
 80098e6:	d20a      	bcs.n	80098fe <lv_fs_read_cached+0x74>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 80098e8:	6860      	ldr	r0, [r4, #4]
 80098ea:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80098ee:	f8cd 8000 	str.w	r8, [sp]
 80098f2:	1bab      	subs	r3, r5, r6
 80098f4:	19ba      	adds	r2, r7, r6
 80098f6:	6821      	ldr	r1, [r4, #0]
 80098f8:	47c8      	blx	r9
 80098fa:	4682      	mov	sl, r0
 80098fc:	e026      	b.n	800994c <lv_fs_read_cached+0xc2>
                uint32_t bytes_read_to_buffer = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	9303      	str	r3, [sp, #12]
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8009902:	6860      	ldr	r0, [r4, #4]
 8009904:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8009908:	ab03      	add	r3, sp, #12
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	4653      	mov	r3, sl
 800990e:	465a      	mov	r2, fp
 8009910:	6821      	ldr	r1, [r4, #0]
 8009912:	47c8      	blx	r9
 8009914:	4682      	mov	sl, r0
                file_p->cache->start = file_p->cache->end + 1;
 8009916:	68a2      	ldr	r2, [r4, #8]
 8009918:	6853      	ldr	r3, [r2, #4]
 800991a:	3301      	adds	r3, #1
 800991c:	6013      	str	r3, [r2, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 800991e:	68a2      	ldr	r2, [r4, #8]
 8009920:	6813      	ldr	r3, [r2, #0]
 8009922:	9903      	ldr	r1, [sp, #12]
 8009924:	440b      	add	r3, r1
 8009926:	6053      	str	r3, [r2, #4]
                uint16_t data_chunk_remaining = btr - buffer_remaining_length;
 8009928:	b2aa      	uxth	r2, r5
 800992a:	1b92      	subs	r2, r2, r6
                memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 800992c:	b292      	uxth	r2, r2
 800992e:	4659      	mov	r1, fp
 8009930:	19b8      	adds	r0, r7, r6
 8009932:	f001 f9db 	bl	800acec <memcpy>
 8009936:	e009      	b.n	800994c <lv_fs_read_cached+0xc2>
        if(btr > buffer_size) {
 8009938:	45aa      	cmp	sl, r5
 800993a:	d214      	bcs.n	8009966 <lv_fs_read_cached+0xdc>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 800993c:	6906      	ldr	r6, [r0, #16]
 800993e:	f8cd 8000 	str.w	r8, [sp]
 8009942:	462b      	mov	r3, r5
 8009944:	463a      	mov	r2, r7
 8009946:	6821      	ldr	r1, [r4, #0]
 8009948:	47b0      	blx	r6
 800994a:	4682      	mov	sl, r0
    if(res == LV_FS_RES_OK) {
 800994c:	f1ba 0f00 	cmp.w	sl, #0
 8009950:	d105      	bne.n	800995e <lv_fs_read_cached+0xd4>
        *br = btr;
 8009952:	f8c8 5000 	str.w	r5, [r8]
        file_p->cache->file_position += btr;
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	689a      	ldr	r2, [r3, #8]
 800995a:	442a      	add	r2, r5
 800995c:	609a      	str	r2, [r3, #8]
}
 800995e:	4650      	mov	r0, sl
 8009960:	b005      	add	sp, #20
 8009962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(buffer == NULL) {
 8009966:	f1bb 0f00 	cmp.w	fp, #0
 800996a:	d018      	beq.n	800999e <lv_fs_read_cached+0x114>
            uint32_t bytes_read_to_buffer = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	9303      	str	r3, [sp, #12]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8009970:	6860      	ldr	r0, [r4, #4]
 8009972:	6906      	ldr	r6, [r0, #16]
 8009974:	ab03      	add	r3, sp, #12
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4653      	mov	r3, sl
 800997a:	465a      	mov	r2, fp
 800997c:	6821      	ldr	r1, [r4, #0]
 800997e:	47b0      	blx	r6
 8009980:	4682      	mov	sl, r0
            file_p->cache->start = file_position;
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	f8c3 9000 	str.w	r9, [r3]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8009988:	68a2      	ldr	r2, [r4, #8]
 800998a:	6813      	ldr	r3, [r2, #0]
 800998c:	9903      	ldr	r1, [sp, #12]
 800998e:	440b      	add	r3, r1
 8009990:	6053      	str	r3, [r2, #4]
            memcpy(buf, buffer, btr);
 8009992:	462a      	mov	r2, r5
 8009994:	4659      	mov	r1, fp
 8009996:	4638      	mov	r0, r7
 8009998:	f001 f9a8 	bl	800acec <memcpy>
 800999c:	e7d6      	b.n	800994c <lv_fs_read_cached+0xc2>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 800999e:	4650      	mov	r0, sl
 80099a0:	f000 fb14 	bl	8009fcc <lv_mem_alloc>
 80099a4:	60f0      	str	r0, [r6, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80099ac:	f1bb 0f00 	cmp.w	fp, #0
 80099b0:	d1dc      	bne.n	800996c <lv_fs_read_cached+0xe2>
 80099b2:	e7fe      	b.n	80099b2 <lv_fs_read_cached+0x128>

080099b4 <_lv_fs_init>:
{
 80099b4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 80099b6:	2104      	movs	r1, #4
 80099b8:	4801      	ldr	r0, [pc, #4]	; (80099c0 <_lv_fs_init+0xc>)
 80099ba:	f000 f90f 	bl	8009bdc <_lv_ll_init>
}
 80099be:	bd08      	pop	{r3, pc}
 80099c0:	20001e84 	.word	0x20001e84

080099c4 <lv_fs_close>:
{
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 80099c8:	6840      	ldr	r0, [r0, #4]
 80099ca:	b1b0      	cbz	r0, 80099fa <lv_fs_close+0x36>
    if(file_p->drv->close_cb == NULL) {
 80099cc:	68c3      	ldr	r3, [r0, #12]
 80099ce:	b1b3      	cbz	r3, 80099fe <lv_fs_close+0x3a>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80099d0:	6821      	ldr	r1, [r4, #0]
 80099d2:	4798      	blx	r3
 80099d4:	4605      	mov	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 80099d6:	6863      	ldr	r3, [r4, #4]
 80099d8:	885b      	ldrh	r3, [r3, #2]
 80099da:	b143      	cbz	r3, 80099ee <lv_fs_close+0x2a>
 80099dc:	68a3      	ldr	r3, [r4, #8]
 80099de:	b133      	cbz	r3, 80099ee <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 80099e0:	68d8      	ldr	r0, [r3, #12]
 80099e2:	b108      	cbz	r0, 80099e8 <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 80099e4:	f000 f9dc 	bl	8009da0 <lv_mem_free>
        lv_mem_free(file_p->cache);
 80099e8:	68a0      	ldr	r0, [r4, #8]
 80099ea:	f000 f9d9 	bl	8009da0 <lv_mem_free>
    file_p->file_d = NULL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 80099f2:	6063      	str	r3, [r4, #4]
    file_p->cache  = NULL;
 80099f4:	60a3      	str	r3, [r4, #8]
}
 80099f6:	4628      	mov	r0, r5
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 80099fa:	250b      	movs	r5, #11
 80099fc:	e7fb      	b.n	80099f6 <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 80099fe:	2509      	movs	r5, #9
 8009a00:	e7f9      	b.n	80099f6 <lv_fs_close+0x32>

08009a02 <lv_fs_read>:
{
 8009a02:	b530      	push	{r4, r5, lr}
 8009a04:	b085      	sub	sp, #20
 8009a06:	4684      	mov	ip, r0
    if(br != NULL) *br = 0;
 8009a08:	461c      	mov	r4, r3
 8009a0a:	b10b      	cbz	r3, 8009a10 <lv_fs_read+0xe>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8009a10:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8009a14:	b1b0      	cbz	r0, 8009a44 <lv_fs_read+0x42>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8009a16:	6905      	ldr	r5, [r0, #16]
 8009a18:	b1b5      	cbz	r5, 8009a48 <lv_fs_read+0x46>
    uint32_t br_tmp = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9303      	str	r3, [sp, #12]
    if(file_p->drv->cache_size) {
 8009a1e:	8843      	ldrh	r3, [r0, #2]
 8009a20:	b95b      	cbnz	r3, 8009a3a <lv_fs_read+0x38>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8009a22:	ab03      	add	r3, sp, #12
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	4613      	mov	r3, r2
 8009a28:	460a      	mov	r2, r1
 8009a2a:	f8dc 1000 	ldr.w	r1, [ip]
 8009a2e:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 8009a30:	b10c      	cbz	r4, 8009a36 <lv_fs_read+0x34>
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	6023      	str	r3, [r4, #0]
}
 8009a36:	b005      	add	sp, #20
 8009a38:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 8009a3a:	ab03      	add	r3, sp, #12
 8009a3c:	4660      	mov	r0, ip
 8009a3e:	f7ff ff24 	bl	800988a <lv_fs_read_cached>
 8009a42:	e7f5      	b.n	8009a30 <lv_fs_read+0x2e>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8009a44:	200b      	movs	r0, #11
 8009a46:	e7f6      	b.n	8009a36 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8009a48:	2009      	movs	r0, #9
 8009a4a:	e7f4      	b.n	8009a36 <lv_fs_read+0x34>

08009a4c <lv_fs_seek>:
{
 8009a4c:	b530      	push	{r4, r5, lr}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8009a52:	6840      	ldr	r0, [r0, #4]
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d042      	beq.n	8009ade <lv_fs_seek+0x92>
 8009a58:	4613      	mov	r3, r2
    if(file_p->drv->seek_cb == NULL) {
 8009a5a:	6985      	ldr	r5, [r0, #24]
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	d040      	beq.n	8009ae2 <lv_fs_seek+0x96>
    if(file_p->drv->cache_size) {
 8009a60:	8842      	ldrh	r2, [r0, #2]
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	d036      	beq.n	8009ad4 <lv_fs_seek+0x88>
        switch(whence) {
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d014      	beq.n	8009a94 <lv_fs_seek+0x48>
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d024      	beq.n	8009ab8 <lv_fs_seek+0x6c>
 8009a6e:	b10b      	cbz	r3, 8009a74 <lv_fs_seek+0x28>
 8009a70:	2000      	movs	r0, #0
 8009a72:	e032      	b.n	8009ada <lv_fs_seek+0x8e>
                    file_p->cache->file_position = pos;
 8009a74:	68a2      	ldr	r2, [r4, #8]
 8009a76:	6091      	str	r1, [r2, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8009a78:	68a1      	ldr	r1, [r4, #8]
 8009a7a:	688a      	ldr	r2, [r1, #8]
 8009a7c:	6808      	ldr	r0, [r1, #0]
 8009a7e:	4282      	cmp	r2, r0
 8009a80:	d302      	bcc.n	8009a88 <lv_fs_seek+0x3c>
 8009a82:	6849      	ldr	r1, [r1, #4]
 8009a84:	428a      	cmp	r2, r1
 8009a86:	d92e      	bls.n	8009ae6 <lv_fs_seek+0x9a>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8009a88:	6860      	ldr	r0, [r4, #4]
 8009a8a:	6985      	ldr	r5, [r0, #24]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	6821      	ldr	r1, [r4, #0]
 8009a90:	47a8      	blx	r5
 8009a92:	e022      	b.n	8009ada <lv_fs_seek+0x8e>
                    file_p->cache->file_position += pos;
 8009a94:	68a2      	ldr	r2, [r4, #8]
 8009a96:	6893      	ldr	r3, [r2, #8]
 8009a98:	4419      	add	r1, r3
 8009a9a:	6091      	str	r1, [r2, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8009a9c:	68a3      	ldr	r3, [r4, #8]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	428a      	cmp	r2, r1
 8009aa4:	d302      	bcc.n	8009aac <lv_fs_seek+0x60>
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d91e      	bls.n	8009aea <lv_fs_seek+0x9e>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8009aac:	6860      	ldr	r0, [r4, #4]
 8009aae:	6985      	ldr	r5, [r0, #24]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6821      	ldr	r1, [r4, #0]
 8009ab4:	47a8      	blx	r5
 8009ab6:	e010      	b.n	8009ada <lv_fs_seek+0x8e>
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8009ab8:	460a      	mov	r2, r1
 8009aba:	6821      	ldr	r1, [r4, #0]
 8009abc:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 8009abe:	b960      	cbnz	r0, 8009ada <lv_fs_seek+0x8e>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8009ac0:	6860      	ldr	r0, [r4, #4]
 8009ac2:	69c3      	ldr	r3, [r0, #28]
 8009ac4:	aa01      	add	r2, sp, #4
 8009ac6:	6821      	ldr	r1, [r4, #0]
 8009ac8:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 8009aca:	b930      	cbnz	r0, 8009ada <lv_fs_seek+0x8e>
                            file_p->cache->file_position = tmp_position;
 8009acc:	68a3      	ldr	r3, [r4, #8]
 8009ace:	9a01      	ldr	r2, [sp, #4]
 8009ad0:	609a      	str	r2, [r3, #8]
 8009ad2:	e002      	b.n	8009ada <lv_fs_seek+0x8e>
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8009ad4:	460a      	mov	r2, r1
 8009ad6:	6821      	ldr	r1, [r4, #0]
 8009ad8:	47a8      	blx	r5
}
 8009ada:	b003      	add	sp, #12
 8009adc:	bd30      	pop	{r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 8009ade:	200b      	movs	r0, #11
 8009ae0:	e7fb      	b.n	8009ada <lv_fs_seek+0x8e>
        return LV_FS_RES_NOT_IMP;
 8009ae2:	2009      	movs	r0, #9
 8009ae4:	e7f9      	b.n	8009ada <lv_fs_seek+0x8e>
    lv_fs_res_t res = LV_FS_RES_OK;
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	e7f7      	b.n	8009ada <lv_fs_seek+0x8e>
 8009aea:	2000      	movs	r0, #0
 8009aec:	e7f5      	b.n	8009ada <lv_fs_seek+0x8e>
	...

08009af0 <lv_fs_get_drv>:
{
 8009af0:	b510      	push	{r4, lr}
 8009af2:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8009af4:	4808      	ldr	r0, [pc, #32]	; (8009b18 <lv_fs_get_drv+0x28>)
 8009af6:	f000 f898 	bl	8009c2a <_lv_ll_get_head>
 8009afa:	4601      	mov	r1, r0
 8009afc:	e003      	b.n	8009b06 <lv_fs_get_drv+0x16>
 8009afe:	4806      	ldr	r0, [pc, #24]	; (8009b18 <lv_fs_get_drv+0x28>)
 8009b00:	f000 f89b 	bl	8009c3a <_lv_ll_get_next>
 8009b04:	4601      	mov	r1, r0
 8009b06:	b121      	cbz	r1, 8009b12 <lv_fs_get_drv+0x22>
        if((*drv)->letter == letter) {
 8009b08:	680b      	ldr	r3, [r1, #0]
 8009b0a:	781a      	ldrb	r2, [r3, #0]
 8009b0c:	42a2      	cmp	r2, r4
 8009b0e:	d1f6      	bne.n	8009afe <lv_fs_get_drv+0xe>
            return *drv;
 8009b10:	4619      	mov	r1, r3
}
 8009b12:	4608      	mov	r0, r1
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	bf00      	nop
 8009b18:	20001e84 	.word	0x20001e84

08009b1c <lv_fs_open>:
    if(path == NULL) {
 8009b1c:	b379      	cbz	r1, 8009b7e <lv_fs_open+0x62>
{
 8009b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b22:	4604      	mov	r4, r0
 8009b24:	4616      	mov	r6, r2
 8009b26:	460f      	mov	r7, r1
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 8009b28:	7808      	ldrb	r0, [r1, #0]
 8009b2a:	f7ff ffe1 	bl	8009af0 <lv_fs_get_drv>
    if(drv == NULL) {
 8009b2e:	4605      	mov	r5, r0
 8009b30:	b338      	cbz	r0, 8009b82 <lv_fs_open+0x66>
    if(drv->ready_cb) {
 8009b32:	6843      	ldr	r3, [r0, #4]
 8009b34:	b10b      	cbz	r3, 8009b3a <lv_fs_open+0x1e>
        if(drv->ready_cb(drv) == false) {
 8009b36:	4798      	blx	r3
 8009b38:	b328      	cbz	r0, 8009b86 <lv_fs_open+0x6a>
    if(drv->open_cb == NULL) {
 8009b3a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8009b3e:	f1b8 0f00 	cmp.w	r8, #0
 8009b42:	d022      	beq.n	8009b8a <lv_fs_open+0x6e>
    const char * real_path = lv_fs_get_real_path(path);
 8009b44:	4638      	mov	r0, r7
 8009b46:	f7ff fe98 	bl	800987a <lv_fs_get_real_path>
 8009b4a:	4601      	mov	r1, r0
    void * file_d = drv->open_cb(drv, real_path, mode);
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47c0      	blx	r8
    if(file_d == NULL || file_d == (void *)(-1)) {
 8009b52:	1e43      	subs	r3, r0, #1
 8009b54:	f113 0f03 	cmn.w	r3, #3
 8009b58:	d819      	bhi.n	8009b8e <lv_fs_open+0x72>
    file_p->drv = drv;
 8009b5a:	6065      	str	r5, [r4, #4]
    file_p->file_d = file_d;
 8009b5c:	6020      	str	r0, [r4, #0]
    if(drv->cache_size) {
 8009b5e:	886b      	ldrh	r3, [r5, #2]
 8009b60:	b913      	cbnz	r3, 8009b68 <lv_fs_open+0x4c>
    return LV_FS_RES_OK;
 8009b62:	2000      	movs	r0, #0
}
 8009b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 8009b68:	2010      	movs	r0, #16
 8009b6a:	f000 fa2f 	bl	8009fcc <lv_mem_alloc>
 8009b6e:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8009b70:	b120      	cbz	r0, 8009b7c <lv_fs_open+0x60>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8009b72:	2110      	movs	r1, #16
 8009b74:	f000 fabc 	bl	800a0f0 <lv_memset_00>
    return LV_FS_RES_OK;
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e7f3      	b.n	8009b64 <lv_fs_open+0x48>
        LV_ASSERT_MALLOC(file_p->cache);
 8009b7c:	e7fe      	b.n	8009b7c <lv_fs_open+0x60>
        return LV_FS_RES_INV_PARAM;
 8009b7e:	200b      	movs	r0, #11
}
 8009b80:	4770      	bx	lr
        return LV_FS_RES_NOT_EX;
 8009b82:	2003      	movs	r0, #3
 8009b84:	e7ee      	b.n	8009b64 <lv_fs_open+0x48>
            return LV_FS_RES_HW_ERR;
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7ec      	b.n	8009b64 <lv_fs_open+0x48>
        return LV_FS_RES_NOT_IMP;
 8009b8a:	2009      	movs	r0, #9
 8009b8c:	e7ea      	b.n	8009b64 <lv_fs_open+0x48>
        return LV_FS_RES_UNKNOWN;
 8009b8e:	200c      	movs	r0, #12
 8009b90:	e7e8      	b.n	8009b64 <lv_fs_open+0x48>
	...

08009b94 <lv_fs_get_ext>:
{
 8009b94:	b510      	push	{r4, lr}
 8009b96:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8009b98:	f7f6 fb2c 	bl	80001f4 <strlen>
 8009b9c:	b158      	cbz	r0, 8009bb6 <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
 8009b9e:	5c23      	ldrb	r3, [r4, r0]
 8009ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba2:	d005      	beq.n	8009bb0 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
 8009ba4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ba6:	d008      	beq.n	8009bba <lv_fs_get_ext+0x26>
 8009ba8:	2b5c      	cmp	r3, #92	; 0x5c
 8009baa:	d008      	beq.n	8009bbe <lv_fs_get_ext+0x2a>
    for(i = strlen(fn); i > 0; i--) {
 8009bac:	3801      	subs	r0, #1
 8009bae:	e7f5      	b.n	8009b9c <lv_fs_get_ext+0x8>
            return &fn[i + 1];
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	18e0      	adds	r0, r4, r3
 8009bb4:	e000      	b.n	8009bb8 <lv_fs_get_ext+0x24>
    return ""; /*Empty string if no '.' in the file name.*/
 8009bb6:	4803      	ldr	r0, [pc, #12]	; (8009bc4 <lv_fs_get_ext+0x30>)
}
 8009bb8:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
 8009bba:	4802      	ldr	r0, [pc, #8]	; (8009bc4 <lv_fs_get_ext+0x30>)
 8009bbc:	e7fc      	b.n	8009bb8 <lv_fs_get_ext+0x24>
 8009bbe:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <lv_fs_get_ext+0x30>)
 8009bc0:	e7fa      	b.n	8009bb8 <lv_fs_get_ext+0x24>
 8009bc2:	bf00      	nop
 8009bc4:	0800bd20 	.word	0x0800bd20

08009bc8 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8009bc8:	460b      	mov	r3, r1
 8009bca:	b109      	cbz	r1, 8009bd0 <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *)act;

    act8 += LL_PREV_P_OFFSET(ll_p);
 8009bcc:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 8009bce:	505a      	str	r2, [r3, r1]
}
 8009bd0:	4770      	bx	lr

08009bd2 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8009bd2:	b111      	cbz	r1, 8009bda <node_set_next+0x8>
    uint8_t * act8 = (uint8_t *)act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
 8009bd4:	6803      	ldr	r3, [r0, #0]
 8009bd6:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8009bd8:	50ca      	str	r2, [r1, r3]
}
 8009bda:	4770      	bx	lr

08009bdc <_lv_ll_init>:
    ll_p->head = NULL;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 8009be0:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
 8009be2:	3103      	adds	r1, #3
 8009be4:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
 8009be8:	6001      	str	r1, [r0, #0]
}
 8009bea:	4770      	bx	lr

08009bec <_lv_ll_ins_head>:
{
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8009bf0:	6800      	ldr	r0, [r0, #0]
 8009bf2:	3008      	adds	r0, #8
 8009bf4:	f000 f9ea 	bl	8009fcc <lv_mem_alloc>
    if(n_new != NULL) {
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	b190      	cbz	r0, 8009c22 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	4601      	mov	r1, r0
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7ff ffe1 	bl	8009bc8 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8009c06:	6862      	ldr	r2, [r4, #4]
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff ffe1 	bl	8009bd2 <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8009c10:	6861      	ldr	r1, [r4, #4]
 8009c12:	b119      	cbz	r1, 8009c1c <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 8009c14:	462a      	mov	r2, r5
 8009c16:	4620      	mov	r0, r4
 8009c18:	f7ff ffd6 	bl	8009bc8 <node_set_prev>
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8009c1c:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	b10b      	cbz	r3, 8009c26 <_lv_ll_ins_head+0x3a>
}
 8009c22:	4628      	mov	r0, r5
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
 8009c26:	60a5      	str	r5, [r4, #8]
    return n_new;
 8009c28:	e7fb      	b.n	8009c22 <_lv_ll_ins_head+0x36>

08009c2a <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8009c2a:	b108      	cbz	r0, 8009c30 <_lv_ll_get_head+0x6>
    return ll_p->head;
 8009c2c:	6840      	ldr	r0, [r0, #4]
 8009c2e:	4770      	bx	lr
}
 8009c30:	4770      	bx	lr

08009c32 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8009c32:	b108      	cbz	r0, 8009c38 <_lv_ll_get_tail+0x6>
    return ll_p->tail;
 8009c34:	6880      	ldr	r0, [r0, #8]
 8009c36:	4770      	bx	lr
}
 8009c38:	4770      	bx	lr

08009c3a <_lv_ll_get_next>:
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8009c3a:	6803      	ldr	r3, [r0, #0]
 8009c3c:	3304      	adds	r3, #4
}
 8009c3e:	58c8      	ldr	r0, [r1, r3]
 8009c40:	4770      	bx	lr

08009c42 <_lv_ll_get_prev>:
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8009c42:	6803      	ldr	r3, [r0, #0]
}
 8009c44:	58c8      	ldr	r0, [r1, r3]
 8009c46:	4770      	bx	lr

08009c48 <_lv_ll_remove>:
    if(ll_p == NULL) return;
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d03e      	beq.n	8009cca <_lv_ll_remove+0x82>
{
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	460c      	mov	r4, r1
 8009c50:	4605      	mov	r5, r0
    if(_lv_ll_get_head(ll_p) == node_p) {
 8009c52:	f7ff ffea 	bl	8009c2a <_lv_ll_get_head>
 8009c56:	4284      	cmp	r4, r0
 8009c58:	d019      	beq.n	8009c8e <_lv_ll_remove+0x46>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f7ff ffe9 	bl	8009c32 <_lv_ll_get_tail>
 8009c60:	4284      	cmp	r4, r0
 8009c62:	d023      	beq.n	8009cac <_lv_ll_remove+0x64>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f7ff ffeb 	bl	8009c42 <_lv_ll_get_prev>
 8009c6c:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4628      	mov	r0, r5
 8009c72:	f7ff ffe2 	bl	8009c3a <_lv_ll_get_next>
 8009c76:	4604      	mov	r4, r0
        node_set_next(ll_p, n_prev, n_next);
 8009c78:	4602      	mov	r2, r0
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f7ff ffa8 	bl	8009bd2 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8009c82:	4632      	mov	r2, r6
 8009c84:	4621      	mov	r1, r4
 8009c86:	4628      	mov	r0, r5
 8009c88:	f7ff ff9e 	bl	8009bc8 <node_set_prev>
}
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f7ff ffd2 	bl	8009c3a <_lv_ll_get_next>
 8009c96:	4601      	mov	r1, r0
 8009c98:	6068      	str	r0, [r5, #4]
        if(ll_p->head == NULL) {
 8009c9a:	b120      	cbz	r0, 8009ca6 <_lv_ll_remove+0x5e>
            node_set_prev(ll_p, ll_p->head, NULL);
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7ff ff92 	bl	8009bc8 <node_set_prev>
 8009ca4:	e7f2      	b.n	8009c8c <_lv_ll_remove+0x44>
            ll_p->tail = NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60ab      	str	r3, [r5, #8]
 8009caa:	e7ef      	b.n	8009c8c <_lv_ll_remove+0x44>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8009cac:	4621      	mov	r1, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f7ff ffc7 	bl	8009c42 <_lv_ll_get_prev>
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	60a8      	str	r0, [r5, #8]
        if(ll_p->tail == NULL) {
 8009cb8:	b120      	cbz	r0, 8009cc4 <_lv_ll_remove+0x7c>
            node_set_next(ll_p, ll_p->tail, NULL);
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f7ff ff88 	bl	8009bd2 <node_set_next>
 8009cc2:	e7e3      	b.n	8009c8c <_lv_ll_remove+0x44>
            ll_p->head = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	606b      	str	r3, [r5, #4]
 8009cc8:	e7e0      	b.n	8009c8c <_lv_ll_remove+0x44>
 8009cca:	4770      	bx	lr

08009ccc <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8009ccc:	b138      	cbz	r0, 8009cde <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8009cce:	6842      	ldr	r2, [r0, #4]
 8009cd0:	b10a      	cbz	r2, 8009cd6 <_lv_ll_is_empty+0xa>
    return false;
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8009cd6:	6883      	ldr	r3, [r0, #8]
 8009cd8:	b11b      	cbz	r3, 8009ce2 <_lv_ll_is_empty+0x16>
    return false;
 8009cda:	2000      	movs	r0, #0
 8009cdc:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8009cde:	2001      	movs	r0, #1
 8009ce0:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8009ce2:	2001      	movs	r0, #1
}
 8009ce4:	4770      	bx	lr

08009ce6 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8009ce6:	b570      	push	{r4, r5, r6, lr}
    uint32_t t_rem  = 1024 - t;
 8009ce8:	f5c0 6c80 	rsb	ip, r0, #1024	; 0x400
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8009cec:	fb0c f40c 	mul.w	r4, ip, ip
 8009cf0:	0aa4      	lsrs	r4, r4, #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8009cf2:	fb04 f60c 	mul.w	r6, r4, ip
 8009cf6:	0ab6      	lsrs	r6, r6, #10
    uint32_t t2     = (t * t) >> 10;
 8009cf8:	fb00 fe00 	mul.w	lr, r0, r0
 8009cfc:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
    uint32_t t3     = (t2 * t) >> 10;
 8009d00:	fb0e f500 	mul.w	r5, lr, r0
 8009d04:	0aad      	lsrs	r5, r5, #10

    uint32_t v1 = (t_rem3 * u0) >> 10;
 8009d06:	fb01 f606 	mul.w	r6, r1, r6
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8009d0a:	fb04 f000 	mul.w	r0, r4, r0
 8009d0e:	fb00 f202 	mul.w	r2, r0, r2
 8009d12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009d16:	0d12      	lsrs	r2, r2, #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8009d18:	fb0e fc0c 	mul.w	ip, lr, ip
 8009d1c:	fb03 f30c 	mul.w	r3, r3, ip
 8009d20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    uint32_t v4 = (t3 * u3) >> 10;
 8009d24:	9804      	ldr	r0, [sp, #16]
 8009d26:	fb05 f000 	mul.w	r0, r5, r0

    return v1 + v2 + v3 + v4;
 8009d2a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009d2e:	eb02 5213 	add.w	r2, r2, r3, lsr #20
}
 8009d32:	eb02 2090 	add.w	r0, r2, r0, lsr #10
 8009d36:	bd70      	pop	{r4, r5, r6, pc}

08009d38 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8009d38:	b500      	push	{lr}
    if(x >= max_in) return max_out;
 8009d3a:	4290      	cmp	r0, r2
 8009d3c:	da0e      	bge.n	8009d5c <lv_map+0x24>
    if(x <= min_in) return min_out;
 8009d3e:	4288      	cmp	r0, r1
 8009d40:	dd0e      	ble.n	8009d60 <lv_map+0x28>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 8009d42:	eba2 0c01 	sub.w	ip, r2, r1
    int32_t delta_out = max_out - min_out;
 8009d46:	9a01      	ldr	r2, [sp, #4]
 8009d48:	eba2 0e03 	sub.w	lr, r2, r3

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8009d4c:	1a42      	subs	r2, r0, r1
 8009d4e:	fb0e f202 	mul.w	r2, lr, r2
 8009d52:	fb92 f2fc 	sdiv	r2, r2, ip
 8009d56:	18d0      	adds	r0, r2, r3
}
 8009d58:	f85d fb04 	ldr.w	pc, [sp], #4
    if(x >= max_in) return max_out;
 8009d5c:	9801      	ldr	r0, [sp, #4]
 8009d5e:	e7fb      	b.n	8009d58 <lv_map+0x20>
    if(x <= min_in) return min_out;
 8009d60:	4618      	mov	r0, r3
 8009d62:	e7f9      	b.n	8009d58 <lv_map+0x20>

08009d64 <lv_mem_walker>:
static void lv_mem_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(ptr);

    lv_mem_monitor_t * mon_p = user;
    if(used) {
 8009d64:	b11a      	cbz	r2, 8009d6e <lv_mem_walker+0xa>
        mon_p->used_cnt++;
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	3201      	adds	r2, #1
 8009d6a:	611a      	str	r2, [r3, #16]
 8009d6c:	4770      	bx	lr
    }
    else {
        mon_p->free_cnt++;
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	3201      	adds	r2, #1
 8009d72:	605a      	str	r2, [r3, #4]
        mon_p->free_size += size;
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	440a      	add	r2, r1
 8009d78:	609a      	str	r2, [r3, #8]
        if(size > mon_p->free_biggest_size)
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	428a      	cmp	r2, r1
 8009d7e:	d200      	bcs.n	8009d82 <lv_mem_walker+0x1e>
            mon_p->free_biggest_size = size;
 8009d80:	60d9      	str	r1, [r3, #12]
    }
}
 8009d82:	4770      	bx	lr

08009d84 <lv_mem_init>:
{
 8009d84:	b508      	push	{r3, lr}
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8009d86:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8009d8a:	4803      	ldr	r0, [pc, #12]	; (8009d98 <lv_mem_init+0x14>)
 8009d8c:	f000 fec2 	bl	800ab14 <lv_tlsf_create_with_pool>
 8009d90:	4b02      	ldr	r3, [pc, #8]	; (8009d9c <lv_mem_init+0x18>)
 8009d92:	6018      	str	r0, [r3, #0]
}
 8009d94:	bd08      	pop	{r3, pc}
 8009d96:	bf00      	nop
 8009d98:	20001f58 	.word	0x20001f58
 8009d9c:	20001f54 	.word	0x20001f54

08009da0 <lv_mem_free>:
{
 8009da0:	b508      	push	{r3, lr}
    if(data == &zero_mem) return;
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <lv_mem_free+0x18>)
 8009da4:	4298      	cmp	r0, r3
 8009da6:	d005      	beq.n	8009db4 <lv_mem_free+0x14>
 8009da8:	4601      	mov	r1, r0
    if(data == NULL) return;
 8009daa:	b118      	cbz	r0, 8009db4 <lv_mem_free+0x14>
    lv_tlsf_free(tlsf, data);
 8009dac:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <lv_mem_free+0x1c>)
 8009dae:	6818      	ldr	r0, [r3, #0]
 8009db0:	f000 fed6 	bl	800ab60 <lv_tlsf_free>
}
 8009db4:	bd08      	pop	{r3, pc}
 8009db6:	bf00      	nop
 8009db8:	20000180 	.word	0x20000180
 8009dbc:	20001f54 	.word	0x20001f54

08009dc0 <lv_mem_buf_release>:
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2b0f      	cmp	r3, #15
 8009dc4:	d810      	bhi.n	8009de8 <lv_mem_buf_release+0x28>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4a08      	ldr	r2, [pc, #32]	; (8009dec <lv_mem_buf_release+0x2c>)
 8009dca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009dce:	4282      	cmp	r2, r0
 8009dd0:	d002      	beq.n	8009dd8 <lv_mem_buf_release+0x18>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	e7f4      	b.n	8009dc2 <lv_mem_buf_release+0x2>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8009dd8:	4b04      	ldr	r3, [pc, #16]	; (8009dec <lv_mem_buf_release+0x2c>)
 8009dda:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009dde:	798b      	ldrb	r3, [r1, #6]
 8009de0:	f36f 0300 	bfc	r3, #0, #1
 8009de4:	718b      	strb	r3, [r1, #6]
            return;
 8009de6:	4770      	bx	lr
}
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	20001ed4 	.word	0x20001ed4

08009df0 <lv_memcpy>:
{
 8009df0:	b410      	push	{r4}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8009df2:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8009df6:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	d14b      	bne.n	8009e96 <lv_memcpy+0xa6>
    if(d_align) {
 8009dfe:	2c00      	cmp	r4, #0
 8009e00:	d075      	beq.n	8009eee <lv_memcpy+0xfe>
        d_align = ALIGN_MASK + 1 - d_align;
 8009e02:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
 8009e06:	4603      	mov	r3, r0
        while(d_align && len) {
 8009e08:	e057      	b.n	8009eba <lv_memcpy+0xca>
            REPEAT8(COPY8);
 8009e0a:	780c      	ldrb	r4, [r1, #0]
 8009e0c:	701c      	strb	r4, [r3, #0]
 8009e0e:	784c      	ldrb	r4, [r1, #1]
 8009e10:	705c      	strb	r4, [r3, #1]
 8009e12:	788c      	ldrb	r4, [r1, #2]
 8009e14:	709c      	strb	r4, [r3, #2]
 8009e16:	78cc      	ldrb	r4, [r1, #3]
 8009e18:	70dc      	strb	r4, [r3, #3]
 8009e1a:	790c      	ldrb	r4, [r1, #4]
 8009e1c:	711c      	strb	r4, [r3, #4]
 8009e1e:	794c      	ldrb	r4, [r1, #5]
 8009e20:	715c      	strb	r4, [r3, #5]
 8009e22:	798c      	ldrb	r4, [r1, #6]
 8009e24:	719c      	strb	r4, [r3, #6]
 8009e26:	79cc      	ldrb	r4, [r1, #7]
 8009e28:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
 8009e2a:	7a0c      	ldrb	r4, [r1, #8]
 8009e2c:	721c      	strb	r4, [r3, #8]
 8009e2e:	7a4c      	ldrb	r4, [r1, #9]
 8009e30:	725c      	strb	r4, [r3, #9]
 8009e32:	7a8c      	ldrb	r4, [r1, #10]
 8009e34:	729c      	strb	r4, [r3, #10]
 8009e36:	7acc      	ldrb	r4, [r1, #11]
 8009e38:	72dc      	strb	r4, [r3, #11]
 8009e3a:	7b0c      	ldrb	r4, [r1, #12]
 8009e3c:	731c      	strb	r4, [r3, #12]
 8009e3e:	7b4c      	ldrb	r4, [r1, #13]
 8009e40:	735c      	strb	r4, [r3, #13]
 8009e42:	7b8c      	ldrb	r4, [r1, #14]
 8009e44:	739c      	strb	r4, [r3, #14]
 8009e46:	7bcc      	ldrb	r4, [r1, #15]
 8009e48:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
 8009e4a:	7c0c      	ldrb	r4, [r1, #16]
 8009e4c:	741c      	strb	r4, [r3, #16]
 8009e4e:	7c4c      	ldrb	r4, [r1, #17]
 8009e50:	745c      	strb	r4, [r3, #17]
 8009e52:	7c8c      	ldrb	r4, [r1, #18]
 8009e54:	749c      	strb	r4, [r3, #18]
 8009e56:	7ccc      	ldrb	r4, [r1, #19]
 8009e58:	74dc      	strb	r4, [r3, #19]
 8009e5a:	7d0c      	ldrb	r4, [r1, #20]
 8009e5c:	751c      	strb	r4, [r3, #20]
 8009e5e:	7d4c      	ldrb	r4, [r1, #21]
 8009e60:	755c      	strb	r4, [r3, #21]
 8009e62:	7d8c      	ldrb	r4, [r1, #22]
 8009e64:	759c      	strb	r4, [r3, #22]
 8009e66:	7dcc      	ldrb	r4, [r1, #23]
 8009e68:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
 8009e6a:	7e0c      	ldrb	r4, [r1, #24]
 8009e6c:	761c      	strb	r4, [r3, #24]
 8009e6e:	7e4c      	ldrb	r4, [r1, #25]
 8009e70:	765c      	strb	r4, [r3, #25]
 8009e72:	7e8c      	ldrb	r4, [r1, #26]
 8009e74:	769c      	strb	r4, [r3, #26]
 8009e76:	7ecc      	ldrb	r4, [r1, #27]
 8009e78:	76dc      	strb	r4, [r3, #27]
 8009e7a:	7f0c      	ldrb	r4, [r1, #28]
 8009e7c:	771c      	strb	r4, [r3, #28]
 8009e7e:	7f4c      	ldrb	r4, [r1, #29]
 8009e80:	775c      	strb	r4, [r3, #29]
 8009e82:	7f8c      	ldrb	r4, [r1, #30]
 8009e84:	779c      	strb	r4, [r3, #30]
 8009e86:	7fcc      	ldrb	r4, [r1, #31]
 8009e88:	77dc      	strb	r4, [r3, #31]
 8009e8a:	3320      	adds	r3, #32
 8009e8c:	3120      	adds	r1, #32
            len -= 32;
 8009e8e:	3a20      	subs	r2, #32
        while(len > 32) {
 8009e90:	2a20      	cmp	r2, #32
 8009e92:	d8ba      	bhi.n	8009e0a <lv_memcpy+0x1a>
 8009e94:	e006      	b.n	8009ea4 <lv_memcpy+0xb4>
    uint8_t * d8 = dst;
 8009e96:	4603      	mov	r3, r0
 8009e98:	e7fa      	b.n	8009e90 <lv_memcpy+0xa0>
            COPY8
 8009e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e9e:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
 8009ea2:	3a01      	subs	r2, #1
        while(len) {
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	d1f8      	bne.n	8009e9a <lv_memcpy+0xaa>
}
 8009ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eac:	4770      	bx	lr
            COPY8;
 8009eae:	f811 cb01 	ldrb.w	ip, [r1], #1
 8009eb2:	f803 cb01 	strb.w	ip, [r3], #1
            d_align--;
 8009eb6:	3c01      	subs	r4, #1
            len--;
 8009eb8:	3a01      	subs	r2, #1
        while(d_align && len) {
 8009eba:	b1ac      	cbz	r4, 8009ee8 <lv_memcpy+0xf8>
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	d1f6      	bne.n	8009eae <lv_memcpy+0xbe>
 8009ec0:	e012      	b.n	8009ee8 <lv_memcpy+0xf8>
        REPEAT8(COPY32)
 8009ec2:	680c      	ldr	r4, [r1, #0]
 8009ec4:	601c      	str	r4, [r3, #0]
 8009ec6:	684c      	ldr	r4, [r1, #4]
 8009ec8:	605c      	str	r4, [r3, #4]
 8009eca:	688c      	ldr	r4, [r1, #8]
 8009ecc:	609c      	str	r4, [r3, #8]
 8009ece:	68cc      	ldr	r4, [r1, #12]
 8009ed0:	60dc      	str	r4, [r3, #12]
 8009ed2:	690c      	ldr	r4, [r1, #16]
 8009ed4:	611c      	str	r4, [r3, #16]
 8009ed6:	694c      	ldr	r4, [r1, #20]
 8009ed8:	615c      	str	r4, [r3, #20]
 8009eda:	698c      	ldr	r4, [r1, #24]
 8009edc:	619c      	str	r4, [r3, #24]
 8009ede:	69cc      	ldr	r4, [r1, #28]
 8009ee0:	61dc      	str	r4, [r3, #28]
 8009ee2:	3320      	adds	r3, #32
 8009ee4:	3120      	adds	r1, #32
        len -= 32;
 8009ee6:	3a20      	subs	r2, #32
    while(len > 32) {
 8009ee8:	2a20      	cmp	r2, #32
 8009eea:	d8ea      	bhi.n	8009ec2 <lv_memcpy+0xd2>
 8009eec:	e006      	b.n	8009efc <lv_memcpy+0x10c>
    uint8_t * d8 = dst;
 8009eee:	4603      	mov	r3, r0
 8009ef0:	e7fa      	b.n	8009ee8 <lv_memcpy+0xf8>
        COPY32;
 8009ef2:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ef6:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
 8009efa:	3a04      	subs	r2, #4
    while(len > 4) {
 8009efc:	2a04      	cmp	r2, #4
 8009efe:	d8f8      	bhi.n	8009ef2 <lv_memcpy+0x102>
    while(len) {
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	d0d1      	beq.n	8009ea8 <lv_memcpy+0xb8>
        COPY8
 8009f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f08:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
 8009f0c:	3a01      	subs	r2, #1
 8009f0e:	e7f7      	b.n	8009f00 <lv_memcpy+0x110>

08009f10 <lv_memset>:
    if(d_align) {
 8009f10:	f010 0303 	ands.w	r3, r0, #3
 8009f14:	d009      	beq.n	8009f2a <lv_memset+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 8009f16:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8009f1a:	e003      	b.n	8009f24 <lv_memset+0x14>
            SET8(v);
 8009f1c:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
 8009f20:	3a01      	subs	r2, #1
            d_align--;
 8009f22:	3b01      	subs	r3, #1
        while(d_align && len) {
 8009f24:	b10b      	cbz	r3, 8009f2a <lv_memset+0x1a>
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	d1f8      	bne.n	8009f1c <lv_memset+0xc>
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 8009f2a:	eb01 2301 	add.w	r3, r1, r1, lsl #8
 8009f2e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8009f32:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 8009f36:	e009      	b.n	8009f4c <lv_memset+0x3c>
        REPEAT8(SET32(v32));
 8009f38:	6003      	str	r3, [r0, #0]
 8009f3a:	6043      	str	r3, [r0, #4]
 8009f3c:	6083      	str	r3, [r0, #8]
 8009f3e:	60c3      	str	r3, [r0, #12]
 8009f40:	6103      	str	r3, [r0, #16]
 8009f42:	6143      	str	r3, [r0, #20]
 8009f44:	6183      	str	r3, [r0, #24]
 8009f46:	61c3      	str	r3, [r0, #28]
 8009f48:	3020      	adds	r0, #32
        len -= 32;
 8009f4a:	3a20      	subs	r2, #32
    while(len > 32) {
 8009f4c:	2a20      	cmp	r2, #32
 8009f4e:	d8f3      	bhi.n	8009f38 <lv_memset+0x28>
 8009f50:	e002      	b.n	8009f58 <lv_memset+0x48>
        SET32(v32);
 8009f52:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8009f56:	3a04      	subs	r2, #4
    while(len > 4) {
 8009f58:	2a04      	cmp	r2, #4
 8009f5a:	d8fa      	bhi.n	8009f52 <lv_memset+0x42>
    while(len) {
 8009f5c:	b11a      	cbz	r2, 8009f66 <lv_memset+0x56>
        SET8(v);
 8009f5e:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
 8009f62:	3a01      	subs	r2, #1
 8009f64:	e7fa      	b.n	8009f5c <lv_memset+0x4c>
}
 8009f66:	4770      	bx	lr

08009f68 <lv_mem_monitor>:
{
 8009f68:	b510      	push	{r4, lr}
 8009f6a:	4604      	mov	r4, r0
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 8009f6c:	221c      	movs	r2, #28
 8009f6e:	2100      	movs	r1, #0
 8009f70:	f7ff ffce 	bl	8009f10 <lv_memset>
    lv_tlsf_walk_pool(lv_tlsf_get_pool(tlsf), lv_mem_walker, mon_p);
 8009f74:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <lv_mem_monitor+0x58>)
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	f000 fddb 	bl	800ab32 <lv_tlsf_get_pool>
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	4911      	ldr	r1, [pc, #68]	; (8009fc4 <lv_mem_monitor+0x5c>)
 8009f80:	f000 fd50 	bl	800aa24 <lv_tlsf_walk_pool>
    mon_p->total_size = LV_MEM_SIZE;
 8009f84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009f88:	6023      	str	r3, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8009f8a:	68a1      	ldr	r1, [r4, #8]
 8009f8c:	2364      	movs	r3, #100	; 0x64
 8009f8e:	fb01 f303 	mul.w	r3, r1, r3
 8009f92:	4a0d      	ldr	r2, [pc, #52]	; (8009fc8 <lv_mem_monitor+0x60>)
 8009f94:	fba2 2303 	umull	r2, r3, r2, r3
 8009f98:	0bdb      	lsrs	r3, r3, #15
 8009f9a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8009f9e:	7623      	strb	r3, [r4, #24]
    if(mon_p->free_size > 0) {
 8009fa0:	b159      	cbz	r1, 8009fba <lv_mem_monitor+0x52>
        mon_p->frag_pct = mon_p->free_biggest_size * 100U / mon_p->free_size;
 8009fa2:	68e2      	ldr	r2, [r4, #12]
 8009fa4:	2364      	movs	r3, #100	; 0x64
 8009fa6:	fb02 f303 	mul.w	r3, r2, r3
 8009faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	7663      	strb	r3, [r4, #25]
        mon_p->frag_pct = 100 - mon_p->frag_pct;
 8009fb2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8009fb6:	7663      	strb	r3, [r4, #25]
}
 8009fb8:	bd10      	pop	{r4, pc}
        mon_p->frag_pct = 0; /*no fragmentation if all the RAM is used*/
 8009fba:	2300      	movs	r3, #0
 8009fbc:	7663      	strb	r3, [r4, #25]
}
 8009fbe:	e7fb      	b.n	8009fb8 <lv_mem_monitor+0x50>
 8009fc0:	20001f54 	.word	0x20001f54
 8009fc4:	08009d65 	.word	0x08009d65
 8009fc8:	aaaaaaab 	.word	0xaaaaaaab

08009fcc <lv_mem_alloc>:
{
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	b088      	sub	sp, #32
    if(size == 0) {
 8009fd0:	b918      	cbnz	r0, 8009fda <lv_mem_alloc+0xe>
        return &zero_mem;
 8009fd2:	4c08      	ldr	r4, [pc, #32]	; (8009ff4 <lv_mem_alloc+0x28>)
}
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	b008      	add	sp, #32
 8009fd8:	bd10      	pop	{r4, pc}
 8009fda:	4601      	mov	r1, r0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8009fdc:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <lv_mem_alloc+0x2c>)
 8009fde:	6818      	ldr	r0, [r3, #0]
 8009fe0:	f000 fdad 	bl	800ab3e <lv_tlsf_malloc>
    if(alloc == NULL) {
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d1f4      	bne.n	8009fd4 <lv_mem_alloc+0x8>
        lv_mem_monitor(&mon);
 8009fea:	a801      	add	r0, sp, #4
 8009fec:	f7ff ffbc 	bl	8009f68 <lv_mem_monitor>
        LV_LOG_ERROR("used: %6d (%3d %%), frag: %3d %%, biggest free: %6d",
 8009ff0:	e7f0      	b.n	8009fd4 <lv_mem_alloc+0x8>
 8009ff2:	bf00      	nop
 8009ff4:	20000180 	.word	0x20000180
 8009ff8:	20001f54 	.word	0x20001f54

08009ffc <lv_mem_realloc>:
{
 8009ffc:	b508      	push	{r3, lr}
    if(new_size == 0) {
 8009ffe:	b149      	cbz	r1, 800a014 <lv_mem_realloc+0x18>
 800a000:	460a      	mov	r2, r1
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 800a002:	4b08      	ldr	r3, [pc, #32]	; (800a024 <lv_mem_realloc+0x28>)
 800a004:	4298      	cmp	r0, r3
 800a006:	d009      	beq.n	800a01c <lv_mem_realloc+0x20>
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 800a008:	4601      	mov	r1, r0
 800a00a:	4b07      	ldr	r3, [pc, #28]	; (800a028 <lv_mem_realloc+0x2c>)
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	f000 fdc3 	bl	800ab98 <lv_tlsf_realloc>
}
 800a012:	bd08      	pop	{r3, pc}
        lv_mem_free(data_p);
 800a014:	f7ff fec4 	bl	8009da0 <lv_mem_free>
        return &zero_mem;
 800a018:	4802      	ldr	r0, [pc, #8]	; (800a024 <lv_mem_realloc+0x28>)
 800a01a:	e7fa      	b.n	800a012 <lv_mem_realloc+0x16>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 800a01c:	4608      	mov	r0, r1
 800a01e:	f7ff ffd5 	bl	8009fcc <lv_mem_alloc>
 800a022:	e7f6      	b.n	800a012 <lv_mem_realloc+0x16>
 800a024:	20000180 	.word	0x20000180
 800a028:	20001f54 	.word	0x20001f54

0800a02c <lv_mem_buf_get>:
    if(size == 0) return NULL;
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d05b      	beq.n	800a0e8 <lv_mem_buf_get+0xbc>
{
 800a030:	b538      	push	{r3, r4, r5, lr}
 800a032:	4604      	mov	r4, r0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800a034:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 800a036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a03a:	e00c      	b.n	800a056 <lv_mem_buf_get+0x2a>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 800a03c:	4a2b      	ldr	r2, [pc, #172]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a03e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 800a042:	7983      	ldrb	r3, [r0, #6]
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	7183      	strb	r3, [r0, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 800a04a:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 800a04e:	e036      	b.n	800a0be <lv_mem_buf_get+0x92>
                i_guess = i;
 800a050:	b258      	sxtb	r0, r3
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800a052:	3301      	adds	r3, #1
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b0f      	cmp	r3, #15
 800a058:	d818      	bhi.n	800a08c <lv_mem_buf_get+0x60>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 800a05a:	4619      	mov	r1, r3
 800a05c:	4a23      	ldr	r2, [pc, #140]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a05e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a062:	7992      	ldrb	r2, [r2, #6]
 800a064:	f012 0f01 	tst.w	r2, #1
 800a068:	d1f3      	bne.n	800a052 <lv_mem_buf_get+0x26>
 800a06a:	4a20      	ldr	r2, [pc, #128]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a06c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a070:	8892      	ldrh	r2, [r2, #4]
 800a072:	42a2      	cmp	r2, r4
 800a074:	d3ed      	bcc.n	800a052 <lv_mem_buf_get+0x26>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 800a076:	d0e1      	beq.n	800a03c <lv_mem_buf_get+0x10>
            else if(i_guess < 0) {
 800a078:	2800      	cmp	r0, #0
 800a07a:	dbe9      	blt.n	800a050 <lv_mem_buf_get+0x24>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 800a07c:	491b      	ldr	r1, [pc, #108]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a07e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a082:	8889      	ldrh	r1, [r1, #4]
 800a084:	428a      	cmp	r2, r1
 800a086:	d2e4      	bcs.n	800a052 <lv_mem_buf_get+0x26>
                i_guess = i;
 800a088:	b258      	sxtb	r0, r3
 800a08a:	e7e2      	b.n	800a052 <lv_mem_buf_get+0x26>
    if(i_guess >= 0) {
 800a08c:	2800      	cmp	r0, #0
 800a08e:	da0d      	bge.n	800a0ac <lv_mem_buf_get+0x80>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800a090:	2300      	movs	r3, #0
 800a092:	2b0f      	cmp	r3, #15
 800a094:	d827      	bhi.n	800a0e6 <lv_mem_buf_get+0xba>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 800a096:	461d      	mov	r5, r3
 800a098:	4a14      	ldr	r2, [pc, #80]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a09a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a09e:	7992      	ldrb	r2, [r2, #6]
 800a0a0:	f012 0f01 	tst.w	r2, #1
 800a0a4:	d00c      	beq.n	800a0c0 <lv_mem_buf_get+0x94>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	e7f2      	b.n	800a092 <lv_mem_buf_get+0x66>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 800a0ac:	4a0f      	ldr	r2, [pc, #60]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a0ae:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800a0b2:	798b      	ldrb	r3, [r1, #6]
 800a0b4:	f043 0301 	orr.w	r3, r3, #1
 800a0b8:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 800a0ba:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
}
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4b0a      	ldr	r3, [pc, #40]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a0c4:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 800a0c8:	f7ff ff98 	bl	8009ffc <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 800a0cc:	b150      	cbz	r0, 800a0e4 <lv_mem_buf_get+0xb8>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 800a0ce:	4907      	ldr	r1, [pc, #28]	; (800a0ec <lv_mem_buf_get+0xc0>)
 800a0d0:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 800a0d4:	799a      	ldrb	r2, [r3, #6]
 800a0d6:	f042 0201 	orr.w	r2, r2, #1
 800a0da:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 800a0dc:	809c      	strh	r4, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 800a0de:	f841 0035 	str.w	r0, [r1, r5, lsl #3]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 800a0e2:	e7ec      	b.n	800a0be <lv_mem_buf_get+0x92>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 800a0e4:	e7fe      	b.n	800a0e4 <lv_mem_buf_get+0xb8>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 800a0e6:	e7fe      	b.n	800a0e6 <lv_mem_buf_get+0xba>
    if(size == 0) return NULL;
 800a0e8:	2000      	movs	r0, #0
}
 800a0ea:	4770      	bx	lr
 800a0ec:	20001ed4 	.word	0x20001ed4

0800a0f0 <lv_memset_00>:
    if(d_align) {
 800a0f0:	f010 0303 	ands.w	r3, r0, #3
 800a0f4:	d016      	beq.n	800a124 <lv_memset_00+0x34>
        d_align = ALIGN_MASK + 1 - d_align;
 800a0f6:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 800a0fa:	e004      	b.n	800a106 <lv_memset_00+0x16>
            SET8(0);
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 800a102:	3901      	subs	r1, #1
            d_align--;
 800a104:	3b01      	subs	r3, #1
        while(d_align && len) {
 800a106:	b16b      	cbz	r3, 800a124 <lv_memset_00+0x34>
 800a108:	2900      	cmp	r1, #0
 800a10a:	d1f7      	bne.n	800a0fc <lv_memset_00+0xc>
 800a10c:	e00a      	b.n	800a124 <lv_memset_00+0x34>
        REPEAT8(SET32(0));
 800a10e:	2300      	movs	r3, #0
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	6043      	str	r3, [r0, #4]
 800a114:	6083      	str	r3, [r0, #8]
 800a116:	60c3      	str	r3, [r0, #12]
 800a118:	6103      	str	r3, [r0, #16]
 800a11a:	6143      	str	r3, [r0, #20]
 800a11c:	6183      	str	r3, [r0, #24]
 800a11e:	61c3      	str	r3, [r0, #28]
 800a120:	3020      	adds	r0, #32
        len -= 32;
 800a122:	3920      	subs	r1, #32
    while(len > 32) {
 800a124:	2920      	cmp	r1, #32
 800a126:	d8f2      	bhi.n	800a10e <lv_memset_00+0x1e>
 800a128:	e003      	b.n	800a132 <lv_memset_00+0x42>
        SET32(0);
 800a12a:	2300      	movs	r3, #0
 800a12c:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 800a130:	3904      	subs	r1, #4
    while(len > 4) {
 800a132:	2904      	cmp	r1, #4
 800a134:	d8f9      	bhi.n	800a12a <lv_memset_00+0x3a>
    while(len) {
 800a136:	b121      	cbz	r1, 800a142 <lv_memset_00+0x52>
        SET8(0);
 800a138:	2300      	movs	r3, #0
 800a13a:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
 800a13e:	3901      	subs	r1, #1
 800a140:	e7f9      	b.n	800a136 <lv_memset_00+0x46>
}
 800a142:	4770      	bx	lr

0800a144 <lv_style_register_prop>:
}

lv_style_prop_t lv_style_register_prop(void)
{
    static uint16_t act_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
    act_id++;
 800a144:	4b02      	ldr	r3, [pc, #8]	; (800a150 <lv_style_register_prop+0xc>)
 800a146:	8818      	ldrh	r0, [r3, #0]
 800a148:	3001      	adds	r0, #1
 800a14a:	b280      	uxth	r0, r0
 800a14c:	8018      	strh	r0, [r3, #0]
    return act_id;
}
 800a14e:	4770      	bx	lr
 800a150:	20000184 	.word	0x20000184

0800a154 <lv_style_get_prop>:
    uint8_t group = _lv_style_get_prop_group(prop);
    style->has_group |= 1 << group;
}

lv_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 800a154:	4603      	mov	r3, r0
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                 lv_style_value_t * value)
{
    if(style->is_const) {
 800a156:	f990 0005 	ldrsb.w	r0, [r0, #5]
 800a15a:	2800      	cmp	r0, #0
 800a15c:	db12      	blt.n	800a184 <lv_style_get_prop+0x30>
            }
        }
        return LV_RES_INV;
    }

    if(style->prop_cnt == 0) return LV_RES_INV;
 800a15e:	79d8      	ldrb	r0, [r3, #7]
 800a160:	b370      	cbz	r0, 800a1c0 <lv_style_get_prop+0x6c>

    if(style->prop_cnt > 1) {
 800a162:	2801      	cmp	r0, #1
 800a164:	d921      	bls.n	800a1aa <lv_style_get_prop+0x56>
 800a166:	b510      	push	{r4, lr}
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800a168:	681c      	ldr	r4, [r3, #0]
 800a16a:	4686      	mov	lr, r0
 800a16c:	0080      	lsls	r0, r0, #2
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 800a16e:	2300      	movs	r3, #0
 800a170:	459e      	cmp	lr, r3
 800a172:	d918      	bls.n	800a1a6 <lv_style_get_prop+0x52>
            if(props[i] == prop) {
 800a174:	eb04 0c00 	add.w	ip, r4, r0
 800a178:	f83c c013 	ldrh.w	ip, [ip, r3, lsl #1]
 800a17c:	4561      	cmp	r1, ip
 800a17e:	d00d      	beq.n	800a19c <lv_style_get_prop+0x48>
        for(i = 0; i < style->prop_cnt; i++) {
 800a180:	3301      	adds	r3, #1
 800a182:	e7f5      	b.n	800a170 <lv_style_get_prop+0x1c>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	e000      	b.n	800a18a <lv_style_get_prop+0x36>
 800a188:	3308      	adds	r3, #8
 800a18a:	8818      	ldrh	r0, [r3, #0]
 800a18c:	b128      	cbz	r0, 800a19a <lv_style_get_prop+0x46>
            if(const_prop->prop == prop) {
 800a18e:	4281      	cmp	r1, r0
 800a190:	d1fa      	bne.n	800a188 <lv_style_get_prop+0x34>
                *value = const_prop->value;
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	6013      	str	r3, [r2, #0]
                return LV_RES_OK;
 800a196:	2001      	movs	r0, #1
 800a198:	4770      	bx	lr
 800a19a:	4770      	bx	lr
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                *value = values[i];
 800a19c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a1a0:	6013      	str	r3, [r2, #0]
                return LV_RES_OK;
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e000      	b.n	800a1a8 <lv_style_get_prop+0x54>
    }
    else if(style->prop1 == prop) {
        *value = style->v_p.value1;
        return LV_RES_OK;
    }
    return LV_RES_INV;
 800a1a6:	2000      	movs	r0, #0
    return lv_style_get_prop_inlined(style, prop, value);
}
 800a1a8:	bd10      	pop	{r4, pc}
    else if(style->prop1 == prop) {
 800a1aa:	8898      	ldrh	r0, [r3, #4]
 800a1ac:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800a1b0:	4288      	cmp	r0, r1
 800a1b2:	d001      	beq.n	800a1b8 <lv_style_get_prop+0x64>
    return LV_RES_INV;
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	4770      	bx	lr
        *value = style->v_p.value1;
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6013      	str	r3, [r2, #0]
        return LV_RES_OK;
 800a1bc:	2001      	movs	r0, #1
 800a1be:	4770      	bx	lr
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <lv_style_prop_get_default>:
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
 800a1c4:	2853      	cmp	r0, #83	; 0x53
 800a1c6:	d820      	bhi.n	800a20a <lv_style_prop_get_default+0x46>
 800a1c8:	2820      	cmp	r0, #32
 800a1ca:	d343      	bcc.n	800a254 <lv_style_prop_get_default+0x90>
 800a1cc:	3820      	subs	r0, #32
 800a1ce:	2833      	cmp	r0, #51	; 0x33
 800a1d0:	d840      	bhi.n	800a254 <lv_style_prop_get_default+0x90>
 800a1d2:	e8df f000 	tbb	[pc, r0]
 800a1d6:	3f4a      	.short	0x3f4a
 800a1d8:	543f3f50 	.word	0x543f3f50
 800a1dc:	483f3f3f 	.word	0x483f3f3f
 800a1e0:	3f3f3f3f 	.word	0x3f3f3f3f
 800a1e4:	48503f3f 	.word	0x48503f3f
 800a1e8:	3f3f563f 	.word	0x3f3f563f
 800a1ec:	3f3f3f3f 	.word	0x3f3f3f3f
 800a1f0:	3f3f503f 	.word	0x3f3f503f
 800a1f4:	3f3f3f3f 	.word	0x3f3f3f3f
 800a1f8:	3f503f3f 	.word	0x3f503f3f
 800a1fc:	3f3f5048 	.word	0x3f3f5048
 800a200:	503f3f3f 	.word	0x503f3f3f
 800a204:	3f3f3f48 	.word	0x3f3f3f48
 800a208:	4850      	.short	0x4850
 800a20a:	f241 4359 	movw	r3, #5209	; 0x1459
 800a20e:	4298      	cmp	r0, r3
 800a210:	d039      	beq.n	800a286 <lv_style_prop_get_default+0xc2>
 800a212:	d906      	bls.n	800a222 <lv_style_prop_get_default+0x5e>
 800a214:	f643 030e 	movw	r3, #14350	; 0x380e
 800a218:	4298      	cmp	r0, r3
 800a21a:	d11b      	bne.n	800a254 <lv_style_prop_get_default+0x90>
        case LV_STYLE_TRANSFORM_ZOOM:
            value.num = LV_IMG_ZOOM_NONE;
 800a21c:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 800a220:	4770      	bx	lr
    switch(prop) {
 800a222:	f241 0303 	movw	r3, #4099	; 0x1003
 800a226:	4298      	cmp	r0, r3
 800a228:	d004      	beq.n	800a234 <lv_style_prop_get_default+0x70>
 800a22a:	d906      	bls.n	800a23a <lv_style_prop_get_default+0x76>
 800a22c:	f241 0306 	movw	r3, #4102	; 0x1006
 800a230:	4298      	cmp	r0, r3
 800a232:	d10f      	bne.n	800a254 <lv_style_prop_get_default+0x90>
        case LV_STYLE_TEXT_FONT:
            value.ptr = LV_FONT_DEFAULT;
            break;
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
 800a234:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 800a238:	4770      	bx	lr
    switch(prop) {
 800a23a:	f240 4362 	movw	r3, #1122	; 0x462
 800a23e:	4298      	cmp	r0, r3
 800a240:	d011      	beq.n	800a266 <lv_style_prop_get_default+0xa2>
 800a242:	d909      	bls.n	800a258 <lv_style_prop_get_default+0x94>
 800a244:	f640 033c 	movw	r3, #2108	; 0x83c
 800a248:	4298      	cmp	r0, r3
 800a24a:	d00c      	beq.n	800a266 <lv_style_prop_get_default+0xa2>
 800a24c:	f640 0345 	movw	r3, #2117	; 0x845
 800a250:	4298      	cmp	r0, r3
 800a252:	d008      	beq.n	800a266 <lv_style_prop_get_default+0xa2>
        default:
            value.ptr = NULL;
 800a254:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
 800a256:	4770      	bx	lr
    switch(prop) {
 800a258:	f240 4357 	movw	r3, #1111	; 0x457
 800a25c:	4298      	cmp	r0, r3
 800a25e:	d00a      	beq.n	800a276 <lv_style_prop_get_default+0xb2>
 800a260:	f5b0 6f8b 	cmp.w	r0, #1112	; 0x458
 800a264:	d1f6      	bne.n	800a254 <lv_style_prop_get_default+0x90>
            value.num = LV_OPA_COVER;
 800a266:	20ff      	movs	r0, #255	; 0xff
            break;
 800a268:	4770      	bx	lr
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800a26a:	2000      	movs	r0, #0
 800a26c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a270:	f363 000f 	bfi	r0, r3, #0, #16
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 800a274:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800a276:	2000      	movs	r0, #0
 800a278:	f36f 000f 	bfc	r0, #0, #16
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 800a27c:	4770      	bx	lr
            value.num = 255;
 800a27e:	20ff      	movs	r0, #255	; 0xff
            break;
 800a280:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 800a282:	200f      	movs	r0, #15
            break;
 800a284:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 800a286:	4801      	ldr	r0, [pc, #4]	; (800a28c <lv_style_prop_get_default+0xc8>)
            break;
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	0800f238 	.word	0x0800f238

0800a290 <_lv_style_get_prop_group>:
    return style->prop_cnt == 0 ? true : false;
}

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
    uint16_t group = (prop & 0x1FF) >> 4;
 800a290:	0903      	lsrs	r3, r0, #4
 800a292:	f3c0 1004 	ubfx	r0, r0, #4, #5
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 800a296:	f013 0f18 	tst.w	r3, #24
 800a29a:	d000      	beq.n	800a29e <_lv_style_get_prop_group+0xe>
 800a29c:	2007      	movs	r0, #7
    return (uint8_t)group;
}
 800a29e:	4770      	bx	lr

0800a2a0 <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 800a2a4:	6840      	ldr	r0, [r0, #4]
 800a2a6:	f7fe ff83 	bl	80091b0 <lv_tick_elaps>
    if(elp >= timer->period)
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	4283      	cmp	r3, r0
 800a2ae:	d901      	bls.n	800a2b4 <lv_timer_time_remaining+0x14>
        return 0;
    return timer->period - elp;
 800a2b0:	1a18      	subs	r0, r3, r0
}
 800a2b2:	bd10      	pop	{r4, pc}
        return 0;
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	e7fc      	b.n	800a2b2 <lv_timer_time_remaining+0x12>

0800a2b8 <lv_timer_create>:
{
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460f      	mov	r7, r1
 800a2be:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 800a2c0:	480b      	ldr	r0, [pc, #44]	; (800a2f0 <lv_timer_create+0x38>)
 800a2c2:	f7ff fc93 	bl	8009bec <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 800a2c6:	b190      	cbz	r0, 800a2ee <lv_timer_create+0x36>
 800a2c8:	4604      	mov	r4, r0
    new_timer->period = period;
 800a2ca:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 800a2cc:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2d2:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 800a2d4:	7d03      	ldrb	r3, [r0, #20]
 800a2d6:	f36f 0300 	bfc	r3, #0, #1
 800a2da:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 800a2dc:	f7fe ff5a 	bl	8009194 <lv_tick_get>
 800a2e0:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 800a2e2:	60e5      	str	r5, [r4, #12]
    timer_created = true;
 800a2e4:	4b03      	ldr	r3, [pc, #12]	; (800a2f4 <lv_timer_create+0x3c>)
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	701a      	strb	r2, [r3, #0]
}
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
 800a2ee:	e7fe      	b.n	800a2ee <lv_timer_create+0x36>
 800a2f0:	20001ec8 	.word	0x20001ec8
 800a2f4:	2000df70 	.word	0x2000df70

0800a2f8 <lv_timer_del>:
{
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	4805      	ldr	r0, [pc, #20]	; (800a314 <lv_timer_del+0x1c>)
 800a300:	f7ff fca2 	bl	8009c48 <_lv_ll_remove>
    timer_deleted = true;
 800a304:	4b04      	ldr	r3, [pc, #16]	; (800a318 <lv_timer_del+0x20>)
 800a306:	2201      	movs	r2, #1
 800a308:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 800a30a:	4620      	mov	r0, r4
 800a30c:	f7ff fd48 	bl	8009da0 <lv_mem_free>
}
 800a310:	bd10      	pop	{r4, pc}
 800a312:	bf00      	nop
 800a314:	20001ec8 	.word	0x20001ec8
 800a318:	2000df71 	.word	0x2000df71

0800a31c <lv_timer_exec>:
{
 800a31c:	b538      	push	{r3, r4, r5, lr}
    if(timer->paused) return false;
 800a31e:	7d03      	ldrb	r3, [r0, #20]
 800a320:	f013 0f01 	tst.w	r3, #1
 800a324:	d002      	beq.n	800a32c <lv_timer_exec+0x10>
 800a326:	2500      	movs	r5, #0
}
 800a328:	4628      	mov	r0, r5
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	4604      	mov	r4, r0
    if(lv_timer_time_remaining(timer) == 0) {
 800a32e:	f7ff ffb7 	bl	800a2a0 <lv_timer_time_remaining>
 800a332:	b970      	cbnz	r0, 800a352 <lv_timer_exec+0x36>
        int32_t original_repeat_count = timer->repeat_count;
 800a334:	6925      	ldr	r5, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 800a336:	2d00      	cmp	r5, #0
 800a338:	dd01      	ble.n	800a33e <lv_timer_exec+0x22>
 800a33a:	1e6b      	subs	r3, r5, #1
 800a33c:	6123      	str	r3, [r4, #16]
        timer->last_run = lv_tick_get();
 800a33e:	f7fe ff29 	bl	8009194 <lv_tick_get>
 800a342:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 800a344:	68a3      	ldr	r3, [r4, #8]
 800a346:	b183      	cbz	r3, 800a36a <lv_timer_exec+0x4e>
 800a348:	b18d      	cbz	r5, 800a36e <lv_timer_exec+0x52>
 800a34a:	4620      	mov	r0, r4
 800a34c:	4798      	blx	r3
        exec = true;
 800a34e:	2501      	movs	r5, #1
 800a350:	e000      	b.n	800a354 <lv_timer_exec+0x38>
    bool exec = false;
 800a352:	2500      	movs	r5, #0
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 800a354:	4b07      	ldr	r3, [pc, #28]	; (800a374 <lv_timer_exec+0x58>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e5      	bne.n	800a328 <lv_timer_exec+0xc>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1e2      	bne.n	800a328 <lv_timer_exec+0xc>
            lv_timer_del(timer);
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff ffc8 	bl	800a2f8 <lv_timer_del>
 800a368:	e7de      	b.n	800a328 <lv_timer_exec+0xc>
        exec = true;
 800a36a:	2501      	movs	r5, #1
 800a36c:	e7f2      	b.n	800a354 <lv_timer_exec+0x38>
 800a36e:	2501      	movs	r5, #1
 800a370:	e7f0      	b.n	800a354 <lv_timer_exec+0x38>
 800a372:	bf00      	nop
 800a374:	2000df71 	.word	0x2000df71

0800a378 <lv_timer_handler>:
{
 800a378:	b570      	push	{r4, r5, r6, lr}
    if(already_running) {
 800a37a:	4b44      	ldr	r3, [pc, #272]	; (800a48c <lv_timer_handler+0x114>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f040 8081 	bne.w	800a486 <lv_timer_handler+0x10e>
    already_running = true;
 800a384:	4b41      	ldr	r3, [pc, #260]	; (800a48c <lv_timer_handler+0x114>)
 800a386:	2201      	movs	r2, #1
 800a388:	701a      	strb	r2, [r3, #0]
    if(lv_timer_run == false) {
 800a38a:	4b41      	ldr	r3, [pc, #260]	; (800a490 <lv_timer_handler+0x118>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b923      	cbnz	r3, 800a39a <lv_timer_handler+0x22>
        already_running = false; /*Release mutex*/
 800a390:	4b3e      	ldr	r3, [pc, #248]	; (800a48c <lv_timer_handler+0x114>)
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
        return 1;
 800a396:	2601      	movs	r6, #1
 800a398:	e076      	b.n	800a488 <lv_timer_handler+0x110>
    uint32_t handler_start = lv_tick_get();
 800a39a:	f7fe fefb 	bl	8009194 <lv_tick_get>
    if(handler_start == 0) {
 800a39e:	4605      	mov	r5, r0
 800a3a0:	bb10      	cbnz	r0, 800a3e8 <lv_timer_handler+0x70>
        run_cnt++;
 800a3a2:	4a3c      	ldr	r2, [pc, #240]	; (800a494 <lv_timer_handler+0x11c>)
 800a3a4:	6813      	ldr	r3, [r2, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	6013      	str	r3, [r2, #0]
        if(run_cnt > 100) {
 800a3aa:	2b64      	cmp	r3, #100	; 0x64
 800a3ac:	d91c      	bls.n	800a3e8 <lv_timer_handler+0x70>
            run_cnt = 0;
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	e018      	b.n	800a3e8 <lv_timer_handler+0x70>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 800a3b6:	4b38      	ldr	r3, [pc, #224]	; (800a498 <lv_timer_handler+0x120>)
 800a3b8:	601c      	str	r4, [r3, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 800a3ba:	4b37      	ldr	r3, [pc, #220]	; (800a498 <lv_timer_handler+0x120>)
 800a3bc:	6819      	ldr	r1, [r3, #0]
 800a3be:	b181      	cbz	r1, 800a3e2 <lv_timer_handler+0x6a>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 800a3c0:	4836      	ldr	r0, [pc, #216]	; (800a49c <lv_timer_handler+0x124>)
 800a3c2:	f7ff fc3a 	bl	8009c3a <_lv_ll_get_next>
 800a3c6:	4604      	mov	r4, r0
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 800a3c8:	4b33      	ldr	r3, [pc, #204]	; (800a498 <lv_timer_handler+0x120>)
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	f7ff ffa6 	bl	800a31c <lv_timer_exec>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d0f0      	beq.n	800a3b6 <lv_timer_handler+0x3e>
                if(timer_created || timer_deleted) {
 800a3d4:	4b32      	ldr	r3, [pc, #200]	; (800a4a0 <lv_timer_handler+0x128>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	b91b      	cbnz	r3, 800a3e2 <lv_timer_handler+0x6a>
 800a3da:	4b32      	ldr	r3, [pc, #200]	; (800a4a4 <lv_timer_handler+0x12c>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0e9      	beq.n	800a3b6 <lv_timer_handler+0x3e>
    } while(LV_GC_ROOT(_lv_timer_act));
 800a3e2:	4b2d      	ldr	r3, [pc, #180]	; (800a498 <lv_timer_handler+0x120>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	b153      	cbz	r3, 800a3fe <lv_timer_handler+0x86>
        timer_deleted             = false;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4a2e      	ldr	r2, [pc, #184]	; (800a4a4 <lv_timer_handler+0x12c>)
 800a3ec:	7013      	strb	r3, [r2, #0]
        timer_created             = false;
 800a3ee:	4a2c      	ldr	r2, [pc, #176]	; (800a4a0 <lv_timer_handler+0x128>)
 800a3f0:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 800a3f2:	482a      	ldr	r0, [pc, #168]	; (800a49c <lv_timer_handler+0x124>)
 800a3f4:	f7ff fc19 	bl	8009c2a <_lv_ll_get_head>
 800a3f8:	4b27      	ldr	r3, [pc, #156]	; (800a498 <lv_timer_handler+0x120>)
 800a3fa:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 800a3fc:	e7dd      	b.n	800a3ba <lv_timer_handler+0x42>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 800a3fe:	4827      	ldr	r0, [pc, #156]	; (800a49c <lv_timer_handler+0x124>)
 800a400:	f7ff fc13 	bl	8009c2a <_lv_ll_get_head>
 800a404:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TIMER_READY;
 800a406:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    while(next) {
 800a40a:	e004      	b.n	800a416 <lv_timer_handler+0x9e>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 800a40c:	4621      	mov	r1, r4
 800a40e:	4823      	ldr	r0, [pc, #140]	; (800a49c <lv_timer_handler+0x124>)
 800a410:	f7ff fc13 	bl	8009c3a <_lv_ll_get_next>
 800a414:	4604      	mov	r4, r0
    while(next) {
 800a416:	b154      	cbz	r4, 800a42e <lv_timer_handler+0xb6>
        if(!next->paused) {
 800a418:	7d23      	ldrb	r3, [r4, #20]
 800a41a:	f013 0f01 	tst.w	r3, #1
 800a41e:	d1f5      	bne.n	800a40c <lv_timer_handler+0x94>
            uint32_t delay = lv_timer_time_remaining(next);
 800a420:	4620      	mov	r0, r4
 800a422:	f7ff ff3d 	bl	800a2a0 <lv_timer_time_remaining>
            if(delay < time_till_next)
 800a426:	4286      	cmp	r6, r0
 800a428:	d9f0      	bls.n	800a40c <lv_timer_handler+0x94>
                time_till_next = delay;
 800a42a:	4606      	mov	r6, r0
 800a42c:	e7ee      	b.n	800a40c <lv_timer_handler+0x94>
    busy_time += lv_tick_elaps(handler_start);
 800a42e:	4628      	mov	r0, r5
 800a430:	f7fe febe 	bl	80091b0 <lv_tick_elaps>
 800a434:	4a1c      	ldr	r2, [pc, #112]	; (800a4a8 <lv_timer_handler+0x130>)
 800a436:	6813      	ldr	r3, [r2, #0]
 800a438:	4403      	add	r3, r0
 800a43a:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 800a43c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <lv_timer_handler+0x134>)
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	f7fe feb6 	bl	80091b0 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 800a444:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a448:	d317      	bcc.n	800a47a <lv_timer_handler+0x102>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 800a44a:	4b17      	ldr	r3, [pc, #92]	; (800a4a8 <lv_timer_handler+0x130>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2264      	movs	r2, #100	; 0x64
 800a450:	fb02 f303 	mul.w	r3, r2, r3
 800a454:	fbb3 f3f0 	udiv	r3, r3, r0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	4a15      	ldr	r2, [pc, #84]	; (800a4b0 <lv_timer_handler+0x138>)
 800a45c:	7013      	strb	r3, [r2, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 800a45e:	2b64      	cmp	r3, #100	; 0x64
 800a460:	d80f      	bhi.n	800a482 <lv_timer_handler+0x10a>
 800a462:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800a466:	b2db      	uxtb	r3, r3
 800a468:	4a11      	ldr	r2, [pc, #68]	; (800a4b0 <lv_timer_handler+0x138>)
 800a46a:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 800a46c:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <lv_timer_handler+0x130>)
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 800a472:	f7fe fe8f 	bl	8009194 <lv_tick_get>
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <lv_timer_handler+0x134>)
 800a478:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
 800a47a:	4b04      	ldr	r3, [pc, #16]	; (800a48c <lv_timer_handler+0x114>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
    return time_till_next;
 800a480:	e002      	b.n	800a488 <lv_timer_handler+0x110>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 800a482:	2300      	movs	r3, #0
 800a484:	e7f0      	b.n	800a468 <lv_timer_handler+0xf0>
        return 1;
 800a486:	2601      	movs	r6, #1
}
 800a488:	4630      	mov	r0, r6
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	2000df58 	.word	0x2000df58
 800a490:	2000df68 	.word	0x2000df68
 800a494:	2000df6c 	.word	0x2000df6c
 800a498:	20001ec4 	.word	0x20001ec4
 800a49c:	20001ec8 	.word	0x20001ec8
 800a4a0:	2000df70 	.word	0x2000df70
 800a4a4:	2000df71 	.word	0x2000df71
 800a4a8:	2000df5c 	.word	0x2000df5c
 800a4ac:	2000df64 	.word	0x2000df64
 800a4b0:	2000df60 	.word	0x2000df60

0800a4b4 <lv_timer_pause>:
    timer->paused = true;
 800a4b4:	7d03      	ldrb	r3, [r0, #20]
 800a4b6:	f043 0301 	orr.w	r3, r3, #1
 800a4ba:	7503      	strb	r3, [r0, #20]
}
 800a4bc:	4770      	bx	lr

0800a4be <lv_timer_resume>:
    timer->paused = false;
 800a4be:	7d03      	ldrb	r3, [r0, #20]
 800a4c0:	f36f 0300 	bfc	r3, #0, #1
 800a4c4:	7503      	strb	r3, [r0, #20]
}
 800a4c6:	4770      	bx	lr

0800a4c8 <lv_timer_enable>:
    lv_timer_run = en;
 800a4c8:	4b01      	ldr	r3, [pc, #4]	; (800a4d0 <lv_timer_enable+0x8>)
 800a4ca:	7018      	strb	r0, [r3, #0]
}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	2000df68 	.word	0x2000df68

0800a4d4 <_lv_timer_core_init>:
{
 800a4d4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 800a4d6:	2118      	movs	r1, #24
 800a4d8:	4803      	ldr	r0, [pc, #12]	; (800a4e8 <_lv_timer_core_init+0x14>)
 800a4da:	f7ff fb7f 	bl	8009bdc <_lv_ll_init>
    lv_timer_enable(true);
 800a4de:	2001      	movs	r0, #1
 800a4e0:	f7ff fff2 	bl	800a4c8 <lv_timer_enable>
}
 800a4e4:	bd08      	pop	{r3, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20001ec8 	.word	0x20001ec8

0800a4ec <block_size>:
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 800a4ec:	6840      	ldr	r0, [r0, #4]
}
 800a4ee:	f020 0003 	bic.w	r0, r0, #3
 800a4f2:	4770      	bx	lr

0800a4f4 <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
    const size_t oldsize = block->size;
 800a4f4:	6843      	ldr	r3, [r0, #4]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 800a4f6:	f003 0303 	and.w	r3, r3, #3
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	6043      	str	r3, [r0, #4]
}
 800a4fe:	4770      	bx	lr

0800a500 <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 800a500:	b508      	push	{r3, lr}
    return block_size(block) == 0;
 800a502:	f7ff fff3 	bl	800a4ec <block_size>
}
 800a506:	fab0 f080 	clz	r0, r0
 800a50a:	0940      	lsrs	r0, r0, #5
 800a50c:	bd08      	pop	{r3, pc}

0800a50e <block_is_free>:

static int block_is_free(const block_header_t * block)
{
    return tlsf_cast(int, block->size & block_header_free_bit);
 800a50e:	6840      	ldr	r0, [r0, #4]
}
 800a510:	f000 0001 	and.w	r0, r0, #1
 800a514:	4770      	bx	lr

0800a516 <block_set_free>:

static void block_set_free(block_header_t * block)
{
    block->size |= block_header_free_bit;
 800a516:	6843      	ldr	r3, [r0, #4]
 800a518:	f043 0301 	orr.w	r3, r3, #1
 800a51c:	6043      	str	r3, [r0, #4]
}
 800a51e:	4770      	bx	lr

0800a520 <block_set_used>:

static void block_set_used(block_header_t * block)
{
    block->size &= ~block_header_free_bit;
 800a520:	6843      	ldr	r3, [r0, #4]
 800a522:	f023 0301 	bic.w	r3, r3, #1
 800a526:	6043      	str	r3, [r0, #4]
}
 800a528:	4770      	bx	lr

0800a52a <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 800a52a:	6840      	ldr	r0, [r0, #4]
}
 800a52c:	f000 0002 	and.w	r0, r0, #2
 800a530:	4770      	bx	lr

0800a532 <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
    block->size |= block_header_prev_free_bit;
 800a532:	6843      	ldr	r3, [r0, #4]
 800a534:	f043 0302 	orr.w	r3, r3, #2
 800a538:	6043      	str	r3, [r0, #4]
}
 800a53a:	4770      	bx	lr

0800a53c <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
    block->size &= ~block_header_prev_free_bit;
 800a53c:	6843      	ldr	r3, [r0, #4]
 800a53e:	f023 0302 	bic.w	r3, r3, #2
 800a542:	6043      	str	r3, [r0, #4]
}
 800a544:	4770      	bx	lr

0800a546 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
    return tlsf_cast(block_header_t *,
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 800a546:	3808      	subs	r0, #8
 800a548:	4770      	bx	lr

0800a54a <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
    return tlsf_cast(void *,
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 800a54a:	3008      	adds	r0, #8
 800a54c:	4770      	bx	lr

0800a54e <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
}
 800a54e:	4408      	add	r0, r1
 800a550:	4770      	bx	lr

0800a552 <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 800a552:	b510      	push	{r4, lr}
 800a554:	4604      	mov	r4, r0
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 800a556:	f7ff ffe8 	bl	800a52a <block_is_prev_free>
 800a55a:	b900      	cbnz	r0, 800a55e <block_prev+0xc>
 800a55c:	e7fe      	b.n	800a55c <block_prev+0xa>
    return block->prev_phys_block;
}
 800a55e:	6820      	ldr	r0, [r4, #0]
 800a560:	bd10      	pop	{r4, pc}

0800a562 <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 800a562:	b538      	push	{r3, r4, r5, lr}
 800a564:	4604      	mov	r4, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 800a566:	f7ff fff0 	bl	800a54a <block_to_ptr>
 800a56a:	4605      	mov	r5, r0
                                            block_size(block) - block_header_overhead);
 800a56c:	4620      	mov	r0, r4
 800a56e:	f7ff ffbd 	bl	800a4ec <block_size>
    block_header_t * next = offset_to_block(block_to_ptr(block),
 800a572:	1f01      	subs	r1, r0, #4
 800a574:	4628      	mov	r0, r5
 800a576:	f7ff ffea 	bl	800a54e <offset_to_block>
 800a57a:	4605      	mov	r5, r0
    tlsf_assert(!block_is_last(block));
 800a57c:	4620      	mov	r0, r4
 800a57e:	f7ff ffbf 	bl	800a500 <block_is_last>
 800a582:	b100      	cbz	r0, 800a586 <block_next+0x24>
 800a584:	e7fe      	b.n	800a584 <block_next+0x22>
    return next;
}
 800a586:	4628      	mov	r0, r5
 800a588:	bd38      	pop	{r3, r4, r5, pc}

0800a58a <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 800a58a:	b510      	push	{r4, lr}
 800a58c:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 800a58e:	f7ff ffe8 	bl	800a562 <block_next>
    next->prev_phys_block = block;
 800a592:	6004      	str	r4, [r0, #0]
    return next;
}
 800a594:	bd10      	pop	{r4, pc}

0800a596 <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 800a596:	b510      	push	{r4, lr}
 800a598:	4604      	mov	r4, r0
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 800a59a:	f7ff fff6 	bl	800a58a <block_link_next>
    block_set_prev_free(next);
 800a59e:	f7ff ffc8 	bl	800a532 <block_set_prev_free>
    block_set_free(block);
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff ffb7 	bl	800a516 <block_set_free>
}
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 800a5ae:	f7ff ffd8 	bl	800a562 <block_next>
    block_set_prev_used(next);
 800a5b2:	f7ff ffc3 	bl	800a53c <block_set_prev_used>
    block_set_used(block);
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f7ff ffb2 	bl	800a520 <block_set_used>
}
 800a5bc:	bd10      	pop	{r4, pc}

0800a5be <align_up>:

static size_t align_up(size_t x, size_t align)
{
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 800a5be:	1e4b      	subs	r3, r1, #1
 800a5c0:	420b      	tst	r3, r1
 800a5c2:	d000      	beq.n	800a5c6 <align_up+0x8>
 800a5c4:	e7fe      	b.n	800a5c4 <align_up+0x6>
    return (x + (align - 1)) & ~(align - 1);
 800a5c6:	4408      	add	r0, r1
 800a5c8:	3801      	subs	r0, #1
 800a5ca:	4249      	negs	r1, r1
}
 800a5cc:	4008      	ands	r0, r1
 800a5ce:	4770      	bx	lr

0800a5d0 <align_down>:

static size_t align_down(size_t x, size_t align)
{
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 800a5d0:	1e4b      	subs	r3, r1, #1
 800a5d2:	420b      	tst	r3, r1
 800a5d4:	d000      	beq.n	800a5d8 <align_down+0x8>
 800a5d6:	e7fe      	b.n	800a5d6 <align_down+0x6>
    return x - (x & (align - 1));
 800a5d8:	4249      	negs	r1, r1
}
 800a5da:	4008      	ands	r0, r1
 800a5dc:	4770      	bx	lr

0800a5de <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 800a5de:	4408      	add	r0, r1
 800a5e0:	3801      	subs	r0, #1
 800a5e2:	424b      	negs	r3, r1
 800a5e4:	4018      	ands	r0, r3
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 800a5e6:	1e4b      	subs	r3, r1, #1
 800a5e8:	420b      	tst	r3, r1
 800a5ea:	d000      	beq.n	800a5ee <align_ptr+0x10>
 800a5ec:	e7fe      	b.n	800a5ec <align_ptr+0xe>
    return tlsf_cast(void *, aligned);
}
 800a5ee:	4770      	bx	lr

0800a5f0 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 800a5f0:	b508      	push	{r3, lr}
    size_t adjust = 0;
    if(size) {
 800a5f2:	b900      	cbnz	r0, 800a5f6 <adjust_request_size+0x6>
        if(aligned < block_size_max) {
            adjust = tlsf_max(aligned, block_size_min);
        }
    }
    return adjust;
}
 800a5f4:	bd08      	pop	{r3, pc}
        const size_t aligned = align_up(size, align);
 800a5f6:	f7ff ffe2 	bl	800a5be <align_up>
        if(aligned < block_size_max) {
 800a5fa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800a5fe:	d203      	bcs.n	800a608 <adjust_request_size+0x18>
            adjust = tlsf_max(aligned, block_size_min);
 800a600:	280c      	cmp	r0, #12
 800a602:	bf38      	it	cc
 800a604:	200c      	movcc	r0, #12
 800a606:	e7f5      	b.n	800a5f4 <adjust_request_size+0x4>
    size_t adjust = 0;
 800a608:	2000      	movs	r0, #0
 800a60a:	e7f3      	b.n	800a5f4 <adjust_request_size+0x4>

0800a60c <remove_free_block>:
    return control->blocks[fl][sl];
}

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 800a60c:	b510      	push	{r4, lr}
 800a60e:	4696      	mov	lr, r2
    block_header_t * prev = block->prev_free;
 800a610:	68ca      	ldr	r2, [r1, #12]
    block_header_t * next = block->next_free;
 800a612:	688c      	ldr	r4, [r1, #8]
    tlsf_assert(prev && "prev_free field can not be null");
 800a614:	b16a      	cbz	r2, 800a632 <remove_free_block+0x26>
    tlsf_assert(next && "next_free field can not be null");
 800a616:	b16c      	cbz	r4, 800a634 <remove_free_block+0x28>
    next->prev_free = prev;
 800a618:	60e2      	str	r2, [r4, #12]
    prev->next_free = next;
 800a61a:	6094      	str	r4, [r2, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 800a61c:	eb03 1c4e 	add.w	ip, r3, lr, lsl #5
 800a620:	f10c 0c0e 	add.w	ip, ip, #14
 800a624:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800a628:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800a62c:	428a      	cmp	r2, r1
 800a62e:	d002      	beq.n	800a636 <remove_free_block+0x2a>
            if(!control->sl_bitmap[fl]) {
                control->fl_bitmap &= ~(1U << fl);
            }
        }
    }
}
 800a630:	bd10      	pop	{r4, pc}
    tlsf_assert(prev && "prev_free field can not be null");
 800a632:	e7fe      	b.n	800a632 <remove_free_block+0x26>
    tlsf_assert(next && "next_free field can not be null");
 800a634:	e7fe      	b.n	800a634 <remove_free_block+0x28>
        control->blocks[fl][sl] = next;
 800a636:	f8cc 4004 	str.w	r4, [ip, #4]
        if(next == &control->block_null) {
 800a63a:	42a0      	cmp	r0, r4
 800a63c:	d1f8      	bne.n	800a630 <remove_free_block+0x24>
            control->sl_bitmap[fl] &= ~(1U << sl);
 800a63e:	2101      	movs	r1, #1
 800a640:	4099      	lsls	r1, r3
 800a642:	f10e 0204 	add.w	r2, lr, #4
 800a646:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a64a:	6853      	ldr	r3, [r2, #4]
 800a64c:	ea23 0301 	bic.w	r3, r3, r1
 800a650:	6053      	str	r3, [r2, #4]
            if(!control->sl_bitmap[fl]) {
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1ec      	bne.n	800a630 <remove_free_block+0x24>
                control->fl_bitmap &= ~(1U << fl);
 800a656:	2301      	movs	r3, #1
 800a658:	fa03 f20e 	lsl.w	r2, r3, lr
 800a65c:	6903      	ldr	r3, [r0, #16]
 800a65e:	ea23 0302 	bic.w	r3, r3, r2
 800a662:	6103      	str	r3, [r0, #16]
}
 800a664:	e7e4      	b.n	800a630 <remove_free_block+0x24>

0800a666 <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 800a666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66a:	461f      	mov	r7, r3
    block_header_t * current = control->blocks[fl][sl];
 800a66c:	eb03 1c42 	add.w	ip, r3, r2, lsl #5
 800a670:	f10c 0c0e 	add.w	ip, ip, #14
 800a674:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800a678:	f8dc 3004 	ldr.w	r3, [ip, #4]
    tlsf_assert(current && "free list cannot have a null entry");
 800a67c:	b183      	cbz	r3, 800a6a0 <insert_free_block+0x3a>
 800a67e:	4605      	mov	r5, r0
 800a680:	460c      	mov	r4, r1
 800a682:	4616      	mov	r6, r2
    tlsf_assert(block && "cannot insert a null entry into the free list");
 800a684:	b169      	cbz	r1, 800a6a2 <insert_free_block+0x3c>
    block->next_free = current;
 800a686:	608b      	str	r3, [r1, #8]
    block->prev_free = &control->block_null;
 800a688:	60c8      	str	r0, [r1, #12]
    current->prev_free = block;
 800a68a:	60d9      	str	r1, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 800a68c:	4608      	mov	r0, r1
 800a68e:	f7ff ff5c 	bl	800a54a <block_to_ptr>
 800a692:	4680      	mov	r8, r0
 800a694:	2104      	movs	r1, #4
 800a696:	f7ff ffa2 	bl	800a5de <align_ptr>
 800a69a:	4580      	cmp	r8, r0
 800a69c:	d002      	beq.n	800a6a4 <insert_free_block+0x3e>
 800a69e:	e7fe      	b.n	800a69e <insert_free_block+0x38>
    tlsf_assert(current && "free list cannot have a null entry");
 800a6a0:	e7fe      	b.n	800a6a0 <insert_free_block+0x3a>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 800a6a2:	e7fe      	b.n	800a6a2 <insert_free_block+0x3c>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 800a6a4:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800a6a8:	330e      	adds	r3, #14
 800a6aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a6ae:	605c      	str	r4, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	fa03 f106 	lsl.w	r1, r3, r6
 800a6b6:	692a      	ldr	r2, [r5, #16]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	612a      	str	r2, [r5, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 800a6bc:	40bb      	lsls	r3, r7
 800a6be:	3604      	adds	r6, #4
 800a6c0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800a6c4:	686a      	ldr	r2, [r5, #4]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	606b      	str	r3, [r5, #4]
}
 800a6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6ce <block_can_split>:
    mapping_insert(block_size(block), &fl, &sl);
    insert_free_block(control, block, fl, sl);
}

static int block_can_split(block_header_t * block, size_t size)
{
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	460c      	mov	r4, r1
    return block_size(block) >= sizeof(block_header_t) + size;
 800a6d2:	f7ff ff0b 	bl	800a4ec <block_size>
 800a6d6:	3410      	adds	r4, #16
}
 800a6d8:	42a0      	cmp	r0, r4
 800a6da:	bf34      	ite	cc
 800a6dc:	2000      	movcc	r0, #0
 800a6de:	2001      	movcs	r0, #1
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 800a6e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e6:	4607      	mov	r7, r0
 800a6e8:	460c      	mov	r4, r1
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 800a6ea:	f7ff ff2e 	bl	800a54a <block_to_ptr>
 800a6ee:	1f21      	subs	r1, r4, #4
 800a6f0:	f7ff ff2d 	bl	800a54e <offset_to_block>
 800a6f4:	4605      	mov	r5, r0

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	f7ff fef8 	bl	800a4ec <block_size>
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	1b03      	subs	r3, r0, r4
 800a700:	f1a3 0904 	sub.w	r9, r3, #4

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 800a704:	4628      	mov	r0, r5
 800a706:	f7ff ff20 	bl	800a54a <block_to_ptr>
 800a70a:	4680      	mov	r8, r0
 800a70c:	2104      	movs	r1, #4
 800a70e:	f7ff ff66 	bl	800a5de <align_ptr>
 800a712:	4580      	cmp	r8, r0
 800a714:	d000      	beq.n	800a718 <block_split+0x36>
 800a716:	e7fe      	b.n	800a716 <block_split+0x34>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 800a718:	eb04 0309 	add.w	r3, r4, r9
 800a71c:	3304      	adds	r3, #4
 800a71e:	429e      	cmp	r6, r3
 800a720:	d000      	beq.n	800a724 <block_split+0x42>
 800a722:	e7fe      	b.n	800a722 <block_split+0x40>
    block_set_size(remaining, remain_size);
 800a724:	4649      	mov	r1, r9
 800a726:	4628      	mov	r0, r5
 800a728:	f7ff fee4 	bl	800a4f4 <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 800a72c:	4628      	mov	r0, r5
 800a72e:	f7ff fedd 	bl	800a4ec <block_size>
 800a732:	280b      	cmp	r0, #11
 800a734:	d800      	bhi.n	800a738 <block_split+0x56>
 800a736:	e7fe      	b.n	800a736 <block_split+0x54>

    block_set_size(block, size);
 800a738:	4621      	mov	r1, r4
 800a73a:	4638      	mov	r0, r7
 800a73c:	f7ff feda 	bl	800a4f4 <block_set_size>
    block_mark_as_free(remaining);
 800a740:	4628      	mov	r0, r5
 800a742:	f7ff ff28 	bl	800a596 <block_mark_as_free>

    return remaining;
}
 800a746:	4628      	mov	r0, r5
 800a748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a74c <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4604      	mov	r4, r0
 800a750:	460d      	mov	r5, r1
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 800a752:	f7ff fed5 	bl	800a500 <block_is_last>
 800a756:	b100      	cbz	r0, 800a75a <block_absorb+0xe>
 800a758:	e7fe      	b.n	800a758 <block_absorb+0xc>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 800a75a:	4628      	mov	r0, r5
 800a75c:	f7ff fec6 	bl	800a4ec <block_size>
 800a760:	1d02      	adds	r2, r0, #4
 800a762:	6863      	ldr	r3, [r4, #4]
 800a764:	4413      	add	r3, r2
 800a766:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 800a768:	4620      	mov	r0, r4
 800a76a:	f7ff ff0e 	bl	800a58a <block_link_next>
    return prev;
}
 800a76e:	4620      	mov	r0, r4
 800a770:	bd38      	pop	{r3, r4, r5, pc}

0800a772 <control_constructor>:
/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
    int i, j;

    control->block_null.next_free = &control->block_null;
 800a772:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
 800a774:	60c0      	str	r0, [r0, #12]

    control->fl_bitmap = 0;
 800a776:	2100      	movs	r1, #0
 800a778:	6101      	str	r1, [r0, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 800a77a:	e009      	b.n	800a790 <control_constructor+0x1e>
        control->sl_bitmap[i] = 0;
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
            control->blocks[i][j] = &control->block_null;
 800a77c:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 800a780:	330e      	adds	r3, #14
 800a782:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a786:	6058      	str	r0, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 800a788:	3201      	adds	r2, #1
 800a78a:	2a1f      	cmp	r2, #31
 800a78c:	ddf6      	ble.n	800a77c <control_constructor+0xa>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 800a78e:	3101      	adds	r1, #1
 800a790:	2909      	cmp	r1, #9
 800a792:	dc05      	bgt.n	800a7a0 <control_constructor+0x2e>
        control->sl_bitmap[i] = 0;
 800a794:	1d0b      	adds	r3, r1, #4
 800a796:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a79a:	2200      	movs	r2, #0
 800a79c:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 800a79e:	e7f4      	b.n	800a78a <control_constructor+0x18>
        }
    }
}
 800a7a0:	4770      	bx	lr

0800a7a2 <default_walker>:

static void default_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(user);
    printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)block_from_ptr(ptr));
}
 800a7a2:	4770      	bx	lr

0800a7a4 <tlsf_fls>:
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 800a7a4:	b128      	cbz	r0, 800a7b2 <tlsf_fls+0xe>
 800a7a6:	fab0 f080 	clz	r0, r0
 800a7aa:	f1c0 0020 	rsb	r0, r0, #32
}
 800a7ae:	3801      	subs	r0, #1
 800a7b0:	4770      	bx	lr
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e7fb      	b.n	800a7ae <tlsf_fls+0xa>

0800a7b6 <mapping_insert>:
{
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	4616      	mov	r6, r2
    if(size < SMALL_BLOCK_SIZE) {
 800a7be:	287f      	cmp	r0, #127	; 0x7f
 800a7c0:	d808      	bhi.n	800a7d4 <mapping_insert+0x1e>
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	db04      	blt.n	800a7d0 <mapping_insert+0x1a>
 800a7c6:	1084      	asrs	r4, r0, #2
        fl = 0;
 800a7c8:	2000      	movs	r0, #0
    *fli = fl;
 800a7ca:	6028      	str	r0, [r5, #0]
    *sli = sl;
 800a7cc:	6034      	str	r4, [r6, #0]
}
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 800a7d0:	3003      	adds	r0, #3
 800a7d2:	e7f8      	b.n	800a7c6 <mapping_insert+0x10>
        fl = tlsf_fls_sizet(size);
 800a7d4:	f7ff ffe6 	bl	800a7a4 <tlsf_fls>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 800a7d8:	1f43      	subs	r3, r0, #5
 800a7da:	40dc      	lsrs	r4, r3
 800a7dc:	f084 0420 	eor.w	r4, r4, #32
        fl -= (FL_INDEX_SHIFT - 1);
 800a7e0:	3806      	subs	r0, #6
 800a7e2:	e7f2      	b.n	800a7ca <mapping_insert+0x14>

0800a7e4 <block_insert>:
{
 800a7e4:	b530      	push	{r4, r5, lr}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	f7ff fe7d 	bl	800a4ec <block_size>
 800a7f2:	466a      	mov	r2, sp
 800a7f4:	a901      	add	r1, sp, #4
 800a7f6:	f7ff ffde 	bl	800a7b6 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	9a01      	ldr	r2, [sp, #4]
 800a7fe:	4621      	mov	r1, r4
 800a800:	4628      	mov	r0, r5
 800a802:	f7ff ff30 	bl	800a666 <insert_free_block>
}
 800a806:	b003      	add	sp, #12
 800a808:	bd30      	pop	{r4, r5, pc}

0800a80a <block_trim_free>:
{
 800a80a:	b570      	push	{r4, r5, r6, lr}
 800a80c:	4606      	mov	r6, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	4615      	mov	r5, r2
    tlsf_assert(block_is_free(block) && "block must be free");
 800a812:	4608      	mov	r0, r1
 800a814:	f7ff fe7b 	bl	800a50e <block_is_free>
 800a818:	b900      	cbnz	r0, 800a81c <block_trim_free+0x12>
 800a81a:	e7fe      	b.n	800a81a <block_trim_free+0x10>
    if(block_can_split(block, size)) {
 800a81c:	4629      	mov	r1, r5
 800a81e:	4620      	mov	r0, r4
 800a820:	f7ff ff55 	bl	800a6ce <block_can_split>
 800a824:	b900      	cbnz	r0, 800a828 <block_trim_free+0x1e>
}
 800a826:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 800a828:	4629      	mov	r1, r5
 800a82a:	4620      	mov	r0, r4
 800a82c:	f7ff ff59 	bl	800a6e2 <block_split>
 800a830:	4605      	mov	r5, r0
        block_link_next(block);
 800a832:	4620      	mov	r0, r4
 800a834:	f7ff fea9 	bl	800a58a <block_link_next>
        block_set_prev_free(remaining_block);
 800a838:	4628      	mov	r0, r5
 800a83a:	f7ff fe7a 	bl	800a532 <block_set_prev_free>
        block_insert(control, remaining_block);
 800a83e:	4629      	mov	r1, r5
 800a840:	4630      	mov	r0, r6
 800a842:	f7ff ffcf 	bl	800a7e4 <block_insert>
}
 800a846:	e7ee      	b.n	800a826 <block_trim_free+0x1c>

0800a848 <block_prepare_used>:
{
 800a848:	b510      	push	{r4, lr}
    if(block) {
 800a84a:	460c      	mov	r4, r1
 800a84c:	b151      	cbz	r1, 800a864 <block_prepare_used+0x1c>
        tlsf_assert(size && "size must be non-zero");
 800a84e:	b902      	cbnz	r2, 800a852 <block_prepare_used+0xa>
 800a850:	e7fe      	b.n	800a850 <block_prepare_used+0x8>
        block_trim_free(control, block, size);
 800a852:	f7ff ffda 	bl	800a80a <block_trim_free>
        block_mark_as_used(block);
 800a856:	4620      	mov	r0, r4
 800a858:	f7ff fea7 	bl	800a5aa <block_mark_as_used>
        p = block_to_ptr(block);
 800a85c:	4620      	mov	r0, r4
 800a85e:	f7ff fe74 	bl	800a54a <block_to_ptr>
}
 800a862:	bd10      	pop	{r4, pc}
    void * p = 0;
 800a864:	4608      	mov	r0, r1
    return p;
 800a866:	e7fc      	b.n	800a862 <block_prepare_used+0x1a>

0800a868 <block_remove>:
{
 800a868:	b530      	push	{r4, r5, lr}
 800a86a:	b083      	sub	sp, #12
 800a86c:	4605      	mov	r5, r0
 800a86e:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 800a870:	4608      	mov	r0, r1
 800a872:	f7ff fe3b 	bl	800a4ec <block_size>
 800a876:	466a      	mov	r2, sp
 800a878:	a901      	add	r1, sp, #4
 800a87a:	f7ff ff9c 	bl	800a7b6 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 800a87e:	9b00      	ldr	r3, [sp, #0]
 800a880:	9a01      	ldr	r2, [sp, #4]
 800a882:	4621      	mov	r1, r4
 800a884:	4628      	mov	r0, r5
 800a886:	f7ff fec1 	bl	800a60c <remove_free_block>
}
 800a88a:	b003      	add	sp, #12
 800a88c:	bd30      	pop	{r4, r5, pc}

0800a88e <block_merge_prev>:
{
 800a88e:	b570      	push	{r4, r5, r6, lr}
 800a890:	4605      	mov	r5, r0
 800a892:	460c      	mov	r4, r1
    if(block_is_prev_free(block)) {
 800a894:	4608      	mov	r0, r1
 800a896:	f7ff fe48 	bl	800a52a <block_is_prev_free>
 800a89a:	b908      	cbnz	r0, 800a8a0 <block_merge_prev+0x12>
}
 800a89c:	4620      	mov	r0, r4
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * prev = block_prev(block);
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7ff fe56 	bl	800a552 <block_prev>
        tlsf_assert(prev && "prev physical block can't be null");
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	b118      	cbz	r0, 800a8b2 <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 800a8aa:	f7ff fe30 	bl	800a50e <block_is_free>
 800a8ae:	b908      	cbnz	r0, 800a8b4 <block_merge_prev+0x26>
 800a8b0:	e7fe      	b.n	800a8b0 <block_merge_prev+0x22>
        tlsf_assert(prev && "prev physical block can't be null");
 800a8b2:	e7fe      	b.n	800a8b2 <block_merge_prev+0x24>
        block_remove(control, prev);
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f7ff ffd6 	bl	800a868 <block_remove>
        block = block_absorb(prev, block);
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f7ff ff44 	bl	800a74c <block_absorb>
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	e7e9      	b.n	800a89c <block_merge_prev+0xe>

0800a8c8 <block_merge_next>:
{
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	460c      	mov	r4, r1
    block_header_t * next = block_next(block);
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	f7ff fe47 	bl	800a562 <block_next>
    tlsf_assert(next && "next physical block can't be null");
 800a8d4:	b140      	cbz	r0, 800a8e8 <block_merge_next+0x20>
 800a8d6:	4606      	mov	r6, r0
    if(block_is_free(next)) {
 800a8d8:	f7ff fe19 	bl	800a50e <block_is_free>
 800a8dc:	b170      	cbz	r0, 800a8fc <block_merge_next+0x34>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7ff fe0e 	bl	800a500 <block_is_last>
 800a8e4:	b108      	cbz	r0, 800a8ea <block_merge_next+0x22>
 800a8e6:	e7fe      	b.n	800a8e6 <block_merge_next+0x1e>
    tlsf_assert(next && "next physical block can't be null");
 800a8e8:	e7fe      	b.n	800a8e8 <block_merge_next+0x20>
        block_remove(control, next);
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f7ff ffbb 	bl	800a868 <block_remove>
        block = block_absorb(block, next);
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7ff ff29 	bl	800a74c <block_absorb>
 800a8fa:	4604      	mov	r4, r0
}
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}

0800a900 <block_trim_used>:
{
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	4606      	mov	r6, r0
 800a904:	460c      	mov	r4, r1
 800a906:	4615      	mov	r5, r2
    tlsf_assert(!block_is_free(block) && "block must be used");
 800a908:	4608      	mov	r0, r1
 800a90a:	f7ff fe00 	bl	800a50e <block_is_free>
 800a90e:	b100      	cbz	r0, 800a912 <block_trim_used+0x12>
 800a910:	e7fe      	b.n	800a910 <block_trim_used+0x10>
    if(block_can_split(block, size)) {
 800a912:	4629      	mov	r1, r5
 800a914:	4620      	mov	r0, r4
 800a916:	f7ff feda 	bl	800a6ce <block_can_split>
 800a91a:	b900      	cbnz	r0, 800a91e <block_trim_used+0x1e>
}
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 800a91e:	4629      	mov	r1, r5
 800a920:	4620      	mov	r0, r4
 800a922:	f7ff fede 	bl	800a6e2 <block_split>
 800a926:	4604      	mov	r4, r0
        block_set_prev_used(remaining_block);
 800a928:	f7ff fe08 	bl	800a53c <block_set_prev_used>
        remaining_block = block_merge_next(control, remaining_block);
 800a92c:	4621      	mov	r1, r4
 800a92e:	4630      	mov	r0, r6
 800a930:	f7ff ffca 	bl	800a8c8 <block_merge_next>
 800a934:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ff54 	bl	800a7e4 <block_insert>
}
 800a93c:	e7ee      	b.n	800a91c <block_trim_used+0x1c>

0800a93e <mapping_search>:
{
 800a93e:	b570      	push	{r4, r5, r6, lr}
 800a940:	4604      	mov	r4, r0
 800a942:	460d      	mov	r5, r1
 800a944:	4616      	mov	r6, r2
    if(size >= SMALL_BLOCK_SIZE) {
 800a946:	287f      	cmp	r0, #127	; 0x7f
 800a948:	d906      	bls.n	800a958 <mapping_search+0x1a>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 800a94a:	f7ff ff2b 	bl	800a7a4 <tlsf_fls>
 800a94e:	1f43      	subs	r3, r0, #5
 800a950:	2001      	movs	r0, #1
 800a952:	4098      	lsls	r0, r3
 800a954:	3801      	subs	r0, #1
        size += round;
 800a956:	4404      	add	r4, r0
    mapping_insert(size, fli, sli);
 800a958:	4632      	mov	r2, r6
 800a95a:	4629      	mov	r1, r5
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7ff ff2a 	bl	800a7b6 <mapping_insert>
}
 800a962:	bd70      	pop	{r4, r5, r6, pc}

0800a964 <tlsf_ffs>:
{
 800a964:	4603      	mov	r3, r0
    return __builtin_ffs(word) - 1;
 800a966:	fa90 f0a0 	rbit	r0, r0
 800a96a:	fab0 f080 	clz	r0, r0
 800a96e:	b90b      	cbnz	r3, 800a974 <tlsf_ffs+0x10>
 800a970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a974:	4770      	bx	lr

0800a976 <search_suitable_block>:
{
 800a976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a978:	4604      	mov	r4, r0
 800a97a:	4616      	mov	r6, r2
    int fl = *fli;
 800a97c:	680d      	ldr	r5, [r1, #0]
    int sl = *sli;
 800a97e:	6812      	ldr	r2, [r2, #0]
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 800a980:	1d2b      	adds	r3, r5, #4
 800a982:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a98c:	4090      	lsls	r0, r2
    if(!sl_map) {
 800a98e:	4018      	ands	r0, r3
 800a990:	d110      	bne.n	800a9b4 <search_suitable_block+0x3e>
 800a992:	460f      	mov	r7, r1
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 800a994:	6922      	ldr	r2, [r4, #16]
 800a996:	3501      	adds	r5, #1
 800a998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a99c:	40ab      	lsls	r3, r5
        if(!fl_map) {
 800a99e:	ea12 0003 	ands.w	r0, r2, r3
 800a9a2:	d013      	beq.n	800a9cc <search_suitable_block+0x56>
        fl = tlsf_ffs(fl_map);
 800a9a4:	f7ff ffde 	bl	800a964 <tlsf_ffs>
 800a9a8:	4605      	mov	r5, r0
        *fli = fl;
 800a9aa:	6038      	str	r0, [r7, #0]
        sl_map = control->sl_bitmap[fl];
 800a9ac:	1d03      	adds	r3, r0, #4
 800a9ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9b2:	6858      	ldr	r0, [r3, #4]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 800a9b4:	b900      	cbnz	r0, 800a9b8 <search_suitable_block+0x42>
 800a9b6:	e7fe      	b.n	800a9b6 <search_suitable_block+0x40>
    sl = tlsf_ffs(sl_map);
 800a9b8:	f7ff ffd4 	bl	800a964 <tlsf_ffs>
    *sli = sl;
 800a9bc:	6030      	str	r0, [r6, #0]
    return control->blocks[fl][sl];
 800a9be:	eb00 1345 	add.w	r3, r0, r5, lsl #5
 800a9c2:	330e      	adds	r3, #14
 800a9c4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a9c8:	6860      	ldr	r0, [r4, #4]
}
 800a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	e7fc      	b.n	800a9ca <search_suitable_block+0x54>

0800a9d0 <block_locate_free>:
{
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	b082      	sub	sp, #8
    int fl = 0, sl = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	9300      	str	r3, [sp, #0]
    if(size) {
 800a9da:	b1e1      	cbz	r1, 800aa16 <block_locate_free+0x46>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	460e      	mov	r6, r1
        mapping_search(size, &fl, &sl);
 800a9e0:	466a      	mov	r2, sp
 800a9e2:	a901      	add	r1, sp, #4
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7ff ffaa 	bl	800a93e <mapping_search>
        if(fl < FL_INDEX_COUNT) {
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	dc16      	bgt.n	800aa1e <block_locate_free+0x4e>
            block = search_suitable_block(control, &fl, &sl);
 800a9f0:	466a      	mov	r2, sp
 800a9f2:	a901      	add	r1, sp, #4
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f7ff ffbe 	bl	800a976 <search_suitable_block>
    if(block) {
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	b160      	cbz	r0, 800aa18 <block_locate_free+0x48>
        tlsf_assert(block_size(block) >= size);
 800a9fe:	f7ff fd75 	bl	800a4ec <block_size>
 800aa02:	42b0      	cmp	r0, r6
 800aa04:	d200      	bcs.n	800aa08 <block_locate_free+0x38>
 800aa06:	e7fe      	b.n	800aa06 <block_locate_free+0x36>
        remove_free_block(control, block, fl, sl);
 800aa08:	9b00      	ldr	r3, [sp, #0]
 800aa0a:	9a01      	ldr	r2, [sp, #4]
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff fdfc 	bl	800a60c <remove_free_block>
 800aa14:	e000      	b.n	800aa18 <block_locate_free+0x48>
    block_header_t * block = 0;
 800aa16:	2500      	movs	r5, #0
}
 800aa18:	4628      	mov	r0, r5
 800aa1a:	b002      	add	sp, #8
 800aa1c:	bd70      	pop	{r4, r5, r6, pc}
    block_header_t * block = 0;
 800aa1e:	2500      	movs	r5, #0
    return block;
 800aa20:	e7fa      	b.n	800aa18 <block_locate_free+0x48>
	...

0800aa24 <lv_tlsf_walk_pool>:

void lv_tlsf_walk_pool(lv_pool_t pool, lv_tlsf_walker walker, void * user)
{
 800aa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa28:	4617      	mov	r7, r2
    lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 800aa2a:	4688      	mov	r8, r1
 800aa2c:	b129      	cbz	r1, 800aa3a <lv_tlsf_walk_pool+0x16>
    block_header_t * block =
        offset_to_block(pool, -(int)block_header_overhead);
 800aa2e:	f06f 0103 	mvn.w	r1, #3
 800aa32:	f7ff fd8c 	bl	800a54e <offset_to_block>
 800aa36:	4604      	mov	r4, r0

    while(block && !block_is_last(block)) {
 800aa38:	e018      	b.n	800aa6c <lv_tlsf_walk_pool+0x48>
    lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 800aa3a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800aa7c <lv_tlsf_walk_pool+0x58>
 800aa3e:	e7f6      	b.n	800aa2e <lv_tlsf_walk_pool+0xa>
        pool_walker(
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7ff fd82 	bl	800a54a <block_to_ptr>
 800aa46:	4605      	mov	r5, r0
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f7ff fd4f 	bl	800a4ec <block_size>
 800aa4e:	4606      	mov	r6, r0
            block_to_ptr(block),
            block_size(block),
            !block_is_free(block),
 800aa50:	4620      	mov	r0, r4
 800aa52:	f7ff fd5c 	bl	800a50e <block_is_free>
        pool_walker(
 800aa56:	463b      	mov	r3, r7
 800aa58:	fab0 f280 	clz	r2, r0
 800aa5c:	0952      	lsrs	r2, r2, #5
 800aa5e:	4631      	mov	r1, r6
 800aa60:	4628      	mov	r0, r5
 800aa62:	47c0      	blx	r8
            user);
        block = block_next(block);
 800aa64:	4620      	mov	r0, r4
 800aa66:	f7ff fd7c 	bl	800a562 <block_next>
 800aa6a:	4604      	mov	r4, r0
    while(block && !block_is_last(block)) {
 800aa6c:	b124      	cbz	r4, 800aa78 <lv_tlsf_walk_pool+0x54>
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f7ff fd46 	bl	800a500 <block_is_last>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0e3      	beq.n	800aa40 <lv_tlsf_walk_pool+0x1c>
    }
}
 800aa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7c:	0800a7a3 	.word	0x0800a7a3

0800aa80 <lv_tlsf_size>:
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
    return sizeof(control_t);
}
 800aa80:	f240 503c 	movw	r0, #1340	; 0x53c
 800aa84:	4770      	bx	lr

0800aa86 <lv_tlsf_pool_overhead>:
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
    return 2 * block_header_overhead;
}
 800aa86:	2008      	movs	r0, #8
 800aa88:	4770      	bx	lr

0800aa8a <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 800aa8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	460c      	mov	r4, r1
 800aa90:	4615      	mov	r5, r2
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 800aa92:	f7ff fff8 	bl	800aa86 <lv_tlsf_pool_overhead>
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 800aa96:	2104      	movs	r1, #4
 800aa98:	1a28      	subs	r0, r5, r0
 800aa9a:	f7ff fd99 	bl	800a5d0 <align_down>

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 800aa9e:	f014 0f03 	tst.w	r4, #3
 800aaa2:	d128      	bne.n	800aaf6 <lv_tlsf_add_pool+0x6c>
 800aaa4:	4605      	mov	r5, r0
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 800aaa6:	f1a0 020c 	sub.w	r2, r0, #12
 800aaaa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d823      	bhi.n	800aafa <lv_tlsf_add_pool+0x70>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 800aab2:	f06f 0103 	mvn.w	r1, #3
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7ff fd49 	bl	800a54e <offset_to_block>
 800aabc:	4606      	mov	r6, r0
    block_set_size(block, pool_bytes);
 800aabe:	4629      	mov	r1, r5
 800aac0:	f7ff fd18 	bl	800a4f4 <block_set_size>
    block_set_free(block);
 800aac4:	4630      	mov	r0, r6
 800aac6:	f7ff fd26 	bl	800a516 <block_set_free>
    block_set_prev_used(block);
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff fd36 	bl	800a53c <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 800aad0:	4631      	mov	r1, r6
 800aad2:	4638      	mov	r0, r7
 800aad4:	f7ff fe86 	bl	800a7e4 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 800aad8:	4630      	mov	r0, r6
 800aada:	f7ff fd56 	bl	800a58a <block_link_next>
 800aade:	4605      	mov	r5, r0
    block_set_size(next, 0);
 800aae0:	2100      	movs	r1, #0
 800aae2:	f7ff fd07 	bl	800a4f4 <block_set_size>
    block_set_used(next);
 800aae6:	4628      	mov	r0, r5
 800aae8:	f7ff fd1a 	bl	800a520 <block_set_used>
    block_set_prev_free(next);
 800aaec:	4628      	mov	r0, r5
 800aaee:	f7ff fd20 	bl	800a532 <block_set_prev_free>

    return mem;
 800aaf2:	4620      	mov	r0, r4
}
 800aaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e7fc      	b.n	800aaf4 <lv_tlsf_add_pool+0x6a>
        return 0;
 800aafa:	2000      	movs	r0, #0
 800aafc:	e7fa      	b.n	800aaf4 <lv_tlsf_add_pool+0x6a>

0800aafe <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 800aafe:	f010 0f03 	tst.w	r0, #3
 800ab02:	d105      	bne.n	800ab10 <lv_tlsf_create+0x12>
{
 800ab04:	b510      	push	{r4, lr}
 800ab06:	4604      	mov	r4, r0
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    control_constructor(tlsf_cast(control_t *, mem));
 800ab08:	f7ff fe33 	bl	800a772 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 800ab0c:	4620      	mov	r0, r4
}
 800ab0e:	bd10      	pop	{r4, pc}
        return 0;
 800ab10:	2000      	movs	r0, #0
}
 800ab12:	4770      	bx	lr

0800ab14 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	4605      	mov	r5, r0
 800ab18:	460e      	mov	r6, r1
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 800ab1a:	f7ff fff0 	bl	800aafe <lv_tlsf_create>
 800ab1e:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 800ab20:	f7ff ffae 	bl	800aa80 <lv_tlsf_size>
 800ab24:	1a32      	subs	r2, r6, r0
 800ab26:	1829      	adds	r1, r5, r0
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f7ff ffae 	bl	800aa8a <lv_tlsf_add_pool>
    return tlsf;
}
 800ab2e:	4620      	mov	r0, r4
 800ab30:	bd70      	pop	{r4, r5, r6, pc}

0800ab32 <lv_tlsf_get_pool>:
    /* Nothing to do. */
    LV_UNUSED(tlsf);
}

lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
{
 800ab32:	b510      	push	{r4, lr}
 800ab34:	4604      	mov	r4, r0
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
 800ab36:	f7ff ffa3 	bl	800aa80 <lv_tlsf_size>
}
 800ab3a:	4420      	add	r0, r4
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <lv_tlsf_malloc>:

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 800ab3e:	b538      	push	{r3, r4, r5, lr}
 800ab40:	4604      	mov	r4, r0
 800ab42:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 800ab44:	2104      	movs	r1, #4
 800ab46:	f7ff fd53 	bl	800a5f0 <adjust_request_size>
 800ab4a:	4605      	mov	r5, r0
    block_header_t * block = block_locate_free(control, adjust);
 800ab4c:	4601      	mov	r1, r0
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f7ff ff3e 	bl	800a9d0 <block_locate_free>
 800ab54:	4601      	mov	r1, r0
    return block_prepare_used(control, block, adjust);
 800ab56:	462a      	mov	r2, r5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f7ff fe75 	bl	800a848 <block_prepare_used>
}
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}

0800ab60 <lv_tlsf_free>:
}

void lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 800ab60:	b1c9      	cbz	r1, 800ab96 <lv_tlsf_free+0x36>
{
 800ab62:	b538      	push	{r3, r4, r5, lr}
 800ab64:	4604      	mov	r4, r0
 800ab66:	4608      	mov	r0, r1
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
 800ab68:	f7ff fced 	bl	800a546 <block_from_ptr>
 800ab6c:	4605      	mov	r5, r0
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 800ab6e:	f7ff fcce 	bl	800a50e <block_is_free>
 800ab72:	b100      	cbz	r0, 800ab76 <lv_tlsf_free+0x16>
 800ab74:	e7fe      	b.n	800ab74 <lv_tlsf_free+0x14>
        block_mark_as_free(block);
 800ab76:	4628      	mov	r0, r5
 800ab78:	f7ff fd0d 	bl	800a596 <block_mark_as_free>
        block = block_merge_prev(control, block);
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f7ff fe85 	bl	800a88e <block_merge_prev>
 800ab84:	4601      	mov	r1, r0
        block = block_merge_next(control, block);
 800ab86:	4620      	mov	r0, r4
 800ab88:	f7ff fe9e 	bl	800a8c8 <block_merge_next>
 800ab8c:	4601      	mov	r1, r0
        block_insert(control, block);
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f7ff fe28 	bl	800a7e4 <block_insert>
    }
}
 800ab94:	bd38      	pop	{r3, r4, r5, pc}
 800ab96:	4770      	bx	lr

0800ab98 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 800ab98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	4614      	mov	r4, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 800aba0:	4689      	mov	r9, r1
 800aba2:	b101      	cbz	r1, 800aba6 <lv_tlsf_realloc+0xe>
 800aba4:	b1f2      	cbz	r2, 800abe4 <lv_tlsf_realloc+0x4c>
        lv_tlsf_free(tlsf, ptr);
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 800aba6:	f1b9 0f00 	cmp.w	r9, #0
 800abaa:	d01f      	beq.n	800abec <lv_tlsf_realloc+0x54>
        p = lv_tlsf_malloc(tlsf, size);
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 800abac:	4648      	mov	r0, r9
 800abae:	f7ff fcca 	bl	800a546 <block_from_ptr>
 800abb2:	4606      	mov	r6, r0
        block_header_t * next = block_next(block);
 800abb4:	f7ff fcd5 	bl	800a562 <block_next>
 800abb8:	4682      	mov	sl, r0

        const size_t cursize = block_size(block);
 800abba:	4630      	mov	r0, r6
 800abbc:	f7ff fc96 	bl	800a4ec <block_size>
 800abc0:	4680      	mov	r8, r0
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 800abc2:	4650      	mov	r0, sl
 800abc4:	f7ff fc92 	bl	800a4ec <block_size>
 800abc8:	eb00 0308 	add.w	r3, r0, r8
 800abcc:	f103 0b04 	add.w	fp, r3, #4
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 800abd0:	2104      	movs	r1, #4
 800abd2:	4620      	mov	r0, r4
 800abd4:	f7ff fd0c 	bl	800a5f0 <adjust_request_size>
 800abd8:	4607      	mov	r7, r0

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 800abda:	4630      	mov	r0, r6
 800abdc:	f7ff fc97 	bl	800a50e <block_is_free>
 800abe0:	b160      	cbz	r0, 800abfc <lv_tlsf_realloc+0x64>
 800abe2:	e7fe      	b.n	800abe2 <lv_tlsf_realloc+0x4a>
        lv_tlsf_free(tlsf, ptr);
 800abe4:	f7ff ffbc 	bl	800ab60 <lv_tlsf_free>
    void * p = 0;
 800abe8:	2600      	movs	r6, #0
        lv_tlsf_free(tlsf, ptr);
 800abea:	e004      	b.n	800abf6 <lv_tlsf_realloc+0x5e>
        p = lv_tlsf_malloc(tlsf, size);
 800abec:	4621      	mov	r1, r4
 800abee:	4628      	mov	r0, r5
 800abf0:	f7ff ffa5 	bl	800ab3e <lv_tlsf_malloc>
 800abf4:	4606      	mov	r6, r0
            p = ptr;
        }
    }

    return p;
}
 800abf6:	4630      	mov	r0, r6
 800abf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 800abfc:	45b8      	cmp	r8, r7
 800abfe:	d218      	bcs.n	800ac32 <lv_tlsf_realloc+0x9a>
 800ac00:	4650      	mov	r0, sl
 800ac02:	f7ff fc84 	bl	800a50e <block_is_free>
 800ac06:	b108      	cbz	r0, 800ac0c <lv_tlsf_realloc+0x74>
 800ac08:	45bb      	cmp	fp, r7
 800ac0a:	d212      	bcs.n	800ac32 <lv_tlsf_realloc+0x9a>
            p = lv_tlsf_malloc(tlsf, size);
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f7ff ff95 	bl	800ab3e <lv_tlsf_malloc>
            if(p) {
 800ac14:	4606      	mov	r6, r0
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0ed      	beq.n	800abf6 <lv_tlsf_realloc+0x5e>
                lv_memcpy(p, ptr, minsize);
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	4544      	cmp	r4, r8
 800ac1e:	bf28      	it	cs
 800ac20:	4642      	movcs	r2, r8
 800ac22:	4649      	mov	r1, r9
 800ac24:	f7ff f8e4 	bl	8009df0 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 800ac28:	4649      	mov	r1, r9
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f7ff ff98 	bl	800ab60 <lv_tlsf_free>
 800ac30:	e7e1      	b.n	800abf6 <lv_tlsf_realloc+0x5e>
            if(adjust > cursize) {
 800ac32:	45b8      	cmp	r8, r7
 800ac34:	d306      	bcc.n	800ac44 <lv_tlsf_realloc+0xac>
            block_trim_used(control, block, adjust);
 800ac36:	463a      	mov	r2, r7
 800ac38:	4631      	mov	r1, r6
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f7ff fe60 	bl	800a900 <block_trim_used>
            p = ptr;
 800ac40:	464e      	mov	r6, r9
    return p;
 800ac42:	e7d8      	b.n	800abf6 <lv_tlsf_realloc+0x5e>
                block_merge_next(control, block);
 800ac44:	4631      	mov	r1, r6
 800ac46:	4628      	mov	r0, r5
 800ac48:	f7ff fe3e 	bl	800a8c8 <block_merge_next>
                block_mark_as_used(block);
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f7ff fcac 	bl	800a5aa <block_mark_as_used>
 800ac52:	e7f0      	b.n	800ac36 <lv_tlsf_realloc+0x9e>

0800ac54 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 800ac54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac58:	4681      	mov	r9, r0
 800ac5a:	4688      	mov	r8, r1
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	461f      	mov	r7, r3
 800ac60:	f8dd a020 	ldr.w	sl, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 800ac64:	e007      	b.n	800ac76 <_lv_utils_bsearch+0x22>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
 800ac66:	f014 0f01 	tst.w	r4, #1
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2401      	moveq	r4, #1
 800ac6e:	2400      	movne	r4, #0
 800ac70:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
 800ac72:	eb06 0807 	add.w	r8, r6, r7
    for(middle = base; n != 0;) {
 800ac76:	b15c      	cbz	r4, 800ac90 <_lv_utils_bsearch+0x3c>
        middle += (n / 2) * size;
 800ac78:	0865      	lsrs	r5, r4, #1
 800ac7a:	fb07 8605 	mla	r6, r7, r5, r8
        if((c = (*cmp)(key, middle)) > 0) {
 800ac7e:	4631      	mov	r1, r6
 800ac80:	4648      	mov	r0, r9
 800ac82:	47d0      	blx	sl
 800ac84:	2800      	cmp	r0, #0
 800ac86:	dcee      	bgt.n	800ac66 <_lv_utils_bsearch+0x12>
        }
        else if(c < 0) {
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	da02      	bge.n	800ac92 <_lv_utils_bsearch+0x3e>
            n /= 2;
 800ac8c:	462c      	mov	r4, r5
 800ac8e:	e7f2      	b.n	800ac76 <_lv_utils_bsearch+0x22>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 800ac90:	2600      	movs	r6, #0
}
 800ac92:	4630      	mov	r0, r6
 800ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ac98 <__errno>:
 800ac98:	4b01      	ldr	r3, [pc, #4]	; (800aca0 <__errno+0x8>)
 800ac9a:	6818      	ldr	r0, [r3, #0]
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	20000188 	.word	0x20000188

0800aca4 <__libc_init_array>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4d0d      	ldr	r5, [pc, #52]	; (800acdc <__libc_init_array+0x38>)
 800aca8:	4c0d      	ldr	r4, [pc, #52]	; (800ace0 <__libc_init_array+0x3c>)
 800acaa:	1b64      	subs	r4, r4, r5
 800acac:	10a4      	asrs	r4, r4, #2
 800acae:	2600      	movs	r6, #0
 800acb0:	42a6      	cmp	r6, r4
 800acb2:	d109      	bne.n	800acc8 <__libc_init_array+0x24>
 800acb4:	4d0b      	ldr	r5, [pc, #44]	; (800ace4 <__libc_init_array+0x40>)
 800acb6:	4c0c      	ldr	r4, [pc, #48]	; (800ace8 <__libc_init_array+0x44>)
 800acb8:	f001 f81a 	bl	800bcf0 <_init>
 800acbc:	1b64      	subs	r4, r4, r5
 800acbe:	10a4      	asrs	r4, r4, #2
 800acc0:	2600      	movs	r6, #0
 800acc2:	42a6      	cmp	r6, r4
 800acc4:	d105      	bne.n	800acd2 <__libc_init_array+0x2e>
 800acc6:	bd70      	pop	{r4, r5, r6, pc}
 800acc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800accc:	4798      	blx	r3
 800acce:	3601      	adds	r6, #1
 800acd0:	e7ee      	b.n	800acb0 <__libc_init_array+0xc>
 800acd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd6:	4798      	blx	r3
 800acd8:	3601      	adds	r6, #1
 800acda:	e7f2      	b.n	800acc2 <__libc_init_array+0x1e>
 800acdc:	0800f370 	.word	0x0800f370
 800ace0:	0800f370 	.word	0x0800f370
 800ace4:	0800f370 	.word	0x0800f370
 800ace8:	0800f374 	.word	0x0800f374

0800acec <memcpy>:
 800acec:	440a      	add	r2, r1
 800acee:	4291      	cmp	r1, r2
 800acf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800acf4:	d100      	bne.n	800acf8 <memcpy+0xc>
 800acf6:	4770      	bx	lr
 800acf8:	b510      	push	{r4, lr}
 800acfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad02:	4291      	cmp	r1, r2
 800ad04:	d1f9      	bne.n	800acfa <memcpy+0xe>
 800ad06:	bd10      	pop	{r4, pc}

0800ad08 <memset>:
 800ad08:	4402      	add	r2, r0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d100      	bne.n	800ad12 <memset+0xa>
 800ad10:	4770      	bx	lr
 800ad12:	f803 1b01 	strb.w	r1, [r3], #1
 800ad16:	e7f9      	b.n	800ad0c <memset+0x4>

0800ad18 <__sfputc_r>:
 800ad18:	6893      	ldr	r3, [r2, #8]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	b410      	push	{r4}
 800ad20:	6093      	str	r3, [r2, #8]
 800ad22:	da08      	bge.n	800ad36 <__sfputc_r+0x1e>
 800ad24:	6994      	ldr	r4, [r2, #24]
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	db01      	blt.n	800ad2e <__sfputc_r+0x16>
 800ad2a:	290a      	cmp	r1, #10
 800ad2c:	d103      	bne.n	800ad36 <__sfputc_r+0x1e>
 800ad2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad32:	f000 bb0d 	b.w	800b350 <__swbuf_r>
 800ad36:	6813      	ldr	r3, [r2, #0]
 800ad38:	1c58      	adds	r0, r3, #1
 800ad3a:	6010      	str	r0, [r2, #0]
 800ad3c:	7019      	strb	r1, [r3, #0]
 800ad3e:	4608      	mov	r0, r1
 800ad40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <__sfputs_r>:
 800ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad48:	4606      	mov	r6, r0
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	18d5      	adds	r5, r2, r3
 800ad50:	42ac      	cmp	r4, r5
 800ad52:	d101      	bne.n	800ad58 <__sfputs_r+0x12>
 800ad54:	2000      	movs	r0, #0
 800ad56:	e007      	b.n	800ad68 <__sfputs_r+0x22>
 800ad58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7ff ffda 	bl	800ad18 <__sfputc_r>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d1f3      	bne.n	800ad50 <__sfputs_r+0xa>
 800ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad6c <_vfiprintf_r>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	460d      	mov	r5, r1
 800ad72:	b09d      	sub	sp, #116	; 0x74
 800ad74:	4614      	mov	r4, r2
 800ad76:	4698      	mov	r8, r3
 800ad78:	4606      	mov	r6, r0
 800ad7a:	b118      	cbz	r0, 800ad84 <_vfiprintf_r+0x18>
 800ad7c:	6983      	ldr	r3, [r0, #24]
 800ad7e:	b90b      	cbnz	r3, 800ad84 <_vfiprintf_r+0x18>
 800ad80:	f000 fcc0 	bl	800b704 <__sinit>
 800ad84:	4b89      	ldr	r3, [pc, #548]	; (800afac <_vfiprintf_r+0x240>)
 800ad86:	429d      	cmp	r5, r3
 800ad88:	d11b      	bne.n	800adc2 <_vfiprintf_r+0x56>
 800ad8a:	6875      	ldr	r5, [r6, #4]
 800ad8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad8e:	07d9      	lsls	r1, r3, #31
 800ad90:	d405      	bmi.n	800ad9e <_vfiprintf_r+0x32>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	059a      	lsls	r2, r3, #22
 800ad96:	d402      	bmi.n	800ad9e <_vfiprintf_r+0x32>
 800ad98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad9a:	f000 fd51 	bl	800b840 <__retarget_lock_acquire_recursive>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	071b      	lsls	r3, r3, #28
 800ada2:	d501      	bpl.n	800ada8 <_vfiprintf_r+0x3c>
 800ada4:	692b      	ldr	r3, [r5, #16]
 800ada6:	b9eb      	cbnz	r3, 800ade4 <_vfiprintf_r+0x78>
 800ada8:	4629      	mov	r1, r5
 800adaa:	4630      	mov	r0, r6
 800adac:	f000 fb22 	bl	800b3f4 <__swsetup_r>
 800adb0:	b1c0      	cbz	r0, 800ade4 <_vfiprintf_r+0x78>
 800adb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adb4:	07dc      	lsls	r4, r3, #31
 800adb6:	d50e      	bpl.n	800add6 <_vfiprintf_r+0x6a>
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adbc:	b01d      	add	sp, #116	; 0x74
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	4b7b      	ldr	r3, [pc, #492]	; (800afb0 <_vfiprintf_r+0x244>)
 800adc4:	429d      	cmp	r5, r3
 800adc6:	d101      	bne.n	800adcc <_vfiprintf_r+0x60>
 800adc8:	68b5      	ldr	r5, [r6, #8]
 800adca:	e7df      	b.n	800ad8c <_vfiprintf_r+0x20>
 800adcc:	4b79      	ldr	r3, [pc, #484]	; (800afb4 <_vfiprintf_r+0x248>)
 800adce:	429d      	cmp	r5, r3
 800add0:	bf08      	it	eq
 800add2:	68f5      	ldreq	r5, [r6, #12]
 800add4:	e7da      	b.n	800ad8c <_vfiprintf_r+0x20>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	0598      	lsls	r0, r3, #22
 800adda:	d4ed      	bmi.n	800adb8 <_vfiprintf_r+0x4c>
 800addc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adde:	f000 fd30 	bl	800b842 <__retarget_lock_release_recursive>
 800ade2:	e7e9      	b.n	800adb8 <_vfiprintf_r+0x4c>
 800ade4:	2300      	movs	r3, #0
 800ade6:	9309      	str	r3, [sp, #36]	; 0x24
 800ade8:	2320      	movs	r3, #32
 800adea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adee:	f8cd 800c 	str.w	r8, [sp, #12]
 800adf2:	2330      	movs	r3, #48	; 0x30
 800adf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afb8 <_vfiprintf_r+0x24c>
 800adf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adfc:	f04f 0901 	mov.w	r9, #1
 800ae00:	4623      	mov	r3, r4
 800ae02:	469a      	mov	sl, r3
 800ae04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae08:	b10a      	cbz	r2, 800ae0e <_vfiprintf_r+0xa2>
 800ae0a:	2a25      	cmp	r2, #37	; 0x25
 800ae0c:	d1f9      	bne.n	800ae02 <_vfiprintf_r+0x96>
 800ae0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae12:	d00b      	beq.n	800ae2c <_vfiprintf_r+0xc0>
 800ae14:	465b      	mov	r3, fp
 800ae16:	4622      	mov	r2, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ff93 	bl	800ad46 <__sfputs_r>
 800ae20:	3001      	adds	r0, #1
 800ae22:	f000 80aa 	beq.w	800af7a <_vfiprintf_r+0x20e>
 800ae26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae28:	445a      	add	r2, fp
 800ae2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 80a2 	beq.w	800af7a <_vfiprintf_r+0x20e>
 800ae36:	2300      	movs	r3, #0
 800ae38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae40:	f10a 0a01 	add.w	sl, sl, #1
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	9307      	str	r3, [sp, #28]
 800ae48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae4e:	4654      	mov	r4, sl
 800ae50:	2205      	movs	r2, #5
 800ae52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae56:	4858      	ldr	r0, [pc, #352]	; (800afb8 <_vfiprintf_r+0x24c>)
 800ae58:	f7f5 f9da 	bl	8000210 <memchr>
 800ae5c:	9a04      	ldr	r2, [sp, #16]
 800ae5e:	b9d8      	cbnz	r0, 800ae98 <_vfiprintf_r+0x12c>
 800ae60:	06d1      	lsls	r1, r2, #27
 800ae62:	bf44      	itt	mi
 800ae64:	2320      	movmi	r3, #32
 800ae66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae6a:	0713      	lsls	r3, r2, #28
 800ae6c:	bf44      	itt	mi
 800ae6e:	232b      	movmi	r3, #43	; 0x2b
 800ae70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae74:	f89a 3000 	ldrb.w	r3, [sl]
 800ae78:	2b2a      	cmp	r3, #42	; 0x2a
 800ae7a:	d015      	beq.n	800aea8 <_vfiprintf_r+0x13c>
 800ae7c:	9a07      	ldr	r2, [sp, #28]
 800ae7e:	4654      	mov	r4, sl
 800ae80:	2000      	movs	r0, #0
 800ae82:	f04f 0c0a 	mov.w	ip, #10
 800ae86:	4621      	mov	r1, r4
 800ae88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae8c:	3b30      	subs	r3, #48	; 0x30
 800ae8e:	2b09      	cmp	r3, #9
 800ae90:	d94e      	bls.n	800af30 <_vfiprintf_r+0x1c4>
 800ae92:	b1b0      	cbz	r0, 800aec2 <_vfiprintf_r+0x156>
 800ae94:	9207      	str	r2, [sp, #28]
 800ae96:	e014      	b.n	800aec2 <_vfiprintf_r+0x156>
 800ae98:	eba0 0308 	sub.w	r3, r0, r8
 800ae9c:	fa09 f303 	lsl.w	r3, r9, r3
 800aea0:	4313      	orrs	r3, r2
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	46a2      	mov	sl, r4
 800aea6:	e7d2      	b.n	800ae4e <_vfiprintf_r+0xe2>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	1d19      	adds	r1, r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	9103      	str	r1, [sp, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	bfbb      	ittet	lt
 800aeb4:	425b      	neglt	r3, r3
 800aeb6:	f042 0202 	orrlt.w	r2, r2, #2
 800aeba:	9307      	strge	r3, [sp, #28]
 800aebc:	9307      	strlt	r3, [sp, #28]
 800aebe:	bfb8      	it	lt
 800aec0:	9204      	strlt	r2, [sp, #16]
 800aec2:	7823      	ldrb	r3, [r4, #0]
 800aec4:	2b2e      	cmp	r3, #46	; 0x2e
 800aec6:	d10c      	bne.n	800aee2 <_vfiprintf_r+0x176>
 800aec8:	7863      	ldrb	r3, [r4, #1]
 800aeca:	2b2a      	cmp	r3, #42	; 0x2a
 800aecc:	d135      	bne.n	800af3a <_vfiprintf_r+0x1ce>
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	1d1a      	adds	r2, r3, #4
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	9203      	str	r2, [sp, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfb8      	it	lt
 800aeda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aede:	3402      	adds	r4, #2
 800aee0:	9305      	str	r3, [sp, #20]
 800aee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afc8 <_vfiprintf_r+0x25c>
 800aee6:	7821      	ldrb	r1, [r4, #0]
 800aee8:	2203      	movs	r2, #3
 800aeea:	4650      	mov	r0, sl
 800aeec:	f7f5 f990 	bl	8000210 <memchr>
 800aef0:	b140      	cbz	r0, 800af04 <_vfiprintf_r+0x198>
 800aef2:	2340      	movs	r3, #64	; 0x40
 800aef4:	eba0 000a 	sub.w	r0, r0, sl
 800aef8:	fa03 f000 	lsl.w	r0, r3, r0
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	4303      	orrs	r3, r0
 800af00:	3401      	adds	r4, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af08:	482c      	ldr	r0, [pc, #176]	; (800afbc <_vfiprintf_r+0x250>)
 800af0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af0e:	2206      	movs	r2, #6
 800af10:	f7f5 f97e 	bl	8000210 <memchr>
 800af14:	2800      	cmp	r0, #0
 800af16:	d03f      	beq.n	800af98 <_vfiprintf_r+0x22c>
 800af18:	4b29      	ldr	r3, [pc, #164]	; (800afc0 <_vfiprintf_r+0x254>)
 800af1a:	bb1b      	cbnz	r3, 800af64 <_vfiprintf_r+0x1f8>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	3307      	adds	r3, #7
 800af20:	f023 0307 	bic.w	r3, r3, #7
 800af24:	3308      	adds	r3, #8
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2a:	443b      	add	r3, r7
 800af2c:	9309      	str	r3, [sp, #36]	; 0x24
 800af2e:	e767      	b.n	800ae00 <_vfiprintf_r+0x94>
 800af30:	fb0c 3202 	mla	r2, ip, r2, r3
 800af34:	460c      	mov	r4, r1
 800af36:	2001      	movs	r0, #1
 800af38:	e7a5      	b.n	800ae86 <_vfiprintf_r+0x11a>
 800af3a:	2300      	movs	r3, #0
 800af3c:	3401      	adds	r4, #1
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	4619      	mov	r1, r3
 800af42:	f04f 0c0a 	mov.w	ip, #10
 800af46:	4620      	mov	r0, r4
 800af48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af4c:	3a30      	subs	r2, #48	; 0x30
 800af4e:	2a09      	cmp	r2, #9
 800af50:	d903      	bls.n	800af5a <_vfiprintf_r+0x1ee>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0c5      	beq.n	800aee2 <_vfiprintf_r+0x176>
 800af56:	9105      	str	r1, [sp, #20]
 800af58:	e7c3      	b.n	800aee2 <_vfiprintf_r+0x176>
 800af5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af5e:	4604      	mov	r4, r0
 800af60:	2301      	movs	r3, #1
 800af62:	e7f0      	b.n	800af46 <_vfiprintf_r+0x1da>
 800af64:	ab03      	add	r3, sp, #12
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	462a      	mov	r2, r5
 800af6a:	4b16      	ldr	r3, [pc, #88]	; (800afc4 <_vfiprintf_r+0x258>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	4630      	mov	r0, r6
 800af70:	f3af 8000 	nop.w
 800af74:	4607      	mov	r7, r0
 800af76:	1c78      	adds	r0, r7, #1
 800af78:	d1d6      	bne.n	800af28 <_vfiprintf_r+0x1bc>
 800af7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af7c:	07d9      	lsls	r1, r3, #31
 800af7e:	d405      	bmi.n	800af8c <_vfiprintf_r+0x220>
 800af80:	89ab      	ldrh	r3, [r5, #12]
 800af82:	059a      	lsls	r2, r3, #22
 800af84:	d402      	bmi.n	800af8c <_vfiprintf_r+0x220>
 800af86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af88:	f000 fc5b 	bl	800b842 <__retarget_lock_release_recursive>
 800af8c:	89ab      	ldrh	r3, [r5, #12]
 800af8e:	065b      	lsls	r3, r3, #25
 800af90:	f53f af12 	bmi.w	800adb8 <_vfiprintf_r+0x4c>
 800af94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af96:	e711      	b.n	800adbc <_vfiprintf_r+0x50>
 800af98:	ab03      	add	r3, sp, #12
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	462a      	mov	r2, r5
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <_vfiprintf_r+0x258>)
 800afa0:	a904      	add	r1, sp, #16
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 f880 	bl	800b0a8 <_printf_i>
 800afa8:	e7e4      	b.n	800af74 <_vfiprintf_r+0x208>
 800afaa:	bf00      	nop
 800afac:	0800f328 	.word	0x0800f328
 800afb0:	0800f348 	.word	0x0800f348
 800afb4:	0800f308 	.word	0x0800f308
 800afb8:	0800f2d4 	.word	0x0800f2d4
 800afbc:	0800f2de 	.word	0x0800f2de
 800afc0:	00000000 	.word	0x00000000
 800afc4:	0800ad47 	.word	0x0800ad47
 800afc8:	0800f2da 	.word	0x0800f2da

0800afcc <_printf_common>:
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	4616      	mov	r6, r2
 800afd2:	4699      	mov	r9, r3
 800afd4:	688a      	ldr	r2, [r1, #8]
 800afd6:	690b      	ldr	r3, [r1, #16]
 800afd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afdc:	4293      	cmp	r3, r2
 800afde:	bfb8      	it	lt
 800afe0:	4613      	movlt	r3, r2
 800afe2:	6033      	str	r3, [r6, #0]
 800afe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afe8:	4607      	mov	r7, r0
 800afea:	460c      	mov	r4, r1
 800afec:	b10a      	cbz	r2, 800aff2 <_printf_common+0x26>
 800afee:	3301      	adds	r3, #1
 800aff0:	6033      	str	r3, [r6, #0]
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	0699      	lsls	r1, r3, #26
 800aff6:	bf42      	ittt	mi
 800aff8:	6833      	ldrmi	r3, [r6, #0]
 800affa:	3302      	addmi	r3, #2
 800affc:	6033      	strmi	r3, [r6, #0]
 800affe:	6825      	ldr	r5, [r4, #0]
 800b000:	f015 0506 	ands.w	r5, r5, #6
 800b004:	d106      	bne.n	800b014 <_printf_common+0x48>
 800b006:	f104 0a19 	add.w	sl, r4, #25
 800b00a:	68e3      	ldr	r3, [r4, #12]
 800b00c:	6832      	ldr	r2, [r6, #0]
 800b00e:	1a9b      	subs	r3, r3, r2
 800b010:	42ab      	cmp	r3, r5
 800b012:	dc26      	bgt.n	800b062 <_printf_common+0x96>
 800b014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b018:	1e13      	subs	r3, r2, #0
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	bf18      	it	ne
 800b01e:	2301      	movne	r3, #1
 800b020:	0692      	lsls	r2, r2, #26
 800b022:	d42b      	bmi.n	800b07c <_printf_common+0xb0>
 800b024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b028:	4649      	mov	r1, r9
 800b02a:	4638      	mov	r0, r7
 800b02c:	47c0      	blx	r8
 800b02e:	3001      	adds	r0, #1
 800b030:	d01e      	beq.n	800b070 <_printf_common+0xa4>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	68e5      	ldr	r5, [r4, #12]
 800b036:	6832      	ldr	r2, [r6, #0]
 800b038:	f003 0306 	and.w	r3, r3, #6
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	bf08      	it	eq
 800b040:	1aad      	subeq	r5, r5, r2
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	6922      	ldr	r2, [r4, #16]
 800b046:	bf0c      	ite	eq
 800b048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b04c:	2500      	movne	r5, #0
 800b04e:	4293      	cmp	r3, r2
 800b050:	bfc4      	itt	gt
 800b052:	1a9b      	subgt	r3, r3, r2
 800b054:	18ed      	addgt	r5, r5, r3
 800b056:	2600      	movs	r6, #0
 800b058:	341a      	adds	r4, #26
 800b05a:	42b5      	cmp	r5, r6
 800b05c:	d11a      	bne.n	800b094 <_printf_common+0xc8>
 800b05e:	2000      	movs	r0, #0
 800b060:	e008      	b.n	800b074 <_printf_common+0xa8>
 800b062:	2301      	movs	r3, #1
 800b064:	4652      	mov	r2, sl
 800b066:	4649      	mov	r1, r9
 800b068:	4638      	mov	r0, r7
 800b06a:	47c0      	blx	r8
 800b06c:	3001      	adds	r0, #1
 800b06e:	d103      	bne.n	800b078 <_printf_common+0xac>
 800b070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	3501      	adds	r5, #1
 800b07a:	e7c6      	b.n	800b00a <_printf_common+0x3e>
 800b07c:	18e1      	adds	r1, r4, r3
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	2030      	movs	r0, #48	; 0x30
 800b082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b086:	4422      	add	r2, r4
 800b088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b08c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b090:	3302      	adds	r3, #2
 800b092:	e7c7      	b.n	800b024 <_printf_common+0x58>
 800b094:	2301      	movs	r3, #1
 800b096:	4622      	mov	r2, r4
 800b098:	4649      	mov	r1, r9
 800b09a:	4638      	mov	r0, r7
 800b09c:	47c0      	blx	r8
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d0e6      	beq.n	800b070 <_printf_common+0xa4>
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	e7d9      	b.n	800b05a <_printf_common+0x8e>
	...

0800b0a8 <_printf_i>:
 800b0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	7e0f      	ldrb	r7, [r1, #24]
 800b0ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0b0:	2f78      	cmp	r7, #120	; 0x78
 800b0b2:	4691      	mov	r9, r2
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	469a      	mov	sl, r3
 800b0ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0be:	d807      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0c0:	2f62      	cmp	r7, #98	; 0x62
 800b0c2:	d80a      	bhi.n	800b0da <_printf_i+0x32>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	f000 80d8 	beq.w	800b27a <_printf_i+0x1d2>
 800b0ca:	2f58      	cmp	r7, #88	; 0x58
 800b0cc:	f000 80a3 	beq.w	800b216 <_printf_i+0x16e>
 800b0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0d8:	e03a      	b.n	800b150 <_printf_i+0xa8>
 800b0da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0de:	2b15      	cmp	r3, #21
 800b0e0:	d8f6      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0e2:	a101      	add	r1, pc, #4	; (adr r1, 800b0e8 <_printf_i+0x40>)
 800b0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b155 	.word	0x0800b155
 800b0f0:	0800b0d1 	.word	0x0800b0d1
 800b0f4:	0800b0d1 	.word	0x0800b0d1
 800b0f8:	0800b0d1 	.word	0x0800b0d1
 800b0fc:	0800b0d1 	.word	0x0800b0d1
 800b100:	0800b155 	.word	0x0800b155
 800b104:	0800b0d1 	.word	0x0800b0d1
 800b108:	0800b0d1 	.word	0x0800b0d1
 800b10c:	0800b0d1 	.word	0x0800b0d1
 800b110:	0800b0d1 	.word	0x0800b0d1
 800b114:	0800b261 	.word	0x0800b261
 800b118:	0800b185 	.word	0x0800b185
 800b11c:	0800b243 	.word	0x0800b243
 800b120:	0800b0d1 	.word	0x0800b0d1
 800b124:	0800b0d1 	.word	0x0800b0d1
 800b128:	0800b283 	.word	0x0800b283
 800b12c:	0800b0d1 	.word	0x0800b0d1
 800b130:	0800b185 	.word	0x0800b185
 800b134:	0800b0d1 	.word	0x0800b0d1
 800b138:	0800b0d1 	.word	0x0800b0d1
 800b13c:	0800b24b 	.word	0x0800b24b
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	602a      	str	r2, [r5, #0]
 800b148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b150:	2301      	movs	r3, #1
 800b152:	e0a3      	b.n	800b29c <_printf_i+0x1f4>
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	6829      	ldr	r1, [r5, #0]
 800b158:	0606      	lsls	r6, r0, #24
 800b15a:	f101 0304 	add.w	r3, r1, #4
 800b15e:	d50a      	bpl.n	800b176 <_printf_i+0xce>
 800b160:	680e      	ldr	r6, [r1, #0]
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	2e00      	cmp	r6, #0
 800b166:	da03      	bge.n	800b170 <_printf_i+0xc8>
 800b168:	232d      	movs	r3, #45	; 0x2d
 800b16a:	4276      	negs	r6, r6
 800b16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b170:	485e      	ldr	r0, [pc, #376]	; (800b2ec <_printf_i+0x244>)
 800b172:	230a      	movs	r3, #10
 800b174:	e019      	b.n	800b1aa <_printf_i+0x102>
 800b176:	680e      	ldr	r6, [r1, #0]
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b17e:	bf18      	it	ne
 800b180:	b236      	sxthne	r6, r6
 800b182:	e7ef      	b.n	800b164 <_printf_i+0xbc>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	6820      	ldr	r0, [r4, #0]
 800b188:	1d19      	adds	r1, r3, #4
 800b18a:	6029      	str	r1, [r5, #0]
 800b18c:	0601      	lsls	r1, r0, #24
 800b18e:	d501      	bpl.n	800b194 <_printf_i+0xec>
 800b190:	681e      	ldr	r6, [r3, #0]
 800b192:	e002      	b.n	800b19a <_printf_i+0xf2>
 800b194:	0646      	lsls	r6, r0, #25
 800b196:	d5fb      	bpl.n	800b190 <_printf_i+0xe8>
 800b198:	881e      	ldrh	r6, [r3, #0]
 800b19a:	4854      	ldr	r0, [pc, #336]	; (800b2ec <_printf_i+0x244>)
 800b19c:	2f6f      	cmp	r7, #111	; 0x6f
 800b19e:	bf0c      	ite	eq
 800b1a0:	2308      	moveq	r3, #8
 800b1a2:	230a      	movne	r3, #10
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1aa:	6865      	ldr	r5, [r4, #4]
 800b1ac:	60a5      	str	r5, [r4, #8]
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	bfa2      	ittt	ge
 800b1b2:	6821      	ldrge	r1, [r4, #0]
 800b1b4:	f021 0104 	bicge.w	r1, r1, #4
 800b1b8:	6021      	strge	r1, [r4, #0]
 800b1ba:	b90e      	cbnz	r6, 800b1c0 <_printf_i+0x118>
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	d04d      	beq.n	800b25c <_printf_i+0x1b4>
 800b1c0:	4615      	mov	r5, r2
 800b1c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b1ca:	5dc7      	ldrb	r7, [r0, r7]
 800b1cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1d0:	4637      	mov	r7, r6
 800b1d2:	42bb      	cmp	r3, r7
 800b1d4:	460e      	mov	r6, r1
 800b1d6:	d9f4      	bls.n	800b1c2 <_printf_i+0x11a>
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d10b      	bne.n	800b1f4 <_printf_i+0x14c>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	07de      	lsls	r6, r3, #31
 800b1e0:	d508      	bpl.n	800b1f4 <_printf_i+0x14c>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	6861      	ldr	r1, [r4, #4]
 800b1e6:	4299      	cmp	r1, r3
 800b1e8:	bfde      	ittt	le
 800b1ea:	2330      	movle	r3, #48	; 0x30
 800b1ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b1f4:	1b52      	subs	r2, r2, r5
 800b1f6:	6122      	str	r2, [r4, #16]
 800b1f8:	f8cd a000 	str.w	sl, [sp]
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	aa03      	add	r2, sp, #12
 800b200:	4621      	mov	r1, r4
 800b202:	4640      	mov	r0, r8
 800b204:	f7ff fee2 	bl	800afcc <_printf_common>
 800b208:	3001      	adds	r0, #1
 800b20a:	d14c      	bne.n	800b2a6 <_printf_i+0x1fe>
 800b20c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b210:	b004      	add	sp, #16
 800b212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b216:	4835      	ldr	r0, [pc, #212]	; (800b2ec <_printf_i+0x244>)
 800b218:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b21c:	6829      	ldr	r1, [r5, #0]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	f851 6b04 	ldr.w	r6, [r1], #4
 800b224:	6029      	str	r1, [r5, #0]
 800b226:	061d      	lsls	r5, r3, #24
 800b228:	d514      	bpl.n	800b254 <_printf_i+0x1ac>
 800b22a:	07df      	lsls	r7, r3, #31
 800b22c:	bf44      	itt	mi
 800b22e:	f043 0320 	orrmi.w	r3, r3, #32
 800b232:	6023      	strmi	r3, [r4, #0]
 800b234:	b91e      	cbnz	r6, 800b23e <_printf_i+0x196>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	f023 0320 	bic.w	r3, r3, #32
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	2310      	movs	r3, #16
 800b240:	e7b0      	b.n	800b1a4 <_printf_i+0xfc>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	f043 0320 	orr.w	r3, r3, #32
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	2378      	movs	r3, #120	; 0x78
 800b24c:	4828      	ldr	r0, [pc, #160]	; (800b2f0 <_printf_i+0x248>)
 800b24e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b252:	e7e3      	b.n	800b21c <_printf_i+0x174>
 800b254:	0659      	lsls	r1, r3, #25
 800b256:	bf48      	it	mi
 800b258:	b2b6      	uxthmi	r6, r6
 800b25a:	e7e6      	b.n	800b22a <_printf_i+0x182>
 800b25c:	4615      	mov	r5, r2
 800b25e:	e7bb      	b.n	800b1d8 <_printf_i+0x130>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	6826      	ldr	r6, [r4, #0]
 800b264:	6961      	ldr	r1, [r4, #20]
 800b266:	1d18      	adds	r0, r3, #4
 800b268:	6028      	str	r0, [r5, #0]
 800b26a:	0635      	lsls	r5, r6, #24
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	d501      	bpl.n	800b274 <_printf_i+0x1cc>
 800b270:	6019      	str	r1, [r3, #0]
 800b272:	e002      	b.n	800b27a <_printf_i+0x1d2>
 800b274:	0670      	lsls	r0, r6, #25
 800b276:	d5fb      	bpl.n	800b270 <_printf_i+0x1c8>
 800b278:	8019      	strh	r1, [r3, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	4615      	mov	r5, r2
 800b280:	e7ba      	b.n	800b1f8 <_printf_i+0x150>
 800b282:	682b      	ldr	r3, [r5, #0]
 800b284:	1d1a      	adds	r2, r3, #4
 800b286:	602a      	str	r2, [r5, #0]
 800b288:	681d      	ldr	r5, [r3, #0]
 800b28a:	6862      	ldr	r2, [r4, #4]
 800b28c:	2100      	movs	r1, #0
 800b28e:	4628      	mov	r0, r5
 800b290:	f7f4 ffbe 	bl	8000210 <memchr>
 800b294:	b108      	cbz	r0, 800b29a <_printf_i+0x1f2>
 800b296:	1b40      	subs	r0, r0, r5
 800b298:	6060      	str	r0, [r4, #4]
 800b29a:	6863      	ldr	r3, [r4, #4]
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2a4:	e7a8      	b.n	800b1f8 <_printf_i+0x150>
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	47d0      	blx	sl
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d0ab      	beq.n	800b20c <_printf_i+0x164>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	079b      	lsls	r3, r3, #30
 800b2b8:	d413      	bmi.n	800b2e2 <_printf_i+0x23a>
 800b2ba:	68e0      	ldr	r0, [r4, #12]
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	4298      	cmp	r0, r3
 800b2c0:	bfb8      	it	lt
 800b2c2:	4618      	movlt	r0, r3
 800b2c4:	e7a4      	b.n	800b210 <_printf_i+0x168>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	47d0      	blx	sl
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d09b      	beq.n	800b20c <_printf_i+0x164>
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	68e3      	ldr	r3, [r4, #12]
 800b2d8:	9903      	ldr	r1, [sp, #12]
 800b2da:	1a5b      	subs	r3, r3, r1
 800b2dc:	42ab      	cmp	r3, r5
 800b2de:	dcf2      	bgt.n	800b2c6 <_printf_i+0x21e>
 800b2e0:	e7eb      	b.n	800b2ba <_printf_i+0x212>
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	f104 0619 	add.w	r6, r4, #25
 800b2e8:	e7f5      	b.n	800b2d6 <_printf_i+0x22e>
 800b2ea:	bf00      	nop
 800b2ec:	0800f2e5 	.word	0x0800f2e5
 800b2f0:	0800f2f6 	.word	0x0800f2f6

0800b2f4 <iprintf>:
 800b2f4:	b40f      	push	{r0, r1, r2, r3}
 800b2f6:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <iprintf+0x2c>)
 800b2f8:	b513      	push	{r0, r1, r4, lr}
 800b2fa:	681c      	ldr	r4, [r3, #0]
 800b2fc:	b124      	cbz	r4, 800b308 <iprintf+0x14>
 800b2fe:	69a3      	ldr	r3, [r4, #24]
 800b300:	b913      	cbnz	r3, 800b308 <iprintf+0x14>
 800b302:	4620      	mov	r0, r4
 800b304:	f000 f9fe 	bl	800b704 <__sinit>
 800b308:	ab05      	add	r3, sp, #20
 800b30a:	9a04      	ldr	r2, [sp, #16]
 800b30c:	68a1      	ldr	r1, [r4, #8]
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	4620      	mov	r0, r4
 800b312:	f7ff fd2b 	bl	800ad6c <_vfiprintf_r>
 800b316:	b002      	add	sp, #8
 800b318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b31c:	b004      	add	sp, #16
 800b31e:	4770      	bx	lr
 800b320:	20000188 	.word	0x20000188

0800b324 <putchar>:
 800b324:	4b09      	ldr	r3, [pc, #36]	; (800b34c <putchar+0x28>)
 800b326:	b513      	push	{r0, r1, r4, lr}
 800b328:	681c      	ldr	r4, [r3, #0]
 800b32a:	4601      	mov	r1, r0
 800b32c:	b134      	cbz	r4, 800b33c <putchar+0x18>
 800b32e:	69a3      	ldr	r3, [r4, #24]
 800b330:	b923      	cbnz	r3, 800b33c <putchar+0x18>
 800b332:	9001      	str	r0, [sp, #4]
 800b334:	4620      	mov	r0, r4
 800b336:	f000 f9e5 	bl	800b704 <__sinit>
 800b33a:	9901      	ldr	r1, [sp, #4]
 800b33c:	68a2      	ldr	r2, [r4, #8]
 800b33e:	4620      	mov	r0, r4
 800b340:	b002      	add	sp, #8
 800b342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b346:	f000 bbc3 	b.w	800bad0 <_putc_r>
 800b34a:	bf00      	nop
 800b34c:	20000188 	.word	0x20000188

0800b350 <__swbuf_r>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	460e      	mov	r6, r1
 800b354:	4614      	mov	r4, r2
 800b356:	4605      	mov	r5, r0
 800b358:	b118      	cbz	r0, 800b362 <__swbuf_r+0x12>
 800b35a:	6983      	ldr	r3, [r0, #24]
 800b35c:	b90b      	cbnz	r3, 800b362 <__swbuf_r+0x12>
 800b35e:	f000 f9d1 	bl	800b704 <__sinit>
 800b362:	4b21      	ldr	r3, [pc, #132]	; (800b3e8 <__swbuf_r+0x98>)
 800b364:	429c      	cmp	r4, r3
 800b366:	d12b      	bne.n	800b3c0 <__swbuf_r+0x70>
 800b368:	686c      	ldr	r4, [r5, #4]
 800b36a:	69a3      	ldr	r3, [r4, #24]
 800b36c:	60a3      	str	r3, [r4, #8]
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	071a      	lsls	r2, r3, #28
 800b372:	d52f      	bpl.n	800b3d4 <__swbuf_r+0x84>
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	b36b      	cbz	r3, 800b3d4 <__swbuf_r+0x84>
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	6820      	ldr	r0, [r4, #0]
 800b37c:	1ac0      	subs	r0, r0, r3
 800b37e:	6963      	ldr	r3, [r4, #20]
 800b380:	b2f6      	uxtb	r6, r6
 800b382:	4283      	cmp	r3, r0
 800b384:	4637      	mov	r7, r6
 800b386:	dc04      	bgt.n	800b392 <__swbuf_r+0x42>
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 f926 	bl	800b5dc <_fflush_r>
 800b390:	bb30      	cbnz	r0, 800b3e0 <__swbuf_r+0x90>
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	3b01      	subs	r3, #1
 800b396:	60a3      	str	r3, [r4, #8]
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	6022      	str	r2, [r4, #0]
 800b39e:	701e      	strb	r6, [r3, #0]
 800b3a0:	6963      	ldr	r3, [r4, #20]
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	4283      	cmp	r3, r0
 800b3a6:	d004      	beq.n	800b3b2 <__swbuf_r+0x62>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d506      	bpl.n	800b3bc <__swbuf_r+0x6c>
 800b3ae:	2e0a      	cmp	r6, #10
 800b3b0:	d104      	bne.n	800b3bc <__swbuf_r+0x6c>
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 f911 	bl	800b5dc <_fflush_r>
 800b3ba:	b988      	cbnz	r0, 800b3e0 <__swbuf_r+0x90>
 800b3bc:	4638      	mov	r0, r7
 800b3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <__swbuf_r+0x9c>)
 800b3c2:	429c      	cmp	r4, r3
 800b3c4:	d101      	bne.n	800b3ca <__swbuf_r+0x7a>
 800b3c6:	68ac      	ldr	r4, [r5, #8]
 800b3c8:	e7cf      	b.n	800b36a <__swbuf_r+0x1a>
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <__swbuf_r+0xa0>)
 800b3cc:	429c      	cmp	r4, r3
 800b3ce:	bf08      	it	eq
 800b3d0:	68ec      	ldreq	r4, [r5, #12]
 800b3d2:	e7ca      	b.n	800b36a <__swbuf_r+0x1a>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 f80c 	bl	800b3f4 <__swsetup_r>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d0cb      	beq.n	800b378 <__swbuf_r+0x28>
 800b3e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b3e4:	e7ea      	b.n	800b3bc <__swbuf_r+0x6c>
 800b3e6:	bf00      	nop
 800b3e8:	0800f328 	.word	0x0800f328
 800b3ec:	0800f348 	.word	0x0800f348
 800b3f0:	0800f308 	.word	0x0800f308

0800b3f4 <__swsetup_r>:
 800b3f4:	4b32      	ldr	r3, [pc, #200]	; (800b4c0 <__swsetup_r+0xcc>)
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	681d      	ldr	r5, [r3, #0]
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	b125      	cbz	r5, 800b40a <__swsetup_r+0x16>
 800b400:	69ab      	ldr	r3, [r5, #24]
 800b402:	b913      	cbnz	r3, 800b40a <__swsetup_r+0x16>
 800b404:	4628      	mov	r0, r5
 800b406:	f000 f97d 	bl	800b704 <__sinit>
 800b40a:	4b2e      	ldr	r3, [pc, #184]	; (800b4c4 <__swsetup_r+0xd0>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	d10f      	bne.n	800b430 <__swsetup_r+0x3c>
 800b410:	686c      	ldr	r4, [r5, #4]
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b418:	0719      	lsls	r1, r3, #28
 800b41a:	d42c      	bmi.n	800b476 <__swsetup_r+0x82>
 800b41c:	06dd      	lsls	r5, r3, #27
 800b41e:	d411      	bmi.n	800b444 <__swsetup_r+0x50>
 800b420:	2309      	movs	r3, #9
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b42e:	e03e      	b.n	800b4ae <__swsetup_r+0xba>
 800b430:	4b25      	ldr	r3, [pc, #148]	; (800b4c8 <__swsetup_r+0xd4>)
 800b432:	429c      	cmp	r4, r3
 800b434:	d101      	bne.n	800b43a <__swsetup_r+0x46>
 800b436:	68ac      	ldr	r4, [r5, #8]
 800b438:	e7eb      	b.n	800b412 <__swsetup_r+0x1e>
 800b43a:	4b24      	ldr	r3, [pc, #144]	; (800b4cc <__swsetup_r+0xd8>)
 800b43c:	429c      	cmp	r4, r3
 800b43e:	bf08      	it	eq
 800b440:	68ec      	ldreq	r4, [r5, #12]
 800b442:	e7e6      	b.n	800b412 <__swsetup_r+0x1e>
 800b444:	0758      	lsls	r0, r3, #29
 800b446:	d512      	bpl.n	800b46e <__swsetup_r+0x7a>
 800b448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b44a:	b141      	cbz	r1, 800b45e <__swsetup_r+0x6a>
 800b44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b450:	4299      	cmp	r1, r3
 800b452:	d002      	beq.n	800b45a <__swsetup_r+0x66>
 800b454:	4630      	mov	r0, r6
 800b456:	f000 fa5b 	bl	800b910 <_free_r>
 800b45a:	2300      	movs	r3, #0
 800b45c:	6363      	str	r3, [r4, #52]	; 0x34
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	2300      	movs	r3, #0
 800b468:	6063      	str	r3, [r4, #4]
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	f043 0308 	orr.w	r3, r3, #8
 800b474:	81a3      	strh	r3, [r4, #12]
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	b94b      	cbnz	r3, 800b48e <__swsetup_r+0x9a>
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b484:	d003      	beq.n	800b48e <__swsetup_r+0x9a>
 800b486:	4621      	mov	r1, r4
 800b488:	4630      	mov	r0, r6
 800b48a:	f000 fa01 	bl	800b890 <__smakebuf_r>
 800b48e:	89a0      	ldrh	r0, [r4, #12]
 800b490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b494:	f010 0301 	ands.w	r3, r0, #1
 800b498:	d00a      	beq.n	800b4b0 <__swsetup_r+0xbc>
 800b49a:	2300      	movs	r3, #0
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	6963      	ldr	r3, [r4, #20]
 800b4a0:	425b      	negs	r3, r3
 800b4a2:	61a3      	str	r3, [r4, #24]
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	b943      	cbnz	r3, 800b4ba <__swsetup_r+0xc6>
 800b4a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4ac:	d1ba      	bne.n	800b424 <__swsetup_r+0x30>
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	0781      	lsls	r1, r0, #30
 800b4b2:	bf58      	it	pl
 800b4b4:	6963      	ldrpl	r3, [r4, #20]
 800b4b6:	60a3      	str	r3, [r4, #8]
 800b4b8:	e7f4      	b.n	800b4a4 <__swsetup_r+0xb0>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e7f7      	b.n	800b4ae <__swsetup_r+0xba>
 800b4be:	bf00      	nop
 800b4c0:	20000188 	.word	0x20000188
 800b4c4:	0800f328 	.word	0x0800f328
 800b4c8:	0800f348 	.word	0x0800f348
 800b4cc:	0800f308 	.word	0x0800f308

0800b4d0 <__sflush_r>:
 800b4d0:	898a      	ldrh	r2, [r1, #12]
 800b4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	0710      	lsls	r0, r2, #28
 800b4da:	460c      	mov	r4, r1
 800b4dc:	d458      	bmi.n	800b590 <__sflush_r+0xc0>
 800b4de:	684b      	ldr	r3, [r1, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	dc05      	bgt.n	800b4f0 <__sflush_r+0x20>
 800b4e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	dc02      	bgt.n	800b4f0 <__sflush_r+0x20>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4f2:	2e00      	cmp	r6, #0
 800b4f4:	d0f9      	beq.n	800b4ea <__sflush_r+0x1a>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4fc:	682f      	ldr	r7, [r5, #0]
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	d032      	beq.n	800b568 <__sflush_r+0x98>
 800b502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	075a      	lsls	r2, r3, #29
 800b508:	d505      	bpl.n	800b516 <__sflush_r+0x46>
 800b50a:	6863      	ldr	r3, [r4, #4]
 800b50c:	1ac0      	subs	r0, r0, r3
 800b50e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b510:	b10b      	cbz	r3, 800b516 <__sflush_r+0x46>
 800b512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b514:	1ac0      	subs	r0, r0, r3
 800b516:	2300      	movs	r3, #0
 800b518:	4602      	mov	r2, r0
 800b51a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b51c:	6a21      	ldr	r1, [r4, #32]
 800b51e:	4628      	mov	r0, r5
 800b520:	47b0      	blx	r6
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	d106      	bne.n	800b536 <__sflush_r+0x66>
 800b528:	6829      	ldr	r1, [r5, #0]
 800b52a:	291d      	cmp	r1, #29
 800b52c:	d82c      	bhi.n	800b588 <__sflush_r+0xb8>
 800b52e:	4a2a      	ldr	r2, [pc, #168]	; (800b5d8 <__sflush_r+0x108>)
 800b530:	40ca      	lsrs	r2, r1
 800b532:	07d6      	lsls	r6, r2, #31
 800b534:	d528      	bpl.n	800b588 <__sflush_r+0xb8>
 800b536:	2200      	movs	r2, #0
 800b538:	6062      	str	r2, [r4, #4]
 800b53a:	04d9      	lsls	r1, r3, #19
 800b53c:	6922      	ldr	r2, [r4, #16]
 800b53e:	6022      	str	r2, [r4, #0]
 800b540:	d504      	bpl.n	800b54c <__sflush_r+0x7c>
 800b542:	1c42      	adds	r2, r0, #1
 800b544:	d101      	bne.n	800b54a <__sflush_r+0x7a>
 800b546:	682b      	ldr	r3, [r5, #0]
 800b548:	b903      	cbnz	r3, 800b54c <__sflush_r+0x7c>
 800b54a:	6560      	str	r0, [r4, #84]	; 0x54
 800b54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b54e:	602f      	str	r7, [r5, #0]
 800b550:	2900      	cmp	r1, #0
 800b552:	d0ca      	beq.n	800b4ea <__sflush_r+0x1a>
 800b554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b558:	4299      	cmp	r1, r3
 800b55a:	d002      	beq.n	800b562 <__sflush_r+0x92>
 800b55c:	4628      	mov	r0, r5
 800b55e:	f000 f9d7 	bl	800b910 <_free_r>
 800b562:	2000      	movs	r0, #0
 800b564:	6360      	str	r0, [r4, #52]	; 0x34
 800b566:	e7c1      	b.n	800b4ec <__sflush_r+0x1c>
 800b568:	6a21      	ldr	r1, [r4, #32]
 800b56a:	2301      	movs	r3, #1
 800b56c:	4628      	mov	r0, r5
 800b56e:	47b0      	blx	r6
 800b570:	1c41      	adds	r1, r0, #1
 800b572:	d1c7      	bne.n	800b504 <__sflush_r+0x34>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d0c4      	beq.n	800b504 <__sflush_r+0x34>
 800b57a:	2b1d      	cmp	r3, #29
 800b57c:	d001      	beq.n	800b582 <__sflush_r+0xb2>
 800b57e:	2b16      	cmp	r3, #22
 800b580:	d101      	bne.n	800b586 <__sflush_r+0xb6>
 800b582:	602f      	str	r7, [r5, #0]
 800b584:	e7b1      	b.n	800b4ea <__sflush_r+0x1a>
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b58c:	81a3      	strh	r3, [r4, #12]
 800b58e:	e7ad      	b.n	800b4ec <__sflush_r+0x1c>
 800b590:	690f      	ldr	r7, [r1, #16]
 800b592:	2f00      	cmp	r7, #0
 800b594:	d0a9      	beq.n	800b4ea <__sflush_r+0x1a>
 800b596:	0793      	lsls	r3, r2, #30
 800b598:	680e      	ldr	r6, [r1, #0]
 800b59a:	bf08      	it	eq
 800b59c:	694b      	ldreq	r3, [r1, #20]
 800b59e:	600f      	str	r7, [r1, #0]
 800b5a0:	bf18      	it	ne
 800b5a2:	2300      	movne	r3, #0
 800b5a4:	eba6 0807 	sub.w	r8, r6, r7
 800b5a8:	608b      	str	r3, [r1, #8]
 800b5aa:	f1b8 0f00 	cmp.w	r8, #0
 800b5ae:	dd9c      	ble.n	800b4ea <__sflush_r+0x1a>
 800b5b0:	6a21      	ldr	r1, [r4, #32]
 800b5b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5b4:	4643      	mov	r3, r8
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	47b0      	blx	r6
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	dc06      	bgt.n	800b5ce <__sflush_r+0xfe>
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5cc:	e78e      	b.n	800b4ec <__sflush_r+0x1c>
 800b5ce:	4407      	add	r7, r0
 800b5d0:	eba8 0800 	sub.w	r8, r8, r0
 800b5d4:	e7e9      	b.n	800b5aa <__sflush_r+0xda>
 800b5d6:	bf00      	nop
 800b5d8:	20400001 	.word	0x20400001

0800b5dc <_fflush_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	690b      	ldr	r3, [r1, #16]
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	b913      	cbnz	r3, 800b5ec <_fflush_r+0x10>
 800b5e6:	2500      	movs	r5, #0
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	b118      	cbz	r0, 800b5f6 <_fflush_r+0x1a>
 800b5ee:	6983      	ldr	r3, [r0, #24]
 800b5f0:	b90b      	cbnz	r3, 800b5f6 <_fflush_r+0x1a>
 800b5f2:	f000 f887 	bl	800b704 <__sinit>
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <_fflush_r+0x6c>)
 800b5f8:	429c      	cmp	r4, r3
 800b5fa:	d11b      	bne.n	800b634 <_fflush_r+0x58>
 800b5fc:	686c      	ldr	r4, [r5, #4]
 800b5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d0ef      	beq.n	800b5e6 <_fflush_r+0xa>
 800b606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b608:	07d0      	lsls	r0, r2, #31
 800b60a:	d404      	bmi.n	800b616 <_fflush_r+0x3a>
 800b60c:	0599      	lsls	r1, r3, #22
 800b60e:	d402      	bmi.n	800b616 <_fflush_r+0x3a>
 800b610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b612:	f000 f915 	bl	800b840 <__retarget_lock_acquire_recursive>
 800b616:	4628      	mov	r0, r5
 800b618:	4621      	mov	r1, r4
 800b61a:	f7ff ff59 	bl	800b4d0 <__sflush_r>
 800b61e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b620:	07da      	lsls	r2, r3, #31
 800b622:	4605      	mov	r5, r0
 800b624:	d4e0      	bmi.n	800b5e8 <_fflush_r+0xc>
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	059b      	lsls	r3, r3, #22
 800b62a:	d4dd      	bmi.n	800b5e8 <_fflush_r+0xc>
 800b62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b62e:	f000 f908 	bl	800b842 <__retarget_lock_release_recursive>
 800b632:	e7d9      	b.n	800b5e8 <_fflush_r+0xc>
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <_fflush_r+0x70>)
 800b636:	429c      	cmp	r4, r3
 800b638:	d101      	bne.n	800b63e <_fflush_r+0x62>
 800b63a:	68ac      	ldr	r4, [r5, #8]
 800b63c:	e7df      	b.n	800b5fe <_fflush_r+0x22>
 800b63e:	4b04      	ldr	r3, [pc, #16]	; (800b650 <_fflush_r+0x74>)
 800b640:	429c      	cmp	r4, r3
 800b642:	bf08      	it	eq
 800b644:	68ec      	ldreq	r4, [r5, #12]
 800b646:	e7da      	b.n	800b5fe <_fflush_r+0x22>
 800b648:	0800f328 	.word	0x0800f328
 800b64c:	0800f348 	.word	0x0800f348
 800b650:	0800f308 	.word	0x0800f308

0800b654 <std>:
 800b654:	2300      	movs	r3, #0
 800b656:	b510      	push	{r4, lr}
 800b658:	4604      	mov	r4, r0
 800b65a:	e9c0 3300 	strd	r3, r3, [r0]
 800b65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b662:	6083      	str	r3, [r0, #8]
 800b664:	8181      	strh	r1, [r0, #12]
 800b666:	6643      	str	r3, [r0, #100]	; 0x64
 800b668:	81c2      	strh	r2, [r0, #14]
 800b66a:	6183      	str	r3, [r0, #24]
 800b66c:	4619      	mov	r1, r3
 800b66e:	2208      	movs	r2, #8
 800b670:	305c      	adds	r0, #92	; 0x5c
 800b672:	f7ff fb49 	bl	800ad08 <memset>
 800b676:	4b05      	ldr	r3, [pc, #20]	; (800b68c <std+0x38>)
 800b678:	6263      	str	r3, [r4, #36]	; 0x24
 800b67a:	4b05      	ldr	r3, [pc, #20]	; (800b690 <std+0x3c>)
 800b67c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b67e:	4b05      	ldr	r3, [pc, #20]	; (800b694 <std+0x40>)
 800b680:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b682:	4b05      	ldr	r3, [pc, #20]	; (800b698 <std+0x44>)
 800b684:	6224      	str	r4, [r4, #32]
 800b686:	6323      	str	r3, [r4, #48]	; 0x30
 800b688:	bd10      	pop	{r4, pc}
 800b68a:	bf00      	nop
 800b68c:	0800bb81 	.word	0x0800bb81
 800b690:	0800bba3 	.word	0x0800bba3
 800b694:	0800bbdb 	.word	0x0800bbdb
 800b698:	0800bbff 	.word	0x0800bbff

0800b69c <_cleanup_r>:
 800b69c:	4901      	ldr	r1, [pc, #4]	; (800b6a4 <_cleanup_r+0x8>)
 800b69e:	f000 b8af 	b.w	800b800 <_fwalk_reent>
 800b6a2:	bf00      	nop
 800b6a4:	0800b5dd 	.word	0x0800b5dd

0800b6a8 <__sfmoreglue>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	2268      	movs	r2, #104	; 0x68
 800b6ac:	1e4d      	subs	r5, r1, #1
 800b6ae:	4355      	muls	r5, r2
 800b6b0:	460e      	mov	r6, r1
 800b6b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6b6:	f000 f997 	bl	800b9e8 <_malloc_r>
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	b140      	cbz	r0, 800b6d0 <__sfmoreglue+0x28>
 800b6be:	2100      	movs	r1, #0
 800b6c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b6c4:	300c      	adds	r0, #12
 800b6c6:	60a0      	str	r0, [r4, #8]
 800b6c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6cc:	f7ff fb1c 	bl	800ad08 <memset>
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}

0800b6d4 <__sfp_lock_acquire>:
 800b6d4:	4801      	ldr	r0, [pc, #4]	; (800b6dc <__sfp_lock_acquire+0x8>)
 800b6d6:	f000 b8b3 	b.w	800b840 <__retarget_lock_acquire_recursive>
 800b6da:	bf00      	nop
 800b6dc:	2000df73 	.word	0x2000df73

0800b6e0 <__sfp_lock_release>:
 800b6e0:	4801      	ldr	r0, [pc, #4]	; (800b6e8 <__sfp_lock_release+0x8>)
 800b6e2:	f000 b8ae 	b.w	800b842 <__retarget_lock_release_recursive>
 800b6e6:	bf00      	nop
 800b6e8:	2000df73 	.word	0x2000df73

0800b6ec <__sinit_lock_acquire>:
 800b6ec:	4801      	ldr	r0, [pc, #4]	; (800b6f4 <__sinit_lock_acquire+0x8>)
 800b6ee:	f000 b8a7 	b.w	800b840 <__retarget_lock_acquire_recursive>
 800b6f2:	bf00      	nop
 800b6f4:	2000df74 	.word	0x2000df74

0800b6f8 <__sinit_lock_release>:
 800b6f8:	4801      	ldr	r0, [pc, #4]	; (800b700 <__sinit_lock_release+0x8>)
 800b6fa:	f000 b8a2 	b.w	800b842 <__retarget_lock_release_recursive>
 800b6fe:	bf00      	nop
 800b700:	2000df74 	.word	0x2000df74

0800b704 <__sinit>:
 800b704:	b510      	push	{r4, lr}
 800b706:	4604      	mov	r4, r0
 800b708:	f7ff fff0 	bl	800b6ec <__sinit_lock_acquire>
 800b70c:	69a3      	ldr	r3, [r4, #24]
 800b70e:	b11b      	cbz	r3, 800b718 <__sinit+0x14>
 800b710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b714:	f7ff bff0 	b.w	800b6f8 <__sinit_lock_release>
 800b718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b71c:	6523      	str	r3, [r4, #80]	; 0x50
 800b71e:	4b13      	ldr	r3, [pc, #76]	; (800b76c <__sinit+0x68>)
 800b720:	4a13      	ldr	r2, [pc, #76]	; (800b770 <__sinit+0x6c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	62a2      	str	r2, [r4, #40]	; 0x28
 800b726:	42a3      	cmp	r3, r4
 800b728:	bf04      	itt	eq
 800b72a:	2301      	moveq	r3, #1
 800b72c:	61a3      	streq	r3, [r4, #24]
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 f820 	bl	800b774 <__sfp>
 800b734:	6060      	str	r0, [r4, #4]
 800b736:	4620      	mov	r0, r4
 800b738:	f000 f81c 	bl	800b774 <__sfp>
 800b73c:	60a0      	str	r0, [r4, #8]
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 f818 	bl	800b774 <__sfp>
 800b744:	2200      	movs	r2, #0
 800b746:	60e0      	str	r0, [r4, #12]
 800b748:	2104      	movs	r1, #4
 800b74a:	6860      	ldr	r0, [r4, #4]
 800b74c:	f7ff ff82 	bl	800b654 <std>
 800b750:	68a0      	ldr	r0, [r4, #8]
 800b752:	2201      	movs	r2, #1
 800b754:	2109      	movs	r1, #9
 800b756:	f7ff ff7d 	bl	800b654 <std>
 800b75a:	68e0      	ldr	r0, [r4, #12]
 800b75c:	2202      	movs	r2, #2
 800b75e:	2112      	movs	r1, #18
 800b760:	f7ff ff78 	bl	800b654 <std>
 800b764:	2301      	movs	r3, #1
 800b766:	61a3      	str	r3, [r4, #24]
 800b768:	e7d2      	b.n	800b710 <__sinit+0xc>
 800b76a:	bf00      	nop
 800b76c:	0800f2d0 	.word	0x0800f2d0
 800b770:	0800b69d 	.word	0x0800b69d

0800b774 <__sfp>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	4607      	mov	r7, r0
 800b778:	f7ff ffac 	bl	800b6d4 <__sfp_lock_acquire>
 800b77c:	4b1e      	ldr	r3, [pc, #120]	; (800b7f8 <__sfp+0x84>)
 800b77e:	681e      	ldr	r6, [r3, #0]
 800b780:	69b3      	ldr	r3, [r6, #24]
 800b782:	b913      	cbnz	r3, 800b78a <__sfp+0x16>
 800b784:	4630      	mov	r0, r6
 800b786:	f7ff ffbd 	bl	800b704 <__sinit>
 800b78a:	3648      	adds	r6, #72	; 0x48
 800b78c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b790:	3b01      	subs	r3, #1
 800b792:	d503      	bpl.n	800b79c <__sfp+0x28>
 800b794:	6833      	ldr	r3, [r6, #0]
 800b796:	b30b      	cbz	r3, 800b7dc <__sfp+0x68>
 800b798:	6836      	ldr	r6, [r6, #0]
 800b79a:	e7f7      	b.n	800b78c <__sfp+0x18>
 800b79c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7a0:	b9d5      	cbnz	r5, 800b7d8 <__sfp+0x64>
 800b7a2:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <__sfp+0x88>)
 800b7a4:	60e3      	str	r3, [r4, #12]
 800b7a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b7ac:	f000 f847 	bl	800b83e <__retarget_lock_init_recursive>
 800b7b0:	f7ff ff96 	bl	800b6e0 <__sfp_lock_release>
 800b7b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7bc:	6025      	str	r5, [r4, #0]
 800b7be:	61a5      	str	r5, [r4, #24]
 800b7c0:	2208      	movs	r2, #8
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7c8:	f7ff fa9e 	bl	800ad08 <memset>
 800b7cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d8:	3468      	adds	r4, #104	; 0x68
 800b7da:	e7d9      	b.n	800b790 <__sfp+0x1c>
 800b7dc:	2104      	movs	r1, #4
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f7ff ff62 	bl	800b6a8 <__sfmoreglue>
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	6030      	str	r0, [r6, #0]
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d1d5      	bne.n	800b798 <__sfp+0x24>
 800b7ec:	f7ff ff78 	bl	800b6e0 <__sfp_lock_release>
 800b7f0:	230c      	movs	r3, #12
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	e7ee      	b.n	800b7d4 <__sfp+0x60>
 800b7f6:	bf00      	nop
 800b7f8:	0800f2d0 	.word	0x0800f2d0
 800b7fc:	ffff0001 	.word	0xffff0001

0800b800 <_fwalk_reent>:
 800b800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b804:	4606      	mov	r6, r0
 800b806:	4688      	mov	r8, r1
 800b808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b80c:	2700      	movs	r7, #0
 800b80e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b812:	f1b9 0901 	subs.w	r9, r9, #1
 800b816:	d505      	bpl.n	800b824 <_fwalk_reent+0x24>
 800b818:	6824      	ldr	r4, [r4, #0]
 800b81a:	2c00      	cmp	r4, #0
 800b81c:	d1f7      	bne.n	800b80e <_fwalk_reent+0xe>
 800b81e:	4638      	mov	r0, r7
 800b820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b824:	89ab      	ldrh	r3, [r5, #12]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d907      	bls.n	800b83a <_fwalk_reent+0x3a>
 800b82a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b82e:	3301      	adds	r3, #1
 800b830:	d003      	beq.n	800b83a <_fwalk_reent+0x3a>
 800b832:	4629      	mov	r1, r5
 800b834:	4630      	mov	r0, r6
 800b836:	47c0      	blx	r8
 800b838:	4307      	orrs	r7, r0
 800b83a:	3568      	adds	r5, #104	; 0x68
 800b83c:	e7e9      	b.n	800b812 <_fwalk_reent+0x12>

0800b83e <__retarget_lock_init_recursive>:
 800b83e:	4770      	bx	lr

0800b840 <__retarget_lock_acquire_recursive>:
 800b840:	4770      	bx	lr

0800b842 <__retarget_lock_release_recursive>:
 800b842:	4770      	bx	lr

0800b844 <__swhatbuf_r>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	460e      	mov	r6, r1
 800b848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b84c:	2900      	cmp	r1, #0
 800b84e:	b096      	sub	sp, #88	; 0x58
 800b850:	4614      	mov	r4, r2
 800b852:	461d      	mov	r5, r3
 800b854:	da08      	bge.n	800b868 <__swhatbuf_r+0x24>
 800b856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	061a      	lsls	r2, r3, #24
 800b860:	d410      	bmi.n	800b884 <__swhatbuf_r+0x40>
 800b862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b866:	e00e      	b.n	800b886 <__swhatbuf_r+0x42>
 800b868:	466a      	mov	r2, sp
 800b86a:	f000 f9ef 	bl	800bc4c <_fstat_r>
 800b86e:	2800      	cmp	r0, #0
 800b870:	dbf1      	blt.n	800b856 <__swhatbuf_r+0x12>
 800b872:	9a01      	ldr	r2, [sp, #4]
 800b874:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b878:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b87c:	425a      	negs	r2, r3
 800b87e:	415a      	adcs	r2, r3
 800b880:	602a      	str	r2, [r5, #0]
 800b882:	e7ee      	b.n	800b862 <__swhatbuf_r+0x1e>
 800b884:	2340      	movs	r3, #64	; 0x40
 800b886:	2000      	movs	r0, #0
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	b016      	add	sp, #88	; 0x58
 800b88c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b890 <__smakebuf_r>:
 800b890:	898b      	ldrh	r3, [r1, #12]
 800b892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b894:	079d      	lsls	r5, r3, #30
 800b896:	4606      	mov	r6, r0
 800b898:	460c      	mov	r4, r1
 800b89a:	d507      	bpl.n	800b8ac <__smakebuf_r+0x1c>
 800b89c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	6123      	str	r3, [r4, #16]
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	6163      	str	r3, [r4, #20]
 800b8a8:	b002      	add	sp, #8
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	ab01      	add	r3, sp, #4
 800b8ae:	466a      	mov	r2, sp
 800b8b0:	f7ff ffc8 	bl	800b844 <__swhatbuf_r>
 800b8b4:	9900      	ldr	r1, [sp, #0]
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f000 f895 	bl	800b9e8 <_malloc_r>
 800b8be:	b948      	cbnz	r0, 800b8d4 <__smakebuf_r+0x44>
 800b8c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c4:	059a      	lsls	r2, r3, #22
 800b8c6:	d4ef      	bmi.n	800b8a8 <__smakebuf_r+0x18>
 800b8c8:	f023 0303 	bic.w	r3, r3, #3
 800b8cc:	f043 0302 	orr.w	r3, r3, #2
 800b8d0:	81a3      	strh	r3, [r4, #12]
 800b8d2:	e7e3      	b.n	800b89c <__smakebuf_r+0xc>
 800b8d4:	4b0d      	ldr	r3, [pc, #52]	; (800b90c <__smakebuf_r+0x7c>)
 800b8d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	6020      	str	r0, [r4, #0]
 800b8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	9b00      	ldr	r3, [sp, #0]
 800b8e4:	6163      	str	r3, [r4, #20]
 800b8e6:	9b01      	ldr	r3, [sp, #4]
 800b8e8:	6120      	str	r0, [r4, #16]
 800b8ea:	b15b      	cbz	r3, 800b904 <__smakebuf_r+0x74>
 800b8ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f000 f9bd 	bl	800bc70 <_isatty_r>
 800b8f6:	b128      	cbz	r0, 800b904 <__smakebuf_r+0x74>
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f023 0303 	bic.w	r3, r3, #3
 800b8fe:	f043 0301 	orr.w	r3, r3, #1
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	89a0      	ldrh	r0, [r4, #12]
 800b906:	4305      	orrs	r5, r0
 800b908:	81a5      	strh	r5, [r4, #12]
 800b90a:	e7cd      	b.n	800b8a8 <__smakebuf_r+0x18>
 800b90c:	0800b69d 	.word	0x0800b69d

0800b910 <_free_r>:
 800b910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b912:	2900      	cmp	r1, #0
 800b914:	d044      	beq.n	800b9a0 <_free_r+0x90>
 800b916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b91a:	9001      	str	r0, [sp, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f1a1 0404 	sub.w	r4, r1, #4
 800b922:	bfb8      	it	lt
 800b924:	18e4      	addlt	r4, r4, r3
 800b926:	f000 f9c5 	bl	800bcb4 <__malloc_lock>
 800b92a:	4a1e      	ldr	r2, [pc, #120]	; (800b9a4 <_free_r+0x94>)
 800b92c:	9801      	ldr	r0, [sp, #4]
 800b92e:	6813      	ldr	r3, [r2, #0]
 800b930:	b933      	cbnz	r3, 800b940 <_free_r+0x30>
 800b932:	6063      	str	r3, [r4, #4]
 800b934:	6014      	str	r4, [r2, #0]
 800b936:	b003      	add	sp, #12
 800b938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b93c:	f000 b9c0 	b.w	800bcc0 <__malloc_unlock>
 800b940:	42a3      	cmp	r3, r4
 800b942:	d908      	bls.n	800b956 <_free_r+0x46>
 800b944:	6825      	ldr	r5, [r4, #0]
 800b946:	1961      	adds	r1, r4, r5
 800b948:	428b      	cmp	r3, r1
 800b94a:	bf01      	itttt	eq
 800b94c:	6819      	ldreq	r1, [r3, #0]
 800b94e:	685b      	ldreq	r3, [r3, #4]
 800b950:	1949      	addeq	r1, r1, r5
 800b952:	6021      	streq	r1, [r4, #0]
 800b954:	e7ed      	b.n	800b932 <_free_r+0x22>
 800b956:	461a      	mov	r2, r3
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	b10b      	cbz	r3, 800b960 <_free_r+0x50>
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	d9fa      	bls.n	800b956 <_free_r+0x46>
 800b960:	6811      	ldr	r1, [r2, #0]
 800b962:	1855      	adds	r5, r2, r1
 800b964:	42a5      	cmp	r5, r4
 800b966:	d10b      	bne.n	800b980 <_free_r+0x70>
 800b968:	6824      	ldr	r4, [r4, #0]
 800b96a:	4421      	add	r1, r4
 800b96c:	1854      	adds	r4, r2, r1
 800b96e:	42a3      	cmp	r3, r4
 800b970:	6011      	str	r1, [r2, #0]
 800b972:	d1e0      	bne.n	800b936 <_free_r+0x26>
 800b974:	681c      	ldr	r4, [r3, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	6053      	str	r3, [r2, #4]
 800b97a:	4421      	add	r1, r4
 800b97c:	6011      	str	r1, [r2, #0]
 800b97e:	e7da      	b.n	800b936 <_free_r+0x26>
 800b980:	d902      	bls.n	800b988 <_free_r+0x78>
 800b982:	230c      	movs	r3, #12
 800b984:	6003      	str	r3, [r0, #0]
 800b986:	e7d6      	b.n	800b936 <_free_r+0x26>
 800b988:	6825      	ldr	r5, [r4, #0]
 800b98a:	1961      	adds	r1, r4, r5
 800b98c:	428b      	cmp	r3, r1
 800b98e:	bf04      	itt	eq
 800b990:	6819      	ldreq	r1, [r3, #0]
 800b992:	685b      	ldreq	r3, [r3, #4]
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	bf04      	itt	eq
 800b998:	1949      	addeq	r1, r1, r5
 800b99a:	6021      	streq	r1, [r4, #0]
 800b99c:	6054      	str	r4, [r2, #4]
 800b99e:	e7ca      	b.n	800b936 <_free_r+0x26>
 800b9a0:	b003      	add	sp, #12
 800b9a2:	bd30      	pop	{r4, r5, pc}
 800b9a4:	2000df78 	.word	0x2000df78

0800b9a8 <sbrk_aligned>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	4e0e      	ldr	r6, [pc, #56]	; (800b9e4 <sbrk_aligned+0x3c>)
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	6831      	ldr	r1, [r6, #0]
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	b911      	cbnz	r1, 800b9ba <sbrk_aligned+0x12>
 800b9b4:	f000 f8d4 	bl	800bb60 <_sbrk_r>
 800b9b8:	6030      	str	r0, [r6, #0]
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	4628      	mov	r0, r5
 800b9be:	f000 f8cf 	bl	800bb60 <_sbrk_r>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	d00a      	beq.n	800b9dc <sbrk_aligned+0x34>
 800b9c6:	1cc4      	adds	r4, r0, #3
 800b9c8:	f024 0403 	bic.w	r4, r4, #3
 800b9cc:	42a0      	cmp	r0, r4
 800b9ce:	d007      	beq.n	800b9e0 <sbrk_aligned+0x38>
 800b9d0:	1a21      	subs	r1, r4, r0
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f000 f8c4 	bl	800bb60 <_sbrk_r>
 800b9d8:	3001      	adds	r0, #1
 800b9da:	d101      	bne.n	800b9e0 <sbrk_aligned+0x38>
 800b9dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
 800b9e4:	2000df7c 	.word	0x2000df7c

0800b9e8 <_malloc_r>:
 800b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ec:	1ccd      	adds	r5, r1, #3
 800b9ee:	f025 0503 	bic.w	r5, r5, #3
 800b9f2:	3508      	adds	r5, #8
 800b9f4:	2d0c      	cmp	r5, #12
 800b9f6:	bf38      	it	cc
 800b9f8:	250c      	movcc	r5, #12
 800b9fa:	2d00      	cmp	r5, #0
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	db01      	blt.n	800ba04 <_malloc_r+0x1c>
 800ba00:	42a9      	cmp	r1, r5
 800ba02:	d905      	bls.n	800ba10 <_malloc_r+0x28>
 800ba04:	230c      	movs	r3, #12
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	2600      	movs	r6, #0
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba10:	4e2e      	ldr	r6, [pc, #184]	; (800bacc <_malloc_r+0xe4>)
 800ba12:	f000 f94f 	bl	800bcb4 <__malloc_lock>
 800ba16:	6833      	ldr	r3, [r6, #0]
 800ba18:	461c      	mov	r4, r3
 800ba1a:	bb34      	cbnz	r4, 800ba6a <_malloc_r+0x82>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4638      	mov	r0, r7
 800ba20:	f7ff ffc2 	bl	800b9a8 <sbrk_aligned>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	4604      	mov	r4, r0
 800ba28:	d14d      	bne.n	800bac6 <_malloc_r+0xde>
 800ba2a:	6834      	ldr	r4, [r6, #0]
 800ba2c:	4626      	mov	r6, r4
 800ba2e:	2e00      	cmp	r6, #0
 800ba30:	d140      	bne.n	800bab4 <_malloc_r+0xcc>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	4631      	mov	r1, r6
 800ba36:	4638      	mov	r0, r7
 800ba38:	eb04 0803 	add.w	r8, r4, r3
 800ba3c:	f000 f890 	bl	800bb60 <_sbrk_r>
 800ba40:	4580      	cmp	r8, r0
 800ba42:	d13a      	bne.n	800baba <_malloc_r+0xd2>
 800ba44:	6821      	ldr	r1, [r4, #0]
 800ba46:	3503      	adds	r5, #3
 800ba48:	1a6d      	subs	r5, r5, r1
 800ba4a:	f025 0503 	bic.w	r5, r5, #3
 800ba4e:	3508      	adds	r5, #8
 800ba50:	2d0c      	cmp	r5, #12
 800ba52:	bf38      	it	cc
 800ba54:	250c      	movcc	r5, #12
 800ba56:	4629      	mov	r1, r5
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7ff ffa5 	bl	800b9a8 <sbrk_aligned>
 800ba5e:	3001      	adds	r0, #1
 800ba60:	d02b      	beq.n	800baba <_malloc_r+0xd2>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	442b      	add	r3, r5
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	e00e      	b.n	800ba88 <_malloc_r+0xa0>
 800ba6a:	6822      	ldr	r2, [r4, #0]
 800ba6c:	1b52      	subs	r2, r2, r5
 800ba6e:	d41e      	bmi.n	800baae <_malloc_r+0xc6>
 800ba70:	2a0b      	cmp	r2, #11
 800ba72:	d916      	bls.n	800baa2 <_malloc_r+0xba>
 800ba74:	1961      	adds	r1, r4, r5
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	6025      	str	r5, [r4, #0]
 800ba7a:	bf18      	it	ne
 800ba7c:	6059      	strne	r1, [r3, #4]
 800ba7e:	6863      	ldr	r3, [r4, #4]
 800ba80:	bf08      	it	eq
 800ba82:	6031      	streq	r1, [r6, #0]
 800ba84:	5162      	str	r2, [r4, r5]
 800ba86:	604b      	str	r3, [r1, #4]
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f104 060b 	add.w	r6, r4, #11
 800ba8e:	f000 f917 	bl	800bcc0 <__malloc_unlock>
 800ba92:	f026 0607 	bic.w	r6, r6, #7
 800ba96:	1d23      	adds	r3, r4, #4
 800ba98:	1af2      	subs	r2, r6, r3
 800ba9a:	d0b6      	beq.n	800ba0a <_malloc_r+0x22>
 800ba9c:	1b9b      	subs	r3, r3, r6
 800ba9e:	50a3      	str	r3, [r4, r2]
 800baa0:	e7b3      	b.n	800ba0a <_malloc_r+0x22>
 800baa2:	6862      	ldr	r2, [r4, #4]
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	bf0c      	ite	eq
 800baa8:	6032      	streq	r2, [r6, #0]
 800baaa:	605a      	strne	r2, [r3, #4]
 800baac:	e7ec      	b.n	800ba88 <_malloc_r+0xa0>
 800baae:	4623      	mov	r3, r4
 800bab0:	6864      	ldr	r4, [r4, #4]
 800bab2:	e7b2      	b.n	800ba1a <_malloc_r+0x32>
 800bab4:	4634      	mov	r4, r6
 800bab6:	6876      	ldr	r6, [r6, #4]
 800bab8:	e7b9      	b.n	800ba2e <_malloc_r+0x46>
 800baba:	230c      	movs	r3, #12
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	4638      	mov	r0, r7
 800bac0:	f000 f8fe 	bl	800bcc0 <__malloc_unlock>
 800bac4:	e7a1      	b.n	800ba0a <_malloc_r+0x22>
 800bac6:	6025      	str	r5, [r4, #0]
 800bac8:	e7de      	b.n	800ba88 <_malloc_r+0xa0>
 800baca:	bf00      	nop
 800bacc:	2000df78 	.word	0x2000df78

0800bad0 <_putc_r>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	460d      	mov	r5, r1
 800bad4:	4614      	mov	r4, r2
 800bad6:	4606      	mov	r6, r0
 800bad8:	b118      	cbz	r0, 800bae2 <_putc_r+0x12>
 800bada:	6983      	ldr	r3, [r0, #24]
 800badc:	b90b      	cbnz	r3, 800bae2 <_putc_r+0x12>
 800bade:	f7ff fe11 	bl	800b704 <__sinit>
 800bae2:	4b1c      	ldr	r3, [pc, #112]	; (800bb54 <_putc_r+0x84>)
 800bae4:	429c      	cmp	r4, r3
 800bae6:	d124      	bne.n	800bb32 <_putc_r+0x62>
 800bae8:	6874      	ldr	r4, [r6, #4]
 800baea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baec:	07d8      	lsls	r0, r3, #31
 800baee:	d405      	bmi.n	800bafc <_putc_r+0x2c>
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	0599      	lsls	r1, r3, #22
 800baf4:	d402      	bmi.n	800bafc <_putc_r+0x2c>
 800baf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baf8:	f7ff fea2 	bl	800b840 <__retarget_lock_acquire_recursive>
 800bafc:	68a3      	ldr	r3, [r4, #8]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	60a3      	str	r3, [r4, #8]
 800bb04:	da05      	bge.n	800bb12 <_putc_r+0x42>
 800bb06:	69a2      	ldr	r2, [r4, #24]
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	db1c      	blt.n	800bb46 <_putc_r+0x76>
 800bb0c:	b2eb      	uxtb	r3, r5
 800bb0e:	2b0a      	cmp	r3, #10
 800bb10:	d019      	beq.n	800bb46 <_putc_r+0x76>
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	6022      	str	r2, [r4, #0]
 800bb18:	701d      	strb	r5, [r3, #0]
 800bb1a:	b2ed      	uxtb	r5, r5
 800bb1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb1e:	07da      	lsls	r2, r3, #31
 800bb20:	d405      	bmi.n	800bb2e <_putc_r+0x5e>
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	059b      	lsls	r3, r3, #22
 800bb26:	d402      	bmi.n	800bb2e <_putc_r+0x5e>
 800bb28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb2a:	f7ff fe8a 	bl	800b842 <__retarget_lock_release_recursive>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	bd70      	pop	{r4, r5, r6, pc}
 800bb32:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <_putc_r+0x88>)
 800bb34:	429c      	cmp	r4, r3
 800bb36:	d101      	bne.n	800bb3c <_putc_r+0x6c>
 800bb38:	68b4      	ldr	r4, [r6, #8]
 800bb3a:	e7d6      	b.n	800baea <_putc_r+0x1a>
 800bb3c:	4b07      	ldr	r3, [pc, #28]	; (800bb5c <_putc_r+0x8c>)
 800bb3e:	429c      	cmp	r4, r3
 800bb40:	bf08      	it	eq
 800bb42:	68f4      	ldreq	r4, [r6, #12]
 800bb44:	e7d1      	b.n	800baea <_putc_r+0x1a>
 800bb46:	4629      	mov	r1, r5
 800bb48:	4622      	mov	r2, r4
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7ff fc00 	bl	800b350 <__swbuf_r>
 800bb50:	4605      	mov	r5, r0
 800bb52:	e7e3      	b.n	800bb1c <_putc_r+0x4c>
 800bb54:	0800f328 	.word	0x0800f328
 800bb58:	0800f348 	.word	0x0800f348
 800bb5c:	0800f308 	.word	0x0800f308

0800bb60 <_sbrk_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d06      	ldr	r5, [pc, #24]	; (800bb7c <_sbrk_r+0x1c>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f4 ff9c 	bl	8000aa8 <_sbrk>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_sbrk_r+0x1a>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_sbrk_r+0x1a>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	2000df80 	.word	0x2000df80

0800bb80 <__sread>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	460c      	mov	r4, r1
 800bb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb88:	f000 f8a0 	bl	800bccc <_read_r>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	bfab      	itete	ge
 800bb90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb92:	89a3      	ldrhlt	r3, [r4, #12]
 800bb94:	181b      	addge	r3, r3, r0
 800bb96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb9a:	bfac      	ite	ge
 800bb9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb9e:	81a3      	strhlt	r3, [r4, #12]
 800bba0:	bd10      	pop	{r4, pc}

0800bba2 <__swrite>:
 800bba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba6:	461f      	mov	r7, r3
 800bba8:	898b      	ldrh	r3, [r1, #12]
 800bbaa:	05db      	lsls	r3, r3, #23
 800bbac:	4605      	mov	r5, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	4616      	mov	r6, r2
 800bbb2:	d505      	bpl.n	800bbc0 <__swrite+0x1e>
 800bbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb8:	2302      	movs	r3, #2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f000 f868 	bl	800bc90 <_lseek_r>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbca:	81a3      	strh	r3, [r4, #12]
 800bbcc:	4632      	mov	r2, r6
 800bbce:	463b      	mov	r3, r7
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd6:	f000 b817 	b.w	800bc08 <_write_r>

0800bbda <__sseek>:
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	460c      	mov	r4, r1
 800bbde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe2:	f000 f855 	bl	800bc90 <_lseek_r>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	bf15      	itete	ne
 800bbec:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbf6:	81a3      	strheq	r3, [r4, #12]
 800bbf8:	bf18      	it	ne
 800bbfa:	81a3      	strhne	r3, [r4, #12]
 800bbfc:	bd10      	pop	{r4, pc}

0800bbfe <__sclose>:
 800bbfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc02:	f000 b813 	b.w	800bc2c <_close_r>
	...

0800bc08 <_write_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4d07      	ldr	r5, [pc, #28]	; (800bc28 <_write_r+0x20>)
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	4608      	mov	r0, r1
 800bc10:	4611      	mov	r1, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	602a      	str	r2, [r5, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	f7f4 fd48 	bl	80006ac <_write>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_write_r+0x1e>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_write_r+0x1e>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	2000df80 	.word	0x2000df80

0800bc2c <_close_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4d06      	ldr	r5, [pc, #24]	; (800bc48 <_close_r+0x1c>)
 800bc30:	2300      	movs	r3, #0
 800bc32:	4604      	mov	r4, r0
 800bc34:	4608      	mov	r0, r1
 800bc36:	602b      	str	r3, [r5, #0]
 800bc38:	f7f4 ff2a 	bl	8000a90 <_close>
 800bc3c:	1c43      	adds	r3, r0, #1
 800bc3e:	d102      	bne.n	800bc46 <_close_r+0x1a>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	b103      	cbz	r3, 800bc46 <_close_r+0x1a>
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	2000df80 	.word	0x2000df80

0800bc4c <_fstat_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d07      	ldr	r5, [pc, #28]	; (800bc6c <_fstat_r+0x20>)
 800bc50:	2300      	movs	r3, #0
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	f7f4 ff1c 	bl	8000a96 <_fstat>
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	d102      	bne.n	800bc68 <_fstat_r+0x1c>
 800bc62:	682b      	ldr	r3, [r5, #0]
 800bc64:	b103      	cbz	r3, 800bc68 <_fstat_r+0x1c>
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	bd38      	pop	{r3, r4, r5, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000df80 	.word	0x2000df80

0800bc70 <_isatty_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_isatty_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f4 ff10 	bl	8000aa0 <_isatty>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_isatty_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_isatty_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	2000df80 	.word	0x2000df80

0800bc90 <_lseek_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d07      	ldr	r5, [pc, #28]	; (800bcb0 <_lseek_r+0x20>)
 800bc94:	4604      	mov	r4, r0
 800bc96:	4608      	mov	r0, r1
 800bc98:	4611      	mov	r1, r2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	602a      	str	r2, [r5, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f7f4 ff00 	bl	8000aa4 <_lseek>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_lseek_r+0x1e>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_lseek_r+0x1e>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	2000df80 	.word	0x2000df80

0800bcb4 <__malloc_lock>:
 800bcb4:	4801      	ldr	r0, [pc, #4]	; (800bcbc <__malloc_lock+0x8>)
 800bcb6:	f7ff bdc3 	b.w	800b840 <__retarget_lock_acquire_recursive>
 800bcba:	bf00      	nop
 800bcbc:	2000df72 	.word	0x2000df72

0800bcc0 <__malloc_unlock>:
 800bcc0:	4801      	ldr	r0, [pc, #4]	; (800bcc8 <__malloc_unlock+0x8>)
 800bcc2:	f7ff bdbe 	b.w	800b842 <__retarget_lock_release_recursive>
 800bcc6:	bf00      	nop
 800bcc8:	2000df72 	.word	0x2000df72

0800bccc <_read_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d07      	ldr	r5, [pc, #28]	; (800bcec <_read_r+0x20>)
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	602a      	str	r2, [r5, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f7f4 fec8 	bl	8000a70 <_read>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d102      	bne.n	800bcea <_read_r+0x1e>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	b103      	cbz	r3, 800bcea <_read_r+0x1e>
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	2000df80 	.word	0x2000df80

0800bcf0 <_init>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	bf00      	nop
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_fini>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr
