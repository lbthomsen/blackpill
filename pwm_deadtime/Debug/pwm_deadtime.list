
pwm_deadtime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000417c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f8  080043f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040dc  20000074  08004474  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004150  08004474  00024150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125fc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295d  00000000  00000000  000326a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00035000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f0  00000000  00000000  00036b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efec  00000000  00000000  0004de88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933e9  00000000  00000000  0005ce74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f025d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc8  00000000  00000000  000f02b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004304 	.word	0x08004304

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004304 	.word	0x08004304

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
return 0;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4a07      	ldr	r2, [pc, #28]	; (8000524 <vApplicationGetIdleTaskMemory+0x2c>)
 8000508:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	4a06      	ldr	r2, [pc, #24]	; (8000528 <vApplicationGetIdleTaskMemory+0x30>)
 800050e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000090 	.word	0x20000090
 8000528:	20000148 	.word	0x20000148

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b08e      	sub	sp, #56	; 0x38
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fb2d 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f83d 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f947 	bl	80007cc <MX_GPIO_Init>
  MX_TIM1_Init();
 800053e:	f000 f8a1 	bl	8000684 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Fire up the PWM timer
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	4816      	ldr	r0, [pc, #88]	; (80005a0 <main+0x74>)
 8000546:	f001 fb71 	bl	8001c2c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	4814      	ldr	r0, [pc, #80]	; (80005a0 <main+0x74>)
 800054e:	f002 f9a3 	bl	8002898 <HAL_TIMEx_PWMN_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, startMainTask, osPriorityNormal, 0, 128);
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <main+0x78>)
 8000554:	f107 041c 	add.w	r4, r7, #28
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fb57 	bl	8002c20 <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <main+0x7c>)
 8000576:	6013      	str	r3, [r2, #0]

  /* definition and creation of pwmUpdateTask */
  osThreadDef(pwmUpdateTask, startPwmUpdateTask, osPriorityLow, 0, 128);
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <main+0x80>)
 800057a:	463c      	mov	r4, r7
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwmUpdateTaskHandle = osThreadCreate(osThread(pwmUpdateTask), NULL);
 800058a:	463b      	mov	r3, r7
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fb46 	bl	8002c20 <osThreadCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <main+0x84>)
 8000598:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059a:	f002 fb3a 	bl	8002c12 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x72>
 80005a0:	200040b0 	.word	0x200040b0
 80005a4:	08004338 	.word	0x08004338
 80005a8:	200040a8 	.word	0x200040a8
 80005ac:	08004354 	.word	0x08004354
 80005b0:	200040ac 	.word	0x200040ac

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fdd0 	bl	8004168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <SystemClock_Config+0xc8>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a20      	ldr	r2, [pc, #128]	; (8000680 <SystemClock_Config+0xcc>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000624:	2319      	movs	r3, #25
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000628:	23c0      	movs	r3, #192	; 0xc0
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fd85 	bl	8001148 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f958 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2103      	movs	r1, #3
 8000664:	4618      	mov	r0, r3
 8000666:	f000 ffe7 	bl	8001638 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000670:	f000 f942 	bl	80008f8 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	; 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b096      	sub	sp, #88	; 0x58
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fd53 	bl	8004168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006c4:	4a40      	ldr	r2, [pc, #256]	; (80007c8 <MX_TIM1_Init+0x144>)
 80006c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80006c8:	4b3e      	ldr	r3, [pc, #248]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006ca:	225f      	movs	r2, #95	; 0x5f
 80006cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ce:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80006d4:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e2:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e8:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ee:	4835      	ldr	r0, [pc, #212]	; (80007c4 <MX_TIM1_Init+0x140>)
 80006f0:	f001 f990 	bl	8001a14 <HAL_TIM_Base_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80006fa:	f000 f8fd 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000708:	4619      	mov	r1, r3
 800070a:	482e      	ldr	r0, [pc, #184]	; (80007c4 <MX_TIM1_Init+0x140>)
 800070c:	f001 fd08 	bl	8002120 <HAL_TIM_ConfigClockSource>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000716:	f000 f8ef 	bl	80008f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800071a:	482a      	ldr	r0, [pc, #168]	; (80007c4 <MX_TIM1_Init+0x140>)
 800071c:	f001 fa2c 	bl	8001b78 <HAL_TIM_PWM_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000726:	f000 f8e7 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000736:	4619      	mov	r1, r3
 8000738:	4822      	ldr	r0, [pc, #136]	; (80007c4 <MX_TIM1_Init+0x140>)
 800073a:	f002 f959 	bl	80029f0 <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000744:	f000 f8d8 	bl	80008f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000748:	2360      	movs	r3, #96	; 0x60
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 200;
 800074c:	23c8      	movs	r3, #200	; 0xc8
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000754:	2300      	movs	r3, #0
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	4815      	ldr	r0, [pc, #84]	; (80007c4 <MX_TIM1_Init+0x140>)
 800076e:	f001 fc15 	bl	8001f9c <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000778:	f000 f8be 	bl	80008f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800077c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000780:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800079a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800079e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM1_Init+0x140>)
 80007a6:	f002 f991 	bl	8002acc <HAL_TIMEx_ConfigBreakDeadTime>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80007b0:	f000 f8a2 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM1_Init+0x140>)
 80007b6:	f000 f8f9 	bl	80009ac <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3758      	adds	r7, #88	; 0x58
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200040b0 	.word	0x200040b0
 80007c8:	40010000 	.word	0x40010000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_GPIO_Init+0x9c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_GPIO_Init+0xa0>)
 800083e:	f000 fc4f 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000848:	2311      	movs	r3, #17
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xa0>)
 800085c:	f000 fabc 	bl	8000dd8 <HAL_GPIO_Init>

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020800 	.word	0x40020800

08000870 <startMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startMainTask */
void startMainTask(void const * argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <startMainTask+0x1c>)
 800087e:	f000 fc48 	bl	8001112 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f002 fa18 	bl	8002cb8 <osDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000888:	e7f6      	b.n	8000878 <startMainTask+0x8>
 800088a:	bf00      	nop
 800088c:	40020800 	.word	0x40020800

08000890 <startPwmUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPwmUpdateTask */
void startPwmUpdateTask(void const * argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPwmUpdateTask */


	uint32_t pwmValue = 100;
 8000898:	2364      	movs	r3, #100	; 0x64
 800089a:	60fb      	str	r3, [r7, #12]
	uint32_t pwmChange = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f002 fa09 	bl	8002cb8 <osDelay>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmValue);
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <startPwmUpdateTask+0x40>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
    pwmValue += pwmChange;
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
    if (pwmValue <= 100) pwmChange = 1;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b64      	cmp	r3, #100	; 0x64
 80008ba:	d801      	bhi.n	80008c0 <startPwmUpdateTask+0x30>
 80008bc:	2301      	movs	r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
    if (pwmValue >= 900) pwmChange = -1;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80008c6:	d3eb      	bcc.n	80008a0 <startPwmUpdateTask+0x10>
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008cc:	60bb      	str	r3, [r7, #8]
    osDelay(1);
 80008ce:	e7e7      	b.n	80008a0 <startPwmUpdateTask+0x10>
 80008d0:	200040b0 	.word	0x200040b0

080008d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d101      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e6:	f000 f975 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40014800 	.word	0x40014800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <HAL_MspInit+0x54>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x54>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_MspInit+0x54>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_MspInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	210f      	movs	r1, #15
 8000946:	f06f 0001 	mvn.w	r0, #1
 800094a:	f000 fa1b 	bl	8000d84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_TIM_Base_MspInit+0x48>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d115      	bne.n	800099a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_Base_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x4c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_TIM_Base_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	201a      	movs	r0, #26
 8000990:	f000 f9f8 	bl	8000d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000994:	201a      	movs	r0, #26
 8000996:	f000 fa11 	bl	8000dbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010000 	.word	0x40010000
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <HAL_TIM_MspPostInit+0x68>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d11e      	bne.n	8000a0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_TIM_MspPostInit+0x6c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_TIM_MspPostInit+0x6c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_TIM_MspPostInit+0x6c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_TIM_MspPostInit+0x70>)
 8000a08:	f000 f9e6 	bl	8000dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40010000 	.word	0x40010000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	201a      	movs	r0, #26
 8000a36:	f000 f9a5 	bl	8000d84 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000a3a:	201a      	movs	r0, #26
 8000a3c:	f000 f9be 	bl	8000dbc <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_InitTick+0xa0>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_InitTick+0xa0>)
 8000a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_InitTick+0xa0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 ffa2 	bl	80019b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a6c:	f000 ff8c 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
 8000a70:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_InitTick+0xa4>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9b      	lsrs	r3, r3, #18
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_InitTick+0xa8>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <HAL_InitTick+0xac>)
 8000a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_InitTick+0xa8>)
 8000a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a8c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_InitTick+0xa8>)
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_InitTick+0xa8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_InitTick+0xa8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <HAL_InitTick+0xa8>)
 8000aa2:	f000 ffb7 	bl	8001a14 <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d104      	bne.n	8000ab6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <HAL_InitTick+0xa8>)
 8000aae:	f001 f801 	bl	8001ab4 <HAL_TIM_Base_Start_IT>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3730      	adds	r7, #48	; 0x30
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	431bde83 	.word	0x431bde83
 8000ac8:	200040f8 	.word	0x200040f8
 8000acc:	40014800 	.word	0x40014800

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000b02:	f001 f943 	bl	8001d8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000b08:	f001 f940 	bl	8001d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200040b0 	.word	0x200040b0
 8000b14:	200040f8 	.word	0x200040f8

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b42:	490e      	ldr	r1, [pc, #56]	; (8000b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b58:	4c0b      	ldr	r4, [pc, #44]	; (8000b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b66:	f7ff ffd7 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f003 fad7 	bl	800411c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fcdd 	bl	800052c <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b80:	08004400 	.word	0x08004400
  ldr r2, =_sbss
 8000b84:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b88:	20004150 	.word	0x20004150

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f8d8 	bl	8000d6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2005      	movs	r0, #5
 8000bc0:	f7ff ff2e 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe9e 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20004140 	.word	0x20004140

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20004140 	.word	0x20004140

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff4c 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d96:	f7ff ff61 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000d9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff ffb1 	bl	8000d08 <NVIC_EncodePriority>
 8000da6:	4602      	mov	r2, r0
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff80 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff54 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e159      	b.n	80010a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8148 	bne.w	80010a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80a2 	beq.w	80010a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a56      	ldr	r2, [pc, #344]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_GPIO_Init+0x2e8>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x2ec>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a49      	ldr	r2, [pc, #292]	; (80010c8 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x202>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_GPIO_Init+0x2f4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x1fe>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_GPIO_Init+0x2f8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x1fa>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <HAL_GPIO_Init+0x2fc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x1f6>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <HAL_GPIO_Init+0x300>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x1f2>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x204>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	f002 0203 	and.w	r2, r2, #3
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	; (80010c4 <HAL_GPIO_Init+0x2ec>)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <HAL_GPIO_Init+0x304>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800101e:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001048:	4a24      	ldr	r2, [pc, #144]	; (80010dc <HAL_GPIO_Init+0x304>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x304>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_GPIO_Init+0x304>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_GPIO_Init+0x304>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	f67f aea2 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40020c00 	.word	0x40020c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	041a      	lsls	r2, r3, #16
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43d9      	mvns	r1, r3
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	400b      	ands	r3, r1
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e264      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d075      	beq.n	8001252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001166:	4ba3      	ldr	r3, [pc, #652]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b04      	cmp	r3, #4
 8001170:	d00c      	beq.n	800118c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001172:	4ba0      	ldr	r3, [pc, #640]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800117a:	2b08      	cmp	r3, #8
 800117c:	d112      	bne.n	80011a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117e:	4b9d      	ldr	r3, [pc, #628]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800118a:	d10b      	bne.n	80011a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	4b99      	ldr	r3, [pc, #612]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d05b      	beq.n	8001250 <HAL_RCC_OscConfig+0x108>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d157      	bne.n	8001250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e23f      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ac:	d106      	bne.n	80011bc <HAL_RCC_OscConfig+0x74>
 80011ae:	4b91      	ldr	r3, [pc, #580]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a90      	ldr	r2, [pc, #576]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xb0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x98>
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a87      	ldr	r2, [pc, #540]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xb0>
 80011e0:	4b84      	ldr	r3, [pc, #528]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a83      	ldr	r2, [pc, #524]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a80      	ldr	r2, [pc, #512]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fcfc 	bl	8000bfc <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fcf8 	bl	8000bfc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e204      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xc0>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fce8 	bl	8000bfc <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fce4 	bl	8000bfc <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1f0      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	4b6c      	ldr	r3, [pc, #432]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0xe8>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d063      	beq.n	8001326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800125e:	4b65      	ldr	r3, [pc, #404]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126a:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001272:	2b08      	cmp	r3, #8
 8001274:	d11c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x152>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e1c4      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4952      	ldr	r1, [pc, #328]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	e03a      	b.n	8001326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b8:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <HAL_RCC_OscConfig+0x2b0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff fc9d 	bl	8000bfc <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc99 	bl	8000bfc <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1a5      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4940      	ldr	r1, [pc, #256]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <HAL_RCC_OscConfig+0x2b0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fc7c 	bl	8000bfc <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fc78 	bl	8000bfc <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e184      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d030      	beq.n	8001394 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d016      	beq.n	8001368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_RCC_OscConfig+0x2b4>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001340:	f7ff fc5c 	bl	8000bfc <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff fc58 	bl	8000bfc <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e164      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x200>
 8001366:	e015      	b.n	8001394 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_RCC_OscConfig+0x2b4>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fc45 	bl	8000bfc <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff fc41 	bl	8000bfc <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e14d      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 800138a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80a0 	beq.w	80014e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10f      	bne.n	80013d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ce:	2301      	movs	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <HAL_RCC_OscConfig+0x2b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d121      	bne.n	8001422 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_RCC_OscConfig+0x2b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_RCC_OscConfig+0x2b8>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fc07 	bl	8000bfc <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	e011      	b.n	8001416 <HAL_RCC_OscConfig+0x2ce>
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	42470000 	.word	0x42470000
 80013fc:	42470e80 	.word	0x42470e80
 8001400:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001404:	f7ff fbfa 	bl	8000bfc <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e106      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b85      	ldr	r3, [pc, #532]	; (800162c <HAL_RCC_OscConfig+0x4e4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x2f0>
 800142a:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a80      	ldr	r2, [pc, #512]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
 8001436:	e01c      	b.n	8001472 <HAL_RCC_OscConfig+0x32a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b05      	cmp	r3, #5
 800143e:	d10c      	bne.n	800145a <HAL_RCC_OscConfig+0x312>
 8001440:	4b7b      	ldr	r3, [pc, #492]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	4a7a      	ldr	r2, [pc, #488]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6713      	str	r3, [r2, #112]	; 0x70
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a77      	ldr	r2, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	e00b      	b.n	8001472 <HAL_RCC_OscConfig+0x32a>
 800145a:	4b75      	ldr	r3, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	4a74      	ldr	r2, [pc, #464]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6713      	str	r3, [r2, #112]	; 0x70
 8001466:	4b72      	ldr	r3, [pc, #456]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a71      	ldr	r2, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	f023 0304 	bic.w	r3, r3, #4
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d015      	beq.n	80014a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fbbf 	bl	8000bfc <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	e00a      	b.n	8001498 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7ff fbbb 	bl	8000bfc <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e0c5      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0ee      	beq.n	8001482 <HAL_RCC_OscConfig+0x33a>
 80014a4:	e014      	b.n	80014d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fba9 	bl	8000bfc <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff fba5 	bl	8000bfc <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e0af      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	4b5a      	ldr	r3, [pc, #360]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1ee      	bne.n	80014ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d105      	bne.n	80014e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d6:	4b56      	ldr	r3, [pc, #344]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a55      	ldr	r2, [pc, #340]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 809b 	beq.w	8001622 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d05c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d141      	bne.n	8001584 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001500:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <HAL_RCC_OscConfig+0x4ec>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fb79 	bl	8000bfc <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff fb75 	bl	8000bfc <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e081      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001520:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	019b      	lsls	r3, r3, #6
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	3b01      	subs	r3, #1
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	061b      	lsls	r3, r3, #24
 8001550:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x4ec>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fb4e 	bl	8000bfc <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fb4a 	bl	8000bfc <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e056      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x41c>
 8001582:	e04e      	b.n	8001622 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0x4ec>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fb37 	bl	8000bfc <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fb33 	bl	8000bfc <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e03f      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x44a>
 80015b0:	e037      	b.n	8001622 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e032      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d028      	beq.n	800161e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d121      	bne.n	800161e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d11a      	bne.n	800161e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ee:	4013      	ands	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d111      	bne.n	800161e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	3b01      	subs	r3, #1
 8001608:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d107      	bne.n	800161e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40007000 	.word	0x40007000
 8001630:	40023800 	.word	0x40023800
 8001634:	42470060 	.word	0x42470060

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0cc      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d90c      	bls.n	8001674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d044      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d119      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e067      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4934      	ldr	r1, [pc, #208]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff fa68 	bl	8000bfc <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff fa64 	bl	8000bfc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e04f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d20c      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f91e 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	08004378 	.word	0x08004378
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800180a:	2100      	movs	r1, #0
 800180c:	6079      	str	r1, [r7, #4]
 800180e:	2100      	movs	r1, #0
 8001810:	60f9      	str	r1, [r7, #12]
 8001812:	2100      	movs	r1, #0
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001816:	2100      	movs	r1, #0
 8001818:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181a:	4952      	ldr	r1, [pc, #328]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 800181c:	6889      	ldr	r1, [r1, #8]
 800181e:	f001 010c 	and.w	r1, r1, #12
 8001822:	2908      	cmp	r1, #8
 8001824:	d00d      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x3e>
 8001826:	2908      	cmp	r1, #8
 8001828:	f200 8094 	bhi.w	8001954 <HAL_RCC_GetSysClockFreq+0x150>
 800182c:	2900      	cmp	r1, #0
 800182e:	d002      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x32>
 8001830:	2904      	cmp	r1, #4
 8001832:	d003      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x38>
 8001834:	e08e      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_GetSysClockFreq+0x164>)
 8001838:	60bb      	str	r3, [r7, #8]
       break;
 800183a:	e08e      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_RCC_GetSysClockFreq+0x168>)
 800183e:	60bb      	str	r3, [r7, #8]
      break;
 8001840:	e08b      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001842:	4948      	ldr	r1, [pc, #288]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 8001844:	6849      	ldr	r1, [r1, #4]
 8001846:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800184a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184c:	4945      	ldr	r1, [pc, #276]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 800184e:	6849      	ldr	r1, [r1, #4]
 8001850:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001854:	2900      	cmp	r1, #0
 8001856:	d024      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001858:	4942      	ldr	r1, [pc, #264]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 800185a:	6849      	ldr	r1, [r1, #4]
 800185c:	0989      	lsrs	r1, r1, #6
 800185e:	4608      	mov	r0, r1
 8001860:	f04f 0100 	mov.w	r1, #0
 8001864:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001868:	f04f 0500 	mov.w	r5, #0
 800186c:	ea00 0204 	and.w	r2, r0, r4
 8001870:	ea01 0305 	and.w	r3, r1, r5
 8001874:	493d      	ldr	r1, [pc, #244]	; (800196c <HAL_RCC_GetSysClockFreq+0x168>)
 8001876:	fb01 f003 	mul.w	r0, r1, r3
 800187a:	2100      	movs	r1, #0
 800187c:	fb01 f102 	mul.w	r1, r1, r2
 8001880:	1844      	adds	r4, r0, r1
 8001882:	493a      	ldr	r1, [pc, #232]	; (800196c <HAL_RCC_GetSysClockFreq+0x168>)
 8001884:	fba2 0101 	umull	r0, r1, r2, r1
 8001888:	1863      	adds	r3, r4, r1
 800188a:	4619      	mov	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f7fe fca4 	bl	80001e0 <__aeabi_uldivmod>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4613      	mov	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e04a      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	461a      	mov	r2, r3
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	ea02 0400 	and.w	r4, r2, r0
 80018ba:	ea03 0501 	and.w	r5, r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	014b      	lsls	r3, r1, #5
 80018cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018d0:	0142      	lsls	r2, r0, #5
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	1b00      	subs	r0, r0, r4
 80018d8:	eb61 0105 	sbc.w	r1, r1, r5
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	018b      	lsls	r3, r1, #6
 80018e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018ea:	0182      	lsls	r2, r0, #6
 80018ec:	1a12      	subs	r2, r2, r0
 80018ee:	eb63 0301 	sbc.w	r3, r3, r1
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	00d9      	lsls	r1, r3, #3
 80018fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001900:	00d0      	lsls	r0, r2, #3
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	1912      	adds	r2, r2, r4
 8001908:	eb45 0303 	adc.w	r3, r5, r3
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	0299      	lsls	r1, r3, #10
 8001916:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800191a:	0290      	lsls	r0, r2, #10
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	f7fe fc58 	bl	80001e0 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RCC_GetSysClockFreq+0x160>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	3301      	adds	r3, #1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	60bb      	str	r3, [r7, #8]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_RCC_GetSysClockFreq+0x164>)
 8001956:	60bb      	str	r3, [r7, #8]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	68bb      	ldr	r3, [r7, #8]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bdb0      	pop	{r4, r5, r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400
 800196c:	017d7840 	.word	0x017d7840

08001970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_RCC_GetHCLKFreq+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800198c:	f7ff fff0 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	0b5b      	lsrs	r3, r3, #13
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4903      	ldr	r1, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	08004388 	.word	0x08004388

080019b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	220f      	movs	r2, #15
 80019be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_RCC_GetClockConfig+0x60>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0207 	and.w	r2, r3, #7
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e041      	b.n	8001aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe ff8e 	bl	800095c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f000 fc54 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e044      	b.n	8001b56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_TIM_Base_Start_IT+0xb0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af6:	d013      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_TIM_Base_Start_IT+0xb4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_TIM_Base_Start_IT+0xb8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x6c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d111      	bne.n	8001b44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d010      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b42:	e007      	b.n	8001b54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40000c00 	.word	0x40000c00
 8001b74:	40014000 	.word	0x40014000

08001b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e041      	b.n	8001c0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f839 	bl	8001c16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 fba2 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_TIM_PWM_Start+0x24>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e022      	b.n	8001c96 <HAL_TIM_PWM_Start+0x6a>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d109      	bne.n	8001c6a <HAL_TIM_PWM_Start+0x3e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	e015      	b.n	8001c96 <HAL_TIM_PWM_Start+0x6a>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d109      	bne.n	8001c84 <HAL_TIM_PWM_Start+0x58>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e008      	b.n	8001c96 <HAL_TIM_PWM_Start+0x6a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e068      	b.n	8001d70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <HAL_TIM_PWM_Start+0x82>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cac:	e013      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xaa>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d104      	bne.n	8001cbe <HAL_TIM_PWM_Start+0x92>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cbc:	e00b      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xaa>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d104      	bne.n	8001cce <HAL_TIM_PWM_Start+0xa2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ccc:	e003      	b.n	8001cd6 <HAL_TIM_PWM_Start+0xaa>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fdb4 	bl	800284c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_TIM_PWM_Start+0x14c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d107      	bne.n	8001cfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_TIM_PWM_Start+0x14c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d018      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d013      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_PWM_Start+0x150>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_TIM_PWM_Start+0x154>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_TIM_PWM_Start+0x158>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x10e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_TIM_PWM_Start+0x15c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d010      	beq.n	8001d6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	e007      	b.n	8001d6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	40014000 	.word	0x40014000

08001d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0202 	mvn.w	r2, #2
 8001db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa77 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fa69 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa7a 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0204 	mvn.w	r2, #4
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fa4d 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fa3f 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fa50 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0208 	mvn.w	r2, #8
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fa23 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fa15 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fa26 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0210 	mvn.w	r2, #16
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f9f9 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f9eb 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f9fc 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0201 	mvn.w	r2, #1
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fce2 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 fe24 	bl	8002b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f9c1 	bl	80022ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0220 	mvn.w	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fdee 	bl	8002b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0ae      	b.n	8002118 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	f200 809f 	bhi.w	8002108 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08002005 	.word	0x08002005
 8001fd4:	08002109 	.word	0x08002109
 8001fd8:	08002109 	.word	0x08002109
 8001fdc:	08002109 	.word	0x08002109
 8001fe0:	08002045 	.word	0x08002045
 8001fe4:	08002109 	.word	0x08002109
 8001fe8:	08002109 	.word	0x08002109
 8001fec:	08002109 	.word	0x08002109
 8001ff0:	08002087 	.word	0x08002087
 8001ff4:	08002109 	.word	0x08002109
 8001ff8:	08002109 	.word	0x08002109
 8001ffc:	08002109 	.word	0x08002109
 8002000:	080020c7 	.word	0x080020c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f9f8 	bl	8002400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0208 	orr.w	r2, r2, #8
 800201e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6999      	ldr	r1, [r3, #24]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	619a      	str	r2, [r3, #24]
      break;
 8002042:	e064      	b.n	800210e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fa3e 	bl	80024cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6999      	ldr	r1, [r3, #24]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	021a      	lsls	r2, r3, #8
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	619a      	str	r2, [r3, #24]
      break;
 8002084:	e043      	b.n	800210e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fa89 	bl	80025a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0208 	orr.w	r2, r2, #8
 80020a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0204 	bic.w	r2, r2, #4
 80020b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69d9      	ldr	r1, [r3, #28]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	61da      	str	r2, [r3, #28]
      break;
 80020c4:	e023      	b.n	800210e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fad3 	bl	8002678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69d9      	ldr	r1, [r3, #28]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	021a      	lsls	r2, r3, #8
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	61da      	str	r2, [r3, #28]
      break;
 8002106:	e002      	b.n	800210e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	75fb      	strb	r3, [r7, #23]
      break;
 800210c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002116:	7dfb      	ldrb	r3, [r7, #23]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_TIM_ConfigClockSource+0x1c>
 8002138:	2302      	movs	r3, #2
 800213a:	e0b4      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x186>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800215a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002174:	d03e      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217a:	f200 8087 	bhi.w	800228c <HAL_TIM_ConfigClockSource+0x16c>
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	f000 8086 	beq.w	8002292 <HAL_TIM_ConfigClockSource+0x172>
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218a:	d87f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 800218c:	2b70      	cmp	r3, #112	; 0x70
 800218e:	d01a      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002190:	2b70      	cmp	r3, #112	; 0x70
 8002192:	d87b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 8002194:	2b60      	cmp	r3, #96	; 0x60
 8002196:	d050      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x11a>
 8002198:	2b60      	cmp	r3, #96	; 0x60
 800219a:	d877      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 800219c:	2b50      	cmp	r3, #80	; 0x50
 800219e:	d03c      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xfa>
 80021a0:	2b50      	cmp	r3, #80	; 0x50
 80021a2:	d873      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d058      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x13a>
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d86f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b30      	cmp	r3, #48	; 0x30
 80021ae:	d064      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021b0:	2b30      	cmp	r3, #48	; 0x30
 80021b2:	d86b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d060      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d867      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05c      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d05a      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021c4:	e062      	b.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f000 fb19 	bl	800280c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	609a      	str	r2, [r3, #8]
      break;
 80021f2:	e04f      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f000 fb02 	bl	800280c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002216:	609a      	str	r2, [r3, #8]
      break;
 8002218:	e03c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 fa76 	bl	8002718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2150      	movs	r1, #80	; 0x50
 8002232:	4618      	mov	r0, r3
 8002234:	f000 facf 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 8002238:	e02c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f000 fa95 	bl	8002776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2160      	movs	r1, #96	; 0x60
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fabf 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 8002258:	e01c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f000 fa56 	bl	8002718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2140      	movs	r1, #64	; 0x40
 8002272:	4618      	mov	r0, r3
 8002274:	f000 faaf 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 8002278:	e00c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f000 faa6 	bl	80027d6 <TIM_ITRx_SetConfig>
      break;
 800228a:	e003      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e000      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <TIM_Base_SetConfig+0xe4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00f      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d00b      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <TIM_Base_SetConfig+0xe8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d007      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a30      	ldr	r2, [pc, #192]	; (80023ec <TIM_Base_SetConfig+0xec>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d003      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <TIM_Base_SetConfig+0xf0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d108      	bne.n	800234a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <TIM_Base_SetConfig+0xe4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01b      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002358:	d017      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <TIM_Base_SetConfig+0xe8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a21      	ldr	r2, [pc, #132]	; (80023ec <TIM_Base_SetConfig+0xec>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00f      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <TIM_Base_SetConfig+0xf0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00b      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <TIM_Base_SetConfig+0xf4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <TIM_Base_SetConfig+0xf8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <TIM_Base_SetConfig+0xfc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d108      	bne.n	800239c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <TIM_Base_SetConfig+0xe4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d103      	bne.n	80023d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	615a      	str	r2, [r3, #20]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800
 80023f0:	40000c00 	.word	0x40000c00
 80023f4:	40014000 	.word	0x40014000
 80023f8:	40014400 	.word	0x40014400
 80023fc:	40014800 	.word	0x40014800

08002400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f023 0201 	bic.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f023 0302 	bic.w	r3, r3, #2
 8002448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <TIM_OC1_SetConfig+0xc8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10c      	bne.n	8002476 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f023 0308 	bic.w	r3, r3, #8
 8002462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <TIM_OC1_SetConfig+0xc8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d111      	bne.n	80024a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800248c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	621a      	str	r2, [r3, #32]
}
 80024bc:	bf00      	nop
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40010000 	.word	0x40010000

080024cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f023 0210 	bic.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 0320 	bic.w	r3, r3, #32
 8002516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1e      	ldr	r2, [pc, #120]	; (80025a0 <TIM_OC2_SetConfig+0xd4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d10d      	bne.n	8002548 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <TIM_OC2_SetConfig+0xd4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d113      	bne.n	8002578 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800255e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	621a      	str	r2, [r3, #32]
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000

080025a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1d      	ldr	r2, [pc, #116]	; (8002674 <TIM_OC3_SetConfig+0xd0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10d      	bne.n	800261e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800261c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <TIM_OC3_SetConfig+0xd0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d113      	bne.n	800264e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800262c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	621a      	str	r2, [r3, #32]
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40010000 	.word	0x40010000

08002678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	031b      	lsls	r3, r3, #12
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a10      	ldr	r2, [pc, #64]	; (8002714 <TIM_OC4_SetConfig+0x9c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d109      	bne.n	80026ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010000 	.word	0x40010000

08002718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f023 0201 	bic.w	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f023 030a 	bic.w	r3, r3, #10
 8002754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002776:	b480      	push	{r7}
 8002778:	b087      	sub	sp, #28
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f023 0210 	bic.w	r2, r3, #16
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	031b      	lsls	r3, r3, #12
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f043 0307 	orr.w	r3, r3, #7
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	609a      	str	r2, [r3, #8]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	021a      	lsls	r2, r3, #8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	431a      	orrs	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2201      	movs	r2, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	43db      	mvns	r3, r3
 800286e:	401a      	ands	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1a      	ldr	r2, [r3, #32]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_TIMEx_PWMN_Start+0x24>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e022      	b.n	8002902 <HAL_TIMEx_PWMN_Start+0x6a>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d109      	bne.n	80028d6 <HAL_TIMEx_PWMN_Start+0x3e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e015      	b.n	8002902 <HAL_TIMEx_PWMN_Start+0x6a>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d109      	bne.n	80028f0 <HAL_TIMEx_PWMN_Start+0x58>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e008      	b.n	8002902 <HAL_TIMEx_PWMN_Start+0x6a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e063      	b.n	80029d2 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <HAL_TIMEx_PWMN_Start+0x82>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	e013      	b.n	8002942 <HAL_TIMEx_PWMN_Start+0xaa>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d104      	bne.n	800292a <HAL_TIMEx_PWMN_Start+0x92>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002928:	e00b      	b.n	8002942 <HAL_TIMEx_PWMN_Start+0xaa>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d104      	bne.n	800293a <HAL_TIMEx_PWMN_Start+0xa2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002938:	e003      	b.n	8002942 <HAL_TIMEx_PWMN_Start+0xaa>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2204      	movs	r2, #4
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f924 	bl	8002b98 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800295e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_TIMEx_PWMN_Start+0x144>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d018      	beq.n	800299c <HAL_TIMEx_PWMN_Start+0x104>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d013      	beq.n	800299c <HAL_TIMEx_PWMN_Start+0x104>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a19      	ldr	r2, [pc, #100]	; (80029e0 <HAL_TIMEx_PWMN_Start+0x148>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_TIMEx_PWMN_Start+0x104>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <HAL_TIMEx_PWMN_Start+0x14c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_TIMEx_PWMN_Start+0x104>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_TIMEx_PWMN_Start+0x150>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_TIMEx_PWMN_Start+0x104>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <HAL_TIMEx_PWMN_Start+0x154>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d111      	bne.n	80029c0 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d010      	beq.n	80029d0 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	e007      	b.n	80029d0 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40014000 	.word	0x40014000

080029f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e050      	b.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d013      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10c      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40014000 	.word	0x40014000

08002acc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e03d      	b.n	8002b64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2204      	movs	r2, #4
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf4:	2b84      	cmp	r3, #132	; 0x84
 8002bf6:	d005      	beq.n	8002c04 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002bf8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3303      	adds	r3, #3
 8002c02:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c04:	68fb      	ldr	r3, [r7, #12]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c16:	f000 faf9 	bl	800320c <vTaskStartScheduler>
  
  return osOK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d020      	beq.n	8002c74 <osThreadCreate+0x54>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01c      	beq.n	8002c74 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685c      	ldr	r4, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681d      	ldr	r5, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691e      	ldr	r6, [r3, #16]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ffc8 	bl	8002be2 <makeFreeRtosPriority>
 8002c52:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c5c:	9202      	str	r2, [sp, #8]
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	9100      	str	r1, [sp, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4632      	mov	r2, r6
 8002c66:	4629      	mov	r1, r5
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 f8ed 	bl	8002e48 <xTaskCreateStatic>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e01c      	b.n	8002cae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685c      	ldr	r4, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c80:	b29e      	uxth	r6, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ffaa 	bl	8002be2 <makeFreeRtosPriority>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	9200      	str	r2, [sp, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4632      	mov	r2, r6
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f000 f92f 	bl	8002f02 <xTaskCreate>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <osDelay+0x16>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	e000      	b.n	8002cd0 <osDelay+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fa67 	bl	80031a4 <vTaskDelay>
  
  return osOK;
 8002cd6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f103 0208 	add.w	r2, r3, #8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f103 0208 	add.w	r2, r3, #8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f103 0208 	add.w	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d98:	d103      	bne.n	8002da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e00c      	b.n	8002dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3308      	adds	r3, #8
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e002      	b.n	8002db0 <vListInsert+0x2e>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d2f6      	bcs.n	8002daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6892      	ldr	r2, [r2, #8]
 8002e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d103      	bne.n	8002e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	1e5a      	subs	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xTaskCreateStatic+0x46>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	61fb      	str	r3, [r7, #28]
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e8e:	23b8      	movs	r3, #184	; 0xb8
 8002e90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2bb8      	cmp	r3, #184	; 0xb8
 8002e96:	d00a      	beq.n	8002eae <xTaskCreateStatic+0x66>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	61bb      	str	r3, [r7, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002eae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01e      	beq.n	8002ef4 <xTaskCreateStatic+0xac>
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9303      	str	r3, [sp, #12]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	9302      	str	r3, [sp, #8]
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f850 	bl	8002f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eee:	f000 f8ef 	bl	80030d0 <prvAddNewTaskToReadyList>
 8002ef2:	e001      	b.n	8002ef8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ef8:	697b      	ldr	r3, [r7, #20]
	}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b08c      	sub	sp, #48	; 0x30
 8002f06:	af04      	add	r7, sp, #16
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ff16 	bl	8003d48 <pvPortMalloc>
 8002f1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f24:	20b8      	movs	r0, #184	; 0xb8
 8002f26:	f000 ff0f 	bl	8003d48 <pvPortMalloc>
 8002f2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
 8002f38:	e005      	b.n	8002f46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f000 ffd0 	bl	8003ee0 <vPortFree>
 8002f40:	e001      	b.n	8002f46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d017      	beq.n	8002f7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9303      	str	r3, [sp, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	9302      	str	r3, [sp, #8]
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f80e 	bl	8002f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f70:	69f8      	ldr	r0, [r7, #28]
 8002f72:	f000 f8ad 	bl	80030d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e002      	b.n	8002f82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f82:	69bb      	ldr	r3, [r7, #24]
	}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f023 0307 	bic.w	r3, r3, #7
 8002fb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	617b      	str	r3, [r7, #20]
}
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01f      	beq.n	800301a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e012      	b.n	8003006 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	7819      	ldrb	r1, [r3, #0]
 8002fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	3334      	adds	r3, #52	; 0x34
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3301      	adds	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2b0f      	cmp	r3, #15
 800300a:	d9e9      	bls.n	8002fe0 <prvInitialiseNewTask+0x54>
 800300c:	e000      	b.n	8003010 <prvInitialiseNewTask+0x84>
			{
				break;
 800300e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003018:	e003      	b.n	8003022 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	2b06      	cmp	r3, #6
 8003026:	d901      	bls.n	800302c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003028:	2306      	movs	r3, #6
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	3304      	adds	r3, #4
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fe6c 	bl	8002d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	3318      	adds	r3, #24
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe67 	bl	8002d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	f1c3 0207 	rsb	r2, r3, #7
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003066:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	2200      	movs	r2, #0
 8003072:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	2200      	movs	r2, #0
 800307a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	3350      	adds	r3, #80	; 0x50
 8003082:	2260      	movs	r2, #96	; 0x60
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f001 f86e 	bl	8004168 <memset>
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <prvInitialiseNewTask+0x138>)
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <prvInitialiseNewTask+0x13c>)
 8003096:	659a      	str	r2, [r3, #88]	; 0x58
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <prvInitialiseNewTask+0x140>)
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	69b8      	ldr	r0, [r7, #24]
 80030a4:	f000 fc3e 	bl	8003924 <pxPortInitialiseStack>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	080043b0 	.word	0x080043b0
 80030c8:	080043d0 	.word	0x080043d0
 80030cc:	08004390 	.word	0x08004390

080030d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030d8:	f000 fd54 	bl	8003b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <prvAddNewTaskToReadyList+0xb8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a29      	ldr	r2, [pc, #164]	; (8003188 <prvAddNewTaskToReadyList+0xb8>)
 80030e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030e6:	4b29      	ldr	r3, [pc, #164]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <prvAddNewTaskToReadyList+0xb8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d110      	bne.n	800311e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030fc:	f000 faea 	bl	80036d4 <prvInitialiseTaskLists>
 8003100:	e00d      	b.n	800311e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003102:	4b23      	ldr	r3, [pc, #140]	; (8003190 <prvAddNewTaskToReadyList+0xc0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	429a      	cmp	r2, r3
 8003116:	d802      	bhi.n	800311e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003118:	4a1c      	ldr	r2, [pc, #112]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <prvAddNewTaskToReadyList+0xc4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3301      	adds	r3, #1
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <prvAddNewTaskToReadyList+0xc4>)
 8003126:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b19      	ldr	r3, [pc, #100]	; (8003198 <prvAddNewTaskToReadyList+0xc8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <prvAddNewTaskToReadyList+0xc8>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <prvAddNewTaskToReadyList+0xcc>)
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7ff fdf2 	bl	8002d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003156:	f000 fd45 	bl	8003be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <prvAddNewTaskToReadyList+0xc0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <prvAddNewTaskToReadyList+0xbc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <prvAddNewTaskToReadyList+0xd0>)
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000448 	.word	0x20000448
 800318c:	20000348 	.word	0x20000348
 8003190:	20000454 	.word	0x20000454
 8003194:	20000464 	.word	0x20000464
 8003198:	20000450 	.word	0x20000450
 800319c:	2000034c 	.word	0x2000034c
 80031a0:	e000ed04 	.word	0xe000ed04

080031a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <vTaskDelay+0x60>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <vTaskDelay+0x30>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	60bb      	str	r3, [r7, #8]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031d4:	f000 f886 	bl	80032e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031d8:	2100      	movs	r1, #0
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fb3c 	bl	8003858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031e0:	f000 f88e 	bl	8003300 <xTaskResumeAll>
 80031e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <vTaskDelay+0x64>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000470 	.word	0x20000470
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800321a:	463a      	mov	r2, r7
 800321c:	1d39      	adds	r1, r7, #4
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd f968 	bl	80004f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	9202      	str	r2, [sp, #8]
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	460a      	mov	r2, r1
 800323a:	4922      	ldr	r1, [pc, #136]	; (80032c4 <vTaskStartScheduler+0xb8>)
 800323c:	4822      	ldr	r0, [pc, #136]	; (80032c8 <vTaskStartScheduler+0xbc>)
 800323e:	f7ff fe03 	bl	8002e48 <xTaskCreateStatic>
 8003242:	4603      	mov	r3, r0
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <vTaskStartScheduler+0xc0>)
 8003246:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <vTaskStartScheduler+0xc0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e001      	b.n	800325a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d11d      	bne.n	800329c <vTaskStartScheduler+0x90>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	613b      	str	r3, [r7, #16]
}
 8003272:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <vTaskStartScheduler+0xc4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3350      	adds	r3, #80	; 0x50
 800327a:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <vTaskStartScheduler+0xc8>)
 800327c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <vTaskStartScheduler+0xcc>)
 8003280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003284:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <vTaskStartScheduler+0xd0>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <vTaskStartScheduler+0xd4>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003292:	f7fd f921 	bl	80004d8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003296:	f000 fbd3 	bl	8003a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800329a:	e00e      	b.n	80032ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a2:	d10a      	bne.n	80032ba <vTaskStartScheduler+0xae>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	60fb      	str	r3, [r7, #12]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <vTaskStartScheduler+0xac>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	08004370 	.word	0x08004370
 80032c8:	080036a5 	.word	0x080036a5
 80032cc:	2000046c 	.word	0x2000046c
 80032d0:	20000348 	.word	0x20000348
 80032d4:	20000010 	.word	0x20000010
 80032d8:	20000468 	.word	0x20000468
 80032dc:	20000454 	.word	0x20000454
 80032e0:	2000044c 	.word	0x2000044c

080032e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <vTaskSuspendAll+0x18>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	4a03      	ldr	r2, [pc, #12]	; (80032fc <vTaskSuspendAll+0x18>)
 80032f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20000470 	.word	0x20000470

08003300 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <xTaskResumeAll+0x114>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <xTaskResumeAll+0x2c>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	603b      	str	r3, [r7, #0]
}
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800332c:	f000 fc2a 	bl	8003b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003330:	4b38      	ldr	r3, [pc, #224]	; (8003414 <xTaskResumeAll+0x114>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3b01      	subs	r3, #1
 8003336:	4a37      	ldr	r2, [pc, #220]	; (8003414 <xTaskResumeAll+0x114>)
 8003338:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <xTaskResumeAll+0x114>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d161      	bne.n	8003406 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003342:	4b35      	ldr	r3, [pc, #212]	; (8003418 <xTaskResumeAll+0x118>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d05d      	beq.n	8003406 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800334a:	e02e      	b.n	80033aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800334c:	4b33      	ldr	r3, [pc, #204]	; (800341c <xTaskResumeAll+0x11c>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3318      	adds	r3, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fd4b 	bl	8002df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3304      	adds	r3, #4
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fd46 	bl	8002df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <xTaskResumeAll+0x120>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <xTaskResumeAll+0x120>)
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4a27      	ldr	r2, [pc, #156]	; (8003424 <xTaskResumeAll+0x124>)
 8003388:	441a      	add	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7ff fcd2 	bl	8002d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339a:	4b23      	ldr	r3, [pc, #140]	; (8003428 <xTaskResumeAll+0x128>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d302      	bcc.n	80033aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <xTaskResumeAll+0x12c>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <xTaskResumeAll+0x11c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1cc      	bne.n	800334c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033b8:	f000 fa2e 	bl	8003818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033bc:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <xTaskResumeAll+0x130>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d010      	beq.n	80033ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033c8:	f000 f836 	bl	8003438 <xTaskIncrementTick>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80033d2:	4b16      	ldr	r3, [pc, #88]	; (800342c <xTaskResumeAll+0x12c>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f1      	bne.n	80033c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <xTaskResumeAll+0x130>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <xTaskResumeAll+0x12c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <xTaskResumeAll+0x134>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003406:	f000 fbed 	bl	8003be4 <vPortExitCritical>

	return xAlreadyYielded;
 800340a:	68bb      	ldr	r3, [r7, #8]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000470 	.word	0x20000470
 8003418:	20000448 	.word	0x20000448
 800341c:	20000408 	.word	0x20000408
 8003420:	20000450 	.word	0x20000450
 8003424:	2000034c 	.word	0x2000034c
 8003428:	20000348 	.word	0x20000348
 800342c:	2000045c 	.word	0x2000045c
 8003430:	20000458 	.word	0x20000458
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003442:	4b4e      	ldr	r3, [pc, #312]	; (800357c <xTaskIncrementTick+0x144>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 808e 	bne.w	8003568 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800344c:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <xTaskIncrementTick+0x148>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003454:	4a4a      	ldr	r2, [pc, #296]	; (8003580 <xTaskIncrementTick+0x148>)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d120      	bne.n	80034a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <xTaskIncrementTick+0x14c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <xTaskIncrementTick+0x48>
	__asm volatile
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	603b      	str	r3, [r7, #0]
}
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <xTaskIncrementTick+0x46>
 8003480:	4b40      	ldr	r3, [pc, #256]	; (8003584 <xTaskIncrementTick+0x14c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b40      	ldr	r3, [pc, #256]	; (8003588 <xTaskIncrementTick+0x150>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3e      	ldr	r2, [pc, #248]	; (8003584 <xTaskIncrementTick+0x14c>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4a3e      	ldr	r2, [pc, #248]	; (8003588 <xTaskIncrementTick+0x150>)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b3d      	ldr	r3, [pc, #244]	; (800358c <xTaskIncrementTick+0x154>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	4a3c      	ldr	r2, [pc, #240]	; (800358c <xTaskIncrementTick+0x154>)
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	f000 f9bb 	bl	8003818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <xTaskIncrementTick+0x158>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d348      	bcc.n	800353e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034ac:	4b35      	ldr	r3, [pc, #212]	; (8003584 <xTaskIncrementTick+0x14c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d104      	bne.n	80034c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <xTaskIncrementTick+0x158>)
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034bc:	601a      	str	r2, [r3, #0]
					break;
 80034be:	e03e      	b.n	800353e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <xTaskIncrementTick+0x14c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d203      	bcs.n	80034e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034d8:	4a2d      	ldr	r2, [pc, #180]	; (8003590 <xTaskIncrementTick+0x158>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034de:	e02e      	b.n	800353e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fc85 	bl	8002df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3318      	adds	r3, #24
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fc7c 	bl	8002df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2201      	movs	r2, #1
 8003502:	409a      	lsls	r2, r3
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <xTaskIncrementTick+0x15c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4313      	orrs	r3, r2
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <xTaskIncrementTick+0x15c>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <xTaskIncrementTick+0x160>)
 800351c:	441a      	add	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3304      	adds	r3, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f7ff fc08 	bl	8002d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <xTaskIncrementTick+0x164>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	429a      	cmp	r2, r3
 8003536:	d3b9      	bcc.n	80034ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353c:	e7b6      	b.n	80034ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <xTaskIncrementTick+0x164>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	4914      	ldr	r1, [pc, #80]	; (8003598 <xTaskIncrementTick+0x160>)
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d901      	bls.n	800355a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003556:	2301      	movs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <xTaskIncrementTick+0x168>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003562:	2301      	movs	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e004      	b.n	8003572 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <xTaskIncrementTick+0x16c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <xTaskIncrementTick+0x16c>)
 8003570:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003572:	697b      	ldr	r3, [r7, #20]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000470 	.word	0x20000470
 8003580:	2000044c 	.word	0x2000044c
 8003584:	20000400 	.word	0x20000400
 8003588:	20000404 	.word	0x20000404
 800358c:	20000460 	.word	0x20000460
 8003590:	20000468 	.word	0x20000468
 8003594:	20000450 	.word	0x20000450
 8003598:	2000034c 	.word	0x2000034c
 800359c:	20000348 	.word	0x20000348
 80035a0:	2000045c 	.word	0x2000045c
 80035a4:	20000458 	.word	0x20000458

080035a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035ae:	4b35      	ldr	r3, [pc, #212]	; (8003684 <vTaskSwitchContext+0xdc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035b6:	4b34      	ldr	r3, [pc, #208]	; (8003688 <vTaskSwitchContext+0xe0>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035bc:	e05d      	b.n	800367a <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 80035be:	4b32      	ldr	r3, [pc, #200]	; (8003688 <vTaskSwitchContext+0xe0>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80035c4:	f7fc ff8f 	bl	80004e6 <getRunTimeCounterValue>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4a30      	ldr	r2, [pc, #192]	; (800368c <vTaskSwitchContext+0xe4>)
 80035cc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <vTaskSwitchContext+0xe4>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <vTaskSwitchContext+0xe8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d909      	bls.n	80035ee <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80035da:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <vTaskSwitchContext+0xec>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80035e0:	4a2a      	ldr	r2, [pc, #168]	; (800368c <vTaskSwitchContext+0xe4>)
 80035e2:	6810      	ldr	r0, [r2, #0]
 80035e4:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <vTaskSwitchContext+0xe8>)
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	1a82      	subs	r2, r0, r2
 80035ea:	440a      	add	r2, r1
 80035ec:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 80035ee:	4b27      	ldr	r3, [pc, #156]	; (800368c <vTaskSwitchContext+0xe4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a27      	ldr	r2, [pc, #156]	; (8003690 <vTaskSwitchContext+0xe8>)
 80035f4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f6:	4b28      	ldr	r3, [pc, #160]	; (8003698 <vTaskSwitchContext+0xf0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	f1c3 031f 	rsb	r3, r3, #31
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	4923      	ldr	r1, [pc, #140]	; (800369c <vTaskSwitchContext+0xf4>)
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <vTaskSwitchContext+0x8e>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	607b      	str	r3, [r7, #4]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <vTaskSwitchContext+0x8c>
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4a16      	ldr	r2, [pc, #88]	; (800369c <vTaskSwitchContext+0xf4>)
 8003642:	4413      	add	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3308      	adds	r3, #8
 8003658:	429a      	cmp	r2, r3
 800365a:	d104      	bne.n	8003666 <vTaskSwitchContext+0xbe>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a09      	ldr	r2, [pc, #36]	; (8003694 <vTaskSwitchContext+0xec>)
 800366e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <vTaskSwitchContext+0xec>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3350      	adds	r3, #80	; 0x50
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <vTaskSwitchContext+0xf8>)
 8003678:	6013      	str	r3, [r2, #0]
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000470 	.word	0x20000470
 8003688:	2000045c 	.word	0x2000045c
 800368c:	20000478 	.word	0x20000478
 8003690:	20000474 	.word	0x20000474
 8003694:	20000348 	.word	0x20000348
 8003698:	20000450 	.word	0x20000450
 800369c:	2000034c 	.word	0x2000034c
 80036a0:	20000010 	.word	0x20000010

080036a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036ac:	f000 f852 	bl	8003754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <prvIdleTask+0x28>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d9f9      	bls.n	80036ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <prvIdleTask+0x2c>)
 80036ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036c8:	e7f0      	b.n	80036ac <prvIdleTask+0x8>
 80036ca:	bf00      	nop
 80036cc:	2000034c 	.word	0x2000034c
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	e00c      	b.n	80036fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <prvInitialiseTaskLists+0x60>)
 80036ec:	4413      	add	r3, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff faf6 	bl	8002ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3301      	adds	r3, #1
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d9ef      	bls.n	80036e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003700:	480d      	ldr	r0, [pc, #52]	; (8003738 <prvInitialiseTaskLists+0x64>)
 8003702:	f7ff faed 	bl	8002ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003706:	480d      	ldr	r0, [pc, #52]	; (800373c <prvInitialiseTaskLists+0x68>)
 8003708:	f7ff faea 	bl	8002ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800370c:	480c      	ldr	r0, [pc, #48]	; (8003740 <prvInitialiseTaskLists+0x6c>)
 800370e:	f7ff fae7 	bl	8002ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <prvInitialiseTaskLists+0x70>)
 8003714:	f7ff fae4 	bl	8002ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003718:	480b      	ldr	r0, [pc, #44]	; (8003748 <prvInitialiseTaskLists+0x74>)
 800371a:	f7ff fae1 	bl	8002ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <prvInitialiseTaskLists+0x78>)
 8003720:	4a05      	ldr	r2, [pc, #20]	; (8003738 <prvInitialiseTaskLists+0x64>)
 8003722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003724:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <prvInitialiseTaskLists+0x7c>)
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <prvInitialiseTaskLists+0x68>)
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000034c 	.word	0x2000034c
 8003738:	200003d8 	.word	0x200003d8
 800373c:	200003ec 	.word	0x200003ec
 8003740:	20000408 	.word	0x20000408
 8003744:	2000041c 	.word	0x2000041c
 8003748:	20000434 	.word	0x20000434
 800374c:	20000400 	.word	0x20000400
 8003750:	20000404 	.word	0x20000404

08003754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800375a:	e019      	b.n	8003790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800375c:	f000 fa12 	bl	8003b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003760:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <prvCheckTasksWaitingTermination+0x50>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fb41 	bl	8002df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <prvCheckTasksWaitingTermination+0x54>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3b01      	subs	r3, #1
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <prvCheckTasksWaitingTermination+0x54>)
 800377a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <prvCheckTasksWaitingTermination+0x58>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <prvCheckTasksWaitingTermination+0x58>)
 8003784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003786:	f000 fa2d 	bl	8003be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f810 	bl	80037b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <prvCheckTasksWaitingTermination+0x58>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e1      	bne.n	800375c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000041c 	.word	0x2000041c
 80037a8:	20000448 	.word	0x20000448
 80037ac:	20000430 	.word	0x20000430

080037b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3350      	adds	r3, #80	; 0x50
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fce9 	bl	8004194 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d108      	bne.n	80037de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fb85 	bl	8003ee0 <vPortFree>
				vPortFree( pxTCB );
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fb82 	bl	8003ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037dc:	e018      	b.n	8003810 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d103      	bne.n	80037f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fb79 	bl	8003ee0 <vPortFree>
	}
 80037ee:	e00f      	b.n	8003810 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d00a      	beq.n	8003810 <prvDeleteTCB+0x60>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60fb      	str	r3, [r7, #12]
}
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <prvDeleteTCB+0x5e>
	}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <prvResetNextTaskUnblockTime+0x38>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <prvResetNextTaskUnblockTime+0x3c>)
 800382a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800382e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003830:	e008      	b.n	8003844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <prvResetNextTaskUnblockTime+0x38>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <prvResetNextTaskUnblockTime+0x3c>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	20000400 	.word	0x20000400
 8003854:	20000468 	.word	0x20000468

08003858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003862:	4b29      	ldr	r3, [pc, #164]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003868:	4b28      	ldr	r3, [pc, #160]	; (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fac0 	bl	8002df4 <uxListRemove>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800387a:	4b24      	ldr	r3, [pc, #144]	; (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <prvAddCurrentTaskToDelayedList+0xb8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4013      	ands	r3, r2
 800388e:	4a20      	ldr	r2, [pc, #128]	; (8003910 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003890:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003898:	d10a      	bne.n	80038b0 <prvAddCurrentTaskToDelayedList+0x58>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	481a      	ldr	r0, [pc, #104]	; (8003914 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038aa:	f7ff fa46 	bl	8002d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038ae:	e026      	b.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d209      	bcs.n	80038dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7ff fa54 	bl	8002d82 <vListInsert>
}
 80038da:	e010      	b.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <prvAddCurrentTaskToDelayedList+0xc4>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <prvAddCurrentTaskToDelayedList+0xb4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7ff fa4a 	bl	8002d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d202      	bcs.n	80038fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038f8:	4a09      	ldr	r2, [pc, #36]	; (8003920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000044c 	.word	0x2000044c
 800390c:	20000348 	.word	0x20000348
 8003910:	20000450 	.word	0x20000450
 8003914:	20000434 	.word	0x20000434
 8003918:	20000404 	.word	0x20000404
 800391c:	20000400 	.word	0x20000400
 8003920:	20000468 	.word	0x20000468

08003924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b04      	subs	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800393c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b04      	subs	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b04      	subs	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003954:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <pxPortInitialiseStack+0x64>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3b14      	subs	r3, #20
 800395e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b04      	subs	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f06f 0202 	mvn.w	r2, #2
 8003972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3b20      	subs	r3, #32
 8003978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800397a:	68fb      	ldr	r3, [r7, #12]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	0800398d 	.word	0x0800398d

0800398c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <prvTaskExitError+0x54>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399e:	d00a      	beq.n	80039b6 <prvTaskExitError+0x2a>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <prvTaskExitError+0x28>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	60bb      	str	r3, [r7, #8]
}
 80039c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039ca:	bf00      	nop
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0fc      	beq.n	80039cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	2000000c 	.word	0x2000000c
	...

080039f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <pxCurrentTCBConst2>)
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	6808      	ldr	r0, [r1, #0]
 80039f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fa:	f380 8809 	msr	PSP, r0
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f380 8811 	msr	BASEPRI, r0
 8003a0a:	4770      	bx	lr
 8003a0c:	f3af 8000 	nop.w

08003a10 <pxCurrentTCBConst2>:
 8003a10:	20000348 	.word	0x20000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop

08003a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a18:	4808      	ldr	r0, [pc, #32]	; (8003a3c <prvPortStartFirstTask+0x24>)
 8003a1a:	6800      	ldr	r0, [r0, #0]
 8003a1c:	6800      	ldr	r0, [r0, #0]
 8003a1e:	f380 8808 	msr	MSP, r0
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	f380 8814 	msr	CONTROL, r0
 8003a2a:	b662      	cpsie	i
 8003a2c:	b661      	cpsie	f
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	df00      	svc	0
 8003a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a3a:	bf00      	nop
 8003a3c:	e000ed08 	.word	0xe000ed08

08003a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a46:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <xPortStartScheduler+0x120>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a46      	ldr	r2, [pc, #280]	; (8003b64 <xPortStartScheduler+0x124>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10a      	bne.n	8003a66 <xPortStartScheduler+0x26>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	613b      	str	r3, [r7, #16]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a66:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <xPortStartScheduler+0x120>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3f      	ldr	r2, [pc, #252]	; (8003b68 <xPortStartScheduler+0x128>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10a      	bne.n	8003a86 <xPortStartScheduler+0x46>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	60fb      	str	r3, [r7, #12]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a86:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <xPortStartScheduler+0x12c>)
 8003a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	22ff      	movs	r2, #255	; 0xff
 8003a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <xPortStartScheduler+0x130>)
 8003aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <xPortStartScheduler+0x134>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ab4:	e009      	b.n	8003aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ab6:	4b2f      	ldr	r3, [pc, #188]	; (8003b74 <xPortStartScheduler+0x134>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <xPortStartScheduler+0x134>)
 8003abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d0ef      	beq.n	8003ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <xPortStartScheduler+0x134>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d00a      	beq.n	8003af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	60bb      	str	r3, [r7, #8]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003af8:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <xPortStartScheduler+0x134>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <xPortStartScheduler+0x134>)
 8003b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <xPortStartScheduler+0x134>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <xPortStartScheduler+0x134>)
 8003b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <xPortStartScheduler+0x138>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <xPortStartScheduler+0x138>)
 8003b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <xPortStartScheduler+0x138>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <xPortStartScheduler+0x138>)
 8003b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b2e:	f000 f8dd 	bl	8003cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <xPortStartScheduler+0x13c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b38:	f000 f8fc 	bl	8003d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <xPortStartScheduler+0x140>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <xPortStartScheduler+0x140>)
 8003b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b48:	f7ff ff66 	bl	8003a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b4c:	f7ff fd2c 	bl	80035a8 <vTaskSwitchContext>
	prvTaskExitError();
 8003b50:	f7ff ff1c 	bl	800398c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000ed00 	.word	0xe000ed00
 8003b64:	410fc271 	.word	0x410fc271
 8003b68:	410fc270 	.word	0x410fc270
 8003b6c:	e000e400 	.word	0xe000e400
 8003b70:	2000047c 	.word	0x2000047c
 8003b74:	20000480 	.word	0x20000480
 8003b78:	e000ed20 	.word	0xe000ed20
 8003b7c:	2000000c 	.word	0x2000000c
 8003b80:	e000ef34 	.word	0xe000ef34

08003b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	607b      	str	r3, [r7, #4]
}
 8003b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <vPortEnterCritical+0x58>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <vPortEnterCritical+0x58>)
 8003ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <vPortEnterCritical+0x58>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d10f      	bne.n	8003bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <vPortEnterCritical+0x5c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	603b      	str	r3, [r7, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <vPortEnterCritical+0x4a>
	}
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	2000000c 	.word	0x2000000c
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <vPortExitCritical+0x50>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <vPortExitCritical+0x24>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	607b      	str	r3, [r7, #4]
}
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <vPortExitCritical+0x50>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <vPortExitCritical+0x50>)
 8003c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <vPortExitCritical+0x50>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <vPortExitCritical+0x42>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	2000000c 	.word	0x2000000c
	...

08003c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c40:	f3ef 8009 	mrs	r0, PSP
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <pxCurrentTCBConst>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f01e 0f10 	tst.w	lr, #16
 8003c50:	bf08      	it	eq
 8003c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5a:	6010      	str	r0, [r2, #0]
 8003c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c64:	f380 8811 	msr	BASEPRI, r0
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f7ff fc9a 	bl	80035a8 <vTaskSwitchContext>
 8003c74:	f04f 0000 	mov.w	r0, #0
 8003c78:	f380 8811 	msr	BASEPRI, r0
 8003c7c:	bc09      	pop	{r0, r3}
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	6808      	ldr	r0, [r1, #0]
 8003c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c86:	f01e 0f10 	tst.w	lr, #16
 8003c8a:	bf08      	it	eq
 8003c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c90:	f380 8809 	msr	PSP, r0
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	f3af 8000 	nop.w

08003ca0 <pxCurrentTCBConst>:
 8003ca0:	20000348 	.word	0x20000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop

08003ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	607b      	str	r3, [r7, #4]
}
 8003cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cc2:	f7ff fbb9 	bl	8003438 <xTaskIncrementTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <SysTick_Handler+0x40>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f383 8811 	msr	BASEPRI, r3
}
 8003cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <vPortSetupTimerInterrupt+0x38>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <vPortSetupTimerInterrupt+0x3c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <vPortSetupTimerInterrupt+0x40>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <vPortSetupTimerInterrupt+0x44>)
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000e010 	.word	0xe000e010
 8003d24:	e000e018 	.word	0xe000e018
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	10624dd3 	.word	0x10624dd3
 8003d30:	e000e014 	.word	0xe000e014

08003d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d44 <vPortEnableVFP+0x10>
 8003d38:	6801      	ldr	r1, [r0, #0]
 8003d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d3e:	6001      	str	r1, [r0, #0]
 8003d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d42:	bf00      	nop
 8003d44:	e000ed88 	.word	0xe000ed88

08003d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d54:	f7ff fac6 	bl	80032e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d58:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <pvPortMalloc+0x180>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d60:	f000 f920 	bl	8003fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <pvPortMalloc+0x184>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 8093 	bne.w	8003e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01d      	beq.n	8003db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d78:	2208      	movs	r2, #8
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	3308      	adds	r3, #8
 8003d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <pvPortMalloc+0x6c>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	617b      	str	r3, [r7, #20]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d06e      	beq.n	8003e98 <pvPortMalloc+0x150>
 8003dba:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <pvPortMalloc+0x188>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d869      	bhi.n	8003e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <pvPortMalloc+0x18c>)
 8003dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003dc8:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <pvPortMalloc+0x18c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dce:	e004      	b.n	8003dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d903      	bls.n	8003dec <pvPortMalloc+0xa4>
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f1      	bne.n	8003dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <pvPortMalloc+0x180>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d050      	beq.n	8003e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	4413      	add	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	1ad2      	subs	r2, r2, r3
 8003e10:	2308      	movs	r3, #8
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d91f      	bls.n	8003e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <pvPortMalloc+0xf8>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	613b      	str	r3, [r7, #16]
}
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	1ad2      	subs	r2, r2, r3
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e52:	69b8      	ldr	r0, [r7, #24]
 8003e54:	f000 f908 	bl	8004068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <pvPortMalloc+0x188>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <pvPortMalloc+0x188>)
 8003e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <pvPortMalloc+0x188>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <pvPortMalloc+0x190>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d203      	bcs.n	8003e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e72:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <pvPortMalloc+0x188>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <pvPortMalloc+0x190>)
 8003e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <pvPortMalloc+0x184>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <pvPortMalloc+0x194>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	4a11      	ldr	r2, [pc, #68]	; (8003edc <pvPortMalloc+0x194>)
 8003e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e98:	f7ff fa32 	bl	8003300 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <pvPortMalloc+0x174>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	60fb      	str	r3, [r7, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <pvPortMalloc+0x172>
	return pvReturn;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3728      	adds	r7, #40	; 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000408c 	.word	0x2000408c
 8003ecc:	200040a0 	.word	0x200040a0
 8003ed0:	20004090 	.word	0x20004090
 8003ed4:	20004084 	.word	0x20004084
 8003ed8:	20004094 	.word	0x20004094
 8003edc:	20004098 	.word	0x20004098

08003ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d04d      	beq.n	8003f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4413      	add	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <vPortFree+0xb8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <vPortFree+0x44>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	60fb      	str	r3, [r7, #12]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <vPortFree+0x62>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	60bb      	str	r3, [r7, #8]
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <vPortFree+0xb8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01e      	beq.n	8003f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11a      	bne.n	8003f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <vPortFree+0xb8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f68:	f7ff f9bc 	bl	80032e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <vPortFree+0xbc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <vPortFree+0xbc>)
 8003f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f7a:	6938      	ldr	r0, [r7, #16]
 8003f7c:	f000 f874 	bl	8004068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <vPortFree+0xc0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	4a06      	ldr	r2, [pc, #24]	; (8003fa0 <vPortFree+0xc0>)
 8003f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f8a:	f7ff f9b9 	bl	8003300 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200040a0 	.word	0x200040a0
 8003f9c:	20004090 	.word	0x20004090
 8003fa0:	2000409c 	.word	0x2000409c

08003fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <prvHeapInit+0xac>)
 8003fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3307      	adds	r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0307 	bic.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <prvHeapInit+0xac>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <prvHeapInit+0xb0>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <prvHeapInit+0xb0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4413      	add	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0307 	bic.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a15      	ldr	r2, [pc, #84]	; (8004058 <prvHeapInit+0xb4>)
 8004004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <prvHeapInit+0xb4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <prvHeapInit+0xb4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <prvHeapInit+0xb4>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4a0a      	ldr	r2, [pc, #40]	; (800405c <prvHeapInit+0xb8>)
 8004032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a09      	ldr	r2, [pc, #36]	; (8004060 <prvHeapInit+0xbc>)
 800403a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <prvHeapInit+0xc0>)
 800403e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	20000484 	.word	0x20000484
 8004054:	20004084 	.word	0x20004084
 8004058:	2000408c 	.word	0x2000408c
 800405c:	20004094 	.word	0x20004094
 8004060:	20004090 	.word	0x20004090
 8004064:	200040a0 	.word	0x200040a0

08004068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004070:	4b28      	ldr	r3, [pc, #160]	; (8004114 <prvInsertBlockIntoFreeList+0xac>)
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e002      	b.n	800407c <prvInsertBlockIntoFreeList+0x14>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d8f7      	bhi.n	8004076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4413      	add	r3, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	d108      	bne.n	80040aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	441a      	add	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	441a      	add	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d118      	bne.n	80040f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <prvInsertBlockIntoFreeList+0xb0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d00d      	beq.n	80040e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e008      	b.n	80040f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <prvInsertBlockIntoFreeList+0xb0>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e003      	b.n	80040f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d002      	beq.n	8004106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20004084 	.word	0x20004084
 8004118:	2000408c 	.word	0x2000408c

0800411c <__libc_init_array>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	4d0d      	ldr	r5, [pc, #52]	; (8004154 <__libc_init_array+0x38>)
 8004120:	4c0d      	ldr	r4, [pc, #52]	; (8004158 <__libc_init_array+0x3c>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	2600      	movs	r6, #0
 8004128:	42a6      	cmp	r6, r4
 800412a:	d109      	bne.n	8004140 <__libc_init_array+0x24>
 800412c:	4d0b      	ldr	r5, [pc, #44]	; (800415c <__libc_init_array+0x40>)
 800412e:	4c0c      	ldr	r4, [pc, #48]	; (8004160 <__libc_init_array+0x44>)
 8004130:	f000 f8e8 	bl	8004304 <_init>
 8004134:	1b64      	subs	r4, r4, r5
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	2600      	movs	r6, #0
 800413a:	42a6      	cmp	r6, r4
 800413c:	d105      	bne.n	800414a <__libc_init_array+0x2e>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	f855 3b04 	ldr.w	r3, [r5], #4
 8004144:	4798      	blx	r3
 8004146:	3601      	adds	r6, #1
 8004148:	e7ee      	b.n	8004128 <__libc_init_array+0xc>
 800414a:	f855 3b04 	ldr.w	r3, [r5], #4
 800414e:	4798      	blx	r3
 8004150:	3601      	adds	r6, #1
 8004152:	e7f2      	b.n	800413a <__libc_init_array+0x1e>
 8004154:	080043f8 	.word	0x080043f8
 8004158:	080043f8 	.word	0x080043f8
 800415c:	080043f8 	.word	0x080043f8
 8004160:	080043fc 	.word	0x080043fc

08004164 <__retarget_lock_acquire_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_release_recursive>:
 8004166:	4770      	bx	lr

08004168 <memset>:
 8004168:	4402      	add	r2, r0
 800416a:	4603      	mov	r3, r0
 800416c:	4293      	cmp	r3, r2
 800416e:	d100      	bne.n	8004172 <memset+0xa>
 8004170:	4770      	bx	lr
 8004172:	f803 1b01 	strb.w	r1, [r3], #1
 8004176:	e7f9      	b.n	800416c <memset+0x4>

08004178 <cleanup_glue>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	460c      	mov	r4, r1
 800417c:	6809      	ldr	r1, [r1, #0]
 800417e:	4605      	mov	r5, r0
 8004180:	b109      	cbz	r1, 8004186 <cleanup_glue+0xe>
 8004182:	f7ff fff9 	bl	8004178 <cleanup_glue>
 8004186:	4621      	mov	r1, r4
 8004188:	4628      	mov	r0, r5
 800418a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800418e:	f000 b869 	b.w	8004264 <_free_r>
	...

08004194 <_reclaim_reent>:
 8004194:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <_reclaim_reent+0xb4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4283      	cmp	r3, r0
 800419a:	b570      	push	{r4, r5, r6, lr}
 800419c:	4604      	mov	r4, r0
 800419e:	d051      	beq.n	8004244 <_reclaim_reent+0xb0>
 80041a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041a2:	b143      	cbz	r3, 80041b6 <_reclaim_reent+0x22>
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d14a      	bne.n	8004240 <_reclaim_reent+0xac>
 80041aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	b111      	cbz	r1, 80041b6 <_reclaim_reent+0x22>
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 f857 	bl	8004264 <_free_r>
 80041b6:	6961      	ldr	r1, [r4, #20]
 80041b8:	b111      	cbz	r1, 80041c0 <_reclaim_reent+0x2c>
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 f852 	bl	8004264 <_free_r>
 80041c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80041c2:	b111      	cbz	r1, 80041ca <_reclaim_reent+0x36>
 80041c4:	4620      	mov	r0, r4
 80041c6:	f000 f84d 	bl	8004264 <_free_r>
 80041ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041cc:	b111      	cbz	r1, 80041d4 <_reclaim_reent+0x40>
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 f848 	bl	8004264 <_free_r>
 80041d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80041d6:	b111      	cbz	r1, 80041de <_reclaim_reent+0x4a>
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 f843 	bl	8004264 <_free_r>
 80041de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80041e0:	b111      	cbz	r1, 80041e8 <_reclaim_reent+0x54>
 80041e2:	4620      	mov	r0, r4
 80041e4:	f000 f83e 	bl	8004264 <_free_r>
 80041e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80041ea:	b111      	cbz	r1, 80041f2 <_reclaim_reent+0x5e>
 80041ec:	4620      	mov	r0, r4
 80041ee:	f000 f839 	bl	8004264 <_free_r>
 80041f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80041f4:	b111      	cbz	r1, 80041fc <_reclaim_reent+0x68>
 80041f6:	4620      	mov	r0, r4
 80041f8:	f000 f834 	bl	8004264 <_free_r>
 80041fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041fe:	b111      	cbz	r1, 8004206 <_reclaim_reent+0x72>
 8004200:	4620      	mov	r0, r4
 8004202:	f000 f82f 	bl	8004264 <_free_r>
 8004206:	69a3      	ldr	r3, [r4, #24]
 8004208:	b1e3      	cbz	r3, 8004244 <_reclaim_reent+0xb0>
 800420a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800420c:	4620      	mov	r0, r4
 800420e:	4798      	blx	r3
 8004210:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004212:	b1b9      	cbz	r1, 8004244 <_reclaim_reent+0xb0>
 8004214:	4620      	mov	r0, r4
 8004216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800421a:	f7ff bfad 	b.w	8004178 <cleanup_glue>
 800421e:	5949      	ldr	r1, [r1, r5]
 8004220:	b941      	cbnz	r1, 8004234 <_reclaim_reent+0xa0>
 8004222:	3504      	adds	r5, #4
 8004224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004226:	2d80      	cmp	r5, #128	; 0x80
 8004228:	68d9      	ldr	r1, [r3, #12]
 800422a:	d1f8      	bne.n	800421e <_reclaim_reent+0x8a>
 800422c:	4620      	mov	r0, r4
 800422e:	f000 f819 	bl	8004264 <_free_r>
 8004232:	e7ba      	b.n	80041aa <_reclaim_reent+0x16>
 8004234:	680e      	ldr	r6, [r1, #0]
 8004236:	4620      	mov	r0, r4
 8004238:	f000 f814 	bl	8004264 <_free_r>
 800423c:	4631      	mov	r1, r6
 800423e:	e7ef      	b.n	8004220 <_reclaim_reent+0x8c>
 8004240:	2500      	movs	r5, #0
 8004242:	e7ef      	b.n	8004224 <_reclaim_reent+0x90>
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	bf00      	nop
 8004248:	20000010 	.word	0x20000010

0800424c <__malloc_lock>:
 800424c:	4801      	ldr	r0, [pc, #4]	; (8004254 <__malloc_lock+0x8>)
 800424e:	f7ff bf89 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8004252:	bf00      	nop
 8004254:	20004148 	.word	0x20004148

08004258 <__malloc_unlock>:
 8004258:	4801      	ldr	r0, [pc, #4]	; (8004260 <__malloc_unlock+0x8>)
 800425a:	f7ff bf84 	b.w	8004166 <__retarget_lock_release_recursive>
 800425e:	bf00      	nop
 8004260:	20004148 	.word	0x20004148

08004264 <_free_r>:
 8004264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004266:	2900      	cmp	r1, #0
 8004268:	d048      	beq.n	80042fc <_free_r+0x98>
 800426a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800426e:	9001      	str	r0, [sp, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f1a1 0404 	sub.w	r4, r1, #4
 8004276:	bfb8      	it	lt
 8004278:	18e4      	addlt	r4, r4, r3
 800427a:	f7ff ffe7 	bl	800424c <__malloc_lock>
 800427e:	4a20      	ldr	r2, [pc, #128]	; (8004300 <_free_r+0x9c>)
 8004280:	9801      	ldr	r0, [sp, #4]
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	4615      	mov	r5, r2
 8004286:	b933      	cbnz	r3, 8004296 <_free_r+0x32>
 8004288:	6063      	str	r3, [r4, #4]
 800428a:	6014      	str	r4, [r2, #0]
 800428c:	b003      	add	sp, #12
 800428e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004292:	f7ff bfe1 	b.w	8004258 <__malloc_unlock>
 8004296:	42a3      	cmp	r3, r4
 8004298:	d90b      	bls.n	80042b2 <_free_r+0x4e>
 800429a:	6821      	ldr	r1, [r4, #0]
 800429c:	1862      	adds	r2, r4, r1
 800429e:	4293      	cmp	r3, r2
 80042a0:	bf04      	itt	eq
 80042a2:	681a      	ldreq	r2, [r3, #0]
 80042a4:	685b      	ldreq	r3, [r3, #4]
 80042a6:	6063      	str	r3, [r4, #4]
 80042a8:	bf04      	itt	eq
 80042aa:	1852      	addeq	r2, r2, r1
 80042ac:	6022      	streq	r2, [r4, #0]
 80042ae:	602c      	str	r4, [r5, #0]
 80042b0:	e7ec      	b.n	800428c <_free_r+0x28>
 80042b2:	461a      	mov	r2, r3
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b10b      	cbz	r3, 80042bc <_free_r+0x58>
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d9fa      	bls.n	80042b2 <_free_r+0x4e>
 80042bc:	6811      	ldr	r1, [r2, #0]
 80042be:	1855      	adds	r5, r2, r1
 80042c0:	42a5      	cmp	r5, r4
 80042c2:	d10b      	bne.n	80042dc <_free_r+0x78>
 80042c4:	6824      	ldr	r4, [r4, #0]
 80042c6:	4421      	add	r1, r4
 80042c8:	1854      	adds	r4, r2, r1
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	6011      	str	r1, [r2, #0]
 80042ce:	d1dd      	bne.n	800428c <_free_r+0x28>
 80042d0:	681c      	ldr	r4, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	6053      	str	r3, [r2, #4]
 80042d6:	4421      	add	r1, r4
 80042d8:	6011      	str	r1, [r2, #0]
 80042da:	e7d7      	b.n	800428c <_free_r+0x28>
 80042dc:	d902      	bls.n	80042e4 <_free_r+0x80>
 80042de:	230c      	movs	r3, #12
 80042e0:	6003      	str	r3, [r0, #0]
 80042e2:	e7d3      	b.n	800428c <_free_r+0x28>
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	1961      	adds	r1, r4, r5
 80042e8:	428b      	cmp	r3, r1
 80042ea:	bf04      	itt	eq
 80042ec:	6819      	ldreq	r1, [r3, #0]
 80042ee:	685b      	ldreq	r3, [r3, #4]
 80042f0:	6063      	str	r3, [r4, #4]
 80042f2:	bf04      	itt	eq
 80042f4:	1949      	addeq	r1, r1, r5
 80042f6:	6021      	streq	r1, [r4, #0]
 80042f8:	6054      	str	r4, [r2, #4]
 80042fa:	e7c7      	b.n	800428c <_free_r+0x28>
 80042fc:	b003      	add	sp, #12
 80042fe:	bd30      	pop	{r4, r5, pc}
 8004300:	200040a4 	.word	0x200040a4

08004304 <_init>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	bf00      	nop
 8004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430a:	bc08      	pop	{r3}
 800430c:	469e      	mov	lr, r3
 800430e:	4770      	bx	lr

08004310 <_fini>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr
