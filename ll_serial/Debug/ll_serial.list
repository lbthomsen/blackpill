
ll_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001afc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001c9c  08001c9c  00002c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d00  08001d00  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  08001d00  08001d00  00002d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d08  08001d08  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d08  08001d08  00002d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d0c  08001d0c  00002d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001d10  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001d70  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001d70  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e63  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001303  00000000  00000000  00007ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000160e  00000000  00000000  000091f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000348  00000000  00000000  0000a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002c8  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011faa  00000000  00000000  0000ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a48  00000000  00000000  0001cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000634a1  00000000  00000000  0002180a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00084cab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f24  00000000  00000000  00084cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00085c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001c84 	.word	0x08001c84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001c84 	.word	0x08001c84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ac:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005ae:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b2:	f1c0 0c07 	rsb	ip, r0, #7
 80005b6:	f1bc 0f04 	cmp.w	ip, #4
 80005ba:	bf28      	it	cs
 80005bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	1d03      	adds	r3, r0, #4
 80005c2:	2b06      	cmp	r3, #6
 80005c4:	d90f      	bls.n	80005e6 <NVIC_EncodePriority+0x3a>
 80005c6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80005cc:	fa0e f00c 	lsl.w	r0, lr, ip
 80005d0:	ea21 0100 	bic.w	r1, r1, r0
 80005d4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d6:	fa0e fe03 	lsl.w	lr, lr, r3
 80005da:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80005de:	ea41 0002 	orr.w	r0, r1, r2
 80005e2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	2300      	movs	r3, #0
 80005e8:	e7ee      	b.n	80005c8 <NVIC_EncodePriority+0x1c>
	...

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b500      	push	{lr}
 80005ee:	b08b      	sub	sp, #44	@ 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2300      	movs	r3, #0
 80005f2:	9304      	str	r3, [sp, #16]
 80005f4:	9305      	str	r3, [sp, #20]
 80005f6:	9306      	str	r3, [sp, #24]
 80005f8:	9307      	str	r3, [sp, #28]
 80005fa:	9308      	str	r3, [sp, #32]
 80005fc:	9309      	str	r3, [sp, #36]	@ 0x24
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <MX_GPIO_Init+0x68>)
 8000600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000602:	f042 0204 	orr.w	r2, r2, #4
 8000606:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060a:	f002 0204 	and.w	r2, r2, #4
 800060e:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000610:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000614:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000618:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800061a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800061c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000620:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000622:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000626:	f042 0201 	orr.w	r2, r2, #1
 800062a:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000634:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000636:	4808      	ldr	r0, [pc, #32]	@ (8000658 <MX_GPIO_Init+0x6c>)
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	6183      	str	r3, [r0, #24]

  /**/
  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800063e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000640:	2301      	movs	r3, #1
 8000642:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000644:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000646:	a904      	add	r1, sp, #16
 8000648:	f000 fa34 	bl	8000ab4 <LL_GPIO_Init>

}
 800064c:	b00b      	add	sp, #44	@ 0x2c
 800064e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40020800 	.word	0x40020800

0800065c <MX_USART1_UART_Init>:
{
 800065c:	b510      	push	{r4, lr}
 800065e:	b090      	sub	sp, #64	@ 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000660:	2400      	movs	r4, #0
 8000662:	9409      	str	r4, [sp, #36]	@ 0x24
 8000664:	940a      	str	r4, [sp, #40]	@ 0x28
 8000666:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000668:	940c      	str	r4, [sp, #48]	@ 0x30
 800066a:	940d      	str	r4, [sp, #52]	@ 0x34
 800066c:	940e      	str	r4, [sp, #56]	@ 0x38
 800066e:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	9403      	str	r4, [sp, #12]
 8000672:	9404      	str	r4, [sp, #16]
 8000674:	9405      	str	r4, [sp, #20]
 8000676:	9406      	str	r4, [sp, #24]
 8000678:	9407      	str	r4, [sp, #28]
 800067a:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_USART1_UART_Init+0xa0>)
 800067e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000680:	f042 0210 	orr.w	r2, r2, #16
 8000684:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000686:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000688:	f002 0210 	and.w	r2, r2, #16
 800068c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800068e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000692:	f042 0201 	orr.w	r2, r2, #1
 8000696:	631a      	str	r2, [r3, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80006a0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80006a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006a6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006a8:	2302      	movs	r3, #2
 80006aa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	a903      	add	r1, sp, #12
 80006b6:	4812      	ldr	r0, [pc, #72]	@ (8000700 <MX_USART1_UART_Init+0xa4>)
 80006b8:	f000 f9fc 	bl	8000ab4 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80006bc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80006c0:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80006c2:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80006c4:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80006c6:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80006c8:	230c      	movs	r3, #12
 80006ca:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80006cc:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80006ce:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 80006d0:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80006d4:	f504 3488 	add.w	r4, r4, #69632	@ 0x11000
 80006d8:	a909      	add	r1, sp, #36	@ 0x24
 80006da:	4620      	mov	r0, r4
 80006dc:	f000 fb06 	bl	8000cec <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006e0:	6923      	ldr	r3, [r4, #16]
 80006e2:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80006e6:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006e8:	6963      	ldr	r3, [r4, #20]
 80006ea:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80006ee:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006f0:	68e3      	ldr	r3, [r4, #12]
 80006f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006f6:	60e3      	str	r3, [r4, #12]
}
 80006f8:	b010      	add	sp, #64	@ 0x40
 80006fa:	bd10      	pop	{r4, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000

08000704 <_write>:
int _write(int fd, char *ptr, int len) {
 8000704:	4610      	mov	r0, r2
	while (len--) {
 8000706:	e008      	b.n	800071a <_write+0x16>
		LL_USART_TransmitData8(USART1, (uint8_t)*ptr++);
 8000708:	f811 2b01 	ldrb.w	r2, [r1], #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <_write+0x20>)
 800070e:	605a      	str	r2, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <_write+0x20>)
 8000712:	681b      	ldr	r3, [r3, #0]
		while (!LL_USART_IsActiveFlag_TXE(USART1)) {}
 8000714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000718:	d0fa      	beq.n	8000710 <_write+0xc>
	while (len--) {
 800071a:	4603      	mov	r3, r0
 800071c:	3801      	subs	r0, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f2      	bne.n	8000708 <_write+0x4>
}
 8000722:	4770      	bx	lr
 8000724:	40011000 	.word	0x40011000

08000728 <SystemClock_Config>:
{
 8000728:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800072a:	4a2d      	ldr	r2, [pc, #180]	@ (80007e0 <SystemClock_Config+0xb8>)
 800072c:	6813      	ldr	r3, [r2, #0]
 800072e:	f023 0307 	bic.w	r3, r3, #7
 8000732:	f043 0303 	orr.w	r3, r3, #3
 8000736:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000738:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemClock_Config+0xb8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000740:	2b03      	cmp	r3, #3
 8000742:	d1f9      	bne.n	8000738 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <SystemClock_Config+0xbc>)
 8000746:	6813      	ldr	r3, [r2, #0]
 8000748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074c:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800074e:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8000752:	6813      	ldr	r3, [r2, #0]
 8000754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000758:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800075a:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <SystemClock_Config+0xc0>)
 800075c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 800075e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000762:	d0fa      	beq.n	800075a <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <SystemClock_Config+0xc0>)
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	4920      	ldr	r1, [pc, #128]	@ (80007ec <SystemClock_Config+0xc4>)
 800076a:	4011      	ands	r1, r2
 800076c:	4a20      	ldr	r2, [pc, #128]	@ (80007f0 <SystemClock_Config+0xc8>)
 800076e:	430a      	orrs	r2, r1
 8000770:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000778:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000780:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <SystemClock_Config+0xc0>)
 8000784:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000786:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800078a:	d0fa      	beq.n	8000782 <SystemClock_Config+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <SystemClock_Config+0xc0>)
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000794:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800079c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80007a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007a2:	689a      	ldr	r2, [r3, #8]
 80007a4:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80007a8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	f022 0203 	bic.w	r2, r2, #3
 80007b0:	f042 0202 	orr.w	r2, r2, #2
 80007b4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <SystemClock_Config+0xc0>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007be:	2b08      	cmp	r3, #8
 80007c0:	d1f9      	bne.n	80007b6 <SystemClock_Config+0x8e>
  LL_Init1msTick(96000000);
 80007c2:	4c0c      	ldr	r4, [pc, #48]	@ (80007f4 <SystemClock_Config+0xcc>)
 80007c4:	4620      	mov	r0, r4
 80007c6:	f000 fadd 	bl	8000d84 <LL_Init1msTick>
  LL_SetSystemCoreClock(96000000);
 80007ca:	4620      	mov	r0, r4
 80007cc:	f000 faea 	bl	8000da4 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80007d0:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <SystemClock_Config+0xc0>)
 80007d2:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80007d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 80007de:	bd10      	pop	{r4, pc}
 80007e0:	40023c00 	.word	0x40023c00
 80007e4:	40007000 	.word	0x40007000
 80007e8:	40023800 	.word	0x40023800
 80007ec:	ffbf8000 	.word	0xffbf8000
 80007f0:	00403019 	.word	0x00403019
 80007f4:	05b8d800 	.word	0x05b8d800

080007f8 <main>:
{
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <main+0xa0>)
 80007fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000800:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000804:	645a      	str	r2, [r3, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000808:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800080c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800080e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000812:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000816:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000820:	9b00      	ldr	r3, [sp, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000822:	4c1e      	ldr	r4, [pc, #120]	@ (800089c <main+0xa4>)
 8000824:	68e2      	ldr	r2, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800082a:	0412      	lsls	r2, r2, #16
 800082c:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <main+0xa8>)
 8000830:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8000832:	60e3      	str	r3, [r4, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	68e0      	ldr	r0, [r4, #12]
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800083e:	f7ff feb5 	bl	80005ac <NVIC_EncodePriority>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	0103      	lsls	r3, r0, #4
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
  SystemClock_Config();
 800084a:	f7ff ff6d 	bl	8000728 <SystemClock_Config>
  MX_GPIO_Init();
 800084e:	f7ff fecd 	bl	80005ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000852:	f7ff ff03 	bl	800065c <MX_USART1_UART_Init>
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000856:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800085a:	6913      	ldr	r3, [r2, #16]
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6113      	str	r3, [r2, #16]
	DBG("Starting");
 8000862:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <main+0xac>)
 8000864:	f000 fb66 	bl	8000f34 <iprintf>
 8000868:	200a      	movs	r0, #10
 800086a:	f000 fb75 	bl	8000f58 <putchar>
	uint32_t now = 0, then = 0;
 800086e:	2400      	movs	r4, #0
 8000870:	4625      	mov	r5, r4
		now = get_systick_counter();
 8000872:	f000 f82d 	bl	80008d0 <get_systick_counter>
 8000876:	4604      	mov	r4, r0
		if (now - then >= 1000) {
 8000878:	1b43      	subs	r3, r0, r5
 800087a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800087e:	d3f8      	bcc.n	8000872 <main+0x7a>
			DBG("Tick %lu", now / 1000);
 8000880:	4909      	ldr	r1, [pc, #36]	@ (80008a8 <main+0xb0>)
 8000882:	fba1 3100 	umull	r3, r1, r1, r0
 8000886:	0989      	lsrs	r1, r1, #6
 8000888:	4808      	ldr	r0, [pc, #32]	@ (80008ac <main+0xb4>)
 800088a:	f000 fb53 	bl	8000f34 <iprintf>
 800088e:	200a      	movs	r0, #10
 8000890:	f000 fb62 	bl	8000f58 <putchar>
			then = now;
 8000894:	e7ec      	b.n	8000870 <main+0x78>
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	e000ed00 	.word	0xe000ed00
 80008a0:	05fa0300 	.word	0x05fa0300
 80008a4:	08001c9c 	.word	0x08001c9c
 80008a8:	10624dd3 	.word	0x10624dd3
 80008ac:	08001ca8 	.word	0x08001ca8

080008b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler>

080008b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler>

080008b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler>

080008b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler>

080008b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler>

080008ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
  systick_counter++;
 80008c0:	4a02      	ldr	r2, [pc, #8]	@ (80008cc <SysTick_Handler+0xc>)
 80008c2:	6813      	ldr	r3, [r2, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000007c 	.word	0x2000007c

080008d0 <get_systick_counter>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
uint32_t get_systick_counter() {
	return systick_counter;
}
 80008d0:	4b01      	ldr	r3, [pc, #4]	@ (80008d8 <get_systick_counter+0x8>)
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	2000007c 	.word	0x2000007c

080008dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	460c      	mov	r4, r1
 80008e0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2500      	movs	r5, #0
 80008e4:	e006      	b.n	80008f4 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80008e6:	f3af 8000 	nop.w
 80008ea:	4621      	mov	r1, r4
 80008ec:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80008f2:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	dbf6      	blt.n	80008e6 <_read+0xa>
	}

return len;
}
 80008f8:	4630      	mov	r0, r6
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <_close>:
}

int _close(int file)
{
	return -1;
}
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000900:	4770      	bx	lr

08000902 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000902:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000906:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000908:	2000      	movs	r0, #0
 800090a:	4770      	bx	lr

0800090c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800090c:	2001      	movs	r0, #1
 800090e:	4770      	bx	lr

08000910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000910:	2000      	movs	r0, #0
 8000912:	4770      	bx	lr

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b510      	push	{r4, lr}
 8000916:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a0c      	ldr	r2, [pc, #48]	@ (800094c <_sbrk+0x38>)
 800091a:	490d      	ldr	r1, [pc, #52]	@ (8000950 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	480d      	ldr	r0, [pc, #52]	@ (8000954 <_sbrk+0x40>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	b140      	cbz	r0, 8000934 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <_sbrk+0x40>)
 8000924:	6800      	ldr	r0, [r0, #0]
 8000926:	4403      	add	r3, r0
 8000928:	1a52      	subs	r2, r2, r1
 800092a:	4293      	cmp	r3, r2
 800092c:	d806      	bhi.n	800093c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800092e:	4a09      	ldr	r2, [pc, #36]	@ (8000954 <_sbrk+0x40>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000932:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <_sbrk+0x40>)
 8000936:	4c08      	ldr	r4, [pc, #32]	@ (8000958 <_sbrk+0x44>)
 8000938:	6004      	str	r4, [r0, #0]
 800093a:	e7f2      	b.n	8000922 <_sbrk+0xe>
    errno = ENOMEM;
 800093c:	f000 fba6 	bl	800108c <__errno>
 8000940:	230c      	movs	r3, #12
 8000942:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000948:	e7f3      	b.n	8000932 <_sbrk+0x1e>
 800094a:	bf00      	nop
 800094c:	20020000 	.word	0x20020000
 8000950:	00000400 	.word	0x00000400
 8000954:	20000080 	.word	0x20000080
 8000958:	200001d0 	.word	0x200001d0

0800095c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4a03      	ldr	r2, [pc, #12]	@ (800096c <SystemInit+0x10>)
 800095e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000966:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000974:	480d      	ldr	r0, [pc, #52]	@ (80009ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000976:	490e      	ldr	r1, [pc, #56]	@ (80009b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000978:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800098c:	4c0b      	ldr	r4, [pc, #44]	@ (80009bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800099a:	f7ff ffdf 	bl	800095c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f000 fb7b 	bl	8001098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a2:	f7ff ff29 	bl	80007f8 <main>
  bx  lr    
 80009a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009b4:	08001d10 	.word	0x08001d10
  ldr r2, =_sbss
 80009b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009bc:	200001d0 	.word	0x200001d0

080009c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>

080009c2 <LL_GPIO_SetPinSpeed>:
{
 80009c2:	b500      	push	{lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80009c4:	6883      	ldr	r3, [r0, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c6:	fa91 fca1 	rbit	ip, r1
 80009ca:	fabc fc8c 	clz	ip, ip
 80009ce:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80009d2:	f04f 0e03 	mov.w	lr, #3
 80009d6:	fa0e fc0c 	lsl.w	ip, lr, ip
 80009da:	ea23 030c 	bic.w	r3, r3, ip
 80009de:	fa91 f1a1 	rbit	r1, r1
 80009e2:	fab1 f181 	clz	r1, r1
 80009e6:	0049      	lsls	r1, r1, #1
 80009e8:	408a      	lsls	r2, r1
 80009ea:	4313      	orrs	r3, r2
 80009ec:	6083      	str	r3, [r0, #8]
}
 80009ee:	f85d fb04 	ldr.w	pc, [sp], #4

080009f2 <LL_GPIO_SetPinPull>:
{
 80009f2:	b500      	push	{lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80009f4:	68c3      	ldr	r3, [r0, #12]
 80009f6:	fa91 fca1 	rbit	ip, r1
 80009fa:	fabc fc8c 	clz	ip, ip
 80009fe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8000a02:	f04f 0e03 	mov.w	lr, #3
 8000a06:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000a0a:	ea23 030c 	bic.w	r3, r3, ip
 8000a0e:	fa91 f1a1 	rbit	r1, r1
 8000a12:	fab1 f181 	clz	r1, r1
 8000a16:	0049      	lsls	r1, r1, #1
 8000a18:	408a      	lsls	r2, r1
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60c3      	str	r3, [r0, #12]
}
 8000a1e:	f85d fb04 	ldr.w	pc, [sp], #4

08000a22 <LL_GPIO_SetAFPin_0_7>:
{
 8000a22:	b500      	push	{lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000a24:	6a03      	ldr	r3, [r0, #32]
 8000a26:	fa91 fca1 	rbit	ip, r1
 8000a2a:	fabc fc8c 	clz	ip, ip
 8000a2e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a32:	f04f 0e0f 	mov.w	lr, #15
 8000a36:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000a3a:	ea23 030c 	bic.w	r3, r3, ip
 8000a3e:	fa91 f1a1 	rbit	r1, r1
 8000a42:	fab1 f181 	clz	r1, r1
 8000a46:	0089      	lsls	r1, r1, #2
 8000a48:	408a      	lsls	r2, r1
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	6203      	str	r3, [r0, #32]
}
 8000a4e:	f85d fb04 	ldr.w	pc, [sp], #4

08000a52 <LL_GPIO_SetAFPin_8_15>:
{
 8000a52:	b500      	push	{lr}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000a54:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000a56:	0a09      	lsrs	r1, r1, #8
 8000a58:	fa91 fca1 	rbit	ip, r1
 8000a5c:	fabc fc8c 	clz	ip, ip
 8000a60:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a64:	f04f 0e0f 	mov.w	lr, #15
 8000a68:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000a6c:	ea23 030c 	bic.w	r3, r3, ip
 8000a70:	fa91 f1a1 	rbit	r1, r1
 8000a74:	fab1 f181 	clz	r1, r1
 8000a78:	0089      	lsls	r1, r1, #2
 8000a7a:	408a      	lsls	r2, r1
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	6243      	str	r3, [r0, #36]	@ 0x24
}
 8000a80:	f85d fb04 	ldr.w	pc, [sp], #4

08000a84 <LL_GPIO_SetPinMode>:
{
 8000a84:	b500      	push	{lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a86:	6803      	ldr	r3, [r0, #0]
 8000a88:	fa91 fca1 	rbit	ip, r1
 8000a8c:	fabc fc8c 	clz	ip, ip
 8000a90:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8000a94:	f04f 0e03 	mov.w	lr, #3
 8000a98:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000a9c:	ea23 030c 	bic.w	r3, r3, ip
 8000aa0:	fa91 f1a1 	rbit	r1, r1
 8000aa4:	fab1 f181 	clz	r1, r1
 8000aa8:	0049      	lsls	r1, r1, #1
 8000aaa:	408a      	lsls	r2, r1
 8000aac:	4313      	orrs	r3, r2
 8000aae:	6003      	str	r3, [r0, #0]
}
 8000ab0:	f85d fb04 	ldr.w	pc, [sp], #4

08000ab4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	4607      	mov	r7, r0
 8000ab8:	460e      	mov	r6, r1
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000aba:	680d      	ldr	r5, [r1, #0]
 8000abc:	fa95 f5a5 	rbit	r5, r5
 8000ac0:	fab5 f585 	clz	r5, r5
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000ac4:	e018      	b.n	8000af8 <LL_GPIO_Init+0x44>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ac6:	68b2      	ldr	r2, [r6, #8]
 8000ac8:	4621      	mov	r1, r4
 8000aca:	4638      	mov	r0, r7
 8000acc:	f7ff ff79 	bl	80009c2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ad0:	68f2      	ldr	r2, [r6, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	ea23 0304 	bic.w	r3, r3, r4
 8000ad8:	fb04 f202 	mul.w	r2, r4, r2
 8000adc:	4313      	orrs	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
}
 8000ae0:	e016      	b.n	8000b10 <LL_GPIO_Init+0x5c>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ae2:	6972      	ldr	r2, [r6, #20]
 8000ae4:	4621      	mov	r1, r4
 8000ae6:	4638      	mov	r0, r7
 8000ae8:	f7ff ffb3 	bl	8000a52 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000aec:	6872      	ldr	r2, [r6, #4]
 8000aee:	4621      	mov	r1, r4
 8000af0:	4638      	mov	r0, r7
 8000af2:	f7ff ffc7 	bl	8000a84 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000af6:	3501      	adds	r5, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000af8:	6834      	ldr	r4, [r6, #0]
 8000afa:	fa34 f205 	lsrs.w	r2, r4, r5
 8000afe:	d01b      	beq.n	8000b38 <LL_GPIO_Init+0x84>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000b00:	2201      	movs	r2, #1
 8000b02:	40aa      	lsls	r2, r5
    if (currentpin)
 8000b04:	4014      	ands	r4, r2
 8000b06:	d0f6      	beq.n	8000af6 <LL_GPIO_Init+0x42>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b08:	6873      	ldr	r3, [r6, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d9da      	bls.n	8000ac6 <LL_GPIO_Init+0x12>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000b10:	6932      	ldr	r2, [r6, #16]
 8000b12:	4621      	mov	r1, r4
 8000b14:	4638      	mov	r0, r7
 8000b16:	f7ff ff6c 	bl	80009f2 <LL_GPIO_SetPinPull>
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000b1a:	6873      	ldr	r3, [r6, #4]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d1e5      	bne.n	8000aec <LL_GPIO_Init+0x38>
 8000b20:	fa94 f3a4 	rbit	r3, r4
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000b24:	fab3 f383 	clz	r3, r3
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d8da      	bhi.n	8000ae2 <LL_GPIO_Init+0x2e>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000b2c:	6972      	ldr	r2, [r6, #20]
 8000b2e:	4621      	mov	r1, r4
 8000b30:	4638      	mov	r0, r7
 8000b32:	f7ff ff76 	bl	8000a22 <LL_GPIO_SetAFPin_0_7>
 8000b36:	e7d9      	b.n	8000aec <LL_GPIO_Init+0x38>
  }

  return (SUCCESS);
}
 8000b38:	2000      	movs	r0, #0
 8000b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b3c <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000b3c:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <RCC_GetHCLKClockFreq+0x10>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000b40:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b44:	4a02      	ldr	r2, [pc, #8]	@ (8000b50 <RCC_GetHCLKClockFreq+0x14>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b48:	40d8      	lsrs	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	08001cbc 	.word	0x08001cbc

08000b54 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <RCC_GetPCLK1ClockFreq+0x10>)
 8000b56:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000b58:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000b5c:	4a02      	ldr	r2, [pc, #8]	@ (8000b68 <RCC_GetPCLK1ClockFreq+0x14>)
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b60:	40d8      	lsrs	r0, r3
 8000b62:	4770      	bx	lr
 8000b64:	40023800 	.word	0x40023800
 8000b68:	08001cb4 	.word	0x08001cb4

08000b6c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <RCC_GetPCLK2ClockFreq+0x10>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000b70:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000b74:	4a02      	ldr	r2, [pc, #8]	@ (8000b80 <RCC_GetPCLK2ClockFreq+0x14>)
 8000b76:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b78:	40d8      	lsrs	r0, r3
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	08001cb4 	.word	0x08001cb4

08000b84 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000b8c:	b923      	cbnz	r3, 8000b98 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b90:	2808      	cmp	r0, #8
 8000b92:	d003      	beq.n	8000b9c <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8000b94:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8000b96:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8000b9a:	e7f9      	b.n	8000b90 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000b9c:	4a09      	ldr	r2, [pc, #36]	@ (8000bc4 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000b9e:	6851      	ldr	r1, [r2, #4]
 8000ba0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000ba4:	fbb3 f0f1 	udiv	r0, r3, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000ba8:	6853      	ldr	r3, [r2, #4]
 8000baa:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000bae:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8000bb2:	6853      	ldr	r3, [r2, #4]
 8000bb4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bb8:	3301      	adds	r3, #1
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	00f42400 	.word	0x00f42400
 8000bcc:	017d7840 	.word	0x017d7840

08000bd0 <RCC_GetSystemClockFreq>:
{
 8000bd0:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <RCC_GetSystemClockFreq+0x24>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d005      	beq.n	8000bea <RCC_GetSystemClockFreq+0x1a>
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d105      	bne.n	8000bee <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000be2:	2008      	movs	r0, #8
 8000be4:	f7ff ffce 	bl	8000b84 <RCC_PLL_GetFreqDomain_SYS>
}
 8000be8:	bd08      	pop	{r3, pc}
      frequency = HSE_VALUE;
 8000bea:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <RCC_GetSystemClockFreq+0x28>)
 8000bec:	e7fc      	b.n	8000be8 <RCC_GetSystemClockFreq+0x18>
  switch (LL_RCC_GetSysClkSource())
 8000bee:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <RCC_GetSystemClockFreq+0x2c>)
  return frequency;
 8000bf0:	e7fa      	b.n	8000be8 <RCC_GetSystemClockFreq+0x18>
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	017d7840 	.word	0x017d7840
 8000bfc:	00f42400 	.word	0x00f42400

08000c00 <LL_RCC_GetSystemClocksFreq>:
{
 8000c00:	b510      	push	{r4, lr}
 8000c02:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000c04:	f7ff ffe4 	bl	8000bd0 <RCC_GetSystemClockFreq>
 8000c08:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000c0a:	f7ff ff97 	bl	8000b3c <RCC_GetHCLKClockFreq>
 8000c0e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000c10:	f7ff ffa0 	bl	8000b54 <RCC_GetPCLK1ClockFreq>
 8000c14:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000c16:	6860      	ldr	r0, [r4, #4]
 8000c18:	f7ff ffa8 	bl	8000b6c <RCC_GetPCLK2ClockFreq>
 8000c1c:	60e0      	str	r0, [r4, #12]
}
 8000c1e:	bd10      	pop	{r4, pc}

08000c20 <LL_USART_SetBaudRate>:
{
 8000c20:	b510      	push	{r4, lr}
 8000c22:	4604      	mov	r4, r0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000c24:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8000c28:	d02f      	beq.n	8000c8a <LL_USART_SetBaudRate+0x6a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c2a:	f04f 0c00 	mov.w	ip, #0
 8000c2e:	1848      	adds	r0, r1, r1
 8000c30:	eb4c 0c0c 	adc.w	ip, ip, ip
 8000c34:	1840      	adds	r0, r0, r1
 8000c36:	f14c 0c00 	adc.w	ip, ip, #0
 8000c3a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000c3e:	ea4c 7c50 	orr.w	ip, ip, r0, lsr #29
 8000c42:	00c0      	lsls	r0, r0, #3
 8000c44:	1840      	adds	r0, r0, r1
 8000c46:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000c4a:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8000c4e:	f14c 0100 	adc.w	r1, ip, #0
 8000c52:	f7ff fb15 	bl	8000280 <__aeabi_uldivmod>
 8000c56:	4924      	ldr	r1, [pc, #144]	@ (8000ce8 <LL_USART_SetBaudRate+0xc8>)
 8000c58:	fba1 2300 	umull	r2, r3, r1, r0
 8000c5c:	095b      	lsrs	r3, r3, #5
 8000c5e:	011a      	lsls	r2, r3, #4
 8000c60:	b292      	uxth	r2, r2
 8000c62:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8000c66:	fb0c 0313 	mls	r3, ip, r3, r0
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	3332      	adds	r3, #50	@ 0x32
 8000c6e:	fba1 1303 	umull	r1, r3, r1, r3
 8000c72:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000c76:	f003 01f0 	and.w	r1, r3, #240	@ 0xf0
 8000c7a:	440a      	add	r2, r1
 8000c7c:	b292      	uxth	r2, r2
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	60a3      	str	r3, [r4, #8]
}
 8000c88:	bd10      	pop	{r4, pc}
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000c8a:	f04f 0c00 	mov.w	ip, #0
 8000c8e:	1848      	adds	r0, r1, r1
 8000c90:	eb4c 020c 	adc.w	r2, ip, ip
 8000c94:	1840      	adds	r0, r0, r1
 8000c96:	f142 0200 	adc.w	r2, r2, #0
 8000c9a:	00d2      	lsls	r2, r2, #3
 8000c9c:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
 8000ca0:	00c0      	lsls	r0, r0, #3
 8000ca2:	1840      	adds	r0, r0, r1
 8000ca4:	f142 0100 	adc.w	r1, r2, #0
 8000ca8:	18da      	adds	r2, r3, r3
 8000caa:	eb4c 030c 	adc.w	r3, ip, ip
 8000cae:	f7ff fae7 	bl	8000280 <__aeabi_uldivmod>
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LL_USART_SetBaudRate+0xc8>)
 8000cb4:	fba1 2300 	umull	r2, r3, r1, r0
 8000cb8:	095b      	lsrs	r3, r3, #5
 8000cba:	011a      	lsls	r2, r3, #4
 8000cbc:	b292      	uxth	r2, r2
 8000cbe:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8000cc2:	fb0c 0313 	mls	r3, ip, r3, r0
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	3332      	adds	r3, #50	@ 0x32
 8000cca:	fba1 1303 	umull	r1, r3, r1, r3
 8000cce:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000cd2:	0059      	lsls	r1, r3, #1
 8000cd4:	f401 71f8 	and.w	r1, r1, #496	@ 0x1f0
 8000cd8:	440a      	add	r2, r1
 8000cda:	b292      	uxth	r2, r2
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	60a3      	str	r3, [r4, #8]
 8000ce6:	e7cf      	b.n	8000c88 <LL_USART_SetBaudRate+0x68>
 8000ce8:	51eb851f 	.word	0x51eb851f

08000cec <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000cec:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000cee:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000cf2:	d001      	beq.n	8000cf8 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8000cf4:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000cf6:	4770      	bx	lr
{
 8000cf8:	b530      	push	{r4, r5, lr}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8000d00:	68c3      	ldr	r3, [r0, #12]
 8000d02:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8000d06:	f023 030c 	bic.w	r3, r3, #12
 8000d0a:	684a      	ldr	r2, [r1, #4]
 8000d0c:	68c9      	ldr	r1, [r1, #12]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	6929      	ldr	r1, [r5, #16]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	69a9      	ldr	r1, [r5, #24]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000d1c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000d1e:	6902      	ldr	r2, [r0, #16]
 8000d20:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000d24:	4313      	orrs	r3, r2
 8000d26:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000d28:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000d2a:	6942      	ldr	r2, [r0, #20]
 8000d2c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000d30:	4313      	orrs	r3, r2
 8000d32:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000d34:	4668      	mov	r0, sp
 8000d36:	f7ff ff63 	bl	8000c00 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <LL_USART_Init+0x8c>)
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d008      	beq.n	8000d52 <LL_USART_Init+0x66>
    else if (USARTx == USART2)
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <LL_USART_Init+0x90>)
 8000d42:	429c      	cmp	r4, r3
 8000d44:	d00b      	beq.n	8000d5e <LL_USART_Init+0x72>
    else if (USARTx == USART6)
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <LL_USART_Init+0x94>)
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d00a      	beq.n	8000d62 <LL_USART_Init+0x76>
  ErrorStatus status = ERROR;
 8000d4c:	2001      	movs	r0, #1
}
 8000d4e:	b005      	add	sp, #20
 8000d50:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000d52:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000d54:	b169      	cbz	r1, 8000d72 <LL_USART_Init+0x86>
        && (USART_InitStruct->BaudRate != 0U))
 8000d56:	682b      	ldr	r3, [r5, #0]
 8000d58:	b92b      	cbnz	r3, 8000d66 <LL_USART_Init+0x7a>
  ErrorStatus status = ERROR;
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	e7f7      	b.n	8000d4e <LL_USART_Init+0x62>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000d5e:	9902      	ldr	r1, [sp, #8]
 8000d60:	e7f8      	b.n	8000d54 <LL_USART_Init+0x68>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000d62:	9903      	ldr	r1, [sp, #12]
 8000d64:	e7f6      	b.n	8000d54 <LL_USART_Init+0x68>
      LL_USART_SetBaudRate(USARTx,
 8000d66:	69aa      	ldr	r2, [r5, #24]
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f7ff ff59 	bl	8000c20 <LL_USART_SetBaudRate>
      status = SUCCESS;
 8000d6e:	2000      	movs	r0, #0
 8000d70:	e7ed      	b.n	8000d4e <LL_USART_Init+0x62>
  ErrorStatus status = ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	e7eb      	b.n	8000d4e <LL_USART_Init+0x62>
 8000d76:	bf00      	nop
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40011400 	.word	0x40011400

08000d84 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <LL_Init1msTick+0x1c>)
 8000d86:	fba3 2300 	umull	r2, r3, r3, r0
 8000d8a:	099b      	lsrs	r3, r3, #6
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000d92:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d94:	2300      	movs	r3, #0
 8000d96:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d98:	2305      	movs	r3, #5
 8000d9a:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	10624dd3 	.word	0x10624dd3

08000da4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000da4:	4b01      	ldr	r3, [pc, #4]	@ (8000dac <LL_SetSystemCoreClock+0x8>)
 8000da6:	6018      	str	r0, [r3, #0]
}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000

08000db0 <std>:
 8000db0:	2300      	movs	r3, #0
 8000db2:	b510      	push	{r4, lr}
 8000db4:	4604      	mov	r4, r0
 8000db6:	e9c0 3300 	strd	r3, r3, [r0]
 8000dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dbe:	6083      	str	r3, [r0, #8]
 8000dc0:	8181      	strh	r1, [r0, #12]
 8000dc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8000dc4:	81c2      	strh	r2, [r0, #14]
 8000dc6:	6183      	str	r3, [r0, #24]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2208      	movs	r2, #8
 8000dcc:	305c      	adds	r0, #92	@ 0x5c
 8000dce:	f000 f90e 	bl	8000fee <memset>
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <std+0x58>)
 8000dd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <std+0x5c>)
 8000dd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <std+0x60>)
 8000ddc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <std+0x64>)
 8000de0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <std+0x68>)
 8000de4:	6224      	str	r4, [r4, #32]
 8000de6:	429c      	cmp	r4, r3
 8000de8:	d006      	beq.n	8000df8 <std+0x48>
 8000dea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000dee:	4294      	cmp	r4, r2
 8000df0:	d002      	beq.n	8000df8 <std+0x48>
 8000df2:	33d0      	adds	r3, #208	@ 0xd0
 8000df4:	429c      	cmp	r4, r3
 8000df6:	d105      	bne.n	8000e04 <std+0x54>
 8000df8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e00:	f000 b96e 	b.w	80010e0 <__retarget_lock_init_recursive>
 8000e04:	bd10      	pop	{r4, pc}
 8000e06:	bf00      	nop
 8000e08:	08000f69 	.word	0x08000f69
 8000e0c:	08000f8b 	.word	0x08000f8b
 8000e10:	08000fc3 	.word	0x08000fc3
 8000e14:	08000fe7 	.word	0x08000fe7
 8000e18:	20000084 	.word	0x20000084

08000e1c <stdio_exit_handler>:
 8000e1c:	4a02      	ldr	r2, [pc, #8]	@ (8000e28 <stdio_exit_handler+0xc>)
 8000e1e:	4903      	ldr	r1, [pc, #12]	@ (8000e2c <stdio_exit_handler+0x10>)
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <stdio_exit_handler+0x14>)
 8000e22:	f000 b869 	b.w	8000ef8 <_fwalk_sglue>
 8000e26:	bf00      	nop
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	0800197d 	.word	0x0800197d
 8000e30:	20000014 	.word	0x20000014

08000e34 <cleanup_stdio>:
 8000e34:	6841      	ldr	r1, [r0, #4]
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <cleanup_stdio+0x34>)
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	b510      	push	{r4, lr}
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	d001      	beq.n	8000e44 <cleanup_stdio+0x10>
 8000e40:	f000 fd9c 	bl	800197c <_fflush_r>
 8000e44:	68a1      	ldr	r1, [r4, #8]
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <cleanup_stdio+0x38>)
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	d002      	beq.n	8000e52 <cleanup_stdio+0x1e>
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f000 fd95 	bl	800197c <_fflush_r>
 8000e52:	68e1      	ldr	r1, [r4, #12]
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <cleanup_stdio+0x3c>)
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d004      	beq.n	8000e64 <cleanup_stdio+0x30>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e60:	f000 bd8c 	b.w	800197c <_fflush_r>
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop
 8000e68:	20000084 	.word	0x20000084
 8000e6c:	200000ec 	.word	0x200000ec
 8000e70:	20000154 	.word	0x20000154

08000e74 <global_stdio_init.part.0>:
 8000e74:	b510      	push	{r4, lr}
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <global_stdio_init.part.0+0x30>)
 8000e78:	4c0b      	ldr	r4, [pc, #44]	@ (8000ea8 <global_stdio_init.part.0+0x34>)
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <global_stdio_init.part.0+0x38>)
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	4620      	mov	r0, r4
 8000e80:	2200      	movs	r2, #0
 8000e82:	2104      	movs	r1, #4
 8000e84:	f7ff ff94 	bl	8000db0 <std>
 8000e88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2109      	movs	r1, #9
 8000e90:	f7ff ff8e 	bl	8000db0 <std>
 8000e94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e98:	2202      	movs	r2, #2
 8000e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e9e:	2112      	movs	r1, #18
 8000ea0:	f7ff bf86 	b.w	8000db0 <std>
 8000ea4:	200001bc 	.word	0x200001bc
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	08000e1d 	.word	0x08000e1d

08000eb0 <__sfp_lock_acquire>:
 8000eb0:	4801      	ldr	r0, [pc, #4]	@ (8000eb8 <__sfp_lock_acquire+0x8>)
 8000eb2:	f000 b916 	b.w	80010e2 <__retarget_lock_acquire_recursive>
 8000eb6:	bf00      	nop
 8000eb8:	200001c5 	.word	0x200001c5

08000ebc <__sfp_lock_release>:
 8000ebc:	4801      	ldr	r0, [pc, #4]	@ (8000ec4 <__sfp_lock_release+0x8>)
 8000ebe:	f000 b911 	b.w	80010e4 <__retarget_lock_release_recursive>
 8000ec2:	bf00      	nop
 8000ec4:	200001c5 	.word	0x200001c5

08000ec8 <__sinit>:
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
 8000ecc:	f7ff fff0 	bl	8000eb0 <__sfp_lock_acquire>
 8000ed0:	6a23      	ldr	r3, [r4, #32]
 8000ed2:	b11b      	cbz	r3, 8000edc <__sinit+0x14>
 8000ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ed8:	f7ff bff0 	b.w	8000ebc <__sfp_lock_release>
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__sinit+0x28>)
 8000ede:	6223      	str	r3, [r4, #32]
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <__sinit+0x2c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f5      	bne.n	8000ed4 <__sinit+0xc>
 8000ee8:	f7ff ffc4 	bl	8000e74 <global_stdio_init.part.0>
 8000eec:	e7f2      	b.n	8000ed4 <__sinit+0xc>
 8000eee:	bf00      	nop
 8000ef0:	08000e35 	.word	0x08000e35
 8000ef4:	200001bc 	.word	0x200001bc

08000ef8 <_fwalk_sglue>:
 8000ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000efc:	4607      	mov	r7, r0
 8000efe:	4688      	mov	r8, r1
 8000f00:	4614      	mov	r4, r2
 8000f02:	2600      	movs	r6, #0
 8000f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f08:	f1b9 0901 	subs.w	r9, r9, #1
 8000f0c:	d505      	bpl.n	8000f1a <_fwalk_sglue+0x22>
 8000f0e:	6824      	ldr	r4, [r4, #0]
 8000f10:	2c00      	cmp	r4, #0
 8000f12:	d1f7      	bne.n	8000f04 <_fwalk_sglue+0xc>
 8000f14:	4630      	mov	r0, r6
 8000f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f1a:	89ab      	ldrh	r3, [r5, #12]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d907      	bls.n	8000f30 <_fwalk_sglue+0x38>
 8000f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f24:	3301      	adds	r3, #1
 8000f26:	d003      	beq.n	8000f30 <_fwalk_sglue+0x38>
 8000f28:	4629      	mov	r1, r5
 8000f2a:	4638      	mov	r0, r7
 8000f2c:	47c0      	blx	r8
 8000f2e:	4306      	orrs	r6, r0
 8000f30:	3568      	adds	r5, #104	@ 0x68
 8000f32:	e7e9      	b.n	8000f08 <_fwalk_sglue+0x10>

08000f34 <iprintf>:
 8000f34:	b40f      	push	{r0, r1, r2, r3}
 8000f36:	b507      	push	{r0, r1, r2, lr}
 8000f38:	4906      	ldr	r1, [pc, #24]	@ (8000f54 <iprintf+0x20>)
 8000f3a:	ab04      	add	r3, sp, #16
 8000f3c:	6808      	ldr	r0, [r1, #0]
 8000f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f42:	6881      	ldr	r1, [r0, #8]
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	f000 f9f1 	bl	800132c <_vfiprintf_r>
 8000f4a:	b003      	add	sp, #12
 8000f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f50:	b004      	add	sp, #16
 8000f52:	4770      	bx	lr
 8000f54:	20000010 	.word	0x20000010

08000f58 <putchar>:
 8000f58:	4b02      	ldr	r3, [pc, #8]	@ (8000f64 <putchar+0xc>)
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	6882      	ldr	r2, [r0, #8]
 8000f60:	f000 bd34 	b.w	80019cc <_putc_r>
 8000f64:	20000010 	.word	0x20000010

08000f68 <__sread>:
 8000f68:	b510      	push	{r4, lr}
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f70:	f000 f868 	bl	8001044 <_read_r>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	bfab      	itete	ge
 8000f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f7c:	181b      	addge	r3, r3, r0
 8000f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f82:	bfac      	ite	ge
 8000f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f86:	81a3      	strhlt	r3, [r4, #12]
 8000f88:	bd10      	pop	{r4, pc}

08000f8a <__swrite>:
 8000f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8e:	461f      	mov	r7, r3
 8000f90:	898b      	ldrh	r3, [r1, #12]
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	4605      	mov	r5, r0
 8000f96:	460c      	mov	r4, r1
 8000f98:	4616      	mov	r6, r2
 8000f9a:	d505      	bpl.n	8000fa8 <__swrite+0x1e>
 8000f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f000 f83c 	bl	8001020 <_lseek_r>
 8000fa8:	89a3      	ldrh	r3, [r4, #12]
 8000faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fb2:	81a3      	strh	r3, [r4, #12]
 8000fb4:	4632      	mov	r2, r6
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbe:	f000 b853 	b.w	8001068 <_write_r>

08000fc2 <__sseek>:
 8000fc2:	b510      	push	{r4, lr}
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fca:	f000 f829 	bl	8001020 <_lseek_r>
 8000fce:	1c43      	adds	r3, r0, #1
 8000fd0:	89a3      	ldrh	r3, [r4, #12]
 8000fd2:	bf15      	itete	ne
 8000fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000fde:	81a3      	strheq	r3, [r4, #12]
 8000fe0:	bf18      	it	ne
 8000fe2:	81a3      	strhne	r3, [r4, #12]
 8000fe4:	bd10      	pop	{r4, pc}

08000fe6 <__sclose>:
 8000fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fea:	f000 b809 	b.w	8001000 <_close_r>

08000fee <memset>:
 8000fee:	4402      	add	r2, r0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <memset+0xa>
 8000ff6:	4770      	bx	lr
 8000ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8000ffc:	e7f9      	b.n	8000ff2 <memset+0x4>
	...

08001000 <_close_r>:
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4d06      	ldr	r5, [pc, #24]	@ (800101c <_close_r+0x1c>)
 8001004:	2300      	movs	r3, #0
 8001006:	4604      	mov	r4, r0
 8001008:	4608      	mov	r0, r1
 800100a:	602b      	str	r3, [r5, #0]
 800100c:	f7ff fc76 	bl	80008fc <_close>
 8001010:	1c43      	adds	r3, r0, #1
 8001012:	d102      	bne.n	800101a <_close_r+0x1a>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	b103      	cbz	r3, 800101a <_close_r+0x1a>
 8001018:	6023      	str	r3, [r4, #0]
 800101a:	bd38      	pop	{r3, r4, r5, pc}
 800101c:	200001c0 	.word	0x200001c0

08001020 <_lseek_r>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4d07      	ldr	r5, [pc, #28]	@ (8001040 <_lseek_r+0x20>)
 8001024:	4604      	mov	r4, r0
 8001026:	4608      	mov	r0, r1
 8001028:	4611      	mov	r1, r2
 800102a:	2200      	movs	r2, #0
 800102c:	602a      	str	r2, [r5, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	f7ff fc6e 	bl	8000910 <_lseek>
 8001034:	1c43      	adds	r3, r0, #1
 8001036:	d102      	bne.n	800103e <_lseek_r+0x1e>
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	b103      	cbz	r3, 800103e <_lseek_r+0x1e>
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	bd38      	pop	{r3, r4, r5, pc}
 8001040:	200001c0 	.word	0x200001c0

08001044 <_read_r>:
 8001044:	b538      	push	{r3, r4, r5, lr}
 8001046:	4d07      	ldr	r5, [pc, #28]	@ (8001064 <_read_r+0x20>)
 8001048:	4604      	mov	r4, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	2200      	movs	r2, #0
 8001050:	602a      	str	r2, [r5, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	f7ff fc42 	bl	80008dc <_read>
 8001058:	1c43      	adds	r3, r0, #1
 800105a:	d102      	bne.n	8001062 <_read_r+0x1e>
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	b103      	cbz	r3, 8001062 <_read_r+0x1e>
 8001060:	6023      	str	r3, [r4, #0]
 8001062:	bd38      	pop	{r3, r4, r5, pc}
 8001064:	200001c0 	.word	0x200001c0

08001068 <_write_r>:
 8001068:	b538      	push	{r3, r4, r5, lr}
 800106a:	4d07      	ldr	r5, [pc, #28]	@ (8001088 <_write_r+0x20>)
 800106c:	4604      	mov	r4, r0
 800106e:	4608      	mov	r0, r1
 8001070:	4611      	mov	r1, r2
 8001072:	2200      	movs	r2, #0
 8001074:	602a      	str	r2, [r5, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	f7ff fb44 	bl	8000704 <_write>
 800107c:	1c43      	adds	r3, r0, #1
 800107e:	d102      	bne.n	8001086 <_write_r+0x1e>
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	b103      	cbz	r3, 8001086 <_write_r+0x1e>
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	bd38      	pop	{r3, r4, r5, pc}
 8001088:	200001c0 	.word	0x200001c0

0800108c <__errno>:
 800108c:	4b01      	ldr	r3, [pc, #4]	@ (8001094 <__errno+0x8>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000010 	.word	0x20000010

08001098 <__libc_init_array>:
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	4d0d      	ldr	r5, [pc, #52]	@ (80010d0 <__libc_init_array+0x38>)
 800109c:	4c0d      	ldr	r4, [pc, #52]	@ (80010d4 <__libc_init_array+0x3c>)
 800109e:	1b64      	subs	r4, r4, r5
 80010a0:	10a4      	asrs	r4, r4, #2
 80010a2:	2600      	movs	r6, #0
 80010a4:	42a6      	cmp	r6, r4
 80010a6:	d109      	bne.n	80010bc <__libc_init_array+0x24>
 80010a8:	4d0b      	ldr	r5, [pc, #44]	@ (80010d8 <__libc_init_array+0x40>)
 80010aa:	4c0c      	ldr	r4, [pc, #48]	@ (80010dc <__libc_init_array+0x44>)
 80010ac:	f000 fdea 	bl	8001c84 <_init>
 80010b0:	1b64      	subs	r4, r4, r5
 80010b2:	10a4      	asrs	r4, r4, #2
 80010b4:	2600      	movs	r6, #0
 80010b6:	42a6      	cmp	r6, r4
 80010b8:	d105      	bne.n	80010c6 <__libc_init_array+0x2e>
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80010c0:	4798      	blx	r3
 80010c2:	3601      	adds	r6, #1
 80010c4:	e7ee      	b.n	80010a4 <__libc_init_array+0xc>
 80010c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80010ca:	4798      	blx	r3
 80010cc:	3601      	adds	r6, #1
 80010ce:	e7f2      	b.n	80010b6 <__libc_init_array+0x1e>
 80010d0:	08001d08 	.word	0x08001d08
 80010d4:	08001d08 	.word	0x08001d08
 80010d8:	08001d08 	.word	0x08001d08
 80010dc:	08001d0c 	.word	0x08001d0c

080010e0 <__retarget_lock_init_recursive>:
 80010e0:	4770      	bx	lr

080010e2 <__retarget_lock_acquire_recursive>:
 80010e2:	4770      	bx	lr

080010e4 <__retarget_lock_release_recursive>:
 80010e4:	4770      	bx	lr
	...

080010e8 <_free_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4605      	mov	r5, r0
 80010ec:	2900      	cmp	r1, #0
 80010ee:	d041      	beq.n	8001174 <_free_r+0x8c>
 80010f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010f4:	1f0c      	subs	r4, r1, #4
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bfb8      	it	lt
 80010fa:	18e4      	addlt	r4, r4, r3
 80010fc:	f000 f8e0 	bl	80012c0 <__malloc_lock>
 8001100:	4a1d      	ldr	r2, [pc, #116]	@ (8001178 <_free_r+0x90>)
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	b933      	cbnz	r3, 8001114 <_free_r+0x2c>
 8001106:	6063      	str	r3, [r4, #4]
 8001108:	6014      	str	r4, [r2, #0]
 800110a:	4628      	mov	r0, r5
 800110c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001110:	f000 b8dc 	b.w	80012cc <__malloc_unlock>
 8001114:	42a3      	cmp	r3, r4
 8001116:	d908      	bls.n	800112a <_free_r+0x42>
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	1821      	adds	r1, r4, r0
 800111c:	428b      	cmp	r3, r1
 800111e:	bf01      	itttt	eq
 8001120:	6819      	ldreq	r1, [r3, #0]
 8001122:	685b      	ldreq	r3, [r3, #4]
 8001124:	1809      	addeq	r1, r1, r0
 8001126:	6021      	streq	r1, [r4, #0]
 8001128:	e7ed      	b.n	8001106 <_free_r+0x1e>
 800112a:	461a      	mov	r2, r3
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	b10b      	cbz	r3, 8001134 <_free_r+0x4c>
 8001130:	42a3      	cmp	r3, r4
 8001132:	d9fa      	bls.n	800112a <_free_r+0x42>
 8001134:	6811      	ldr	r1, [r2, #0]
 8001136:	1850      	adds	r0, r2, r1
 8001138:	42a0      	cmp	r0, r4
 800113a:	d10b      	bne.n	8001154 <_free_r+0x6c>
 800113c:	6820      	ldr	r0, [r4, #0]
 800113e:	4401      	add	r1, r0
 8001140:	1850      	adds	r0, r2, r1
 8001142:	4283      	cmp	r3, r0
 8001144:	6011      	str	r1, [r2, #0]
 8001146:	d1e0      	bne.n	800110a <_free_r+0x22>
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	6053      	str	r3, [r2, #4]
 800114e:	4408      	add	r0, r1
 8001150:	6010      	str	r0, [r2, #0]
 8001152:	e7da      	b.n	800110a <_free_r+0x22>
 8001154:	d902      	bls.n	800115c <_free_r+0x74>
 8001156:	230c      	movs	r3, #12
 8001158:	602b      	str	r3, [r5, #0]
 800115a:	e7d6      	b.n	800110a <_free_r+0x22>
 800115c:	6820      	ldr	r0, [r4, #0]
 800115e:	1821      	adds	r1, r4, r0
 8001160:	428b      	cmp	r3, r1
 8001162:	bf04      	itt	eq
 8001164:	6819      	ldreq	r1, [r3, #0]
 8001166:	685b      	ldreq	r3, [r3, #4]
 8001168:	6063      	str	r3, [r4, #4]
 800116a:	bf04      	itt	eq
 800116c:	1809      	addeq	r1, r1, r0
 800116e:	6021      	streq	r1, [r4, #0]
 8001170:	6054      	str	r4, [r2, #4]
 8001172:	e7ca      	b.n	800110a <_free_r+0x22>
 8001174:	bd38      	pop	{r3, r4, r5, pc}
 8001176:	bf00      	nop
 8001178:	200001cc 	.word	0x200001cc

0800117c <sbrk_aligned>:
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	4e0f      	ldr	r6, [pc, #60]	@ (80011bc <sbrk_aligned+0x40>)
 8001180:	460c      	mov	r4, r1
 8001182:	6831      	ldr	r1, [r6, #0]
 8001184:	4605      	mov	r5, r0
 8001186:	b911      	cbnz	r1, 800118e <sbrk_aligned+0x12>
 8001188:	f000 fce8 	bl	8001b5c <_sbrk_r>
 800118c:	6030      	str	r0, [r6, #0]
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	f000 fce3 	bl	8001b5c <_sbrk_r>
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	d103      	bne.n	80011a2 <sbrk_aligned+0x26>
 800119a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800119e:	4620      	mov	r0, r4
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
 80011a2:	1cc4      	adds	r4, r0, #3
 80011a4:	f024 0403 	bic.w	r4, r4, #3
 80011a8:	42a0      	cmp	r0, r4
 80011aa:	d0f8      	beq.n	800119e <sbrk_aligned+0x22>
 80011ac:	1a21      	subs	r1, r4, r0
 80011ae:	4628      	mov	r0, r5
 80011b0:	f000 fcd4 	bl	8001b5c <_sbrk_r>
 80011b4:	3001      	adds	r0, #1
 80011b6:	d1f2      	bne.n	800119e <sbrk_aligned+0x22>
 80011b8:	e7ef      	b.n	800119a <sbrk_aligned+0x1e>
 80011ba:	bf00      	nop
 80011bc:	200001c8 	.word	0x200001c8

080011c0 <_malloc_r>:
 80011c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011c4:	1ccd      	adds	r5, r1, #3
 80011c6:	f025 0503 	bic.w	r5, r5, #3
 80011ca:	3508      	adds	r5, #8
 80011cc:	2d0c      	cmp	r5, #12
 80011ce:	bf38      	it	cc
 80011d0:	250c      	movcc	r5, #12
 80011d2:	2d00      	cmp	r5, #0
 80011d4:	4606      	mov	r6, r0
 80011d6:	db01      	blt.n	80011dc <_malloc_r+0x1c>
 80011d8:	42a9      	cmp	r1, r5
 80011da:	d904      	bls.n	80011e6 <_malloc_r+0x26>
 80011dc:	230c      	movs	r3, #12
 80011de:	6033      	str	r3, [r6, #0]
 80011e0:	2000      	movs	r0, #0
 80011e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80012bc <_malloc_r+0xfc>
 80011ea:	f000 f869 	bl	80012c0 <__malloc_lock>
 80011ee:	f8d8 3000 	ldr.w	r3, [r8]
 80011f2:	461c      	mov	r4, r3
 80011f4:	bb44      	cbnz	r4, 8001248 <_malloc_r+0x88>
 80011f6:	4629      	mov	r1, r5
 80011f8:	4630      	mov	r0, r6
 80011fa:	f7ff ffbf 	bl	800117c <sbrk_aligned>
 80011fe:	1c43      	adds	r3, r0, #1
 8001200:	4604      	mov	r4, r0
 8001202:	d158      	bne.n	80012b6 <_malloc_r+0xf6>
 8001204:	f8d8 4000 	ldr.w	r4, [r8]
 8001208:	4627      	mov	r7, r4
 800120a:	2f00      	cmp	r7, #0
 800120c:	d143      	bne.n	8001296 <_malloc_r+0xd6>
 800120e:	2c00      	cmp	r4, #0
 8001210:	d04b      	beq.n	80012aa <_malloc_r+0xea>
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	4639      	mov	r1, r7
 8001216:	4630      	mov	r0, r6
 8001218:	eb04 0903 	add.w	r9, r4, r3
 800121c:	f000 fc9e 	bl	8001b5c <_sbrk_r>
 8001220:	4581      	cmp	r9, r0
 8001222:	d142      	bne.n	80012aa <_malloc_r+0xea>
 8001224:	6821      	ldr	r1, [r4, #0]
 8001226:	1a6d      	subs	r5, r5, r1
 8001228:	4629      	mov	r1, r5
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff ffa6 	bl	800117c <sbrk_aligned>
 8001230:	3001      	adds	r0, #1
 8001232:	d03a      	beq.n	80012aa <_malloc_r+0xea>
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	442b      	add	r3, r5
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	f8d8 3000 	ldr.w	r3, [r8]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	bb62      	cbnz	r2, 800129c <_malloc_r+0xdc>
 8001242:	f8c8 7000 	str.w	r7, [r8]
 8001246:	e00f      	b.n	8001268 <_malloc_r+0xa8>
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	1b52      	subs	r2, r2, r5
 800124c:	d420      	bmi.n	8001290 <_malloc_r+0xd0>
 800124e:	2a0b      	cmp	r2, #11
 8001250:	d917      	bls.n	8001282 <_malloc_r+0xc2>
 8001252:	1961      	adds	r1, r4, r5
 8001254:	42a3      	cmp	r3, r4
 8001256:	6025      	str	r5, [r4, #0]
 8001258:	bf18      	it	ne
 800125a:	6059      	strne	r1, [r3, #4]
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	bf08      	it	eq
 8001260:	f8c8 1000 	streq.w	r1, [r8]
 8001264:	5162      	str	r2, [r4, r5]
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	4630      	mov	r0, r6
 800126a:	f000 f82f 	bl	80012cc <__malloc_unlock>
 800126e:	f104 000b 	add.w	r0, r4, #11
 8001272:	1d23      	adds	r3, r4, #4
 8001274:	f020 0007 	bic.w	r0, r0, #7
 8001278:	1ac2      	subs	r2, r0, r3
 800127a:	bf1c      	itt	ne
 800127c:	1a1b      	subne	r3, r3, r0
 800127e:	50a3      	strne	r3, [r4, r2]
 8001280:	e7af      	b.n	80011e2 <_malloc_r+0x22>
 8001282:	6862      	ldr	r2, [r4, #4]
 8001284:	42a3      	cmp	r3, r4
 8001286:	bf0c      	ite	eq
 8001288:	f8c8 2000 	streq.w	r2, [r8]
 800128c:	605a      	strne	r2, [r3, #4]
 800128e:	e7eb      	b.n	8001268 <_malloc_r+0xa8>
 8001290:	4623      	mov	r3, r4
 8001292:	6864      	ldr	r4, [r4, #4]
 8001294:	e7ae      	b.n	80011f4 <_malloc_r+0x34>
 8001296:	463c      	mov	r4, r7
 8001298:	687f      	ldr	r7, [r7, #4]
 800129a:	e7b6      	b.n	800120a <_malloc_r+0x4a>
 800129c:	461a      	mov	r2, r3
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	42a3      	cmp	r3, r4
 80012a2:	d1fb      	bne.n	800129c <_malloc_r+0xdc>
 80012a4:	2300      	movs	r3, #0
 80012a6:	6053      	str	r3, [r2, #4]
 80012a8:	e7de      	b.n	8001268 <_malloc_r+0xa8>
 80012aa:	230c      	movs	r3, #12
 80012ac:	6033      	str	r3, [r6, #0]
 80012ae:	4630      	mov	r0, r6
 80012b0:	f000 f80c 	bl	80012cc <__malloc_unlock>
 80012b4:	e794      	b.n	80011e0 <_malloc_r+0x20>
 80012b6:	6005      	str	r5, [r0, #0]
 80012b8:	e7d6      	b.n	8001268 <_malloc_r+0xa8>
 80012ba:	bf00      	nop
 80012bc:	200001cc 	.word	0x200001cc

080012c0 <__malloc_lock>:
 80012c0:	4801      	ldr	r0, [pc, #4]	@ (80012c8 <__malloc_lock+0x8>)
 80012c2:	f7ff bf0e 	b.w	80010e2 <__retarget_lock_acquire_recursive>
 80012c6:	bf00      	nop
 80012c8:	200001c4 	.word	0x200001c4

080012cc <__malloc_unlock>:
 80012cc:	4801      	ldr	r0, [pc, #4]	@ (80012d4 <__malloc_unlock+0x8>)
 80012ce:	f7ff bf09 	b.w	80010e4 <__retarget_lock_release_recursive>
 80012d2:	bf00      	nop
 80012d4:	200001c4 	.word	0x200001c4

080012d8 <__sfputc_r>:
 80012d8:	6893      	ldr	r3, [r2, #8]
 80012da:	3b01      	subs	r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	b410      	push	{r4}
 80012e0:	6093      	str	r3, [r2, #8]
 80012e2:	da08      	bge.n	80012f6 <__sfputc_r+0x1e>
 80012e4:	6994      	ldr	r4, [r2, #24]
 80012e6:	42a3      	cmp	r3, r4
 80012e8:	db01      	blt.n	80012ee <__sfputc_r+0x16>
 80012ea:	290a      	cmp	r1, #10
 80012ec:	d103      	bne.n	80012f6 <__sfputc_r+0x1e>
 80012ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012f2:	f000 bb9f 	b.w	8001a34 <__swbuf_r>
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	1c58      	adds	r0, r3, #1
 80012fa:	6010      	str	r0, [r2, #0]
 80012fc:	7019      	strb	r1, [r3, #0]
 80012fe:	4608      	mov	r0, r1
 8001300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001304:	4770      	bx	lr

08001306 <__sfputs_r>:
 8001306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001308:	4606      	mov	r6, r0
 800130a:	460f      	mov	r7, r1
 800130c:	4614      	mov	r4, r2
 800130e:	18d5      	adds	r5, r2, r3
 8001310:	42ac      	cmp	r4, r5
 8001312:	d101      	bne.n	8001318 <__sfputs_r+0x12>
 8001314:	2000      	movs	r0, #0
 8001316:	e007      	b.n	8001328 <__sfputs_r+0x22>
 8001318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800131c:	463a      	mov	r2, r7
 800131e:	4630      	mov	r0, r6
 8001320:	f7ff ffda 	bl	80012d8 <__sfputc_r>
 8001324:	1c43      	adds	r3, r0, #1
 8001326:	d1f3      	bne.n	8001310 <__sfputs_r+0xa>
 8001328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800132c <_vfiprintf_r>:
 800132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001330:	460d      	mov	r5, r1
 8001332:	b09d      	sub	sp, #116	@ 0x74
 8001334:	4614      	mov	r4, r2
 8001336:	4698      	mov	r8, r3
 8001338:	4606      	mov	r6, r0
 800133a:	b118      	cbz	r0, 8001344 <_vfiprintf_r+0x18>
 800133c:	6a03      	ldr	r3, [r0, #32]
 800133e:	b90b      	cbnz	r3, 8001344 <_vfiprintf_r+0x18>
 8001340:	f7ff fdc2 	bl	8000ec8 <__sinit>
 8001344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001346:	07d9      	lsls	r1, r3, #31
 8001348:	d405      	bmi.n	8001356 <_vfiprintf_r+0x2a>
 800134a:	89ab      	ldrh	r3, [r5, #12]
 800134c:	059a      	lsls	r2, r3, #22
 800134e:	d402      	bmi.n	8001356 <_vfiprintf_r+0x2a>
 8001350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001352:	f7ff fec6 	bl	80010e2 <__retarget_lock_acquire_recursive>
 8001356:	89ab      	ldrh	r3, [r5, #12]
 8001358:	071b      	lsls	r3, r3, #28
 800135a:	d501      	bpl.n	8001360 <_vfiprintf_r+0x34>
 800135c:	692b      	ldr	r3, [r5, #16]
 800135e:	b99b      	cbnz	r3, 8001388 <_vfiprintf_r+0x5c>
 8001360:	4629      	mov	r1, r5
 8001362:	4630      	mov	r0, r6
 8001364:	f000 fba4 	bl	8001ab0 <__swsetup_r>
 8001368:	b170      	cbz	r0, 8001388 <_vfiprintf_r+0x5c>
 800136a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800136c:	07dc      	lsls	r4, r3, #31
 800136e:	d504      	bpl.n	800137a <_vfiprintf_r+0x4e>
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001374:	b01d      	add	sp, #116	@ 0x74
 8001376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800137a:	89ab      	ldrh	r3, [r5, #12]
 800137c:	0598      	lsls	r0, r3, #22
 800137e:	d4f7      	bmi.n	8001370 <_vfiprintf_r+0x44>
 8001380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001382:	f7ff feaf 	bl	80010e4 <__retarget_lock_release_recursive>
 8001386:	e7f3      	b.n	8001370 <_vfiprintf_r+0x44>
 8001388:	2300      	movs	r3, #0
 800138a:	9309      	str	r3, [sp, #36]	@ 0x24
 800138c:	2320      	movs	r3, #32
 800138e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001392:	f8cd 800c 	str.w	r8, [sp, #12]
 8001396:	2330      	movs	r3, #48	@ 0x30
 8001398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001548 <_vfiprintf_r+0x21c>
 800139c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80013a0:	f04f 0901 	mov.w	r9, #1
 80013a4:	4623      	mov	r3, r4
 80013a6:	469a      	mov	sl, r3
 80013a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013ac:	b10a      	cbz	r2, 80013b2 <_vfiprintf_r+0x86>
 80013ae:	2a25      	cmp	r2, #37	@ 0x25
 80013b0:	d1f9      	bne.n	80013a6 <_vfiprintf_r+0x7a>
 80013b2:	ebba 0b04 	subs.w	fp, sl, r4
 80013b6:	d00b      	beq.n	80013d0 <_vfiprintf_r+0xa4>
 80013b8:	465b      	mov	r3, fp
 80013ba:	4622      	mov	r2, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	4630      	mov	r0, r6
 80013c0:	f7ff ffa1 	bl	8001306 <__sfputs_r>
 80013c4:	3001      	adds	r0, #1
 80013c6:	f000 80a7 	beq.w	8001518 <_vfiprintf_r+0x1ec>
 80013ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013cc:	445a      	add	r2, fp
 80013ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80013d0:	f89a 3000 	ldrb.w	r3, [sl]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 809f 	beq.w	8001518 <_vfiprintf_r+0x1ec>
 80013da:	2300      	movs	r3, #0
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013e4:	f10a 0a01 	add.w	sl, sl, #1
 80013e8:	9304      	str	r3, [sp, #16]
 80013ea:	9307      	str	r3, [sp, #28]
 80013ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80013f2:	4654      	mov	r4, sl
 80013f4:	2205      	movs	r2, #5
 80013f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013fa:	4853      	ldr	r0, [pc, #332]	@ (8001548 <_vfiprintf_r+0x21c>)
 80013fc:	f7fe fef0 	bl	80001e0 <memchr>
 8001400:	9a04      	ldr	r2, [sp, #16]
 8001402:	b9d8      	cbnz	r0, 800143c <_vfiprintf_r+0x110>
 8001404:	06d1      	lsls	r1, r2, #27
 8001406:	bf44      	itt	mi
 8001408:	2320      	movmi	r3, #32
 800140a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800140e:	0713      	lsls	r3, r2, #28
 8001410:	bf44      	itt	mi
 8001412:	232b      	movmi	r3, #43	@ 0x2b
 8001414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001418:	f89a 3000 	ldrb.w	r3, [sl]
 800141c:	2b2a      	cmp	r3, #42	@ 0x2a
 800141e:	d015      	beq.n	800144c <_vfiprintf_r+0x120>
 8001420:	9a07      	ldr	r2, [sp, #28]
 8001422:	4654      	mov	r4, sl
 8001424:	2000      	movs	r0, #0
 8001426:	f04f 0c0a 	mov.w	ip, #10
 800142a:	4621      	mov	r1, r4
 800142c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001430:	3b30      	subs	r3, #48	@ 0x30
 8001432:	2b09      	cmp	r3, #9
 8001434:	d94b      	bls.n	80014ce <_vfiprintf_r+0x1a2>
 8001436:	b1b0      	cbz	r0, 8001466 <_vfiprintf_r+0x13a>
 8001438:	9207      	str	r2, [sp, #28]
 800143a:	e014      	b.n	8001466 <_vfiprintf_r+0x13a>
 800143c:	eba0 0308 	sub.w	r3, r0, r8
 8001440:	fa09 f303 	lsl.w	r3, r9, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	9304      	str	r3, [sp, #16]
 8001448:	46a2      	mov	sl, r4
 800144a:	e7d2      	b.n	80013f2 <_vfiprintf_r+0xc6>
 800144c:	9b03      	ldr	r3, [sp, #12]
 800144e:	1d19      	adds	r1, r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	9103      	str	r1, [sp, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	bfbb      	ittet	lt
 8001458:	425b      	neglt	r3, r3
 800145a:	f042 0202 	orrlt.w	r2, r2, #2
 800145e:	9307      	strge	r3, [sp, #28]
 8001460:	9307      	strlt	r3, [sp, #28]
 8001462:	bfb8      	it	lt
 8001464:	9204      	strlt	r2, [sp, #16]
 8001466:	7823      	ldrb	r3, [r4, #0]
 8001468:	2b2e      	cmp	r3, #46	@ 0x2e
 800146a:	d10a      	bne.n	8001482 <_vfiprintf_r+0x156>
 800146c:	7863      	ldrb	r3, [r4, #1]
 800146e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001470:	d132      	bne.n	80014d8 <_vfiprintf_r+0x1ac>
 8001472:	9b03      	ldr	r3, [sp, #12]
 8001474:	1d1a      	adds	r2, r3, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	9203      	str	r2, [sp, #12]
 800147a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800147e:	3402      	adds	r4, #2
 8001480:	9305      	str	r3, [sp, #20]
 8001482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001558 <_vfiprintf_r+0x22c>
 8001486:	7821      	ldrb	r1, [r4, #0]
 8001488:	2203      	movs	r2, #3
 800148a:	4650      	mov	r0, sl
 800148c:	f7fe fea8 	bl	80001e0 <memchr>
 8001490:	b138      	cbz	r0, 80014a2 <_vfiprintf_r+0x176>
 8001492:	9b04      	ldr	r3, [sp, #16]
 8001494:	eba0 000a 	sub.w	r0, r0, sl
 8001498:	2240      	movs	r2, #64	@ 0x40
 800149a:	4082      	lsls	r2, r0
 800149c:	4313      	orrs	r3, r2
 800149e:	3401      	adds	r4, #1
 80014a0:	9304      	str	r3, [sp, #16]
 80014a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014a6:	4829      	ldr	r0, [pc, #164]	@ (800154c <_vfiprintf_r+0x220>)
 80014a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80014ac:	2206      	movs	r2, #6
 80014ae:	f7fe fe97 	bl	80001e0 <memchr>
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d03f      	beq.n	8001536 <_vfiprintf_r+0x20a>
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <_vfiprintf_r+0x224>)
 80014b8:	bb1b      	cbnz	r3, 8001502 <_vfiprintf_r+0x1d6>
 80014ba:	9b03      	ldr	r3, [sp, #12]
 80014bc:	3307      	adds	r3, #7
 80014be:	f023 0307 	bic.w	r3, r3, #7
 80014c2:	3308      	adds	r3, #8
 80014c4:	9303      	str	r3, [sp, #12]
 80014c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014c8:	443b      	add	r3, r7
 80014ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80014cc:	e76a      	b.n	80013a4 <_vfiprintf_r+0x78>
 80014ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80014d2:	460c      	mov	r4, r1
 80014d4:	2001      	movs	r0, #1
 80014d6:	e7a8      	b.n	800142a <_vfiprintf_r+0xfe>
 80014d8:	2300      	movs	r3, #0
 80014da:	3401      	adds	r4, #1
 80014dc:	9305      	str	r3, [sp, #20]
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 0c0a 	mov.w	ip, #10
 80014e4:	4620      	mov	r0, r4
 80014e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014ea:	3a30      	subs	r2, #48	@ 0x30
 80014ec:	2a09      	cmp	r2, #9
 80014ee:	d903      	bls.n	80014f8 <_vfiprintf_r+0x1cc>
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0c6      	beq.n	8001482 <_vfiprintf_r+0x156>
 80014f4:	9105      	str	r1, [sp, #20]
 80014f6:	e7c4      	b.n	8001482 <_vfiprintf_r+0x156>
 80014f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80014fc:	4604      	mov	r4, r0
 80014fe:	2301      	movs	r3, #1
 8001500:	e7f0      	b.n	80014e4 <_vfiprintf_r+0x1b8>
 8001502:	ab03      	add	r3, sp, #12
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	462a      	mov	r2, r5
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <_vfiprintf_r+0x228>)
 800150a:	a904      	add	r1, sp, #16
 800150c:	4630      	mov	r0, r6
 800150e:	f3af 8000 	nop.w
 8001512:	4607      	mov	r7, r0
 8001514:	1c78      	adds	r0, r7, #1
 8001516:	d1d6      	bne.n	80014c6 <_vfiprintf_r+0x19a>
 8001518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800151a:	07d9      	lsls	r1, r3, #31
 800151c:	d405      	bmi.n	800152a <_vfiprintf_r+0x1fe>
 800151e:	89ab      	ldrh	r3, [r5, #12]
 8001520:	059a      	lsls	r2, r3, #22
 8001522:	d402      	bmi.n	800152a <_vfiprintf_r+0x1fe>
 8001524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001526:	f7ff fddd 	bl	80010e4 <__retarget_lock_release_recursive>
 800152a:	89ab      	ldrh	r3, [r5, #12]
 800152c:	065b      	lsls	r3, r3, #25
 800152e:	f53f af1f 	bmi.w	8001370 <_vfiprintf_r+0x44>
 8001532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001534:	e71e      	b.n	8001374 <_vfiprintf_r+0x48>
 8001536:	ab03      	add	r3, sp, #12
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	462a      	mov	r2, r5
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <_vfiprintf_r+0x228>)
 800153e:	a904      	add	r1, sp, #16
 8001540:	4630      	mov	r0, r6
 8001542:	f000 f879 	bl	8001638 <_printf_i>
 8001546:	e7e4      	b.n	8001512 <_vfiprintf_r+0x1e6>
 8001548:	08001ccc 	.word	0x08001ccc
 800154c:	08001cd6 	.word	0x08001cd6
 8001550:	00000000 	.word	0x00000000
 8001554:	08001307 	.word	0x08001307
 8001558:	08001cd2 	.word	0x08001cd2

0800155c <_printf_common>:
 800155c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001560:	4616      	mov	r6, r2
 8001562:	4698      	mov	r8, r3
 8001564:	688a      	ldr	r2, [r1, #8]
 8001566:	690b      	ldr	r3, [r1, #16]
 8001568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800156c:	4293      	cmp	r3, r2
 800156e:	bfb8      	it	lt
 8001570:	4613      	movlt	r3, r2
 8001572:	6033      	str	r3, [r6, #0]
 8001574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001578:	4607      	mov	r7, r0
 800157a:	460c      	mov	r4, r1
 800157c:	b10a      	cbz	r2, 8001582 <_printf_common+0x26>
 800157e:	3301      	adds	r3, #1
 8001580:	6033      	str	r3, [r6, #0]
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	0699      	lsls	r1, r3, #26
 8001586:	bf42      	ittt	mi
 8001588:	6833      	ldrmi	r3, [r6, #0]
 800158a:	3302      	addmi	r3, #2
 800158c:	6033      	strmi	r3, [r6, #0]
 800158e:	6825      	ldr	r5, [r4, #0]
 8001590:	f015 0506 	ands.w	r5, r5, #6
 8001594:	d106      	bne.n	80015a4 <_printf_common+0x48>
 8001596:	f104 0a19 	add.w	sl, r4, #25
 800159a:	68e3      	ldr	r3, [r4, #12]
 800159c:	6832      	ldr	r2, [r6, #0]
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	42ab      	cmp	r3, r5
 80015a2:	dc26      	bgt.n	80015f2 <_printf_common+0x96>
 80015a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	3b00      	subs	r3, #0
 80015ac:	bf18      	it	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	0692      	lsls	r2, r2, #26
 80015b2:	d42b      	bmi.n	800160c <_printf_common+0xb0>
 80015b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80015b8:	4641      	mov	r1, r8
 80015ba:	4638      	mov	r0, r7
 80015bc:	47c8      	blx	r9
 80015be:	3001      	adds	r0, #1
 80015c0:	d01e      	beq.n	8001600 <_printf_common+0xa4>
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	6922      	ldr	r2, [r4, #16]
 80015c6:	f003 0306 	and.w	r3, r3, #6
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf02      	ittt	eq
 80015ce:	68e5      	ldreq	r5, [r4, #12]
 80015d0:	6833      	ldreq	r3, [r6, #0]
 80015d2:	1aed      	subeq	r5, r5, r3
 80015d4:	68a3      	ldr	r3, [r4, #8]
 80015d6:	bf0c      	ite	eq
 80015d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015dc:	2500      	movne	r5, #0
 80015de:	4293      	cmp	r3, r2
 80015e0:	bfc4      	itt	gt
 80015e2:	1a9b      	subgt	r3, r3, r2
 80015e4:	18ed      	addgt	r5, r5, r3
 80015e6:	2600      	movs	r6, #0
 80015e8:	341a      	adds	r4, #26
 80015ea:	42b5      	cmp	r5, r6
 80015ec:	d11a      	bne.n	8001624 <_printf_common+0xc8>
 80015ee:	2000      	movs	r0, #0
 80015f0:	e008      	b.n	8001604 <_printf_common+0xa8>
 80015f2:	2301      	movs	r3, #1
 80015f4:	4652      	mov	r2, sl
 80015f6:	4641      	mov	r1, r8
 80015f8:	4638      	mov	r0, r7
 80015fa:	47c8      	blx	r9
 80015fc:	3001      	adds	r0, #1
 80015fe:	d103      	bne.n	8001608 <_printf_common+0xac>
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001608:	3501      	adds	r5, #1
 800160a:	e7c6      	b.n	800159a <_printf_common+0x3e>
 800160c:	18e1      	adds	r1, r4, r3
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	2030      	movs	r0, #48	@ 0x30
 8001612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001616:	4422      	add	r2, r4
 8001618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800161c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001620:	3302      	adds	r3, #2
 8001622:	e7c7      	b.n	80015b4 <_printf_common+0x58>
 8001624:	2301      	movs	r3, #1
 8001626:	4622      	mov	r2, r4
 8001628:	4641      	mov	r1, r8
 800162a:	4638      	mov	r0, r7
 800162c:	47c8      	blx	r9
 800162e:	3001      	adds	r0, #1
 8001630:	d0e6      	beq.n	8001600 <_printf_common+0xa4>
 8001632:	3601      	adds	r6, #1
 8001634:	e7d9      	b.n	80015ea <_printf_common+0x8e>
	...

08001638 <_printf_i>:
 8001638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800163c:	7e0f      	ldrb	r7, [r1, #24]
 800163e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001640:	2f78      	cmp	r7, #120	@ 0x78
 8001642:	4691      	mov	r9, r2
 8001644:	4680      	mov	r8, r0
 8001646:	460c      	mov	r4, r1
 8001648:	469a      	mov	sl, r3
 800164a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800164e:	d807      	bhi.n	8001660 <_printf_i+0x28>
 8001650:	2f62      	cmp	r7, #98	@ 0x62
 8001652:	d80a      	bhi.n	800166a <_printf_i+0x32>
 8001654:	2f00      	cmp	r7, #0
 8001656:	f000 80d1 	beq.w	80017fc <_printf_i+0x1c4>
 800165a:	2f58      	cmp	r7, #88	@ 0x58
 800165c:	f000 80b8 	beq.w	80017d0 <_printf_i+0x198>
 8001660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001668:	e03a      	b.n	80016e0 <_printf_i+0xa8>
 800166a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800166e:	2b15      	cmp	r3, #21
 8001670:	d8f6      	bhi.n	8001660 <_printf_i+0x28>
 8001672:	a101      	add	r1, pc, #4	@ (adr r1, 8001678 <_printf_i+0x40>)
 8001674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001678:	080016d1 	.word	0x080016d1
 800167c:	080016e5 	.word	0x080016e5
 8001680:	08001661 	.word	0x08001661
 8001684:	08001661 	.word	0x08001661
 8001688:	08001661 	.word	0x08001661
 800168c:	08001661 	.word	0x08001661
 8001690:	080016e5 	.word	0x080016e5
 8001694:	08001661 	.word	0x08001661
 8001698:	08001661 	.word	0x08001661
 800169c:	08001661 	.word	0x08001661
 80016a0:	08001661 	.word	0x08001661
 80016a4:	080017e3 	.word	0x080017e3
 80016a8:	0800170f 	.word	0x0800170f
 80016ac:	0800179d 	.word	0x0800179d
 80016b0:	08001661 	.word	0x08001661
 80016b4:	08001661 	.word	0x08001661
 80016b8:	08001805 	.word	0x08001805
 80016bc:	08001661 	.word	0x08001661
 80016c0:	0800170f 	.word	0x0800170f
 80016c4:	08001661 	.word	0x08001661
 80016c8:	08001661 	.word	0x08001661
 80016cc:	080017a5 	.word	0x080017a5
 80016d0:	6833      	ldr	r3, [r6, #0]
 80016d2:	1d1a      	adds	r2, r3, #4
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6032      	str	r2, [r6, #0]
 80016d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80016e0:	2301      	movs	r3, #1
 80016e2:	e09c      	b.n	800181e <_printf_i+0x1e6>
 80016e4:	6833      	ldr	r3, [r6, #0]
 80016e6:	6820      	ldr	r0, [r4, #0]
 80016e8:	1d19      	adds	r1, r3, #4
 80016ea:	6031      	str	r1, [r6, #0]
 80016ec:	0606      	lsls	r6, r0, #24
 80016ee:	d501      	bpl.n	80016f4 <_printf_i+0xbc>
 80016f0:	681d      	ldr	r5, [r3, #0]
 80016f2:	e003      	b.n	80016fc <_printf_i+0xc4>
 80016f4:	0645      	lsls	r5, r0, #25
 80016f6:	d5fb      	bpl.n	80016f0 <_printf_i+0xb8>
 80016f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	da03      	bge.n	8001708 <_printf_i+0xd0>
 8001700:	232d      	movs	r3, #45	@ 0x2d
 8001702:	426d      	negs	r5, r5
 8001704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001708:	4858      	ldr	r0, [pc, #352]	@ (800186c <_printf_i+0x234>)
 800170a:	230a      	movs	r3, #10
 800170c:	e011      	b.n	8001732 <_printf_i+0xfa>
 800170e:	6821      	ldr	r1, [r4, #0]
 8001710:	6833      	ldr	r3, [r6, #0]
 8001712:	0608      	lsls	r0, r1, #24
 8001714:	f853 5b04 	ldr.w	r5, [r3], #4
 8001718:	d402      	bmi.n	8001720 <_printf_i+0xe8>
 800171a:	0649      	lsls	r1, r1, #25
 800171c:	bf48      	it	mi
 800171e:	b2ad      	uxthmi	r5, r5
 8001720:	2f6f      	cmp	r7, #111	@ 0x6f
 8001722:	4852      	ldr	r0, [pc, #328]	@ (800186c <_printf_i+0x234>)
 8001724:	6033      	str	r3, [r6, #0]
 8001726:	bf14      	ite	ne
 8001728:	230a      	movne	r3, #10
 800172a:	2308      	moveq	r3, #8
 800172c:	2100      	movs	r1, #0
 800172e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001732:	6866      	ldr	r6, [r4, #4]
 8001734:	60a6      	str	r6, [r4, #8]
 8001736:	2e00      	cmp	r6, #0
 8001738:	db05      	blt.n	8001746 <_printf_i+0x10e>
 800173a:	6821      	ldr	r1, [r4, #0]
 800173c:	432e      	orrs	r6, r5
 800173e:	f021 0104 	bic.w	r1, r1, #4
 8001742:	6021      	str	r1, [r4, #0]
 8001744:	d04b      	beq.n	80017de <_printf_i+0x1a6>
 8001746:	4616      	mov	r6, r2
 8001748:	fbb5 f1f3 	udiv	r1, r5, r3
 800174c:	fb03 5711 	mls	r7, r3, r1, r5
 8001750:	5dc7      	ldrb	r7, [r0, r7]
 8001752:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001756:	462f      	mov	r7, r5
 8001758:	42bb      	cmp	r3, r7
 800175a:	460d      	mov	r5, r1
 800175c:	d9f4      	bls.n	8001748 <_printf_i+0x110>
 800175e:	2b08      	cmp	r3, #8
 8001760:	d10b      	bne.n	800177a <_printf_i+0x142>
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	07df      	lsls	r7, r3, #31
 8001766:	d508      	bpl.n	800177a <_printf_i+0x142>
 8001768:	6923      	ldr	r3, [r4, #16]
 800176a:	6861      	ldr	r1, [r4, #4]
 800176c:	4299      	cmp	r1, r3
 800176e:	bfde      	ittt	le
 8001770:	2330      	movle	r3, #48	@ 0x30
 8001772:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001776:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800177a:	1b92      	subs	r2, r2, r6
 800177c:	6122      	str	r2, [r4, #16]
 800177e:	f8cd a000 	str.w	sl, [sp]
 8001782:	464b      	mov	r3, r9
 8001784:	aa03      	add	r2, sp, #12
 8001786:	4621      	mov	r1, r4
 8001788:	4640      	mov	r0, r8
 800178a:	f7ff fee7 	bl	800155c <_printf_common>
 800178e:	3001      	adds	r0, #1
 8001790:	d14a      	bne.n	8001828 <_printf_i+0x1f0>
 8001792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001796:	b004      	add	sp, #16
 8001798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	f043 0320 	orr.w	r3, r3, #32
 80017a2:	6023      	str	r3, [r4, #0]
 80017a4:	4832      	ldr	r0, [pc, #200]	@ (8001870 <_printf_i+0x238>)
 80017a6:	2778      	movs	r7, #120	@ 0x78
 80017a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	6831      	ldr	r1, [r6, #0]
 80017b0:	061f      	lsls	r7, r3, #24
 80017b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80017b6:	d402      	bmi.n	80017be <_printf_i+0x186>
 80017b8:	065f      	lsls	r7, r3, #25
 80017ba:	bf48      	it	mi
 80017bc:	b2ad      	uxthmi	r5, r5
 80017be:	6031      	str	r1, [r6, #0]
 80017c0:	07d9      	lsls	r1, r3, #31
 80017c2:	bf44      	itt	mi
 80017c4:	f043 0320 	orrmi.w	r3, r3, #32
 80017c8:	6023      	strmi	r3, [r4, #0]
 80017ca:	b11d      	cbz	r5, 80017d4 <_printf_i+0x19c>
 80017cc:	2310      	movs	r3, #16
 80017ce:	e7ad      	b.n	800172c <_printf_i+0xf4>
 80017d0:	4826      	ldr	r0, [pc, #152]	@ (800186c <_printf_i+0x234>)
 80017d2:	e7e9      	b.n	80017a8 <_printf_i+0x170>
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	f023 0320 	bic.w	r3, r3, #32
 80017da:	6023      	str	r3, [r4, #0]
 80017dc:	e7f6      	b.n	80017cc <_printf_i+0x194>
 80017de:	4616      	mov	r6, r2
 80017e0:	e7bd      	b.n	800175e <_printf_i+0x126>
 80017e2:	6833      	ldr	r3, [r6, #0]
 80017e4:	6825      	ldr	r5, [r4, #0]
 80017e6:	6961      	ldr	r1, [r4, #20]
 80017e8:	1d18      	adds	r0, r3, #4
 80017ea:	6030      	str	r0, [r6, #0]
 80017ec:	062e      	lsls	r6, r5, #24
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	d501      	bpl.n	80017f6 <_printf_i+0x1be>
 80017f2:	6019      	str	r1, [r3, #0]
 80017f4:	e002      	b.n	80017fc <_printf_i+0x1c4>
 80017f6:	0668      	lsls	r0, r5, #25
 80017f8:	d5fb      	bpl.n	80017f2 <_printf_i+0x1ba>
 80017fa:	8019      	strh	r1, [r3, #0]
 80017fc:	2300      	movs	r3, #0
 80017fe:	6123      	str	r3, [r4, #16]
 8001800:	4616      	mov	r6, r2
 8001802:	e7bc      	b.n	800177e <_printf_i+0x146>
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	1d1a      	adds	r2, r3, #4
 8001808:	6032      	str	r2, [r6, #0]
 800180a:	681e      	ldr	r6, [r3, #0]
 800180c:	6862      	ldr	r2, [r4, #4]
 800180e:	2100      	movs	r1, #0
 8001810:	4630      	mov	r0, r6
 8001812:	f7fe fce5 	bl	80001e0 <memchr>
 8001816:	b108      	cbz	r0, 800181c <_printf_i+0x1e4>
 8001818:	1b80      	subs	r0, r0, r6
 800181a:	6060      	str	r0, [r4, #4]
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	6123      	str	r3, [r4, #16]
 8001820:	2300      	movs	r3, #0
 8001822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001826:	e7aa      	b.n	800177e <_printf_i+0x146>
 8001828:	6923      	ldr	r3, [r4, #16]
 800182a:	4632      	mov	r2, r6
 800182c:	4649      	mov	r1, r9
 800182e:	4640      	mov	r0, r8
 8001830:	47d0      	blx	sl
 8001832:	3001      	adds	r0, #1
 8001834:	d0ad      	beq.n	8001792 <_printf_i+0x15a>
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	079b      	lsls	r3, r3, #30
 800183a:	d413      	bmi.n	8001864 <_printf_i+0x22c>
 800183c:	68e0      	ldr	r0, [r4, #12]
 800183e:	9b03      	ldr	r3, [sp, #12]
 8001840:	4298      	cmp	r0, r3
 8001842:	bfb8      	it	lt
 8001844:	4618      	movlt	r0, r3
 8001846:	e7a6      	b.n	8001796 <_printf_i+0x15e>
 8001848:	2301      	movs	r3, #1
 800184a:	4632      	mov	r2, r6
 800184c:	4649      	mov	r1, r9
 800184e:	4640      	mov	r0, r8
 8001850:	47d0      	blx	sl
 8001852:	3001      	adds	r0, #1
 8001854:	d09d      	beq.n	8001792 <_printf_i+0x15a>
 8001856:	3501      	adds	r5, #1
 8001858:	68e3      	ldr	r3, [r4, #12]
 800185a:	9903      	ldr	r1, [sp, #12]
 800185c:	1a5b      	subs	r3, r3, r1
 800185e:	42ab      	cmp	r3, r5
 8001860:	dcf2      	bgt.n	8001848 <_printf_i+0x210>
 8001862:	e7eb      	b.n	800183c <_printf_i+0x204>
 8001864:	2500      	movs	r5, #0
 8001866:	f104 0619 	add.w	r6, r4, #25
 800186a:	e7f5      	b.n	8001858 <_printf_i+0x220>
 800186c:	08001cdd 	.word	0x08001cdd
 8001870:	08001cee 	.word	0x08001cee

08001874 <__sflush_r>:
 8001874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800187c:	0716      	lsls	r6, r2, #28
 800187e:	4605      	mov	r5, r0
 8001880:	460c      	mov	r4, r1
 8001882:	d454      	bmi.n	800192e <__sflush_r+0xba>
 8001884:	684b      	ldr	r3, [r1, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	dc02      	bgt.n	8001890 <__sflush_r+0x1c>
 800188a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd48      	ble.n	8001922 <__sflush_r+0xae>
 8001890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001892:	2e00      	cmp	r6, #0
 8001894:	d045      	beq.n	8001922 <__sflush_r+0xae>
 8001896:	2300      	movs	r3, #0
 8001898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800189c:	682f      	ldr	r7, [r5, #0]
 800189e:	6a21      	ldr	r1, [r4, #32]
 80018a0:	602b      	str	r3, [r5, #0]
 80018a2:	d030      	beq.n	8001906 <__sflush_r+0x92>
 80018a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018a6:	89a3      	ldrh	r3, [r4, #12]
 80018a8:	0759      	lsls	r1, r3, #29
 80018aa:	d505      	bpl.n	80018b8 <__sflush_r+0x44>
 80018ac:	6863      	ldr	r3, [r4, #4]
 80018ae:	1ad2      	subs	r2, r2, r3
 80018b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80018b2:	b10b      	cbz	r3, 80018b8 <__sflush_r+0x44>
 80018b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018b6:	1ad2      	subs	r2, r2, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018bc:	6a21      	ldr	r1, [r4, #32]
 80018be:	4628      	mov	r0, r5
 80018c0:	47b0      	blx	r6
 80018c2:	1c43      	adds	r3, r0, #1
 80018c4:	89a3      	ldrh	r3, [r4, #12]
 80018c6:	d106      	bne.n	80018d6 <__sflush_r+0x62>
 80018c8:	6829      	ldr	r1, [r5, #0]
 80018ca:	291d      	cmp	r1, #29
 80018cc:	d82b      	bhi.n	8001926 <__sflush_r+0xb2>
 80018ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001978 <__sflush_r+0x104>)
 80018d0:	40ca      	lsrs	r2, r1
 80018d2:	07d6      	lsls	r6, r2, #31
 80018d4:	d527      	bpl.n	8001926 <__sflush_r+0xb2>
 80018d6:	2200      	movs	r2, #0
 80018d8:	6062      	str	r2, [r4, #4]
 80018da:	04d9      	lsls	r1, r3, #19
 80018dc:	6922      	ldr	r2, [r4, #16]
 80018de:	6022      	str	r2, [r4, #0]
 80018e0:	d504      	bpl.n	80018ec <__sflush_r+0x78>
 80018e2:	1c42      	adds	r2, r0, #1
 80018e4:	d101      	bne.n	80018ea <__sflush_r+0x76>
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	b903      	cbnz	r3, 80018ec <__sflush_r+0x78>
 80018ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80018ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018ee:	602f      	str	r7, [r5, #0]
 80018f0:	b1b9      	cbz	r1, 8001922 <__sflush_r+0xae>
 80018f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018f6:	4299      	cmp	r1, r3
 80018f8:	d002      	beq.n	8001900 <__sflush_r+0x8c>
 80018fa:	4628      	mov	r0, r5
 80018fc:	f7ff fbf4 	bl	80010e8 <_free_r>
 8001900:	2300      	movs	r3, #0
 8001902:	6363      	str	r3, [r4, #52]	@ 0x34
 8001904:	e00d      	b.n	8001922 <__sflush_r+0xae>
 8001906:	2301      	movs	r3, #1
 8001908:	4628      	mov	r0, r5
 800190a:	47b0      	blx	r6
 800190c:	4602      	mov	r2, r0
 800190e:	1c50      	adds	r0, r2, #1
 8001910:	d1c9      	bne.n	80018a6 <__sflush_r+0x32>
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0c6      	beq.n	80018a6 <__sflush_r+0x32>
 8001918:	2b1d      	cmp	r3, #29
 800191a:	d001      	beq.n	8001920 <__sflush_r+0xac>
 800191c:	2b16      	cmp	r3, #22
 800191e:	d11e      	bne.n	800195e <__sflush_r+0xea>
 8001920:	602f      	str	r7, [r5, #0]
 8001922:	2000      	movs	r0, #0
 8001924:	e022      	b.n	800196c <__sflush_r+0xf8>
 8001926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800192a:	b21b      	sxth	r3, r3
 800192c:	e01b      	b.n	8001966 <__sflush_r+0xf2>
 800192e:	690f      	ldr	r7, [r1, #16]
 8001930:	2f00      	cmp	r7, #0
 8001932:	d0f6      	beq.n	8001922 <__sflush_r+0xae>
 8001934:	0793      	lsls	r3, r2, #30
 8001936:	680e      	ldr	r6, [r1, #0]
 8001938:	bf08      	it	eq
 800193a:	694b      	ldreq	r3, [r1, #20]
 800193c:	600f      	str	r7, [r1, #0]
 800193e:	bf18      	it	ne
 8001940:	2300      	movne	r3, #0
 8001942:	eba6 0807 	sub.w	r8, r6, r7
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	f1b8 0f00 	cmp.w	r8, #0
 800194c:	dde9      	ble.n	8001922 <__sflush_r+0xae>
 800194e:	6a21      	ldr	r1, [r4, #32]
 8001950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001952:	4643      	mov	r3, r8
 8001954:	463a      	mov	r2, r7
 8001956:	4628      	mov	r0, r5
 8001958:	47b0      	blx	r6
 800195a:	2800      	cmp	r0, #0
 800195c:	dc08      	bgt.n	8001970 <__sflush_r+0xfc>
 800195e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001966:	81a3      	strh	r3, [r4, #12]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001970:	4407      	add	r7, r0
 8001972:	eba8 0800 	sub.w	r8, r8, r0
 8001976:	e7e7      	b.n	8001948 <__sflush_r+0xd4>
 8001978:	20400001 	.word	0x20400001

0800197c <_fflush_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	690b      	ldr	r3, [r1, #16]
 8001980:	4605      	mov	r5, r0
 8001982:	460c      	mov	r4, r1
 8001984:	b913      	cbnz	r3, 800198c <_fflush_r+0x10>
 8001986:	2500      	movs	r5, #0
 8001988:	4628      	mov	r0, r5
 800198a:	bd38      	pop	{r3, r4, r5, pc}
 800198c:	b118      	cbz	r0, 8001996 <_fflush_r+0x1a>
 800198e:	6a03      	ldr	r3, [r0, #32]
 8001990:	b90b      	cbnz	r3, 8001996 <_fflush_r+0x1a>
 8001992:	f7ff fa99 	bl	8000ec8 <__sinit>
 8001996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f3      	beq.n	8001986 <_fflush_r+0xa>
 800199e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019a0:	07d0      	lsls	r0, r2, #31
 80019a2:	d404      	bmi.n	80019ae <_fflush_r+0x32>
 80019a4:	0599      	lsls	r1, r3, #22
 80019a6:	d402      	bmi.n	80019ae <_fflush_r+0x32>
 80019a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019aa:	f7ff fb9a 	bl	80010e2 <__retarget_lock_acquire_recursive>
 80019ae:	4628      	mov	r0, r5
 80019b0:	4621      	mov	r1, r4
 80019b2:	f7ff ff5f 	bl	8001874 <__sflush_r>
 80019b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80019b8:	07da      	lsls	r2, r3, #31
 80019ba:	4605      	mov	r5, r0
 80019bc:	d4e4      	bmi.n	8001988 <_fflush_r+0xc>
 80019be:	89a3      	ldrh	r3, [r4, #12]
 80019c0:	059b      	lsls	r3, r3, #22
 80019c2:	d4e1      	bmi.n	8001988 <_fflush_r+0xc>
 80019c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019c6:	f7ff fb8d 	bl	80010e4 <__retarget_lock_release_recursive>
 80019ca:	e7dd      	b.n	8001988 <_fflush_r+0xc>

080019cc <_putc_r>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	460d      	mov	r5, r1
 80019d0:	4614      	mov	r4, r2
 80019d2:	4606      	mov	r6, r0
 80019d4:	b118      	cbz	r0, 80019de <_putc_r+0x12>
 80019d6:	6a03      	ldr	r3, [r0, #32]
 80019d8:	b90b      	cbnz	r3, 80019de <_putc_r+0x12>
 80019da:	f7ff fa75 	bl	8000ec8 <__sinit>
 80019de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80019e0:	07d8      	lsls	r0, r3, #31
 80019e2:	d405      	bmi.n	80019f0 <_putc_r+0x24>
 80019e4:	89a3      	ldrh	r3, [r4, #12]
 80019e6:	0599      	lsls	r1, r3, #22
 80019e8:	d402      	bmi.n	80019f0 <_putc_r+0x24>
 80019ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019ec:	f7ff fb79 	bl	80010e2 <__retarget_lock_acquire_recursive>
 80019f0:	68a3      	ldr	r3, [r4, #8]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	60a3      	str	r3, [r4, #8]
 80019f8:	da05      	bge.n	8001a06 <_putc_r+0x3a>
 80019fa:	69a2      	ldr	r2, [r4, #24]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	db12      	blt.n	8001a26 <_putc_r+0x5a>
 8001a00:	b2eb      	uxtb	r3, r5
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d00f      	beq.n	8001a26 <_putc_r+0x5a>
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	6022      	str	r2, [r4, #0]
 8001a0c:	701d      	strb	r5, [r3, #0]
 8001a0e:	b2ed      	uxtb	r5, r5
 8001a10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a12:	07da      	lsls	r2, r3, #31
 8001a14:	d405      	bmi.n	8001a22 <_putc_r+0x56>
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	059b      	lsls	r3, r3, #22
 8001a1a:	d402      	bmi.n	8001a22 <_putc_r+0x56>
 8001a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a1e:	f7ff fb61 	bl	80010e4 <__retarget_lock_release_recursive>
 8001a22:	4628      	mov	r0, r5
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
 8001a26:	4629      	mov	r1, r5
 8001a28:	4622      	mov	r2, r4
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	f000 f802 	bl	8001a34 <__swbuf_r>
 8001a30:	4605      	mov	r5, r0
 8001a32:	e7ed      	b.n	8001a10 <_putc_r+0x44>

08001a34 <__swbuf_r>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	460e      	mov	r6, r1
 8001a38:	4614      	mov	r4, r2
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	b118      	cbz	r0, 8001a46 <__swbuf_r+0x12>
 8001a3e:	6a03      	ldr	r3, [r0, #32]
 8001a40:	b90b      	cbnz	r3, 8001a46 <__swbuf_r+0x12>
 8001a42:	f7ff fa41 	bl	8000ec8 <__sinit>
 8001a46:	69a3      	ldr	r3, [r4, #24]
 8001a48:	60a3      	str	r3, [r4, #8]
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	071a      	lsls	r2, r3, #28
 8001a4e:	d501      	bpl.n	8001a54 <__swbuf_r+0x20>
 8001a50:	6923      	ldr	r3, [r4, #16]
 8001a52:	b943      	cbnz	r3, 8001a66 <__swbuf_r+0x32>
 8001a54:	4621      	mov	r1, r4
 8001a56:	4628      	mov	r0, r5
 8001a58:	f000 f82a 	bl	8001ab0 <__swsetup_r>
 8001a5c:	b118      	cbz	r0, 8001a66 <__swbuf_r+0x32>
 8001a5e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001a62:	4638      	mov	r0, r7
 8001a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	6922      	ldr	r2, [r4, #16]
 8001a6a:	1a98      	subs	r0, r3, r2
 8001a6c:	6963      	ldr	r3, [r4, #20]
 8001a6e:	b2f6      	uxtb	r6, r6
 8001a70:	4283      	cmp	r3, r0
 8001a72:	4637      	mov	r7, r6
 8001a74:	dc05      	bgt.n	8001a82 <__swbuf_r+0x4e>
 8001a76:	4621      	mov	r1, r4
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f7ff ff7f 	bl	800197c <_fflush_r>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d1ed      	bne.n	8001a5e <__swbuf_r+0x2a>
 8001a82:	68a3      	ldr	r3, [r4, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60a3      	str	r3, [r4, #8]
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	6022      	str	r2, [r4, #0]
 8001a8e:	701e      	strb	r6, [r3, #0]
 8001a90:	6962      	ldr	r2, [r4, #20]
 8001a92:	1c43      	adds	r3, r0, #1
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d004      	beq.n	8001aa2 <__swbuf_r+0x6e>
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	07db      	lsls	r3, r3, #31
 8001a9c:	d5e1      	bpl.n	8001a62 <__swbuf_r+0x2e>
 8001a9e:	2e0a      	cmp	r6, #10
 8001aa0:	d1df      	bne.n	8001a62 <__swbuf_r+0x2e>
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f7ff ff69 	bl	800197c <_fflush_r>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d0d9      	beq.n	8001a62 <__swbuf_r+0x2e>
 8001aae:	e7d6      	b.n	8001a5e <__swbuf_r+0x2a>

08001ab0 <__swsetup_r>:
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <__swsetup_r+0xa8>)
 8001ab4:	4605      	mov	r5, r0
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	460c      	mov	r4, r1
 8001aba:	b118      	cbz	r0, 8001ac4 <__swsetup_r+0x14>
 8001abc:	6a03      	ldr	r3, [r0, #32]
 8001abe:	b90b      	cbnz	r3, 8001ac4 <__swsetup_r+0x14>
 8001ac0:	f7ff fa02 	bl	8000ec8 <__sinit>
 8001ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ac8:	0719      	lsls	r1, r3, #28
 8001aca:	d422      	bmi.n	8001b12 <__swsetup_r+0x62>
 8001acc:	06da      	lsls	r2, r3, #27
 8001ace:	d407      	bmi.n	8001ae0 <__swsetup_r+0x30>
 8001ad0:	2209      	movs	r2, #9
 8001ad2:	602a      	str	r2, [r5, #0]
 8001ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ad8:	81a3      	strh	r3, [r4, #12]
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ade:	e033      	b.n	8001b48 <__swsetup_r+0x98>
 8001ae0:	0758      	lsls	r0, r3, #29
 8001ae2:	d512      	bpl.n	8001b0a <__swsetup_r+0x5a>
 8001ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ae6:	b141      	cbz	r1, 8001afa <__swsetup_r+0x4a>
 8001ae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001aec:	4299      	cmp	r1, r3
 8001aee:	d002      	beq.n	8001af6 <__swsetup_r+0x46>
 8001af0:	4628      	mov	r0, r5
 8001af2:	f7ff faf9 	bl	80010e8 <_free_r>
 8001af6:	2300      	movs	r3, #0
 8001af8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001afa:	89a3      	ldrh	r3, [r4, #12]
 8001afc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b00:	81a3      	strh	r3, [r4, #12]
 8001b02:	2300      	movs	r3, #0
 8001b04:	6063      	str	r3, [r4, #4]
 8001b06:	6923      	ldr	r3, [r4, #16]
 8001b08:	6023      	str	r3, [r4, #0]
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	81a3      	strh	r3, [r4, #12]
 8001b12:	6923      	ldr	r3, [r4, #16]
 8001b14:	b94b      	cbnz	r3, 8001b2a <__swsetup_r+0x7a>
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b20:	d003      	beq.n	8001b2a <__swsetup_r+0x7a>
 8001b22:	4621      	mov	r1, r4
 8001b24:	4628      	mov	r0, r5
 8001b26:	f000 f84f 	bl	8001bc8 <__smakebuf_r>
 8001b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b2e:	f013 0201 	ands.w	r2, r3, #1
 8001b32:	d00a      	beq.n	8001b4a <__swsetup_r+0x9a>
 8001b34:	2200      	movs	r2, #0
 8001b36:	60a2      	str	r2, [r4, #8]
 8001b38:	6962      	ldr	r2, [r4, #20]
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	61a2      	str	r2, [r4, #24]
 8001b3e:	6922      	ldr	r2, [r4, #16]
 8001b40:	b942      	cbnz	r2, 8001b54 <__swsetup_r+0xa4>
 8001b42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b46:	d1c5      	bne.n	8001ad4 <__swsetup_r+0x24>
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
 8001b4a:	0799      	lsls	r1, r3, #30
 8001b4c:	bf58      	it	pl
 8001b4e:	6962      	ldrpl	r2, [r4, #20]
 8001b50:	60a2      	str	r2, [r4, #8]
 8001b52:	e7f4      	b.n	8001b3e <__swsetup_r+0x8e>
 8001b54:	2000      	movs	r0, #0
 8001b56:	e7f7      	b.n	8001b48 <__swsetup_r+0x98>
 8001b58:	20000010 	.word	0x20000010

08001b5c <_sbrk_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	4d06      	ldr	r5, [pc, #24]	@ (8001b78 <_sbrk_r+0x1c>)
 8001b60:	2300      	movs	r3, #0
 8001b62:	4604      	mov	r4, r0
 8001b64:	4608      	mov	r0, r1
 8001b66:	602b      	str	r3, [r5, #0]
 8001b68:	f7fe fed4 	bl	8000914 <_sbrk>
 8001b6c:	1c43      	adds	r3, r0, #1
 8001b6e:	d102      	bne.n	8001b76 <_sbrk_r+0x1a>
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	b103      	cbz	r3, 8001b76 <_sbrk_r+0x1a>
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
 8001b78:	200001c0 	.word	0x200001c0

08001b7c <__swhatbuf_r>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	460c      	mov	r4, r1
 8001b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b84:	2900      	cmp	r1, #0
 8001b86:	b096      	sub	sp, #88	@ 0x58
 8001b88:	4615      	mov	r5, r2
 8001b8a:	461e      	mov	r6, r3
 8001b8c:	da0d      	bge.n	8001baa <__swhatbuf_r+0x2e>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2340      	movne	r3, #64	@ 0x40
 8001b9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	6031      	str	r1, [r6, #0]
 8001ba4:	602b      	str	r3, [r5, #0]
 8001ba6:	b016      	add	sp, #88	@ 0x58
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
 8001baa:	466a      	mov	r2, sp
 8001bac:	f000 f848 	bl	8001c40 <_fstat_r>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	dbec      	blt.n	8001b8e <__swhatbuf_r+0x12>
 8001bb4:	9901      	ldr	r1, [sp, #4]
 8001bb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001bba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001bbe:	4259      	negs	r1, r3
 8001bc0:	4159      	adcs	r1, r3
 8001bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bc6:	e7eb      	b.n	8001ba0 <__swhatbuf_r+0x24>

08001bc8 <__smakebuf_r>:
 8001bc8:	898b      	ldrh	r3, [r1, #12]
 8001bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bcc:	079d      	lsls	r5, r3, #30
 8001bce:	4606      	mov	r6, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	d507      	bpl.n	8001be4 <__smakebuf_r+0x1c>
 8001bd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001bd8:	6023      	str	r3, [r4, #0]
 8001bda:	6123      	str	r3, [r4, #16]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	6163      	str	r3, [r4, #20]
 8001be0:	b003      	add	sp, #12
 8001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be4:	ab01      	add	r3, sp, #4
 8001be6:	466a      	mov	r2, sp
 8001be8:	f7ff ffc8 	bl	8001b7c <__swhatbuf_r>
 8001bec:	9f00      	ldr	r7, [sp, #0]
 8001bee:	4605      	mov	r5, r0
 8001bf0:	4639      	mov	r1, r7
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	f7ff fae4 	bl	80011c0 <_malloc_r>
 8001bf8:	b948      	cbnz	r0, 8001c0e <__smakebuf_r+0x46>
 8001bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bfe:	059a      	lsls	r2, r3, #22
 8001c00:	d4ee      	bmi.n	8001be0 <__smakebuf_r+0x18>
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	81a3      	strh	r3, [r4, #12]
 8001c0c:	e7e2      	b.n	8001bd4 <__smakebuf_r+0xc>
 8001c0e:	89a3      	ldrh	r3, [r4, #12]
 8001c10:	6020      	str	r0, [r4, #0]
 8001c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c16:	81a3      	strh	r3, [r4, #12]
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001c1e:	b15b      	cbz	r3, 8001c38 <__smakebuf_r+0x70>
 8001c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c24:	4630      	mov	r0, r6
 8001c26:	f000 f81d 	bl	8001c64 <_isatty_r>
 8001c2a:	b128      	cbz	r0, 8001c38 <__smakebuf_r+0x70>
 8001c2c:	89a3      	ldrh	r3, [r4, #12]
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	81a3      	strh	r3, [r4, #12]
 8001c38:	89a3      	ldrh	r3, [r4, #12]
 8001c3a:	431d      	orrs	r5, r3
 8001c3c:	81a5      	strh	r5, [r4, #12]
 8001c3e:	e7cf      	b.n	8001be0 <__smakebuf_r+0x18>

08001c40 <_fstat_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4d07      	ldr	r5, [pc, #28]	@ (8001c60 <_fstat_r+0x20>)
 8001c44:	2300      	movs	r3, #0
 8001c46:	4604      	mov	r4, r0
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	602b      	str	r3, [r5, #0]
 8001c4e:	f7fe fe58 	bl	8000902 <_fstat>
 8001c52:	1c43      	adds	r3, r0, #1
 8001c54:	d102      	bne.n	8001c5c <_fstat_r+0x1c>
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	b103      	cbz	r3, 8001c5c <_fstat_r+0x1c>
 8001c5a:	6023      	str	r3, [r4, #0]
 8001c5c:	bd38      	pop	{r3, r4, r5, pc}
 8001c5e:	bf00      	nop
 8001c60:	200001c0 	.word	0x200001c0

08001c64 <_isatty_r>:
 8001c64:	b538      	push	{r3, r4, r5, lr}
 8001c66:	4d06      	ldr	r5, [pc, #24]	@ (8001c80 <_isatty_r+0x1c>)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	602b      	str	r3, [r5, #0]
 8001c70:	f7fe fe4c 	bl	800090c <_isatty>
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d102      	bne.n	8001c7e <_isatty_r+0x1a>
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	b103      	cbz	r3, 8001c7e <_isatty_r+0x1a>
 8001c7c:	6023      	str	r3, [r4, #0]
 8001c7e:	bd38      	pop	{r3, r4, r5, pc}
 8001c80:	200001c0 	.word	0x200001c0

08001c84 <_init>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	bf00      	nop
 8001c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8a:	bc08      	pop	{r3}
 8001c8c:	469e      	mov	lr, r3
 8001c8e:	4770      	bx	lr

08001c90 <_fini>:
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	bf00      	nop
 8001c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c96:	bc08      	pop	{r3}
 8001c98:	469e      	mov	lr, r3
 8001c9a:	4770      	bx	lr
