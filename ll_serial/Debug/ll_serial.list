
ll_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001c18  08001c18  00011c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c7c  08001c7c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08001c7c  08001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c84  08001c84  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001cec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001cec  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004eaf  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000128c  00000000  00000000  00024f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000013f1  00000000  00000000  0002620e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000310  00000000  00000000  00027600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002b7  00000000  00000000  00027910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011f0d  00000000  00000000  00027bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004a94  00000000  00000000  00039ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00063358  00000000  00000000  0003e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e94  00000000  00000000  000a18c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000a2754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001c00 	.word	0x08001c00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001c00 	.word	0x08001c00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b500      	push	{lr}
 800057e:	b08b      	sub	sp, #44	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	2300      	movs	r3, #0
 8000582:	9304      	str	r3, [sp, #16]
 8000584:	9305      	str	r3, [sp, #20]
 8000586:	9306      	str	r3, [sp, #24]
 8000588:	9307      	str	r3, [sp, #28]
 800058a:	9308      	str	r3, [sp, #32]
 800058c:	9309      	str	r3, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_GPIO_Init+0x68>)
 8000590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000592:	f042 0204 	orr.w	r2, r2, #4
 8000596:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059a:	f002 0204 	and.w	r2, r2, #4
 800059e:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80005a0:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005b0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80005b2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b6:	f042 0201 	orr.w	r2, r2, #1
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80005c4:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x6c>)
 80005c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005cc:	6183      	str	r3, [r0, #24]

  /**/
  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80005ce:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005d0:	2301      	movs	r3, #1
 80005d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80005d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005d6:	a904      	add	r1, sp, #16
 80005d8:	f000 f9c9 	bl	800096e <LL_GPIO_Init>

}
 80005dc:	b00b      	add	sp, #44	; 0x2c
 80005de:	f85d fb04 	ldr.w	pc, [sp], #4
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020800 	.word	0x40020800

080005ec <MX_USART1_UART_Init>:
{
 80005ec:	b510      	push	{r4, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005f0:	2400      	movs	r4, #0
 80005f2:	9409      	str	r4, [sp, #36]	; 0x24
 80005f4:	940a      	str	r4, [sp, #40]	; 0x28
 80005f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80005f8:	940c      	str	r4, [sp, #48]	; 0x30
 80005fa:	940d      	str	r4, [sp, #52]	; 0x34
 80005fc:	940e      	str	r4, [sp, #56]	; 0x38
 80005fe:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	9403      	str	r4, [sp, #12]
 8000602:	9404      	str	r4, [sp, #16]
 8000604:	9405      	str	r4, [sp, #20]
 8000606:	9406      	str	r4, [sp, #24]
 8000608:	9407      	str	r4, [sp, #28]
 800060a:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_USART1_UART_Init+0xa0>)
 800060e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000610:	f042 0210 	orr.w	r2, r2, #16
 8000614:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000618:	f002 0210 	and.w	r2, r2, #16
 800061c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800061e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000622:	f042 0201 	orr.w	r2, r2, #1
 8000626:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000630:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000632:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000636:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000638:	2302      	movs	r3, #2
 800063a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000640:	2307      	movs	r3, #7
 8000642:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	a903      	add	r1, sp, #12
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_USART1_UART_Init+0xa4>)
 8000648:	f000 f991 	bl	800096e <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 800064c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000650:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000652:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000654:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000656:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000658:	230c      	movs	r3, #12
 800065a:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800065c:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800065e:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000660:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000664:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
 8000668:	a909      	add	r1, sp, #36	; 0x24
 800066a:	4620      	mov	r0, r4
 800066c:	f000 fa96 	bl	8000b9c <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000670:	6923      	ldr	r3, [r4, #16]
 8000672:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000676:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000678:	6963      	ldr	r3, [r4, #20]
 800067a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800067e:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000680:	68e3      	ldr	r3, [r4, #12]
 8000682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000686:	60e3      	str	r3, [r4, #12]
}
 8000688:	b010      	add	sp, #64	; 0x40
 800068a:	bd10      	pop	{r4, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40020000 	.word	0x40020000

08000694 <_write>:
int _write(int fd, char *ptr, int len) {
 8000694:	4610      	mov	r0, r2
	while (len--) {
 8000696:	e008      	b.n	80006aa <_write+0x16>
		LL_USART_TransmitData8(USART1, (uint8_t)*ptr++);
 8000698:	f811 2b01 	ldrb.w	r2, [r1], #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_write+0x20>)
 800069e:	605a      	str	r2, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <_write+0x20>)
 80006a2:	681b      	ldr	r3, [r3, #0]
		while (!LL_USART_IsActiveFlag_TXE(USART1)) {}
 80006a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80006a8:	d0fa      	beq.n	80006a0 <_write+0xc>
	while (len--) {
 80006aa:	4603      	mov	r3, r0
 80006ac:	3801      	subs	r0, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f2      	bne.n	8000698 <_write+0x4>
}
 80006b2:	4770      	bx	lr
 80006b4:	40011000 	.word	0x40011000

080006b8 <SystemClock_Config>:
{
 80006b8:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006ba:	4a2d      	ldr	r2, [pc, #180]	; (8000770 <SystemClock_Config+0xb8>)
 80006bc:	6813      	ldr	r3, [r2, #0]
 80006be:	f023 0307 	bic.w	r3, r3, #7
 80006c2:	f043 0303 	orr.w	r3, r3, #3
 80006c6:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <SystemClock_Config+0xb8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d1f9      	bne.n	80006c8 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xbc>)
 80006d6:	6813      	ldr	r3, [r2, #0]
 80006d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006dc:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006de:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80006e2:	6813      	ldr	r3, [r2, #0]
 80006e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006e8:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xc0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 80006ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80006f2:	d0fa      	beq.n	80006ea <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <SystemClock_Config+0xc0>)
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	4920      	ldr	r1, [pc, #128]	; (800077c <SystemClock_Config+0xc4>)
 80006fa:	4011      	ands	r1, r2
 80006fc:	4a20      	ldr	r2, [pc, #128]	; (8000780 <SystemClock_Config+0xc8>)
 80006fe:	430a      	orrs	r2, r1
 8000700:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000708:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000710:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <SystemClock_Config+0xc0>)
 8000714:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000716:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800071a:	d0fa      	beq.n	8000712 <SystemClock_Config+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <SystemClock_Config+0xc0>)
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000724:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800072c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000730:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000738:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	f022 0203 	bic.w	r2, r2, #3
 8000740:	f042 0202 	orr.w	r2, r2, #2
 8000744:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <SystemClock_Config+0xc0>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800074e:	2b08      	cmp	r3, #8
 8000750:	d1f9      	bne.n	8000746 <SystemClock_Config+0x8e>
  LL_Init1msTick(96000000);
 8000752:	4c0c      	ldr	r4, [pc, #48]	; (8000784 <SystemClock_Config+0xcc>)
 8000754:	4620      	mov	r0, r4
 8000756:	f000 fac9 	bl	8000cec <LL_Init1msTick>
  LL_SetSystemCoreClock(96000000);
 800075a:	4620      	mov	r0, r4
 800075c:	f000 fad6 	bl	8000d0c <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemClock_Config+0xc0>)
 8000762:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800076a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800076e:	bd10      	pop	{r4, pc}
 8000770:	40023c00 	.word	0x40023c00
 8000774:	40007000 	.word	0x40007000
 8000778:	40023800 	.word	0x40023800
 800077c:	ffbf8000 	.word	0xffbf8000
 8000780:	00403019 	.word	0x00403019
 8000784:	05b8d800 	.word	0x05b8d800

08000788 <main>:
{
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 800078c:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <main+0xbc>)
 800078e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000794:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000798:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800079c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800079e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80007a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007a6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80007b0:	9b00      	ldr	r3, [sp, #0]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <main+0xc0>)
 80007b4:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80007ba:	0409      	lsls	r1, r1, #16
 80007bc:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 80007be:	4a23      	ldr	r2, [pc, #140]	; (800084c <main+0xc4>)
 80007c0:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80007c2:	60da      	str	r2, [r3, #12]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ca:	f1c3 0107 	rsb	r1, r3, #7
 80007ce:	2904      	cmp	r1, #4
 80007d0:	bf28      	it	cs
 80007d2:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d4:	1d1a      	adds	r2, r3, #4
 80007d6:	2a06      	cmp	r2, #6
 80007d8:	d932      	bls.n	8000840 <main+0xb8>
 80007da:	1eda      	subs	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e0:	408b      	lsls	r3, r1
 80007e2:	43db      	mvns	r3, r3
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	4093      	lsls	r3, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <main+0xc0>)
 80007f0:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  SystemClock_Config();
 80007f4:	f7ff ff60 	bl	80006b8 <SystemClock_Config>
  MX_GPIO_Init();
 80007f8:	f7ff fec0 	bl	800057c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007fc:	f7ff fef6 	bl	80005ec <MX_USART1_UART_Init>
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000800:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000804:	6913      	ldr	r3, [r2, #16]
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	6113      	str	r3, [r2, #16]
	DBG("Starting");
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <main+0xc8>)
 800080e:	f000 fb45 	bl	8000e9c <iprintf>
 8000812:	200a      	movs	r0, #10
 8000814:	f000 fb54 	bl	8000ec0 <putchar>
	uint32_t now = 0, then = 0;
 8000818:	2400      	movs	r4, #0
 800081a:	4625      	mov	r5, r4
		now = get_systick_counter();
 800081c:	f000 f82e 	bl	800087c <get_systick_counter>
 8000820:	4604      	mov	r4, r0
		if (now - then >= 1000) {
 8000822:	1b43      	subs	r3, r0, r5
 8000824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000828:	d3f8      	bcc.n	800081c <main+0x94>
			DBG("Tick %lu", now / 1000);
 800082a:	490a      	ldr	r1, [pc, #40]	; (8000854 <main+0xcc>)
 800082c:	fba1 3100 	umull	r3, r1, r1, r0
 8000830:	0989      	lsrs	r1, r1, #6
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <main+0xd0>)
 8000834:	f000 fb32 	bl	8000e9c <iprintf>
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fb41 	bl	8000ec0 <putchar>
			then = now;
 800083e:	e7ec      	b.n	800081a <main+0x92>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000840:	2200      	movs	r2, #0
 8000842:	e7cb      	b.n	80007dc <main+0x54>
 8000844:	40023800 	.word	0x40023800
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	05fa0300 	.word	0x05fa0300
 8000850:	08001c18 	.word	0x08001c18
 8000854:	10624dd3 	.word	0x10624dd3
 8000858:	08001c24 	.word	0x08001c24

0800085c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler>

0800085e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler>

08000860 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler>

08000862 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler>

08000864 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler>

08000866 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
  systick_counter++;
 800086c:	4a02      	ldr	r2, [pc, #8]	; (8000878 <SysTick_Handler+0xc>)
 800086e:	6813      	ldr	r3, [r2, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000007c 	.word	0x2000007c

0800087c <get_systick_counter>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
uint32_t get_systick_counter() {
	return systick_counter;
}
 800087c:	4b01      	ldr	r3, [pc, #4]	; (8000884 <get_systick_counter+0x8>)
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2000007c 	.word	0x2000007c

08000888 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	460c      	mov	r4, r1
 800088c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	2500      	movs	r5, #0
 8000890:	e006      	b.n	80008a0 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8000892:	f3af 8000 	nop.w
 8000896:	4621      	mov	r1, r4
 8000898:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800089e:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	42b5      	cmp	r5, r6
 80008a2:	dbf6      	blt.n	8000892 <_read+0xa>
	}

return len;
}
 80008a4:	4630      	mov	r0, r6
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <_close>:
}

int _close(int file)
{
	return -1;
}
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ac:	4770      	bx	lr

080008ae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80008b4:	2000      	movs	r0, #0
 80008b6:	4770      	bx	lr

080008b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80008b8:	2001      	movs	r0, #1
 80008ba:	4770      	bx	lr

080008bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80008bc:	2000      	movs	r0, #0
 80008be:	4770      	bx	lr

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b510      	push	{r4, lr}
 80008c2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <_sbrk+0x38>)
 80008c6:	490d      	ldr	r1, [pc, #52]	; (80008fc <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <_sbrk+0x40>)
 80008ca:	6800      	ldr	r0, [r0, #0]
 80008cc:	b140      	cbz	r0, 80008e0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <_sbrk+0x40>)
 80008d0:	6800      	ldr	r0, [r0, #0]
 80008d2:	4403      	add	r3, r0
 80008d4:	1a52      	subs	r2, r2, r1
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d806      	bhi.n	80008e8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80008da:	4a09      	ldr	r2, [pc, #36]	; (8000900 <_sbrk+0x40>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80008de:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <_sbrk+0x40>)
 80008e2:	4c08      	ldr	r4, [pc, #32]	; (8000904 <_sbrk+0x44>)
 80008e4:	6004      	str	r4, [r0, #0]
 80008e6:	e7f2      	b.n	80008ce <_sbrk+0xe>
    errno = ENOMEM;
 80008e8:	f000 fb84 	bl	8000ff4 <__errno>
 80008ec:	230c      	movs	r3, #12
 80008ee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f4:	e7f3      	b.n	80008de <_sbrk+0x1e>
 80008f6:	bf00      	nop
 80008f8:	20020000 	.word	0x20020000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000080 	.word	0x20000080
 8000904:	200001d0 	.word	0x200001d0

08000908 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <SystemInit+0x10>)
 800090a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800090e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000912:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffdf 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f000 fb59 	bl	8001000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff ff1b 	bl	8000788 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000960:	08001c8c 	.word	0x08001c8c
  ldr r2, =_sbss
 8000964:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000968:	200001d0 	.word	0x200001d0

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>

0800096e <LL_GPIO_Init>:
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800096e:	680b      	ldr	r3, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000970:	fa93 f3a3 	rbit	r3, r3
 8000974:	fab3 fc83 	clz	ip, r3
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000978:	e053      	b.n	8000a22 <LL_GPIO_Init+0xb4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800097a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800097c:	6882      	ldr	r2, [r0, #8]
 800097e:	fa93 f4a3 	rbit	r4, r3
 8000982:	fab4 f484 	clz	r4, r4
 8000986:	0064      	lsls	r4, r4, #1
 8000988:	f04f 0e03 	mov.w	lr, #3
 800098c:	fa0e f404 	lsl.w	r4, lr, r4
 8000990:	ea22 0204 	bic.w	r2, r2, r4
 8000994:	fa93 f4a3 	rbit	r4, r3
 8000998:	fab4 f484 	clz	r4, r4
 800099c:	0064      	lsls	r4, r4, #1
 800099e:	40a5      	lsls	r5, r4
 80009a0:	432a      	orrs	r2, r5
 80009a2:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80009a4:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80009a6:	6842      	ldr	r2, [r0, #4]
 80009a8:	ea22 0203 	bic.w	r2, r2, r3
 80009ac:	fb03 f404 	mul.w	r4, r3, r4
 80009b0:	4322      	orrs	r2, r4
 80009b2:	6042      	str	r2, [r0, #4]
}
 80009b4:	e043      	b.n	8000a3e <LL_GPIO_Init+0xd0>
 80009b6:	fa93 f2a3 	rbit	r2, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80009ba:	fab2 f282 	clz	r2, r2
 80009be:	2a07      	cmp	r2, #7
 80009c0:	d814      	bhi.n	80009ec <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80009c2:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80009c4:	6a02      	ldr	r2, [r0, #32]
 80009c6:	fa93 f4a3 	rbit	r4, r3
 80009ca:	fab4 f484 	clz	r4, r4
 80009ce:	00a4      	lsls	r4, r4, #2
 80009d0:	260f      	movs	r6, #15
 80009d2:	fa06 f404 	lsl.w	r4, r6, r4
 80009d6:	ea22 0204 	bic.w	r2, r2, r4
 80009da:	fa93 f4a3 	rbit	r4, r3
 80009de:	fab4 f484 	clz	r4, r4
 80009e2:	00a4      	lsls	r4, r4, #2
 80009e4:	40a5      	lsls	r5, r4
 80009e6:	432a      	orrs	r2, r5
 80009e8:	6202      	str	r2, [r0, #32]
}
 80009ea:	e040      	b.n	8000a6e <LL_GPIO_Init+0x100>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80009ec:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80009ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80009f0:	0a1a      	lsrs	r2, r3, #8
 80009f2:	fa92 fea2 	rbit	lr, r2
 80009f6:	fabe fe8e 	clz	lr, lr
 80009fa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80009fe:	260f      	movs	r6, #15
 8000a00:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000a04:	ea25 050e 	bic.w	r5, r5, lr
 8000a08:	fa92 f2a2 	rbit	r2, r2
 8000a0c:	fab2 f282 	clz	r2, r2
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4094      	lsls	r4, r2
 8000a14:	432c      	orrs	r4, r5
 8000a16:	6244      	str	r4, [r0, #36]	; 0x24
}
 8000a18:	e029      	b.n	8000a6e <LL_GPIO_Init+0x100>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
    pinpos++;
 8000a1e:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a22:	680b      	ldr	r3, [r1, #0]
 8000a24:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000a28:	d043      	beq.n	8000ab2 <LL_GPIO_Init+0x144>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	fa02 f20c 	lsl.w	r2, r2, ip
    if (currentpin)
 8000a30:	4013      	ands	r3, r2
 8000a32:	d0f4      	beq.n	8000a1e <LL_GPIO_Init+0xb0>
{
 8000a34:	b570      	push	{r4, r5, r6, lr}
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a36:	684a      	ldr	r2, [r1, #4]
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d99d      	bls.n	800097a <LL_GPIO_Init+0xc>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a3e:	68c2      	ldr	r2, [r0, #12]
 8000a40:	fa93 f4a3 	rbit	r4, r3
 8000a44:	fab4 f484 	clz	r4, r4
 8000a48:	0064      	lsls	r4, r4, #1
 8000a4a:	2503      	movs	r5, #3
 8000a4c:	fa05 f404 	lsl.w	r4, r5, r4
 8000a50:	ea22 0204 	bic.w	r2, r2, r4
 8000a54:	fa93 f4a3 	rbit	r4, r3
 8000a58:	fab4 f484 	clz	r4, r4
 8000a5c:	0064      	lsls	r4, r4, #1
 8000a5e:	690d      	ldr	r5, [r1, #16]
 8000a60:	fa05 f404 	lsl.w	r4, r5, r4
 8000a64:	4322      	orrs	r2, r4
 8000a66:	60c2      	str	r2, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000a68:	684a      	ldr	r2, [r1, #4]
 8000a6a:	2a02      	cmp	r2, #2
 8000a6c:	d0a3      	beq.n	80009b6 <LL_GPIO_Init+0x48>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a6e:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a70:	6804      	ldr	r4, [r0, #0]
 8000a72:	fa93 fea3 	rbit	lr, r3
 8000a76:	fabe fe8e 	clz	lr, lr
 8000a7a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000a7e:	2503      	movs	r5, #3
 8000a80:	fa05 fe0e 	lsl.w	lr, r5, lr
 8000a84:	ea24 0e0e 	bic.w	lr, r4, lr
 8000a88:	fa93 f3a3 	rbit	r3, r3
 8000a8c:	fab3 f383 	clz	r3, r3
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	409a      	lsls	r2, r3
 8000a94:	ea4e 0202 	orr.w	r2, lr, r2
 8000a98:	6002      	str	r2, [r0, #0]
    pinpos++;
 8000a9a:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a9e:	680b      	ldr	r3, [r1, #0]
 8000aa0:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000aa4:	d0b9      	beq.n	8000a1a <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	fa02 f20c 	lsl.w	r2, r2, ip
    if (currentpin)
 8000aac:	4013      	ands	r3, r2
 8000aae:	d0f4      	beq.n	8000a9a <LL_GPIO_Init+0x12c>
 8000ab0:	e7c1      	b.n	8000a36 <LL_GPIO_Init+0xc8>
}
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	4770      	bx	lr
	...

08000ab8 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <RCC_GetHCLKClockFreq+0x10>)
 8000aba:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000abc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ac0:	4a02      	ldr	r2, [pc, #8]	; (8000acc <RCC_GetHCLKClockFreq+0x14>)
 8000ac2:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ac4:	40d8      	lsrs	r0, r3
 8000ac6:	4770      	bx	lr
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	08001c30 	.word	0x08001c30

08000ad0 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <RCC_GetPCLK1ClockFreq+0x10>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000ad4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ad8:	4a02      	ldr	r2, [pc, #8]	; (8000ae4 <RCC_GetPCLK1ClockFreq+0x14>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
}
 8000adc:	40d8      	lsrs	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	08001c40 	.word	0x08001c40

08000ae8 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <RCC_GetPCLK2ClockFreq+0x10>)
 8000aea:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000aec:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000af0:	4a02      	ldr	r2, [pc, #8]	; (8000afc <RCC_GetPCLK2ClockFreq+0x14>)
 8000af2:	5cd3      	ldrb	r3, [r2, r3]
}
 8000af4:	40d8      	lsrs	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800
 8000afc:	08001c40 	.word	0x08001c40

08000b00 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000b08:	b923      	cbnz	r3, 8000b14 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b0c:	2808      	cmp	r0, #8
 8000b0e:	d003      	beq.n	8000b18 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8000b10:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8000b12:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8000b16:	e7f9      	b.n	8000b0c <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000b18:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000b1a:	6851      	ldr	r1, [r2, #4]
 8000b1c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000b20:	fbb3 f0f1 	udiv	r0, r3, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000b24:	6853      	ldr	r3, [r2, #4]
 8000b26:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000b2a:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8000b2e:	6853      	ldr	r3, [r2, #4]
 8000b30:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b34:	3301      	adds	r3, #1
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	00f42400 	.word	0x00f42400
 8000b48:	017d7840 	.word	0x017d7840

08000b4c <RCC_GetSystemClockFreq>:
{
 8000b4c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <RCC_GetSystemClockFreq+0x24>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d005      	beq.n	8000b66 <RCC_GetSystemClockFreq+0x1a>
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d105      	bne.n	8000b6a <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000b5e:	2008      	movs	r0, #8
 8000b60:	f7ff ffce 	bl	8000b00 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8000b64:	e002      	b.n	8000b6c <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8000b66:	4803      	ldr	r0, [pc, #12]	; (8000b74 <RCC_GetSystemClockFreq+0x28>)
 8000b68:	e000      	b.n	8000b6c <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <RCC_GetSystemClockFreq+0x2c>)
}
 8000b6c:	bd08      	pop	{r3, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	017d7840 	.word	0x017d7840
 8000b78:	00f42400 	.word	0x00f42400

08000b7c <LL_RCC_GetSystemClocksFreq>:
{
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000b80:	f7ff ffe4 	bl	8000b4c <RCC_GetSystemClockFreq>
 8000b84:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000b86:	f7ff ff97 	bl	8000ab8 <RCC_GetHCLKClockFreq>
 8000b8a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b8c:	f7ff ffa0 	bl	8000ad0 <RCC_GetPCLK1ClockFreq>
 8000b90:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b92:	6860      	ldr	r0, [r4, #4]
 8000b94:	f7ff ffa8 	bl	8000ae8 <RCC_GetPCLK2ClockFreq>
 8000b98:	60e0      	str	r0, [r4, #12]
}
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000b9c:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000b9e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000ba2:	d001      	beq.n	8000ba8 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8000ba4:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000ba6:	4770      	bx	lr
{
 8000ba8:	b530      	push	{r4, r5, lr}
 8000baa:	b085      	sub	sp, #20
 8000bac:	4604      	mov	r4, r0
 8000bae:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8000bb0:	68c3      	ldr	r3, [r0, #12]
 8000bb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000bb6:	f023 030c 	bic.w	r3, r3, #12
 8000bba:	684a      	ldr	r2, [r1, #4]
 8000bbc:	68c9      	ldr	r1, [r1, #12]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	6929      	ldr	r1, [r5, #16]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	69a9      	ldr	r1, [r5, #24]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000bcc:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000bce:	6902      	ldr	r2, [r0, #16]
 8000bd0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000bd8:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000bda:	6942      	ldr	r2, [r0, #20]
 8000bdc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000be0:	4313      	orrs	r3, r2
 8000be2:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000be4:	4668      	mov	r0, sp
 8000be6:	f7ff ffc9 	bl	8000b7c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <LL_USART_Init+0x140>)
 8000bec:	429c      	cmp	r4, r3
 8000bee:	d008      	beq.n	8000c02 <LL_USART_Init+0x66>
    else if (USARTx == USART2)
 8000bf0:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <LL_USART_Init+0x144>)
 8000bf2:	429c      	cmp	r4, r3
 8000bf4:	d00c      	beq.n	8000c10 <LL_USART_Init+0x74>
    else if (USARTx == USART6)
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <LL_USART_Init+0x148>)
 8000bf8:	429c      	cmp	r4, r3
 8000bfa:	d00b      	beq.n	8000c14 <LL_USART_Init+0x78>
  ErrorStatus status = ERROR;
 8000bfc:	2001      	movs	r0, #1
}
 8000bfe:	b005      	add	sp, #20
 8000c00:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000c02:	9a03      	ldr	r2, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	d066      	beq.n	8000cd6 <LL_USART_Init+0x13a>
        && (USART_InitStruct->BaudRate != 0U))
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	b92b      	cbnz	r3, 8000c18 <LL_USART_Init+0x7c>
  ErrorStatus status = ERROR;
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	e7f6      	b.n	8000bfe <LL_USART_Init+0x62>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000c10:	9a02      	ldr	r2, [sp, #8]
 8000c12:	e7f7      	b.n	8000c04 <LL_USART_Init+0x68>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000c14:	9a03      	ldr	r2, [sp, #12]
 8000c16:	e7f5      	b.n	8000c04 <LL_USART_Init+0x68>
      LL_USART_SetBaudRate(USARTx,
 8000c18:	69a9      	ldr	r1, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000c1a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8000c1e:	d02c      	beq.n	8000c7a <LL_USART_Init+0xde>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c20:	2100      	movs	r1, #0
 8000c22:	1890      	adds	r0, r2, r2
 8000c24:	4149      	adcs	r1, r1
 8000c26:	1880      	adds	r0, r0, r2
 8000c28:	f141 0100 	adc.w	r1, r1, #0
 8000c2c:	00c9      	lsls	r1, r1, #3
 8000c2e:	ea41 7150 	orr.w	r1, r1, r0, lsr #29
 8000c32:	00c0      	lsls	r0, r0, #3
 8000c34:	1880      	adds	r0, r0, r2
 8000c36:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000c3a:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8000c3e:	f141 0100 	adc.w	r1, r1, #0
 8000c42:	f7ff fb1d 	bl	8000280 <__aeabi_uldivmod>
 8000c46:	4928      	ldr	r1, [pc, #160]	; (8000ce8 <LL_USART_Init+0x14c>)
 8000c48:	fba1 2300 	umull	r2, r3, r1, r0
 8000c4c:	095b      	lsrs	r3, r3, #5
 8000c4e:	011a      	lsls	r2, r3, #4
 8000c50:	b292      	uxth	r2, r2
 8000c52:	2564      	movs	r5, #100	; 0x64
 8000c54:	fb05 0313 	mls	r3, r5, r3, r0
 8000c58:	011b      	lsls	r3, r3, #4
 8000c5a:	3332      	adds	r3, #50	; 0x32
 8000c5c:	fba1 1303 	umull	r1, r3, r1, r3
 8000c60:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000c64:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8000c68:	440a      	add	r2, r1
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	f003 030f 	and.w	r3, r3, #15
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8000c76:	2000      	movs	r0, #0
}
 8000c78:	e7c1      	b.n	8000bfe <LL_USART_Init+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000c7a:	f04f 0c00 	mov.w	ip, #0
 8000c7e:	1891      	adds	r1, r2, r2
 8000c80:	eb4c 050c 	adc.w	r5, ip, ip
 8000c84:	1889      	adds	r1, r1, r2
 8000c86:	f145 0500 	adc.w	r5, r5, #0
 8000c8a:	00ed      	lsls	r5, r5, #3
 8000c8c:	ea45 7551 	orr.w	r5, r5, r1, lsr #29
 8000c90:	00c9      	lsls	r1, r1, #3
 8000c92:	1888      	adds	r0, r1, r2
 8000c94:	f145 0100 	adc.w	r1, r5, #0
 8000c98:	18da      	adds	r2, r3, r3
 8000c9a:	eb4c 030c 	adc.w	r3, ip, ip
 8000c9e:	f7ff faef 	bl	8000280 <__aeabi_uldivmod>
 8000ca2:	4911      	ldr	r1, [pc, #68]	; (8000ce8 <LL_USART_Init+0x14c>)
 8000ca4:	fba1 2300 	umull	r2, r3, r1, r0
 8000ca8:	095b      	lsrs	r3, r3, #5
 8000caa:	011a      	lsls	r2, r3, #4
 8000cac:	b292      	uxth	r2, r2
 8000cae:	2564      	movs	r5, #100	; 0x64
 8000cb0:	fb05 0313 	mls	r3, r5, r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	3332      	adds	r3, #50	; 0x32
 8000cb8:	fba1 1303 	umull	r1, r3, r1, r3
 8000cbc:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000cc0:	0059      	lsls	r1, r3, #1
 8000cc2:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8000cc6:	440a      	add	r2, r1
 8000cc8:	b292      	uxth	r2, r2
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	60a3      	str	r3, [r4, #8]
 8000cd4:	e7cf      	b.n	8000c76 <LL_USART_Init+0xda>
  ErrorStatus status = ERROR;
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e791      	b.n	8000bfe <LL_USART_Init+0x62>
 8000cda:	bf00      	nop
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	51eb851f 	.word	0x51eb851f

08000cec <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <LL_Init1msTick+0x1c>)
 8000cee:	fba3 2300 	umull	r2, r3, r3, r0
 8000cf2:	099b      	lsrs	r3, r3, #6
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000cfa:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d00:	2305      	movs	r3, #5
 8000d02:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	10624dd3 	.word	0x10624dd3

08000d0c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d0c:	4b01      	ldr	r3, [pc, #4]	; (8000d14 <LL_SetSystemCoreClock+0x8>)
 8000d0e:	6018      	str	r0, [r3, #0]
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000000 	.word	0x20000000

08000d18 <std>:
 8000d18:	2300      	movs	r3, #0
 8000d1a:	b510      	push	{r4, lr}
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8000d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d26:	6083      	str	r3, [r0, #8]
 8000d28:	8181      	strh	r1, [r0, #12]
 8000d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8000d2c:	81c2      	strh	r2, [r0, #14]
 8000d2e:	6183      	str	r3, [r0, #24]
 8000d30:	4619      	mov	r1, r3
 8000d32:	2208      	movs	r2, #8
 8000d34:	305c      	adds	r0, #92	; 0x5c
 8000d36:	f000 f90e 	bl	8000f56 <memset>
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <std+0x58>)
 8000d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <std+0x5c>)
 8000d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <std+0x60>)
 8000d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <std+0x64>)
 8000d48:	6323      	str	r3, [r4, #48]	; 0x30
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <std+0x68>)
 8000d4c:	6224      	str	r4, [r4, #32]
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	d006      	beq.n	8000d60 <std+0x48>
 8000d52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000d56:	4294      	cmp	r4, r2
 8000d58:	d002      	beq.n	8000d60 <std+0x48>
 8000d5a:	33d0      	adds	r3, #208	; 0xd0
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	d105      	bne.n	8000d6c <std+0x54>
 8000d60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d68:	f000 b96e 	b.w	8001048 <__retarget_lock_init_recursive>
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	bf00      	nop
 8000d70:	08000ed1 	.word	0x08000ed1
 8000d74:	08000ef3 	.word	0x08000ef3
 8000d78:	08000f2b 	.word	0x08000f2b
 8000d7c:	08000f4f 	.word	0x08000f4f
 8000d80:	20000084 	.word	0x20000084

08000d84 <stdio_exit_handler>:
 8000d84:	4a02      	ldr	r2, [pc, #8]	; (8000d90 <stdio_exit_handler+0xc>)
 8000d86:	4903      	ldr	r1, [pc, #12]	; (8000d94 <stdio_exit_handler+0x10>)
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <stdio_exit_handler+0x14>)
 8000d8a:	f000 b869 	b.w	8000e60 <_fwalk_sglue>
 8000d8e:	bf00      	nop
 8000d90:	20000004 	.word	0x20000004
 8000d94:	080018f5 	.word	0x080018f5
 8000d98:	20000010 	.word	0x20000010

08000d9c <cleanup_stdio>:
 8000d9c:	6841      	ldr	r1, [r0, #4]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <cleanup_stdio+0x34>)
 8000da0:	4299      	cmp	r1, r3
 8000da2:	b510      	push	{r4, lr}
 8000da4:	4604      	mov	r4, r0
 8000da6:	d001      	beq.n	8000dac <cleanup_stdio+0x10>
 8000da8:	f000 fda4 	bl	80018f4 <_fflush_r>
 8000dac:	68a1      	ldr	r1, [r4, #8]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <cleanup_stdio+0x38>)
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d002      	beq.n	8000dba <cleanup_stdio+0x1e>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f000 fd9d 	bl	80018f4 <_fflush_r>
 8000dba:	68e1      	ldr	r1, [r4, #12]
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <cleanup_stdio+0x3c>)
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d004      	beq.n	8000dcc <cleanup_stdio+0x30>
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dc8:	f000 bd94 	b.w	80018f4 <_fflush_r>
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000084 	.word	0x20000084
 8000dd4:	200000ec 	.word	0x200000ec
 8000dd8:	20000154 	.word	0x20000154

08000ddc <global_stdio_init.part.0>:
 8000ddc:	b510      	push	{r4, lr}
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <global_stdio_init.part.0+0x30>)
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <global_stdio_init.part.0+0x34>)
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <global_stdio_init.part.0+0x38>)
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	4620      	mov	r0, r4
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	f7ff ff94 	bl	8000d18 <std>
 8000df0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000df4:	2201      	movs	r2, #1
 8000df6:	2109      	movs	r1, #9
 8000df8:	f7ff ff8e 	bl	8000d18 <std>
 8000dfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000e00:	2202      	movs	r2, #2
 8000e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e06:	2112      	movs	r1, #18
 8000e08:	f7ff bf86 	b.w	8000d18 <std>
 8000e0c:	200001bc 	.word	0x200001bc
 8000e10:	20000084 	.word	0x20000084
 8000e14:	08000d85 	.word	0x08000d85

08000e18 <__sfp_lock_acquire>:
 8000e18:	4801      	ldr	r0, [pc, #4]	; (8000e20 <__sfp_lock_acquire+0x8>)
 8000e1a:	f000 b916 	b.w	800104a <__retarget_lock_acquire_recursive>
 8000e1e:	bf00      	nop
 8000e20:	200001c5 	.word	0x200001c5

08000e24 <__sfp_lock_release>:
 8000e24:	4801      	ldr	r0, [pc, #4]	; (8000e2c <__sfp_lock_release+0x8>)
 8000e26:	f000 b911 	b.w	800104c <__retarget_lock_release_recursive>
 8000e2a:	bf00      	nop
 8000e2c:	200001c5 	.word	0x200001c5

08000e30 <__sinit>:
 8000e30:	b510      	push	{r4, lr}
 8000e32:	4604      	mov	r4, r0
 8000e34:	f7ff fff0 	bl	8000e18 <__sfp_lock_acquire>
 8000e38:	6a23      	ldr	r3, [r4, #32]
 8000e3a:	b11b      	cbz	r3, 8000e44 <__sinit+0x14>
 8000e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e40:	f7ff bff0 	b.w	8000e24 <__sfp_lock_release>
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__sinit+0x28>)
 8000e46:	6223      	str	r3, [r4, #32]
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__sinit+0x2c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f5      	bne.n	8000e3c <__sinit+0xc>
 8000e50:	f7ff ffc4 	bl	8000ddc <global_stdio_init.part.0>
 8000e54:	e7f2      	b.n	8000e3c <__sinit+0xc>
 8000e56:	bf00      	nop
 8000e58:	08000d9d 	.word	0x08000d9d
 8000e5c:	200001bc 	.word	0x200001bc

08000e60 <_fwalk_sglue>:
 8000e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e64:	4607      	mov	r7, r0
 8000e66:	4688      	mov	r8, r1
 8000e68:	4614      	mov	r4, r2
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e70:	f1b9 0901 	subs.w	r9, r9, #1
 8000e74:	d505      	bpl.n	8000e82 <_fwalk_sglue+0x22>
 8000e76:	6824      	ldr	r4, [r4, #0]
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d1f7      	bne.n	8000e6c <_fwalk_sglue+0xc>
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e82:	89ab      	ldrh	r3, [r5, #12]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d907      	bls.n	8000e98 <_fwalk_sglue+0x38>
 8000e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	d003      	beq.n	8000e98 <_fwalk_sglue+0x38>
 8000e90:	4629      	mov	r1, r5
 8000e92:	4638      	mov	r0, r7
 8000e94:	47c0      	blx	r8
 8000e96:	4306      	orrs	r6, r0
 8000e98:	3568      	adds	r5, #104	; 0x68
 8000e9a:	e7e9      	b.n	8000e70 <_fwalk_sglue+0x10>

08000e9c <iprintf>:
 8000e9c:	b40f      	push	{r0, r1, r2, r3}
 8000e9e:	b507      	push	{r0, r1, r2, lr}
 8000ea0:	4906      	ldr	r1, [pc, #24]	; (8000ebc <iprintf+0x20>)
 8000ea2:	ab04      	add	r3, sp, #16
 8000ea4:	6808      	ldr	r0, [r1, #0]
 8000ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000eaa:	6881      	ldr	r1, [r0, #8]
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	f000 f9f1 	bl	8001294 <_vfiprintf_r>
 8000eb2:	b003      	add	sp, #12
 8000eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000eb8:	b004      	add	sp, #16
 8000eba:	4770      	bx	lr
 8000ebc:	2000005c 	.word	0x2000005c

08000ec0 <putchar>:
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <putchar+0xc>)
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	6882      	ldr	r2, [r0, #8]
 8000ec8:	f000 bd3c 	b.w	8001944 <_putc_r>
 8000ecc:	2000005c 	.word	0x2000005c

08000ed0 <__sread>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed8:	f000 f868 	bl	8000fac <_read_r>
 8000edc:	2800      	cmp	r0, #0
 8000ede:	bfab      	itete	ge
 8000ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8000ee4:	181b      	addge	r3, r3, r0
 8000ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000eea:	bfac      	ite	ge
 8000eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eee:	81a3      	strhlt	r3, [r4, #12]
 8000ef0:	bd10      	pop	{r4, pc}

08000ef2 <__swrite>:
 8000ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef6:	461f      	mov	r7, r3
 8000ef8:	898b      	ldrh	r3, [r1, #12]
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	4605      	mov	r5, r0
 8000efe:	460c      	mov	r4, r1
 8000f00:	4616      	mov	r6, r2
 8000f02:	d505      	bpl.n	8000f10 <__swrite+0x1e>
 8000f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f000 f83c 	bl	8000f88 <_lseek_r>
 8000f10:	89a3      	ldrh	r3, [r4, #12]
 8000f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f1a:	81a3      	strh	r3, [r4, #12]
 8000f1c:	4632      	mov	r2, r6
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4628      	mov	r0, r5
 8000f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f26:	f000 b853 	b.w	8000fd0 <_write_r>

08000f2a <__sseek>:
 8000f2a:	b510      	push	{r4, lr}
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f32:	f000 f829 	bl	8000f88 <_lseek_r>
 8000f36:	1c43      	adds	r3, r0, #1
 8000f38:	89a3      	ldrh	r3, [r4, #12]
 8000f3a:	bf15      	itete	ne
 8000f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f46:	81a3      	strheq	r3, [r4, #12]
 8000f48:	bf18      	it	ne
 8000f4a:	81a3      	strhne	r3, [r4, #12]
 8000f4c:	bd10      	pop	{r4, pc}

08000f4e <__sclose>:
 8000f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f52:	f000 b809 	b.w	8000f68 <_close_r>

08000f56 <memset>:
 8000f56:	4402      	add	r2, r0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d100      	bne.n	8000f60 <memset+0xa>
 8000f5e:	4770      	bx	lr
 8000f60:	f803 1b01 	strb.w	r1, [r3], #1
 8000f64:	e7f9      	b.n	8000f5a <memset+0x4>
	...

08000f68 <_close_r>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4d06      	ldr	r5, [pc, #24]	; (8000f84 <_close_r+0x1c>)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	602b      	str	r3, [r5, #0]
 8000f74:	f7ff fc98 	bl	80008a8 <_close>
 8000f78:	1c43      	adds	r3, r0, #1
 8000f7a:	d102      	bne.n	8000f82 <_close_r+0x1a>
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	b103      	cbz	r3, 8000f82 <_close_r+0x1a>
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	200001c0 	.word	0x200001c0

08000f88 <_lseek_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	4d07      	ldr	r5, [pc, #28]	; (8000fa8 <_lseek_r+0x20>)
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4611      	mov	r1, r2
 8000f92:	2200      	movs	r2, #0
 8000f94:	602a      	str	r2, [r5, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f7ff fc90 	bl	80008bc <_lseek>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_lseek_r+0x1e>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_lseek_r+0x1e>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	200001c0 	.word	0x200001c0

08000fac <_read_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d07      	ldr	r5, [pc, #28]	; (8000fcc <_read_r+0x20>)
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	602a      	str	r2, [r5, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f7ff fc64 	bl	8000888 <_read>
 8000fc0:	1c43      	adds	r3, r0, #1
 8000fc2:	d102      	bne.n	8000fca <_read_r+0x1e>
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	b103      	cbz	r3, 8000fca <_read_r+0x1e>
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	200001c0 	.word	0x200001c0

08000fd0 <_write_r>:
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 8000fd2:	4d07      	ldr	r5, [pc, #28]	; (8000ff0 <_write_r+0x20>)
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4611      	mov	r1, r2
 8000fda:	2200      	movs	r2, #0
 8000fdc:	602a      	str	r2, [r5, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f7ff fb58 	bl	8000694 <_write>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d102      	bne.n	8000fee <_write_r+0x1e>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b103      	cbz	r3, 8000fee <_write_r+0x1e>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	200001c0 	.word	0x200001c0

08000ff4 <__errno>:
 8000ff4:	4b01      	ldr	r3, [pc, #4]	; (8000ffc <__errno+0x8>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000005c 	.word	0x2000005c

08001000 <__libc_init_array>:
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	4d0d      	ldr	r5, [pc, #52]	; (8001038 <__libc_init_array+0x38>)
 8001004:	4c0d      	ldr	r4, [pc, #52]	; (800103c <__libc_init_array+0x3c>)
 8001006:	1b64      	subs	r4, r4, r5
 8001008:	10a4      	asrs	r4, r4, #2
 800100a:	2600      	movs	r6, #0
 800100c:	42a6      	cmp	r6, r4
 800100e:	d109      	bne.n	8001024 <__libc_init_array+0x24>
 8001010:	4d0b      	ldr	r5, [pc, #44]	; (8001040 <__libc_init_array+0x40>)
 8001012:	4c0c      	ldr	r4, [pc, #48]	; (8001044 <__libc_init_array+0x44>)
 8001014:	f000 fdf4 	bl	8001c00 <_init>
 8001018:	1b64      	subs	r4, r4, r5
 800101a:	10a4      	asrs	r4, r4, #2
 800101c:	2600      	movs	r6, #0
 800101e:	42a6      	cmp	r6, r4
 8001020:	d105      	bne.n	800102e <__libc_init_array+0x2e>
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	f855 3b04 	ldr.w	r3, [r5], #4
 8001028:	4798      	blx	r3
 800102a:	3601      	adds	r6, #1
 800102c:	e7ee      	b.n	800100c <__libc_init_array+0xc>
 800102e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001032:	4798      	blx	r3
 8001034:	3601      	adds	r6, #1
 8001036:	e7f2      	b.n	800101e <__libc_init_array+0x1e>
 8001038:	08001c84 	.word	0x08001c84
 800103c:	08001c84 	.word	0x08001c84
 8001040:	08001c84 	.word	0x08001c84
 8001044:	08001c88 	.word	0x08001c88

08001048 <__retarget_lock_init_recursive>:
 8001048:	4770      	bx	lr

0800104a <__retarget_lock_acquire_recursive>:
 800104a:	4770      	bx	lr

0800104c <__retarget_lock_release_recursive>:
 800104c:	4770      	bx	lr
	...

08001050 <_free_r>:
 8001050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001052:	2900      	cmp	r1, #0
 8001054:	d044      	beq.n	80010e0 <_free_r+0x90>
 8001056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800105a:	9001      	str	r0, [sp, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f1a1 0404 	sub.w	r4, r1, #4
 8001062:	bfb8      	it	lt
 8001064:	18e4      	addlt	r4, r4, r3
 8001066:	f000 f8df 	bl	8001228 <__malloc_lock>
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <_free_r+0x94>)
 800106c:	9801      	ldr	r0, [sp, #4]
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	b933      	cbnz	r3, 8001080 <_free_r+0x30>
 8001072:	6063      	str	r3, [r4, #4]
 8001074:	6014      	str	r4, [r2, #0]
 8001076:	b003      	add	sp, #12
 8001078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800107c:	f000 b8da 	b.w	8001234 <__malloc_unlock>
 8001080:	42a3      	cmp	r3, r4
 8001082:	d908      	bls.n	8001096 <_free_r+0x46>
 8001084:	6825      	ldr	r5, [r4, #0]
 8001086:	1961      	adds	r1, r4, r5
 8001088:	428b      	cmp	r3, r1
 800108a:	bf01      	itttt	eq
 800108c:	6819      	ldreq	r1, [r3, #0]
 800108e:	685b      	ldreq	r3, [r3, #4]
 8001090:	1949      	addeq	r1, r1, r5
 8001092:	6021      	streq	r1, [r4, #0]
 8001094:	e7ed      	b.n	8001072 <_free_r+0x22>
 8001096:	461a      	mov	r2, r3
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	b10b      	cbz	r3, 80010a0 <_free_r+0x50>
 800109c:	42a3      	cmp	r3, r4
 800109e:	d9fa      	bls.n	8001096 <_free_r+0x46>
 80010a0:	6811      	ldr	r1, [r2, #0]
 80010a2:	1855      	adds	r5, r2, r1
 80010a4:	42a5      	cmp	r5, r4
 80010a6:	d10b      	bne.n	80010c0 <_free_r+0x70>
 80010a8:	6824      	ldr	r4, [r4, #0]
 80010aa:	4421      	add	r1, r4
 80010ac:	1854      	adds	r4, r2, r1
 80010ae:	42a3      	cmp	r3, r4
 80010b0:	6011      	str	r1, [r2, #0]
 80010b2:	d1e0      	bne.n	8001076 <_free_r+0x26>
 80010b4:	681c      	ldr	r4, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	6053      	str	r3, [r2, #4]
 80010ba:	440c      	add	r4, r1
 80010bc:	6014      	str	r4, [r2, #0]
 80010be:	e7da      	b.n	8001076 <_free_r+0x26>
 80010c0:	d902      	bls.n	80010c8 <_free_r+0x78>
 80010c2:	230c      	movs	r3, #12
 80010c4:	6003      	str	r3, [r0, #0]
 80010c6:	e7d6      	b.n	8001076 <_free_r+0x26>
 80010c8:	6825      	ldr	r5, [r4, #0]
 80010ca:	1961      	adds	r1, r4, r5
 80010cc:	428b      	cmp	r3, r1
 80010ce:	bf04      	itt	eq
 80010d0:	6819      	ldreq	r1, [r3, #0]
 80010d2:	685b      	ldreq	r3, [r3, #4]
 80010d4:	6063      	str	r3, [r4, #4]
 80010d6:	bf04      	itt	eq
 80010d8:	1949      	addeq	r1, r1, r5
 80010da:	6021      	streq	r1, [r4, #0]
 80010dc:	6054      	str	r4, [r2, #4]
 80010de:	e7ca      	b.n	8001076 <_free_r+0x26>
 80010e0:	b003      	add	sp, #12
 80010e2:	bd30      	pop	{r4, r5, pc}
 80010e4:	200001c8 	.word	0x200001c8

080010e8 <sbrk_aligned>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4e0e      	ldr	r6, [pc, #56]	; (8001124 <sbrk_aligned+0x3c>)
 80010ec:	460c      	mov	r4, r1
 80010ee:	6831      	ldr	r1, [r6, #0]
 80010f0:	4605      	mov	r5, r0
 80010f2:	b911      	cbnz	r1, 80010fa <sbrk_aligned+0x12>
 80010f4:	f000 fcf0 	bl	8001ad8 <_sbrk_r>
 80010f8:	6030      	str	r0, [r6, #0]
 80010fa:	4621      	mov	r1, r4
 80010fc:	4628      	mov	r0, r5
 80010fe:	f000 fceb 	bl	8001ad8 <_sbrk_r>
 8001102:	1c43      	adds	r3, r0, #1
 8001104:	d00a      	beq.n	800111c <sbrk_aligned+0x34>
 8001106:	1cc4      	adds	r4, r0, #3
 8001108:	f024 0403 	bic.w	r4, r4, #3
 800110c:	42a0      	cmp	r0, r4
 800110e:	d007      	beq.n	8001120 <sbrk_aligned+0x38>
 8001110:	1a21      	subs	r1, r4, r0
 8001112:	4628      	mov	r0, r5
 8001114:	f000 fce0 	bl	8001ad8 <_sbrk_r>
 8001118:	3001      	adds	r0, #1
 800111a:	d101      	bne.n	8001120 <sbrk_aligned+0x38>
 800111c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001120:	4620      	mov	r0, r4
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	200001cc 	.word	0x200001cc

08001128 <_malloc_r>:
 8001128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800112c:	1ccd      	adds	r5, r1, #3
 800112e:	f025 0503 	bic.w	r5, r5, #3
 8001132:	3508      	adds	r5, #8
 8001134:	2d0c      	cmp	r5, #12
 8001136:	bf38      	it	cc
 8001138:	250c      	movcc	r5, #12
 800113a:	2d00      	cmp	r5, #0
 800113c:	4607      	mov	r7, r0
 800113e:	db01      	blt.n	8001144 <_malloc_r+0x1c>
 8001140:	42a9      	cmp	r1, r5
 8001142:	d905      	bls.n	8001150 <_malloc_r+0x28>
 8001144:	230c      	movs	r3, #12
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	2600      	movs	r6, #0
 800114a:	4630      	mov	r0, r6
 800114c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001224 <_malloc_r+0xfc>
 8001154:	f000 f868 	bl	8001228 <__malloc_lock>
 8001158:	f8d8 3000 	ldr.w	r3, [r8]
 800115c:	461c      	mov	r4, r3
 800115e:	bb5c      	cbnz	r4, 80011b8 <_malloc_r+0x90>
 8001160:	4629      	mov	r1, r5
 8001162:	4638      	mov	r0, r7
 8001164:	f7ff ffc0 	bl	80010e8 <sbrk_aligned>
 8001168:	1c43      	adds	r3, r0, #1
 800116a:	4604      	mov	r4, r0
 800116c:	d155      	bne.n	800121a <_malloc_r+0xf2>
 800116e:	f8d8 4000 	ldr.w	r4, [r8]
 8001172:	4626      	mov	r6, r4
 8001174:	2e00      	cmp	r6, #0
 8001176:	d145      	bne.n	8001204 <_malloc_r+0xdc>
 8001178:	2c00      	cmp	r4, #0
 800117a:	d048      	beq.n	800120e <_malloc_r+0xe6>
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	4631      	mov	r1, r6
 8001180:	4638      	mov	r0, r7
 8001182:	eb04 0903 	add.w	r9, r4, r3
 8001186:	f000 fca7 	bl	8001ad8 <_sbrk_r>
 800118a:	4581      	cmp	r9, r0
 800118c:	d13f      	bne.n	800120e <_malloc_r+0xe6>
 800118e:	6821      	ldr	r1, [r4, #0]
 8001190:	1a6d      	subs	r5, r5, r1
 8001192:	4629      	mov	r1, r5
 8001194:	4638      	mov	r0, r7
 8001196:	f7ff ffa7 	bl	80010e8 <sbrk_aligned>
 800119a:	3001      	adds	r0, #1
 800119c:	d037      	beq.n	800120e <_malloc_r+0xe6>
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	442b      	add	r3, r5
 80011a2:	6023      	str	r3, [r4, #0]
 80011a4:	f8d8 3000 	ldr.w	r3, [r8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d038      	beq.n	800121e <_malloc_r+0xf6>
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	42a2      	cmp	r2, r4
 80011b0:	d12b      	bne.n	800120a <_malloc_r+0xe2>
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	e00f      	b.n	80011d8 <_malloc_r+0xb0>
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	1b52      	subs	r2, r2, r5
 80011bc:	d41f      	bmi.n	80011fe <_malloc_r+0xd6>
 80011be:	2a0b      	cmp	r2, #11
 80011c0:	d917      	bls.n	80011f2 <_malloc_r+0xca>
 80011c2:	1961      	adds	r1, r4, r5
 80011c4:	42a3      	cmp	r3, r4
 80011c6:	6025      	str	r5, [r4, #0]
 80011c8:	bf18      	it	ne
 80011ca:	6059      	strne	r1, [r3, #4]
 80011cc:	6863      	ldr	r3, [r4, #4]
 80011ce:	bf08      	it	eq
 80011d0:	f8c8 1000 	streq.w	r1, [r8]
 80011d4:	5162      	str	r2, [r4, r5]
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	4638      	mov	r0, r7
 80011da:	f104 060b 	add.w	r6, r4, #11
 80011de:	f000 f829 	bl	8001234 <__malloc_unlock>
 80011e2:	f026 0607 	bic.w	r6, r6, #7
 80011e6:	1d23      	adds	r3, r4, #4
 80011e8:	1af2      	subs	r2, r6, r3
 80011ea:	d0ae      	beq.n	800114a <_malloc_r+0x22>
 80011ec:	1b9b      	subs	r3, r3, r6
 80011ee:	50a3      	str	r3, [r4, r2]
 80011f0:	e7ab      	b.n	800114a <_malloc_r+0x22>
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	6862      	ldr	r2, [r4, #4]
 80011f6:	d1dd      	bne.n	80011b4 <_malloc_r+0x8c>
 80011f8:	f8c8 2000 	str.w	r2, [r8]
 80011fc:	e7ec      	b.n	80011d8 <_malloc_r+0xb0>
 80011fe:	4623      	mov	r3, r4
 8001200:	6864      	ldr	r4, [r4, #4]
 8001202:	e7ac      	b.n	800115e <_malloc_r+0x36>
 8001204:	4634      	mov	r4, r6
 8001206:	6876      	ldr	r6, [r6, #4]
 8001208:	e7b4      	b.n	8001174 <_malloc_r+0x4c>
 800120a:	4613      	mov	r3, r2
 800120c:	e7cc      	b.n	80011a8 <_malloc_r+0x80>
 800120e:	230c      	movs	r3, #12
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4638      	mov	r0, r7
 8001214:	f000 f80e 	bl	8001234 <__malloc_unlock>
 8001218:	e797      	b.n	800114a <_malloc_r+0x22>
 800121a:	6025      	str	r5, [r4, #0]
 800121c:	e7dc      	b.n	80011d8 <_malloc_r+0xb0>
 800121e:	605b      	str	r3, [r3, #4]
 8001220:	deff      	udf	#255	; 0xff
 8001222:	bf00      	nop
 8001224:	200001c8 	.word	0x200001c8

08001228 <__malloc_lock>:
 8001228:	4801      	ldr	r0, [pc, #4]	; (8001230 <__malloc_lock+0x8>)
 800122a:	f7ff bf0e 	b.w	800104a <__retarget_lock_acquire_recursive>
 800122e:	bf00      	nop
 8001230:	200001c4 	.word	0x200001c4

08001234 <__malloc_unlock>:
 8001234:	4801      	ldr	r0, [pc, #4]	; (800123c <__malloc_unlock+0x8>)
 8001236:	f7ff bf09 	b.w	800104c <__retarget_lock_release_recursive>
 800123a:	bf00      	nop
 800123c:	200001c4 	.word	0x200001c4

08001240 <__sfputc_r>:
 8001240:	6893      	ldr	r3, [r2, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	b410      	push	{r4}
 8001248:	6093      	str	r3, [r2, #8]
 800124a:	da08      	bge.n	800125e <__sfputc_r+0x1e>
 800124c:	6994      	ldr	r4, [r2, #24]
 800124e:	42a3      	cmp	r3, r4
 8001250:	db01      	blt.n	8001256 <__sfputc_r+0x16>
 8001252:	290a      	cmp	r1, #10
 8001254:	d103      	bne.n	800125e <__sfputc_r+0x1e>
 8001256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800125a:	f000 bba7 	b.w	80019ac <__swbuf_r>
 800125e:	6813      	ldr	r3, [r2, #0]
 8001260:	1c58      	adds	r0, r3, #1
 8001262:	6010      	str	r0, [r2, #0]
 8001264:	7019      	strb	r1, [r3, #0]
 8001266:	4608      	mov	r0, r1
 8001268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800126c:	4770      	bx	lr

0800126e <__sfputs_r>:
 800126e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001270:	4606      	mov	r6, r0
 8001272:	460f      	mov	r7, r1
 8001274:	4614      	mov	r4, r2
 8001276:	18d5      	adds	r5, r2, r3
 8001278:	42ac      	cmp	r4, r5
 800127a:	d101      	bne.n	8001280 <__sfputs_r+0x12>
 800127c:	2000      	movs	r0, #0
 800127e:	e007      	b.n	8001290 <__sfputs_r+0x22>
 8001280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001284:	463a      	mov	r2, r7
 8001286:	4630      	mov	r0, r6
 8001288:	f7ff ffda 	bl	8001240 <__sfputc_r>
 800128c:	1c43      	adds	r3, r0, #1
 800128e:	d1f3      	bne.n	8001278 <__sfputs_r+0xa>
 8001290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001294 <_vfiprintf_r>:
 8001294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001298:	460d      	mov	r5, r1
 800129a:	b09d      	sub	sp, #116	; 0x74
 800129c:	4614      	mov	r4, r2
 800129e:	4698      	mov	r8, r3
 80012a0:	4606      	mov	r6, r0
 80012a2:	b118      	cbz	r0, 80012ac <_vfiprintf_r+0x18>
 80012a4:	6a03      	ldr	r3, [r0, #32]
 80012a6:	b90b      	cbnz	r3, 80012ac <_vfiprintf_r+0x18>
 80012a8:	f7ff fdc2 	bl	8000e30 <__sinit>
 80012ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012ae:	07d9      	lsls	r1, r3, #31
 80012b0:	d405      	bmi.n	80012be <_vfiprintf_r+0x2a>
 80012b2:	89ab      	ldrh	r3, [r5, #12]
 80012b4:	059a      	lsls	r2, r3, #22
 80012b6:	d402      	bmi.n	80012be <_vfiprintf_r+0x2a>
 80012b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012ba:	f7ff fec6 	bl	800104a <__retarget_lock_acquire_recursive>
 80012be:	89ab      	ldrh	r3, [r5, #12]
 80012c0:	071b      	lsls	r3, r3, #28
 80012c2:	d501      	bpl.n	80012c8 <_vfiprintf_r+0x34>
 80012c4:	692b      	ldr	r3, [r5, #16]
 80012c6:	b99b      	cbnz	r3, 80012f0 <_vfiprintf_r+0x5c>
 80012c8:	4629      	mov	r1, r5
 80012ca:	4630      	mov	r0, r6
 80012cc:	f000 fbac 	bl	8001a28 <__swsetup_r>
 80012d0:	b170      	cbz	r0, 80012f0 <_vfiprintf_r+0x5c>
 80012d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012d4:	07dc      	lsls	r4, r3, #31
 80012d6:	d504      	bpl.n	80012e2 <_vfiprintf_r+0x4e>
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012dc:	b01d      	add	sp, #116	; 0x74
 80012de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012e2:	89ab      	ldrh	r3, [r5, #12]
 80012e4:	0598      	lsls	r0, r3, #22
 80012e6:	d4f7      	bmi.n	80012d8 <_vfiprintf_r+0x44>
 80012e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012ea:	f7ff feaf 	bl	800104c <__retarget_lock_release_recursive>
 80012ee:	e7f3      	b.n	80012d8 <_vfiprintf_r+0x44>
 80012f0:	2300      	movs	r3, #0
 80012f2:	9309      	str	r3, [sp, #36]	; 0x24
 80012f4:	2320      	movs	r3, #32
 80012f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80012fe:	2330      	movs	r3, #48	; 0x30
 8001300:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80014b4 <_vfiprintf_r+0x220>
 8001304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001308:	f04f 0901 	mov.w	r9, #1
 800130c:	4623      	mov	r3, r4
 800130e:	469a      	mov	sl, r3
 8001310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001314:	b10a      	cbz	r2, 800131a <_vfiprintf_r+0x86>
 8001316:	2a25      	cmp	r2, #37	; 0x25
 8001318:	d1f9      	bne.n	800130e <_vfiprintf_r+0x7a>
 800131a:	ebba 0b04 	subs.w	fp, sl, r4
 800131e:	d00b      	beq.n	8001338 <_vfiprintf_r+0xa4>
 8001320:	465b      	mov	r3, fp
 8001322:	4622      	mov	r2, r4
 8001324:	4629      	mov	r1, r5
 8001326:	4630      	mov	r0, r6
 8001328:	f7ff ffa1 	bl	800126e <__sfputs_r>
 800132c:	3001      	adds	r0, #1
 800132e:	f000 80a9 	beq.w	8001484 <_vfiprintf_r+0x1f0>
 8001332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001334:	445a      	add	r2, fp
 8001336:	9209      	str	r2, [sp, #36]	; 0x24
 8001338:	f89a 3000 	ldrb.w	r3, [sl]
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a1 	beq.w	8001484 <_vfiprintf_r+0x1f0>
 8001342:	2300      	movs	r3, #0
 8001344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800134c:	f10a 0a01 	add.w	sl, sl, #1
 8001350:	9304      	str	r3, [sp, #16]
 8001352:	9307      	str	r3, [sp, #28]
 8001354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001358:	931a      	str	r3, [sp, #104]	; 0x68
 800135a:	4654      	mov	r4, sl
 800135c:	2205      	movs	r2, #5
 800135e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001362:	4854      	ldr	r0, [pc, #336]	; (80014b4 <_vfiprintf_r+0x220>)
 8001364:	f7fe ff3c 	bl	80001e0 <memchr>
 8001368:	9a04      	ldr	r2, [sp, #16]
 800136a:	b9d8      	cbnz	r0, 80013a4 <_vfiprintf_r+0x110>
 800136c:	06d1      	lsls	r1, r2, #27
 800136e:	bf44      	itt	mi
 8001370:	2320      	movmi	r3, #32
 8001372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001376:	0713      	lsls	r3, r2, #28
 8001378:	bf44      	itt	mi
 800137a:	232b      	movmi	r3, #43	; 0x2b
 800137c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001380:	f89a 3000 	ldrb.w	r3, [sl]
 8001384:	2b2a      	cmp	r3, #42	; 0x2a
 8001386:	d015      	beq.n	80013b4 <_vfiprintf_r+0x120>
 8001388:	9a07      	ldr	r2, [sp, #28]
 800138a:	4654      	mov	r4, sl
 800138c:	2000      	movs	r0, #0
 800138e:	f04f 0c0a 	mov.w	ip, #10
 8001392:	4621      	mov	r1, r4
 8001394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001398:	3b30      	subs	r3, #48	; 0x30
 800139a:	2b09      	cmp	r3, #9
 800139c:	d94d      	bls.n	800143a <_vfiprintf_r+0x1a6>
 800139e:	b1b0      	cbz	r0, 80013ce <_vfiprintf_r+0x13a>
 80013a0:	9207      	str	r2, [sp, #28]
 80013a2:	e014      	b.n	80013ce <_vfiprintf_r+0x13a>
 80013a4:	eba0 0308 	sub.w	r3, r0, r8
 80013a8:	fa09 f303 	lsl.w	r3, r9, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	9304      	str	r3, [sp, #16]
 80013b0:	46a2      	mov	sl, r4
 80013b2:	e7d2      	b.n	800135a <_vfiprintf_r+0xc6>
 80013b4:	9b03      	ldr	r3, [sp, #12]
 80013b6:	1d19      	adds	r1, r3, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	9103      	str	r1, [sp, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bfbb      	ittet	lt
 80013c0:	425b      	neglt	r3, r3
 80013c2:	f042 0202 	orrlt.w	r2, r2, #2
 80013c6:	9307      	strge	r3, [sp, #28]
 80013c8:	9307      	strlt	r3, [sp, #28]
 80013ca:	bfb8      	it	lt
 80013cc:	9204      	strlt	r2, [sp, #16]
 80013ce:	7823      	ldrb	r3, [r4, #0]
 80013d0:	2b2e      	cmp	r3, #46	; 0x2e
 80013d2:	d10c      	bne.n	80013ee <_vfiprintf_r+0x15a>
 80013d4:	7863      	ldrb	r3, [r4, #1]
 80013d6:	2b2a      	cmp	r3, #42	; 0x2a
 80013d8:	d134      	bne.n	8001444 <_vfiprintf_r+0x1b0>
 80013da:	9b03      	ldr	r3, [sp, #12]
 80013dc:	1d1a      	adds	r2, r3, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	9203      	str	r2, [sp, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bfb8      	it	lt
 80013e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80013ea:	3402      	adds	r4, #2
 80013ec:	9305      	str	r3, [sp, #20]
 80013ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80014c4 <_vfiprintf_r+0x230>
 80013f2:	7821      	ldrb	r1, [r4, #0]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4650      	mov	r0, sl
 80013f8:	f7fe fef2 	bl	80001e0 <memchr>
 80013fc:	b138      	cbz	r0, 800140e <_vfiprintf_r+0x17a>
 80013fe:	9b04      	ldr	r3, [sp, #16]
 8001400:	eba0 000a 	sub.w	r0, r0, sl
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	4082      	lsls	r2, r0
 8001408:	4313      	orrs	r3, r2
 800140a:	3401      	adds	r4, #1
 800140c:	9304      	str	r3, [sp, #16]
 800140e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <_vfiprintf_r+0x224>)
 8001414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001418:	2206      	movs	r2, #6
 800141a:	f7fe fee1 	bl	80001e0 <memchr>
 800141e:	2800      	cmp	r0, #0
 8001420:	d03f      	beq.n	80014a2 <_vfiprintf_r+0x20e>
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <_vfiprintf_r+0x228>)
 8001424:	bb1b      	cbnz	r3, 800146e <_vfiprintf_r+0x1da>
 8001426:	9b03      	ldr	r3, [sp, #12]
 8001428:	3307      	adds	r3, #7
 800142a:	f023 0307 	bic.w	r3, r3, #7
 800142e:	3308      	adds	r3, #8
 8001430:	9303      	str	r3, [sp, #12]
 8001432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001434:	443b      	add	r3, r7
 8001436:	9309      	str	r3, [sp, #36]	; 0x24
 8001438:	e768      	b.n	800130c <_vfiprintf_r+0x78>
 800143a:	fb0c 3202 	mla	r2, ip, r2, r3
 800143e:	460c      	mov	r4, r1
 8001440:	2001      	movs	r0, #1
 8001442:	e7a6      	b.n	8001392 <_vfiprintf_r+0xfe>
 8001444:	2300      	movs	r3, #0
 8001446:	3401      	adds	r4, #1
 8001448:	9305      	str	r3, [sp, #20]
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 0c0a 	mov.w	ip, #10
 8001450:	4620      	mov	r0, r4
 8001452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001456:	3a30      	subs	r2, #48	; 0x30
 8001458:	2a09      	cmp	r2, #9
 800145a:	d903      	bls.n	8001464 <_vfiprintf_r+0x1d0>
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0c6      	beq.n	80013ee <_vfiprintf_r+0x15a>
 8001460:	9105      	str	r1, [sp, #20]
 8001462:	e7c4      	b.n	80013ee <_vfiprintf_r+0x15a>
 8001464:	fb0c 2101 	mla	r1, ip, r1, r2
 8001468:	4604      	mov	r4, r0
 800146a:	2301      	movs	r3, #1
 800146c:	e7f0      	b.n	8001450 <_vfiprintf_r+0x1bc>
 800146e:	ab03      	add	r3, sp, #12
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	462a      	mov	r2, r5
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <_vfiprintf_r+0x22c>)
 8001476:	a904      	add	r1, sp, #16
 8001478:	4630      	mov	r0, r6
 800147a:	f3af 8000 	nop.w
 800147e:	4607      	mov	r7, r0
 8001480:	1c78      	adds	r0, r7, #1
 8001482:	d1d6      	bne.n	8001432 <_vfiprintf_r+0x19e>
 8001484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001486:	07d9      	lsls	r1, r3, #31
 8001488:	d405      	bmi.n	8001496 <_vfiprintf_r+0x202>
 800148a:	89ab      	ldrh	r3, [r5, #12]
 800148c:	059a      	lsls	r2, r3, #22
 800148e:	d402      	bmi.n	8001496 <_vfiprintf_r+0x202>
 8001490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001492:	f7ff fddb 	bl	800104c <__retarget_lock_release_recursive>
 8001496:	89ab      	ldrh	r3, [r5, #12]
 8001498:	065b      	lsls	r3, r3, #25
 800149a:	f53f af1d 	bmi.w	80012d8 <_vfiprintf_r+0x44>
 800149e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014a0:	e71c      	b.n	80012dc <_vfiprintf_r+0x48>
 80014a2:	ab03      	add	r3, sp, #12
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	462a      	mov	r2, r5
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <_vfiprintf_r+0x22c>)
 80014aa:	a904      	add	r1, sp, #16
 80014ac:	4630      	mov	r0, r6
 80014ae:	f000 f879 	bl	80015a4 <_printf_i>
 80014b2:	e7e4      	b.n	800147e <_vfiprintf_r+0x1ea>
 80014b4:	08001c48 	.word	0x08001c48
 80014b8:	08001c52 	.word	0x08001c52
 80014bc:	00000000 	.word	0x00000000
 80014c0:	0800126f 	.word	0x0800126f
 80014c4:	08001c4e 	.word	0x08001c4e

080014c8 <_printf_common>:
 80014c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014cc:	4616      	mov	r6, r2
 80014ce:	4699      	mov	r9, r3
 80014d0:	688a      	ldr	r2, [r1, #8]
 80014d2:	690b      	ldr	r3, [r1, #16]
 80014d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014d8:	4293      	cmp	r3, r2
 80014da:	bfb8      	it	lt
 80014dc:	4613      	movlt	r3, r2
 80014de:	6033      	str	r3, [r6, #0]
 80014e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014e4:	4607      	mov	r7, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	b10a      	cbz	r2, 80014ee <_printf_common+0x26>
 80014ea:	3301      	adds	r3, #1
 80014ec:	6033      	str	r3, [r6, #0]
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	0699      	lsls	r1, r3, #26
 80014f2:	bf42      	ittt	mi
 80014f4:	6833      	ldrmi	r3, [r6, #0]
 80014f6:	3302      	addmi	r3, #2
 80014f8:	6033      	strmi	r3, [r6, #0]
 80014fa:	6825      	ldr	r5, [r4, #0]
 80014fc:	f015 0506 	ands.w	r5, r5, #6
 8001500:	d106      	bne.n	8001510 <_printf_common+0x48>
 8001502:	f104 0a19 	add.w	sl, r4, #25
 8001506:	68e3      	ldr	r3, [r4, #12]
 8001508:	6832      	ldr	r2, [r6, #0]
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	42ab      	cmp	r3, r5
 800150e:	dc26      	bgt.n	800155e <_printf_common+0x96>
 8001510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001514:	1e13      	subs	r3, r2, #0
 8001516:	6822      	ldr	r2, [r4, #0]
 8001518:	bf18      	it	ne
 800151a:	2301      	movne	r3, #1
 800151c:	0692      	lsls	r2, r2, #26
 800151e:	d42b      	bmi.n	8001578 <_printf_common+0xb0>
 8001520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001524:	4649      	mov	r1, r9
 8001526:	4638      	mov	r0, r7
 8001528:	47c0      	blx	r8
 800152a:	3001      	adds	r0, #1
 800152c:	d01e      	beq.n	800156c <_printf_common+0xa4>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	6922      	ldr	r2, [r4, #16]
 8001532:	f003 0306 	and.w	r3, r3, #6
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf02      	ittt	eq
 800153a:	68e5      	ldreq	r5, [r4, #12]
 800153c:	6833      	ldreq	r3, [r6, #0]
 800153e:	1aed      	subeq	r5, r5, r3
 8001540:	68a3      	ldr	r3, [r4, #8]
 8001542:	bf0c      	ite	eq
 8001544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001548:	2500      	movne	r5, #0
 800154a:	4293      	cmp	r3, r2
 800154c:	bfc4      	itt	gt
 800154e:	1a9b      	subgt	r3, r3, r2
 8001550:	18ed      	addgt	r5, r5, r3
 8001552:	2600      	movs	r6, #0
 8001554:	341a      	adds	r4, #26
 8001556:	42b5      	cmp	r5, r6
 8001558:	d11a      	bne.n	8001590 <_printf_common+0xc8>
 800155a:	2000      	movs	r0, #0
 800155c:	e008      	b.n	8001570 <_printf_common+0xa8>
 800155e:	2301      	movs	r3, #1
 8001560:	4652      	mov	r2, sl
 8001562:	4649      	mov	r1, r9
 8001564:	4638      	mov	r0, r7
 8001566:	47c0      	blx	r8
 8001568:	3001      	adds	r0, #1
 800156a:	d103      	bne.n	8001574 <_printf_common+0xac>
 800156c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001574:	3501      	adds	r5, #1
 8001576:	e7c6      	b.n	8001506 <_printf_common+0x3e>
 8001578:	18e1      	adds	r1, r4, r3
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	2030      	movs	r0, #48	; 0x30
 800157e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001582:	4422      	add	r2, r4
 8001584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800158c:	3302      	adds	r3, #2
 800158e:	e7c7      	b.n	8001520 <_printf_common+0x58>
 8001590:	2301      	movs	r3, #1
 8001592:	4622      	mov	r2, r4
 8001594:	4649      	mov	r1, r9
 8001596:	4638      	mov	r0, r7
 8001598:	47c0      	blx	r8
 800159a:	3001      	adds	r0, #1
 800159c:	d0e6      	beq.n	800156c <_printf_common+0xa4>
 800159e:	3601      	adds	r6, #1
 80015a0:	e7d9      	b.n	8001556 <_printf_common+0x8e>
	...

080015a4 <_printf_i>:
 80015a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015a8:	7e0f      	ldrb	r7, [r1, #24]
 80015aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80015ac:	2f78      	cmp	r7, #120	; 0x78
 80015ae:	4691      	mov	r9, r2
 80015b0:	4680      	mov	r8, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	469a      	mov	sl, r3
 80015b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80015ba:	d807      	bhi.n	80015cc <_printf_i+0x28>
 80015bc:	2f62      	cmp	r7, #98	; 0x62
 80015be:	d80a      	bhi.n	80015d6 <_printf_i+0x32>
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	f000 80d4 	beq.w	800176e <_printf_i+0x1ca>
 80015c6:	2f58      	cmp	r7, #88	; 0x58
 80015c8:	f000 80c0 	beq.w	800174c <_printf_i+0x1a8>
 80015cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80015d4:	e03a      	b.n	800164c <_printf_i+0xa8>
 80015d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80015da:	2b15      	cmp	r3, #21
 80015dc:	d8f6      	bhi.n	80015cc <_printf_i+0x28>
 80015de:	a101      	add	r1, pc, #4	; (adr r1, 80015e4 <_printf_i+0x40>)
 80015e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015e4:	0800163d 	.word	0x0800163d
 80015e8:	08001651 	.word	0x08001651
 80015ec:	080015cd 	.word	0x080015cd
 80015f0:	080015cd 	.word	0x080015cd
 80015f4:	080015cd 	.word	0x080015cd
 80015f8:	080015cd 	.word	0x080015cd
 80015fc:	08001651 	.word	0x08001651
 8001600:	080015cd 	.word	0x080015cd
 8001604:	080015cd 	.word	0x080015cd
 8001608:	080015cd 	.word	0x080015cd
 800160c:	080015cd 	.word	0x080015cd
 8001610:	08001755 	.word	0x08001755
 8001614:	0800167d 	.word	0x0800167d
 8001618:	0800170f 	.word	0x0800170f
 800161c:	080015cd 	.word	0x080015cd
 8001620:	080015cd 	.word	0x080015cd
 8001624:	08001777 	.word	0x08001777
 8001628:	080015cd 	.word	0x080015cd
 800162c:	0800167d 	.word	0x0800167d
 8001630:	080015cd 	.word	0x080015cd
 8001634:	080015cd 	.word	0x080015cd
 8001638:	08001717 	.word	0x08001717
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	1d1a      	adds	r2, r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	602a      	str	r2, [r5, #0]
 8001644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800164c:	2301      	movs	r3, #1
 800164e:	e09f      	b.n	8001790 <_printf_i+0x1ec>
 8001650:	6820      	ldr	r0, [r4, #0]
 8001652:	682b      	ldr	r3, [r5, #0]
 8001654:	0607      	lsls	r7, r0, #24
 8001656:	f103 0104 	add.w	r1, r3, #4
 800165a:	6029      	str	r1, [r5, #0]
 800165c:	d501      	bpl.n	8001662 <_printf_i+0xbe>
 800165e:	681e      	ldr	r6, [r3, #0]
 8001660:	e003      	b.n	800166a <_printf_i+0xc6>
 8001662:	0646      	lsls	r6, r0, #25
 8001664:	d5fb      	bpl.n	800165e <_printf_i+0xba>
 8001666:	f9b3 6000 	ldrsh.w	r6, [r3]
 800166a:	2e00      	cmp	r6, #0
 800166c:	da03      	bge.n	8001676 <_printf_i+0xd2>
 800166e:	232d      	movs	r3, #45	; 0x2d
 8001670:	4276      	negs	r6, r6
 8001672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001676:	485a      	ldr	r0, [pc, #360]	; (80017e0 <_printf_i+0x23c>)
 8001678:	230a      	movs	r3, #10
 800167a:	e012      	b.n	80016a2 <_printf_i+0xfe>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	1d19      	adds	r1, r3, #4
 8001682:	6029      	str	r1, [r5, #0]
 8001684:	0605      	lsls	r5, r0, #24
 8001686:	d501      	bpl.n	800168c <_printf_i+0xe8>
 8001688:	681e      	ldr	r6, [r3, #0]
 800168a:	e002      	b.n	8001692 <_printf_i+0xee>
 800168c:	0641      	lsls	r1, r0, #25
 800168e:	d5fb      	bpl.n	8001688 <_printf_i+0xe4>
 8001690:	881e      	ldrh	r6, [r3, #0]
 8001692:	4853      	ldr	r0, [pc, #332]	; (80017e0 <_printf_i+0x23c>)
 8001694:	2f6f      	cmp	r7, #111	; 0x6f
 8001696:	bf0c      	ite	eq
 8001698:	2308      	moveq	r3, #8
 800169a:	230a      	movne	r3, #10
 800169c:	2100      	movs	r1, #0
 800169e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016a2:	6865      	ldr	r5, [r4, #4]
 80016a4:	60a5      	str	r5, [r4, #8]
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	bfa2      	ittt	ge
 80016aa:	6821      	ldrge	r1, [r4, #0]
 80016ac:	f021 0104 	bicge.w	r1, r1, #4
 80016b0:	6021      	strge	r1, [r4, #0]
 80016b2:	b90e      	cbnz	r6, 80016b8 <_printf_i+0x114>
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d04b      	beq.n	8001750 <_printf_i+0x1ac>
 80016b8:	4615      	mov	r5, r2
 80016ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80016be:	fb03 6711 	mls	r7, r3, r1, r6
 80016c2:	5dc7      	ldrb	r7, [r0, r7]
 80016c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80016c8:	4637      	mov	r7, r6
 80016ca:	42bb      	cmp	r3, r7
 80016cc:	460e      	mov	r6, r1
 80016ce:	d9f4      	bls.n	80016ba <_printf_i+0x116>
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d10b      	bne.n	80016ec <_printf_i+0x148>
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	07de      	lsls	r6, r3, #31
 80016d8:	d508      	bpl.n	80016ec <_printf_i+0x148>
 80016da:	6923      	ldr	r3, [r4, #16]
 80016dc:	6861      	ldr	r1, [r4, #4]
 80016de:	4299      	cmp	r1, r3
 80016e0:	bfde      	ittt	le
 80016e2:	2330      	movle	r3, #48	; 0x30
 80016e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80016e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80016ec:	1b52      	subs	r2, r2, r5
 80016ee:	6122      	str	r2, [r4, #16]
 80016f0:	f8cd a000 	str.w	sl, [sp]
 80016f4:	464b      	mov	r3, r9
 80016f6:	aa03      	add	r2, sp, #12
 80016f8:	4621      	mov	r1, r4
 80016fa:	4640      	mov	r0, r8
 80016fc:	f7ff fee4 	bl	80014c8 <_printf_common>
 8001700:	3001      	adds	r0, #1
 8001702:	d14a      	bne.n	800179a <_printf_i+0x1f6>
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001708:	b004      	add	sp, #16
 800170a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	4833      	ldr	r0, [pc, #204]	; (80017e4 <_printf_i+0x240>)
 8001718:	2778      	movs	r7, #120	; 0x78
 800171a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	6829      	ldr	r1, [r5, #0]
 8001722:	061f      	lsls	r7, r3, #24
 8001724:	f851 6b04 	ldr.w	r6, [r1], #4
 8001728:	d402      	bmi.n	8001730 <_printf_i+0x18c>
 800172a:	065f      	lsls	r7, r3, #25
 800172c:	bf48      	it	mi
 800172e:	b2b6      	uxthmi	r6, r6
 8001730:	07df      	lsls	r7, r3, #31
 8001732:	bf48      	it	mi
 8001734:	f043 0320 	orrmi.w	r3, r3, #32
 8001738:	6029      	str	r1, [r5, #0]
 800173a:	bf48      	it	mi
 800173c:	6023      	strmi	r3, [r4, #0]
 800173e:	b91e      	cbnz	r6, 8001748 <_printf_i+0x1a4>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	f023 0320 	bic.w	r3, r3, #32
 8001746:	6023      	str	r3, [r4, #0]
 8001748:	2310      	movs	r3, #16
 800174a:	e7a7      	b.n	800169c <_printf_i+0xf8>
 800174c:	4824      	ldr	r0, [pc, #144]	; (80017e0 <_printf_i+0x23c>)
 800174e:	e7e4      	b.n	800171a <_printf_i+0x176>
 8001750:	4615      	mov	r5, r2
 8001752:	e7bd      	b.n	80016d0 <_printf_i+0x12c>
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	6826      	ldr	r6, [r4, #0]
 8001758:	6961      	ldr	r1, [r4, #20]
 800175a:	1d18      	adds	r0, r3, #4
 800175c:	6028      	str	r0, [r5, #0]
 800175e:	0635      	lsls	r5, r6, #24
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	d501      	bpl.n	8001768 <_printf_i+0x1c4>
 8001764:	6019      	str	r1, [r3, #0]
 8001766:	e002      	b.n	800176e <_printf_i+0x1ca>
 8001768:	0670      	lsls	r0, r6, #25
 800176a:	d5fb      	bpl.n	8001764 <_printf_i+0x1c0>
 800176c:	8019      	strh	r1, [r3, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	6123      	str	r3, [r4, #16]
 8001772:	4615      	mov	r5, r2
 8001774:	e7bc      	b.n	80016f0 <_printf_i+0x14c>
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	1d1a      	adds	r2, r3, #4
 800177a:	602a      	str	r2, [r5, #0]
 800177c:	681d      	ldr	r5, [r3, #0]
 800177e:	6862      	ldr	r2, [r4, #4]
 8001780:	2100      	movs	r1, #0
 8001782:	4628      	mov	r0, r5
 8001784:	f7fe fd2c 	bl	80001e0 <memchr>
 8001788:	b108      	cbz	r0, 800178e <_printf_i+0x1ea>
 800178a:	1b40      	subs	r0, r0, r5
 800178c:	6060      	str	r0, [r4, #4]
 800178e:	6863      	ldr	r3, [r4, #4]
 8001790:	6123      	str	r3, [r4, #16]
 8001792:	2300      	movs	r3, #0
 8001794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001798:	e7aa      	b.n	80016f0 <_printf_i+0x14c>
 800179a:	6923      	ldr	r3, [r4, #16]
 800179c:	462a      	mov	r2, r5
 800179e:	4649      	mov	r1, r9
 80017a0:	4640      	mov	r0, r8
 80017a2:	47d0      	blx	sl
 80017a4:	3001      	adds	r0, #1
 80017a6:	d0ad      	beq.n	8001704 <_printf_i+0x160>
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	079b      	lsls	r3, r3, #30
 80017ac:	d413      	bmi.n	80017d6 <_printf_i+0x232>
 80017ae:	68e0      	ldr	r0, [r4, #12]
 80017b0:	9b03      	ldr	r3, [sp, #12]
 80017b2:	4298      	cmp	r0, r3
 80017b4:	bfb8      	it	lt
 80017b6:	4618      	movlt	r0, r3
 80017b8:	e7a6      	b.n	8001708 <_printf_i+0x164>
 80017ba:	2301      	movs	r3, #1
 80017bc:	4632      	mov	r2, r6
 80017be:	4649      	mov	r1, r9
 80017c0:	4640      	mov	r0, r8
 80017c2:	47d0      	blx	sl
 80017c4:	3001      	adds	r0, #1
 80017c6:	d09d      	beq.n	8001704 <_printf_i+0x160>
 80017c8:	3501      	adds	r5, #1
 80017ca:	68e3      	ldr	r3, [r4, #12]
 80017cc:	9903      	ldr	r1, [sp, #12]
 80017ce:	1a5b      	subs	r3, r3, r1
 80017d0:	42ab      	cmp	r3, r5
 80017d2:	dcf2      	bgt.n	80017ba <_printf_i+0x216>
 80017d4:	e7eb      	b.n	80017ae <_printf_i+0x20a>
 80017d6:	2500      	movs	r5, #0
 80017d8:	f104 0619 	add.w	r6, r4, #25
 80017dc:	e7f5      	b.n	80017ca <_printf_i+0x226>
 80017de:	bf00      	nop
 80017e0:	08001c59 	.word	0x08001c59
 80017e4:	08001c6a 	.word	0x08001c6a

080017e8 <__sflush_r>:
 80017e8:	898a      	ldrh	r2, [r1, #12]
 80017ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ee:	4605      	mov	r5, r0
 80017f0:	0710      	lsls	r0, r2, #28
 80017f2:	460c      	mov	r4, r1
 80017f4:	d458      	bmi.n	80018a8 <__sflush_r+0xc0>
 80017f6:	684b      	ldr	r3, [r1, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dc05      	bgt.n	8001808 <__sflush_r+0x20>
 80017fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dc02      	bgt.n	8001808 <__sflush_r+0x20>
 8001802:	2000      	movs	r0, #0
 8001804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800180a:	2e00      	cmp	r6, #0
 800180c:	d0f9      	beq.n	8001802 <__sflush_r+0x1a>
 800180e:	2300      	movs	r3, #0
 8001810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001814:	682f      	ldr	r7, [r5, #0]
 8001816:	6a21      	ldr	r1, [r4, #32]
 8001818:	602b      	str	r3, [r5, #0]
 800181a:	d032      	beq.n	8001882 <__sflush_r+0x9a>
 800181c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800181e:	89a3      	ldrh	r3, [r4, #12]
 8001820:	075a      	lsls	r2, r3, #29
 8001822:	d505      	bpl.n	8001830 <__sflush_r+0x48>
 8001824:	6863      	ldr	r3, [r4, #4]
 8001826:	1ac0      	subs	r0, r0, r3
 8001828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800182a:	b10b      	cbz	r3, 8001830 <__sflush_r+0x48>
 800182c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800182e:	1ac0      	subs	r0, r0, r3
 8001830:	2300      	movs	r3, #0
 8001832:	4602      	mov	r2, r0
 8001834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001836:	6a21      	ldr	r1, [r4, #32]
 8001838:	4628      	mov	r0, r5
 800183a:	47b0      	blx	r6
 800183c:	1c43      	adds	r3, r0, #1
 800183e:	89a3      	ldrh	r3, [r4, #12]
 8001840:	d106      	bne.n	8001850 <__sflush_r+0x68>
 8001842:	6829      	ldr	r1, [r5, #0]
 8001844:	291d      	cmp	r1, #29
 8001846:	d82b      	bhi.n	80018a0 <__sflush_r+0xb8>
 8001848:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <__sflush_r+0x108>)
 800184a:	410a      	asrs	r2, r1
 800184c:	07d6      	lsls	r6, r2, #31
 800184e:	d427      	bmi.n	80018a0 <__sflush_r+0xb8>
 8001850:	2200      	movs	r2, #0
 8001852:	6062      	str	r2, [r4, #4]
 8001854:	04d9      	lsls	r1, r3, #19
 8001856:	6922      	ldr	r2, [r4, #16]
 8001858:	6022      	str	r2, [r4, #0]
 800185a:	d504      	bpl.n	8001866 <__sflush_r+0x7e>
 800185c:	1c42      	adds	r2, r0, #1
 800185e:	d101      	bne.n	8001864 <__sflush_r+0x7c>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	b903      	cbnz	r3, 8001866 <__sflush_r+0x7e>
 8001864:	6560      	str	r0, [r4, #84]	; 0x54
 8001866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001868:	602f      	str	r7, [r5, #0]
 800186a:	2900      	cmp	r1, #0
 800186c:	d0c9      	beq.n	8001802 <__sflush_r+0x1a>
 800186e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001872:	4299      	cmp	r1, r3
 8001874:	d002      	beq.n	800187c <__sflush_r+0x94>
 8001876:	4628      	mov	r0, r5
 8001878:	f7ff fbea 	bl	8001050 <_free_r>
 800187c:	2000      	movs	r0, #0
 800187e:	6360      	str	r0, [r4, #52]	; 0x34
 8001880:	e7c0      	b.n	8001804 <__sflush_r+0x1c>
 8001882:	2301      	movs	r3, #1
 8001884:	4628      	mov	r0, r5
 8001886:	47b0      	blx	r6
 8001888:	1c41      	adds	r1, r0, #1
 800188a:	d1c8      	bne.n	800181e <__sflush_r+0x36>
 800188c:	682b      	ldr	r3, [r5, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0c5      	beq.n	800181e <__sflush_r+0x36>
 8001892:	2b1d      	cmp	r3, #29
 8001894:	d001      	beq.n	800189a <__sflush_r+0xb2>
 8001896:	2b16      	cmp	r3, #22
 8001898:	d101      	bne.n	800189e <__sflush_r+0xb6>
 800189a:	602f      	str	r7, [r5, #0]
 800189c:	e7b1      	b.n	8001802 <__sflush_r+0x1a>
 800189e:	89a3      	ldrh	r3, [r4, #12]
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	81a3      	strh	r3, [r4, #12]
 80018a6:	e7ad      	b.n	8001804 <__sflush_r+0x1c>
 80018a8:	690f      	ldr	r7, [r1, #16]
 80018aa:	2f00      	cmp	r7, #0
 80018ac:	d0a9      	beq.n	8001802 <__sflush_r+0x1a>
 80018ae:	0793      	lsls	r3, r2, #30
 80018b0:	680e      	ldr	r6, [r1, #0]
 80018b2:	bf08      	it	eq
 80018b4:	694b      	ldreq	r3, [r1, #20]
 80018b6:	600f      	str	r7, [r1, #0]
 80018b8:	bf18      	it	ne
 80018ba:	2300      	movne	r3, #0
 80018bc:	eba6 0807 	sub.w	r8, r6, r7
 80018c0:	608b      	str	r3, [r1, #8]
 80018c2:	f1b8 0f00 	cmp.w	r8, #0
 80018c6:	dd9c      	ble.n	8001802 <__sflush_r+0x1a>
 80018c8:	6a21      	ldr	r1, [r4, #32]
 80018ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018cc:	4643      	mov	r3, r8
 80018ce:	463a      	mov	r2, r7
 80018d0:	4628      	mov	r0, r5
 80018d2:	47b0      	blx	r6
 80018d4:	2800      	cmp	r0, #0
 80018d6:	dc06      	bgt.n	80018e6 <__sflush_r+0xfe>
 80018d8:	89a3      	ldrh	r3, [r4, #12]
 80018da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018de:	81a3      	strh	r3, [r4, #12]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e4:	e78e      	b.n	8001804 <__sflush_r+0x1c>
 80018e6:	4407      	add	r7, r0
 80018e8:	eba8 0800 	sub.w	r8, r8, r0
 80018ec:	e7e9      	b.n	80018c2 <__sflush_r+0xda>
 80018ee:	bf00      	nop
 80018f0:	dfbffffe 	.word	0xdfbffffe

080018f4 <_fflush_r>:
 80018f4:	b538      	push	{r3, r4, r5, lr}
 80018f6:	690b      	ldr	r3, [r1, #16]
 80018f8:	4605      	mov	r5, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	b913      	cbnz	r3, 8001904 <_fflush_r+0x10>
 80018fe:	2500      	movs	r5, #0
 8001900:	4628      	mov	r0, r5
 8001902:	bd38      	pop	{r3, r4, r5, pc}
 8001904:	b118      	cbz	r0, 800190e <_fflush_r+0x1a>
 8001906:	6a03      	ldr	r3, [r0, #32]
 8001908:	b90b      	cbnz	r3, 800190e <_fflush_r+0x1a>
 800190a:	f7ff fa91 	bl	8000e30 <__sinit>
 800190e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f3      	beq.n	80018fe <_fflush_r+0xa>
 8001916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001918:	07d0      	lsls	r0, r2, #31
 800191a:	d404      	bmi.n	8001926 <_fflush_r+0x32>
 800191c:	0599      	lsls	r1, r3, #22
 800191e:	d402      	bmi.n	8001926 <_fflush_r+0x32>
 8001920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001922:	f7ff fb92 	bl	800104a <__retarget_lock_acquire_recursive>
 8001926:	4628      	mov	r0, r5
 8001928:	4621      	mov	r1, r4
 800192a:	f7ff ff5d 	bl	80017e8 <__sflush_r>
 800192e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001930:	07da      	lsls	r2, r3, #31
 8001932:	4605      	mov	r5, r0
 8001934:	d4e4      	bmi.n	8001900 <_fflush_r+0xc>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	059b      	lsls	r3, r3, #22
 800193a:	d4e1      	bmi.n	8001900 <_fflush_r+0xc>
 800193c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800193e:	f7ff fb85 	bl	800104c <__retarget_lock_release_recursive>
 8001942:	e7dd      	b.n	8001900 <_fflush_r+0xc>

08001944 <_putc_r>:
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	460d      	mov	r5, r1
 8001948:	4614      	mov	r4, r2
 800194a:	4606      	mov	r6, r0
 800194c:	b118      	cbz	r0, 8001956 <_putc_r+0x12>
 800194e:	6a03      	ldr	r3, [r0, #32]
 8001950:	b90b      	cbnz	r3, 8001956 <_putc_r+0x12>
 8001952:	f7ff fa6d 	bl	8000e30 <__sinit>
 8001956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001958:	07d8      	lsls	r0, r3, #31
 800195a:	d405      	bmi.n	8001968 <_putc_r+0x24>
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	0599      	lsls	r1, r3, #22
 8001960:	d402      	bmi.n	8001968 <_putc_r+0x24>
 8001962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001964:	f7ff fb71 	bl	800104a <__retarget_lock_acquire_recursive>
 8001968:	68a3      	ldr	r3, [r4, #8]
 800196a:	3b01      	subs	r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	60a3      	str	r3, [r4, #8]
 8001970:	da05      	bge.n	800197e <_putc_r+0x3a>
 8001972:	69a2      	ldr	r2, [r4, #24]
 8001974:	4293      	cmp	r3, r2
 8001976:	db12      	blt.n	800199e <_putc_r+0x5a>
 8001978:	b2eb      	uxtb	r3, r5
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d00f      	beq.n	800199e <_putc_r+0x5a>
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	6022      	str	r2, [r4, #0]
 8001984:	701d      	strb	r5, [r3, #0]
 8001986:	b2ed      	uxtb	r5, r5
 8001988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800198a:	07da      	lsls	r2, r3, #31
 800198c:	d405      	bmi.n	800199a <_putc_r+0x56>
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	059b      	lsls	r3, r3, #22
 8001992:	d402      	bmi.n	800199a <_putc_r+0x56>
 8001994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001996:	f7ff fb59 	bl	800104c <__retarget_lock_release_recursive>
 800199a:	4628      	mov	r0, r5
 800199c:	bd70      	pop	{r4, r5, r6, pc}
 800199e:	4629      	mov	r1, r5
 80019a0:	4622      	mov	r2, r4
 80019a2:	4630      	mov	r0, r6
 80019a4:	f000 f802 	bl	80019ac <__swbuf_r>
 80019a8:	4605      	mov	r5, r0
 80019aa:	e7ed      	b.n	8001988 <_putc_r+0x44>

080019ac <__swbuf_r>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	460e      	mov	r6, r1
 80019b0:	4614      	mov	r4, r2
 80019b2:	4605      	mov	r5, r0
 80019b4:	b118      	cbz	r0, 80019be <__swbuf_r+0x12>
 80019b6:	6a03      	ldr	r3, [r0, #32]
 80019b8:	b90b      	cbnz	r3, 80019be <__swbuf_r+0x12>
 80019ba:	f7ff fa39 	bl	8000e30 <__sinit>
 80019be:	69a3      	ldr	r3, [r4, #24]
 80019c0:	60a3      	str	r3, [r4, #8]
 80019c2:	89a3      	ldrh	r3, [r4, #12]
 80019c4:	071a      	lsls	r2, r3, #28
 80019c6:	d525      	bpl.n	8001a14 <__swbuf_r+0x68>
 80019c8:	6923      	ldr	r3, [r4, #16]
 80019ca:	b31b      	cbz	r3, 8001a14 <__swbuf_r+0x68>
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	6922      	ldr	r2, [r4, #16]
 80019d0:	1a98      	subs	r0, r3, r2
 80019d2:	6963      	ldr	r3, [r4, #20]
 80019d4:	b2f6      	uxtb	r6, r6
 80019d6:	4283      	cmp	r3, r0
 80019d8:	4637      	mov	r7, r6
 80019da:	dc04      	bgt.n	80019e6 <__swbuf_r+0x3a>
 80019dc:	4621      	mov	r1, r4
 80019de:	4628      	mov	r0, r5
 80019e0:	f7ff ff88 	bl	80018f4 <_fflush_r>
 80019e4:	b9e0      	cbnz	r0, 8001a20 <__swbuf_r+0x74>
 80019e6:	68a3      	ldr	r3, [r4, #8]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	60a3      	str	r3, [r4, #8]
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	6022      	str	r2, [r4, #0]
 80019f2:	701e      	strb	r6, [r3, #0]
 80019f4:	6962      	ldr	r2, [r4, #20]
 80019f6:	1c43      	adds	r3, r0, #1
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d004      	beq.n	8001a06 <__swbuf_r+0x5a>
 80019fc:	89a3      	ldrh	r3, [r4, #12]
 80019fe:	07db      	lsls	r3, r3, #31
 8001a00:	d506      	bpl.n	8001a10 <__swbuf_r+0x64>
 8001a02:	2e0a      	cmp	r6, #10
 8001a04:	d104      	bne.n	8001a10 <__swbuf_r+0x64>
 8001a06:	4621      	mov	r1, r4
 8001a08:	4628      	mov	r0, r5
 8001a0a:	f7ff ff73 	bl	80018f4 <_fflush_r>
 8001a0e:	b938      	cbnz	r0, 8001a20 <__swbuf_r+0x74>
 8001a10:	4638      	mov	r0, r7
 8001a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a14:	4621      	mov	r1, r4
 8001a16:	4628      	mov	r0, r5
 8001a18:	f000 f806 	bl	8001a28 <__swsetup_r>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d0d5      	beq.n	80019cc <__swbuf_r+0x20>
 8001a20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001a24:	e7f4      	b.n	8001a10 <__swbuf_r+0x64>
	...

08001a28 <__swsetup_r>:
 8001a28:	b538      	push	{r3, r4, r5, lr}
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <__swsetup_r+0xac>)
 8001a2c:	4605      	mov	r5, r0
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	460c      	mov	r4, r1
 8001a32:	b118      	cbz	r0, 8001a3c <__swsetup_r+0x14>
 8001a34:	6a03      	ldr	r3, [r0, #32]
 8001a36:	b90b      	cbnz	r3, 8001a3c <__swsetup_r+0x14>
 8001a38:	f7ff f9fa 	bl	8000e30 <__sinit>
 8001a3c:	89a3      	ldrh	r3, [r4, #12]
 8001a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001a42:	0718      	lsls	r0, r3, #28
 8001a44:	d422      	bmi.n	8001a8c <__swsetup_r+0x64>
 8001a46:	06d9      	lsls	r1, r3, #27
 8001a48:	d407      	bmi.n	8001a5a <__swsetup_r+0x32>
 8001a4a:	2309      	movs	r3, #9
 8001a4c:	602b      	str	r3, [r5, #0]
 8001a4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001a52:	81a3      	strh	r3, [r4, #12]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a58:	e034      	b.n	8001ac4 <__swsetup_r+0x9c>
 8001a5a:	0758      	lsls	r0, r3, #29
 8001a5c:	d512      	bpl.n	8001a84 <__swsetup_r+0x5c>
 8001a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a60:	b141      	cbz	r1, 8001a74 <__swsetup_r+0x4c>
 8001a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a66:	4299      	cmp	r1, r3
 8001a68:	d002      	beq.n	8001a70 <__swsetup_r+0x48>
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7ff faf0 	bl	8001050 <_free_r>
 8001a70:	2300      	movs	r3, #0
 8001a72:	6363      	str	r3, [r4, #52]	; 0x34
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a7a:	81a3      	strh	r3, [r4, #12]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	6063      	str	r3, [r4, #4]
 8001a80:	6923      	ldr	r3, [r4, #16]
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	f043 0308 	orr.w	r3, r3, #8
 8001a8a:	81a3      	strh	r3, [r4, #12]
 8001a8c:	6923      	ldr	r3, [r4, #16]
 8001a8e:	b94b      	cbnz	r3, 8001aa4 <__swsetup_r+0x7c>
 8001a90:	89a3      	ldrh	r3, [r4, #12]
 8001a92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a9a:	d003      	beq.n	8001aa4 <__swsetup_r+0x7c>
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	f000 f850 	bl	8001b44 <__smakebuf_r>
 8001aa4:	89a0      	ldrh	r0, [r4, #12]
 8001aa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001aaa:	f010 0301 	ands.w	r3, r0, #1
 8001aae:	d00a      	beq.n	8001ac6 <__swsetup_r+0x9e>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60a3      	str	r3, [r4, #8]
 8001ab4:	6963      	ldr	r3, [r4, #20]
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	61a3      	str	r3, [r4, #24]
 8001aba:	6923      	ldr	r3, [r4, #16]
 8001abc:	b943      	cbnz	r3, 8001ad0 <__swsetup_r+0xa8>
 8001abe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ac2:	d1c4      	bne.n	8001a4e <__swsetup_r+0x26>
 8001ac4:	bd38      	pop	{r3, r4, r5, pc}
 8001ac6:	0781      	lsls	r1, r0, #30
 8001ac8:	bf58      	it	pl
 8001aca:	6963      	ldrpl	r3, [r4, #20]
 8001acc:	60a3      	str	r3, [r4, #8]
 8001ace:	e7f4      	b.n	8001aba <__swsetup_r+0x92>
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	e7f7      	b.n	8001ac4 <__swsetup_r+0x9c>
 8001ad4:	2000005c 	.word	0x2000005c

08001ad8 <_sbrk_r>:
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	4d06      	ldr	r5, [pc, #24]	; (8001af4 <_sbrk_r+0x1c>)
 8001adc:	2300      	movs	r3, #0
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	602b      	str	r3, [r5, #0]
 8001ae4:	f7fe feec 	bl	80008c0 <_sbrk>
 8001ae8:	1c43      	adds	r3, r0, #1
 8001aea:	d102      	bne.n	8001af2 <_sbrk_r+0x1a>
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	b103      	cbz	r3, 8001af2 <_sbrk_r+0x1a>
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	bd38      	pop	{r3, r4, r5, pc}
 8001af4:	200001c0 	.word	0x200001c0

08001af8 <__swhatbuf_r>:
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	460c      	mov	r4, r1
 8001afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b00:	2900      	cmp	r1, #0
 8001b02:	b096      	sub	sp, #88	; 0x58
 8001b04:	4615      	mov	r5, r2
 8001b06:	461e      	mov	r6, r3
 8001b08:	da0d      	bge.n	8001b26 <__swhatbuf_r+0x2e>
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	bf0c      	ite	eq
 8001b16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001b1a:	2340      	movne	r3, #64	; 0x40
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	6031      	str	r1, [r6, #0]
 8001b20:	602b      	str	r3, [r5, #0]
 8001b22:	b016      	add	sp, #88	; 0x58
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
 8001b26:	466a      	mov	r2, sp
 8001b28:	f000 f848 	bl	8001bbc <_fstat_r>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	dbec      	blt.n	8001b0a <__swhatbuf_r+0x12>
 8001b30:	9901      	ldr	r1, [sp, #4]
 8001b32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001b36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001b3a:	4259      	negs	r1, r3
 8001b3c:	4159      	adcs	r1, r3
 8001b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b42:	e7eb      	b.n	8001b1c <__swhatbuf_r+0x24>

08001b44 <__smakebuf_r>:
 8001b44:	898b      	ldrh	r3, [r1, #12]
 8001b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b48:	079d      	lsls	r5, r3, #30
 8001b4a:	4606      	mov	r6, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	d507      	bpl.n	8001b60 <__smakebuf_r+0x1c>
 8001b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	6123      	str	r3, [r4, #16]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	6163      	str	r3, [r4, #20]
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	ab01      	add	r3, sp, #4
 8001b62:	466a      	mov	r2, sp
 8001b64:	f7ff ffc8 	bl	8001af8 <__swhatbuf_r>
 8001b68:	9900      	ldr	r1, [sp, #0]
 8001b6a:	4605      	mov	r5, r0
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	f7ff fadb 	bl	8001128 <_malloc_r>
 8001b72:	b948      	cbnz	r0, 8001b88 <__smakebuf_r+0x44>
 8001b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b78:	059a      	lsls	r2, r3, #22
 8001b7a:	d4ef      	bmi.n	8001b5c <__smakebuf_r+0x18>
 8001b7c:	f023 0303 	bic.w	r3, r3, #3
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	81a3      	strh	r3, [r4, #12]
 8001b86:	e7e3      	b.n	8001b50 <__smakebuf_r+0xc>
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	6020      	str	r0, [r4, #0]
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	81a3      	strh	r3, [r4, #12]
 8001b92:	9b00      	ldr	r3, [sp, #0]
 8001b94:	6163      	str	r3, [r4, #20]
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	6120      	str	r0, [r4, #16]
 8001b9a:	b15b      	cbz	r3, 8001bb4 <__smakebuf_r+0x70>
 8001b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f000 f81d 	bl	8001be0 <_isatty_r>
 8001ba6:	b128      	cbz	r0, 8001bb4 <__smakebuf_r+0x70>
 8001ba8:	89a3      	ldrh	r3, [r4, #12]
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	81a3      	strh	r3, [r4, #12]
 8001bb4:	89a3      	ldrh	r3, [r4, #12]
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	81a5      	strh	r5, [r4, #12]
 8001bba:	e7cf      	b.n	8001b5c <__smakebuf_r+0x18>

08001bbc <_fstat_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4d07      	ldr	r5, [pc, #28]	; (8001bdc <_fstat_r+0x20>)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	602b      	str	r3, [r5, #0]
 8001bca:	f7fe fe70 	bl	80008ae <_fstat>
 8001bce:	1c43      	adds	r3, r0, #1
 8001bd0:	d102      	bne.n	8001bd8 <_fstat_r+0x1c>
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	b103      	cbz	r3, 8001bd8 <_fstat_r+0x1c>
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	bd38      	pop	{r3, r4, r5, pc}
 8001bda:	bf00      	nop
 8001bdc:	200001c0 	.word	0x200001c0

08001be0 <_isatty_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	4d06      	ldr	r5, [pc, #24]	; (8001bfc <_isatty_r+0x1c>)
 8001be4:	2300      	movs	r3, #0
 8001be6:	4604      	mov	r4, r0
 8001be8:	4608      	mov	r0, r1
 8001bea:	602b      	str	r3, [r5, #0]
 8001bec:	f7fe fe64 	bl	80008b8 <_isatty>
 8001bf0:	1c43      	adds	r3, r0, #1
 8001bf2:	d102      	bne.n	8001bfa <_isatty_r+0x1a>
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	b103      	cbz	r3, 8001bfa <_isatty_r+0x1a>
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	bd38      	pop	{r3, r4, r5, pc}
 8001bfc:	200001c0 	.word	0x200001c0

08001c00 <_init>:
 8001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c02:	bf00      	nop
 8001c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c06:	bc08      	pop	{r3}
 8001c08:	469e      	mov	lr, r3
 8001c0a:	4770      	bx	lr

08001c0c <_fini>:
 8001c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0e:	bf00      	nop
 8001c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c12:	bc08      	pop	{r3}
 8001c14:	469e      	mov	lr, r3
 8001c16:	4770      	bx	lr
