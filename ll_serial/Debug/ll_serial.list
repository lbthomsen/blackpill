
ll_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d98  08001d98  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001da0  08001da0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da0  08001da0  00011da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08001e10  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001e10  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e3e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001593  00000000  00000000  00026ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00002059  00000000  00000000  00028469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000310  00000000  00000000  0002a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000398  00000000  00000000  0002a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000121ad  00000000  00000000  0002ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004bac  00000000  00000000  0003cd1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000632fb  00000000  00000000  000418c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000a4bc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000edc  00000000  00000000  000a4c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001cb8 	.word	0x08001cb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001cb8 	.word	0x08001cb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b500      	push	{lr}
 800057a:	b08b      	sub	sp, #44	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	2200      	movs	r2, #0
 800057e:	9209      	str	r2, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_GPIO_Init+0x60>)
 8000582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000584:	f041 0104 	orr.w	r1, r1, #4
 8000588:	6319      	str	r1, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800058a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800058c:	f001 0104 	and.w	r1, r1, #4
 8000590:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
 8000592:	9903      	ldr	r1, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000596:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800059a:	6319      	str	r1, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800059c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800059e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80005a2:	9102      	str	r1, [sp, #8]
  (void)tmpreg;
 80005a4:	9902      	ldr	r1, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005a8:	f041 0101 	orr.w	r1, r1, #1
 80005ac:	6319      	str	r1, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80005b6:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <MX_GPIO_Init+0x64>)
 80005ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005be:	6183      	str	r3, [r0, #24]

  /**/
  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80005c0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005c2:	2301      	movs	r3, #1
 80005c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005c6:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80005c8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005ca:	9208      	str	r2, [sp, #32]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005cc:	a904      	add	r1, sp, #16
 80005ce:	f000 f9c6 	bl	800095e <LL_GPIO_Init>

}
 80005d2:	b00b      	add	sp, #44	; 0x2c
 80005d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020800 	.word	0x40020800

080005e0 <MX_USART1_UART_Init>:
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005e4:	2400      	movs	r4, #0
 80005e6:	9409      	str	r4, [sp, #36]	; 0x24
 80005e8:	940a      	str	r4, [sp, #40]	; 0x28
 80005ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80005ec:	940c      	str	r4, [sp, #48]	; 0x30
 80005ee:	940d      	str	r4, [sp, #52]	; 0x34
 80005f0:	940e      	str	r4, [sp, #56]	; 0x38
 80005f2:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_USART1_UART_Init+0x98>)
 80005f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005f8:	f042 0210 	orr.w	r2, r2, #16
 80005fc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000600:	f002 0210 	and.w	r2, r2, #16
 8000604:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000606:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060a:	f042 0201 	orr.w	r2, r2, #1
 800060e:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000618:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800061a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800061e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000620:	2302      	movs	r3, #2
 8000622:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000624:	2303      	movs	r3, #3
 8000626:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000628:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800062a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800062c:	2307      	movs	r3, #7
 800062e:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	a903      	add	r1, sp, #12
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_USART1_UART_Init+0x9c>)
 8000634:	f000 f993 	bl	800095e <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 8000638:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800063c:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800063e:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000640:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000642:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000644:	230c      	movs	r3, #12
 8000646:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000648:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800064a:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 800064c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000650:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
 8000654:	a909      	add	r1, sp, #36	; 0x24
 8000656:	4620      	mov	r0, r4
 8000658:	f000 fa8a 	bl	8000b70 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800065c:	6923      	ldr	r3, [r4, #16]
 800065e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000662:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000664:	6963      	ldr	r3, [r4, #20]
 8000666:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800066a:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800066c:	68e3      	ldr	r3, [r4, #12]
 800066e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000672:	60e3      	str	r3, [r4, #12]
}
 8000674:	b010      	add	sp, #64	; 0x40
 8000676:	bd10      	pop	{r4, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000

08000680 <_write>:
int _write(int fd, char *ptr, int len) {
 8000680:	4610      	mov	r0, r2
	while (len--) {
 8000682:	e008      	b.n	8000696 <_write+0x16>
		LL_USART_TransmitData8(USART1, (uint8_t)*ptr++);
 8000684:	f811 2b01 	ldrb.w	r2, [r1], #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <_write+0x20>)
 800068a:	605a      	str	r2, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <_write+0x20>)
 800068e:	681b      	ldr	r3, [r3, #0]
		while (!LL_USART_IsActiveFlag_TXE(USART1)) {}
 8000690:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000694:	d0fa      	beq.n	800068c <_write+0xc>
	while (len--) {
 8000696:	4603      	mov	r3, r0
 8000698:	3801      	subs	r0, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f2      	bne.n	8000684 <_write+0x4>
}
 800069e:	4770      	bx	lr
 80006a0:	40011000 	.word	0x40011000

080006a4 <SystemClock_Config>:
{
 80006a4:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <SystemClock_Config+0xb8>)
 80006a8:	6813      	ldr	r3, [r2, #0]
 80006aa:	f023 0307 	bic.w	r3, r3, #7
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006b4:	4b29      	ldr	r3, [pc, #164]	; (800075c <SystemClock_Config+0xb8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d1f9      	bne.n	80006b4 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xbc>)
 80006c2:	6813      	ldr	r3, [r2, #0]
 80006c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c8:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006ca:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80006ce:	6813      	ldr	r3, [r2, #0]
 80006d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006d4:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006d6:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xc0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 80006da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80006de:	d0fa      	beq.n	80006d6 <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <SystemClock_Config+0xc0>)
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	4920      	ldr	r1, [pc, #128]	; (8000768 <SystemClock_Config+0xc4>)
 80006e6:	4011      	ands	r1, r2
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <SystemClock_Config+0xc8>)
 80006ea:	430a      	orrs	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80006f4:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006fc:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <SystemClock_Config+0xc0>)
 8000700:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000702:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000706:	d0fa      	beq.n	80006fe <SystemClock_Config+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <SystemClock_Config+0xc0>)
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000710:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000718:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800071c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000724:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	f022 0203 	bic.w	r2, r2, #3
 800072c:	f042 0202 	orr.w	r2, r2, #2
 8000730:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <SystemClock_Config+0xc0>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800073a:	2b08      	cmp	r3, #8
 800073c:	d1f9      	bne.n	8000732 <SystemClock_Config+0x8e>
  LL_Init1msTick(96000000);
 800073e:	4c0c      	ldr	r4, [pc, #48]	; (8000770 <SystemClock_Config+0xcc>)
 8000740:	4620      	mov	r0, r4
 8000742:	f000 fabd 	bl	8000cc0 <LL_Init1msTick>
  LL_SetSystemCoreClock(96000000);
 8000746:	4620      	mov	r0, r4
 8000748:	f000 faca 	bl	8000ce0 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <SystemClock_Config+0xc0>)
 800074e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800075a:	bd10      	pop	{r4, pc}
 800075c:	40023c00 	.word	0x40023c00
 8000760:	40007000 	.word	0x40007000
 8000764:	40023800 	.word	0x40023800
 8000768:	ffbf8000 	.word	0xffbf8000
 800076c:	00403019 	.word	0x00403019
 8000770:	05b8d800 	.word	0x05b8d800

08000774 <main>:
{
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <main+0xbc>)
 800077a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800077c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000780:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000784:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000788:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800078a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800078c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000792:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800079c:	9b00      	ldr	r3, [sp, #0]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <main+0xc0>)
 80007a0:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80007a6:	0409      	lsls	r1, r1, #16
 80007a8:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 80007aa:	4a23      	ldr	r2, [pc, #140]	; (8000838 <main+0xc4>)
 80007ac:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80007ae:	60da      	str	r2, [r3, #12]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b6:	f1c3 0107 	rsb	r1, r3, #7
 80007ba:	2904      	cmp	r1, #4
 80007bc:	bf28      	it	cs
 80007be:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c0:	1d1a      	adds	r2, r3, #4
 80007c2:	2a06      	cmp	r2, #6
 80007c4:	d91f      	bls.n	8000806 <main+0x92>
 80007c6:	1eda      	subs	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007cc:	408b      	lsls	r3, r1
 80007ce:	43db      	mvns	r3, r3
 80007d0:	f003 030f 	and.w	r3, r3, #15
 80007d4:	4093      	lsls	r3, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <main+0xc0>)
 80007dc:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  SystemClock_Config();
 80007e0:	f7ff ff60 	bl	80006a4 <SystemClock_Config>
  MX_GPIO_Init();
 80007e4:	f7ff fec8 	bl	8000578 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007e8:	f7ff fefa 	bl	80005e0 <MX_USART1_UART_Init>
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80007ec:	4a13      	ldr	r2, [pc, #76]	; (800083c <main+0xc8>)
 80007ee:	6813      	ldr	r3, [r2, #0]
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6013      	str	r3, [r2, #0]
	DBG("Starting");
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <main+0xcc>)
 80007f8:	f000 faaa 	bl	8000d50 <iprintf>
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fabf 	bl	8000d80 <putchar>
	uint32_t now = 0, then = 0;
 8000802:	2400      	movs	r4, #0
 8000804:	e00b      	b.n	800081e <main+0xaa>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	2200      	movs	r2, #0
 8000808:	e7de      	b.n	80007c8 <main+0x54>
			DBG("Tick %lu", now / 1000);
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <main+0xd0>)
 800080c:	fba1 3100 	umull	r3, r1, r1, r0
 8000810:	0989      	lsrs	r1, r1, #6
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <main+0xd4>)
 8000814:	f000 fa9c 	bl	8000d50 <iprintf>
 8000818:	200a      	movs	r0, #10
 800081a:	f000 fab1 	bl	8000d80 <putchar>
	uint32_t now = 0, then = 0;
 800081e:	4625      	mov	r5, r4
		now = get_systick_counter();
 8000820:	f000 f824 	bl	800086c <get_systick_counter>
 8000824:	4604      	mov	r4, r0
		if (now - then >= 1000) {
 8000826:	1b43      	subs	r3, r0, r5
 8000828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082c:	d3f8      	bcc.n	8000820 <main+0xac>
 800082e:	e7ec      	b.n	800080a <main+0x96>
 8000830:	40023800 	.word	0x40023800
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	05fa0300 	.word	0x05fa0300
 800083c:	e000e010 	.word	0xe000e010
 8000840:	08001cd0 	.word	0x08001cd0
 8000844:	10624dd3 	.word	0x10624dd3
 8000848:	08001cdc 	.word	0x08001cdc

0800084c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler>

0800084e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler>

08000850 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler>

08000852 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler>

08000854 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler>

08000856 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	4770      	bx	lr

08000858 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
  systick_counter++;
 800085c:	4a02      	ldr	r2, [pc, #8]	; (8000868 <SysTick_Handler+0xc>)
 800085e:	6813      	ldr	r3, [r2, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000084 	.word	0x20000084

0800086c <get_systick_counter>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
uint32_t get_systick_counter() {
	return systick_counter;
}
 800086c:	4b01      	ldr	r3, [pc, #4]	; (8000874 <get_systick_counter+0x8>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000084 	.word	0x20000084

08000878 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	460c      	mov	r4, r1
 800087c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	2500      	movs	r5, #0
 8000880:	42b5      	cmp	r5, r6
 8000882:	da07      	bge.n	8000894 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8000884:	f3af 8000 	nop.w
 8000888:	4621      	mov	r1, r4
 800088a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000890:	460c      	mov	r4, r1
 8000892:	e7f5      	b.n	8000880 <_read+0x8>
	}

return len;
}
 8000894:	4630      	mov	r0, r6
 8000896:	bd70      	pop	{r4, r5, r6, pc}

08000898 <_close>:
}

int _close(int file)
{
	return -1;
}
 8000898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800089c:	4770      	bx	lr

0800089e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80008a4:	2000      	movs	r0, #0
 80008a6:	4770      	bx	lr

080008a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80008a8:	2001      	movs	r0, #1
 80008aa:	4770      	bx	lr

080008ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80008ac:	2000      	movs	r0, #0
 80008ae:	4770      	bx	lr

080008b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <_sbrk+0x38>)
 80008b6:	490d      	ldr	r1, [pc, #52]	; (80008ec <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <_sbrk+0x40>)
 80008ba:	6800      	ldr	r0, [r0, #0]
 80008bc:	b140      	cbz	r0, 80008d0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <_sbrk+0x40>)
 80008c0:	6800      	ldr	r0, [r0, #0]
 80008c2:	4403      	add	r3, r0
 80008c4:	1a52      	subs	r2, r2, r1
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d806      	bhi.n	80008d8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <_sbrk+0x40>)
 80008cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80008ce:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <_sbrk+0x40>)
 80008d2:	4c08      	ldr	r4, [pc, #32]	; (80008f4 <_sbrk+0x44>)
 80008d4:	6004      	str	r4, [r0, #0]
 80008d6:	e7f2      	b.n	80008be <_sbrk+0xe>
    errno = ENOMEM;
 80008d8:	f000 fa08 	bl	8000cec <__errno>
 80008dc:	230c      	movs	r3, #12
 80008de:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e4:	e7f3      	b.n	80008ce <_sbrk+0x1e>
 80008e6:	bf00      	nop
 80008e8:	20020000 	.word	0x20020000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	20000088 	.word	0x20000088
 80008f4:	200000a8 	.word	0x200000a8

080008f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4a03      	ldr	r2, [pc, #12]	; (8000908 <SystemInit+0x10>)
 80008fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80008fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000902:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000912:	490e      	ldr	r1, [pc, #56]	; (800094c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000928:	4c0b      	ldr	r4, [pc, #44]	; (8000958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000936:	f7ff ffdf 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f000 f9dd 	bl	8000cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff ff19 	bl	8000774 <main>
  bx  lr    
 8000942:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000950:	08001da8 	.word	0x08001da8
  ldr r2, =_sbss
 8000954:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000958:	200000a4 	.word	0x200000a4

0800095c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC_IRQHandler>

0800095e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800095e:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000960:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000962:	fa94 f4a4 	rbit	r4, r4
 8000966:	fab4 f484 	clz	r4, r4
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800096a:	e04a      	b.n	8000a02 <LL_GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800096c:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800096e:	6882      	ldr	r2, [r0, #8]
 8000970:	fa93 f5a3 	rbit	r5, r3
 8000974:	fab5 f585 	clz	r5, r5
 8000978:	006d      	lsls	r5, r5, #1
 800097a:	2703      	movs	r7, #3
 800097c:	fa07 f505 	lsl.w	r5, r7, r5
 8000980:	ea22 0205 	bic.w	r2, r2, r5
 8000984:	fa93 f5a3 	rbit	r5, r3
 8000988:	fab5 f585 	clz	r5, r5
 800098c:	006d      	lsls	r5, r5, #1
 800098e:	fa06 f505 	lsl.w	r5, r6, r5
 8000992:	432a      	orrs	r2, r5
 8000994:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000996:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000998:	6842      	ldr	r2, [r0, #4]
 800099a:	ea22 0203 	bic.w	r2, r2, r3
 800099e:	fb03 f505 	mul.w	r5, r3, r5
 80009a2:	432a      	orrs	r2, r5
 80009a4:	6042      	str	r2, [r0, #4]
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80009a6:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80009a8:	68c2      	ldr	r2, [r0, #12]
 80009aa:	fa93 f5a3 	rbit	r5, r3
 80009ae:	fab5 f585 	clz	r5, r5
 80009b2:	006d      	lsls	r5, r5, #1
 80009b4:	2703      	movs	r7, #3
 80009b6:	fa07 f505 	lsl.w	r5, r7, r5
 80009ba:	ea22 0205 	bic.w	r2, r2, r5
 80009be:	fa93 f5a3 	rbit	r5, r3
 80009c2:	fab5 f585 	clz	r5, r5
 80009c6:	006d      	lsls	r5, r5, #1
 80009c8:	fa06 f505 	lsl.w	r5, r6, r5
 80009cc:	432a      	orrs	r2, r5
 80009ce:	60c2      	str	r2, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80009d0:	684a      	ldr	r2, [r1, #4]
 80009d2:	2a02      	cmp	r2, #2
 80009d4:	d022      	beq.n	8000a1c <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80009d6:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80009d8:	6805      	ldr	r5, [r0, #0]
 80009da:	fa93 f6a3 	rbit	r6, r3
 80009de:	fab6 f686 	clz	r6, r6
 80009e2:	0076      	lsls	r6, r6, #1
 80009e4:	2703      	movs	r7, #3
 80009e6:	fa07 f606 	lsl.w	r6, r7, r6
 80009ea:	ea25 0506 	bic.w	r5, r5, r6
 80009ee:	fa93 f3a3 	rbit	r3, r3
 80009f2:	fab3 f383 	clz	r3, r3
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	432b      	orrs	r3, r5
 80009fe:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8000a00:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a02:	680b      	ldr	r3, [r1, #0]
 8000a04:	fa33 f204 	lsrs.w	r2, r3, r4
 8000a08:	d03c      	beq.n	8000a84 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	40a2      	lsls	r2, r4
    if (currentpin)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d0f6      	beq.n	8000a00 <LL_GPIO_Init+0xa2>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a12:	684a      	ldr	r2, [r1, #4]
 8000a14:	3a01      	subs	r2, #1
 8000a16:	2a01      	cmp	r2, #1
 8000a18:	d8c5      	bhi.n	80009a6 <LL_GPIO_Init+0x48>
 8000a1a:	e7a7      	b.n	800096c <LL_GPIO_Init+0xe>
 8000a1c:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	2a07      	cmp	r2, #7
 8000a26:	d815      	bhi.n	8000a54 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a28:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000a2a:	6a02      	ldr	r2, [r0, #32]
 8000a2c:	fa93 f5a3 	rbit	r5, r3
 8000a30:	fab5 f585 	clz	r5, r5
 8000a34:	00ad      	lsls	r5, r5, #2
 8000a36:	270f      	movs	r7, #15
 8000a38:	fa07 f505 	lsl.w	r5, r7, r5
 8000a3c:	ea22 0205 	bic.w	r2, r2, r5
 8000a40:	fa93 f5a3 	rbit	r5, r3
 8000a44:	fab5 f585 	clz	r5, r5
 8000a48:	00ad      	lsls	r5, r5, #2
 8000a4a:	fa06 f505 	lsl.w	r5, r6, r5
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	6202      	str	r2, [r0, #32]
}
 8000a52:	e7c0      	b.n	80009d6 <LL_GPIO_Init+0x78>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000a54:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000a58:	0a1a      	lsrs	r2, r3, #8
 8000a5a:	fa92 f7a2 	rbit	r7, r2
 8000a5e:	fab7 f787 	clz	r7, r7
 8000a62:	00bf      	lsls	r7, r7, #2
 8000a64:	f04f 0c0f 	mov.w	ip, #15
 8000a68:	fa0c f707 	lsl.w	r7, ip, r7
 8000a6c:	ea26 0607 	bic.w	r6, r6, r7
 8000a70:	fa92 f2a2 	rbit	r2, r2
 8000a74:	fab2 f282 	clz	r2, r2
 8000a78:	0092      	lsls	r2, r2, #2
 8000a7a:	fa05 f202 	lsl.w	r2, r5, r2
 8000a7e:	4332      	orrs	r2, r6
 8000a80:	6242      	str	r2, [r0, #36]	; 0x24
}
 8000a82:	e7a8      	b.n	80009d6 <LL_GPIO_Init+0x78>
  }

  return (SUCCESS);
}
 8000a84:	2000      	movs	r0, #0
 8000a86:	bcf0      	pop	{r4, r5, r6, r7}
 8000a88:	4770      	bx	lr
	...

08000a8c <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <RCC_GetHCLKClockFreq+0x10>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000a90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a94:	4a02      	ldr	r2, [pc, #8]	; (8000aa0 <RCC_GetHCLKClockFreq+0x14>)
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
}
 8000a98:	40d8      	lsrs	r0, r3
 8000a9a:	4770      	bx	lr
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	08001ce8 	.word	0x08001ce8

08000aa4 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <RCC_GetPCLK1ClockFreq+0x10>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000aa8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000aac:	4a02      	ldr	r2, [pc, #8]	; (8000ab8 <RCC_GetPCLK1ClockFreq+0x14>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ab0:	40d8      	lsrs	r0, r3
 8000ab2:	4770      	bx	lr
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	08001cf8 	.word	0x08001cf8

08000abc <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <RCC_GetPCLK2ClockFreq+0x10>)
 8000abe:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000ac0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ac4:	4a02      	ldr	r2, [pc, #8]	; (8000ad0 <RCC_GetPCLK2ClockFreq+0x14>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ac8:	40d8      	lsrs	r0, r3
 8000aca:	4770      	bx	lr
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	08001cf8 	.word	0x08001cf8

08000ad4 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000adc:	b923      	cbnz	r3, 8000ae8 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ae0:	2808      	cmp	r0, #8
 8000ae2:	d003      	beq.n	8000aec <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8000ae4:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8000ae6:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8000aea:	e7f9      	b.n	8000ae0 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000aee:	6850      	ldr	r0, [r2, #4]
 8000af0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000af4:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000af8:	6850      	ldr	r0, [r2, #4]
 8000afa:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000afe:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8000b02:	6853      	ldr	r3, [r2, #4]
 8000b04:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b08:	3301      	adds	r3, #1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	00f42400 	.word	0x00f42400
 8000b1c:	017d7840 	.word	0x017d7840

08000b20 <RCC_GetSystemClockFreq>:
{
 8000b20:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <RCC_GetSystemClockFreq+0x24>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d005      	beq.n	8000b3a <RCC_GetSystemClockFreq+0x1a>
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d105      	bne.n	8000b3e <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000b32:	2008      	movs	r0, #8
 8000b34:	f7ff ffce 	bl	8000ad4 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8000b38:	e002      	b.n	8000b40 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <RCC_GetSystemClockFreq+0x28>)
 8000b3c:	e000      	b.n	8000b40 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <RCC_GetSystemClockFreq+0x2c>)
}
 8000b40:	bd08      	pop	{r3, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	017d7840 	.word	0x017d7840
 8000b4c:	00f42400 	.word	0x00f42400

08000b50 <LL_RCC_GetSystemClocksFreq>:
{
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000b54:	f7ff ffe4 	bl	8000b20 <RCC_GetSystemClockFreq>
 8000b58:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000b5a:	f7ff ff97 	bl	8000a8c <RCC_GetHCLKClockFreq>
 8000b5e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b60:	f7ff ffa0 	bl	8000aa4 <RCC_GetPCLK1ClockFreq>
 8000b64:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b66:	6860      	ldr	r0, [r4, #4]
 8000b68:	f7ff ffa8 	bl	8000abc <RCC_GetPCLK2ClockFreq>
 8000b6c:	60e0      	str	r0, [r4, #12]
}
 8000b6e:	bd10      	pop	{r4, pc}

08000b70 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000b70:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000b72:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000b76:	d001      	beq.n	8000b7c <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8000b78:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000b7a:	4770      	bx	lr
{
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	4604      	mov	r4, r0
 8000b82:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8000b84:	68c3      	ldr	r3, [r0, #12]
 8000b86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000b8a:	f023 030c 	bic.w	r3, r3, #12
 8000b8e:	684a      	ldr	r2, [r1, #4]
 8000b90:	68c9      	ldr	r1, [r1, #12]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	6929      	ldr	r1, [r5, #16]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	69a9      	ldr	r1, [r5, #24]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000ba0:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000ba2:	6902      	ldr	r2, [r0, #16]
 8000ba4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000bac:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000bae:	6942      	ldr	r2, [r0, #20]
 8000bb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000bb8:	4668      	mov	r0, sp
 8000bba:	f7ff ffc9 	bl	8000b50 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <LL_USART_Init+0x140>)
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	d008      	beq.n	8000bd6 <LL_USART_Init+0x66>
    else if (USARTx == USART2)
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <LL_USART_Init+0x144>)
 8000bc6:	429c      	cmp	r4, r3
 8000bc8:	d00c      	beq.n	8000be4 <LL_USART_Init+0x74>
    else if (USARTx == USART6)
 8000bca:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <LL_USART_Init+0x148>)
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d00b      	beq.n	8000be8 <LL_USART_Init+0x78>
  ErrorStatus status = ERROR;
 8000bd0:	2001      	movs	r0, #1
}
 8000bd2:	b005      	add	sp, #20
 8000bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000bd6:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	d066      	beq.n	8000caa <LL_USART_Init+0x13a>
        && (USART_InitStruct->BaudRate != 0U))
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	b92b      	cbnz	r3, 8000bec <LL_USART_Init+0x7c>
  ErrorStatus status = ERROR;
 8000be0:	2001      	movs	r0, #1
 8000be2:	e7f6      	b.n	8000bd2 <LL_USART_Init+0x62>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000be4:	9802      	ldr	r0, [sp, #8]
 8000be6:	e7f7      	b.n	8000bd8 <LL_USART_Init+0x68>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000be8:	9803      	ldr	r0, [sp, #12]
 8000bea:	e7f5      	b.n	8000bd8 <LL_USART_Init+0x68>
      LL_USART_SetBaudRate(USARTx,
 8000bec:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000bee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000bf2:	d02c      	beq.n	8000c4e <LL_USART_Init+0xde>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	1805      	adds	r5, r0, r0
 8000bf8:	eb46 0106 	adc.w	r1, r6, r6
 8000bfc:	182d      	adds	r5, r5, r0
 8000bfe:	eb46 0101 	adc.w	r1, r6, r1
 8000c02:	00ca      	lsls	r2, r1, #3
 8000c04:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8000c08:	00ef      	lsls	r7, r5, #3
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	009a      	lsls	r2, r3, #2
 8000c0e:	0f9b      	lsrs	r3, r3, #30
 8000c10:	1838      	adds	r0, r7, r0
 8000c12:	eb46 0101 	adc.w	r1, r6, r1
 8000c16:	f7ff fb33 	bl	8000280 <__aeabi_uldivmod>
 8000c1a:	4928      	ldr	r1, [pc, #160]	; (8000cbc <LL_USART_Init+0x14c>)
 8000c1c:	fba1 3200 	umull	r3, r2, r1, r0
 8000c20:	0953      	lsrs	r3, r2, #5
 8000c22:	011a      	lsls	r2, r3, #4
 8000c24:	b292      	uxth	r2, r2
 8000c26:	2564      	movs	r5, #100	; 0x64
 8000c28:	fb05 0313 	mls	r3, r5, r3, r0
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	3332      	adds	r3, #50	; 0x32
 8000c30:	fba1 1303 	umull	r1, r3, r1, r3
 8000c34:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000c38:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8000c3c:	440a      	add	r2, r1
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	f003 030f 	and.w	r3, r3, #15
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8000c4a:	2000      	movs	r0, #0
}
 8000c4c:	e7c1      	b.n	8000bd2 <LL_USART_Init+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000c4e:	2600      	movs	r6, #0
 8000c50:	1805      	adds	r5, r0, r0
 8000c52:	eb46 0206 	adc.w	r2, r6, r6
 8000c56:	182d      	adds	r5, r5, r0
 8000c58:	eb42 0106 	adc.w	r1, r2, r6
 8000c5c:	00ca      	lsls	r2, r1, #3
 8000c5e:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8000c62:	00ef      	lsls	r7, r5, #3
 8000c64:	4611      	mov	r1, r2
 8000c66:	18da      	adds	r2, r3, r3
 8000c68:	eb46 0306 	adc.w	r3, r6, r6
 8000c6c:	1838      	adds	r0, r7, r0
 8000c6e:	eb46 0101 	adc.w	r1, r6, r1
 8000c72:	f7ff fb05 	bl	8000280 <__aeabi_uldivmod>
 8000c76:	4911      	ldr	r1, [pc, #68]	; (8000cbc <LL_USART_Init+0x14c>)
 8000c78:	fba1 2300 	umull	r2, r3, r1, r0
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	011a      	lsls	r2, r3, #4
 8000c80:	b292      	uxth	r2, r2
 8000c82:	2564      	movs	r5, #100	; 0x64
 8000c84:	fb05 0313 	mls	r3, r5, r3, r0
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	3332      	adds	r3, #50	; 0x32
 8000c8c:	fba1 1303 	umull	r1, r3, r1, r3
 8000c90:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000c94:	0059      	lsls	r1, r3, #1
 8000c96:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8000c9a:	440a      	add	r2, r1
 8000c9c:	b292      	uxth	r2, r2
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	60a3      	str	r3, [r4, #8]
 8000ca8:	e7cf      	b.n	8000c4a <LL_USART_Init+0xda>
  ErrorStatus status = ERROR;
 8000caa:	2001      	movs	r0, #1
 8000cac:	e791      	b.n	8000bd2 <LL_USART_Init+0x62>
 8000cae:	bf00      	nop
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40011400 	.word	0x40011400
 8000cbc:	51eb851f 	.word	0x51eb851f

08000cc0 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <LL_Init1msTick+0x18>)
 8000cc2:	fba3 2300 	umull	r2, r3, r3, r0
 8000cc6:	099b      	lsrs	r3, r3, #6
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <LL_Init1msTick+0x1c>)
 8000ccc:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cce:	2300      	movs	r3, #0
 8000cd0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	6013      	str	r3, [r2, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000cd6:	4770      	bx	lr
 8000cd8:	10624dd3 	.word	0x10624dd3
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000ce0:	4b01      	ldr	r3, [pc, #4]	; (8000ce8 <LL_SetSystemCoreClock+0x8>)
 8000ce2:	6018      	str	r0, [r3, #0]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000000 	.word	0x20000000

08000cec <__errno>:
 8000cec:	4b01      	ldr	r3, [pc, #4]	; (8000cf4 <__errno+0x8>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <__libc_init_array>:
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	4d0d      	ldr	r5, [pc, #52]	; (8000d30 <__libc_init_array+0x38>)
 8000cfc:	4c0d      	ldr	r4, [pc, #52]	; (8000d34 <__libc_init_array+0x3c>)
 8000cfe:	1b64      	subs	r4, r4, r5
 8000d00:	10a4      	asrs	r4, r4, #2
 8000d02:	2600      	movs	r6, #0
 8000d04:	42a6      	cmp	r6, r4
 8000d06:	d109      	bne.n	8000d1c <__libc_init_array+0x24>
 8000d08:	4d0b      	ldr	r5, [pc, #44]	; (8000d38 <__libc_init_array+0x40>)
 8000d0a:	4c0c      	ldr	r4, [pc, #48]	; (8000d3c <__libc_init_array+0x44>)
 8000d0c:	f000 ffd4 	bl	8001cb8 <_init>
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	10a4      	asrs	r4, r4, #2
 8000d14:	2600      	movs	r6, #0
 8000d16:	42a6      	cmp	r6, r4
 8000d18:	d105      	bne.n	8000d26 <__libc_init_array+0x2e>
 8000d1a:	bd70      	pop	{r4, r5, r6, pc}
 8000d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d20:	4798      	blx	r3
 8000d22:	3601      	adds	r6, #1
 8000d24:	e7ee      	b.n	8000d04 <__libc_init_array+0xc>
 8000d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2a:	4798      	blx	r3
 8000d2c:	3601      	adds	r6, #1
 8000d2e:	e7f2      	b.n	8000d16 <__libc_init_array+0x1e>
 8000d30:	08001da0 	.word	0x08001da0
 8000d34:	08001da0 	.word	0x08001da0
 8000d38:	08001da0 	.word	0x08001da0
 8000d3c:	08001da4 	.word	0x08001da4

08000d40 <memset>:
 8000d40:	4402      	add	r2, r0
 8000d42:	4603      	mov	r3, r0
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d100      	bne.n	8000d4a <memset+0xa>
 8000d48:	4770      	bx	lr
 8000d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d4e:	e7f9      	b.n	8000d44 <memset+0x4>

08000d50 <iprintf>:
 8000d50:	b40f      	push	{r0, r1, r2, r3}
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <iprintf+0x2c>)
 8000d54:	b513      	push	{r0, r1, r4, lr}
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	b124      	cbz	r4, 8000d64 <iprintf+0x14>
 8000d5a:	69a3      	ldr	r3, [r4, #24]
 8000d5c:	b913      	cbnz	r3, 8000d64 <iprintf+0x14>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f000 f87c 	bl	8000e5c <__sinit>
 8000d64:	ab05      	add	r3, sp, #20
 8000d66:	9a04      	ldr	r2, [sp, #16]
 8000d68:	68a1      	ldr	r1, [r4, #8]
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f000 f999 	bl	80010a4 <_vfiprintf_r>
 8000d72:	b002      	add	sp, #8
 8000d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d78:	b004      	add	sp, #16
 8000d7a:	4770      	bx	lr
 8000d7c:	20000004 	.word	0x20000004

08000d80 <putchar>:
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <putchar+0x28>)
 8000d82:	b513      	push	{r0, r1, r4, lr}
 8000d84:	681c      	ldr	r4, [r3, #0]
 8000d86:	4601      	mov	r1, r0
 8000d88:	b134      	cbz	r4, 8000d98 <putchar+0x18>
 8000d8a:	69a3      	ldr	r3, [r4, #24]
 8000d8c:	b923      	cbnz	r3, 8000d98 <putchar+0x18>
 8000d8e:	9001      	str	r0, [sp, #4]
 8000d90:	4620      	mov	r0, r4
 8000d92:	f000 f863 	bl	8000e5c <__sinit>
 8000d96:	9901      	ldr	r1, [sp, #4]
 8000d98:	68a2      	ldr	r2, [r4, #8]
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	b002      	add	sp, #8
 8000d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da2:	f000 bc43 	b.w	800162c <_putc_r>
 8000da6:	bf00      	nop
 8000da8:	20000004 	.word	0x20000004

08000dac <std>:
 8000dac:	2300      	movs	r3, #0
 8000dae:	b510      	push	{r4, lr}
 8000db0:	4604      	mov	r4, r0
 8000db2:	e9c0 3300 	strd	r3, r3, [r0]
 8000db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dba:	6083      	str	r3, [r0, #8]
 8000dbc:	8181      	strh	r1, [r0, #12]
 8000dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8000dc0:	81c2      	strh	r2, [r0, #14]
 8000dc2:	6183      	str	r3, [r0, #24]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	305c      	adds	r0, #92	; 0x5c
 8000dca:	f7ff ffb9 	bl	8000d40 <memset>
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <std+0x38>)
 8000dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <std+0x3c>)
 8000dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <std+0x40>)
 8000dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <std+0x44>)
 8000ddc:	6224      	str	r4, [r4, #32]
 8000dde:	6323      	str	r3, [r4, #48]	; 0x30
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	bf00      	nop
 8000de4:	080016dd 	.word	0x080016dd
 8000de8:	080016ff 	.word	0x080016ff
 8000dec:	08001737 	.word	0x08001737
 8000df0:	0800175b 	.word	0x0800175b

08000df4 <_cleanup_r>:
 8000df4:	4901      	ldr	r1, [pc, #4]	; (8000dfc <_cleanup_r+0x8>)
 8000df6:	f000 b8af 	b.w	8000f58 <_fwalk_reent>
 8000dfa:	bf00      	nop
 8000dfc:	08001a35 	.word	0x08001a35

08000e00 <__sfmoreglue>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	1e4a      	subs	r2, r1, #1
 8000e04:	2568      	movs	r5, #104	; 0x68
 8000e06:	4355      	muls	r5, r2
 8000e08:	460e      	mov	r6, r1
 8000e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e0e:	f000 f8c5 	bl	8000f9c <_malloc_r>
 8000e12:	4604      	mov	r4, r0
 8000e14:	b140      	cbz	r0, 8000e28 <__sfmoreglue+0x28>
 8000e16:	2100      	movs	r1, #0
 8000e18:	e9c0 1600 	strd	r1, r6, [r0]
 8000e1c:	300c      	adds	r0, #12
 8000e1e:	60a0      	str	r0, [r4, #8]
 8000e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e24:	f7ff ff8c 	bl	8000d40 <memset>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}

08000e2c <__sfp_lock_acquire>:
 8000e2c:	4801      	ldr	r0, [pc, #4]	; (8000e34 <__sfp_lock_acquire+0x8>)
 8000e2e:	f000 b8b3 	b.w	8000f98 <__retarget_lock_acquire_recursive>
 8000e32:	bf00      	nop
 8000e34:	2000009c 	.word	0x2000009c

08000e38 <__sfp_lock_release>:
 8000e38:	4801      	ldr	r0, [pc, #4]	; (8000e40 <__sfp_lock_release+0x8>)
 8000e3a:	f000 b8ae 	b.w	8000f9a <__retarget_lock_release_recursive>
 8000e3e:	bf00      	nop
 8000e40:	2000009c 	.word	0x2000009c

08000e44 <__sinit_lock_acquire>:
 8000e44:	4801      	ldr	r0, [pc, #4]	; (8000e4c <__sinit_lock_acquire+0x8>)
 8000e46:	f000 b8a7 	b.w	8000f98 <__retarget_lock_acquire_recursive>
 8000e4a:	bf00      	nop
 8000e4c:	20000097 	.word	0x20000097

08000e50 <__sinit_lock_release>:
 8000e50:	4801      	ldr	r0, [pc, #4]	; (8000e58 <__sinit_lock_release+0x8>)
 8000e52:	f000 b8a2 	b.w	8000f9a <__retarget_lock_release_recursive>
 8000e56:	bf00      	nop
 8000e58:	20000097 	.word	0x20000097

08000e5c <__sinit>:
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	4604      	mov	r4, r0
 8000e60:	f7ff fff0 	bl	8000e44 <__sinit_lock_acquire>
 8000e64:	69a3      	ldr	r3, [r4, #24]
 8000e66:	b11b      	cbz	r3, 8000e70 <__sinit+0x14>
 8000e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e6c:	f7ff bff0 	b.w	8000e50 <__sinit_lock_release>
 8000e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e74:	6523      	str	r3, [r4, #80]	; 0x50
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <__sinit+0x68>)
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <__sinit+0x6c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	bf04      	itt	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	61a3      	streq	r3, [r4, #24]
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 f820 	bl	8000ecc <__sfp>
 8000e8c:	6060      	str	r0, [r4, #4]
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f000 f81c 	bl	8000ecc <__sfp>
 8000e94:	60a0      	str	r0, [r4, #8]
 8000e96:	4620      	mov	r0, r4
 8000e98:	f000 f818 	bl	8000ecc <__sfp>
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60e0      	str	r0, [r4, #12]
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	6860      	ldr	r0, [r4, #4]
 8000ea4:	f7ff ff82 	bl	8000dac <std>
 8000ea8:	68a0      	ldr	r0, [r4, #8]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2109      	movs	r1, #9
 8000eae:	f7ff ff7d 	bl	8000dac <std>
 8000eb2:	68e0      	ldr	r0, [r4, #12]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	2112      	movs	r1, #18
 8000eb8:	f7ff ff78 	bl	8000dac <std>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61a3      	str	r3, [r4, #24]
 8000ec0:	e7d2      	b.n	8000e68 <__sinit+0xc>
 8000ec2:	bf00      	nop
 8000ec4:	08001d00 	.word	0x08001d00
 8000ec8:	08000df5 	.word	0x08000df5

08000ecc <__sfp>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	4607      	mov	r7, r0
 8000ed0:	f7ff ffac 	bl	8000e2c <__sfp_lock_acquire>
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <__sfp+0x84>)
 8000ed6:	681e      	ldr	r6, [r3, #0]
 8000ed8:	69b3      	ldr	r3, [r6, #24]
 8000eda:	b913      	cbnz	r3, 8000ee2 <__sfp+0x16>
 8000edc:	4630      	mov	r0, r6
 8000ede:	f7ff ffbd 	bl	8000e5c <__sinit>
 8000ee2:	3648      	adds	r6, #72	; 0x48
 8000ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	d503      	bpl.n	8000ef4 <__sfp+0x28>
 8000eec:	6833      	ldr	r3, [r6, #0]
 8000eee:	b30b      	cbz	r3, 8000f34 <__sfp+0x68>
 8000ef0:	6836      	ldr	r6, [r6, #0]
 8000ef2:	e7f7      	b.n	8000ee4 <__sfp+0x18>
 8000ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ef8:	b9d5      	cbnz	r5, 8000f30 <__sfp+0x64>
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <__sfp+0x88>)
 8000efc:	60e3      	str	r3, [r4, #12]
 8000efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f02:	6665      	str	r5, [r4, #100]	; 0x64
 8000f04:	f000 f847 	bl	8000f96 <__retarget_lock_init_recursive>
 8000f08:	f7ff ff96 	bl	8000e38 <__sfp_lock_release>
 8000f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f14:	6025      	str	r5, [r4, #0]
 8000f16:	61a5      	str	r5, [r4, #24]
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4629      	mov	r1, r5
 8000f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f20:	f7ff ff0e 	bl	8000d40 <memset>
 8000f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f30:	3468      	adds	r4, #104	; 0x68
 8000f32:	e7d9      	b.n	8000ee8 <__sfp+0x1c>
 8000f34:	2104      	movs	r1, #4
 8000f36:	4638      	mov	r0, r7
 8000f38:	f7ff ff62 	bl	8000e00 <__sfmoreglue>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	6030      	str	r0, [r6, #0]
 8000f40:	2800      	cmp	r0, #0
 8000f42:	d1d5      	bne.n	8000ef0 <__sfp+0x24>
 8000f44:	f7ff ff78 	bl	8000e38 <__sfp_lock_release>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	e7ee      	b.n	8000f2c <__sfp+0x60>
 8000f4e:	bf00      	nop
 8000f50:	08001d00 	.word	0x08001d00
 8000f54:	ffff0001 	.word	0xffff0001

08000f58 <_fwalk_reent>:
 8000f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	4688      	mov	r8, r1
 8000f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f64:	2700      	movs	r7, #0
 8000f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8000f6e:	d505      	bpl.n	8000f7c <_fwalk_reent+0x24>
 8000f70:	6824      	ldr	r4, [r4, #0]
 8000f72:	2c00      	cmp	r4, #0
 8000f74:	d1f7      	bne.n	8000f66 <_fwalk_reent+0xe>
 8000f76:	4638      	mov	r0, r7
 8000f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f7c:	89ab      	ldrh	r3, [r5, #12]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d907      	bls.n	8000f92 <_fwalk_reent+0x3a>
 8000f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f86:	3301      	adds	r3, #1
 8000f88:	d003      	beq.n	8000f92 <_fwalk_reent+0x3a>
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	47c0      	blx	r8
 8000f90:	4307      	orrs	r7, r0
 8000f92:	3568      	adds	r5, #104	; 0x68
 8000f94:	e7e9      	b.n	8000f6a <_fwalk_reent+0x12>

08000f96 <__retarget_lock_init_recursive>:
 8000f96:	4770      	bx	lr

08000f98 <__retarget_lock_acquire_recursive>:
 8000f98:	4770      	bx	lr

08000f9a <__retarget_lock_release_recursive>:
 8000f9a:	4770      	bx	lr

08000f9c <_malloc_r>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	1ccd      	adds	r5, r1, #3
 8000fa0:	f025 0503 	bic.w	r5, r5, #3
 8000fa4:	3508      	adds	r5, #8
 8000fa6:	2d0c      	cmp	r5, #12
 8000fa8:	bf38      	it	cc
 8000faa:	250c      	movcc	r5, #12
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	4606      	mov	r6, r0
 8000fb0:	db01      	blt.n	8000fb6 <_malloc_r+0x1a>
 8000fb2:	42a9      	cmp	r1, r5
 8000fb4:	d903      	bls.n	8000fbe <_malloc_r+0x22>
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	6033      	str	r3, [r6, #0]
 8000fba:	2000      	movs	r0, #0
 8000fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fbe:	f000 fdeb 	bl	8001b98 <__malloc_lock>
 8000fc2:	4921      	ldr	r1, [pc, #132]	; (8001048 <_malloc_r+0xac>)
 8000fc4:	680a      	ldr	r2, [r1, #0]
 8000fc6:	4614      	mov	r4, r2
 8000fc8:	b99c      	cbnz	r4, 8000ff2 <_malloc_r+0x56>
 8000fca:	4f20      	ldr	r7, [pc, #128]	; (800104c <_malloc_r+0xb0>)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b923      	cbnz	r3, 8000fda <_malloc_r+0x3e>
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	f000 fb72 	bl	80016bc <_sbrk_r>
 8000fd8:	6038      	str	r0, [r7, #0]
 8000fda:	4629      	mov	r1, r5
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f000 fb6d 	bl	80016bc <_sbrk_r>
 8000fe2:	1c43      	adds	r3, r0, #1
 8000fe4:	d123      	bne.n	800102e <_malloc_r+0x92>
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	6033      	str	r3, [r6, #0]
 8000fea:	4630      	mov	r0, r6
 8000fec:	f000 fdda 	bl	8001ba4 <__malloc_unlock>
 8000ff0:	e7e3      	b.n	8000fba <_malloc_r+0x1e>
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	1b5b      	subs	r3, r3, r5
 8000ff6:	d417      	bmi.n	8001028 <_malloc_r+0x8c>
 8000ff8:	2b0b      	cmp	r3, #11
 8000ffa:	d903      	bls.n	8001004 <_malloc_r+0x68>
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	441c      	add	r4, r3
 8001000:	6025      	str	r5, [r4, #0]
 8001002:	e004      	b.n	800100e <_malloc_r+0x72>
 8001004:	6863      	ldr	r3, [r4, #4]
 8001006:	42a2      	cmp	r2, r4
 8001008:	bf0c      	ite	eq
 800100a:	600b      	streq	r3, [r1, #0]
 800100c:	6053      	strne	r3, [r2, #4]
 800100e:	4630      	mov	r0, r6
 8001010:	f000 fdc8 	bl	8001ba4 <__malloc_unlock>
 8001014:	f104 000b 	add.w	r0, r4, #11
 8001018:	1d23      	adds	r3, r4, #4
 800101a:	f020 0007 	bic.w	r0, r0, #7
 800101e:	1ac2      	subs	r2, r0, r3
 8001020:	d0cc      	beq.n	8000fbc <_malloc_r+0x20>
 8001022:	1a1b      	subs	r3, r3, r0
 8001024:	50a3      	str	r3, [r4, r2]
 8001026:	e7c9      	b.n	8000fbc <_malloc_r+0x20>
 8001028:	4622      	mov	r2, r4
 800102a:	6864      	ldr	r4, [r4, #4]
 800102c:	e7cc      	b.n	8000fc8 <_malloc_r+0x2c>
 800102e:	1cc4      	adds	r4, r0, #3
 8001030:	f024 0403 	bic.w	r4, r4, #3
 8001034:	42a0      	cmp	r0, r4
 8001036:	d0e3      	beq.n	8001000 <_malloc_r+0x64>
 8001038:	1a21      	subs	r1, r4, r0
 800103a:	4630      	mov	r0, r6
 800103c:	f000 fb3e 	bl	80016bc <_sbrk_r>
 8001040:	3001      	adds	r0, #1
 8001042:	d1dd      	bne.n	8001000 <_malloc_r+0x64>
 8001044:	e7cf      	b.n	8000fe6 <_malloc_r+0x4a>
 8001046:	bf00      	nop
 8001048:	2000008c 	.word	0x2000008c
 800104c:	20000090 	.word	0x20000090

08001050 <__sfputc_r>:
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	3b01      	subs	r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	b410      	push	{r4}
 8001058:	6093      	str	r3, [r2, #8]
 800105a:	da08      	bge.n	800106e <__sfputc_r+0x1e>
 800105c:	6994      	ldr	r4, [r2, #24]
 800105e:	42a3      	cmp	r3, r4
 8001060:	db01      	blt.n	8001066 <__sfputc_r+0x16>
 8001062:	290a      	cmp	r1, #10
 8001064:	d103      	bne.n	800106e <__sfputc_r+0x1e>
 8001066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800106a:	f000 bb7b 	b.w	8001764 <__swbuf_r>
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	1c58      	adds	r0, r3, #1
 8001072:	6010      	str	r0, [r2, #0]
 8001074:	7019      	strb	r1, [r3, #0]
 8001076:	4608      	mov	r0, r1
 8001078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800107c:	4770      	bx	lr

0800107e <__sfputs_r>:
 800107e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001080:	4606      	mov	r6, r0
 8001082:	460f      	mov	r7, r1
 8001084:	4614      	mov	r4, r2
 8001086:	18d5      	adds	r5, r2, r3
 8001088:	42ac      	cmp	r4, r5
 800108a:	d101      	bne.n	8001090 <__sfputs_r+0x12>
 800108c:	2000      	movs	r0, #0
 800108e:	e007      	b.n	80010a0 <__sfputs_r+0x22>
 8001090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001094:	463a      	mov	r2, r7
 8001096:	4630      	mov	r0, r6
 8001098:	f7ff ffda 	bl	8001050 <__sfputc_r>
 800109c:	1c43      	adds	r3, r0, #1
 800109e:	d1f3      	bne.n	8001088 <__sfputs_r+0xa>
 80010a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010a4 <_vfiprintf_r>:
 80010a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a8:	460d      	mov	r5, r1
 80010aa:	b09d      	sub	sp, #116	; 0x74
 80010ac:	4614      	mov	r4, r2
 80010ae:	4698      	mov	r8, r3
 80010b0:	4606      	mov	r6, r0
 80010b2:	b118      	cbz	r0, 80010bc <_vfiprintf_r+0x18>
 80010b4:	6983      	ldr	r3, [r0, #24]
 80010b6:	b90b      	cbnz	r3, 80010bc <_vfiprintf_r+0x18>
 80010b8:	f7ff fed0 	bl	8000e5c <__sinit>
 80010bc:	4b89      	ldr	r3, [pc, #548]	; (80012e4 <_vfiprintf_r+0x240>)
 80010be:	429d      	cmp	r5, r3
 80010c0:	d11b      	bne.n	80010fa <_vfiprintf_r+0x56>
 80010c2:	6875      	ldr	r5, [r6, #4]
 80010c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010c6:	07d9      	lsls	r1, r3, #31
 80010c8:	d405      	bmi.n	80010d6 <_vfiprintf_r+0x32>
 80010ca:	89ab      	ldrh	r3, [r5, #12]
 80010cc:	059a      	lsls	r2, r3, #22
 80010ce:	d402      	bmi.n	80010d6 <_vfiprintf_r+0x32>
 80010d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010d2:	f7ff ff61 	bl	8000f98 <__retarget_lock_acquire_recursive>
 80010d6:	89ab      	ldrh	r3, [r5, #12]
 80010d8:	071b      	lsls	r3, r3, #28
 80010da:	d501      	bpl.n	80010e0 <_vfiprintf_r+0x3c>
 80010dc:	692b      	ldr	r3, [r5, #16]
 80010de:	b9eb      	cbnz	r3, 800111c <_vfiprintf_r+0x78>
 80010e0:	4629      	mov	r1, r5
 80010e2:	4630      	mov	r0, r6
 80010e4:	f000 fba2 	bl	800182c <__swsetup_r>
 80010e8:	b1c0      	cbz	r0, 800111c <_vfiprintf_r+0x78>
 80010ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010ec:	07dc      	lsls	r4, r3, #31
 80010ee:	d50e      	bpl.n	800110e <_vfiprintf_r+0x6a>
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	b01d      	add	sp, #116	; 0x74
 80010f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010fa:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <_vfiprintf_r+0x244>)
 80010fc:	429d      	cmp	r5, r3
 80010fe:	d101      	bne.n	8001104 <_vfiprintf_r+0x60>
 8001100:	68b5      	ldr	r5, [r6, #8]
 8001102:	e7df      	b.n	80010c4 <_vfiprintf_r+0x20>
 8001104:	4b79      	ldr	r3, [pc, #484]	; (80012ec <_vfiprintf_r+0x248>)
 8001106:	429d      	cmp	r5, r3
 8001108:	bf08      	it	eq
 800110a:	68f5      	ldreq	r5, [r6, #12]
 800110c:	e7da      	b.n	80010c4 <_vfiprintf_r+0x20>
 800110e:	89ab      	ldrh	r3, [r5, #12]
 8001110:	0598      	lsls	r0, r3, #22
 8001112:	d4ed      	bmi.n	80010f0 <_vfiprintf_r+0x4c>
 8001114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001116:	f7ff ff40 	bl	8000f9a <__retarget_lock_release_recursive>
 800111a:	e7e9      	b.n	80010f0 <_vfiprintf_r+0x4c>
 800111c:	2300      	movs	r3, #0
 800111e:	9309      	str	r3, [sp, #36]	; 0x24
 8001120:	2320      	movs	r3, #32
 8001122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001126:	f8cd 800c 	str.w	r8, [sp, #12]
 800112a:	2330      	movs	r3, #48	; 0x30
 800112c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80012f0 <_vfiprintf_r+0x24c>
 8001130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001134:	f04f 0901 	mov.w	r9, #1
 8001138:	4623      	mov	r3, r4
 800113a:	469a      	mov	sl, r3
 800113c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001140:	b10a      	cbz	r2, 8001146 <_vfiprintf_r+0xa2>
 8001142:	2a25      	cmp	r2, #37	; 0x25
 8001144:	d1f9      	bne.n	800113a <_vfiprintf_r+0x96>
 8001146:	ebba 0b04 	subs.w	fp, sl, r4
 800114a:	d00b      	beq.n	8001164 <_vfiprintf_r+0xc0>
 800114c:	465b      	mov	r3, fp
 800114e:	4622      	mov	r2, r4
 8001150:	4629      	mov	r1, r5
 8001152:	4630      	mov	r0, r6
 8001154:	f7ff ff93 	bl	800107e <__sfputs_r>
 8001158:	3001      	adds	r0, #1
 800115a:	f000 80aa 	beq.w	80012b2 <_vfiprintf_r+0x20e>
 800115e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001160:	445a      	add	r2, fp
 8001162:	9209      	str	r2, [sp, #36]	; 0x24
 8001164:	f89a 3000 	ldrb.w	r3, [sl]
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80a2 	beq.w	80012b2 <_vfiprintf_r+0x20e>
 800116e:	2300      	movs	r3, #0
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001178:	f10a 0a01 	add.w	sl, sl, #1
 800117c:	9304      	str	r3, [sp, #16]
 800117e:	9307      	str	r3, [sp, #28]
 8001180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001184:	931a      	str	r3, [sp, #104]	; 0x68
 8001186:	4654      	mov	r4, sl
 8001188:	2205      	movs	r2, #5
 800118a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800118e:	4858      	ldr	r0, [pc, #352]	; (80012f0 <_vfiprintf_r+0x24c>)
 8001190:	f7ff f826 	bl	80001e0 <memchr>
 8001194:	9a04      	ldr	r2, [sp, #16]
 8001196:	b9d8      	cbnz	r0, 80011d0 <_vfiprintf_r+0x12c>
 8001198:	06d1      	lsls	r1, r2, #27
 800119a:	bf44      	itt	mi
 800119c:	2320      	movmi	r3, #32
 800119e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011a2:	0713      	lsls	r3, r2, #28
 80011a4:	bf44      	itt	mi
 80011a6:	232b      	movmi	r3, #43	; 0x2b
 80011a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011ac:	f89a 3000 	ldrb.w	r3, [sl]
 80011b0:	2b2a      	cmp	r3, #42	; 0x2a
 80011b2:	d015      	beq.n	80011e0 <_vfiprintf_r+0x13c>
 80011b4:	9a07      	ldr	r2, [sp, #28]
 80011b6:	4654      	mov	r4, sl
 80011b8:	2000      	movs	r0, #0
 80011ba:	f04f 0c0a 	mov.w	ip, #10
 80011be:	4621      	mov	r1, r4
 80011c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011c4:	3b30      	subs	r3, #48	; 0x30
 80011c6:	2b09      	cmp	r3, #9
 80011c8:	d94e      	bls.n	8001268 <_vfiprintf_r+0x1c4>
 80011ca:	b1b0      	cbz	r0, 80011fa <_vfiprintf_r+0x156>
 80011cc:	9207      	str	r2, [sp, #28]
 80011ce:	e014      	b.n	80011fa <_vfiprintf_r+0x156>
 80011d0:	eba0 0308 	sub.w	r3, r0, r8
 80011d4:	fa09 f303 	lsl.w	r3, r9, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	9304      	str	r3, [sp, #16]
 80011dc:	46a2      	mov	sl, r4
 80011de:	e7d2      	b.n	8001186 <_vfiprintf_r+0xe2>
 80011e0:	9b03      	ldr	r3, [sp, #12]
 80011e2:	1d19      	adds	r1, r3, #4
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	9103      	str	r1, [sp, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bfbb      	ittet	lt
 80011ec:	425b      	neglt	r3, r3
 80011ee:	f042 0202 	orrlt.w	r2, r2, #2
 80011f2:	9307      	strge	r3, [sp, #28]
 80011f4:	9307      	strlt	r3, [sp, #28]
 80011f6:	bfb8      	it	lt
 80011f8:	9204      	strlt	r2, [sp, #16]
 80011fa:	7823      	ldrb	r3, [r4, #0]
 80011fc:	2b2e      	cmp	r3, #46	; 0x2e
 80011fe:	d10c      	bne.n	800121a <_vfiprintf_r+0x176>
 8001200:	7863      	ldrb	r3, [r4, #1]
 8001202:	2b2a      	cmp	r3, #42	; 0x2a
 8001204:	d135      	bne.n	8001272 <_vfiprintf_r+0x1ce>
 8001206:	9b03      	ldr	r3, [sp, #12]
 8001208:	1d1a      	adds	r2, r3, #4
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	9203      	str	r2, [sp, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	bfb8      	it	lt
 8001212:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001216:	3402      	adds	r4, #2
 8001218:	9305      	str	r3, [sp, #20]
 800121a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001300 <_vfiprintf_r+0x25c>
 800121e:	7821      	ldrb	r1, [r4, #0]
 8001220:	2203      	movs	r2, #3
 8001222:	4650      	mov	r0, sl
 8001224:	f7fe ffdc 	bl	80001e0 <memchr>
 8001228:	b140      	cbz	r0, 800123c <_vfiprintf_r+0x198>
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	eba0 000a 	sub.w	r0, r0, sl
 8001230:	fa03 f000 	lsl.w	r0, r3, r0
 8001234:	9b04      	ldr	r3, [sp, #16]
 8001236:	4303      	orrs	r3, r0
 8001238:	3401      	adds	r4, #1
 800123a:	9304      	str	r3, [sp, #16]
 800123c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <_vfiprintf_r+0x250>)
 8001242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001246:	2206      	movs	r2, #6
 8001248:	f7fe ffca 	bl	80001e0 <memchr>
 800124c:	2800      	cmp	r0, #0
 800124e:	d03f      	beq.n	80012d0 <_vfiprintf_r+0x22c>
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <_vfiprintf_r+0x254>)
 8001252:	bb1b      	cbnz	r3, 800129c <_vfiprintf_r+0x1f8>
 8001254:	9b03      	ldr	r3, [sp, #12]
 8001256:	3307      	adds	r3, #7
 8001258:	f023 0307 	bic.w	r3, r3, #7
 800125c:	3308      	adds	r3, #8
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001262:	443b      	add	r3, r7
 8001264:	9309      	str	r3, [sp, #36]	; 0x24
 8001266:	e767      	b.n	8001138 <_vfiprintf_r+0x94>
 8001268:	fb0c 3202 	mla	r2, ip, r2, r3
 800126c:	460c      	mov	r4, r1
 800126e:	2001      	movs	r0, #1
 8001270:	e7a5      	b.n	80011be <_vfiprintf_r+0x11a>
 8001272:	2300      	movs	r3, #0
 8001274:	3401      	adds	r4, #1
 8001276:	9305      	str	r3, [sp, #20]
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 0c0a 	mov.w	ip, #10
 800127e:	4620      	mov	r0, r4
 8001280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001284:	3a30      	subs	r2, #48	; 0x30
 8001286:	2a09      	cmp	r2, #9
 8001288:	d903      	bls.n	8001292 <_vfiprintf_r+0x1ee>
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0c5      	beq.n	800121a <_vfiprintf_r+0x176>
 800128e:	9105      	str	r1, [sp, #20]
 8001290:	e7c3      	b.n	800121a <_vfiprintf_r+0x176>
 8001292:	fb0c 2101 	mla	r1, ip, r1, r2
 8001296:	4604      	mov	r4, r0
 8001298:	2301      	movs	r3, #1
 800129a:	e7f0      	b.n	800127e <_vfiprintf_r+0x1da>
 800129c:	ab03      	add	r3, sp, #12
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	462a      	mov	r2, r5
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <_vfiprintf_r+0x258>)
 80012a4:	a904      	add	r1, sp, #16
 80012a6:	4630      	mov	r0, r6
 80012a8:	f3af 8000 	nop.w
 80012ac:	4607      	mov	r7, r0
 80012ae:	1c78      	adds	r0, r7, #1
 80012b0:	d1d6      	bne.n	8001260 <_vfiprintf_r+0x1bc>
 80012b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012b4:	07d9      	lsls	r1, r3, #31
 80012b6:	d405      	bmi.n	80012c4 <_vfiprintf_r+0x220>
 80012b8:	89ab      	ldrh	r3, [r5, #12]
 80012ba:	059a      	lsls	r2, r3, #22
 80012bc:	d402      	bmi.n	80012c4 <_vfiprintf_r+0x220>
 80012be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012c0:	f7ff fe6b 	bl	8000f9a <__retarget_lock_release_recursive>
 80012c4:	89ab      	ldrh	r3, [r5, #12]
 80012c6:	065b      	lsls	r3, r3, #25
 80012c8:	f53f af12 	bmi.w	80010f0 <_vfiprintf_r+0x4c>
 80012cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012ce:	e711      	b.n	80010f4 <_vfiprintf_r+0x50>
 80012d0:	ab03      	add	r3, sp, #12
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	462a      	mov	r2, r5
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <_vfiprintf_r+0x258>)
 80012d8:	a904      	add	r1, sp, #16
 80012da:	4630      	mov	r0, r6
 80012dc:	f000 f880 	bl	80013e0 <_printf_i>
 80012e0:	e7e4      	b.n	80012ac <_vfiprintf_r+0x208>
 80012e2:	bf00      	nop
 80012e4:	08001d24 	.word	0x08001d24
 80012e8:	08001d44 	.word	0x08001d44
 80012ec:	08001d04 	.word	0x08001d04
 80012f0:	08001d64 	.word	0x08001d64
 80012f4:	08001d6e 	.word	0x08001d6e
 80012f8:	00000000 	.word	0x00000000
 80012fc:	0800107f 	.word	0x0800107f
 8001300:	08001d6a 	.word	0x08001d6a

08001304 <_printf_common>:
 8001304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001308:	4616      	mov	r6, r2
 800130a:	4699      	mov	r9, r3
 800130c:	688a      	ldr	r2, [r1, #8]
 800130e:	690b      	ldr	r3, [r1, #16]
 8001310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001314:	4293      	cmp	r3, r2
 8001316:	bfb8      	it	lt
 8001318:	4613      	movlt	r3, r2
 800131a:	6033      	str	r3, [r6, #0]
 800131c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001320:	4607      	mov	r7, r0
 8001322:	460c      	mov	r4, r1
 8001324:	b10a      	cbz	r2, 800132a <_printf_common+0x26>
 8001326:	3301      	adds	r3, #1
 8001328:	6033      	str	r3, [r6, #0]
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	0699      	lsls	r1, r3, #26
 800132e:	bf42      	ittt	mi
 8001330:	6833      	ldrmi	r3, [r6, #0]
 8001332:	3302      	addmi	r3, #2
 8001334:	6033      	strmi	r3, [r6, #0]
 8001336:	6825      	ldr	r5, [r4, #0]
 8001338:	f015 0506 	ands.w	r5, r5, #6
 800133c:	d106      	bne.n	800134c <_printf_common+0x48>
 800133e:	f104 0a19 	add.w	sl, r4, #25
 8001342:	68e3      	ldr	r3, [r4, #12]
 8001344:	6832      	ldr	r2, [r6, #0]
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	42ab      	cmp	r3, r5
 800134a:	dc26      	bgt.n	800139a <_printf_common+0x96>
 800134c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001350:	1e13      	subs	r3, r2, #0
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	bf18      	it	ne
 8001356:	2301      	movne	r3, #1
 8001358:	0692      	lsls	r2, r2, #26
 800135a:	d42b      	bmi.n	80013b4 <_printf_common+0xb0>
 800135c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001360:	4649      	mov	r1, r9
 8001362:	4638      	mov	r0, r7
 8001364:	47c0      	blx	r8
 8001366:	3001      	adds	r0, #1
 8001368:	d01e      	beq.n	80013a8 <_printf_common+0xa4>
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	68e5      	ldr	r5, [r4, #12]
 800136e:	6832      	ldr	r2, [r6, #0]
 8001370:	f003 0306 	and.w	r3, r3, #6
 8001374:	2b04      	cmp	r3, #4
 8001376:	bf08      	it	eq
 8001378:	1aad      	subeq	r5, r5, r2
 800137a:	68a3      	ldr	r3, [r4, #8]
 800137c:	6922      	ldr	r2, [r4, #16]
 800137e:	bf0c      	ite	eq
 8001380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001384:	2500      	movne	r5, #0
 8001386:	4293      	cmp	r3, r2
 8001388:	bfc4      	itt	gt
 800138a:	1a9b      	subgt	r3, r3, r2
 800138c:	18ed      	addgt	r5, r5, r3
 800138e:	2600      	movs	r6, #0
 8001390:	341a      	adds	r4, #26
 8001392:	42b5      	cmp	r5, r6
 8001394:	d11a      	bne.n	80013cc <_printf_common+0xc8>
 8001396:	2000      	movs	r0, #0
 8001398:	e008      	b.n	80013ac <_printf_common+0xa8>
 800139a:	2301      	movs	r3, #1
 800139c:	4652      	mov	r2, sl
 800139e:	4649      	mov	r1, r9
 80013a0:	4638      	mov	r0, r7
 80013a2:	47c0      	blx	r8
 80013a4:	3001      	adds	r0, #1
 80013a6:	d103      	bne.n	80013b0 <_printf_common+0xac>
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b0:	3501      	adds	r5, #1
 80013b2:	e7c6      	b.n	8001342 <_printf_common+0x3e>
 80013b4:	18e1      	adds	r1, r4, r3
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	2030      	movs	r0, #48	; 0x30
 80013ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013be:	4422      	add	r2, r4
 80013c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013c8:	3302      	adds	r3, #2
 80013ca:	e7c7      	b.n	800135c <_printf_common+0x58>
 80013cc:	2301      	movs	r3, #1
 80013ce:	4622      	mov	r2, r4
 80013d0:	4649      	mov	r1, r9
 80013d2:	4638      	mov	r0, r7
 80013d4:	47c0      	blx	r8
 80013d6:	3001      	adds	r0, #1
 80013d8:	d0e6      	beq.n	80013a8 <_printf_common+0xa4>
 80013da:	3601      	adds	r6, #1
 80013dc:	e7d9      	b.n	8001392 <_printf_common+0x8e>
	...

080013e0 <_printf_i>:
 80013e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013e4:	460c      	mov	r4, r1
 80013e6:	4691      	mov	r9, r2
 80013e8:	7e27      	ldrb	r7, [r4, #24]
 80013ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80013ec:	2f78      	cmp	r7, #120	; 0x78
 80013ee:	4680      	mov	r8, r0
 80013f0:	469a      	mov	sl, r3
 80013f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80013f6:	d807      	bhi.n	8001408 <_printf_i+0x28>
 80013f8:	2f62      	cmp	r7, #98	; 0x62
 80013fa:	d80a      	bhi.n	8001412 <_printf_i+0x32>
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	f000 80d8 	beq.w	80015b2 <_printf_i+0x1d2>
 8001402:	2f58      	cmp	r7, #88	; 0x58
 8001404:	f000 80a3 	beq.w	800154e <_printf_i+0x16e>
 8001408:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800140c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001410:	e03a      	b.n	8001488 <_printf_i+0xa8>
 8001412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001416:	2b15      	cmp	r3, #21
 8001418:	d8f6      	bhi.n	8001408 <_printf_i+0x28>
 800141a:	a001      	add	r0, pc, #4	; (adr r0, 8001420 <_printf_i+0x40>)
 800141c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001420:	08001479 	.word	0x08001479
 8001424:	0800148d 	.word	0x0800148d
 8001428:	08001409 	.word	0x08001409
 800142c:	08001409 	.word	0x08001409
 8001430:	08001409 	.word	0x08001409
 8001434:	08001409 	.word	0x08001409
 8001438:	0800148d 	.word	0x0800148d
 800143c:	08001409 	.word	0x08001409
 8001440:	08001409 	.word	0x08001409
 8001444:	08001409 	.word	0x08001409
 8001448:	08001409 	.word	0x08001409
 800144c:	08001599 	.word	0x08001599
 8001450:	080014bd 	.word	0x080014bd
 8001454:	0800157b 	.word	0x0800157b
 8001458:	08001409 	.word	0x08001409
 800145c:	08001409 	.word	0x08001409
 8001460:	080015bb 	.word	0x080015bb
 8001464:	08001409 	.word	0x08001409
 8001468:	080014bd 	.word	0x080014bd
 800146c:	08001409 	.word	0x08001409
 8001470:	08001409 	.word	0x08001409
 8001474:	08001583 	.word	0x08001583
 8001478:	680b      	ldr	r3, [r1, #0]
 800147a:	1d1a      	adds	r2, r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	600a      	str	r2, [r1, #0]
 8001480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001488:	2301      	movs	r3, #1
 800148a:	e0a3      	b.n	80015d4 <_printf_i+0x1f4>
 800148c:	6825      	ldr	r5, [r4, #0]
 800148e:	6808      	ldr	r0, [r1, #0]
 8001490:	062e      	lsls	r6, r5, #24
 8001492:	f100 0304 	add.w	r3, r0, #4
 8001496:	d50a      	bpl.n	80014ae <_printf_i+0xce>
 8001498:	6805      	ldr	r5, [r0, #0]
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	2d00      	cmp	r5, #0
 800149e:	da03      	bge.n	80014a8 <_printf_i+0xc8>
 80014a0:	232d      	movs	r3, #45	; 0x2d
 80014a2:	426d      	negs	r5, r5
 80014a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014a8:	485e      	ldr	r0, [pc, #376]	; (8001624 <_printf_i+0x244>)
 80014aa:	230a      	movs	r3, #10
 80014ac:	e019      	b.n	80014e2 <_printf_i+0x102>
 80014ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80014b2:	6805      	ldr	r5, [r0, #0]
 80014b4:	600b      	str	r3, [r1, #0]
 80014b6:	bf18      	it	ne
 80014b8:	b22d      	sxthne	r5, r5
 80014ba:	e7ef      	b.n	800149c <_printf_i+0xbc>
 80014bc:	680b      	ldr	r3, [r1, #0]
 80014be:	6825      	ldr	r5, [r4, #0]
 80014c0:	1d18      	adds	r0, r3, #4
 80014c2:	6008      	str	r0, [r1, #0]
 80014c4:	0628      	lsls	r0, r5, #24
 80014c6:	d501      	bpl.n	80014cc <_printf_i+0xec>
 80014c8:	681d      	ldr	r5, [r3, #0]
 80014ca:	e002      	b.n	80014d2 <_printf_i+0xf2>
 80014cc:	0669      	lsls	r1, r5, #25
 80014ce:	d5fb      	bpl.n	80014c8 <_printf_i+0xe8>
 80014d0:	881d      	ldrh	r5, [r3, #0]
 80014d2:	4854      	ldr	r0, [pc, #336]	; (8001624 <_printf_i+0x244>)
 80014d4:	2f6f      	cmp	r7, #111	; 0x6f
 80014d6:	bf0c      	ite	eq
 80014d8:	2308      	moveq	r3, #8
 80014da:	230a      	movne	r3, #10
 80014dc:	2100      	movs	r1, #0
 80014de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014e2:	6866      	ldr	r6, [r4, #4]
 80014e4:	60a6      	str	r6, [r4, #8]
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	bfa2      	ittt	ge
 80014ea:	6821      	ldrge	r1, [r4, #0]
 80014ec:	f021 0104 	bicge.w	r1, r1, #4
 80014f0:	6021      	strge	r1, [r4, #0]
 80014f2:	b90d      	cbnz	r5, 80014f8 <_printf_i+0x118>
 80014f4:	2e00      	cmp	r6, #0
 80014f6:	d04d      	beq.n	8001594 <_printf_i+0x1b4>
 80014f8:	4616      	mov	r6, r2
 80014fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80014fe:	fb03 5711 	mls	r7, r3, r1, r5
 8001502:	5dc7      	ldrb	r7, [r0, r7]
 8001504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001508:	462f      	mov	r7, r5
 800150a:	42bb      	cmp	r3, r7
 800150c:	460d      	mov	r5, r1
 800150e:	d9f4      	bls.n	80014fa <_printf_i+0x11a>
 8001510:	2b08      	cmp	r3, #8
 8001512:	d10b      	bne.n	800152c <_printf_i+0x14c>
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	07df      	lsls	r7, r3, #31
 8001518:	d508      	bpl.n	800152c <_printf_i+0x14c>
 800151a:	6923      	ldr	r3, [r4, #16]
 800151c:	6861      	ldr	r1, [r4, #4]
 800151e:	4299      	cmp	r1, r3
 8001520:	bfde      	ittt	le
 8001522:	2330      	movle	r3, #48	; 0x30
 8001524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001528:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800152c:	1b92      	subs	r2, r2, r6
 800152e:	6122      	str	r2, [r4, #16]
 8001530:	f8cd a000 	str.w	sl, [sp]
 8001534:	464b      	mov	r3, r9
 8001536:	aa03      	add	r2, sp, #12
 8001538:	4621      	mov	r1, r4
 800153a:	4640      	mov	r0, r8
 800153c:	f7ff fee2 	bl	8001304 <_printf_common>
 8001540:	3001      	adds	r0, #1
 8001542:	d14c      	bne.n	80015de <_printf_i+0x1fe>
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001548:	b004      	add	sp, #16
 800154a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800154e:	4835      	ldr	r0, [pc, #212]	; (8001624 <_printf_i+0x244>)
 8001550:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	680e      	ldr	r6, [r1, #0]
 8001558:	061f      	lsls	r7, r3, #24
 800155a:	f856 5b04 	ldr.w	r5, [r6], #4
 800155e:	600e      	str	r6, [r1, #0]
 8001560:	d514      	bpl.n	800158c <_printf_i+0x1ac>
 8001562:	07d9      	lsls	r1, r3, #31
 8001564:	bf44      	itt	mi
 8001566:	f043 0320 	orrmi.w	r3, r3, #32
 800156a:	6023      	strmi	r3, [r4, #0]
 800156c:	b91d      	cbnz	r5, 8001576 <_printf_i+0x196>
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	f023 0320 	bic.w	r3, r3, #32
 8001574:	6023      	str	r3, [r4, #0]
 8001576:	2310      	movs	r3, #16
 8001578:	e7b0      	b.n	80014dc <_printf_i+0xfc>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	f043 0320 	orr.w	r3, r3, #32
 8001580:	6023      	str	r3, [r4, #0]
 8001582:	2378      	movs	r3, #120	; 0x78
 8001584:	4828      	ldr	r0, [pc, #160]	; (8001628 <_printf_i+0x248>)
 8001586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800158a:	e7e3      	b.n	8001554 <_printf_i+0x174>
 800158c:	065e      	lsls	r6, r3, #25
 800158e:	bf48      	it	mi
 8001590:	b2ad      	uxthmi	r5, r5
 8001592:	e7e6      	b.n	8001562 <_printf_i+0x182>
 8001594:	4616      	mov	r6, r2
 8001596:	e7bb      	b.n	8001510 <_printf_i+0x130>
 8001598:	680b      	ldr	r3, [r1, #0]
 800159a:	6826      	ldr	r6, [r4, #0]
 800159c:	6960      	ldr	r0, [r4, #20]
 800159e:	1d1d      	adds	r5, r3, #4
 80015a0:	600d      	str	r5, [r1, #0]
 80015a2:	0635      	lsls	r5, r6, #24
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	d501      	bpl.n	80015ac <_printf_i+0x1cc>
 80015a8:	6018      	str	r0, [r3, #0]
 80015aa:	e002      	b.n	80015b2 <_printf_i+0x1d2>
 80015ac:	0671      	lsls	r1, r6, #25
 80015ae:	d5fb      	bpl.n	80015a8 <_printf_i+0x1c8>
 80015b0:	8018      	strh	r0, [r3, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	6123      	str	r3, [r4, #16]
 80015b6:	4616      	mov	r6, r2
 80015b8:	e7ba      	b.n	8001530 <_printf_i+0x150>
 80015ba:	680b      	ldr	r3, [r1, #0]
 80015bc:	1d1a      	adds	r2, r3, #4
 80015be:	600a      	str	r2, [r1, #0]
 80015c0:	681e      	ldr	r6, [r3, #0]
 80015c2:	6862      	ldr	r2, [r4, #4]
 80015c4:	2100      	movs	r1, #0
 80015c6:	4630      	mov	r0, r6
 80015c8:	f7fe fe0a 	bl	80001e0 <memchr>
 80015cc:	b108      	cbz	r0, 80015d2 <_printf_i+0x1f2>
 80015ce:	1b80      	subs	r0, r0, r6
 80015d0:	6060      	str	r0, [r4, #4]
 80015d2:	6863      	ldr	r3, [r4, #4]
 80015d4:	6123      	str	r3, [r4, #16]
 80015d6:	2300      	movs	r3, #0
 80015d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015dc:	e7a8      	b.n	8001530 <_printf_i+0x150>
 80015de:	6923      	ldr	r3, [r4, #16]
 80015e0:	4632      	mov	r2, r6
 80015e2:	4649      	mov	r1, r9
 80015e4:	4640      	mov	r0, r8
 80015e6:	47d0      	blx	sl
 80015e8:	3001      	adds	r0, #1
 80015ea:	d0ab      	beq.n	8001544 <_printf_i+0x164>
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	079b      	lsls	r3, r3, #30
 80015f0:	d413      	bmi.n	800161a <_printf_i+0x23a>
 80015f2:	68e0      	ldr	r0, [r4, #12]
 80015f4:	9b03      	ldr	r3, [sp, #12]
 80015f6:	4298      	cmp	r0, r3
 80015f8:	bfb8      	it	lt
 80015fa:	4618      	movlt	r0, r3
 80015fc:	e7a4      	b.n	8001548 <_printf_i+0x168>
 80015fe:	2301      	movs	r3, #1
 8001600:	4632      	mov	r2, r6
 8001602:	4649      	mov	r1, r9
 8001604:	4640      	mov	r0, r8
 8001606:	47d0      	blx	sl
 8001608:	3001      	adds	r0, #1
 800160a:	d09b      	beq.n	8001544 <_printf_i+0x164>
 800160c:	3501      	adds	r5, #1
 800160e:	68e3      	ldr	r3, [r4, #12]
 8001610:	9903      	ldr	r1, [sp, #12]
 8001612:	1a5b      	subs	r3, r3, r1
 8001614:	42ab      	cmp	r3, r5
 8001616:	dcf2      	bgt.n	80015fe <_printf_i+0x21e>
 8001618:	e7eb      	b.n	80015f2 <_printf_i+0x212>
 800161a:	2500      	movs	r5, #0
 800161c:	f104 0619 	add.w	r6, r4, #25
 8001620:	e7f5      	b.n	800160e <_printf_i+0x22e>
 8001622:	bf00      	nop
 8001624:	08001d75 	.word	0x08001d75
 8001628:	08001d86 	.word	0x08001d86

0800162c <_putc_r>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	460d      	mov	r5, r1
 8001630:	4614      	mov	r4, r2
 8001632:	4606      	mov	r6, r0
 8001634:	b118      	cbz	r0, 800163e <_putc_r+0x12>
 8001636:	6983      	ldr	r3, [r0, #24]
 8001638:	b90b      	cbnz	r3, 800163e <_putc_r+0x12>
 800163a:	f7ff fc0f 	bl	8000e5c <__sinit>
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <_putc_r+0x84>)
 8001640:	429c      	cmp	r4, r3
 8001642:	d124      	bne.n	800168e <_putc_r+0x62>
 8001644:	6874      	ldr	r4, [r6, #4]
 8001646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001648:	07d8      	lsls	r0, r3, #31
 800164a:	d405      	bmi.n	8001658 <_putc_r+0x2c>
 800164c:	89a3      	ldrh	r3, [r4, #12]
 800164e:	0599      	lsls	r1, r3, #22
 8001650:	d402      	bmi.n	8001658 <_putc_r+0x2c>
 8001652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001654:	f7ff fca0 	bl	8000f98 <__retarget_lock_acquire_recursive>
 8001658:	68a3      	ldr	r3, [r4, #8]
 800165a:	3b01      	subs	r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	60a3      	str	r3, [r4, #8]
 8001660:	da05      	bge.n	800166e <_putc_r+0x42>
 8001662:	69a2      	ldr	r2, [r4, #24]
 8001664:	4293      	cmp	r3, r2
 8001666:	db1c      	blt.n	80016a2 <_putc_r+0x76>
 8001668:	b2eb      	uxtb	r3, r5
 800166a:	2b0a      	cmp	r3, #10
 800166c:	d019      	beq.n	80016a2 <_putc_r+0x76>
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	6022      	str	r2, [r4, #0]
 8001674:	701d      	strb	r5, [r3, #0]
 8001676:	b2ed      	uxtb	r5, r5
 8001678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800167a:	07da      	lsls	r2, r3, #31
 800167c:	d405      	bmi.n	800168a <_putc_r+0x5e>
 800167e:	89a3      	ldrh	r3, [r4, #12]
 8001680:	059b      	lsls	r3, r3, #22
 8001682:	d402      	bmi.n	800168a <_putc_r+0x5e>
 8001684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001686:	f7ff fc88 	bl	8000f9a <__retarget_lock_release_recursive>
 800168a:	4628      	mov	r0, r5
 800168c:	bd70      	pop	{r4, r5, r6, pc}
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <_putc_r+0x88>)
 8001690:	429c      	cmp	r4, r3
 8001692:	d101      	bne.n	8001698 <_putc_r+0x6c>
 8001694:	68b4      	ldr	r4, [r6, #8]
 8001696:	e7d6      	b.n	8001646 <_putc_r+0x1a>
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_putc_r+0x8c>)
 800169a:	429c      	cmp	r4, r3
 800169c:	bf08      	it	eq
 800169e:	68f4      	ldreq	r4, [r6, #12]
 80016a0:	e7d1      	b.n	8001646 <_putc_r+0x1a>
 80016a2:	4629      	mov	r1, r5
 80016a4:	4622      	mov	r2, r4
 80016a6:	4630      	mov	r0, r6
 80016a8:	f000 f85c 	bl	8001764 <__swbuf_r>
 80016ac:	4605      	mov	r5, r0
 80016ae:	e7e3      	b.n	8001678 <_putc_r+0x4c>
 80016b0:	08001d24 	.word	0x08001d24
 80016b4:	08001d44 	.word	0x08001d44
 80016b8:	08001d04 	.word	0x08001d04

080016bc <_sbrk_r>:
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4d06      	ldr	r5, [pc, #24]	; (80016d8 <_sbrk_r+0x1c>)
 80016c0:	2300      	movs	r3, #0
 80016c2:	4604      	mov	r4, r0
 80016c4:	4608      	mov	r0, r1
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	f7ff f8f2 	bl	80008b0 <_sbrk>
 80016cc:	1c43      	adds	r3, r0, #1
 80016ce:	d102      	bne.n	80016d6 <_sbrk_r+0x1a>
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	b103      	cbz	r3, 80016d6 <_sbrk_r+0x1a>
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	200000a0 	.word	0x200000a0

080016dc <__sread>:
 80016dc:	b510      	push	{r4, lr}
 80016de:	460c      	mov	r4, r1
 80016e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e4:	f000 fab4 	bl	8001c50 <_read_r>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	bfab      	itete	ge
 80016ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80016ee:	89a3      	ldrhlt	r3, [r4, #12]
 80016f0:	181b      	addge	r3, r3, r0
 80016f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80016f6:	bfac      	ite	ge
 80016f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80016fa:	81a3      	strhlt	r3, [r4, #12]
 80016fc:	bd10      	pop	{r4, pc}

080016fe <__swrite>:
 80016fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001702:	461f      	mov	r7, r3
 8001704:	898b      	ldrh	r3, [r1, #12]
 8001706:	05db      	lsls	r3, r3, #23
 8001708:	4605      	mov	r5, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4616      	mov	r6, r2
 800170e:	d505      	bpl.n	800171c <__swrite+0x1e>
 8001710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001714:	2302      	movs	r3, #2
 8001716:	2200      	movs	r2, #0
 8001718:	f000 f9c8 	bl	8001aac <_lseek_r>
 800171c:	89a3      	ldrh	r3, [r4, #12]
 800171e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001726:	81a3      	strh	r3, [r4, #12]
 8001728:	4632      	mov	r2, r6
 800172a:	463b      	mov	r3, r7
 800172c:	4628      	mov	r0, r5
 800172e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001732:	f000 b869 	b.w	8001808 <_write_r>

08001736 <__sseek>:
 8001736:	b510      	push	{r4, lr}
 8001738:	460c      	mov	r4, r1
 800173a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800173e:	f000 f9b5 	bl	8001aac <_lseek_r>
 8001742:	1c43      	adds	r3, r0, #1
 8001744:	89a3      	ldrh	r3, [r4, #12]
 8001746:	bf15      	itete	ne
 8001748:	6560      	strne	r0, [r4, #84]	; 0x54
 800174a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800174e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001752:	81a3      	strheq	r3, [r4, #12]
 8001754:	bf18      	it	ne
 8001756:	81a3      	strhne	r3, [r4, #12]
 8001758:	bd10      	pop	{r4, pc}

0800175a <__sclose>:
 800175a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800175e:	f000 b8d3 	b.w	8001908 <_close_r>
	...

08001764 <__swbuf_r>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	460e      	mov	r6, r1
 8001768:	4614      	mov	r4, r2
 800176a:	4605      	mov	r5, r0
 800176c:	b118      	cbz	r0, 8001776 <__swbuf_r+0x12>
 800176e:	6983      	ldr	r3, [r0, #24]
 8001770:	b90b      	cbnz	r3, 8001776 <__swbuf_r+0x12>
 8001772:	f7ff fb73 	bl	8000e5c <__sinit>
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <__swbuf_r+0x98>)
 8001778:	429c      	cmp	r4, r3
 800177a:	d12b      	bne.n	80017d4 <__swbuf_r+0x70>
 800177c:	686c      	ldr	r4, [r5, #4]
 800177e:	69a3      	ldr	r3, [r4, #24]
 8001780:	60a3      	str	r3, [r4, #8]
 8001782:	89a3      	ldrh	r3, [r4, #12]
 8001784:	071a      	lsls	r2, r3, #28
 8001786:	d52f      	bpl.n	80017e8 <__swbuf_r+0x84>
 8001788:	6923      	ldr	r3, [r4, #16]
 800178a:	b36b      	cbz	r3, 80017e8 <__swbuf_r+0x84>
 800178c:	6923      	ldr	r3, [r4, #16]
 800178e:	6820      	ldr	r0, [r4, #0]
 8001790:	1ac0      	subs	r0, r0, r3
 8001792:	6963      	ldr	r3, [r4, #20]
 8001794:	b2f6      	uxtb	r6, r6
 8001796:	4283      	cmp	r3, r0
 8001798:	4637      	mov	r7, r6
 800179a:	dc04      	bgt.n	80017a6 <__swbuf_r+0x42>
 800179c:	4621      	mov	r1, r4
 800179e:	4628      	mov	r0, r5
 80017a0:	f000 f948 	bl	8001a34 <_fflush_r>
 80017a4:	bb30      	cbnz	r0, 80017f4 <__swbuf_r+0x90>
 80017a6:	68a3      	ldr	r3, [r4, #8]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	60a3      	str	r3, [r4, #8]
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	6022      	str	r2, [r4, #0]
 80017b2:	701e      	strb	r6, [r3, #0]
 80017b4:	6963      	ldr	r3, [r4, #20]
 80017b6:	3001      	adds	r0, #1
 80017b8:	4283      	cmp	r3, r0
 80017ba:	d004      	beq.n	80017c6 <__swbuf_r+0x62>
 80017bc:	89a3      	ldrh	r3, [r4, #12]
 80017be:	07db      	lsls	r3, r3, #31
 80017c0:	d506      	bpl.n	80017d0 <__swbuf_r+0x6c>
 80017c2:	2e0a      	cmp	r6, #10
 80017c4:	d104      	bne.n	80017d0 <__swbuf_r+0x6c>
 80017c6:	4621      	mov	r1, r4
 80017c8:	4628      	mov	r0, r5
 80017ca:	f000 f933 	bl	8001a34 <_fflush_r>
 80017ce:	b988      	cbnz	r0, 80017f4 <__swbuf_r+0x90>
 80017d0:	4638      	mov	r0, r7
 80017d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <__swbuf_r+0x9c>)
 80017d6:	429c      	cmp	r4, r3
 80017d8:	d101      	bne.n	80017de <__swbuf_r+0x7a>
 80017da:	68ac      	ldr	r4, [r5, #8]
 80017dc:	e7cf      	b.n	800177e <__swbuf_r+0x1a>
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <__swbuf_r+0xa0>)
 80017e0:	429c      	cmp	r4, r3
 80017e2:	bf08      	it	eq
 80017e4:	68ec      	ldreq	r4, [r5, #12]
 80017e6:	e7ca      	b.n	800177e <__swbuf_r+0x1a>
 80017e8:	4621      	mov	r1, r4
 80017ea:	4628      	mov	r0, r5
 80017ec:	f000 f81e 	bl	800182c <__swsetup_r>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d0cb      	beq.n	800178c <__swbuf_r+0x28>
 80017f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80017f8:	e7ea      	b.n	80017d0 <__swbuf_r+0x6c>
 80017fa:	bf00      	nop
 80017fc:	08001d24 	.word	0x08001d24
 8001800:	08001d44 	.word	0x08001d44
 8001804:	08001d04 	.word	0x08001d04

08001808 <_write_r>:
 8001808:	b538      	push	{r3, r4, r5, lr}
 800180a:	4d07      	ldr	r5, [pc, #28]	; (8001828 <_write_r+0x20>)
 800180c:	4604      	mov	r4, r0
 800180e:	4608      	mov	r0, r1
 8001810:	4611      	mov	r1, r2
 8001812:	2200      	movs	r2, #0
 8001814:	602a      	str	r2, [r5, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	f7fe ff32 	bl	8000680 <_write>
 800181c:	1c43      	adds	r3, r0, #1
 800181e:	d102      	bne.n	8001826 <_write_r+0x1e>
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	b103      	cbz	r3, 8001826 <_write_r+0x1e>
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	bd38      	pop	{r3, r4, r5, pc}
 8001828:	200000a0 	.word	0x200000a0

0800182c <__swsetup_r>:
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <__swsetup_r+0xcc>)
 800182e:	b570      	push	{r4, r5, r6, lr}
 8001830:	681d      	ldr	r5, [r3, #0]
 8001832:	4606      	mov	r6, r0
 8001834:	460c      	mov	r4, r1
 8001836:	b125      	cbz	r5, 8001842 <__swsetup_r+0x16>
 8001838:	69ab      	ldr	r3, [r5, #24]
 800183a:	b913      	cbnz	r3, 8001842 <__swsetup_r+0x16>
 800183c:	4628      	mov	r0, r5
 800183e:	f7ff fb0d 	bl	8000e5c <__sinit>
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <__swsetup_r+0xd0>)
 8001844:	429c      	cmp	r4, r3
 8001846:	d10f      	bne.n	8001868 <__swsetup_r+0x3c>
 8001848:	686c      	ldr	r4, [r5, #4]
 800184a:	89a3      	ldrh	r3, [r4, #12]
 800184c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001850:	0719      	lsls	r1, r3, #28
 8001852:	d42c      	bmi.n	80018ae <__swsetup_r+0x82>
 8001854:	06dd      	lsls	r5, r3, #27
 8001856:	d411      	bmi.n	800187c <__swsetup_r+0x50>
 8001858:	2309      	movs	r3, #9
 800185a:	6033      	str	r3, [r6, #0]
 800185c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001860:	81a3      	strh	r3, [r4, #12]
 8001862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001866:	e03e      	b.n	80018e6 <__swsetup_r+0xba>
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <__swsetup_r+0xd4>)
 800186a:	429c      	cmp	r4, r3
 800186c:	d101      	bne.n	8001872 <__swsetup_r+0x46>
 800186e:	68ac      	ldr	r4, [r5, #8]
 8001870:	e7eb      	b.n	800184a <__swsetup_r+0x1e>
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <__swsetup_r+0xd8>)
 8001874:	429c      	cmp	r4, r3
 8001876:	bf08      	it	eq
 8001878:	68ec      	ldreq	r4, [r5, #12]
 800187a:	e7e6      	b.n	800184a <__swsetup_r+0x1e>
 800187c:	0758      	lsls	r0, r3, #29
 800187e:	d512      	bpl.n	80018a6 <__swsetup_r+0x7a>
 8001880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001882:	b141      	cbz	r1, 8001896 <__swsetup_r+0x6a>
 8001884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001888:	4299      	cmp	r1, r3
 800188a:	d002      	beq.n	8001892 <__swsetup_r+0x66>
 800188c:	4630      	mov	r0, r6
 800188e:	f000 f98f 	bl	8001bb0 <_free_r>
 8001892:	2300      	movs	r3, #0
 8001894:	6363      	str	r3, [r4, #52]	; 0x34
 8001896:	89a3      	ldrh	r3, [r4, #12]
 8001898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800189c:	81a3      	strh	r3, [r4, #12]
 800189e:	2300      	movs	r3, #0
 80018a0:	6063      	str	r3, [r4, #4]
 80018a2:	6923      	ldr	r3, [r4, #16]
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	89a3      	ldrh	r3, [r4, #12]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	81a3      	strh	r3, [r4, #12]
 80018ae:	6923      	ldr	r3, [r4, #16]
 80018b0:	b94b      	cbnz	r3, 80018c6 <__swsetup_r+0x9a>
 80018b2:	89a3      	ldrh	r3, [r4, #12]
 80018b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80018b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018bc:	d003      	beq.n	80018c6 <__swsetup_r+0x9a>
 80018be:	4621      	mov	r1, r4
 80018c0:	4630      	mov	r0, r6
 80018c2:	f000 f929 	bl	8001b18 <__smakebuf_r>
 80018c6:	89a0      	ldrh	r0, [r4, #12]
 80018c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018cc:	f010 0301 	ands.w	r3, r0, #1
 80018d0:	d00a      	beq.n	80018e8 <__swsetup_r+0xbc>
 80018d2:	2300      	movs	r3, #0
 80018d4:	60a3      	str	r3, [r4, #8]
 80018d6:	6963      	ldr	r3, [r4, #20]
 80018d8:	425b      	negs	r3, r3
 80018da:	61a3      	str	r3, [r4, #24]
 80018dc:	6923      	ldr	r3, [r4, #16]
 80018de:	b943      	cbnz	r3, 80018f2 <__swsetup_r+0xc6>
 80018e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018e4:	d1ba      	bne.n	800185c <__swsetup_r+0x30>
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
 80018e8:	0781      	lsls	r1, r0, #30
 80018ea:	bf58      	it	pl
 80018ec:	6963      	ldrpl	r3, [r4, #20]
 80018ee:	60a3      	str	r3, [r4, #8]
 80018f0:	e7f4      	b.n	80018dc <__swsetup_r+0xb0>
 80018f2:	2000      	movs	r0, #0
 80018f4:	e7f7      	b.n	80018e6 <__swsetup_r+0xba>
 80018f6:	bf00      	nop
 80018f8:	20000004 	.word	0x20000004
 80018fc:	08001d24 	.word	0x08001d24
 8001900:	08001d44 	.word	0x08001d44
 8001904:	08001d04 	.word	0x08001d04

08001908 <_close_r>:
 8001908:	b538      	push	{r3, r4, r5, lr}
 800190a:	4d06      	ldr	r5, [pc, #24]	; (8001924 <_close_r+0x1c>)
 800190c:	2300      	movs	r3, #0
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	602b      	str	r3, [r5, #0]
 8001914:	f7fe ffc0 	bl	8000898 <_close>
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	d102      	bne.n	8001922 <_close_r+0x1a>
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	b103      	cbz	r3, 8001922 <_close_r+0x1a>
 8001920:	6023      	str	r3, [r4, #0]
 8001922:	bd38      	pop	{r3, r4, r5, pc}
 8001924:	200000a0 	.word	0x200000a0

08001928 <__sflush_r>:
 8001928:	898a      	ldrh	r2, [r1, #12]
 800192a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800192e:	4605      	mov	r5, r0
 8001930:	0710      	lsls	r0, r2, #28
 8001932:	460c      	mov	r4, r1
 8001934:	d458      	bmi.n	80019e8 <__sflush_r+0xc0>
 8001936:	684b      	ldr	r3, [r1, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	dc05      	bgt.n	8001948 <__sflush_r+0x20>
 800193c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	dc02      	bgt.n	8001948 <__sflush_r+0x20>
 8001942:	2000      	movs	r0, #0
 8001944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800194a:	2e00      	cmp	r6, #0
 800194c:	d0f9      	beq.n	8001942 <__sflush_r+0x1a>
 800194e:	2300      	movs	r3, #0
 8001950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001954:	682f      	ldr	r7, [r5, #0]
 8001956:	602b      	str	r3, [r5, #0]
 8001958:	d032      	beq.n	80019c0 <__sflush_r+0x98>
 800195a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800195c:	89a3      	ldrh	r3, [r4, #12]
 800195e:	075a      	lsls	r2, r3, #29
 8001960:	d505      	bpl.n	800196e <__sflush_r+0x46>
 8001962:	6863      	ldr	r3, [r4, #4]
 8001964:	1ac0      	subs	r0, r0, r3
 8001966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001968:	b10b      	cbz	r3, 800196e <__sflush_r+0x46>
 800196a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800196c:	1ac0      	subs	r0, r0, r3
 800196e:	2300      	movs	r3, #0
 8001970:	4602      	mov	r2, r0
 8001972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001974:	6a21      	ldr	r1, [r4, #32]
 8001976:	4628      	mov	r0, r5
 8001978:	47b0      	blx	r6
 800197a:	1c43      	adds	r3, r0, #1
 800197c:	89a3      	ldrh	r3, [r4, #12]
 800197e:	d106      	bne.n	800198e <__sflush_r+0x66>
 8001980:	6829      	ldr	r1, [r5, #0]
 8001982:	291d      	cmp	r1, #29
 8001984:	d82c      	bhi.n	80019e0 <__sflush_r+0xb8>
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <__sflush_r+0x108>)
 8001988:	40ca      	lsrs	r2, r1
 800198a:	07d6      	lsls	r6, r2, #31
 800198c:	d528      	bpl.n	80019e0 <__sflush_r+0xb8>
 800198e:	2200      	movs	r2, #0
 8001990:	6062      	str	r2, [r4, #4]
 8001992:	04d9      	lsls	r1, r3, #19
 8001994:	6922      	ldr	r2, [r4, #16]
 8001996:	6022      	str	r2, [r4, #0]
 8001998:	d504      	bpl.n	80019a4 <__sflush_r+0x7c>
 800199a:	1c42      	adds	r2, r0, #1
 800199c:	d101      	bne.n	80019a2 <__sflush_r+0x7a>
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	b903      	cbnz	r3, 80019a4 <__sflush_r+0x7c>
 80019a2:	6560      	str	r0, [r4, #84]	; 0x54
 80019a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019a6:	602f      	str	r7, [r5, #0]
 80019a8:	2900      	cmp	r1, #0
 80019aa:	d0ca      	beq.n	8001942 <__sflush_r+0x1a>
 80019ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019b0:	4299      	cmp	r1, r3
 80019b2:	d002      	beq.n	80019ba <__sflush_r+0x92>
 80019b4:	4628      	mov	r0, r5
 80019b6:	f000 f8fb 	bl	8001bb0 <_free_r>
 80019ba:	2000      	movs	r0, #0
 80019bc:	6360      	str	r0, [r4, #52]	; 0x34
 80019be:	e7c1      	b.n	8001944 <__sflush_r+0x1c>
 80019c0:	6a21      	ldr	r1, [r4, #32]
 80019c2:	2301      	movs	r3, #1
 80019c4:	4628      	mov	r0, r5
 80019c6:	47b0      	blx	r6
 80019c8:	1c41      	adds	r1, r0, #1
 80019ca:	d1c7      	bne.n	800195c <__sflush_r+0x34>
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0c4      	beq.n	800195c <__sflush_r+0x34>
 80019d2:	2b1d      	cmp	r3, #29
 80019d4:	d001      	beq.n	80019da <__sflush_r+0xb2>
 80019d6:	2b16      	cmp	r3, #22
 80019d8:	d101      	bne.n	80019de <__sflush_r+0xb6>
 80019da:	602f      	str	r7, [r5, #0]
 80019dc:	e7b1      	b.n	8001942 <__sflush_r+0x1a>
 80019de:	89a3      	ldrh	r3, [r4, #12]
 80019e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e4:	81a3      	strh	r3, [r4, #12]
 80019e6:	e7ad      	b.n	8001944 <__sflush_r+0x1c>
 80019e8:	690f      	ldr	r7, [r1, #16]
 80019ea:	2f00      	cmp	r7, #0
 80019ec:	d0a9      	beq.n	8001942 <__sflush_r+0x1a>
 80019ee:	0793      	lsls	r3, r2, #30
 80019f0:	680e      	ldr	r6, [r1, #0]
 80019f2:	bf08      	it	eq
 80019f4:	694b      	ldreq	r3, [r1, #20]
 80019f6:	600f      	str	r7, [r1, #0]
 80019f8:	bf18      	it	ne
 80019fa:	2300      	movne	r3, #0
 80019fc:	eba6 0807 	sub.w	r8, r6, r7
 8001a00:	608b      	str	r3, [r1, #8]
 8001a02:	f1b8 0f00 	cmp.w	r8, #0
 8001a06:	dd9c      	ble.n	8001942 <__sflush_r+0x1a>
 8001a08:	6a21      	ldr	r1, [r4, #32]
 8001a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	463a      	mov	r2, r7
 8001a10:	4628      	mov	r0, r5
 8001a12:	47b0      	blx	r6
 8001a14:	2800      	cmp	r0, #0
 8001a16:	dc06      	bgt.n	8001a26 <__sflush_r+0xfe>
 8001a18:	89a3      	ldrh	r3, [r4, #12]
 8001a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1e:	81a3      	strh	r3, [r4, #12]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a24:	e78e      	b.n	8001944 <__sflush_r+0x1c>
 8001a26:	4407      	add	r7, r0
 8001a28:	eba8 0800 	sub.w	r8, r8, r0
 8001a2c:	e7e9      	b.n	8001a02 <__sflush_r+0xda>
 8001a2e:	bf00      	nop
 8001a30:	20400001 	.word	0x20400001

08001a34 <_fflush_r>:
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	690b      	ldr	r3, [r1, #16]
 8001a38:	4605      	mov	r5, r0
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	b913      	cbnz	r3, 8001a44 <_fflush_r+0x10>
 8001a3e:	2500      	movs	r5, #0
 8001a40:	4628      	mov	r0, r5
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
 8001a44:	b118      	cbz	r0, 8001a4e <_fflush_r+0x1a>
 8001a46:	6983      	ldr	r3, [r0, #24]
 8001a48:	b90b      	cbnz	r3, 8001a4e <_fflush_r+0x1a>
 8001a4a:	f7ff fa07 	bl	8000e5c <__sinit>
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <_fflush_r+0x6c>)
 8001a50:	429c      	cmp	r4, r3
 8001a52:	d11b      	bne.n	8001a8c <_fflush_r+0x58>
 8001a54:	686c      	ldr	r4, [r5, #4]
 8001a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0ef      	beq.n	8001a3e <_fflush_r+0xa>
 8001a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a60:	07d0      	lsls	r0, r2, #31
 8001a62:	d404      	bmi.n	8001a6e <_fflush_r+0x3a>
 8001a64:	0599      	lsls	r1, r3, #22
 8001a66:	d402      	bmi.n	8001a6e <_fflush_r+0x3a>
 8001a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a6a:	f7ff fa95 	bl	8000f98 <__retarget_lock_acquire_recursive>
 8001a6e:	4628      	mov	r0, r5
 8001a70:	4621      	mov	r1, r4
 8001a72:	f7ff ff59 	bl	8001928 <__sflush_r>
 8001a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a78:	07da      	lsls	r2, r3, #31
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	d4e0      	bmi.n	8001a40 <_fflush_r+0xc>
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	059b      	lsls	r3, r3, #22
 8001a82:	d4dd      	bmi.n	8001a40 <_fflush_r+0xc>
 8001a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a86:	f7ff fa88 	bl	8000f9a <__retarget_lock_release_recursive>
 8001a8a:	e7d9      	b.n	8001a40 <_fflush_r+0xc>
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <_fflush_r+0x70>)
 8001a8e:	429c      	cmp	r4, r3
 8001a90:	d101      	bne.n	8001a96 <_fflush_r+0x62>
 8001a92:	68ac      	ldr	r4, [r5, #8]
 8001a94:	e7df      	b.n	8001a56 <_fflush_r+0x22>
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <_fflush_r+0x74>)
 8001a98:	429c      	cmp	r4, r3
 8001a9a:	bf08      	it	eq
 8001a9c:	68ec      	ldreq	r4, [r5, #12]
 8001a9e:	e7da      	b.n	8001a56 <_fflush_r+0x22>
 8001aa0:	08001d24 	.word	0x08001d24
 8001aa4:	08001d44 	.word	0x08001d44
 8001aa8:	08001d04 	.word	0x08001d04

08001aac <_lseek_r>:
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	4d07      	ldr	r5, [pc, #28]	; (8001acc <_lseek_r+0x20>)
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	4608      	mov	r0, r1
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	602a      	str	r2, [r5, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f7fe fef6 	bl	80008ac <_lseek>
 8001ac0:	1c43      	adds	r3, r0, #1
 8001ac2:	d102      	bne.n	8001aca <_lseek_r+0x1e>
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	b103      	cbz	r3, 8001aca <_lseek_r+0x1e>
 8001ac8:	6023      	str	r3, [r4, #0]
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
 8001acc:	200000a0 	.word	0x200000a0

08001ad0 <__swhatbuf_r>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	460e      	mov	r6, r1
 8001ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad8:	2900      	cmp	r1, #0
 8001ada:	b096      	sub	sp, #88	; 0x58
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	da07      	bge.n	8001af2 <__swhatbuf_r+0x22>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	602b      	str	r3, [r5, #0]
 8001ae6:	89b3      	ldrh	r3, [r6, #12]
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	d410      	bmi.n	8001b0e <__swhatbuf_r+0x3e>
 8001aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af0:	e00e      	b.n	8001b10 <__swhatbuf_r+0x40>
 8001af2:	466a      	mov	r2, sp
 8001af4:	f000 f8be 	bl	8001c74 <_fstat_r>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	dbf2      	blt.n	8001ae2 <__swhatbuf_r+0x12>
 8001afc:	9a01      	ldr	r2, [sp, #4]
 8001afe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b06:	425a      	negs	r2, r3
 8001b08:	415a      	adcs	r2, r3
 8001b0a:	602a      	str	r2, [r5, #0]
 8001b0c:	e7ee      	b.n	8001aec <__swhatbuf_r+0x1c>
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	2000      	movs	r0, #0
 8001b12:	6023      	str	r3, [r4, #0]
 8001b14:	b016      	add	sp, #88	; 0x58
 8001b16:	bd70      	pop	{r4, r5, r6, pc}

08001b18 <__smakebuf_r>:
 8001b18:	898b      	ldrh	r3, [r1, #12]
 8001b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b1c:	079d      	lsls	r5, r3, #30
 8001b1e:	4606      	mov	r6, r0
 8001b20:	460c      	mov	r4, r1
 8001b22:	d507      	bpl.n	8001b34 <__smakebuf_r+0x1c>
 8001b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	6123      	str	r3, [r4, #16]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	6163      	str	r3, [r4, #20]
 8001b30:	b002      	add	sp, #8
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
 8001b34:	ab01      	add	r3, sp, #4
 8001b36:	466a      	mov	r2, sp
 8001b38:	f7ff ffca 	bl	8001ad0 <__swhatbuf_r>
 8001b3c:	9900      	ldr	r1, [sp, #0]
 8001b3e:	4605      	mov	r5, r0
 8001b40:	4630      	mov	r0, r6
 8001b42:	f7ff fa2b 	bl	8000f9c <_malloc_r>
 8001b46:	b948      	cbnz	r0, 8001b5c <__smakebuf_r+0x44>
 8001b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b4c:	059a      	lsls	r2, r3, #22
 8001b4e:	d4ef      	bmi.n	8001b30 <__smakebuf_r+0x18>
 8001b50:	f023 0303 	bic.w	r3, r3, #3
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	81a3      	strh	r3, [r4, #12]
 8001b5a:	e7e3      	b.n	8001b24 <__smakebuf_r+0xc>
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <__smakebuf_r+0x7c>)
 8001b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	6020      	str	r0, [r4, #0]
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	81a3      	strh	r3, [r4, #12]
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	6163      	str	r3, [r4, #20]
 8001b6e:	9b01      	ldr	r3, [sp, #4]
 8001b70:	6120      	str	r0, [r4, #16]
 8001b72:	b15b      	cbz	r3, 8001b8c <__smakebuf_r+0x74>
 8001b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f000 f88d 	bl	8001c98 <_isatty_r>
 8001b7e:	b128      	cbz	r0, 8001b8c <__smakebuf_r+0x74>
 8001b80:	89a3      	ldrh	r3, [r4, #12]
 8001b82:	f023 0303 	bic.w	r3, r3, #3
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	81a3      	strh	r3, [r4, #12]
 8001b8c:	89a0      	ldrh	r0, [r4, #12]
 8001b8e:	4305      	orrs	r5, r0
 8001b90:	81a5      	strh	r5, [r4, #12]
 8001b92:	e7cd      	b.n	8001b30 <__smakebuf_r+0x18>
 8001b94:	08000df5 	.word	0x08000df5

08001b98 <__malloc_lock>:
 8001b98:	4801      	ldr	r0, [pc, #4]	; (8001ba0 <__malloc_lock+0x8>)
 8001b9a:	f7ff b9fd 	b.w	8000f98 <__retarget_lock_acquire_recursive>
 8001b9e:	bf00      	nop
 8001ba0:	20000098 	.word	0x20000098

08001ba4 <__malloc_unlock>:
 8001ba4:	4801      	ldr	r0, [pc, #4]	; (8001bac <__malloc_unlock+0x8>)
 8001ba6:	f7ff b9f8 	b.w	8000f9a <__retarget_lock_release_recursive>
 8001baa:	bf00      	nop
 8001bac:	20000098 	.word	0x20000098

08001bb0 <_free_r>:
 8001bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d048      	beq.n	8001c48 <_free_r+0x98>
 8001bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bba:	9001      	str	r0, [sp, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8001bc2:	bfb8      	it	lt
 8001bc4:	18e4      	addlt	r4, r4, r3
 8001bc6:	f7ff ffe7 	bl	8001b98 <__malloc_lock>
 8001bca:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <_free_r+0x9c>)
 8001bcc:	9801      	ldr	r0, [sp, #4]
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	4615      	mov	r5, r2
 8001bd2:	b933      	cbnz	r3, 8001be2 <_free_r+0x32>
 8001bd4:	6063      	str	r3, [r4, #4]
 8001bd6:	6014      	str	r4, [r2, #0]
 8001bd8:	b003      	add	sp, #12
 8001bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001bde:	f7ff bfe1 	b.w	8001ba4 <__malloc_unlock>
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	d90b      	bls.n	8001bfe <_free_r+0x4e>
 8001be6:	6821      	ldr	r1, [r4, #0]
 8001be8:	1862      	adds	r2, r4, r1
 8001bea:	4293      	cmp	r3, r2
 8001bec:	bf04      	itt	eq
 8001bee:	681a      	ldreq	r2, [r3, #0]
 8001bf0:	685b      	ldreq	r3, [r3, #4]
 8001bf2:	6063      	str	r3, [r4, #4]
 8001bf4:	bf04      	itt	eq
 8001bf6:	1852      	addeq	r2, r2, r1
 8001bf8:	6022      	streq	r2, [r4, #0]
 8001bfa:	602c      	str	r4, [r5, #0]
 8001bfc:	e7ec      	b.n	8001bd8 <_free_r+0x28>
 8001bfe:	461a      	mov	r2, r3
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	b10b      	cbz	r3, 8001c08 <_free_r+0x58>
 8001c04:	42a3      	cmp	r3, r4
 8001c06:	d9fa      	bls.n	8001bfe <_free_r+0x4e>
 8001c08:	6811      	ldr	r1, [r2, #0]
 8001c0a:	1855      	adds	r5, r2, r1
 8001c0c:	42a5      	cmp	r5, r4
 8001c0e:	d10b      	bne.n	8001c28 <_free_r+0x78>
 8001c10:	6824      	ldr	r4, [r4, #0]
 8001c12:	4421      	add	r1, r4
 8001c14:	1854      	adds	r4, r2, r1
 8001c16:	42a3      	cmp	r3, r4
 8001c18:	6011      	str	r1, [r2, #0]
 8001c1a:	d1dd      	bne.n	8001bd8 <_free_r+0x28>
 8001c1c:	681c      	ldr	r4, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	6053      	str	r3, [r2, #4]
 8001c22:	4421      	add	r1, r4
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	e7d7      	b.n	8001bd8 <_free_r+0x28>
 8001c28:	d902      	bls.n	8001c30 <_free_r+0x80>
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	6003      	str	r3, [r0, #0]
 8001c2e:	e7d3      	b.n	8001bd8 <_free_r+0x28>
 8001c30:	6825      	ldr	r5, [r4, #0]
 8001c32:	1961      	adds	r1, r4, r5
 8001c34:	428b      	cmp	r3, r1
 8001c36:	bf04      	itt	eq
 8001c38:	6819      	ldreq	r1, [r3, #0]
 8001c3a:	685b      	ldreq	r3, [r3, #4]
 8001c3c:	6063      	str	r3, [r4, #4]
 8001c3e:	bf04      	itt	eq
 8001c40:	1949      	addeq	r1, r1, r5
 8001c42:	6021      	streq	r1, [r4, #0]
 8001c44:	6054      	str	r4, [r2, #4]
 8001c46:	e7c7      	b.n	8001bd8 <_free_r+0x28>
 8001c48:	b003      	add	sp, #12
 8001c4a:	bd30      	pop	{r4, r5, pc}
 8001c4c:	2000008c 	.word	0x2000008c

08001c50 <_read_r>:
 8001c50:	b538      	push	{r3, r4, r5, lr}
 8001c52:	4d07      	ldr	r5, [pc, #28]	; (8001c70 <_read_r+0x20>)
 8001c54:	4604      	mov	r4, r0
 8001c56:	4608      	mov	r0, r1
 8001c58:	4611      	mov	r1, r2
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	602a      	str	r2, [r5, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f7fe fe0a 	bl	8000878 <_read>
 8001c64:	1c43      	adds	r3, r0, #1
 8001c66:	d102      	bne.n	8001c6e <_read_r+0x1e>
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	b103      	cbz	r3, 8001c6e <_read_r+0x1e>
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}
 8001c70:	200000a0 	.word	0x200000a0

08001c74 <_fstat_r>:
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	4d07      	ldr	r5, [pc, #28]	; (8001c94 <_fstat_r+0x20>)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	602b      	str	r3, [r5, #0]
 8001c82:	f7fe fe0c 	bl	800089e <_fstat>
 8001c86:	1c43      	adds	r3, r0, #1
 8001c88:	d102      	bne.n	8001c90 <_fstat_r+0x1c>
 8001c8a:	682b      	ldr	r3, [r5, #0]
 8001c8c:	b103      	cbz	r3, 8001c90 <_fstat_r+0x1c>
 8001c8e:	6023      	str	r3, [r4, #0]
 8001c90:	bd38      	pop	{r3, r4, r5, pc}
 8001c92:	bf00      	nop
 8001c94:	200000a0 	.word	0x200000a0

08001c98 <_isatty_r>:
 8001c98:	b538      	push	{r3, r4, r5, lr}
 8001c9a:	4d06      	ldr	r5, [pc, #24]	; (8001cb4 <_isatty_r+0x1c>)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	602b      	str	r3, [r5, #0]
 8001ca4:	f7fe fe00 	bl	80008a8 <_isatty>
 8001ca8:	1c43      	adds	r3, r0, #1
 8001caa:	d102      	bne.n	8001cb2 <_isatty_r+0x1a>
 8001cac:	682b      	ldr	r3, [r5, #0]
 8001cae:	b103      	cbz	r3, 8001cb2 <_isatty_r+0x1a>
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	bd38      	pop	{r3, r4, r5, pc}
 8001cb4:	200000a0 	.word	0x200000a0

08001cb8 <_init>:
 8001cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cba:	bf00      	nop
 8001cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cbe:	bc08      	pop	{r3}
 8001cc0:	469e      	mov	lr, r3
 8001cc2:	4770      	bx	lr

08001cc4 <_fini>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	bf00      	nop
 8001cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cca:	bc08      	pop	{r3}
 8001ccc:	469e      	mov	lr, r3
 8001cce:	4770      	bx	lr
