
ll_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e44  08001e44  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08001e44  08001e44  00011e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e4c  08001e4c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e4c  08001e4c  00011e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e50  08001e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08001ebc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001ebc  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000522e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001247  00000000  00000000  000252c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000020ba  00000000  00000000  0002650d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000310  00000000  00000000  000285c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000398  00000000  00000000  000288d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011e64  00000000  00000000  00028c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004b36  00000000  00000000  0003aad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00062f0d  00000000  00000000  0003f60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000a2517  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f08  00000000  00000000  000a2568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d64 	.word	0x08001d64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001d64 	.word	0x08001d64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b500      	push	{lr}
 8000586:	b08b      	sub	sp, #44	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	2300      	movs	r3, #0
 800058a:	9304      	str	r3, [sp, #16]
 800058c:	9305      	str	r3, [sp, #20]
 800058e:	9306      	str	r3, [sp, #24]
 8000590:	9307      	str	r3, [sp, #28]
 8000592:	9308      	str	r3, [sp, #32]
 8000594:	9309      	str	r3, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_GPIO_Init+0x68>)
 8000598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059a:	f042 0204 	orr.w	r2, r2, #4
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a2:	f002 0204 	and.w	r2, r2, #4
 80005a6:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80005a8:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005b8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80005ba:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0201 	orr.w	r2, r2, #1
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80005cc:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <MX_GPIO_Init+0x6c>)
 80005d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d4:	6183      	str	r3, [r0, #24]

  /**/
  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80005d6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005d8:	2301      	movs	r3, #1
 80005da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80005dc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005de:	a904      	add	r1, sp, #16
 80005e0:	f000 f9cb 	bl	800097a <LL_GPIO_Init>

}
 80005e4:	b00b      	add	sp, #44	; 0x2c
 80005e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020800 	.word	0x40020800

080005f4 <MX_USART1_UART_Init>:
{
 80005f4:	b510      	push	{r4, lr}
 80005f6:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005f8:	2400      	movs	r4, #0
 80005fa:	9409      	str	r4, [sp, #36]	; 0x24
 80005fc:	940a      	str	r4, [sp, #40]	; 0x28
 80005fe:	940b      	str	r4, [sp, #44]	; 0x2c
 8000600:	940c      	str	r4, [sp, #48]	; 0x30
 8000602:	940d      	str	r4, [sp, #52]	; 0x34
 8000604:	940e      	str	r4, [sp, #56]	; 0x38
 8000606:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	9403      	str	r4, [sp, #12]
 800060a:	9404      	str	r4, [sp, #16]
 800060c:	9405      	str	r4, [sp, #20]
 800060e:	9406      	str	r4, [sp, #24]
 8000610:	9407      	str	r4, [sp, #28]
 8000612:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_USART1_UART_Init+0xa0>)
 8000616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000618:	f042 0210 	orr.w	r2, r2, #16
 800061c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800061e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000620:	f002 0210 	and.w	r2, r2, #16
 8000624:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000626:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062a:	f042 0201 	orr.w	r2, r2, #1
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000638:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800063a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800063e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000640:	2302      	movs	r3, #2
 8000642:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000648:	2307      	movs	r3, #7
 800064a:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	a903      	add	r1, sp, #12
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_USART1_UART_Init+0xa4>)
 8000650:	f000 f993 	bl	800097a <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 8000654:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000658:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800065a:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800065c:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800065e:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000660:	230c      	movs	r3, #12
 8000662:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000664:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000666:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000668:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800066c:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
 8000670:	a909      	add	r1, sp, #36	; 0x24
 8000672:	4620      	mov	r0, r4
 8000674:	f000 fa9c 	bl	8000bb0 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000678:	6923      	ldr	r3, [r4, #16]
 800067a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800067e:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000680:	6963      	ldr	r3, [r4, #20]
 8000682:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000686:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000688:	68e3      	ldr	r3, [r4, #12]
 800068a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800068e:	60e3      	str	r3, [r4, #12]
}
 8000690:	b010      	add	sp, #64	; 0x40
 8000692:	bd10      	pop	{r4, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000

0800069c <_write>:
int _write(int fd, char *ptr, int len) {
 800069c:	4610      	mov	r0, r2
	while (len--) {
 800069e:	e008      	b.n	80006b2 <_write+0x16>
		LL_USART_TransmitData8(USART1, (uint8_t)*ptr++);
 80006a0:	f811 2b01 	ldrb.w	r2, [r1], #1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <_write+0x20>)
 80006a6:	605a      	str	r2, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <_write+0x20>)
 80006aa:	681b      	ldr	r3, [r3, #0]
		while (!LL_USART_IsActiveFlag_TXE(USART1)) {}
 80006ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80006b0:	d0fa      	beq.n	80006a8 <_write+0xc>
	while (len--) {
 80006b2:	4603      	mov	r3, r0
 80006b4:	3801      	subs	r0, #1
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f2      	bne.n	80006a0 <_write+0x4>
}
 80006ba:	4770      	bx	lr
 80006bc:	40011000 	.word	0x40011000

080006c0 <SystemClock_Config>:
{
 80006c0:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006c2:	4a2d      	ldr	r2, [pc, #180]	; (8000778 <SystemClock_Config+0xb8>)
 80006c4:	6813      	ldr	r3, [r2, #0]
 80006c6:	f023 0307 	bic.w	r3, r3, #7
 80006ca:	f043 0303 	orr.w	r3, r3, #3
 80006ce:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <SystemClock_Config+0xb8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d1f9      	bne.n	80006d0 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <SystemClock_Config+0xbc>)
 80006de:	6813      	ldr	r3, [r2, #0]
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006e6:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80006ea:	6813      	ldr	r3, [r2, #0]
 80006ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f0:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemClock_Config+0xc0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 80006f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80006fa:	d0fa      	beq.n	80006f2 <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemClock_Config+0xc0>)
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	4920      	ldr	r1, [pc, #128]	; (8000784 <SystemClock_Config+0xc4>)
 8000702:	4011      	ands	r1, r2
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemClock_Config+0xc8>)
 8000706:	430a      	orrs	r2, r1
 8000708:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000710:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000718:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <SystemClock_Config+0xc0>)
 800071c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 800071e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000722:	d0fa      	beq.n	800071a <SystemClock_Config+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <SystemClock_Config+0xc0>)
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800072c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000738:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000740:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	f022 0203 	bic.w	r2, r2, #3
 8000748:	f042 0202 	orr.w	r2, r2, #2
 800074c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <SystemClock_Config+0xc0>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000756:	2b08      	cmp	r3, #8
 8000758:	d1f9      	bne.n	800074e <SystemClock_Config+0x8e>
  LL_Init1msTick(96000000);
 800075a:	4c0c      	ldr	r4, [pc, #48]	; (800078c <SystemClock_Config+0xcc>)
 800075c:	4620      	mov	r0, r4
 800075e:	f000 facd 	bl	8000cfc <LL_Init1msTick>
  LL_SetSystemCoreClock(96000000);
 8000762:	4620      	mov	r0, r4
 8000764:	f000 fada 	bl	8000d1c <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000768:	4a05      	ldr	r2, [pc, #20]	; (8000780 <SystemClock_Config+0xc0>)
 800076a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800076e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000772:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000776:	bd10      	pop	{r4, pc}
 8000778:	40023c00 	.word	0x40023c00
 800077c:	40007000 	.word	0x40007000
 8000780:	40023800 	.word	0x40023800
 8000784:	ffbf8000 	.word	0xffbf8000
 8000788:	00403019 	.word	0x00403019
 800078c:	05b8d800 	.word	0x05b8d800

08000790 <main>:
{
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <main+0xc0>)
 8000796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800079c:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800079e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007a0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007a4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80007a6:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80007a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007ae:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80007b8:	9b00      	ldr	r3, [sp, #0]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <main+0xc4>)
 80007bc:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80007c2:	0409      	lsls	r1, r1, #16
 80007c4:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <main+0xc8>)
 80007c8:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80007ca:	60da      	str	r2, [r3, #12]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	68da      	ldr	r2, [r3, #12]
 80007ce:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d2:	f1c2 0307 	rsb	r3, r2, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	4619      	mov	r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	1d13      	adds	r3, r2, #4
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d932      	bls.n	800084a <main+0xba>
 80007e4:	3a03      	subs	r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ea:	408b      	lsls	r3, r1
 80007ec:	43db      	mvns	r3, r3
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	4093      	lsls	r3, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <main+0xc4>)
 80007fa:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  SystemClock_Config();
 80007fe:	f7ff ff5f 	bl	80006c0 <SystemClock_Config>
  MX_GPIO_Init();
 8000802:	f7ff febf 	bl	8000584 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000806:	f7ff fef5 	bl	80005f4 <MX_USART1_UART_Init>
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800080a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800080e:	6913      	ldr	r3, [r2, #16]
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6113      	str	r3, [r2, #16]
	DBG("Starting");
 8000816:	4811      	ldr	r0, [pc, #68]	; (800085c <main+0xcc>)
 8000818:	f000 fab8 	bl	8000d8c <iprintf>
 800081c:	200a      	movs	r0, #10
 800081e:	f000 facd 	bl	8000dbc <putchar>
	uint32_t now = 0, then = 0;
 8000822:	2400      	movs	r4, #0
 8000824:	4625      	mov	r5, r4
		now = get_systick_counter();
 8000826:	f000 f82f 	bl	8000888 <get_systick_counter>
 800082a:	4604      	mov	r4, r0
		if (now - then >= 1000) {
 800082c:	1b43      	subs	r3, r0, r5
 800082e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000832:	d3f8      	bcc.n	8000826 <main+0x96>
			DBG("Tick %lu", now / 1000);
 8000834:	490a      	ldr	r1, [pc, #40]	; (8000860 <main+0xd0>)
 8000836:	fba1 3100 	umull	r3, r1, r1, r0
 800083a:	0989      	lsrs	r1, r1, #6
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <main+0xd4>)
 800083e:	f000 faa5 	bl	8000d8c <iprintf>
 8000842:	200a      	movs	r0, #10
 8000844:	f000 faba 	bl	8000dbc <putchar>
			then = now;
 8000848:	e7ec      	b.n	8000824 <main+0x94>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	2200      	movs	r2, #0
 800084c:	e7cb      	b.n	80007e6 <main+0x56>
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	e000ed00 	.word	0xe000ed00
 8000858:	05fa0300 	.word	0x05fa0300
 800085c:	08001d7c 	.word	0x08001d7c
 8000860:	10624dd3 	.word	0x10624dd3
 8000864:	08001d88 	.word	0x08001d88

08000868 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler>

0800086a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler>

0800086c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <MemManage_Handler>

0800086e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler>

08000870 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler>

08000872 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
  systick_counter++;
 8000878:	4a02      	ldr	r2, [pc, #8]	; (8000884 <SysTick_Handler+0xc>)
 800087a:	6813      	ldr	r3, [r2, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000084 	.word	0x20000084

08000888 <get_systick_counter>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
uint32_t get_systick_counter() {
	return systick_counter;
}
 8000888:	4b01      	ldr	r3, [pc, #4]	; (8000890 <get_systick_counter+0x8>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000084 	.word	0x20000084

08000894 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	460c      	mov	r4, r1
 8000898:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	2500      	movs	r5, #0
 800089c:	e006      	b.n	80008ac <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800089e:	f3af 8000 	nop.w
 80008a2:	4621      	mov	r1, r4
 80008a4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80008aa:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	42b5      	cmp	r5, r6
 80008ae:	dbf6      	blt.n	800089e <_read+0xa>
	}

return len;
}
 80008b0:	4630      	mov	r0, r6
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <_close>:
}

int _close(int file)
{
	return -1;
}
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b8:	4770      	bx	lr

080008ba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80008ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008be:	604b      	str	r3, [r1, #4]
	return 0;
}
 80008c0:	2000      	movs	r0, #0
 80008c2:	4770      	bx	lr

080008c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80008c4:	2001      	movs	r0, #1
 80008c6:	4770      	bx	lr

080008c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	4770      	bx	lr

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b510      	push	{r4, lr}
 80008ce:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <_sbrk+0x38>)
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <_sbrk+0x40>)
 80008d6:	6800      	ldr	r0, [r0, #0]
 80008d8:	b140      	cbz	r0, 80008ec <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <_sbrk+0x40>)
 80008dc:	6800      	ldr	r0, [r0, #0]
 80008de:	4403      	add	r3, r0
 80008e0:	1a52      	subs	r2, r2, r1
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d806      	bhi.n	80008f4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80008e6:	4a09      	ldr	r2, [pc, #36]	; (800090c <_sbrk+0x40>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80008ea:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <_sbrk+0x40>)
 80008ee:	4c08      	ldr	r4, [pc, #32]	; (8000910 <_sbrk+0x44>)
 80008f0:	6004      	str	r4, [r0, #0]
 80008f2:	e7f2      	b.n	80008da <_sbrk+0xe>
    errno = ENOMEM;
 80008f4:	f000 fa18 	bl	8000d28 <__errno>
 80008f8:	230c      	movs	r3, #12
 80008fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000900:	e7f3      	b.n	80008ea <_sbrk+0x1e>
 8000902:	bf00      	nop
 8000904:	20020000 	.word	0x20020000
 8000908:	00000400 	.word	0x00000400
 800090c:	20000088 	.word	0x20000088
 8000910:	200000a0 	.word	0x200000a0

08000914 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <SystemInit+0x10>)
 8000916:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800091a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000952:	f7ff ffdf 	bl	8000914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f000 f9ed 	bl	8000d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff ff19 	bl	8000790 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800096c:	08001e54 	.word	0x08001e54
  ldr r2, =_sbss
 8000970:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000974:	2000009c 	.word	0x2000009c

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>

0800097a <LL_GPIO_Init>:
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800097a:	680b      	ldr	r3, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097c:	fa93 f3a3 	rbit	r3, r3
 8000980:	fab3 fc83 	clz	ip, r3
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000984:	e056      	b.n	8000a34 <LL_GPIO_Init+0xba>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000986:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000988:	6882      	ldr	r2, [r0, #8]
 800098a:	fa93 f4a3 	rbit	r4, r3
 800098e:	fab4 f484 	clz	r4, r4
 8000992:	0064      	lsls	r4, r4, #1
 8000994:	f04f 0e03 	mov.w	lr, #3
 8000998:	fa0e f404 	lsl.w	r4, lr, r4
 800099c:	ea22 0204 	bic.w	r2, r2, r4
 80009a0:	fa93 f4a3 	rbit	r4, r3
 80009a4:	fab4 f484 	clz	r4, r4
 80009a8:	0064      	lsls	r4, r4, #1
 80009aa:	fa05 f404 	lsl.w	r4, r5, r4
 80009ae:	4322      	orrs	r2, r4
 80009b0:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80009b2:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80009b4:	6842      	ldr	r2, [r0, #4]
 80009b6:	ea22 0203 	bic.w	r2, r2, r3
 80009ba:	fb03 f404 	mul.w	r4, r3, r4
 80009be:	4322      	orrs	r2, r4
 80009c0:	6042      	str	r2, [r0, #4]
}
 80009c2:	e045      	b.n	8000a50 <LL_GPIO_Init+0xd6>
 80009c4:	fa93 f2a3 	rbit	r2, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a07      	cmp	r2, #7
 80009ce:	d815      	bhi.n	80009fc <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80009d0:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80009d2:	6a02      	ldr	r2, [r0, #32]
 80009d4:	fa93 f4a3 	rbit	r4, r3
 80009d8:	fab4 f484 	clz	r4, r4
 80009dc:	00a4      	lsls	r4, r4, #2
 80009de:	260f      	movs	r6, #15
 80009e0:	fa06 f404 	lsl.w	r4, r6, r4
 80009e4:	ea22 0204 	bic.w	r2, r2, r4
 80009e8:	fa93 f4a3 	rbit	r4, r3
 80009ec:	fab4 f484 	clz	r4, r4
 80009f0:	00a4      	lsls	r4, r4, #2
 80009f2:	fa05 f404 	lsl.w	r4, r5, r4
 80009f6:	4322      	orrs	r2, r4
 80009f8:	6202      	str	r2, [r0, #32]
}
 80009fa:	e041      	b.n	8000a80 <LL_GPIO_Init+0x106>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80009fc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80009fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8000a00:	0a1a      	lsrs	r2, r3, #8
 8000a02:	fa92 fea2 	rbit	lr, r2
 8000a06:	fabe fe8e 	clz	lr, lr
 8000a0a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000a0e:	260f      	movs	r6, #15
 8000a10:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000a14:	ea25 050e 	bic.w	r5, r5, lr
 8000a18:	fa92 f2a2 	rbit	r2, r2
 8000a1c:	fab2 f282 	clz	r2, r2
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	fa04 f202 	lsl.w	r2, r4, r2
 8000a26:	432a      	orrs	r2, r5
 8000a28:	6242      	str	r2, [r0, #36]	; 0x24
}
 8000a2a:	e029      	b.n	8000a80 <LL_GPIO_Init+0x106>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
    pinpos++;
 8000a30:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a34:	680b      	ldr	r3, [r1, #0]
 8000a36:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000a3a:	d044      	beq.n	8000ac6 <LL_GPIO_Init+0x14c>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	fa02 f20c 	lsl.w	r2, r2, ip
    if (currentpin)
 8000a42:	4013      	ands	r3, r2
 8000a44:	d0f4      	beq.n	8000a30 <LL_GPIO_Init+0xb6>
{
 8000a46:	b570      	push	{r4, r5, r6, lr}
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a48:	684a      	ldr	r2, [r1, #4]
 8000a4a:	3a01      	subs	r2, #1
 8000a4c:	2a01      	cmp	r2, #1
 8000a4e:	d99a      	bls.n	8000986 <LL_GPIO_Init+0xc>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a50:	68c2      	ldr	r2, [r0, #12]
 8000a52:	fa93 f4a3 	rbit	r4, r3
 8000a56:	fab4 f484 	clz	r4, r4
 8000a5a:	0064      	lsls	r4, r4, #1
 8000a5c:	2503      	movs	r5, #3
 8000a5e:	fa05 f404 	lsl.w	r4, r5, r4
 8000a62:	ea22 0204 	bic.w	r2, r2, r4
 8000a66:	fa93 f4a3 	rbit	r4, r3
 8000a6a:	fab4 f484 	clz	r4, r4
 8000a6e:	0064      	lsls	r4, r4, #1
 8000a70:	690d      	ldr	r5, [r1, #16]
 8000a72:	fa05 f404 	lsl.w	r4, r5, r4
 8000a76:	4322      	orrs	r2, r4
 8000a78:	60c2      	str	r2, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000a7a:	684a      	ldr	r2, [r1, #4]
 8000a7c:	2a02      	cmp	r2, #2
 8000a7e:	d0a1      	beq.n	80009c4 <LL_GPIO_Init+0x4a>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a80:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a82:	6804      	ldr	r4, [r0, #0]
 8000a84:	fa93 fea3 	rbit	lr, r3
 8000a88:	fabe fe8e 	clz	lr, lr
 8000a8c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000a90:	2503      	movs	r5, #3
 8000a92:	fa05 fe0e 	lsl.w	lr, r5, lr
 8000a96:	ea24 0e0e 	bic.w	lr, r4, lr
 8000a9a:	fa93 f3a3 	rbit	r3, r3
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	ea4e 0303 	orr.w	r3, lr, r3
 8000aac:	6003      	str	r3, [r0, #0]
    pinpos++;
 8000aae:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000ab2:	680b      	ldr	r3, [r1, #0]
 8000ab4:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000ab8:	d0b8      	beq.n	8000a2c <LL_GPIO_Init+0xb2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000aba:	2201      	movs	r2, #1
 8000abc:	fa02 f20c 	lsl.w	r2, r2, ip
    if (currentpin)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d0f4      	beq.n	8000aae <LL_GPIO_Init+0x134>
 8000ac4:	e7c0      	b.n	8000a48 <LL_GPIO_Init+0xce>
}
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	4770      	bx	lr
	...

08000acc <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <RCC_GetHCLKClockFreq+0x10>)
 8000ace:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000ad0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ad4:	4a02      	ldr	r2, [pc, #8]	; (8000ae0 <RCC_GetHCLKClockFreq+0x14>)
 8000ad6:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ad8:	40d8      	lsrs	r0, r3
 8000ada:	4770      	bx	lr
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	08001d94 	.word	0x08001d94

08000ae4 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <RCC_GetPCLK1ClockFreq+0x10>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000ae8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000aec:	4a02      	ldr	r2, [pc, #8]	; (8000af8 <RCC_GetPCLK1ClockFreq+0x14>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
}
 8000af0:	40d8      	lsrs	r0, r3
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800
 8000af8:	08001da4 	.word	0x08001da4

08000afc <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <RCC_GetPCLK2ClockFreq+0x10>)
 8000afe:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000b00:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000b04:	4a02      	ldr	r2, [pc, #8]	; (8000b10 <RCC_GetPCLK2ClockFreq+0x14>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b08:	40d8      	lsrs	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	08001da4 	.word	0x08001da4

08000b14 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000b1c:	b923      	cbnz	r3, 8000b28 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b20:	2808      	cmp	r0, #8
 8000b22:	d003      	beq.n	8000b2c <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8000b24:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8000b26:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8000b2a:	e7f9      	b.n	8000b20 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000b2c:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000b2e:	6850      	ldr	r0, [r2, #4]
 8000b30:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000b34:	fbb3 f0f0 	udiv	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000b38:	6853      	ldr	r3, [r2, #4]
 8000b3a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000b3e:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8000b42:	6853      	ldr	r3, [r2, #4]
 8000b44:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b48:	3301      	adds	r3, #1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	00f42400 	.word	0x00f42400
 8000b5c:	017d7840 	.word	0x017d7840

08000b60 <RCC_GetSystemClockFreq>:
{
 8000b60:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <RCC_GetSystemClockFreq+0x24>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d005      	beq.n	8000b7a <RCC_GetSystemClockFreq+0x1a>
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d105      	bne.n	8000b7e <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000b72:	2008      	movs	r0, #8
 8000b74:	f7ff ffce 	bl	8000b14 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8000b78:	e002      	b.n	8000b80 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <RCC_GetSystemClockFreq+0x28>)
 8000b7c:	e000      	b.n	8000b80 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <RCC_GetSystemClockFreq+0x2c>)
}
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	017d7840 	.word	0x017d7840
 8000b8c:	00f42400 	.word	0x00f42400

08000b90 <LL_RCC_GetSystemClocksFreq>:
{
 8000b90:	b510      	push	{r4, lr}
 8000b92:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000b94:	f7ff ffe4 	bl	8000b60 <RCC_GetSystemClockFreq>
 8000b98:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000b9a:	f7ff ff97 	bl	8000acc <RCC_GetHCLKClockFreq>
 8000b9e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ba0:	f7ff ffa0 	bl	8000ae4 <RCC_GetPCLK1ClockFreq>
 8000ba4:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ba6:	6860      	ldr	r0, [r4, #4]
 8000ba8:	f7ff ffa8 	bl	8000afc <RCC_GetPCLK2ClockFreq>
 8000bac:	60e0      	str	r0, [r4, #12]
}
 8000bae:	bd10      	pop	{r4, pc}

08000bb0 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000bb0:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000bb2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000bb6:	d001      	beq.n	8000bbc <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8000bb8:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000bba:	4770      	bx	lr
{
 8000bbc:	b530      	push	{r4, r5, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8000bc4:	68c3      	ldr	r3, [r0, #12]
 8000bc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000bca:	f023 030c 	bic.w	r3, r3, #12
 8000bce:	684a      	ldr	r2, [r1, #4]
 8000bd0:	68c9      	ldr	r1, [r1, #12]
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	6929      	ldr	r1, [r5, #16]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	69a9      	ldr	r1, [r5, #24]
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000be0:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000be2:	6902      	ldr	r2, [r0, #16]
 8000be4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000be8:	4313      	orrs	r3, r2
 8000bea:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000bec:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000bee:	6942      	ldr	r2, [r0, #20]
 8000bf0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f7ff ffc9 	bl	8000b90 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <LL_USART_Init+0x13c>)
 8000c00:	429c      	cmp	r4, r3
 8000c02:	d008      	beq.n	8000c16 <LL_USART_Init+0x66>
    else if (USARTx == USART2)
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <LL_USART_Init+0x140>)
 8000c06:	429c      	cmp	r4, r3
 8000c08:	d00c      	beq.n	8000c24 <LL_USART_Init+0x74>
    else if (USARTx == USART6)
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <LL_USART_Init+0x144>)
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	d00b      	beq.n	8000c28 <LL_USART_Init+0x78>
  ErrorStatus status = ERROR;
 8000c10:	2001      	movs	r0, #1
}
 8000c12:	b005      	add	sp, #20
 8000c14:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000c16:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d065      	beq.n	8000ce8 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	b92b      	cbnz	r3, 8000c2c <LL_USART_Init+0x7c>
  ErrorStatus status = ERROR;
 8000c20:	2001      	movs	r0, #1
 8000c22:	e7f6      	b.n	8000c12 <LL_USART_Init+0x62>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000c24:	9802      	ldr	r0, [sp, #8]
 8000c26:	e7f7      	b.n	8000c18 <LL_USART_Init+0x68>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000c28:	9803      	ldr	r0, [sp, #12]
 8000c2a:	e7f5      	b.n	8000c18 <LL_USART_Init+0x68>
      LL_USART_SetBaudRate(USARTx,
 8000c2c:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000c2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000c32:	d02c      	beq.n	8000c8e <LL_USART_Init+0xde>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000c34:	2100      	movs	r1, #0
 8000c36:	1802      	adds	r2, r0, r0
 8000c38:	4149      	adcs	r1, r1
 8000c3a:	1812      	adds	r2, r2, r0
 8000c3c:	f141 0100 	adc.w	r1, r1, #0
 8000c40:	00c9      	lsls	r1, r1, #3
 8000c42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000c46:	00d2      	lsls	r2, r2, #3
 8000c48:	1810      	adds	r0, r2, r0
 8000c4a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000c4e:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8000c52:	f141 0100 	adc.w	r1, r1, #0
 8000c56:	f7ff fb13 	bl	8000280 <__aeabi_uldivmod>
 8000c5a:	4927      	ldr	r1, [pc, #156]	; (8000cf8 <LL_USART_Init+0x148>)
 8000c5c:	fba1 2300 	umull	r2, r3, r1, r0
 8000c60:	095b      	lsrs	r3, r3, #5
 8000c62:	011a      	lsls	r2, r3, #4
 8000c64:	b292      	uxth	r2, r2
 8000c66:	2564      	movs	r5, #100	; 0x64
 8000c68:	fb05 0313 	mls	r3, r5, r3, r0
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	3332      	adds	r3, #50	; 0x32
 8000c70:	fba1 1303 	umull	r1, r3, r1, r3
 8000c74:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000c78:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8000c7c:	440a      	add	r2, r1
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	4413      	add	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8000c8a:	2000      	movs	r0, #0
}
 8000c8c:	e7c1      	b.n	8000c12 <LL_USART_Init+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000c8e:	2500      	movs	r5, #0
 8000c90:	1802      	adds	r2, r0, r0
 8000c92:	eb45 0105 	adc.w	r1, r5, r5
 8000c96:	1812      	adds	r2, r2, r0
 8000c98:	f141 0100 	adc.w	r1, r1, #0
 8000c9c:	00c9      	lsls	r1, r1, #3
 8000c9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	1810      	adds	r0, r2, r0
 8000ca6:	f141 0100 	adc.w	r1, r1, #0
 8000caa:	18da      	adds	r2, r3, r3
 8000cac:	eb45 0305 	adc.w	r3, r5, r5
 8000cb0:	f7ff fae6 	bl	8000280 <__aeabi_uldivmod>
 8000cb4:	4910      	ldr	r1, [pc, #64]	; (8000cf8 <LL_USART_Init+0x148>)
 8000cb6:	fba1 2300 	umull	r2, r3, r1, r0
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	011a      	lsls	r2, r3, #4
 8000cbe:	b292      	uxth	r2, r2
 8000cc0:	2564      	movs	r5, #100	; 0x64
 8000cc2:	fb05 0313 	mls	r3, r5, r3, r0
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	3332      	adds	r3, #50	; 0x32
 8000cca:	fba1 1303 	umull	r1, r3, r1, r3
 8000cce:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000cd2:	0059      	lsls	r1, r3, #1
 8000cd4:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8000cd8:	440a      	add	r2, r1
 8000cda:	b292      	uxth	r2, r2
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	60a3      	str	r3, [r4, #8]
 8000ce6:	e7d0      	b.n	8000c8a <LL_USART_Init+0xda>
  ErrorStatus status = ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e792      	b.n	8000c12 <LL_USART_Init+0x62>
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40011400 	.word	0x40011400
 8000cf8:	51eb851f 	.word	0x51eb851f

08000cfc <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <LL_Init1msTick+0x1c>)
 8000cfe:	fba3 2300 	umull	r2, r3, r3, r0
 8000d02:	099b      	lsrs	r3, r3, #6
 8000d04:	3b01      	subs	r3, #1
 8000d06:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000d0a:	6153      	str	r3, [r2, #20]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d10:	2305      	movs	r3, #5
 8000d12:	6113      	str	r3, [r2, #16]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	10624dd3 	.word	0x10624dd3

08000d1c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d1c:	4b01      	ldr	r3, [pc, #4]	; (8000d24 <LL_SetSystemCoreClock+0x8>)
 8000d1e:	6018      	str	r0, [r3, #0]
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000000 	.word	0x20000000

08000d28 <__errno>:
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <__errno+0x8>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000004 	.word	0x20000004

08000d34 <__libc_init_array>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	4d0d      	ldr	r5, [pc, #52]	; (8000d6c <__libc_init_array+0x38>)
 8000d38:	4c0d      	ldr	r4, [pc, #52]	; (8000d70 <__libc_init_array+0x3c>)
 8000d3a:	1b64      	subs	r4, r4, r5
 8000d3c:	10a4      	asrs	r4, r4, #2
 8000d3e:	2600      	movs	r6, #0
 8000d40:	42a6      	cmp	r6, r4
 8000d42:	d109      	bne.n	8000d58 <__libc_init_array+0x24>
 8000d44:	4d0b      	ldr	r5, [pc, #44]	; (8000d74 <__libc_init_array+0x40>)
 8000d46:	4c0c      	ldr	r4, [pc, #48]	; (8000d78 <__libc_init_array+0x44>)
 8000d48:	f001 f80c 	bl	8001d64 <_init>
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	10a4      	asrs	r4, r4, #2
 8000d50:	2600      	movs	r6, #0
 8000d52:	42a6      	cmp	r6, r4
 8000d54:	d105      	bne.n	8000d62 <__libc_init_array+0x2e>
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d5c:	4798      	blx	r3
 8000d5e:	3601      	adds	r6, #1
 8000d60:	e7ee      	b.n	8000d40 <__libc_init_array+0xc>
 8000d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d66:	4798      	blx	r3
 8000d68:	3601      	adds	r6, #1
 8000d6a:	e7f2      	b.n	8000d52 <__libc_init_array+0x1e>
 8000d6c:	08001e4c 	.word	0x08001e4c
 8000d70:	08001e4c 	.word	0x08001e4c
 8000d74:	08001e4c 	.word	0x08001e4c
 8000d78:	08001e50 	.word	0x08001e50

08000d7c <memset>:
 8000d7c:	4402      	add	r2, r0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d100      	bne.n	8000d86 <memset+0xa>
 8000d84:	4770      	bx	lr
 8000d86:	f803 1b01 	strb.w	r1, [r3], #1
 8000d8a:	e7f9      	b.n	8000d80 <memset+0x4>

08000d8c <iprintf>:
 8000d8c:	b40f      	push	{r0, r1, r2, r3}
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <iprintf+0x2c>)
 8000d90:	b513      	push	{r0, r1, r4, lr}
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	b124      	cbz	r4, 8000da0 <iprintf+0x14>
 8000d96:	69a3      	ldr	r3, [r4, #24]
 8000d98:	b913      	cbnz	r3, 8000da0 <iprintf+0x14>
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f000 f87c 	bl	8000e98 <__sinit>
 8000da0:	ab05      	add	r3, sp, #20
 8000da2:	9a04      	ldr	r2, [sp, #16]
 8000da4:	68a1      	ldr	r1, [r4, #8]
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	4620      	mov	r0, r4
 8000daa:	f000 f9d3 	bl	8001154 <_vfiprintf_r>
 8000dae:	b002      	add	sp, #8
 8000db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr
 8000db8:	20000004 	.word	0x20000004

08000dbc <putchar>:
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <putchar+0x28>)
 8000dbe:	b513      	push	{r0, r1, r4, lr}
 8000dc0:	681c      	ldr	r4, [r3, #0]
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	b134      	cbz	r4, 8000dd4 <putchar+0x18>
 8000dc6:	69a3      	ldr	r3, [r4, #24]
 8000dc8:	b923      	cbnz	r3, 8000dd4 <putchar+0x18>
 8000dca:	9001      	str	r0, [sp, #4]
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f000 f863 	bl	8000e98 <__sinit>
 8000dd2:	9901      	ldr	r1, [sp, #4]
 8000dd4:	68a2      	ldr	r2, [r4, #8]
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	b002      	add	sp, #8
 8000dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dde:	f000 bc7d 	b.w	80016dc <_putc_r>
 8000de2:	bf00      	nop
 8000de4:	20000004 	.word	0x20000004

08000de8 <std>:
 8000de8:	2300      	movs	r3, #0
 8000dea:	b510      	push	{r4, lr}
 8000dec:	4604      	mov	r4, r0
 8000dee:	e9c0 3300 	strd	r3, r3, [r0]
 8000df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000df6:	6083      	str	r3, [r0, #8]
 8000df8:	8181      	strh	r1, [r0, #12]
 8000dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8000dfc:	81c2      	strh	r2, [r0, #14]
 8000dfe:	6183      	str	r3, [r0, #24]
 8000e00:	4619      	mov	r1, r3
 8000e02:	2208      	movs	r2, #8
 8000e04:	305c      	adds	r0, #92	; 0x5c
 8000e06:	f7ff ffb9 	bl	8000d7c <memset>
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <std+0x38>)
 8000e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <std+0x3c>)
 8000e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <std+0x40>)
 8000e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <std+0x44>)
 8000e18:	6224      	str	r4, [r4, #32]
 8000e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	bf00      	nop
 8000e20:	0800178d 	.word	0x0800178d
 8000e24:	080017af 	.word	0x080017af
 8000e28:	080017e7 	.word	0x080017e7
 8000e2c:	0800180b 	.word	0x0800180b

08000e30 <_cleanup_r>:
 8000e30:	4901      	ldr	r1, [pc, #4]	; (8000e38 <_cleanup_r+0x8>)
 8000e32:	f000 b8af 	b.w	8000f94 <_fwalk_reent>
 8000e36:	bf00      	nop
 8000e38:	08001ae5 	.word	0x08001ae5

08000e3c <__sfmoreglue>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	2268      	movs	r2, #104	; 0x68
 8000e40:	1e4d      	subs	r5, r1, #1
 8000e42:	4355      	muls	r5, r2
 8000e44:	460e      	mov	r6, r1
 8000e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e4a:	f000 f8e5 	bl	8001018 <_malloc_r>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	b140      	cbz	r0, 8000e64 <__sfmoreglue+0x28>
 8000e52:	2100      	movs	r1, #0
 8000e54:	e9c0 1600 	strd	r1, r6, [r0]
 8000e58:	300c      	adds	r0, #12
 8000e5a:	60a0      	str	r0, [r4, #8]
 8000e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e60:	f7ff ff8c 	bl	8000d7c <memset>
 8000e64:	4620      	mov	r0, r4
 8000e66:	bd70      	pop	{r4, r5, r6, pc}

08000e68 <__sfp_lock_acquire>:
 8000e68:	4801      	ldr	r0, [pc, #4]	; (8000e70 <__sfp_lock_acquire+0x8>)
 8000e6a:	f000 b8b3 	b.w	8000fd4 <__retarget_lock_acquire_recursive>
 8000e6e:	bf00      	nop
 8000e70:	2000008d 	.word	0x2000008d

08000e74 <__sfp_lock_release>:
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <__sfp_lock_release+0x8>)
 8000e76:	f000 b8ae 	b.w	8000fd6 <__retarget_lock_release_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	2000008d 	.word	0x2000008d

08000e80 <__sinit_lock_acquire>:
 8000e80:	4801      	ldr	r0, [pc, #4]	; (8000e88 <__sinit_lock_acquire+0x8>)
 8000e82:	f000 b8a7 	b.w	8000fd4 <__retarget_lock_acquire_recursive>
 8000e86:	bf00      	nop
 8000e88:	2000008e 	.word	0x2000008e

08000e8c <__sinit_lock_release>:
 8000e8c:	4801      	ldr	r0, [pc, #4]	; (8000e94 <__sinit_lock_release+0x8>)
 8000e8e:	f000 b8a2 	b.w	8000fd6 <__retarget_lock_release_recursive>
 8000e92:	bf00      	nop
 8000e94:	2000008e 	.word	0x2000008e

08000e98 <__sinit>:
 8000e98:	b510      	push	{r4, lr}
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	f7ff fff0 	bl	8000e80 <__sinit_lock_acquire>
 8000ea0:	69a3      	ldr	r3, [r4, #24]
 8000ea2:	b11b      	cbz	r3, 8000eac <__sinit+0x14>
 8000ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ea8:	f7ff bff0 	b.w	8000e8c <__sinit_lock_release>
 8000eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <__sinit+0x68>)
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <__sinit+0x6c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000eba:	42a3      	cmp	r3, r4
 8000ebc:	bf04      	itt	eq
 8000ebe:	2301      	moveq	r3, #1
 8000ec0:	61a3      	streq	r3, [r4, #24]
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f000 f820 	bl	8000f08 <__sfp>
 8000ec8:	6060      	str	r0, [r4, #4]
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f000 f81c 	bl	8000f08 <__sfp>
 8000ed0:	60a0      	str	r0, [r4, #8]
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f000 f818 	bl	8000f08 <__sfp>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60e0      	str	r0, [r4, #12]
 8000edc:	2104      	movs	r1, #4
 8000ede:	6860      	ldr	r0, [r4, #4]
 8000ee0:	f7ff ff82 	bl	8000de8 <std>
 8000ee4:	68a0      	ldr	r0, [r4, #8]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2109      	movs	r1, #9
 8000eea:	f7ff ff7d 	bl	8000de8 <std>
 8000eee:	68e0      	ldr	r0, [r4, #12]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	2112      	movs	r1, #18
 8000ef4:	f7ff ff78 	bl	8000de8 <std>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61a3      	str	r3, [r4, #24]
 8000efc:	e7d2      	b.n	8000ea4 <__sinit+0xc>
 8000efe:	bf00      	nop
 8000f00:	08001dac 	.word	0x08001dac
 8000f04:	08000e31 	.word	0x08000e31

08000f08 <__sfp>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	4607      	mov	r7, r0
 8000f0c:	f7ff ffac 	bl	8000e68 <__sfp_lock_acquire>
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <__sfp+0x84>)
 8000f12:	681e      	ldr	r6, [r3, #0]
 8000f14:	69b3      	ldr	r3, [r6, #24]
 8000f16:	b913      	cbnz	r3, 8000f1e <__sfp+0x16>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	f7ff ffbd 	bl	8000e98 <__sinit>
 8000f1e:	3648      	adds	r6, #72	; 0x48
 8000f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	d503      	bpl.n	8000f30 <__sfp+0x28>
 8000f28:	6833      	ldr	r3, [r6, #0]
 8000f2a:	b30b      	cbz	r3, 8000f70 <__sfp+0x68>
 8000f2c:	6836      	ldr	r6, [r6, #0]
 8000f2e:	e7f7      	b.n	8000f20 <__sfp+0x18>
 8000f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f34:	b9d5      	cbnz	r5, 8000f6c <__sfp+0x64>
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <__sfp+0x88>)
 8000f38:	60e3      	str	r3, [r4, #12]
 8000f3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8000f40:	f000 f847 	bl	8000fd2 <__retarget_lock_init_recursive>
 8000f44:	f7ff ff96 	bl	8000e74 <__sfp_lock_release>
 8000f48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f50:	6025      	str	r5, [r4, #0]
 8000f52:	61a5      	str	r5, [r4, #24]
 8000f54:	2208      	movs	r2, #8
 8000f56:	4629      	mov	r1, r5
 8000f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f5c:	f7ff ff0e 	bl	8000d7c <memset>
 8000f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f68:	4620      	mov	r0, r4
 8000f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6c:	3468      	adds	r4, #104	; 0x68
 8000f6e:	e7d9      	b.n	8000f24 <__sfp+0x1c>
 8000f70:	2104      	movs	r1, #4
 8000f72:	4638      	mov	r0, r7
 8000f74:	f7ff ff62 	bl	8000e3c <__sfmoreglue>
 8000f78:	4604      	mov	r4, r0
 8000f7a:	6030      	str	r0, [r6, #0]
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d1d5      	bne.n	8000f2c <__sfp+0x24>
 8000f80:	f7ff ff78 	bl	8000e74 <__sfp_lock_release>
 8000f84:	230c      	movs	r3, #12
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	e7ee      	b.n	8000f68 <__sfp+0x60>
 8000f8a:	bf00      	nop
 8000f8c:	08001dac 	.word	0x08001dac
 8000f90:	ffff0001 	.word	0xffff0001

08000f94 <_fwalk_reent>:
 8000f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4688      	mov	r8, r1
 8000f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fa0:	2700      	movs	r7, #0
 8000fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8000faa:	d505      	bpl.n	8000fb8 <_fwalk_reent+0x24>
 8000fac:	6824      	ldr	r4, [r4, #0]
 8000fae:	2c00      	cmp	r4, #0
 8000fb0:	d1f7      	bne.n	8000fa2 <_fwalk_reent+0xe>
 8000fb2:	4638      	mov	r0, r7
 8000fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fb8:	89ab      	ldrh	r3, [r5, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d907      	bls.n	8000fce <_fwalk_reent+0x3a>
 8000fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	d003      	beq.n	8000fce <_fwalk_reent+0x3a>
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	4630      	mov	r0, r6
 8000fca:	47c0      	blx	r8
 8000fcc:	4307      	orrs	r7, r0
 8000fce:	3568      	adds	r5, #104	; 0x68
 8000fd0:	e7e9      	b.n	8000fa6 <_fwalk_reent+0x12>

08000fd2 <__retarget_lock_init_recursive>:
 8000fd2:	4770      	bx	lr

08000fd4 <__retarget_lock_acquire_recursive>:
 8000fd4:	4770      	bx	lr

08000fd6 <__retarget_lock_release_recursive>:
 8000fd6:	4770      	bx	lr

08000fd8 <sbrk_aligned>:
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	4e0e      	ldr	r6, [pc, #56]	; (8001014 <sbrk_aligned+0x3c>)
 8000fdc:	460c      	mov	r4, r1
 8000fde:	6831      	ldr	r1, [r6, #0]
 8000fe0:	4605      	mov	r5, r0
 8000fe2:	b911      	cbnz	r1, 8000fea <sbrk_aligned+0x12>
 8000fe4:	f000 fbc2 	bl	800176c <_sbrk_r>
 8000fe8:	6030      	str	r0, [r6, #0]
 8000fea:	4621      	mov	r1, r4
 8000fec:	4628      	mov	r0, r5
 8000fee:	f000 fbbd 	bl	800176c <_sbrk_r>
 8000ff2:	1c43      	adds	r3, r0, #1
 8000ff4:	d00a      	beq.n	800100c <sbrk_aligned+0x34>
 8000ff6:	1cc4      	adds	r4, r0, #3
 8000ff8:	f024 0403 	bic.w	r4, r4, #3
 8000ffc:	42a0      	cmp	r0, r4
 8000ffe:	d007      	beq.n	8001010 <sbrk_aligned+0x38>
 8001000:	1a21      	subs	r1, r4, r0
 8001002:	4628      	mov	r0, r5
 8001004:	f000 fbb2 	bl	800176c <_sbrk_r>
 8001008:	3001      	adds	r0, #1
 800100a:	d101      	bne.n	8001010 <sbrk_aligned+0x38>
 800100c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001010:	4620      	mov	r0, r4
 8001012:	bd70      	pop	{r4, r5, r6, pc}
 8001014:	20000094 	.word	0x20000094

08001018 <_malloc_r>:
 8001018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800101c:	1ccd      	adds	r5, r1, #3
 800101e:	f025 0503 	bic.w	r5, r5, #3
 8001022:	3508      	adds	r5, #8
 8001024:	2d0c      	cmp	r5, #12
 8001026:	bf38      	it	cc
 8001028:	250c      	movcc	r5, #12
 800102a:	2d00      	cmp	r5, #0
 800102c:	4607      	mov	r7, r0
 800102e:	db01      	blt.n	8001034 <_malloc_r+0x1c>
 8001030:	42a9      	cmp	r1, r5
 8001032:	d905      	bls.n	8001040 <_malloc_r+0x28>
 8001034:	230c      	movs	r3, #12
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	2600      	movs	r6, #0
 800103a:	4630      	mov	r0, r6
 800103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001040:	4e2e      	ldr	r6, [pc, #184]	; (80010fc <_malloc_r+0xe4>)
 8001042:	f000 fe03 	bl	8001c4c <__malloc_lock>
 8001046:	6833      	ldr	r3, [r6, #0]
 8001048:	461c      	mov	r4, r3
 800104a:	bb34      	cbnz	r4, 800109a <_malloc_r+0x82>
 800104c:	4629      	mov	r1, r5
 800104e:	4638      	mov	r0, r7
 8001050:	f7ff ffc2 	bl	8000fd8 <sbrk_aligned>
 8001054:	1c43      	adds	r3, r0, #1
 8001056:	4604      	mov	r4, r0
 8001058:	d14d      	bne.n	80010f6 <_malloc_r+0xde>
 800105a:	6834      	ldr	r4, [r6, #0]
 800105c:	4626      	mov	r6, r4
 800105e:	2e00      	cmp	r6, #0
 8001060:	d140      	bne.n	80010e4 <_malloc_r+0xcc>
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	4631      	mov	r1, r6
 8001066:	4638      	mov	r0, r7
 8001068:	eb04 0803 	add.w	r8, r4, r3
 800106c:	f000 fb7e 	bl	800176c <_sbrk_r>
 8001070:	4580      	cmp	r8, r0
 8001072:	d13a      	bne.n	80010ea <_malloc_r+0xd2>
 8001074:	6821      	ldr	r1, [r4, #0]
 8001076:	3503      	adds	r5, #3
 8001078:	1a6d      	subs	r5, r5, r1
 800107a:	f025 0503 	bic.w	r5, r5, #3
 800107e:	3508      	adds	r5, #8
 8001080:	2d0c      	cmp	r5, #12
 8001082:	bf38      	it	cc
 8001084:	250c      	movcc	r5, #12
 8001086:	4629      	mov	r1, r5
 8001088:	4638      	mov	r0, r7
 800108a:	f7ff ffa5 	bl	8000fd8 <sbrk_aligned>
 800108e:	3001      	adds	r0, #1
 8001090:	d02b      	beq.n	80010ea <_malloc_r+0xd2>
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	442b      	add	r3, r5
 8001096:	6023      	str	r3, [r4, #0]
 8001098:	e00e      	b.n	80010b8 <_malloc_r+0xa0>
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	1b52      	subs	r2, r2, r5
 800109e:	d41e      	bmi.n	80010de <_malloc_r+0xc6>
 80010a0:	2a0b      	cmp	r2, #11
 80010a2:	d916      	bls.n	80010d2 <_malloc_r+0xba>
 80010a4:	1961      	adds	r1, r4, r5
 80010a6:	42a3      	cmp	r3, r4
 80010a8:	6025      	str	r5, [r4, #0]
 80010aa:	bf18      	it	ne
 80010ac:	6059      	strne	r1, [r3, #4]
 80010ae:	6863      	ldr	r3, [r4, #4]
 80010b0:	bf08      	it	eq
 80010b2:	6031      	streq	r1, [r6, #0]
 80010b4:	5162      	str	r2, [r4, r5]
 80010b6:	604b      	str	r3, [r1, #4]
 80010b8:	4638      	mov	r0, r7
 80010ba:	f104 060b 	add.w	r6, r4, #11
 80010be:	f000 fdcb 	bl	8001c58 <__malloc_unlock>
 80010c2:	f026 0607 	bic.w	r6, r6, #7
 80010c6:	1d23      	adds	r3, r4, #4
 80010c8:	1af2      	subs	r2, r6, r3
 80010ca:	d0b6      	beq.n	800103a <_malloc_r+0x22>
 80010cc:	1b9b      	subs	r3, r3, r6
 80010ce:	50a3      	str	r3, [r4, r2]
 80010d0:	e7b3      	b.n	800103a <_malloc_r+0x22>
 80010d2:	6862      	ldr	r2, [r4, #4]
 80010d4:	42a3      	cmp	r3, r4
 80010d6:	bf0c      	ite	eq
 80010d8:	6032      	streq	r2, [r6, #0]
 80010da:	605a      	strne	r2, [r3, #4]
 80010dc:	e7ec      	b.n	80010b8 <_malloc_r+0xa0>
 80010de:	4623      	mov	r3, r4
 80010e0:	6864      	ldr	r4, [r4, #4]
 80010e2:	e7b2      	b.n	800104a <_malloc_r+0x32>
 80010e4:	4634      	mov	r4, r6
 80010e6:	6876      	ldr	r6, [r6, #4]
 80010e8:	e7b9      	b.n	800105e <_malloc_r+0x46>
 80010ea:	230c      	movs	r3, #12
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4638      	mov	r0, r7
 80010f0:	f000 fdb2 	bl	8001c58 <__malloc_unlock>
 80010f4:	e7a1      	b.n	800103a <_malloc_r+0x22>
 80010f6:	6025      	str	r5, [r4, #0]
 80010f8:	e7de      	b.n	80010b8 <_malloc_r+0xa0>
 80010fa:	bf00      	nop
 80010fc:	20000090 	.word	0x20000090

08001100 <__sfputc_r>:
 8001100:	6893      	ldr	r3, [r2, #8]
 8001102:	3b01      	subs	r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	b410      	push	{r4}
 8001108:	6093      	str	r3, [r2, #8]
 800110a:	da08      	bge.n	800111e <__sfputc_r+0x1e>
 800110c:	6994      	ldr	r4, [r2, #24]
 800110e:	42a3      	cmp	r3, r4
 8001110:	db01      	blt.n	8001116 <__sfputc_r+0x16>
 8001112:	290a      	cmp	r1, #10
 8001114:	d103      	bne.n	800111e <__sfputc_r+0x1e>
 8001116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800111a:	f000 bb7b 	b.w	8001814 <__swbuf_r>
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	1c58      	adds	r0, r3, #1
 8001122:	6010      	str	r0, [r2, #0]
 8001124:	7019      	strb	r1, [r3, #0]
 8001126:	4608      	mov	r0, r1
 8001128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800112c:	4770      	bx	lr

0800112e <__sfputs_r>:
 800112e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001130:	4606      	mov	r6, r0
 8001132:	460f      	mov	r7, r1
 8001134:	4614      	mov	r4, r2
 8001136:	18d5      	adds	r5, r2, r3
 8001138:	42ac      	cmp	r4, r5
 800113a:	d101      	bne.n	8001140 <__sfputs_r+0x12>
 800113c:	2000      	movs	r0, #0
 800113e:	e007      	b.n	8001150 <__sfputs_r+0x22>
 8001140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001144:	463a      	mov	r2, r7
 8001146:	4630      	mov	r0, r6
 8001148:	f7ff ffda 	bl	8001100 <__sfputc_r>
 800114c:	1c43      	adds	r3, r0, #1
 800114e:	d1f3      	bne.n	8001138 <__sfputs_r+0xa>
 8001150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001154 <_vfiprintf_r>:
 8001154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001158:	460d      	mov	r5, r1
 800115a:	b09d      	sub	sp, #116	; 0x74
 800115c:	4614      	mov	r4, r2
 800115e:	4698      	mov	r8, r3
 8001160:	4606      	mov	r6, r0
 8001162:	b118      	cbz	r0, 800116c <_vfiprintf_r+0x18>
 8001164:	6983      	ldr	r3, [r0, #24]
 8001166:	b90b      	cbnz	r3, 800116c <_vfiprintf_r+0x18>
 8001168:	f7ff fe96 	bl	8000e98 <__sinit>
 800116c:	4b89      	ldr	r3, [pc, #548]	; (8001394 <_vfiprintf_r+0x240>)
 800116e:	429d      	cmp	r5, r3
 8001170:	d11b      	bne.n	80011aa <_vfiprintf_r+0x56>
 8001172:	6875      	ldr	r5, [r6, #4]
 8001174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001176:	07d9      	lsls	r1, r3, #31
 8001178:	d405      	bmi.n	8001186 <_vfiprintf_r+0x32>
 800117a:	89ab      	ldrh	r3, [r5, #12]
 800117c:	059a      	lsls	r2, r3, #22
 800117e:	d402      	bmi.n	8001186 <_vfiprintf_r+0x32>
 8001180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001182:	f7ff ff27 	bl	8000fd4 <__retarget_lock_acquire_recursive>
 8001186:	89ab      	ldrh	r3, [r5, #12]
 8001188:	071b      	lsls	r3, r3, #28
 800118a:	d501      	bpl.n	8001190 <_vfiprintf_r+0x3c>
 800118c:	692b      	ldr	r3, [r5, #16]
 800118e:	b9eb      	cbnz	r3, 80011cc <_vfiprintf_r+0x78>
 8001190:	4629      	mov	r1, r5
 8001192:	4630      	mov	r0, r6
 8001194:	f000 fba2 	bl	80018dc <__swsetup_r>
 8001198:	b1c0      	cbz	r0, 80011cc <_vfiprintf_r+0x78>
 800119a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800119c:	07dc      	lsls	r4, r3, #31
 800119e:	d50e      	bpl.n	80011be <_vfiprintf_r+0x6a>
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	b01d      	add	sp, #116	; 0x74
 80011a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011aa:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <_vfiprintf_r+0x244>)
 80011ac:	429d      	cmp	r5, r3
 80011ae:	d101      	bne.n	80011b4 <_vfiprintf_r+0x60>
 80011b0:	68b5      	ldr	r5, [r6, #8]
 80011b2:	e7df      	b.n	8001174 <_vfiprintf_r+0x20>
 80011b4:	4b79      	ldr	r3, [pc, #484]	; (800139c <_vfiprintf_r+0x248>)
 80011b6:	429d      	cmp	r5, r3
 80011b8:	bf08      	it	eq
 80011ba:	68f5      	ldreq	r5, [r6, #12]
 80011bc:	e7da      	b.n	8001174 <_vfiprintf_r+0x20>
 80011be:	89ab      	ldrh	r3, [r5, #12]
 80011c0:	0598      	lsls	r0, r3, #22
 80011c2:	d4ed      	bmi.n	80011a0 <_vfiprintf_r+0x4c>
 80011c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011c6:	f7ff ff06 	bl	8000fd6 <__retarget_lock_release_recursive>
 80011ca:	e7e9      	b.n	80011a0 <_vfiprintf_r+0x4c>
 80011cc:	2300      	movs	r3, #0
 80011ce:	9309      	str	r3, [sp, #36]	; 0x24
 80011d0:	2320      	movs	r3, #32
 80011d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80011d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80011da:	2330      	movs	r3, #48	; 0x30
 80011dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80013a0 <_vfiprintf_r+0x24c>
 80011e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80011e4:	f04f 0901 	mov.w	r9, #1
 80011e8:	4623      	mov	r3, r4
 80011ea:	469a      	mov	sl, r3
 80011ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011f0:	b10a      	cbz	r2, 80011f6 <_vfiprintf_r+0xa2>
 80011f2:	2a25      	cmp	r2, #37	; 0x25
 80011f4:	d1f9      	bne.n	80011ea <_vfiprintf_r+0x96>
 80011f6:	ebba 0b04 	subs.w	fp, sl, r4
 80011fa:	d00b      	beq.n	8001214 <_vfiprintf_r+0xc0>
 80011fc:	465b      	mov	r3, fp
 80011fe:	4622      	mov	r2, r4
 8001200:	4629      	mov	r1, r5
 8001202:	4630      	mov	r0, r6
 8001204:	f7ff ff93 	bl	800112e <__sfputs_r>
 8001208:	3001      	adds	r0, #1
 800120a:	f000 80aa 	beq.w	8001362 <_vfiprintf_r+0x20e>
 800120e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001210:	445a      	add	r2, fp
 8001212:	9209      	str	r2, [sp, #36]	; 0x24
 8001214:	f89a 3000 	ldrb.w	r3, [sl]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80a2 	beq.w	8001362 <_vfiprintf_r+0x20e>
 800121e:	2300      	movs	r3, #0
 8001220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001228:	f10a 0a01 	add.w	sl, sl, #1
 800122c:	9304      	str	r3, [sp, #16]
 800122e:	9307      	str	r3, [sp, #28]
 8001230:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001234:	931a      	str	r3, [sp, #104]	; 0x68
 8001236:	4654      	mov	r4, sl
 8001238:	2205      	movs	r2, #5
 800123a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800123e:	4858      	ldr	r0, [pc, #352]	; (80013a0 <_vfiprintf_r+0x24c>)
 8001240:	f7fe ffce 	bl	80001e0 <memchr>
 8001244:	9a04      	ldr	r2, [sp, #16]
 8001246:	b9d8      	cbnz	r0, 8001280 <_vfiprintf_r+0x12c>
 8001248:	06d1      	lsls	r1, r2, #27
 800124a:	bf44      	itt	mi
 800124c:	2320      	movmi	r3, #32
 800124e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001252:	0713      	lsls	r3, r2, #28
 8001254:	bf44      	itt	mi
 8001256:	232b      	movmi	r3, #43	; 0x2b
 8001258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800125c:	f89a 3000 	ldrb.w	r3, [sl]
 8001260:	2b2a      	cmp	r3, #42	; 0x2a
 8001262:	d015      	beq.n	8001290 <_vfiprintf_r+0x13c>
 8001264:	9a07      	ldr	r2, [sp, #28]
 8001266:	4654      	mov	r4, sl
 8001268:	2000      	movs	r0, #0
 800126a:	f04f 0c0a 	mov.w	ip, #10
 800126e:	4621      	mov	r1, r4
 8001270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001274:	3b30      	subs	r3, #48	; 0x30
 8001276:	2b09      	cmp	r3, #9
 8001278:	d94e      	bls.n	8001318 <_vfiprintf_r+0x1c4>
 800127a:	b1b0      	cbz	r0, 80012aa <_vfiprintf_r+0x156>
 800127c:	9207      	str	r2, [sp, #28]
 800127e:	e014      	b.n	80012aa <_vfiprintf_r+0x156>
 8001280:	eba0 0308 	sub.w	r3, r0, r8
 8001284:	fa09 f303 	lsl.w	r3, r9, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	9304      	str	r3, [sp, #16]
 800128c:	46a2      	mov	sl, r4
 800128e:	e7d2      	b.n	8001236 <_vfiprintf_r+0xe2>
 8001290:	9b03      	ldr	r3, [sp, #12]
 8001292:	1d19      	adds	r1, r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	9103      	str	r1, [sp, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	bfbb      	ittet	lt
 800129c:	425b      	neglt	r3, r3
 800129e:	f042 0202 	orrlt.w	r2, r2, #2
 80012a2:	9307      	strge	r3, [sp, #28]
 80012a4:	9307      	strlt	r3, [sp, #28]
 80012a6:	bfb8      	it	lt
 80012a8:	9204      	strlt	r2, [sp, #16]
 80012aa:	7823      	ldrb	r3, [r4, #0]
 80012ac:	2b2e      	cmp	r3, #46	; 0x2e
 80012ae:	d10c      	bne.n	80012ca <_vfiprintf_r+0x176>
 80012b0:	7863      	ldrb	r3, [r4, #1]
 80012b2:	2b2a      	cmp	r3, #42	; 0x2a
 80012b4:	d135      	bne.n	8001322 <_vfiprintf_r+0x1ce>
 80012b6:	9b03      	ldr	r3, [sp, #12]
 80012b8:	1d1a      	adds	r2, r3, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	9203      	str	r2, [sp, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bfb8      	it	lt
 80012c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80012c6:	3402      	adds	r4, #2
 80012c8:	9305      	str	r3, [sp, #20]
 80012ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80013b0 <_vfiprintf_r+0x25c>
 80012ce:	7821      	ldrb	r1, [r4, #0]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4650      	mov	r0, sl
 80012d4:	f7fe ff84 	bl	80001e0 <memchr>
 80012d8:	b140      	cbz	r0, 80012ec <_vfiprintf_r+0x198>
 80012da:	2340      	movs	r3, #64	; 0x40
 80012dc:	eba0 000a 	sub.w	r0, r0, sl
 80012e0:	fa03 f000 	lsl.w	r0, r3, r0
 80012e4:	9b04      	ldr	r3, [sp, #16]
 80012e6:	4303      	orrs	r3, r0
 80012e8:	3401      	adds	r4, #1
 80012ea:	9304      	str	r3, [sp, #16]
 80012ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012f0:	482c      	ldr	r0, [pc, #176]	; (80013a4 <_vfiprintf_r+0x250>)
 80012f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80012f6:	2206      	movs	r2, #6
 80012f8:	f7fe ff72 	bl	80001e0 <memchr>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d03f      	beq.n	8001380 <_vfiprintf_r+0x22c>
 8001300:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <_vfiprintf_r+0x254>)
 8001302:	bb1b      	cbnz	r3, 800134c <_vfiprintf_r+0x1f8>
 8001304:	9b03      	ldr	r3, [sp, #12]
 8001306:	3307      	adds	r3, #7
 8001308:	f023 0307 	bic.w	r3, r3, #7
 800130c:	3308      	adds	r3, #8
 800130e:	9303      	str	r3, [sp, #12]
 8001310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001312:	443b      	add	r3, r7
 8001314:	9309      	str	r3, [sp, #36]	; 0x24
 8001316:	e767      	b.n	80011e8 <_vfiprintf_r+0x94>
 8001318:	fb0c 3202 	mla	r2, ip, r2, r3
 800131c:	460c      	mov	r4, r1
 800131e:	2001      	movs	r0, #1
 8001320:	e7a5      	b.n	800126e <_vfiprintf_r+0x11a>
 8001322:	2300      	movs	r3, #0
 8001324:	3401      	adds	r4, #1
 8001326:	9305      	str	r3, [sp, #20]
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 0c0a 	mov.w	ip, #10
 800132e:	4620      	mov	r0, r4
 8001330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001334:	3a30      	subs	r2, #48	; 0x30
 8001336:	2a09      	cmp	r2, #9
 8001338:	d903      	bls.n	8001342 <_vfiprintf_r+0x1ee>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0c5      	beq.n	80012ca <_vfiprintf_r+0x176>
 800133e:	9105      	str	r1, [sp, #20]
 8001340:	e7c3      	b.n	80012ca <_vfiprintf_r+0x176>
 8001342:	fb0c 2101 	mla	r1, ip, r1, r2
 8001346:	4604      	mov	r4, r0
 8001348:	2301      	movs	r3, #1
 800134a:	e7f0      	b.n	800132e <_vfiprintf_r+0x1da>
 800134c:	ab03      	add	r3, sp, #12
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	462a      	mov	r2, r5
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <_vfiprintf_r+0x258>)
 8001354:	a904      	add	r1, sp, #16
 8001356:	4630      	mov	r0, r6
 8001358:	f3af 8000 	nop.w
 800135c:	4607      	mov	r7, r0
 800135e:	1c78      	adds	r0, r7, #1
 8001360:	d1d6      	bne.n	8001310 <_vfiprintf_r+0x1bc>
 8001362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001364:	07d9      	lsls	r1, r3, #31
 8001366:	d405      	bmi.n	8001374 <_vfiprintf_r+0x220>
 8001368:	89ab      	ldrh	r3, [r5, #12]
 800136a:	059a      	lsls	r2, r3, #22
 800136c:	d402      	bmi.n	8001374 <_vfiprintf_r+0x220>
 800136e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001370:	f7ff fe31 	bl	8000fd6 <__retarget_lock_release_recursive>
 8001374:	89ab      	ldrh	r3, [r5, #12]
 8001376:	065b      	lsls	r3, r3, #25
 8001378:	f53f af12 	bmi.w	80011a0 <_vfiprintf_r+0x4c>
 800137c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800137e:	e711      	b.n	80011a4 <_vfiprintf_r+0x50>
 8001380:	ab03      	add	r3, sp, #12
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	462a      	mov	r2, r5
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <_vfiprintf_r+0x258>)
 8001388:	a904      	add	r1, sp, #16
 800138a:	4630      	mov	r0, r6
 800138c:	f000 f880 	bl	8001490 <_printf_i>
 8001390:	e7e4      	b.n	800135c <_vfiprintf_r+0x208>
 8001392:	bf00      	nop
 8001394:	08001dd0 	.word	0x08001dd0
 8001398:	08001df0 	.word	0x08001df0
 800139c:	08001db0 	.word	0x08001db0
 80013a0:	08001e10 	.word	0x08001e10
 80013a4:	08001e1a 	.word	0x08001e1a
 80013a8:	00000000 	.word	0x00000000
 80013ac:	0800112f 	.word	0x0800112f
 80013b0:	08001e16 	.word	0x08001e16

080013b4 <_printf_common>:
 80013b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013b8:	4616      	mov	r6, r2
 80013ba:	4699      	mov	r9, r3
 80013bc:	688a      	ldr	r2, [r1, #8]
 80013be:	690b      	ldr	r3, [r1, #16]
 80013c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013c4:	4293      	cmp	r3, r2
 80013c6:	bfb8      	it	lt
 80013c8:	4613      	movlt	r3, r2
 80013ca:	6033      	str	r3, [r6, #0]
 80013cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013d0:	4607      	mov	r7, r0
 80013d2:	460c      	mov	r4, r1
 80013d4:	b10a      	cbz	r2, 80013da <_printf_common+0x26>
 80013d6:	3301      	adds	r3, #1
 80013d8:	6033      	str	r3, [r6, #0]
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	0699      	lsls	r1, r3, #26
 80013de:	bf42      	ittt	mi
 80013e0:	6833      	ldrmi	r3, [r6, #0]
 80013e2:	3302      	addmi	r3, #2
 80013e4:	6033      	strmi	r3, [r6, #0]
 80013e6:	6825      	ldr	r5, [r4, #0]
 80013e8:	f015 0506 	ands.w	r5, r5, #6
 80013ec:	d106      	bne.n	80013fc <_printf_common+0x48>
 80013ee:	f104 0a19 	add.w	sl, r4, #25
 80013f2:	68e3      	ldr	r3, [r4, #12]
 80013f4:	6832      	ldr	r2, [r6, #0]
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	42ab      	cmp	r3, r5
 80013fa:	dc26      	bgt.n	800144a <_printf_common+0x96>
 80013fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001400:	1e13      	subs	r3, r2, #0
 8001402:	6822      	ldr	r2, [r4, #0]
 8001404:	bf18      	it	ne
 8001406:	2301      	movne	r3, #1
 8001408:	0692      	lsls	r2, r2, #26
 800140a:	d42b      	bmi.n	8001464 <_printf_common+0xb0>
 800140c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001410:	4649      	mov	r1, r9
 8001412:	4638      	mov	r0, r7
 8001414:	47c0      	blx	r8
 8001416:	3001      	adds	r0, #1
 8001418:	d01e      	beq.n	8001458 <_printf_common+0xa4>
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	68e5      	ldr	r5, [r4, #12]
 800141e:	6832      	ldr	r2, [r6, #0]
 8001420:	f003 0306 	and.w	r3, r3, #6
 8001424:	2b04      	cmp	r3, #4
 8001426:	bf08      	it	eq
 8001428:	1aad      	subeq	r5, r5, r2
 800142a:	68a3      	ldr	r3, [r4, #8]
 800142c:	6922      	ldr	r2, [r4, #16]
 800142e:	bf0c      	ite	eq
 8001430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001434:	2500      	movne	r5, #0
 8001436:	4293      	cmp	r3, r2
 8001438:	bfc4      	itt	gt
 800143a:	1a9b      	subgt	r3, r3, r2
 800143c:	18ed      	addgt	r5, r5, r3
 800143e:	2600      	movs	r6, #0
 8001440:	341a      	adds	r4, #26
 8001442:	42b5      	cmp	r5, r6
 8001444:	d11a      	bne.n	800147c <_printf_common+0xc8>
 8001446:	2000      	movs	r0, #0
 8001448:	e008      	b.n	800145c <_printf_common+0xa8>
 800144a:	2301      	movs	r3, #1
 800144c:	4652      	mov	r2, sl
 800144e:	4649      	mov	r1, r9
 8001450:	4638      	mov	r0, r7
 8001452:	47c0      	blx	r8
 8001454:	3001      	adds	r0, #1
 8001456:	d103      	bne.n	8001460 <_printf_common+0xac>
 8001458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800145c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001460:	3501      	adds	r5, #1
 8001462:	e7c6      	b.n	80013f2 <_printf_common+0x3e>
 8001464:	18e1      	adds	r1, r4, r3
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	2030      	movs	r0, #48	; 0x30
 800146a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800146e:	4422      	add	r2, r4
 8001470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001478:	3302      	adds	r3, #2
 800147a:	e7c7      	b.n	800140c <_printf_common+0x58>
 800147c:	2301      	movs	r3, #1
 800147e:	4622      	mov	r2, r4
 8001480:	4649      	mov	r1, r9
 8001482:	4638      	mov	r0, r7
 8001484:	47c0      	blx	r8
 8001486:	3001      	adds	r0, #1
 8001488:	d0e6      	beq.n	8001458 <_printf_common+0xa4>
 800148a:	3601      	adds	r6, #1
 800148c:	e7d9      	b.n	8001442 <_printf_common+0x8e>
	...

08001490 <_printf_i>:
 8001490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001494:	7e0f      	ldrb	r7, [r1, #24]
 8001496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001498:	2f78      	cmp	r7, #120	; 0x78
 800149a:	4691      	mov	r9, r2
 800149c:	4680      	mov	r8, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	469a      	mov	sl, r3
 80014a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80014a6:	d807      	bhi.n	80014b8 <_printf_i+0x28>
 80014a8:	2f62      	cmp	r7, #98	; 0x62
 80014aa:	d80a      	bhi.n	80014c2 <_printf_i+0x32>
 80014ac:	2f00      	cmp	r7, #0
 80014ae:	f000 80d8 	beq.w	8001662 <_printf_i+0x1d2>
 80014b2:	2f58      	cmp	r7, #88	; 0x58
 80014b4:	f000 80a3 	beq.w	80015fe <_printf_i+0x16e>
 80014b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80014c0:	e03a      	b.n	8001538 <_printf_i+0xa8>
 80014c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80014c6:	2b15      	cmp	r3, #21
 80014c8:	d8f6      	bhi.n	80014b8 <_printf_i+0x28>
 80014ca:	a101      	add	r1, pc, #4	; (adr r1, 80014d0 <_printf_i+0x40>)
 80014cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014d0:	08001529 	.word	0x08001529
 80014d4:	0800153d 	.word	0x0800153d
 80014d8:	080014b9 	.word	0x080014b9
 80014dc:	080014b9 	.word	0x080014b9
 80014e0:	080014b9 	.word	0x080014b9
 80014e4:	080014b9 	.word	0x080014b9
 80014e8:	0800153d 	.word	0x0800153d
 80014ec:	080014b9 	.word	0x080014b9
 80014f0:	080014b9 	.word	0x080014b9
 80014f4:	080014b9 	.word	0x080014b9
 80014f8:	080014b9 	.word	0x080014b9
 80014fc:	08001649 	.word	0x08001649
 8001500:	0800156d 	.word	0x0800156d
 8001504:	0800162b 	.word	0x0800162b
 8001508:	080014b9 	.word	0x080014b9
 800150c:	080014b9 	.word	0x080014b9
 8001510:	0800166b 	.word	0x0800166b
 8001514:	080014b9 	.word	0x080014b9
 8001518:	0800156d 	.word	0x0800156d
 800151c:	080014b9 	.word	0x080014b9
 8001520:	080014b9 	.word	0x080014b9
 8001524:	08001633 	.word	0x08001633
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	602a      	str	r2, [r5, #0]
 8001530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001538:	2301      	movs	r3, #1
 800153a:	e0a3      	b.n	8001684 <_printf_i+0x1f4>
 800153c:	6820      	ldr	r0, [r4, #0]
 800153e:	6829      	ldr	r1, [r5, #0]
 8001540:	0606      	lsls	r6, r0, #24
 8001542:	f101 0304 	add.w	r3, r1, #4
 8001546:	d50a      	bpl.n	800155e <_printf_i+0xce>
 8001548:	680e      	ldr	r6, [r1, #0]
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	2e00      	cmp	r6, #0
 800154e:	da03      	bge.n	8001558 <_printf_i+0xc8>
 8001550:	232d      	movs	r3, #45	; 0x2d
 8001552:	4276      	negs	r6, r6
 8001554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001558:	485e      	ldr	r0, [pc, #376]	; (80016d4 <_printf_i+0x244>)
 800155a:	230a      	movs	r3, #10
 800155c:	e019      	b.n	8001592 <_printf_i+0x102>
 800155e:	680e      	ldr	r6, [r1, #0]
 8001560:	602b      	str	r3, [r5, #0]
 8001562:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001566:	bf18      	it	ne
 8001568:	b236      	sxthne	r6, r6
 800156a:	e7ef      	b.n	800154c <_printf_i+0xbc>
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	6820      	ldr	r0, [r4, #0]
 8001570:	1d19      	adds	r1, r3, #4
 8001572:	6029      	str	r1, [r5, #0]
 8001574:	0601      	lsls	r1, r0, #24
 8001576:	d501      	bpl.n	800157c <_printf_i+0xec>
 8001578:	681e      	ldr	r6, [r3, #0]
 800157a:	e002      	b.n	8001582 <_printf_i+0xf2>
 800157c:	0646      	lsls	r6, r0, #25
 800157e:	d5fb      	bpl.n	8001578 <_printf_i+0xe8>
 8001580:	881e      	ldrh	r6, [r3, #0]
 8001582:	4854      	ldr	r0, [pc, #336]	; (80016d4 <_printf_i+0x244>)
 8001584:	2f6f      	cmp	r7, #111	; 0x6f
 8001586:	bf0c      	ite	eq
 8001588:	2308      	moveq	r3, #8
 800158a:	230a      	movne	r3, #10
 800158c:	2100      	movs	r1, #0
 800158e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001592:	6865      	ldr	r5, [r4, #4]
 8001594:	60a5      	str	r5, [r4, #8]
 8001596:	2d00      	cmp	r5, #0
 8001598:	bfa2      	ittt	ge
 800159a:	6821      	ldrge	r1, [r4, #0]
 800159c:	f021 0104 	bicge.w	r1, r1, #4
 80015a0:	6021      	strge	r1, [r4, #0]
 80015a2:	b90e      	cbnz	r6, 80015a8 <_printf_i+0x118>
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	d04d      	beq.n	8001644 <_printf_i+0x1b4>
 80015a8:	4615      	mov	r5, r2
 80015aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80015ae:	fb03 6711 	mls	r7, r3, r1, r6
 80015b2:	5dc7      	ldrb	r7, [r0, r7]
 80015b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80015b8:	4637      	mov	r7, r6
 80015ba:	42bb      	cmp	r3, r7
 80015bc:	460e      	mov	r6, r1
 80015be:	d9f4      	bls.n	80015aa <_printf_i+0x11a>
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d10b      	bne.n	80015dc <_printf_i+0x14c>
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	07de      	lsls	r6, r3, #31
 80015c8:	d508      	bpl.n	80015dc <_printf_i+0x14c>
 80015ca:	6923      	ldr	r3, [r4, #16]
 80015cc:	6861      	ldr	r1, [r4, #4]
 80015ce:	4299      	cmp	r1, r3
 80015d0:	bfde      	ittt	le
 80015d2:	2330      	movle	r3, #48	; 0x30
 80015d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80015d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80015dc:	1b52      	subs	r2, r2, r5
 80015de:	6122      	str	r2, [r4, #16]
 80015e0:	f8cd a000 	str.w	sl, [sp]
 80015e4:	464b      	mov	r3, r9
 80015e6:	aa03      	add	r2, sp, #12
 80015e8:	4621      	mov	r1, r4
 80015ea:	4640      	mov	r0, r8
 80015ec:	f7ff fee2 	bl	80013b4 <_printf_common>
 80015f0:	3001      	adds	r0, #1
 80015f2:	d14c      	bne.n	800168e <_printf_i+0x1fe>
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f8:	b004      	add	sp, #16
 80015fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015fe:	4835      	ldr	r0, [pc, #212]	; (80016d4 <_printf_i+0x244>)
 8001600:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001604:	6829      	ldr	r1, [r5, #0]
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	f851 6b04 	ldr.w	r6, [r1], #4
 800160c:	6029      	str	r1, [r5, #0]
 800160e:	061d      	lsls	r5, r3, #24
 8001610:	d514      	bpl.n	800163c <_printf_i+0x1ac>
 8001612:	07df      	lsls	r7, r3, #31
 8001614:	bf44      	itt	mi
 8001616:	f043 0320 	orrmi.w	r3, r3, #32
 800161a:	6023      	strmi	r3, [r4, #0]
 800161c:	b91e      	cbnz	r6, 8001626 <_printf_i+0x196>
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	f023 0320 	bic.w	r3, r3, #32
 8001624:	6023      	str	r3, [r4, #0]
 8001626:	2310      	movs	r3, #16
 8001628:	e7b0      	b.n	800158c <_printf_i+0xfc>
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	2378      	movs	r3, #120	; 0x78
 8001634:	4828      	ldr	r0, [pc, #160]	; (80016d8 <_printf_i+0x248>)
 8001636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800163a:	e7e3      	b.n	8001604 <_printf_i+0x174>
 800163c:	0659      	lsls	r1, r3, #25
 800163e:	bf48      	it	mi
 8001640:	b2b6      	uxthmi	r6, r6
 8001642:	e7e6      	b.n	8001612 <_printf_i+0x182>
 8001644:	4615      	mov	r5, r2
 8001646:	e7bb      	b.n	80015c0 <_printf_i+0x130>
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	6826      	ldr	r6, [r4, #0]
 800164c:	6961      	ldr	r1, [r4, #20]
 800164e:	1d18      	adds	r0, r3, #4
 8001650:	6028      	str	r0, [r5, #0]
 8001652:	0635      	lsls	r5, r6, #24
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	d501      	bpl.n	800165c <_printf_i+0x1cc>
 8001658:	6019      	str	r1, [r3, #0]
 800165a:	e002      	b.n	8001662 <_printf_i+0x1d2>
 800165c:	0670      	lsls	r0, r6, #25
 800165e:	d5fb      	bpl.n	8001658 <_printf_i+0x1c8>
 8001660:	8019      	strh	r1, [r3, #0]
 8001662:	2300      	movs	r3, #0
 8001664:	6123      	str	r3, [r4, #16]
 8001666:	4615      	mov	r5, r2
 8001668:	e7ba      	b.n	80015e0 <_printf_i+0x150>
 800166a:	682b      	ldr	r3, [r5, #0]
 800166c:	1d1a      	adds	r2, r3, #4
 800166e:	602a      	str	r2, [r5, #0]
 8001670:	681d      	ldr	r5, [r3, #0]
 8001672:	6862      	ldr	r2, [r4, #4]
 8001674:	2100      	movs	r1, #0
 8001676:	4628      	mov	r0, r5
 8001678:	f7fe fdb2 	bl	80001e0 <memchr>
 800167c:	b108      	cbz	r0, 8001682 <_printf_i+0x1f2>
 800167e:	1b40      	subs	r0, r0, r5
 8001680:	6060      	str	r0, [r4, #4]
 8001682:	6863      	ldr	r3, [r4, #4]
 8001684:	6123      	str	r3, [r4, #16]
 8001686:	2300      	movs	r3, #0
 8001688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800168c:	e7a8      	b.n	80015e0 <_printf_i+0x150>
 800168e:	6923      	ldr	r3, [r4, #16]
 8001690:	462a      	mov	r2, r5
 8001692:	4649      	mov	r1, r9
 8001694:	4640      	mov	r0, r8
 8001696:	47d0      	blx	sl
 8001698:	3001      	adds	r0, #1
 800169a:	d0ab      	beq.n	80015f4 <_printf_i+0x164>
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	079b      	lsls	r3, r3, #30
 80016a0:	d413      	bmi.n	80016ca <_printf_i+0x23a>
 80016a2:	68e0      	ldr	r0, [r4, #12]
 80016a4:	9b03      	ldr	r3, [sp, #12]
 80016a6:	4298      	cmp	r0, r3
 80016a8:	bfb8      	it	lt
 80016aa:	4618      	movlt	r0, r3
 80016ac:	e7a4      	b.n	80015f8 <_printf_i+0x168>
 80016ae:	2301      	movs	r3, #1
 80016b0:	4632      	mov	r2, r6
 80016b2:	4649      	mov	r1, r9
 80016b4:	4640      	mov	r0, r8
 80016b6:	47d0      	blx	sl
 80016b8:	3001      	adds	r0, #1
 80016ba:	d09b      	beq.n	80015f4 <_printf_i+0x164>
 80016bc:	3501      	adds	r5, #1
 80016be:	68e3      	ldr	r3, [r4, #12]
 80016c0:	9903      	ldr	r1, [sp, #12]
 80016c2:	1a5b      	subs	r3, r3, r1
 80016c4:	42ab      	cmp	r3, r5
 80016c6:	dcf2      	bgt.n	80016ae <_printf_i+0x21e>
 80016c8:	e7eb      	b.n	80016a2 <_printf_i+0x212>
 80016ca:	2500      	movs	r5, #0
 80016cc:	f104 0619 	add.w	r6, r4, #25
 80016d0:	e7f5      	b.n	80016be <_printf_i+0x22e>
 80016d2:	bf00      	nop
 80016d4:	08001e21 	.word	0x08001e21
 80016d8:	08001e32 	.word	0x08001e32

080016dc <_putc_r>:
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	460d      	mov	r5, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	4606      	mov	r6, r0
 80016e4:	b118      	cbz	r0, 80016ee <_putc_r+0x12>
 80016e6:	6983      	ldr	r3, [r0, #24]
 80016e8:	b90b      	cbnz	r3, 80016ee <_putc_r+0x12>
 80016ea:	f7ff fbd5 	bl	8000e98 <__sinit>
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <_putc_r+0x84>)
 80016f0:	429c      	cmp	r4, r3
 80016f2:	d124      	bne.n	800173e <_putc_r+0x62>
 80016f4:	6874      	ldr	r4, [r6, #4]
 80016f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016f8:	07d8      	lsls	r0, r3, #31
 80016fa:	d405      	bmi.n	8001708 <_putc_r+0x2c>
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	0599      	lsls	r1, r3, #22
 8001700:	d402      	bmi.n	8001708 <_putc_r+0x2c>
 8001702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001704:	f7ff fc66 	bl	8000fd4 <__retarget_lock_acquire_recursive>
 8001708:	68a3      	ldr	r3, [r4, #8]
 800170a:	3b01      	subs	r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	60a3      	str	r3, [r4, #8]
 8001710:	da05      	bge.n	800171e <_putc_r+0x42>
 8001712:	69a2      	ldr	r2, [r4, #24]
 8001714:	4293      	cmp	r3, r2
 8001716:	db1c      	blt.n	8001752 <_putc_r+0x76>
 8001718:	b2eb      	uxtb	r3, r5
 800171a:	2b0a      	cmp	r3, #10
 800171c:	d019      	beq.n	8001752 <_putc_r+0x76>
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	6022      	str	r2, [r4, #0]
 8001724:	701d      	strb	r5, [r3, #0]
 8001726:	b2ed      	uxtb	r5, r5
 8001728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800172a:	07da      	lsls	r2, r3, #31
 800172c:	d405      	bmi.n	800173a <_putc_r+0x5e>
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	059b      	lsls	r3, r3, #22
 8001732:	d402      	bmi.n	800173a <_putc_r+0x5e>
 8001734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001736:	f7ff fc4e 	bl	8000fd6 <__retarget_lock_release_recursive>
 800173a:	4628      	mov	r0, r5
 800173c:	bd70      	pop	{r4, r5, r6, pc}
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <_putc_r+0x88>)
 8001740:	429c      	cmp	r4, r3
 8001742:	d101      	bne.n	8001748 <_putc_r+0x6c>
 8001744:	68b4      	ldr	r4, [r6, #8]
 8001746:	e7d6      	b.n	80016f6 <_putc_r+0x1a>
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <_putc_r+0x8c>)
 800174a:	429c      	cmp	r4, r3
 800174c:	bf08      	it	eq
 800174e:	68f4      	ldreq	r4, [r6, #12]
 8001750:	e7d1      	b.n	80016f6 <_putc_r+0x1a>
 8001752:	4629      	mov	r1, r5
 8001754:	4622      	mov	r2, r4
 8001756:	4630      	mov	r0, r6
 8001758:	f000 f85c 	bl	8001814 <__swbuf_r>
 800175c:	4605      	mov	r5, r0
 800175e:	e7e3      	b.n	8001728 <_putc_r+0x4c>
 8001760:	08001dd0 	.word	0x08001dd0
 8001764:	08001df0 	.word	0x08001df0
 8001768:	08001db0 	.word	0x08001db0

0800176c <_sbrk_r>:
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4d06      	ldr	r5, [pc, #24]	; (8001788 <_sbrk_r+0x1c>)
 8001770:	2300      	movs	r3, #0
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	602b      	str	r3, [r5, #0]
 8001778:	f7ff f8a8 	bl	80008cc <_sbrk>
 800177c:	1c43      	adds	r3, r0, #1
 800177e:	d102      	bne.n	8001786 <_sbrk_r+0x1a>
 8001780:	682b      	ldr	r3, [r5, #0]
 8001782:	b103      	cbz	r3, 8001786 <_sbrk_r+0x1a>
 8001784:	6023      	str	r3, [r4, #0]
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	20000098 	.word	0x20000098

0800178c <__sread>:
 800178c:	b510      	push	{r4, lr}
 800178e:	460c      	mov	r4, r1
 8001790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001794:	f000 fab2 	bl	8001cfc <_read_r>
 8001798:	2800      	cmp	r0, #0
 800179a:	bfab      	itete	ge
 800179c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800179e:	89a3      	ldrhlt	r3, [r4, #12]
 80017a0:	181b      	addge	r3, r3, r0
 80017a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017a6:	bfac      	ite	ge
 80017a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80017aa:	81a3      	strhlt	r3, [r4, #12]
 80017ac:	bd10      	pop	{r4, pc}

080017ae <__swrite>:
 80017ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b2:	461f      	mov	r7, r3
 80017b4:	898b      	ldrh	r3, [r1, #12]
 80017b6:	05db      	lsls	r3, r3, #23
 80017b8:	4605      	mov	r5, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	4616      	mov	r6, r2
 80017be:	d505      	bpl.n	80017cc <__swrite+0x1e>
 80017c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017c4:	2302      	movs	r3, #2
 80017c6:	2200      	movs	r2, #0
 80017c8:	f000 f9c8 	bl	8001b5c <_lseek_r>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017d6:	81a3      	strh	r3, [r4, #12]
 80017d8:	4632      	mov	r2, r6
 80017da:	463b      	mov	r3, r7
 80017dc:	4628      	mov	r0, r5
 80017de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017e2:	f000 b869 	b.w	80018b8 <_write_r>

080017e6 <__sseek>:
 80017e6:	b510      	push	{r4, lr}
 80017e8:	460c      	mov	r4, r1
 80017ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017ee:	f000 f9b5 	bl	8001b5c <_lseek_r>
 80017f2:	1c43      	adds	r3, r0, #1
 80017f4:	89a3      	ldrh	r3, [r4, #12]
 80017f6:	bf15      	itete	ne
 80017f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80017fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80017fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001802:	81a3      	strheq	r3, [r4, #12]
 8001804:	bf18      	it	ne
 8001806:	81a3      	strhne	r3, [r4, #12]
 8001808:	bd10      	pop	{r4, pc}

0800180a <__sclose>:
 800180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800180e:	f000 b8d3 	b.w	80019b8 <_close_r>
	...

08001814 <__swbuf_r>:
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001816:	460e      	mov	r6, r1
 8001818:	4614      	mov	r4, r2
 800181a:	4605      	mov	r5, r0
 800181c:	b118      	cbz	r0, 8001826 <__swbuf_r+0x12>
 800181e:	6983      	ldr	r3, [r0, #24]
 8001820:	b90b      	cbnz	r3, 8001826 <__swbuf_r+0x12>
 8001822:	f7ff fb39 	bl	8000e98 <__sinit>
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <__swbuf_r+0x98>)
 8001828:	429c      	cmp	r4, r3
 800182a:	d12b      	bne.n	8001884 <__swbuf_r+0x70>
 800182c:	686c      	ldr	r4, [r5, #4]
 800182e:	69a3      	ldr	r3, [r4, #24]
 8001830:	60a3      	str	r3, [r4, #8]
 8001832:	89a3      	ldrh	r3, [r4, #12]
 8001834:	071a      	lsls	r2, r3, #28
 8001836:	d52f      	bpl.n	8001898 <__swbuf_r+0x84>
 8001838:	6923      	ldr	r3, [r4, #16]
 800183a:	b36b      	cbz	r3, 8001898 <__swbuf_r+0x84>
 800183c:	6923      	ldr	r3, [r4, #16]
 800183e:	6820      	ldr	r0, [r4, #0]
 8001840:	1ac0      	subs	r0, r0, r3
 8001842:	6963      	ldr	r3, [r4, #20]
 8001844:	b2f6      	uxtb	r6, r6
 8001846:	4283      	cmp	r3, r0
 8001848:	4637      	mov	r7, r6
 800184a:	dc04      	bgt.n	8001856 <__swbuf_r+0x42>
 800184c:	4621      	mov	r1, r4
 800184e:	4628      	mov	r0, r5
 8001850:	f000 f948 	bl	8001ae4 <_fflush_r>
 8001854:	bb30      	cbnz	r0, 80018a4 <__swbuf_r+0x90>
 8001856:	68a3      	ldr	r3, [r4, #8]
 8001858:	3b01      	subs	r3, #1
 800185a:	60a3      	str	r3, [r4, #8]
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	6022      	str	r2, [r4, #0]
 8001862:	701e      	strb	r6, [r3, #0]
 8001864:	6963      	ldr	r3, [r4, #20]
 8001866:	3001      	adds	r0, #1
 8001868:	4283      	cmp	r3, r0
 800186a:	d004      	beq.n	8001876 <__swbuf_r+0x62>
 800186c:	89a3      	ldrh	r3, [r4, #12]
 800186e:	07db      	lsls	r3, r3, #31
 8001870:	d506      	bpl.n	8001880 <__swbuf_r+0x6c>
 8001872:	2e0a      	cmp	r6, #10
 8001874:	d104      	bne.n	8001880 <__swbuf_r+0x6c>
 8001876:	4621      	mov	r1, r4
 8001878:	4628      	mov	r0, r5
 800187a:	f000 f933 	bl	8001ae4 <_fflush_r>
 800187e:	b988      	cbnz	r0, 80018a4 <__swbuf_r+0x90>
 8001880:	4638      	mov	r0, r7
 8001882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <__swbuf_r+0x9c>)
 8001886:	429c      	cmp	r4, r3
 8001888:	d101      	bne.n	800188e <__swbuf_r+0x7a>
 800188a:	68ac      	ldr	r4, [r5, #8]
 800188c:	e7cf      	b.n	800182e <__swbuf_r+0x1a>
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <__swbuf_r+0xa0>)
 8001890:	429c      	cmp	r4, r3
 8001892:	bf08      	it	eq
 8001894:	68ec      	ldreq	r4, [r5, #12]
 8001896:	e7ca      	b.n	800182e <__swbuf_r+0x1a>
 8001898:	4621      	mov	r1, r4
 800189a:	4628      	mov	r0, r5
 800189c:	f000 f81e 	bl	80018dc <__swsetup_r>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d0cb      	beq.n	800183c <__swbuf_r+0x28>
 80018a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80018a8:	e7ea      	b.n	8001880 <__swbuf_r+0x6c>
 80018aa:	bf00      	nop
 80018ac:	08001dd0 	.word	0x08001dd0
 80018b0:	08001df0 	.word	0x08001df0
 80018b4:	08001db0 	.word	0x08001db0

080018b8 <_write_r>:
 80018b8:	b538      	push	{r3, r4, r5, lr}
 80018ba:	4d07      	ldr	r5, [pc, #28]	; (80018d8 <_write_r+0x20>)
 80018bc:	4604      	mov	r4, r0
 80018be:	4608      	mov	r0, r1
 80018c0:	4611      	mov	r1, r2
 80018c2:	2200      	movs	r2, #0
 80018c4:	602a      	str	r2, [r5, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f7fe fee8 	bl	800069c <_write>
 80018cc:	1c43      	adds	r3, r0, #1
 80018ce:	d102      	bne.n	80018d6 <_write_r+0x1e>
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	b103      	cbz	r3, 80018d6 <_write_r+0x1e>
 80018d4:	6023      	str	r3, [r4, #0]
 80018d6:	bd38      	pop	{r3, r4, r5, pc}
 80018d8:	20000098 	.word	0x20000098

080018dc <__swsetup_r>:
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <__swsetup_r+0xcc>)
 80018de:	b570      	push	{r4, r5, r6, lr}
 80018e0:	681d      	ldr	r5, [r3, #0]
 80018e2:	4606      	mov	r6, r0
 80018e4:	460c      	mov	r4, r1
 80018e6:	b125      	cbz	r5, 80018f2 <__swsetup_r+0x16>
 80018e8:	69ab      	ldr	r3, [r5, #24]
 80018ea:	b913      	cbnz	r3, 80018f2 <__swsetup_r+0x16>
 80018ec:	4628      	mov	r0, r5
 80018ee:	f7ff fad3 	bl	8000e98 <__sinit>
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <__swsetup_r+0xd0>)
 80018f4:	429c      	cmp	r4, r3
 80018f6:	d10f      	bne.n	8001918 <__swsetup_r+0x3c>
 80018f8:	686c      	ldr	r4, [r5, #4]
 80018fa:	89a3      	ldrh	r3, [r4, #12]
 80018fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001900:	0719      	lsls	r1, r3, #28
 8001902:	d42c      	bmi.n	800195e <__swsetup_r+0x82>
 8001904:	06dd      	lsls	r5, r3, #27
 8001906:	d411      	bmi.n	800192c <__swsetup_r+0x50>
 8001908:	2309      	movs	r3, #9
 800190a:	6033      	str	r3, [r6, #0]
 800190c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001910:	81a3      	strh	r3, [r4, #12]
 8001912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001916:	e03e      	b.n	8001996 <__swsetup_r+0xba>
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <__swsetup_r+0xd4>)
 800191a:	429c      	cmp	r4, r3
 800191c:	d101      	bne.n	8001922 <__swsetup_r+0x46>
 800191e:	68ac      	ldr	r4, [r5, #8]
 8001920:	e7eb      	b.n	80018fa <__swsetup_r+0x1e>
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <__swsetup_r+0xd8>)
 8001924:	429c      	cmp	r4, r3
 8001926:	bf08      	it	eq
 8001928:	68ec      	ldreq	r4, [r5, #12]
 800192a:	e7e6      	b.n	80018fa <__swsetup_r+0x1e>
 800192c:	0758      	lsls	r0, r3, #29
 800192e:	d512      	bpl.n	8001956 <__swsetup_r+0x7a>
 8001930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001932:	b141      	cbz	r1, 8001946 <__swsetup_r+0x6a>
 8001934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001938:	4299      	cmp	r1, r3
 800193a:	d002      	beq.n	8001942 <__swsetup_r+0x66>
 800193c:	4630      	mov	r0, r6
 800193e:	f000 f991 	bl	8001c64 <_free_r>
 8001942:	2300      	movs	r3, #0
 8001944:	6363      	str	r3, [r4, #52]	; 0x34
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800194c:	81a3      	strh	r3, [r4, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	6063      	str	r3, [r4, #4]
 8001952:	6923      	ldr	r3, [r4, #16]
 8001954:	6023      	str	r3, [r4, #0]
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	6923      	ldr	r3, [r4, #16]
 8001960:	b94b      	cbnz	r3, 8001976 <__swsetup_r+0x9a>
 8001962:	89a3      	ldrh	r3, [r4, #12]
 8001964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196c:	d003      	beq.n	8001976 <__swsetup_r+0x9a>
 800196e:	4621      	mov	r1, r4
 8001970:	4630      	mov	r0, r6
 8001972:	f000 f92b 	bl	8001bcc <__smakebuf_r>
 8001976:	89a0      	ldrh	r0, [r4, #12]
 8001978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800197c:	f010 0301 	ands.w	r3, r0, #1
 8001980:	d00a      	beq.n	8001998 <__swsetup_r+0xbc>
 8001982:	2300      	movs	r3, #0
 8001984:	60a3      	str	r3, [r4, #8]
 8001986:	6963      	ldr	r3, [r4, #20]
 8001988:	425b      	negs	r3, r3
 800198a:	61a3      	str	r3, [r4, #24]
 800198c:	6923      	ldr	r3, [r4, #16]
 800198e:	b943      	cbnz	r3, 80019a2 <__swsetup_r+0xc6>
 8001990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001994:	d1ba      	bne.n	800190c <__swsetup_r+0x30>
 8001996:	bd70      	pop	{r4, r5, r6, pc}
 8001998:	0781      	lsls	r1, r0, #30
 800199a:	bf58      	it	pl
 800199c:	6963      	ldrpl	r3, [r4, #20]
 800199e:	60a3      	str	r3, [r4, #8]
 80019a0:	e7f4      	b.n	800198c <__swsetup_r+0xb0>
 80019a2:	2000      	movs	r0, #0
 80019a4:	e7f7      	b.n	8001996 <__swsetup_r+0xba>
 80019a6:	bf00      	nop
 80019a8:	20000004 	.word	0x20000004
 80019ac:	08001dd0 	.word	0x08001dd0
 80019b0:	08001df0 	.word	0x08001df0
 80019b4:	08001db0 	.word	0x08001db0

080019b8 <_close_r>:
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	4d06      	ldr	r5, [pc, #24]	; (80019d4 <_close_r+0x1c>)
 80019bc:	2300      	movs	r3, #0
 80019be:	4604      	mov	r4, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	602b      	str	r3, [r5, #0]
 80019c4:	f7fe ff76 	bl	80008b4 <_close>
 80019c8:	1c43      	adds	r3, r0, #1
 80019ca:	d102      	bne.n	80019d2 <_close_r+0x1a>
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	b103      	cbz	r3, 80019d2 <_close_r+0x1a>
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	bd38      	pop	{r3, r4, r5, pc}
 80019d4:	20000098 	.word	0x20000098

080019d8 <__sflush_r>:
 80019d8:	898a      	ldrh	r2, [r1, #12]
 80019da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019de:	4605      	mov	r5, r0
 80019e0:	0710      	lsls	r0, r2, #28
 80019e2:	460c      	mov	r4, r1
 80019e4:	d458      	bmi.n	8001a98 <__sflush_r+0xc0>
 80019e6:	684b      	ldr	r3, [r1, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dc05      	bgt.n	80019f8 <__sflush_r+0x20>
 80019ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc02      	bgt.n	80019f8 <__sflush_r+0x20>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019fa:	2e00      	cmp	r6, #0
 80019fc:	d0f9      	beq.n	80019f2 <__sflush_r+0x1a>
 80019fe:	2300      	movs	r3, #0
 8001a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a04:	682f      	ldr	r7, [r5, #0]
 8001a06:	602b      	str	r3, [r5, #0]
 8001a08:	d032      	beq.n	8001a70 <__sflush_r+0x98>
 8001a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a0c:	89a3      	ldrh	r3, [r4, #12]
 8001a0e:	075a      	lsls	r2, r3, #29
 8001a10:	d505      	bpl.n	8001a1e <__sflush_r+0x46>
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	1ac0      	subs	r0, r0, r3
 8001a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a18:	b10b      	cbz	r3, 8001a1e <__sflush_r+0x46>
 8001a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a1c:	1ac0      	subs	r0, r0, r3
 8001a1e:	2300      	movs	r3, #0
 8001a20:	4602      	mov	r2, r0
 8001a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a24:	6a21      	ldr	r1, [r4, #32]
 8001a26:	4628      	mov	r0, r5
 8001a28:	47b0      	blx	r6
 8001a2a:	1c43      	adds	r3, r0, #1
 8001a2c:	89a3      	ldrh	r3, [r4, #12]
 8001a2e:	d106      	bne.n	8001a3e <__sflush_r+0x66>
 8001a30:	6829      	ldr	r1, [r5, #0]
 8001a32:	291d      	cmp	r1, #29
 8001a34:	d82c      	bhi.n	8001a90 <__sflush_r+0xb8>
 8001a36:	4a2a      	ldr	r2, [pc, #168]	; (8001ae0 <__sflush_r+0x108>)
 8001a38:	40ca      	lsrs	r2, r1
 8001a3a:	07d6      	lsls	r6, r2, #31
 8001a3c:	d528      	bpl.n	8001a90 <__sflush_r+0xb8>
 8001a3e:	2200      	movs	r2, #0
 8001a40:	6062      	str	r2, [r4, #4]
 8001a42:	04d9      	lsls	r1, r3, #19
 8001a44:	6922      	ldr	r2, [r4, #16]
 8001a46:	6022      	str	r2, [r4, #0]
 8001a48:	d504      	bpl.n	8001a54 <__sflush_r+0x7c>
 8001a4a:	1c42      	adds	r2, r0, #1
 8001a4c:	d101      	bne.n	8001a52 <__sflush_r+0x7a>
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	b903      	cbnz	r3, 8001a54 <__sflush_r+0x7c>
 8001a52:	6560      	str	r0, [r4, #84]	; 0x54
 8001a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a56:	602f      	str	r7, [r5, #0]
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	d0ca      	beq.n	80019f2 <__sflush_r+0x1a>
 8001a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a60:	4299      	cmp	r1, r3
 8001a62:	d002      	beq.n	8001a6a <__sflush_r+0x92>
 8001a64:	4628      	mov	r0, r5
 8001a66:	f000 f8fd 	bl	8001c64 <_free_r>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8001a6e:	e7c1      	b.n	80019f4 <__sflush_r+0x1c>
 8001a70:	6a21      	ldr	r1, [r4, #32]
 8001a72:	2301      	movs	r3, #1
 8001a74:	4628      	mov	r0, r5
 8001a76:	47b0      	blx	r6
 8001a78:	1c41      	adds	r1, r0, #1
 8001a7a:	d1c7      	bne.n	8001a0c <__sflush_r+0x34>
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0c4      	beq.n	8001a0c <__sflush_r+0x34>
 8001a82:	2b1d      	cmp	r3, #29
 8001a84:	d001      	beq.n	8001a8a <__sflush_r+0xb2>
 8001a86:	2b16      	cmp	r3, #22
 8001a88:	d101      	bne.n	8001a8e <__sflush_r+0xb6>
 8001a8a:	602f      	str	r7, [r5, #0]
 8001a8c:	e7b1      	b.n	80019f2 <__sflush_r+0x1a>
 8001a8e:	89a3      	ldrh	r3, [r4, #12]
 8001a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a94:	81a3      	strh	r3, [r4, #12]
 8001a96:	e7ad      	b.n	80019f4 <__sflush_r+0x1c>
 8001a98:	690f      	ldr	r7, [r1, #16]
 8001a9a:	2f00      	cmp	r7, #0
 8001a9c:	d0a9      	beq.n	80019f2 <__sflush_r+0x1a>
 8001a9e:	0793      	lsls	r3, r2, #30
 8001aa0:	680e      	ldr	r6, [r1, #0]
 8001aa2:	bf08      	it	eq
 8001aa4:	694b      	ldreq	r3, [r1, #20]
 8001aa6:	600f      	str	r7, [r1, #0]
 8001aa8:	bf18      	it	ne
 8001aaa:	2300      	movne	r3, #0
 8001aac:	eba6 0807 	sub.w	r8, r6, r7
 8001ab0:	608b      	str	r3, [r1, #8]
 8001ab2:	f1b8 0f00 	cmp.w	r8, #0
 8001ab6:	dd9c      	ble.n	80019f2 <__sflush_r+0x1a>
 8001ab8:	6a21      	ldr	r1, [r4, #32]
 8001aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001abc:	4643      	mov	r3, r8
 8001abe:	463a      	mov	r2, r7
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	47b0      	blx	r6
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	dc06      	bgt.n	8001ad6 <__sflush_r+0xfe>
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ace:	81a3      	strh	r3, [r4, #12]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad4:	e78e      	b.n	80019f4 <__sflush_r+0x1c>
 8001ad6:	4407      	add	r7, r0
 8001ad8:	eba8 0800 	sub.w	r8, r8, r0
 8001adc:	e7e9      	b.n	8001ab2 <__sflush_r+0xda>
 8001ade:	bf00      	nop
 8001ae0:	20400001 	.word	0x20400001

08001ae4 <_fflush_r>:
 8001ae4:	b538      	push	{r3, r4, r5, lr}
 8001ae6:	690b      	ldr	r3, [r1, #16]
 8001ae8:	4605      	mov	r5, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	b913      	cbnz	r3, 8001af4 <_fflush_r+0x10>
 8001aee:	2500      	movs	r5, #0
 8001af0:	4628      	mov	r0, r5
 8001af2:	bd38      	pop	{r3, r4, r5, pc}
 8001af4:	b118      	cbz	r0, 8001afe <_fflush_r+0x1a>
 8001af6:	6983      	ldr	r3, [r0, #24]
 8001af8:	b90b      	cbnz	r3, 8001afe <_fflush_r+0x1a>
 8001afa:	f7ff f9cd 	bl	8000e98 <__sinit>
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <_fflush_r+0x6c>)
 8001b00:	429c      	cmp	r4, r3
 8001b02:	d11b      	bne.n	8001b3c <_fflush_r+0x58>
 8001b04:	686c      	ldr	r4, [r5, #4]
 8001b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ef      	beq.n	8001aee <_fflush_r+0xa>
 8001b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b10:	07d0      	lsls	r0, r2, #31
 8001b12:	d404      	bmi.n	8001b1e <_fflush_r+0x3a>
 8001b14:	0599      	lsls	r1, r3, #22
 8001b16:	d402      	bmi.n	8001b1e <_fflush_r+0x3a>
 8001b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b1a:	f7ff fa5b 	bl	8000fd4 <__retarget_lock_acquire_recursive>
 8001b1e:	4628      	mov	r0, r5
 8001b20:	4621      	mov	r1, r4
 8001b22:	f7ff ff59 	bl	80019d8 <__sflush_r>
 8001b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b28:	07da      	lsls	r2, r3, #31
 8001b2a:	4605      	mov	r5, r0
 8001b2c:	d4e0      	bmi.n	8001af0 <_fflush_r+0xc>
 8001b2e:	89a3      	ldrh	r3, [r4, #12]
 8001b30:	059b      	lsls	r3, r3, #22
 8001b32:	d4dd      	bmi.n	8001af0 <_fflush_r+0xc>
 8001b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b36:	f7ff fa4e 	bl	8000fd6 <__retarget_lock_release_recursive>
 8001b3a:	e7d9      	b.n	8001af0 <_fflush_r+0xc>
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <_fflush_r+0x70>)
 8001b3e:	429c      	cmp	r4, r3
 8001b40:	d101      	bne.n	8001b46 <_fflush_r+0x62>
 8001b42:	68ac      	ldr	r4, [r5, #8]
 8001b44:	e7df      	b.n	8001b06 <_fflush_r+0x22>
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <_fflush_r+0x74>)
 8001b48:	429c      	cmp	r4, r3
 8001b4a:	bf08      	it	eq
 8001b4c:	68ec      	ldreq	r4, [r5, #12]
 8001b4e:	e7da      	b.n	8001b06 <_fflush_r+0x22>
 8001b50:	08001dd0 	.word	0x08001dd0
 8001b54:	08001df0 	.word	0x08001df0
 8001b58:	08001db0 	.word	0x08001db0

08001b5c <_lseek_r>:
 8001b5c:	b538      	push	{r3, r4, r5, lr}
 8001b5e:	4d07      	ldr	r5, [pc, #28]	; (8001b7c <_lseek_r+0x20>)
 8001b60:	4604      	mov	r4, r0
 8001b62:	4608      	mov	r0, r1
 8001b64:	4611      	mov	r1, r2
 8001b66:	2200      	movs	r2, #0
 8001b68:	602a      	str	r2, [r5, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f7fe feac 	bl	80008c8 <_lseek>
 8001b70:	1c43      	adds	r3, r0, #1
 8001b72:	d102      	bne.n	8001b7a <_lseek_r+0x1e>
 8001b74:	682b      	ldr	r3, [r5, #0]
 8001b76:	b103      	cbz	r3, 8001b7a <_lseek_r+0x1e>
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
 8001b7c:	20000098 	.word	0x20000098

08001b80 <__swhatbuf_r>:
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	460e      	mov	r6, r1
 8001b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	b096      	sub	sp, #88	; 0x58
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	da08      	bge.n	8001ba4 <__swhatbuf_r+0x24>
 8001b92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	602a      	str	r2, [r5, #0]
 8001b9a:	061a      	lsls	r2, r3, #24
 8001b9c:	d410      	bmi.n	8001bc0 <__swhatbuf_r+0x40>
 8001b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba2:	e00e      	b.n	8001bc2 <__swhatbuf_r+0x42>
 8001ba4:	466a      	mov	r2, sp
 8001ba6:	f000 f8bb 	bl	8001d20 <_fstat_r>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	dbf1      	blt.n	8001b92 <__swhatbuf_r+0x12>
 8001bae:	9a01      	ldr	r2, [sp, #4]
 8001bb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001bb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001bb8:	425a      	negs	r2, r3
 8001bba:	415a      	adcs	r2, r3
 8001bbc:	602a      	str	r2, [r5, #0]
 8001bbe:	e7ee      	b.n	8001b9e <__swhatbuf_r+0x1e>
 8001bc0:	2340      	movs	r3, #64	; 0x40
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	b016      	add	sp, #88	; 0x58
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001bcc <__smakebuf_r>:
 8001bcc:	898b      	ldrh	r3, [r1, #12]
 8001bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001bd0:	079d      	lsls	r5, r3, #30
 8001bd2:	4606      	mov	r6, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	d507      	bpl.n	8001be8 <__smakebuf_r+0x1c>
 8001bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001bdc:	6023      	str	r3, [r4, #0]
 8001bde:	6123      	str	r3, [r4, #16]
 8001be0:	2301      	movs	r3, #1
 8001be2:	6163      	str	r3, [r4, #20]
 8001be4:	b002      	add	sp, #8
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	ab01      	add	r3, sp, #4
 8001bea:	466a      	mov	r2, sp
 8001bec:	f7ff ffc8 	bl	8001b80 <__swhatbuf_r>
 8001bf0:	9900      	ldr	r1, [sp, #0]
 8001bf2:	4605      	mov	r5, r0
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f7ff fa0f 	bl	8001018 <_malloc_r>
 8001bfa:	b948      	cbnz	r0, 8001c10 <__smakebuf_r+0x44>
 8001bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c00:	059a      	lsls	r2, r3, #22
 8001c02:	d4ef      	bmi.n	8001be4 <__smakebuf_r+0x18>
 8001c04:	f023 0303 	bic.w	r3, r3, #3
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	81a3      	strh	r3, [r4, #12]
 8001c0e:	e7e3      	b.n	8001bd8 <__smakebuf_r+0xc>
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <__smakebuf_r+0x7c>)
 8001c12:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c14:	89a3      	ldrh	r3, [r4, #12]
 8001c16:	6020      	str	r0, [r4, #0]
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	81a3      	strh	r3, [r4, #12]
 8001c1e:	9b00      	ldr	r3, [sp, #0]
 8001c20:	6163      	str	r3, [r4, #20]
 8001c22:	9b01      	ldr	r3, [sp, #4]
 8001c24:	6120      	str	r0, [r4, #16]
 8001c26:	b15b      	cbz	r3, 8001c40 <__smakebuf_r+0x74>
 8001c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f000 f889 	bl	8001d44 <_isatty_r>
 8001c32:	b128      	cbz	r0, 8001c40 <__smakebuf_r+0x74>
 8001c34:	89a3      	ldrh	r3, [r4, #12]
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	81a3      	strh	r3, [r4, #12]
 8001c40:	89a0      	ldrh	r0, [r4, #12]
 8001c42:	4305      	orrs	r5, r0
 8001c44:	81a5      	strh	r5, [r4, #12]
 8001c46:	e7cd      	b.n	8001be4 <__smakebuf_r+0x18>
 8001c48:	08000e31 	.word	0x08000e31

08001c4c <__malloc_lock>:
 8001c4c:	4801      	ldr	r0, [pc, #4]	; (8001c54 <__malloc_lock+0x8>)
 8001c4e:	f7ff b9c1 	b.w	8000fd4 <__retarget_lock_acquire_recursive>
 8001c52:	bf00      	nop
 8001c54:	2000008c 	.word	0x2000008c

08001c58 <__malloc_unlock>:
 8001c58:	4801      	ldr	r0, [pc, #4]	; (8001c60 <__malloc_unlock+0x8>)
 8001c5a:	f7ff b9bc 	b.w	8000fd6 <__retarget_lock_release_recursive>
 8001c5e:	bf00      	nop
 8001c60:	2000008c 	.word	0x2000008c

08001c64 <_free_r>:
 8001c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c66:	2900      	cmp	r1, #0
 8001c68:	d044      	beq.n	8001cf4 <_free_r+0x90>
 8001c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c6e:	9001      	str	r0, [sp, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f1a1 0404 	sub.w	r4, r1, #4
 8001c76:	bfb8      	it	lt
 8001c78:	18e4      	addlt	r4, r4, r3
 8001c7a:	f7ff ffe7 	bl	8001c4c <__malloc_lock>
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <_free_r+0x94>)
 8001c80:	9801      	ldr	r0, [sp, #4]
 8001c82:	6813      	ldr	r3, [r2, #0]
 8001c84:	b933      	cbnz	r3, 8001c94 <_free_r+0x30>
 8001c86:	6063      	str	r3, [r4, #4]
 8001c88:	6014      	str	r4, [r2, #0]
 8001c8a:	b003      	add	sp, #12
 8001c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c90:	f7ff bfe2 	b.w	8001c58 <__malloc_unlock>
 8001c94:	42a3      	cmp	r3, r4
 8001c96:	d908      	bls.n	8001caa <_free_r+0x46>
 8001c98:	6825      	ldr	r5, [r4, #0]
 8001c9a:	1961      	adds	r1, r4, r5
 8001c9c:	428b      	cmp	r3, r1
 8001c9e:	bf01      	itttt	eq
 8001ca0:	6819      	ldreq	r1, [r3, #0]
 8001ca2:	685b      	ldreq	r3, [r3, #4]
 8001ca4:	1949      	addeq	r1, r1, r5
 8001ca6:	6021      	streq	r1, [r4, #0]
 8001ca8:	e7ed      	b.n	8001c86 <_free_r+0x22>
 8001caa:	461a      	mov	r2, r3
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	b10b      	cbz	r3, 8001cb4 <_free_r+0x50>
 8001cb0:	42a3      	cmp	r3, r4
 8001cb2:	d9fa      	bls.n	8001caa <_free_r+0x46>
 8001cb4:	6811      	ldr	r1, [r2, #0]
 8001cb6:	1855      	adds	r5, r2, r1
 8001cb8:	42a5      	cmp	r5, r4
 8001cba:	d10b      	bne.n	8001cd4 <_free_r+0x70>
 8001cbc:	6824      	ldr	r4, [r4, #0]
 8001cbe:	4421      	add	r1, r4
 8001cc0:	1854      	adds	r4, r2, r1
 8001cc2:	42a3      	cmp	r3, r4
 8001cc4:	6011      	str	r1, [r2, #0]
 8001cc6:	d1e0      	bne.n	8001c8a <_free_r+0x26>
 8001cc8:	681c      	ldr	r4, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	6053      	str	r3, [r2, #4]
 8001cce:	4421      	add	r1, r4
 8001cd0:	6011      	str	r1, [r2, #0]
 8001cd2:	e7da      	b.n	8001c8a <_free_r+0x26>
 8001cd4:	d902      	bls.n	8001cdc <_free_r+0x78>
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	6003      	str	r3, [r0, #0]
 8001cda:	e7d6      	b.n	8001c8a <_free_r+0x26>
 8001cdc:	6825      	ldr	r5, [r4, #0]
 8001cde:	1961      	adds	r1, r4, r5
 8001ce0:	428b      	cmp	r3, r1
 8001ce2:	bf04      	itt	eq
 8001ce4:	6819      	ldreq	r1, [r3, #0]
 8001ce6:	685b      	ldreq	r3, [r3, #4]
 8001ce8:	6063      	str	r3, [r4, #4]
 8001cea:	bf04      	itt	eq
 8001cec:	1949      	addeq	r1, r1, r5
 8001cee:	6021      	streq	r1, [r4, #0]
 8001cf0:	6054      	str	r4, [r2, #4]
 8001cf2:	e7ca      	b.n	8001c8a <_free_r+0x26>
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bd30      	pop	{r4, r5, pc}
 8001cf8:	20000090 	.word	0x20000090

08001cfc <_read_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4d07      	ldr	r5, [pc, #28]	; (8001d1c <_read_r+0x20>)
 8001d00:	4604      	mov	r4, r0
 8001d02:	4608      	mov	r0, r1
 8001d04:	4611      	mov	r1, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	602a      	str	r2, [r5, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7fe fdc2 	bl	8000894 <_read>
 8001d10:	1c43      	adds	r3, r0, #1
 8001d12:	d102      	bne.n	8001d1a <_read_r+0x1e>
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	b103      	cbz	r3, 8001d1a <_read_r+0x1e>
 8001d18:	6023      	str	r3, [r4, #0]
 8001d1a:	bd38      	pop	{r3, r4, r5, pc}
 8001d1c:	20000098 	.word	0x20000098

08001d20 <_fstat_r>:
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	4d07      	ldr	r5, [pc, #28]	; (8001d40 <_fstat_r+0x20>)
 8001d24:	2300      	movs	r3, #0
 8001d26:	4604      	mov	r4, r0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	602b      	str	r3, [r5, #0]
 8001d2e:	f7fe fdc4 	bl	80008ba <_fstat>
 8001d32:	1c43      	adds	r3, r0, #1
 8001d34:	d102      	bne.n	8001d3c <_fstat_r+0x1c>
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	b103      	cbz	r3, 8001d3c <_fstat_r+0x1c>
 8001d3a:	6023      	str	r3, [r4, #0]
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000098 	.word	0x20000098

08001d44 <_isatty_r>:
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	4d06      	ldr	r5, [pc, #24]	; (8001d60 <_isatty_r+0x1c>)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	602b      	str	r3, [r5, #0]
 8001d50:	f7fe fdb8 	bl	80008c4 <_isatty>
 8001d54:	1c43      	adds	r3, r0, #1
 8001d56:	d102      	bne.n	8001d5e <_isatty_r+0x1a>
 8001d58:	682b      	ldr	r3, [r5, #0]
 8001d5a:	b103      	cbz	r3, 8001d5e <_isatty_r+0x1a>
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}
 8001d60:	20000098 	.word	0x20000098

08001d64 <_init>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	bf00      	nop
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr

08001d70 <_fini>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	bf00      	nop
 8001d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d76:	bc08      	pop	{r3}
 8001d78:	469e      	mov	lr, r3
 8001d7a:	4770      	bx	lr
