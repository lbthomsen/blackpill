
blink_relocated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  080041a0  080041a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080072d0  080072d0  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007350  08007350  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007350  08007350  00004350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007358  08007358  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007358  08007358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800735c  0800735c  0000435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007360  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  080073c8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080073c8  0000522c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bce  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001607  00000000  00000000  0000cc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000055e  00000000  00000000  0000e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162f6  00000000  00000000  0000eed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d58  00000000  00000000  000251cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087725  00000000  00000000  0002cf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000234c  00000000  00000000  000b468c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b69d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041a0 <__do_global_dtors_aux>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4c05      	ldr	r4, [pc, #20]	@ (80041b8 <__do_global_dtors_aux+0x18>)
 80041a4:	7823      	ldrb	r3, [r4, #0]
 80041a6:	b933      	cbnz	r3, 80041b6 <__do_global_dtors_aux+0x16>
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <__do_global_dtors_aux+0x1c>)
 80041aa:	b113      	cbz	r3, 80041b2 <__do_global_dtors_aux+0x12>
 80041ac:	4804      	ldr	r0, [pc, #16]	@ (80041c0 <__do_global_dtors_aux+0x20>)
 80041ae:	f3af 8000 	nop.w
 80041b2:	2301      	movs	r3, #1
 80041b4:	7023      	strb	r3, [r4, #0]
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	20000068 	.word	0x20000068
 80041bc:	00000000 	.word	0x00000000
 80041c0:	080072b8 	.word	0x080072b8

080041c4 <frame_dummy>:
 80041c4:	b508      	push	{r3, lr}
 80041c6:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <frame_dummy+0x10>)
 80041c8:	b11b      	cbz	r3, 80041d2 <frame_dummy+0xe>
 80041ca:	4903      	ldr	r1, [pc, #12]	@ (80041d8 <frame_dummy+0x14>)
 80041cc:	4803      	ldr	r0, [pc, #12]	@ (80041dc <frame_dummy+0x18>)
 80041ce:	f3af 8000 	nop.w
 80041d2:	bd08      	pop	{r3, pc}
 80041d4:	00000000 	.word	0x00000000
 80041d8:	2000006c 	.word	0x2000006c
 80041dc:	080072b8 	.word	0x080072b8

080041e0 <memchr>:
 80041e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80041e4:	2a10      	cmp	r2, #16
 80041e6:	db2b      	blt.n	8004240 <memchr+0x60>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	d008      	beq.n	8004200 <memchr+0x20>
 80041ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041f2:	3a01      	subs	r2, #1
 80041f4:	428b      	cmp	r3, r1
 80041f6:	d02d      	beq.n	8004254 <memchr+0x74>
 80041f8:	f010 0f07 	tst.w	r0, #7
 80041fc:	b342      	cbz	r2, 8004250 <memchr+0x70>
 80041fe:	d1f6      	bne.n	80041ee <memchr+0xe>
 8004200:	b4f0      	push	{r4, r5, r6, r7}
 8004202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800420a:	f022 0407 	bic.w	r4, r2, #7
 800420e:	f07f 0700 	mvns.w	r7, #0
 8004212:	2300      	movs	r3, #0
 8004214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004218:	3c08      	subs	r4, #8
 800421a:	ea85 0501 	eor.w	r5, r5, r1
 800421e:	ea86 0601 	eor.w	r6, r6, r1
 8004222:	fa85 f547 	uadd8	r5, r5, r7
 8004226:	faa3 f587 	sel	r5, r3, r7
 800422a:	fa86 f647 	uadd8	r6, r6, r7
 800422e:	faa5 f687 	sel	r6, r5, r7
 8004232:	b98e      	cbnz	r6, 8004258 <memchr+0x78>
 8004234:	d1ee      	bne.n	8004214 <memchr+0x34>
 8004236:	bcf0      	pop	{r4, r5, r6, r7}
 8004238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800423c:	f002 0207 	and.w	r2, r2, #7
 8004240:	b132      	cbz	r2, 8004250 <memchr+0x70>
 8004242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004246:	3a01      	subs	r2, #1
 8004248:	ea83 0301 	eor.w	r3, r3, r1
 800424c:	b113      	cbz	r3, 8004254 <memchr+0x74>
 800424e:	d1f8      	bne.n	8004242 <memchr+0x62>
 8004250:	2000      	movs	r0, #0
 8004252:	4770      	bx	lr
 8004254:	3801      	subs	r0, #1
 8004256:	4770      	bx	lr
 8004258:	2d00      	cmp	r5, #0
 800425a:	bf06      	itte	eq
 800425c:	4635      	moveq	r5, r6
 800425e:	3803      	subeq	r0, #3
 8004260:	3807      	subne	r0, #7
 8004262:	f015 0f01 	tst.w	r5, #1
 8004266:	d107      	bne.n	8004278 <memchr+0x98>
 8004268:	3001      	adds	r0, #1
 800426a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800426e:	bf02      	ittt	eq
 8004270:	3001      	addeq	r0, #1
 8004272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8004276:	3001      	addeq	r0, #1
 8004278:	bcf0      	pop	{r4, r5, r6, r7}
 800427a:	3801      	subs	r0, #1
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <__aeabi_uldivmod>:
 8004280:	b953      	cbnz	r3, 8004298 <__aeabi_uldivmod+0x18>
 8004282:	b94a      	cbnz	r2, 8004298 <__aeabi_uldivmod+0x18>
 8004284:	2900      	cmp	r1, #0
 8004286:	bf08      	it	eq
 8004288:	2800      	cmpeq	r0, #0
 800428a:	bf1c      	itt	ne
 800428c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8004290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8004294:	f000 b988 	b.w	80045a8 <__aeabi_idiv0>
 8004298:	f1ad 0c08 	sub.w	ip, sp, #8
 800429c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80042a0:	f000 f806 	bl	80042b0 <__udivmoddi4>
 80042a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80042a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042ac:	b004      	add	sp, #16
 80042ae:	4770      	bx	lr

080042b0 <__udivmoddi4>:
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	9d08      	ldr	r5, [sp, #32]
 80042b6:	468e      	mov	lr, r1
 80042b8:	4604      	mov	r4, r0
 80042ba:	4688      	mov	r8, r1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d14a      	bne.n	8004356 <__udivmoddi4+0xa6>
 80042c0:	428a      	cmp	r2, r1
 80042c2:	4617      	mov	r7, r2
 80042c4:	d962      	bls.n	800438c <__udivmoddi4+0xdc>
 80042c6:	fab2 f682 	clz	r6, r2
 80042ca:	b14e      	cbz	r6, 80042e0 <__udivmoddi4+0x30>
 80042cc:	f1c6 0320 	rsb	r3, r6, #32
 80042d0:	fa01 f806 	lsl.w	r8, r1, r6
 80042d4:	fa20 f303 	lsr.w	r3, r0, r3
 80042d8:	40b7      	lsls	r7, r6
 80042da:	ea43 0808 	orr.w	r8, r3, r8
 80042de:	40b4      	lsls	r4, r6
 80042e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80042e4:	fa1f fc87 	uxth.w	ip, r7
 80042e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80042ec:	0c23      	lsrs	r3, r4, #16
 80042ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80042f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80042f6:	fb01 f20c 	mul.w	r2, r1, ip
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d909      	bls.n	8004312 <__udivmoddi4+0x62>
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8004304:	f080 80ea 	bcs.w	80044dc <__udivmoddi4+0x22c>
 8004308:	429a      	cmp	r2, r3
 800430a:	f240 80e7 	bls.w	80044dc <__udivmoddi4+0x22c>
 800430e:	3902      	subs	r1, #2
 8004310:	443b      	add	r3, r7
 8004312:	1a9a      	subs	r2, r3, r2
 8004314:	b2a3      	uxth	r3, r4
 8004316:	fbb2 f0fe 	udiv	r0, r2, lr
 800431a:	fb0e 2210 	mls	r2, lr, r0, r2
 800431e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004322:	fb00 fc0c 	mul.w	ip, r0, ip
 8004326:	459c      	cmp	ip, r3
 8004328:	d909      	bls.n	800433e <__udivmoddi4+0x8e>
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8004330:	f080 80d6 	bcs.w	80044e0 <__udivmoddi4+0x230>
 8004334:	459c      	cmp	ip, r3
 8004336:	f240 80d3 	bls.w	80044e0 <__udivmoddi4+0x230>
 800433a:	443b      	add	r3, r7
 800433c:	3802      	subs	r0, #2
 800433e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004342:	eba3 030c 	sub.w	r3, r3, ip
 8004346:	2100      	movs	r1, #0
 8004348:	b11d      	cbz	r5, 8004352 <__udivmoddi4+0xa2>
 800434a:	40f3      	lsrs	r3, r6
 800434c:	2200      	movs	r2, #0
 800434e:	e9c5 3200 	strd	r3, r2, [r5]
 8004352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004356:	428b      	cmp	r3, r1
 8004358:	d905      	bls.n	8004366 <__udivmoddi4+0xb6>
 800435a:	b10d      	cbz	r5, 8004360 <__udivmoddi4+0xb0>
 800435c:	e9c5 0100 	strd	r0, r1, [r5]
 8004360:	2100      	movs	r1, #0
 8004362:	4608      	mov	r0, r1
 8004364:	e7f5      	b.n	8004352 <__udivmoddi4+0xa2>
 8004366:	fab3 f183 	clz	r1, r3
 800436a:	2900      	cmp	r1, #0
 800436c:	d146      	bne.n	80043fc <__udivmoddi4+0x14c>
 800436e:	4573      	cmp	r3, lr
 8004370:	d302      	bcc.n	8004378 <__udivmoddi4+0xc8>
 8004372:	4282      	cmp	r2, r0
 8004374:	f200 8105 	bhi.w	8004582 <__udivmoddi4+0x2d2>
 8004378:	1a84      	subs	r4, r0, r2
 800437a:	eb6e 0203 	sbc.w	r2, lr, r3
 800437e:	2001      	movs	r0, #1
 8004380:	4690      	mov	r8, r2
 8004382:	2d00      	cmp	r5, #0
 8004384:	d0e5      	beq.n	8004352 <__udivmoddi4+0xa2>
 8004386:	e9c5 4800 	strd	r4, r8, [r5]
 800438a:	e7e2      	b.n	8004352 <__udivmoddi4+0xa2>
 800438c:	2a00      	cmp	r2, #0
 800438e:	f000 8090 	beq.w	80044b2 <__udivmoddi4+0x202>
 8004392:	fab2 f682 	clz	r6, r2
 8004396:	2e00      	cmp	r6, #0
 8004398:	f040 80a4 	bne.w	80044e4 <__udivmoddi4+0x234>
 800439c:	1a8a      	subs	r2, r1, r2
 800439e:	0c03      	lsrs	r3, r0, #16
 80043a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80043a4:	b280      	uxth	r0, r0
 80043a6:	b2bc      	uxth	r4, r7
 80043a8:	2101      	movs	r1, #1
 80043aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80043ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80043b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043b6:	fb04 f20c 	mul.w	r2, r4, ip
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d907      	bls.n	80043ce <__udivmoddi4+0x11e>
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80043c4:	d202      	bcs.n	80043cc <__udivmoddi4+0x11c>
 80043c6:	429a      	cmp	r2, r3
 80043c8:	f200 80e0 	bhi.w	800458c <__udivmoddi4+0x2dc>
 80043cc:	46c4      	mov	ip, r8
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80043d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80043d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80043dc:	fb02 f404 	mul.w	r4, r2, r4
 80043e0:	429c      	cmp	r4, r3
 80043e2:	d907      	bls.n	80043f4 <__udivmoddi4+0x144>
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80043ea:	d202      	bcs.n	80043f2 <__udivmoddi4+0x142>
 80043ec:	429c      	cmp	r4, r3
 80043ee:	f200 80ca 	bhi.w	8004586 <__udivmoddi4+0x2d6>
 80043f2:	4602      	mov	r2, r0
 80043f4:	1b1b      	subs	r3, r3, r4
 80043f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80043fa:	e7a5      	b.n	8004348 <__udivmoddi4+0x98>
 80043fc:	f1c1 0620 	rsb	r6, r1, #32
 8004400:	408b      	lsls	r3, r1
 8004402:	fa22 f706 	lsr.w	r7, r2, r6
 8004406:	431f      	orrs	r7, r3
 8004408:	fa0e f401 	lsl.w	r4, lr, r1
 800440c:	fa20 f306 	lsr.w	r3, r0, r6
 8004410:	fa2e fe06 	lsr.w	lr, lr, r6
 8004414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8004418:	4323      	orrs	r3, r4
 800441a:	fa00 f801 	lsl.w	r8, r0, r1
 800441e:	fa1f fc87 	uxth.w	ip, r7
 8004422:	fbbe f0f9 	udiv	r0, lr, r9
 8004426:	0c1c      	lsrs	r4, r3, #16
 8004428:	fb09 ee10 	mls	lr, r9, r0, lr
 800442c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8004430:	fb00 fe0c 	mul.w	lr, r0, ip
 8004434:	45a6      	cmp	lr, r4
 8004436:	fa02 f201 	lsl.w	r2, r2, r1
 800443a:	d909      	bls.n	8004450 <__udivmoddi4+0x1a0>
 800443c:	193c      	adds	r4, r7, r4
 800443e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8004442:	f080 809c 	bcs.w	800457e <__udivmoddi4+0x2ce>
 8004446:	45a6      	cmp	lr, r4
 8004448:	f240 8099 	bls.w	800457e <__udivmoddi4+0x2ce>
 800444c:	3802      	subs	r0, #2
 800444e:	443c      	add	r4, r7
 8004450:	eba4 040e 	sub.w	r4, r4, lr
 8004454:	fa1f fe83 	uxth.w	lr, r3
 8004458:	fbb4 f3f9 	udiv	r3, r4, r9
 800445c:	fb09 4413 	mls	r4, r9, r3, r4
 8004460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8004464:	fb03 fc0c 	mul.w	ip, r3, ip
 8004468:	45a4      	cmp	ip, r4
 800446a:	d908      	bls.n	800447e <__udivmoddi4+0x1ce>
 800446c:	193c      	adds	r4, r7, r4
 800446e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8004472:	f080 8082 	bcs.w	800457a <__udivmoddi4+0x2ca>
 8004476:	45a4      	cmp	ip, r4
 8004478:	d97f      	bls.n	800457a <__udivmoddi4+0x2ca>
 800447a:	3b02      	subs	r3, #2
 800447c:	443c      	add	r4, r7
 800447e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004482:	eba4 040c 	sub.w	r4, r4, ip
 8004486:	fba0 ec02 	umull	lr, ip, r0, r2
 800448a:	4564      	cmp	r4, ip
 800448c:	4673      	mov	r3, lr
 800448e:	46e1      	mov	r9, ip
 8004490:	d362      	bcc.n	8004558 <__udivmoddi4+0x2a8>
 8004492:	d05f      	beq.n	8004554 <__udivmoddi4+0x2a4>
 8004494:	b15d      	cbz	r5, 80044ae <__udivmoddi4+0x1fe>
 8004496:	ebb8 0203 	subs.w	r2, r8, r3
 800449a:	eb64 0409 	sbc.w	r4, r4, r9
 800449e:	fa04 f606 	lsl.w	r6, r4, r6
 80044a2:	fa22 f301 	lsr.w	r3, r2, r1
 80044a6:	431e      	orrs	r6, r3
 80044a8:	40cc      	lsrs	r4, r1
 80044aa:	e9c5 6400 	strd	r6, r4, [r5]
 80044ae:	2100      	movs	r1, #0
 80044b0:	e74f      	b.n	8004352 <__udivmoddi4+0xa2>
 80044b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80044b6:	0c01      	lsrs	r1, r0, #16
 80044b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80044bc:	b280      	uxth	r0, r0
 80044be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80044c2:	463b      	mov	r3, r7
 80044c4:	4638      	mov	r0, r7
 80044c6:	463c      	mov	r4, r7
 80044c8:	46b8      	mov	r8, r7
 80044ca:	46be      	mov	lr, r7
 80044cc:	2620      	movs	r6, #32
 80044ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80044d2:	eba2 0208 	sub.w	r2, r2, r8
 80044d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80044da:	e766      	b.n	80043aa <__udivmoddi4+0xfa>
 80044dc:	4601      	mov	r1, r0
 80044de:	e718      	b.n	8004312 <__udivmoddi4+0x62>
 80044e0:	4610      	mov	r0, r2
 80044e2:	e72c      	b.n	800433e <__udivmoddi4+0x8e>
 80044e4:	f1c6 0220 	rsb	r2, r6, #32
 80044e8:	fa2e f302 	lsr.w	r3, lr, r2
 80044ec:	40b7      	lsls	r7, r6
 80044ee:	40b1      	lsls	r1, r6
 80044f0:	fa20 f202 	lsr.w	r2, r0, r2
 80044f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80044f8:	430a      	orrs	r2, r1
 80044fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80044fe:	b2bc      	uxth	r4, r7
 8004500:	fb0e 3318 	mls	r3, lr, r8, r3
 8004504:	0c11      	lsrs	r1, r2, #16
 8004506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800450a:	fb08 f904 	mul.w	r9, r8, r4
 800450e:	40b0      	lsls	r0, r6
 8004510:	4589      	cmp	r9, r1
 8004512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8004516:	b280      	uxth	r0, r0
 8004518:	d93e      	bls.n	8004598 <__udivmoddi4+0x2e8>
 800451a:	1879      	adds	r1, r7, r1
 800451c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8004520:	d201      	bcs.n	8004526 <__udivmoddi4+0x276>
 8004522:	4589      	cmp	r9, r1
 8004524:	d81f      	bhi.n	8004566 <__udivmoddi4+0x2b6>
 8004526:	eba1 0109 	sub.w	r1, r1, r9
 800452a:	fbb1 f9fe 	udiv	r9, r1, lr
 800452e:	fb09 f804 	mul.w	r8, r9, r4
 8004532:	fb0e 1119 	mls	r1, lr, r9, r1
 8004536:	b292      	uxth	r2, r2
 8004538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800453c:	4542      	cmp	r2, r8
 800453e:	d229      	bcs.n	8004594 <__udivmoddi4+0x2e4>
 8004540:	18ba      	adds	r2, r7, r2
 8004542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8004546:	d2c4      	bcs.n	80044d2 <__udivmoddi4+0x222>
 8004548:	4542      	cmp	r2, r8
 800454a:	d2c2      	bcs.n	80044d2 <__udivmoddi4+0x222>
 800454c:	f1a9 0102 	sub.w	r1, r9, #2
 8004550:	443a      	add	r2, r7
 8004552:	e7be      	b.n	80044d2 <__udivmoddi4+0x222>
 8004554:	45f0      	cmp	r8, lr
 8004556:	d29d      	bcs.n	8004494 <__udivmoddi4+0x1e4>
 8004558:	ebbe 0302 	subs.w	r3, lr, r2
 800455c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8004560:	3801      	subs	r0, #1
 8004562:	46e1      	mov	r9, ip
 8004564:	e796      	b.n	8004494 <__udivmoddi4+0x1e4>
 8004566:	eba7 0909 	sub.w	r9, r7, r9
 800456a:	4449      	add	r1, r9
 800456c:	f1a8 0c02 	sub.w	ip, r8, #2
 8004570:	fbb1 f9fe 	udiv	r9, r1, lr
 8004574:	fb09 f804 	mul.w	r8, r9, r4
 8004578:	e7db      	b.n	8004532 <__udivmoddi4+0x282>
 800457a:	4673      	mov	r3, lr
 800457c:	e77f      	b.n	800447e <__udivmoddi4+0x1ce>
 800457e:	4650      	mov	r0, sl
 8004580:	e766      	b.n	8004450 <__udivmoddi4+0x1a0>
 8004582:	4608      	mov	r0, r1
 8004584:	e6fd      	b.n	8004382 <__udivmoddi4+0xd2>
 8004586:	443b      	add	r3, r7
 8004588:	3a02      	subs	r2, #2
 800458a:	e733      	b.n	80043f4 <__udivmoddi4+0x144>
 800458c:	f1ac 0c02 	sub.w	ip, ip, #2
 8004590:	443b      	add	r3, r7
 8004592:	e71c      	b.n	80043ce <__udivmoddi4+0x11e>
 8004594:	4649      	mov	r1, r9
 8004596:	e79c      	b.n	80044d2 <__udivmoddi4+0x222>
 8004598:	eba1 0109 	sub.w	r1, r1, r9
 800459c:	46c4      	mov	ip, r8
 800459e:	fbb1 f9fe 	udiv	r9, r1, lr
 80045a2:	fb09 f804 	mul.w	r8, r9, r4
 80045a6:	e7c4      	b.n	8004532 <__udivmoddi4+0x282>

080045a8 <__aeabi_idiv0>:
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop

080045ac <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d002      	beq.n	80045c4 <_write+0x18>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d111      	bne.n	80045e8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4809      	ldr	r0, [pc, #36]	@ (80045f4 <_write+0x48>)
 80045d0:	f001 fb2a 	bl	8005c28 <HAL_UART_Transmit>
 80045d4:	4603      	mov	r3, r0
 80045d6:	75fb      	strb	r3, [r7, #23]
        HAL_MAX_DELAY);
        if (hstatus == HAL_OK)
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <_write+0x36>
            return len;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	e004      	b.n	80045ec <_write+0x40>
        else
            return -1;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045e6:	e001      	b.n	80045ec <_write+0x40>
    }
    return -1;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000084 	.word	0x20000084

080045f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) { // If the button
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d126      	bne.n	8004656 <HAL_GPIO_EXTI_Callback+0x5e>
        printf("Button pressed\n");
 8004608:	4815      	ldr	r0, [pc, #84]	@ (8004660 <HAL_GPIO_EXTI_Callback+0x68>)
 800460a:	f001 fff3 	bl	80065f4 <puts>
        GPIO_PinState pinState = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 800460e:	2101      	movs	r1, #1
 8004610:	4814      	ldr	r0, [pc, #80]	@ (8004664 <HAL_GPIO_EXTI_Callback+0x6c>)
 8004612:	f000 fdfd 	bl	8005210 <HAL_GPIO_ReadPin>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]
        if (pinState == GPIO_PIN_RESET) {
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <HAL_GPIO_EXTI_Callback+0x34>
            push_count = HAL_GetTick();
 8004620:	f000 fb3a 	bl	8004c98 <HAL_GetTick>
 8004624:	4603      	mov	r3, r0
 8004626:	4a10      	ldr	r2, [pc, #64]	@ (8004668 <HAL_GPIO_EXTI_Callback+0x70>)
 8004628:	6013      	str	r3, [r2, #0]
            }
            push_count = 0;
        }

    }
}
 800462a:	e014      	b.n	8004656 <HAL_GPIO_EXTI_Callback+0x5e>
            printf("Button released\n");
 800462c:	480f      	ldr	r0, [pc, #60]	@ (800466c <HAL_GPIO_EXTI_Callback+0x74>)
 800462e:	f001 ffe1 	bl	80065f4 <puts>
            if (HAL_GetTick() - push_count > 1000) {
 8004632:	f000 fb31 	bl	8004c98 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <HAL_GPIO_EXTI_Callback+0x70>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004642:	d905      	bls.n	8004650 <HAL_GPIO_EXTI_Callback+0x58>
                *dfu_boot_flag = DFU_BOOT_FLAG;
 8004644:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <HAL_GPIO_EXTI_Callback+0x78>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <HAL_GPIO_EXTI_Callback+0x7c>)
 800464a:	601a      	str	r2, [r3, #0]
                HAL_NVIC_SystemReset();
 800464c:	f000 fc4b 	bl	8004ee6 <HAL_NVIC_SystemReset>
            push_count = 0;
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_GPIO_EXTI_Callback+0x70>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	080072d0 	.word	0x080072d0
 8004664:	40020000 	.word	0x40020000
 8004668:	200000d0 	.word	0x200000d0
 800466c:	080072e0 	.word	0x080072e0
 8004670:	200000cc 	.word	0x200000cc
 8004674:	deadbeef 	.word	0xdeadbeef

08004678 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800467e:	f000 faa5 	bl	8004bcc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004682:	f000 f833 	bl	80046ec <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004686:	f000 f8c3 	bl	8004810 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 800468a:	f000 f897 	bl	80047bc <MX_USART1_UART_Init>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0, last_print = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]

    while (1) {

        now = HAL_GetTick();
 800469a:	f000 fafd 	bl	8004c98 <HAL_GetTick>
 800469e:	6078      	str	r0, [r7, #4]

        if (now - last_blink >= 500) {
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80046aa:	d306      	bcc.n	80046ba <main+0x42>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80046ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046b0:	480b      	ldr	r0, [pc, #44]	@ (80046e0 <main+0x68>)
 80046b2:	f000 fdde 	bl	8005272 <HAL_GPIO_TogglePin>
            last_blink = now;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
        }

        if (now - last_print >= 1000) {
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046c4:	d3e9      	bcc.n	800469a <main+0x22>

            printf("Tick, now = %lu\n", now);
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4806      	ldr	r0, [pc, #24]	@ (80046e4 <main+0x6c>)
 80046ca:	f001 ff2b 	bl	8006524 <iprintf>
            ++cnt;
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <main+0x70>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <main+0x70>)
 80046d6:	6013      	str	r3, [r2, #0]

            last_print = now;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60bb      	str	r3, [r7, #8]
        now = HAL_GetTick();
 80046dc:	e7dd      	b.n	800469a <main+0x22>
 80046de:	bf00      	nop
 80046e0:	40020800 	.word	0x40020800
 80046e4:	080072f0 	.word	0x080072f0
 80046e8:	200000d4 	.word	0x200000d4

080046ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b094      	sub	sp, #80	@ 0x50
 80046f0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80046f2:	f107 0320 	add.w	r3, r7, #32
 80046f6:	2230      	movs	r2, #48	@ 0x30
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f002 f85a 	bl	80067b4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004700:	f107 030c 	add.w	r3, r7, #12
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	2300      	movs	r3, #0
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <SystemClock_Config+0xc8>)
 8004716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004718:	4a26      	ldr	r2, [pc, #152]	@ (80047b4 <SystemClock_Config+0xc8>)
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004720:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <SystemClock_Config+0xc8>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800472c:	2300      	movs	r3, #0
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <SystemClock_Config+0xcc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a20      	ldr	r2, [pc, #128]	@ (80047b8 <SystemClock_Config+0xcc>)
 8004736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <SystemClock_Config+0xcc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004748:	2301      	movs	r3, #1
 800474a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800474c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004752:	2302      	movs	r3, #2
 8004754:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004756:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800475a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 800475c:	230c      	movs	r3, #12
 800475e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 8004760:	2360      	movs	r3, #96	@ 0x60
 8004762:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004764:	2302      	movs	r3, #2
 8004766:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8004768:	2304      	movs	r3, #4
 800476a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800476c:	f107 0320 	add.w	r3, r7, #32
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fdb1 	bl	80052d8 <HAL_RCC_OscConfig>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <SystemClock_Config+0x94>
            {
        Error_Handler();
 800477c:	f000 f8b2 	bl	80048e4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004780:	230f      	movs	r3, #15
 8004782:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004784:	2302      	movs	r3, #2
 8004786:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800478c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004790:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004796:	f107 030c 	add.w	r3, r7, #12
 800479a:	2103      	movs	r1, #3
 800479c:	4618      	mov	r0, r3
 800479e:	f001 f813 	bl	80057c8 <HAL_RCC_ClockConfig>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <SystemClock_Config+0xc0>
            {
        Error_Handler();
 80047a8:	f000 f89c 	bl	80048e4 <Error_Handler>
    }
}
 80047ac:	bf00      	nop
 80047ae:	3750      	adds	r7, #80	@ 0x50
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40007000 	.word	0x40007000

080047bc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047c2:	4a12      	ldr	r2, [pc, #72]	@ (800480c <MX_USART1_UART_Init+0x50>)
 80047c4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 921600;
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047c8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80047cc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80047da:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047dc:	2200      	movs	r2, #0
 80047de:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80047e0:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047e2:	220c      	movs	r2, #12
 80047e4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047ec:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80047f2:	4805      	ldr	r0, [pc, #20]	@ (8004808 <MX_USART1_UART_Init+0x4c>)
 80047f4:	f001 f9c8 	bl	8005b88 <HAL_UART_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <MX_USART1_UART_Init+0x46>
            {
        Error_Handler();
 80047fe:	f000 f871 	bl	80048e4 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000084 	.word	0x20000084
 800480c:	40011000 	.word	0x40011000

08004810 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	605a      	str	r2, [r3, #4]
 8004820:	609a      	str	r2, [r3, #8]
 8004822:	60da      	str	r2, [r3, #12]
 8004824:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	4b2b      	ldr	r3, [pc, #172]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	4a2a      	ldr	r2, [pc, #168]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	6313      	str	r3, [r2, #48]	@ 0x30
 8004836:	4b28      	ldr	r3, [pc, #160]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	4b24      	ldr	r3, [pc, #144]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	4a23      	ldr	r2, [pc, #140]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 800484c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004850:	6313      	str	r3, [r2, #48]	@ 0x30
 8004852:	4b21      	ldr	r3, [pc, #132]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	4b1d      	ldr	r3, [pc, #116]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6313      	str	r3, [r2, #48]	@ 0x30
 800486e:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <MX_GPIO_Init+0xc8>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800487a:	2200      	movs	r2, #0
 800487c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004880:	4816      	ldr	r0, [pc, #88]	@ (80048dc <MX_GPIO_Init+0xcc>)
 8004882:	f000 fcdd 	bl	8005240 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8004886:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800488a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800488c:	2311      	movs	r3, #17
 800488e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	4619      	mov	r1, r3
 800489e:	480f      	ldr	r0, [pc, #60]	@ (80048dc <MX_GPIO_Init+0xcc>)
 80048a0:	f000 fb32 	bl	8004f08 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 80048a4:	2301      	movs	r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80048a8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80048ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ae:	2301      	movs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80048b2:	f107 030c 	add.w	r3, r7, #12
 80048b6:	4619      	mov	r1, r3
 80048b8:	4809      	ldr	r0, [pc, #36]	@ (80048e0 <MX_GPIO_Init+0xd0>)
 80048ba:	f000 fb25 	bl	8004f08 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	2006      	movs	r0, #6
 80048c4:	f000 fae5 	bl	8004e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048c8:	2006      	movs	r0, #6
 80048ca:	f000 fafe 	bl	8004eca <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80048ce:	bf00      	nop
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40020800 	.word	0x40020800
 80048e0:	40020000 	.word	0x40020000

080048e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048e8:	b672      	cpsid	i
}
 80048ea:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <Error_Handler+0x8>

080048f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <HAL_MspInit+0x4c>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	4a0f      	ldr	r2, [pc, #60]	@ (800493c <HAL_MspInit+0x4c>)
 8004900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004904:	6453      	str	r3, [r2, #68]	@ 0x44
 8004906:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <HAL_MspInit+0x4c>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4b09      	ldr	r3, [pc, #36]	@ (800493c <HAL_MspInit+0x4c>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	4a08      	ldr	r2, [pc, #32]	@ (800493c <HAL_MspInit+0x4c>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	@ 0x40
 8004922:	4b06      	ldr	r3, [pc, #24]	@ (800493c <HAL_MspInit+0x4c>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800

08004940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a19      	ldr	r2, [pc, #100]	@ (80049c4 <HAL_UART_MspInit+0x84>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d12c      	bne.n	80049bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	4b18      	ldr	r3, [pc, #96]	@ (80049c8 <HAL_UART_MspInit+0x88>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <HAL_UART_MspInit+0x88>)
 800496c:	f043 0310 	orr.w	r3, r3, #16
 8004970:	6453      	str	r3, [r2, #68]	@ 0x44
 8004972:	4b15      	ldr	r3, [pc, #84]	@ (80049c8 <HAL_UART_MspInit+0x88>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <HAL_UART_MspInit+0x88>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	4a10      	ldr	r2, [pc, #64]	@ (80049c8 <HAL_UART_MspInit+0x88>)
 8004988:	f043 0301 	orr.w	r3, r3, #1
 800498c:	6313      	str	r3, [r2, #48]	@ 0x30
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <HAL_UART_MspInit+0x88>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800499a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800499e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a0:	2302      	movs	r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a8:	2303      	movs	r3, #3
 80049aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049ac:	2307      	movs	r3, #7
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b0:	f107 0314 	add.w	r3, r7, #20
 80049b4:	4619      	mov	r1, r3
 80049b6:	4805      	ldr	r0, [pc, #20]	@ (80049cc <HAL_UART_MspInit+0x8c>)
 80049b8:	f000 faa6 	bl	8004f08 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80049bc:	bf00      	nop
 80049be:	3728      	adds	r7, #40	@ 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40011000 	.word	0x40011000
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40020000 	.word	0x40020000

080049d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <NMI_Handler+0x4>

080049d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <HardFault_Handler+0x4>

080049e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <MemManage_Handler+0x4>

080049e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <BusFault_Handler+0x4>

080049f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <UsageFault_Handler+0x4>

080049f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a26:	f000 f923 	bl	8004c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8004a32:	2001      	movs	r0, #1
 8004a34:	f000 fc38 	bl	80052a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e00a      	b.n	8004a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a4e:	f3af 8000 	nop.w
 8004a52:	4601      	mov	r1, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	60ba      	str	r2, [r7, #8]
 8004a5a:	b2ca      	uxtb	r2, r1
 8004a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	dbf0      	blt.n	8004a4e <_read+0x12>
  }

  return len;
 8004a6c:	687b      	ldr	r3, [r7, #4]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a9e:	605a      	str	r2, [r3, #4]
  return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <_isatty>:

int _isatty(int file)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ab6:	2301      	movs	r3, #1
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ae8:	4a14      	ldr	r2, [pc, #80]	@ (8004b3c <_sbrk+0x5c>)
 8004aea:	4b15      	ldr	r3, [pc, #84]	@ (8004b40 <_sbrk+0x60>)
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004af4:	4b13      	ldr	r3, [pc, #76]	@ (8004b44 <_sbrk+0x64>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004afc:	4b11      	ldr	r3, [pc, #68]	@ (8004b44 <_sbrk+0x64>)
 8004afe:	4a12      	ldr	r2, [pc, #72]	@ (8004b48 <_sbrk+0x68>)
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <_sbrk+0x64>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b10:	f001 fe9e 	bl	8006850 <__errno>
 8004b14:	4603      	mov	r3, r0
 8004b16:	220c      	movs	r2, #12
 8004b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b1e:	e009      	b.n	8004b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b20:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <_sbrk+0x64>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b26:	4b07      	ldr	r3, [pc, #28]	@ (8004b44 <_sbrk+0x64>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4a05      	ldr	r2, [pc, #20]	@ (8004b44 <_sbrk+0x64>)
 8004b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20020000 	.word	0x20020000
 8004b40:	00000400 	.word	0x00000400
 8004b44:	200000d8 	.word	0x200000d8
 8004b48:	20000230 	.word	0x20000230

08004b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b50:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <SystemInit+0x24>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	4a06      	ldr	r2, [pc, #24]	@ (8004b70 <SystemInit+0x24>)
 8004b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8004b60:	4b03      	ldr	r3, [pc, #12]	@ (8004b70 <SystemInit+0x24>)
 8004b62:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <SystemInit+0x28>)
 8004b64:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000ed00 	.word	0xe000ed00
 8004b74:	08004000 	.word	0x08004000

08004b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b7c:	480d      	ldr	r0, [pc, #52]	@ (8004bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b7e:	490e      	ldr	r1, [pc, #56]	@ (8004bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b80:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b84:	e002      	b.n	8004b8c <LoopCopyDataInit>

08004b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b8a:	3304      	adds	r3, #4

08004b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b90:	d3f9      	bcc.n	8004b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b92:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b94:	4c0b      	ldr	r4, [pc, #44]	@ (8004bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b98:	e001      	b.n	8004b9e <LoopFillZerobss>

08004b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b9c:	3204      	adds	r2, #4

08004b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ba0:	d3fb      	bcc.n	8004b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ba2:	f7ff ffd3 	bl	8004b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ba6:	f001 fe59 	bl	800685c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004baa:	f7ff fd65 	bl	8004678 <main>
  bx  lr    
 8004bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8004bbc:	08007360 	.word	0x08007360
  ldr r2, =_sbss
 8004bc0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004bc4:	2000022c 	.word	0x2000022c

08004bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bc8:	e7fe      	b.n	8004bc8 <ADC_IRQHandler>
	...

08004bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c0c <HAL_Init+0x40>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <HAL_Init+0x40>)
 8004bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <HAL_Init+0x40>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0a      	ldr	r2, [pc, #40]	@ (8004c0c <HAL_Init+0x40>)
 8004be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004be8:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <HAL_Init+0x40>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a07      	ldr	r2, [pc, #28]	@ (8004c0c <HAL_Init+0x40>)
 8004bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	f000 f941 	bl	8004e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bfa:	200f      	movs	r0, #15
 8004bfc:	f000 f808 	bl	8004c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c00:	f7ff fe76 	bl	80048f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00

08004c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c18:	4b12      	ldr	r3, [pc, #72]	@ (8004c64 <HAL_InitTick+0x54>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <HAL_InitTick+0x58>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f95d 	bl	8004eee <HAL_SYSTICK_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e00e      	b.n	8004c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b0f      	cmp	r3, #15
 8004c42:	d80a      	bhi.n	8004c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c44:	2200      	movs	r2, #0
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c4c:	f000 f921 	bl	8004e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c50:	4a06      	ldr	r2, [pc, #24]	@ (8004c6c <HAL_InitTick+0x5c>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000000 	.word	0x20000000
 8004c68:	20000008 	.word	0x20000008
 8004c6c:	20000004 	.word	0x20000004

08004c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c74:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_IncTick+0x20>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <HAL_IncTick+0x24>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4413      	add	r3, r2
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <HAL_IncTick+0x24>)
 8004c82:	6013      	str	r3, [r2, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000008 	.word	0x20000008
 8004c94:	200000dc 	.word	0x200000dc

08004c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <HAL_GetTick+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	200000dc 	.word	0x200000dc

08004cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ce2:	4a04      	ldr	r2, [pc, #16]	@ (8004cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	60d3      	str	r3, [r2, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000ed00 	.word	0xe000ed00

08004cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cfc:	4b04      	ldr	r3, [pc, #16]	@ (8004d10 <__NVIC_GetPriorityGrouping+0x18>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	f003 0307 	and.w	r3, r3, #7
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	db0b      	blt.n	8004d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	f003 021f 	and.w	r2, r3, #31
 8004d2c:	4907      	ldr	r1, [pc, #28]	@ (8004d4c <__NVIC_EnableIRQ+0x38>)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2001      	movs	r0, #1
 8004d36:	fa00 f202 	lsl.w	r2, r0, r2
 8004d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	e000e100 	.word	0xe000e100

08004d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	db0a      	blt.n	8004d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	490c      	ldr	r1, [pc, #48]	@ (8004d9c <__NVIC_SetPriority+0x4c>)
 8004d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	440b      	add	r3, r1
 8004d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d78:	e00a      	b.n	8004d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4908      	ldr	r1, [pc, #32]	@ (8004da0 <__NVIC_SetPriority+0x50>)
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	3b04      	subs	r3, #4
 8004d88:	0112      	lsls	r2, r2, #4
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	761a      	strb	r2, [r3, #24]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000e100 	.word	0xe000e100
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b089      	sub	sp, #36	@ 0x24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f1c3 0307 	rsb	r3, r3, #7
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	bf28      	it	cs
 8004dc2:	2304      	movcs	r3, #4
 8004dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d902      	bls.n	8004dd4 <NVIC_EncodePriority+0x30>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3b03      	subs	r3, #3
 8004dd2:	e000      	b.n	8004dd6 <NVIC_EncodePriority+0x32>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	401a      	ands	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	43d9      	mvns	r1, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dfc:	4313      	orrs	r3, r2
         );
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3724      	adds	r7, #36	@ 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004e10:	f3bf 8f4f 	dsb	sy
}
 8004e14:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <__NVIC_SystemReset+0x24>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004e1e:	4904      	ldr	r1, [pc, #16]	@ (8004e30 <__NVIC_SystemReset+0x24>)
 8004e20:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <__NVIC_SystemReset+0x28>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e26:	f3bf 8f4f 	dsb	sy
}
 8004e2a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <__NVIC_SystemReset+0x20>
 8004e30:	e000ed00 	.word	0xe000ed00
 8004e34:	05fa0004 	.word	0x05fa0004

08004e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e48:	d301      	bcc.n	8004e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e00f      	b.n	8004e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e78 <SysTick_Config+0x40>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e56:	210f      	movs	r1, #15
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e5c:	f7ff ff78 	bl	8004d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e60:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <SysTick_Config+0x40>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e66:	4b04      	ldr	r3, [pc, #16]	@ (8004e78 <SysTick_Config+0x40>)
 8004e68:	2207      	movs	r2, #7
 8004e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	e000e010 	.word	0xe000e010

08004e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff13 	bl	8004cb0 <__NVIC_SetPriorityGrouping>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	4603      	mov	r3, r0
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ea4:	f7ff ff28 	bl	8004cf8 <__NVIC_GetPriorityGrouping>
 8004ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	6978      	ldr	r0, [r7, #20]
 8004eb0:	f7ff ff78 	bl	8004da4 <NVIC_EncodePriority>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ff47 	bl	8004d50 <__NVIC_SetPriority>
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff1b 	bl	8004d14 <__NVIC_EnableIRQ>
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004eea:	f7ff ff8f 	bl	8004e0c <__NVIC_SystemReset>

08004eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ff9e 	bl	8004e38 <SysTick_Config>
 8004efc:	4603      	mov	r3, r0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	@ 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e159      	b.n	80051d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f24:	2201      	movs	r2, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f040 8148 	bne.w	80051d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d005      	beq.n	8004f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d130      	bne.n	8004fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	2203      	movs	r2, #3
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f90:	2201      	movs	r2, #1
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 0201 	and.w	r2, r3, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d017      	beq.n	8004ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d123      	bne.n	800504c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	08da      	lsrs	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3208      	adds	r2, #8
 800500c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	220f      	movs	r2, #15
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	08da      	lsrs	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3208      	adds	r2, #8
 8005046:	69b9      	ldr	r1, [r7, #24]
 8005048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	2203      	movs	r2, #3
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0203 	and.w	r2, r3, #3
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80a2 	beq.w	80051d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	4b57      	ldr	r3, [pc, #348]	@ (80051f0 <HAL_GPIO_Init+0x2e8>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	4a56      	ldr	r2, [pc, #344]	@ (80051f0 <HAL_GPIO_Init+0x2e8>)
 8005098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800509c:	6453      	str	r3, [r2, #68]	@ 0x44
 800509e:	4b54      	ldr	r3, [pc, #336]	@ (80051f0 <HAL_GPIO_Init+0x2e8>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050aa:	4a52      	ldr	r2, [pc, #328]	@ (80051f4 <HAL_GPIO_Init+0x2ec>)
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	3302      	adds	r3, #2
 80050b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	220f      	movs	r2, #15
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a49      	ldr	r2, [pc, #292]	@ (80051f8 <HAL_GPIO_Init+0x2f0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d019      	beq.n	800510a <HAL_GPIO_Init+0x202>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a48      	ldr	r2, [pc, #288]	@ (80051fc <HAL_GPIO_Init+0x2f4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_GPIO_Init+0x1fe>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a47      	ldr	r2, [pc, #284]	@ (8005200 <HAL_GPIO_Init+0x2f8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00d      	beq.n	8005102 <HAL_GPIO_Init+0x1fa>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a46      	ldr	r2, [pc, #280]	@ (8005204 <HAL_GPIO_Init+0x2fc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <HAL_GPIO_Init+0x1f6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a45      	ldr	r2, [pc, #276]	@ (8005208 <HAL_GPIO_Init+0x300>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d101      	bne.n	80050fa <HAL_GPIO_Init+0x1f2>
 80050f6:	2304      	movs	r3, #4
 80050f8:	e008      	b.n	800510c <HAL_GPIO_Init+0x204>
 80050fa:	2307      	movs	r3, #7
 80050fc:	e006      	b.n	800510c <HAL_GPIO_Init+0x204>
 80050fe:	2303      	movs	r3, #3
 8005100:	e004      	b.n	800510c <HAL_GPIO_Init+0x204>
 8005102:	2302      	movs	r3, #2
 8005104:	e002      	b.n	800510c <HAL_GPIO_Init+0x204>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <HAL_GPIO_Init+0x204>
 800510a:	2300      	movs	r3, #0
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	f002 0203 	and.w	r2, r2, #3
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	4093      	lsls	r3, r2
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800511c:	4935      	ldr	r1, [pc, #212]	@ (80051f4 <HAL_GPIO_Init+0x2ec>)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	089b      	lsrs	r3, r3, #2
 8005122:	3302      	adds	r3, #2
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800512a:	4b38      	ldr	r3, [pc, #224]	@ (800520c <HAL_GPIO_Init+0x304>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800514e:	4a2f      	ldr	r2, [pc, #188]	@ (800520c <HAL_GPIO_Init+0x304>)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005154:	4b2d      	ldr	r3, [pc, #180]	@ (800520c <HAL_GPIO_Init+0x304>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005178:	4a24      	ldr	r2, [pc, #144]	@ (800520c <HAL_GPIO_Init+0x304>)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800517e:	4b23      	ldr	r3, [pc, #140]	@ (800520c <HAL_GPIO_Init+0x304>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a2:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_GPIO_Init+0x304>)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051a8:	4b18      	ldr	r3, [pc, #96]	@ (800520c <HAL_GPIO_Init+0x304>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051cc:	4a0f      	ldr	r2, [pc, #60]	@ (800520c <HAL_GPIO_Init+0x304>)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	f67f aea2 	bls.w	8004f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	3724      	adds	r7, #36	@ 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40020000 	.word	0x40020000
 80051fc:	40020400 	.word	0x40020400
 8005200:	40020800 	.word	0x40020800
 8005204:	40020c00 	.word	0x40020c00
 8005208:	40021000 	.word	0x40021000
 800520c:	40013c00 	.word	0x40013c00

08005210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e001      	b.n	8005232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	807b      	strh	r3, [r7, #2]
 800524c:	4613      	mov	r3, r2
 800524e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005250:	787b      	ldrb	r3, [r7, #1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005256:	887a      	ldrh	r2, [r7, #2]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800525c:	e003      	b.n	8005266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800525e:	887b      	ldrh	r3, [r7, #2]
 8005260:	041a      	lsls	r2, r3, #16
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	619a      	str	r2, [r3, #24]
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005284:	887a      	ldrh	r2, [r7, #2]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4013      	ands	r3, r2
 800528a:	041a      	lsls	r2, r3, #16
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	43d9      	mvns	r1, r3
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	400b      	ands	r3, r1
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052b2:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	4013      	ands	r3, r2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052be:	4a05      	ldr	r2, [pc, #20]	@ (80052d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f996 	bl	80045f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40013c00 	.word	0x40013c00

080052d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e267      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d075      	beq.n	80053e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052f6:	4b88      	ldr	r3, [pc, #544]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d00c      	beq.n	800531c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005302:	4b85      	ldr	r3, [pc, #532]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800530a:	2b08      	cmp	r3, #8
 800530c:	d112      	bne.n	8005334 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800530e:	4b82      	ldr	r3, [pc, #520]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800531a:	d10b      	bne.n	8005334 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531c:	4b7e      	ldr	r3, [pc, #504]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d05b      	beq.n	80053e0 <HAL_RCC_OscConfig+0x108>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d157      	bne.n	80053e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e242      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533c:	d106      	bne.n	800534c <HAL_RCC_OscConfig+0x74>
 800533e:	4b76      	ldr	r3, [pc, #472]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a75      	ldr	r2, [pc, #468]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e01d      	b.n	8005388 <HAL_RCC_OscConfig+0xb0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005354:	d10c      	bne.n	8005370 <HAL_RCC_OscConfig+0x98>
 8005356:	4b70      	ldr	r3, [pc, #448]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6f      	ldr	r2, [pc, #444]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 800535c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	4b6d      	ldr	r3, [pc, #436]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6c      	ldr	r2, [pc, #432]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e00b      	b.n	8005388 <HAL_RCC_OscConfig+0xb0>
 8005370:	4b69      	ldr	r3, [pc, #420]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a68      	ldr	r2, [pc, #416]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b66      	ldr	r3, [pc, #408]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a65      	ldr	r2, [pc, #404]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d013      	beq.n	80053b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7ff fc82 	bl	8004c98 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005398:	f7ff fc7e 	bl	8004c98 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	@ 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e207      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0xc0>
 80053b6:	e014      	b.n	80053e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7ff fc6e 	bl	8004c98 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c0:	f7ff fc6a 	bl	8004c98 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	@ 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e1f3      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d2:	4b51      	ldr	r3, [pc, #324]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0xe8>
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d063      	beq.n	80054b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fa:	4b47      	ldr	r3, [pc, #284]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005402:	2b08      	cmp	r3, #8
 8005404:	d11c      	bne.n	8005440 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005406:	4b44      	ldr	r3, [pc, #272]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d116      	bne.n	8005440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005412:	4b41      	ldr	r3, [pc, #260]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_RCC_OscConfig+0x152>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d001      	beq.n	800542a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e1c7      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542a:	4b3b      	ldr	r3, [pc, #236]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4937      	ldr	r1, [pc, #220]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543e:	e03a      	b.n	80054b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d020      	beq.n	800548a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005448:	4b34      	ldr	r3, [pc, #208]	@ (800551c <HAL_RCC_OscConfig+0x244>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7ff fc23 	bl	8004c98 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005456:	f7ff fc1f 	bl	8004c98 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e1a8      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005468:	4b2b      	ldr	r3, [pc, #172]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005474:	4b28      	ldr	r3, [pc, #160]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4925      	ldr	r1, [pc, #148]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
 8005488:	e015      	b.n	80054b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548a:	4b24      	ldr	r3, [pc, #144]	@ (800551c <HAL_RCC_OscConfig+0x244>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7ff fc02 	bl	8004c98 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7ff fbfe 	bl	8004c98 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e187      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d036      	beq.n	8005530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d016      	beq.n	80054f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ca:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <HAL_RCC_OscConfig+0x248>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7ff fbe2 	bl	8004c98 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d8:	f7ff fbde 	bl	8004c98 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e167      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <HAL_RCC_OscConfig+0x240>)
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x200>
 80054f6:	e01b      	b.n	8005530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f8:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <HAL_RCC_OscConfig+0x248>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054fe:	f7ff fbcb 	bl	8004c98 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005504:	e00e      	b.n	8005524 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005506:	f7ff fbc7 	bl	8004c98 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d907      	bls.n	8005524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e150      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
 8005518:	40023800 	.word	0x40023800
 800551c:	42470000 	.word	0x42470000
 8005520:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005524:	4b88      	ldr	r3, [pc, #544]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ea      	bne.n	8005506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8097 	beq.w	800566c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005542:	4b81      	ldr	r3, [pc, #516]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b7d      	ldr	r3, [pc, #500]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	4a7c      	ldr	r2, [pc, #496]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800555c:	6413      	str	r3, [r2, #64]	@ 0x40
 800555e:	4b7a      	ldr	r3, [pc, #488]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556e:	4b77      	ldr	r3, [pc, #476]	@ (800574c <HAL_RCC_OscConfig+0x474>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d118      	bne.n	80055ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800557a:	4b74      	ldr	r3, [pc, #464]	@ (800574c <HAL_RCC_OscConfig+0x474>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a73      	ldr	r2, [pc, #460]	@ (800574c <HAL_RCC_OscConfig+0x474>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005586:	f7ff fb87 	bl	8004c98 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558e:	f7ff fb83 	bl	8004c98 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e10c      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	4b6a      	ldr	r3, [pc, #424]	@ (800574c <HAL_RCC_OscConfig+0x474>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d106      	bne.n	80055c2 <HAL_RCC_OscConfig+0x2ea>
 80055b4:	4b64      	ldr	r3, [pc, #400]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b8:	4a63      	ldr	r2, [pc, #396]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c0:	e01c      	b.n	80055fc <HAL_RCC_OscConfig+0x324>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCC_OscConfig+0x30c>
 80055ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055d0:	f043 0304 	orr.w	r3, r3, #4
 80055d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055da:	4a5b      	ldr	r2, [pc, #364]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e2:	e00b      	b.n	80055fc <HAL_RCC_OscConfig+0x324>
 80055e4:	4b58      	ldr	r3, [pc, #352]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e8:	4a57      	ldr	r2, [pc, #348]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80055f0:	4b55      	ldr	r3, [pc, #340]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f4:	4a54      	ldr	r2, [pc, #336]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80055f6:	f023 0304 	bic.w	r3, r3, #4
 80055fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d015      	beq.n	8005630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7ff fb48 	bl	8004c98 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560a:	e00a      	b.n	8005622 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560c:	f7ff fb44 	bl	8004c98 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e0cb      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005622:	4b49      	ldr	r3, [pc, #292]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0ee      	beq.n	800560c <HAL_RCC_OscConfig+0x334>
 800562e:	e014      	b.n	800565a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005630:	f7ff fb32 	bl	8004c98 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005636:	e00a      	b.n	800564e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005638:	f7ff fb2e 	bl	8004c98 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e0b5      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564e:	4b3e      	ldr	r3, [pc, #248]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ee      	bne.n	8005638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d105      	bne.n	800566c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005660:	4b39      	ldr	r3, [pc, #228]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005664:	4a38      	ldr	r2, [pc, #224]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800566a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80a1 	beq.w	80057b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005676:	4b34      	ldr	r3, [pc, #208]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b08      	cmp	r3, #8
 8005680:	d05c      	beq.n	800573c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d141      	bne.n	800570e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	4b31      	ldr	r3, [pc, #196]	@ (8005750 <HAL_RCC_OscConfig+0x478>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7ff fb02 	bl	8004c98 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7ff fafe 	bl	8004c98 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e087      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	019b      	lsls	r3, r3, #6
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	3b01      	subs	r3, #1
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	061b      	lsls	r3, r3, #24
 80056da:	491b      	ldr	r1, [pc, #108]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <HAL_RCC_OscConfig+0x478>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e6:	f7ff fad7 	bl	8004c98 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ee:	f7ff fad3 	bl	8004c98 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e05c      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x416>
 800570c:	e054      	b.n	80057b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570e:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <HAL_RCC_OscConfig+0x478>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005714:	f7ff fac0 	bl	8004c98 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7ff fabc 	bl	8004c98 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e045      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <HAL_RCC_OscConfig+0x470>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x444>
 800573a:	e03d      	b.n	80057b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d107      	bne.n	8005754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e038      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
 8005748:	40023800 	.word	0x40023800
 800574c:	40007000 	.word	0x40007000
 8005750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005754:	4b1b      	ldr	r3, [pc, #108]	@ (80057c4 <HAL_RCC_OscConfig+0x4ec>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d028      	beq.n	80057b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d121      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d11a      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005784:	4013      	ands	r3, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800578a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800578c:	4293      	cmp	r3, r2
 800578e:	d111      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d107      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40023800 	.word	0x40023800

080057c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0cc      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057dc:	4b68      	ldr	r3, [pc, #416]	@ (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d90c      	bls.n	8005804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b65      	ldr	r3, [pc, #404]	@ (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f2:	4b63      	ldr	r3, [pc, #396]	@ (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0b8      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d020      	beq.n	8005852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800581c:	4b59      	ldr	r3, [pc, #356]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4a58      	ldr	r2, [pc, #352]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005834:	4b53      	ldr	r3, [pc, #332]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4a52      	ldr	r2, [pc, #328]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800583e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005840:	4b50      	ldr	r3, [pc, #320]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	494d      	ldr	r1, [pc, #308]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d044      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005866:	4b47      	ldr	r3, [pc, #284]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d119      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e07f      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d003      	beq.n	8005886 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005882:	2b03      	cmp	r3, #3
 8005884:	d107      	bne.n	8005896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005886:	4b3f      	ldr	r3, [pc, #252]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e06f      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005896:	4b3b      	ldr	r3, [pc, #236]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e067      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a6:	4b37      	ldr	r3, [pc, #220]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 0203 	bic.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4934      	ldr	r1, [pc, #208]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b8:	f7ff f9ee 	bl	8004c98 <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c0:	f7ff f9ea 	bl	8004c98 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e04f      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 020c 	and.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1eb      	bne.n	80058c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058e8:	4b25      	ldr	r3, [pc, #148]	@ (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d20c      	bcs.n	8005910 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b22      	ldr	r3, [pc, #136]	@ (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fe:	4b20      	ldr	r3, [pc, #128]	@ (8005980 <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d001      	beq.n	8005910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e032      	b.n	8005976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800591c:	4b19      	ldr	r3, [pc, #100]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4916      	ldr	r1, [pc, #88]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	4313      	orrs	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800593a:	4b12      	ldr	r3, [pc, #72]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	490e      	ldr	r1, [pc, #56]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	4313      	orrs	r3, r2
 800594c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800594e:	f000 f821 	bl	8005994 <HAL_RCC_GetSysClockFreq>
 8005952:	4602      	mov	r2, r0
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	490a      	ldr	r1, [pc, #40]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 8005960:	5ccb      	ldrb	r3, [r1, r3]
 8005962:	fa22 f303 	lsr.w	r3, r2, r3
 8005966:	4a09      	ldr	r2, [pc, #36]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800596a:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <HAL_RCC_ClockConfig+0x1c8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff f94e 	bl	8004c10 <HAL_InitTick>

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40023c00 	.word	0x40023c00
 8005984:	40023800 	.word	0x40023800
 8005988:	08007304 	.word	0x08007304
 800598c:	20000000 	.word	0x20000000
 8005990:	20000004 	.word	0x20000004

08005994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005998:	b090      	sub	sp, #64	@ 0x40
 800599a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059ac:	4b59      	ldr	r3, [pc, #356]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d00d      	beq.n	80059d4 <HAL_RCC_GetSysClockFreq+0x40>
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	f200 80a1 	bhi.w	8005b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x34>
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d003      	beq.n	80059ce <HAL_RCC_GetSysClockFreq+0x3a>
 80059c6:	e09b      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b53      	ldr	r3, [pc, #332]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80059ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059cc:	e09b      	b.n	8005b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ce:	4b53      	ldr	r3, [pc, #332]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80059d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80059d2:	e098      	b.n	8005b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059de:	4b4d      	ldr	r3, [pc, #308]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d028      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	2200      	movs	r2, #0
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80059fc:	2100      	movs	r1, #0
 80059fe:	4b47      	ldr	r3, [pc, #284]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a00:	fb03 f201 	mul.w	r2, r3, r1
 8005a04:	2300      	movs	r3, #0
 8005a06:	fb00 f303 	mul.w	r3, r0, r3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	4a43      	ldr	r2, [pc, #268]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8005a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a14:	460a      	mov	r2, r1
 8005a16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a1a:	4413      	add	r3, r2
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a20:	2200      	movs	r2, #0
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	61fa      	str	r2, [r7, #28]
 8005a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a2e:	f7fe fc27 	bl	8004280 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4613      	mov	r3, r2
 8005a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a3a:	e053      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3c:	4b35      	ldr	r3, [pc, #212]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	099b      	lsrs	r3, r3, #6
 8005a42:	2200      	movs	r2, #0
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	617a      	str	r2, [r7, #20]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a4e:	f04f 0b00 	mov.w	fp, #0
 8005a52:	4652      	mov	r2, sl
 8005a54:	465b      	mov	r3, fp
 8005a56:	f04f 0000 	mov.w	r0, #0
 8005a5a:	f04f 0100 	mov.w	r1, #0
 8005a5e:	0159      	lsls	r1, r3, #5
 8005a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a64:	0150      	lsls	r0, r2, #5
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8005a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a86:	ebb2 0408 	subs.w	r4, r2, r8
 8005a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	00eb      	lsls	r3, r5, #3
 8005a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a9c:	00e2      	lsls	r2, r4, #3
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	eb14 030a 	adds.w	r3, r4, sl
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	eb45 030b 	adc.w	r3, r5, fp
 8005aac:	607b      	str	r3, [r7, #4]
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005aba:	4629      	mov	r1, r5
 8005abc:	028b      	lsls	r3, r1, #10
 8005abe:	4621      	mov	r1, r4
 8005ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	028a      	lsls	r2, r1, #10
 8005ac8:	4610      	mov	r0, r2
 8005aca:	4619      	mov	r1, r3
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	2200      	movs	r2, #0
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	60fa      	str	r2, [r7, #12]
 8005ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ad8:	f7fe fbd2 	bl	8004280 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	3301      	adds	r3, #1
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005af4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005afe:	e002      	b.n	8005b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b00:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3740      	adds	r7, #64	@ 0x40
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b12:	bf00      	nop
 8005b14:	40023800 	.word	0x40023800
 8005b18:	00f42400 	.word	0x00f42400
 8005b1c:	017d7840 	.word	0x017d7840

08005b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b24:	4b03      	ldr	r3, [pc, #12]	@ (8005b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b26:	681b      	ldr	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20000000 	.word	0x20000000

08005b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b3c:	f7ff fff0 	bl	8005b20 <HAL_RCC_GetHCLKFreq>
 8005b40:	4602      	mov	r2, r0
 8005b42:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	0a9b      	lsrs	r3, r3, #10
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	4903      	ldr	r1, [pc, #12]	@ (8005b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b4e:	5ccb      	ldrb	r3, [r1, r3]
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	08007314 	.word	0x08007314

08005b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b64:	f7ff ffdc 	bl	8005b20 <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	0b5b      	lsrs	r3, r3, #13
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4903      	ldr	r1, [pc, #12]	@ (8005b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40023800 	.word	0x40023800
 8005b84:	08007314 	.word	0x08007314

08005b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e042      	b.n	8005c20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fe fec6 	bl	8004940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	@ 0x24
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f973 	bl	8005eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	@ 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d175      	bne.n	8005d34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_UART_Transmit+0x2c>
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e06e      	b.n	8005d36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2221      	movs	r2, #33	@ 0x21
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c66:	f7ff f817 	bl	8004c98 <HAL_GetTick>
 8005c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c80:	d108      	bne.n	8005c94 <HAL_UART_Transmit+0x6c>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e003      	b.n	8005c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c9c:	e02e      	b.n	8005cfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2180      	movs	r1, #128	@ 0x80
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f848 	bl	8005d3e <UART_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e03a      	b.n	8005d36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10b      	bne.n	8005cde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	3302      	adds	r3, #2
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e007      	b.n	8005cee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1cb      	bne.n	8005c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2140      	movs	r1, #64	@ 0x40
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f814 	bl	8005d3e <UART_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e006      	b.n	8005d36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b086      	sub	sp, #24
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4e:	e03b      	b.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d56:	d037      	beq.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d58:	f7fe ff9e 	bl	8004c98 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	6a3a      	ldr	r2, [r7, #32]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d302      	bcc.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e03a      	b.n	8005de8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d023      	beq.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b80      	cmp	r3, #128	@ 0x80
 8005d84:	d020      	beq.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b40      	cmp	r3, #64	@ 0x40
 8005d8a:	d01d      	beq.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d116      	bne.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f81d 	bl	8005df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2208      	movs	r2, #8
 8005dba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e00f      	b.n	8005de8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d0b4      	beq.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b095      	sub	sp, #84	@ 0x54
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	330c      	adds	r3, #12
 8005e16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e18:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e5      	bne.n	8005df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3314      	adds	r3, #20
 8005e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e5      	bne.n	8005e2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d119      	bne.n	8005e9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f023 0310 	bic.w	r3, r3, #16
 8005e7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e88:	61ba      	str	r2, [r7, #24]
 8005e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6979      	ldr	r1, [r7, #20]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	613b      	str	r3, [r7, #16]
   return(result);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e5      	bne.n	8005e68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005eaa:	bf00      	nop
 8005eac:	3754      	adds	r7, #84	@ 0x54
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ebc:	b0c0      	sub	sp, #256	@ 0x100
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed4:	68d9      	ldr	r1, [r3, #12]
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	ea40 0301 	orr.w	r3, r0, r1
 8005ee0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f10:	f021 010c 	bic.w	r1, r1, #12
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f32:	6999      	ldr	r1, [r3, #24]
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	ea40 0301 	orr.w	r3, r0, r1
 8005f3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b8f      	ldr	r3, [pc, #572]	@ (8006184 <UART_SetConfig+0x2cc>)
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d005      	beq.n	8005f58 <UART_SetConfig+0xa0>
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b8d      	ldr	r3, [pc, #564]	@ (8006188 <UART_SetConfig+0x2d0>)
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d104      	bne.n	8005f62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7ff fe02 	bl	8005b60 <HAL_RCC_GetPCLK2Freq>
 8005f5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f60:	e003      	b.n	8005f6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f62:	f7ff fde9 	bl	8005b38 <HAL_RCC_GetPCLK1Freq>
 8005f66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f74:	f040 810c 	bne.w	8006190 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f8a:	4622      	mov	r2, r4
 8005f8c:	462b      	mov	r3, r5
 8005f8e:	1891      	adds	r1, r2, r2
 8005f90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f92:	415b      	adcs	r3, r3
 8005f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	eb12 0801 	adds.w	r8, r2, r1
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	eb43 0901 	adc.w	r9, r3, r1
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fba:	4690      	mov	r8, r2
 8005fbc:	4699      	mov	r9, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	eb18 0303 	adds.w	r3, r8, r3
 8005fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc8:	462b      	mov	r3, r5
 8005fca:	eb49 0303 	adc.w	r3, r9, r3
 8005fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	18db      	adds	r3, r3, r3
 8005fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fec:	4613      	mov	r3, r2
 8005fee:	eb42 0303 	adc.w	r3, r2, r3
 8005ff2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ff4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ff8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ffc:	f7fe f940 	bl	8004280 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4b61      	ldr	r3, [pc, #388]	@ (800618c <UART_SetConfig+0x2d4>)
 8006006:	fba3 2302 	umull	r2, r3, r3, r2
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	011c      	lsls	r4, r3, #4
 800600e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006012:	2200      	movs	r2, #0
 8006014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006018:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800601c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	1891      	adds	r1, r2, r2
 8006026:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006028:	415b      	adcs	r3, r3
 800602a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800602c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006030:	4641      	mov	r1, r8
 8006032:	eb12 0a01 	adds.w	sl, r2, r1
 8006036:	4649      	mov	r1, r9
 8006038:	eb43 0b01 	adc.w	fp, r3, r1
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006048:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800604c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006050:	4692      	mov	sl, r2
 8006052:	469b      	mov	fp, r3
 8006054:	4643      	mov	r3, r8
 8006056:	eb1a 0303 	adds.w	r3, sl, r3
 800605a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800605e:	464b      	mov	r3, r9
 8006060:	eb4b 0303 	adc.w	r3, fp, r3
 8006064:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006074:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800607c:	460b      	mov	r3, r1
 800607e:	18db      	adds	r3, r3, r3
 8006080:	643b      	str	r3, [r7, #64]	@ 0x40
 8006082:	4613      	mov	r3, r2
 8006084:	eb42 0303 	adc.w	r3, r2, r3
 8006088:	647b      	str	r3, [r7, #68]	@ 0x44
 800608a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800608e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006092:	f7fe f8f5 	bl	8004280 <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4611      	mov	r1, r2
 800609c:	4b3b      	ldr	r3, [pc, #236]	@ (800618c <UART_SetConfig+0x2d4>)
 800609e:	fba3 2301 	umull	r2, r3, r3, r1
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2264      	movs	r2, #100	@ 0x64
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	1acb      	subs	r3, r1, r3
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060b2:	4b36      	ldr	r3, [pc, #216]	@ (800618c <UART_SetConfig+0x2d4>)
 80060b4:	fba3 2302 	umull	r2, r3, r3, r2
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060c0:	441c      	add	r4, r3
 80060c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	1891      	adds	r1, r2, r2
 80060da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060dc:	415b      	adcs	r3, r3
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060e4:	4641      	mov	r1, r8
 80060e6:	1851      	adds	r1, r2, r1
 80060e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80060ea:	4649      	mov	r1, r9
 80060ec:	414b      	adcs	r3, r1
 80060ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060fc:	4659      	mov	r1, fp
 80060fe:	00cb      	lsls	r3, r1, #3
 8006100:	4651      	mov	r1, sl
 8006102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006106:	4651      	mov	r1, sl
 8006108:	00ca      	lsls	r2, r1, #3
 800610a:	4610      	mov	r0, r2
 800610c:	4619      	mov	r1, r3
 800610e:	4603      	mov	r3, r0
 8006110:	4642      	mov	r2, r8
 8006112:	189b      	adds	r3, r3, r2
 8006114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006118:	464b      	mov	r3, r9
 800611a:	460a      	mov	r2, r1
 800611c:	eb42 0303 	adc.w	r3, r2, r3
 8006120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006130:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006138:	460b      	mov	r3, r1
 800613a:	18db      	adds	r3, r3, r3
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800613e:	4613      	mov	r3, r2
 8006140:	eb42 0303 	adc.w	r3, r2, r3
 8006144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800614a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800614e:	f7fe f897 	bl	8004280 <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4b0d      	ldr	r3, [pc, #52]	@ (800618c <UART_SetConfig+0x2d4>)
 8006158:	fba3 1302 	umull	r1, r3, r3, r2
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	2164      	movs	r1, #100	@ 0x64
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	3332      	adds	r3, #50	@ 0x32
 800616a:	4a08      	ldr	r2, [pc, #32]	@ (800618c <UART_SetConfig+0x2d4>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	f003 0207 	and.w	r2, r3, #7
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4422      	add	r2, r4
 800617e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006180:	e106      	b.n	8006390 <UART_SetConfig+0x4d8>
 8006182:	bf00      	nop
 8006184:	40011000 	.word	0x40011000
 8006188:	40011400 	.word	0x40011400
 800618c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006194:	2200      	movs	r2, #0
 8006196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800619a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800619e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80061a2:	4642      	mov	r2, r8
 80061a4:	464b      	mov	r3, r9
 80061a6:	1891      	adds	r1, r2, r2
 80061a8:	6239      	str	r1, [r7, #32]
 80061aa:	415b      	adcs	r3, r3
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061b2:	4641      	mov	r1, r8
 80061b4:	1854      	adds	r4, r2, r1
 80061b6:	4649      	mov	r1, r9
 80061b8:	eb43 0501 	adc.w	r5, r3, r1
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	00eb      	lsls	r3, r5, #3
 80061c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ca:	00e2      	lsls	r2, r4, #3
 80061cc:	4614      	mov	r4, r2
 80061ce:	461d      	mov	r5, r3
 80061d0:	4643      	mov	r3, r8
 80061d2:	18e3      	adds	r3, r4, r3
 80061d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061d8:	464b      	mov	r3, r9
 80061da:	eb45 0303 	adc.w	r3, r5, r3
 80061de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061fe:	4629      	mov	r1, r5
 8006200:	008b      	lsls	r3, r1, #2
 8006202:	4621      	mov	r1, r4
 8006204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006208:	4621      	mov	r1, r4
 800620a:	008a      	lsls	r2, r1, #2
 800620c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006210:	f7fe f836 	bl	8004280 <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4b60      	ldr	r3, [pc, #384]	@ (800639c <UART_SetConfig+0x4e4>)
 800621a:	fba3 2302 	umull	r2, r3, r3, r2
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	011c      	lsls	r4, r3, #4
 8006222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800622c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006230:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006234:	4642      	mov	r2, r8
 8006236:	464b      	mov	r3, r9
 8006238:	1891      	adds	r1, r2, r2
 800623a:	61b9      	str	r1, [r7, #24]
 800623c:	415b      	adcs	r3, r3
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006244:	4641      	mov	r1, r8
 8006246:	1851      	adds	r1, r2, r1
 8006248:	6139      	str	r1, [r7, #16]
 800624a:	4649      	mov	r1, r9
 800624c:	414b      	adcs	r3, r1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800625c:	4659      	mov	r1, fp
 800625e:	00cb      	lsls	r3, r1, #3
 8006260:	4651      	mov	r1, sl
 8006262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006266:	4651      	mov	r1, sl
 8006268:	00ca      	lsls	r2, r1, #3
 800626a:	4610      	mov	r0, r2
 800626c:	4619      	mov	r1, r3
 800626e:	4603      	mov	r3, r0
 8006270:	4642      	mov	r2, r8
 8006272:	189b      	adds	r3, r3, r2
 8006274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006278:	464b      	mov	r3, r9
 800627a:	460a      	mov	r2, r1
 800627c:	eb42 0303 	adc.w	r3, r2, r3
 8006280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800628e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800629c:	4649      	mov	r1, r9
 800629e:	008b      	lsls	r3, r1, #2
 80062a0:	4641      	mov	r1, r8
 80062a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062a6:	4641      	mov	r1, r8
 80062a8:	008a      	lsls	r2, r1, #2
 80062aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062ae:	f7fd ffe7 	bl	8004280 <__aeabi_uldivmod>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	4b38      	ldr	r3, [pc, #224]	@ (800639c <UART_SetConfig+0x4e4>)
 80062ba:	fba3 2301 	umull	r2, r3, r3, r1
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	2264      	movs	r2, #100	@ 0x64
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	1acb      	subs	r3, r1, r3
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	3332      	adds	r3, #50	@ 0x32
 80062cc:	4a33      	ldr	r2, [pc, #204]	@ (800639c <UART_SetConfig+0x4e4>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d8:	441c      	add	r4, r3
 80062da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062de:	2200      	movs	r2, #0
 80062e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80062e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062e8:	4642      	mov	r2, r8
 80062ea:	464b      	mov	r3, r9
 80062ec:	1891      	adds	r1, r2, r2
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	415b      	adcs	r3, r3
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f8:	4641      	mov	r1, r8
 80062fa:	1851      	adds	r1, r2, r1
 80062fc:	6039      	str	r1, [r7, #0]
 80062fe:	4649      	mov	r1, r9
 8006300:	414b      	adcs	r3, r1
 8006302:	607b      	str	r3, [r7, #4]
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006310:	4659      	mov	r1, fp
 8006312:	00cb      	lsls	r3, r1, #3
 8006314:	4651      	mov	r1, sl
 8006316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800631a:	4651      	mov	r1, sl
 800631c:	00ca      	lsls	r2, r1, #3
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	4603      	mov	r3, r0
 8006324:	4642      	mov	r2, r8
 8006326:	189b      	adds	r3, r3, r2
 8006328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800632a:	464b      	mov	r3, r9
 800632c:	460a      	mov	r2, r1
 800632e:	eb42 0303 	adc.w	r3, r2, r3
 8006332:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	663b      	str	r3, [r7, #96]	@ 0x60
 800633e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800634c:	4649      	mov	r1, r9
 800634e:	008b      	lsls	r3, r1, #2
 8006350:	4641      	mov	r1, r8
 8006352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006356:	4641      	mov	r1, r8
 8006358:	008a      	lsls	r2, r1, #2
 800635a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800635e:	f7fd ff8f 	bl	8004280 <__aeabi_uldivmod>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <UART_SetConfig+0x4e4>)
 8006368:	fba3 1302 	umull	r1, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	2164      	movs	r1, #100	@ 0x64
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	3332      	adds	r3, #50	@ 0x32
 800637a:	4a08      	ldr	r2, [pc, #32]	@ (800639c <UART_SetConfig+0x4e4>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	f003 020f 	and.w	r2, r3, #15
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4422      	add	r2, r4
 800638e:	609a      	str	r2, [r3, #8]
}
 8006390:	bf00      	nop
 8006392:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006396:	46bd      	mov	sp, r7
 8006398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800639c:	51eb851f 	.word	0x51eb851f

080063a0 <std>:
 80063a0:	2300      	movs	r3, #0
 80063a2:	b510      	push	{r4, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	e9c0 3300 	strd	r3, r3, [r0]
 80063aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063ae:	6083      	str	r3, [r0, #8]
 80063b0:	8181      	strh	r1, [r0, #12]
 80063b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80063b4:	81c2      	strh	r2, [r0, #14]
 80063b6:	6183      	str	r3, [r0, #24]
 80063b8:	4619      	mov	r1, r3
 80063ba:	2208      	movs	r2, #8
 80063bc:	305c      	adds	r0, #92	@ 0x5c
 80063be:	f000 f9f9 	bl	80067b4 <memset>
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <std+0x58>)
 80063c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <std+0x5c>)
 80063c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <std+0x60>)
 80063cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <std+0x64>)
 80063d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <std+0x68>)
 80063d4:	6224      	str	r4, [r4, #32]
 80063d6:	429c      	cmp	r4, r3
 80063d8:	d006      	beq.n	80063e8 <std+0x48>
 80063da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063de:	4294      	cmp	r4, r2
 80063e0:	d002      	beq.n	80063e8 <std+0x48>
 80063e2:	33d0      	adds	r3, #208	@ 0xd0
 80063e4:	429c      	cmp	r4, r3
 80063e6:	d105      	bne.n	80063f4 <std+0x54>
 80063e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f0:	f000 ba58 	b.w	80068a4 <__retarget_lock_init_recursive>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	bf00      	nop
 80063f8:	08006605 	.word	0x08006605
 80063fc:	08006627 	.word	0x08006627
 8006400:	0800665f 	.word	0x0800665f
 8006404:	08006683 	.word	0x08006683
 8006408:	200000e0 	.word	0x200000e0

0800640c <stdio_exit_handler>:
 800640c:	4a02      	ldr	r2, [pc, #8]	@ (8006418 <stdio_exit_handler+0xc>)
 800640e:	4903      	ldr	r1, [pc, #12]	@ (800641c <stdio_exit_handler+0x10>)
 8006410:	4803      	ldr	r0, [pc, #12]	@ (8006420 <stdio_exit_handler+0x14>)
 8006412:	f000 b869 	b.w	80064e8 <_fwalk_sglue>
 8006416:	bf00      	nop
 8006418:	2000000c 	.word	0x2000000c
 800641c:	08007141 	.word	0x08007141
 8006420:	2000001c 	.word	0x2000001c

08006424 <cleanup_stdio>:
 8006424:	6841      	ldr	r1, [r0, #4]
 8006426:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <cleanup_stdio+0x34>)
 8006428:	4299      	cmp	r1, r3
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	d001      	beq.n	8006434 <cleanup_stdio+0x10>
 8006430:	f000 fe86 	bl	8007140 <_fflush_r>
 8006434:	68a1      	ldr	r1, [r4, #8]
 8006436:	4b09      	ldr	r3, [pc, #36]	@ (800645c <cleanup_stdio+0x38>)
 8006438:	4299      	cmp	r1, r3
 800643a:	d002      	beq.n	8006442 <cleanup_stdio+0x1e>
 800643c:	4620      	mov	r0, r4
 800643e:	f000 fe7f 	bl	8007140 <_fflush_r>
 8006442:	68e1      	ldr	r1, [r4, #12]
 8006444:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <cleanup_stdio+0x3c>)
 8006446:	4299      	cmp	r1, r3
 8006448:	d004      	beq.n	8006454 <cleanup_stdio+0x30>
 800644a:	4620      	mov	r0, r4
 800644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006450:	f000 be76 	b.w	8007140 <_fflush_r>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	200000e0 	.word	0x200000e0
 800645c:	20000148 	.word	0x20000148
 8006460:	200001b0 	.word	0x200001b0

08006464 <global_stdio_init.part.0>:
 8006464:	b510      	push	{r4, lr}
 8006466:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <global_stdio_init.part.0+0x30>)
 8006468:	4c0b      	ldr	r4, [pc, #44]	@ (8006498 <global_stdio_init.part.0+0x34>)
 800646a:	4a0c      	ldr	r2, [pc, #48]	@ (800649c <global_stdio_init.part.0+0x38>)
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	4620      	mov	r0, r4
 8006470:	2200      	movs	r2, #0
 8006472:	2104      	movs	r1, #4
 8006474:	f7ff ff94 	bl	80063a0 <std>
 8006478:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800647c:	2201      	movs	r2, #1
 800647e:	2109      	movs	r1, #9
 8006480:	f7ff ff8e 	bl	80063a0 <std>
 8006484:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006488:	2202      	movs	r2, #2
 800648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648e:	2112      	movs	r1, #18
 8006490:	f7ff bf86 	b.w	80063a0 <std>
 8006494:	20000218 	.word	0x20000218
 8006498:	200000e0 	.word	0x200000e0
 800649c:	0800640d 	.word	0x0800640d

080064a0 <__sfp_lock_acquire>:
 80064a0:	4801      	ldr	r0, [pc, #4]	@ (80064a8 <__sfp_lock_acquire+0x8>)
 80064a2:	f000 ba00 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 80064a6:	bf00      	nop
 80064a8:	20000221 	.word	0x20000221

080064ac <__sfp_lock_release>:
 80064ac:	4801      	ldr	r0, [pc, #4]	@ (80064b4 <__sfp_lock_release+0x8>)
 80064ae:	f000 b9fb 	b.w	80068a8 <__retarget_lock_release_recursive>
 80064b2:	bf00      	nop
 80064b4:	20000221 	.word	0x20000221

080064b8 <__sinit>:
 80064b8:	b510      	push	{r4, lr}
 80064ba:	4604      	mov	r4, r0
 80064bc:	f7ff fff0 	bl	80064a0 <__sfp_lock_acquire>
 80064c0:	6a23      	ldr	r3, [r4, #32]
 80064c2:	b11b      	cbz	r3, 80064cc <__sinit+0x14>
 80064c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c8:	f7ff bff0 	b.w	80064ac <__sfp_lock_release>
 80064cc:	4b04      	ldr	r3, [pc, #16]	@ (80064e0 <__sinit+0x28>)
 80064ce:	6223      	str	r3, [r4, #32]
 80064d0:	4b04      	ldr	r3, [pc, #16]	@ (80064e4 <__sinit+0x2c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f5      	bne.n	80064c4 <__sinit+0xc>
 80064d8:	f7ff ffc4 	bl	8006464 <global_stdio_init.part.0>
 80064dc:	e7f2      	b.n	80064c4 <__sinit+0xc>
 80064de:	bf00      	nop
 80064e0:	08006425 	.word	0x08006425
 80064e4:	20000218 	.word	0x20000218

080064e8 <_fwalk_sglue>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	4607      	mov	r7, r0
 80064ee:	4688      	mov	r8, r1
 80064f0:	4614      	mov	r4, r2
 80064f2:	2600      	movs	r6, #0
 80064f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064f8:	f1b9 0901 	subs.w	r9, r9, #1
 80064fc:	d505      	bpl.n	800650a <_fwalk_sglue+0x22>
 80064fe:	6824      	ldr	r4, [r4, #0]
 8006500:	2c00      	cmp	r4, #0
 8006502:	d1f7      	bne.n	80064f4 <_fwalk_sglue+0xc>
 8006504:	4630      	mov	r0, r6
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d907      	bls.n	8006520 <_fwalk_sglue+0x38>
 8006510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006514:	3301      	adds	r3, #1
 8006516:	d003      	beq.n	8006520 <_fwalk_sglue+0x38>
 8006518:	4629      	mov	r1, r5
 800651a:	4638      	mov	r0, r7
 800651c:	47c0      	blx	r8
 800651e:	4306      	orrs	r6, r0
 8006520:	3568      	adds	r5, #104	@ 0x68
 8006522:	e7e9      	b.n	80064f8 <_fwalk_sglue+0x10>

08006524 <iprintf>:
 8006524:	b40f      	push	{r0, r1, r2, r3}
 8006526:	b507      	push	{r0, r1, r2, lr}
 8006528:	4906      	ldr	r1, [pc, #24]	@ (8006544 <iprintf+0x20>)
 800652a:	ab04      	add	r3, sp, #16
 800652c:	6808      	ldr	r0, [r1, #0]
 800652e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006532:	6881      	ldr	r1, [r0, #8]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	f000 fadb 	bl	8006af0 <_vfiprintf_r>
 800653a:	b003      	add	sp, #12
 800653c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006540:	b004      	add	sp, #16
 8006542:	4770      	bx	lr
 8006544:	20000018 	.word	0x20000018

08006548 <_puts_r>:
 8006548:	6a03      	ldr	r3, [r0, #32]
 800654a:	b570      	push	{r4, r5, r6, lr}
 800654c:	6884      	ldr	r4, [r0, #8]
 800654e:	4605      	mov	r5, r0
 8006550:	460e      	mov	r6, r1
 8006552:	b90b      	cbnz	r3, 8006558 <_puts_r+0x10>
 8006554:	f7ff ffb0 	bl	80064b8 <__sinit>
 8006558:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800655a:	07db      	lsls	r3, r3, #31
 800655c:	d405      	bmi.n	800656a <_puts_r+0x22>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	0598      	lsls	r0, r3, #22
 8006562:	d402      	bmi.n	800656a <_puts_r+0x22>
 8006564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006566:	f000 f99e 	bl	80068a6 <__retarget_lock_acquire_recursive>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	0719      	lsls	r1, r3, #28
 800656e:	d502      	bpl.n	8006576 <_puts_r+0x2e>
 8006570:	6923      	ldr	r3, [r4, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d135      	bne.n	80065e2 <_puts_r+0x9a>
 8006576:	4621      	mov	r1, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 f8c5 	bl	8006708 <__swsetup_r>
 800657e:	b380      	cbz	r0, 80065e2 <_puts_r+0x9a>
 8006580:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006586:	07da      	lsls	r2, r3, #31
 8006588:	d405      	bmi.n	8006596 <_puts_r+0x4e>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	059b      	lsls	r3, r3, #22
 800658e:	d402      	bmi.n	8006596 <_puts_r+0x4e>
 8006590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006592:	f000 f989 	bl	80068a8 <__retarget_lock_release_recursive>
 8006596:	4628      	mov	r0, r5
 8006598:	bd70      	pop	{r4, r5, r6, pc}
 800659a:	2b00      	cmp	r3, #0
 800659c:	da04      	bge.n	80065a8 <_puts_r+0x60>
 800659e:	69a2      	ldr	r2, [r4, #24]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	dc17      	bgt.n	80065d4 <_puts_r+0x8c>
 80065a4:	290a      	cmp	r1, #10
 80065a6:	d015      	beq.n	80065d4 <_puts_r+0x8c>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	6022      	str	r2, [r4, #0]
 80065ae:	7019      	strb	r1, [r3, #0]
 80065b0:	68a3      	ldr	r3, [r4, #8]
 80065b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065b6:	3b01      	subs	r3, #1
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	2900      	cmp	r1, #0
 80065bc:	d1ed      	bne.n	800659a <_puts_r+0x52>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da11      	bge.n	80065e6 <_puts_r+0x9e>
 80065c2:	4622      	mov	r2, r4
 80065c4:	210a      	movs	r1, #10
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f85f 	bl	800668a <__swbuf_r>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d0d7      	beq.n	8006580 <_puts_r+0x38>
 80065d0:	250a      	movs	r5, #10
 80065d2:	e7d7      	b.n	8006584 <_puts_r+0x3c>
 80065d4:	4622      	mov	r2, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f857 	bl	800668a <__swbuf_r>
 80065dc:	3001      	adds	r0, #1
 80065de:	d1e7      	bne.n	80065b0 <_puts_r+0x68>
 80065e0:	e7ce      	b.n	8006580 <_puts_r+0x38>
 80065e2:	3e01      	subs	r6, #1
 80065e4:	e7e4      	b.n	80065b0 <_puts_r+0x68>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	220a      	movs	r2, #10
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e7ee      	b.n	80065d0 <_puts_r+0x88>
	...

080065f4 <puts>:
 80065f4:	4b02      	ldr	r3, [pc, #8]	@ (8006600 <puts+0xc>)
 80065f6:	4601      	mov	r1, r0
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	f7ff bfa5 	b.w	8006548 <_puts_r>
 80065fe:	bf00      	nop
 8006600:	20000018 	.word	0x20000018

08006604 <__sread>:
 8006604:	b510      	push	{r4, lr}
 8006606:	460c      	mov	r4, r1
 8006608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660c:	f000 f8fc 	bl	8006808 <_read_r>
 8006610:	2800      	cmp	r0, #0
 8006612:	bfab      	itete	ge
 8006614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006616:	89a3      	ldrhlt	r3, [r4, #12]
 8006618:	181b      	addge	r3, r3, r0
 800661a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800661e:	bfac      	ite	ge
 8006620:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006622:	81a3      	strhlt	r3, [r4, #12]
 8006624:	bd10      	pop	{r4, pc}

08006626 <__swrite>:
 8006626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	461f      	mov	r7, r3
 800662c:	898b      	ldrh	r3, [r1, #12]
 800662e:	05db      	lsls	r3, r3, #23
 8006630:	4605      	mov	r5, r0
 8006632:	460c      	mov	r4, r1
 8006634:	4616      	mov	r6, r2
 8006636:	d505      	bpl.n	8006644 <__swrite+0x1e>
 8006638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663c:	2302      	movs	r3, #2
 800663e:	2200      	movs	r2, #0
 8006640:	f000 f8d0 	bl	80067e4 <_lseek_r>
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800664a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	4632      	mov	r2, r6
 8006652:	463b      	mov	r3, r7
 8006654:	4628      	mov	r0, r5
 8006656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800665a:	f000 b8e7 	b.w	800682c <_write_r>

0800665e <__sseek>:
 800665e:	b510      	push	{r4, lr}
 8006660:	460c      	mov	r4, r1
 8006662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006666:	f000 f8bd 	bl	80067e4 <_lseek_r>
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	bf15      	itete	ne
 8006670:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800667a:	81a3      	strheq	r3, [r4, #12]
 800667c:	bf18      	it	ne
 800667e:	81a3      	strhne	r3, [r4, #12]
 8006680:	bd10      	pop	{r4, pc}

08006682 <__sclose>:
 8006682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006686:	f000 b89d 	b.w	80067c4 <_close_r>

0800668a <__swbuf_r>:
 800668a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668c:	460e      	mov	r6, r1
 800668e:	4614      	mov	r4, r2
 8006690:	4605      	mov	r5, r0
 8006692:	b118      	cbz	r0, 800669c <__swbuf_r+0x12>
 8006694:	6a03      	ldr	r3, [r0, #32]
 8006696:	b90b      	cbnz	r3, 800669c <__swbuf_r+0x12>
 8006698:	f7ff ff0e 	bl	80064b8 <__sinit>
 800669c:	69a3      	ldr	r3, [r4, #24]
 800669e:	60a3      	str	r3, [r4, #8]
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	071a      	lsls	r2, r3, #28
 80066a4:	d501      	bpl.n	80066aa <__swbuf_r+0x20>
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	b943      	cbnz	r3, 80066bc <__swbuf_r+0x32>
 80066aa:	4621      	mov	r1, r4
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 f82b 	bl	8006708 <__swsetup_r>
 80066b2:	b118      	cbz	r0, 80066bc <__swbuf_r+0x32>
 80066b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80066b8:	4638      	mov	r0, r7
 80066ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	6922      	ldr	r2, [r4, #16]
 80066c0:	1a98      	subs	r0, r3, r2
 80066c2:	6963      	ldr	r3, [r4, #20]
 80066c4:	b2f6      	uxtb	r6, r6
 80066c6:	4283      	cmp	r3, r0
 80066c8:	4637      	mov	r7, r6
 80066ca:	dc05      	bgt.n	80066d8 <__swbuf_r+0x4e>
 80066cc:	4621      	mov	r1, r4
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 fd36 	bl	8007140 <_fflush_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d1ed      	bne.n	80066b4 <__swbuf_r+0x2a>
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	3b01      	subs	r3, #1
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	6022      	str	r2, [r4, #0]
 80066e4:	701e      	strb	r6, [r3, #0]
 80066e6:	6962      	ldr	r2, [r4, #20]
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d004      	beq.n	80066f8 <__swbuf_r+0x6e>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	07db      	lsls	r3, r3, #31
 80066f2:	d5e1      	bpl.n	80066b8 <__swbuf_r+0x2e>
 80066f4:	2e0a      	cmp	r6, #10
 80066f6:	d1df      	bne.n	80066b8 <__swbuf_r+0x2e>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 fd20 	bl	8007140 <_fflush_r>
 8006700:	2800      	cmp	r0, #0
 8006702:	d0d9      	beq.n	80066b8 <__swbuf_r+0x2e>
 8006704:	e7d6      	b.n	80066b4 <__swbuf_r+0x2a>
	...

08006708 <__swsetup_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4b29      	ldr	r3, [pc, #164]	@ (80067b0 <__swsetup_r+0xa8>)
 800670c:	4605      	mov	r5, r0
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	460c      	mov	r4, r1
 8006712:	b118      	cbz	r0, 800671c <__swsetup_r+0x14>
 8006714:	6a03      	ldr	r3, [r0, #32]
 8006716:	b90b      	cbnz	r3, 800671c <__swsetup_r+0x14>
 8006718:	f7ff fece 	bl	80064b8 <__sinit>
 800671c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006720:	0719      	lsls	r1, r3, #28
 8006722:	d422      	bmi.n	800676a <__swsetup_r+0x62>
 8006724:	06da      	lsls	r2, r3, #27
 8006726:	d407      	bmi.n	8006738 <__swsetup_r+0x30>
 8006728:	2209      	movs	r2, #9
 800672a:	602a      	str	r2, [r5, #0]
 800672c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006736:	e033      	b.n	80067a0 <__swsetup_r+0x98>
 8006738:	0758      	lsls	r0, r3, #29
 800673a:	d512      	bpl.n	8006762 <__swsetup_r+0x5a>
 800673c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800673e:	b141      	cbz	r1, 8006752 <__swsetup_r+0x4a>
 8006740:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006744:	4299      	cmp	r1, r3
 8006746:	d002      	beq.n	800674e <__swsetup_r+0x46>
 8006748:	4628      	mov	r0, r5
 800674a:	f000 f8af 	bl	80068ac <_free_r>
 800674e:	2300      	movs	r3, #0
 8006750:	6363      	str	r3, [r4, #52]	@ 0x34
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	2300      	movs	r3, #0
 800675c:	6063      	str	r3, [r4, #4]
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	f043 0308 	orr.w	r3, r3, #8
 8006768:	81a3      	strh	r3, [r4, #12]
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	b94b      	cbnz	r3, 8006782 <__swsetup_r+0x7a>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006778:	d003      	beq.n	8006782 <__swsetup_r+0x7a>
 800677a:	4621      	mov	r1, r4
 800677c:	4628      	mov	r0, r5
 800677e:	f000 fd2d 	bl	80071dc <__smakebuf_r>
 8006782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006786:	f013 0201 	ands.w	r2, r3, #1
 800678a:	d00a      	beq.n	80067a2 <__swsetup_r+0x9a>
 800678c:	2200      	movs	r2, #0
 800678e:	60a2      	str	r2, [r4, #8]
 8006790:	6962      	ldr	r2, [r4, #20]
 8006792:	4252      	negs	r2, r2
 8006794:	61a2      	str	r2, [r4, #24]
 8006796:	6922      	ldr	r2, [r4, #16]
 8006798:	b942      	cbnz	r2, 80067ac <__swsetup_r+0xa4>
 800679a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800679e:	d1c5      	bne.n	800672c <__swsetup_r+0x24>
 80067a0:	bd38      	pop	{r3, r4, r5, pc}
 80067a2:	0799      	lsls	r1, r3, #30
 80067a4:	bf58      	it	pl
 80067a6:	6962      	ldrpl	r2, [r4, #20]
 80067a8:	60a2      	str	r2, [r4, #8]
 80067aa:	e7f4      	b.n	8006796 <__swsetup_r+0x8e>
 80067ac:	2000      	movs	r0, #0
 80067ae:	e7f7      	b.n	80067a0 <__swsetup_r+0x98>
 80067b0:	20000018 	.word	0x20000018

080067b4 <memset>:
 80067b4:	4402      	add	r2, r0
 80067b6:	4603      	mov	r3, r0
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d100      	bne.n	80067be <memset+0xa>
 80067bc:	4770      	bx	lr
 80067be:	f803 1b01 	strb.w	r1, [r3], #1
 80067c2:	e7f9      	b.n	80067b8 <memset+0x4>

080067c4 <_close_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d06      	ldr	r5, [pc, #24]	@ (80067e0 <_close_r+0x1c>)
 80067c8:	2300      	movs	r3, #0
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fe f951 	bl	8004a76 <_close>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d102      	bne.n	80067de <_close_r+0x1a>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	b103      	cbz	r3, 80067de <_close_r+0x1a>
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	2000021c 	.word	0x2000021c

080067e4 <_lseek_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d07      	ldr	r5, [pc, #28]	@ (8006804 <_lseek_r+0x20>)
 80067e8:	4604      	mov	r4, r0
 80067ea:	4608      	mov	r0, r1
 80067ec:	4611      	mov	r1, r2
 80067ee:	2200      	movs	r2, #0
 80067f0:	602a      	str	r2, [r5, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f7fe f966 	bl	8004ac4 <_lseek>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d102      	bne.n	8006802 <_lseek_r+0x1e>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	b103      	cbz	r3, 8006802 <_lseek_r+0x1e>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	2000021c 	.word	0x2000021c

08006808 <_read_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d07      	ldr	r5, [pc, #28]	@ (8006828 <_read_r+0x20>)
 800680c:	4604      	mov	r4, r0
 800680e:	4608      	mov	r0, r1
 8006810:	4611      	mov	r1, r2
 8006812:	2200      	movs	r2, #0
 8006814:	602a      	str	r2, [r5, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	f7fe f910 	bl	8004a3c <_read>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_read_r+0x1e>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	b103      	cbz	r3, 8006826 <_read_r+0x1e>
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	2000021c 	.word	0x2000021c

0800682c <_write_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d07      	ldr	r5, [pc, #28]	@ (800684c <_write_r+0x20>)
 8006830:	4604      	mov	r4, r0
 8006832:	4608      	mov	r0, r1
 8006834:	4611      	mov	r1, r2
 8006836:	2200      	movs	r2, #0
 8006838:	602a      	str	r2, [r5, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	f7fd feb6 	bl	80045ac <_write>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_write_r+0x1e>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_write_r+0x1e>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	2000021c 	.word	0x2000021c

08006850 <__errno>:
 8006850:	4b01      	ldr	r3, [pc, #4]	@ (8006858 <__errno+0x8>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000018 	.word	0x20000018

0800685c <__libc_init_array>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4d0d      	ldr	r5, [pc, #52]	@ (8006894 <__libc_init_array+0x38>)
 8006860:	4c0d      	ldr	r4, [pc, #52]	@ (8006898 <__libc_init_array+0x3c>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	2600      	movs	r6, #0
 8006868:	42a6      	cmp	r6, r4
 800686a:	d109      	bne.n	8006880 <__libc_init_array+0x24>
 800686c:	4d0b      	ldr	r5, [pc, #44]	@ (800689c <__libc_init_array+0x40>)
 800686e:	4c0c      	ldr	r4, [pc, #48]	@ (80068a0 <__libc_init_array+0x44>)
 8006870:	f000 fd22 	bl	80072b8 <_init>
 8006874:	1b64      	subs	r4, r4, r5
 8006876:	10a4      	asrs	r4, r4, #2
 8006878:	2600      	movs	r6, #0
 800687a:	42a6      	cmp	r6, r4
 800687c:	d105      	bne.n	800688a <__libc_init_array+0x2e>
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	f855 3b04 	ldr.w	r3, [r5], #4
 8006884:	4798      	blx	r3
 8006886:	3601      	adds	r6, #1
 8006888:	e7ee      	b.n	8006868 <__libc_init_array+0xc>
 800688a:	f855 3b04 	ldr.w	r3, [r5], #4
 800688e:	4798      	blx	r3
 8006890:	3601      	adds	r6, #1
 8006892:	e7f2      	b.n	800687a <__libc_init_array+0x1e>
 8006894:	08007358 	.word	0x08007358
 8006898:	08007358 	.word	0x08007358
 800689c:	08007358 	.word	0x08007358
 80068a0:	0800735c 	.word	0x0800735c

080068a4 <__retarget_lock_init_recursive>:
 80068a4:	4770      	bx	lr

080068a6 <__retarget_lock_acquire_recursive>:
 80068a6:	4770      	bx	lr

080068a8 <__retarget_lock_release_recursive>:
 80068a8:	4770      	bx	lr
	...

080068ac <_free_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4605      	mov	r5, r0
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d041      	beq.n	8006938 <_free_r+0x8c>
 80068b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068b8:	1f0c      	subs	r4, r1, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bfb8      	it	lt
 80068be:	18e4      	addlt	r4, r4, r3
 80068c0:	f000 f8e0 	bl	8006a84 <__malloc_lock>
 80068c4:	4a1d      	ldr	r2, [pc, #116]	@ (800693c <_free_r+0x90>)
 80068c6:	6813      	ldr	r3, [r2, #0]
 80068c8:	b933      	cbnz	r3, 80068d8 <_free_r+0x2c>
 80068ca:	6063      	str	r3, [r4, #4]
 80068cc:	6014      	str	r4, [r2, #0]
 80068ce:	4628      	mov	r0, r5
 80068d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d4:	f000 b8dc 	b.w	8006a90 <__malloc_unlock>
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d908      	bls.n	80068ee <_free_r+0x42>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	1821      	adds	r1, r4, r0
 80068e0:	428b      	cmp	r3, r1
 80068e2:	bf01      	itttt	eq
 80068e4:	6819      	ldreq	r1, [r3, #0]
 80068e6:	685b      	ldreq	r3, [r3, #4]
 80068e8:	1809      	addeq	r1, r1, r0
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	e7ed      	b.n	80068ca <_free_r+0x1e>
 80068ee:	461a      	mov	r2, r3
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	b10b      	cbz	r3, 80068f8 <_free_r+0x4c>
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d9fa      	bls.n	80068ee <_free_r+0x42>
 80068f8:	6811      	ldr	r1, [r2, #0]
 80068fa:	1850      	adds	r0, r2, r1
 80068fc:	42a0      	cmp	r0, r4
 80068fe:	d10b      	bne.n	8006918 <_free_r+0x6c>
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	4401      	add	r1, r0
 8006904:	1850      	adds	r0, r2, r1
 8006906:	4283      	cmp	r3, r0
 8006908:	6011      	str	r1, [r2, #0]
 800690a:	d1e0      	bne.n	80068ce <_free_r+0x22>
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	6053      	str	r3, [r2, #4]
 8006912:	4408      	add	r0, r1
 8006914:	6010      	str	r0, [r2, #0]
 8006916:	e7da      	b.n	80068ce <_free_r+0x22>
 8006918:	d902      	bls.n	8006920 <_free_r+0x74>
 800691a:	230c      	movs	r3, #12
 800691c:	602b      	str	r3, [r5, #0]
 800691e:	e7d6      	b.n	80068ce <_free_r+0x22>
 8006920:	6820      	ldr	r0, [r4, #0]
 8006922:	1821      	adds	r1, r4, r0
 8006924:	428b      	cmp	r3, r1
 8006926:	bf04      	itt	eq
 8006928:	6819      	ldreq	r1, [r3, #0]
 800692a:	685b      	ldreq	r3, [r3, #4]
 800692c:	6063      	str	r3, [r4, #4]
 800692e:	bf04      	itt	eq
 8006930:	1809      	addeq	r1, r1, r0
 8006932:	6021      	streq	r1, [r4, #0]
 8006934:	6054      	str	r4, [r2, #4]
 8006936:	e7ca      	b.n	80068ce <_free_r+0x22>
 8006938:	bd38      	pop	{r3, r4, r5, pc}
 800693a:	bf00      	nop
 800693c:	20000228 	.word	0x20000228

08006940 <sbrk_aligned>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	4e0f      	ldr	r6, [pc, #60]	@ (8006980 <sbrk_aligned+0x40>)
 8006944:	460c      	mov	r4, r1
 8006946:	6831      	ldr	r1, [r6, #0]
 8006948:	4605      	mov	r5, r0
 800694a:	b911      	cbnz	r1, 8006952 <sbrk_aligned+0x12>
 800694c:	f000 fca4 	bl	8007298 <_sbrk_r>
 8006950:	6030      	str	r0, [r6, #0]
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	f000 fc9f 	bl	8007298 <_sbrk_r>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d103      	bne.n	8006966 <sbrk_aligned+0x26>
 800695e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006962:	4620      	mov	r0, r4
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	1cc4      	adds	r4, r0, #3
 8006968:	f024 0403 	bic.w	r4, r4, #3
 800696c:	42a0      	cmp	r0, r4
 800696e:	d0f8      	beq.n	8006962 <sbrk_aligned+0x22>
 8006970:	1a21      	subs	r1, r4, r0
 8006972:	4628      	mov	r0, r5
 8006974:	f000 fc90 	bl	8007298 <_sbrk_r>
 8006978:	3001      	adds	r0, #1
 800697a:	d1f2      	bne.n	8006962 <sbrk_aligned+0x22>
 800697c:	e7ef      	b.n	800695e <sbrk_aligned+0x1e>
 800697e:	bf00      	nop
 8006980:	20000224 	.word	0x20000224

08006984 <_malloc_r>:
 8006984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006988:	1ccd      	adds	r5, r1, #3
 800698a:	f025 0503 	bic.w	r5, r5, #3
 800698e:	3508      	adds	r5, #8
 8006990:	2d0c      	cmp	r5, #12
 8006992:	bf38      	it	cc
 8006994:	250c      	movcc	r5, #12
 8006996:	2d00      	cmp	r5, #0
 8006998:	4606      	mov	r6, r0
 800699a:	db01      	blt.n	80069a0 <_malloc_r+0x1c>
 800699c:	42a9      	cmp	r1, r5
 800699e:	d904      	bls.n	80069aa <_malloc_r+0x26>
 80069a0:	230c      	movs	r3, #12
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	2000      	movs	r0, #0
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a80 <_malloc_r+0xfc>
 80069ae:	f000 f869 	bl	8006a84 <__malloc_lock>
 80069b2:	f8d8 3000 	ldr.w	r3, [r8]
 80069b6:	461c      	mov	r4, r3
 80069b8:	bb44      	cbnz	r4, 8006a0c <_malloc_r+0x88>
 80069ba:	4629      	mov	r1, r5
 80069bc:	4630      	mov	r0, r6
 80069be:	f7ff ffbf 	bl	8006940 <sbrk_aligned>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	4604      	mov	r4, r0
 80069c6:	d158      	bne.n	8006a7a <_malloc_r+0xf6>
 80069c8:	f8d8 4000 	ldr.w	r4, [r8]
 80069cc:	4627      	mov	r7, r4
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	d143      	bne.n	8006a5a <_malloc_r+0xd6>
 80069d2:	2c00      	cmp	r4, #0
 80069d4:	d04b      	beq.n	8006a6e <_malloc_r+0xea>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	4639      	mov	r1, r7
 80069da:	4630      	mov	r0, r6
 80069dc:	eb04 0903 	add.w	r9, r4, r3
 80069e0:	f000 fc5a 	bl	8007298 <_sbrk_r>
 80069e4:	4581      	cmp	r9, r0
 80069e6:	d142      	bne.n	8006a6e <_malloc_r+0xea>
 80069e8:	6821      	ldr	r1, [r4, #0]
 80069ea:	1a6d      	subs	r5, r5, r1
 80069ec:	4629      	mov	r1, r5
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff ffa6 	bl	8006940 <sbrk_aligned>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d03a      	beq.n	8006a6e <_malloc_r+0xea>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	442b      	add	r3, r5
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	bb62      	cbnz	r2, 8006a60 <_malloc_r+0xdc>
 8006a06:	f8c8 7000 	str.w	r7, [r8]
 8006a0a:	e00f      	b.n	8006a2c <_malloc_r+0xa8>
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	1b52      	subs	r2, r2, r5
 8006a10:	d420      	bmi.n	8006a54 <_malloc_r+0xd0>
 8006a12:	2a0b      	cmp	r2, #11
 8006a14:	d917      	bls.n	8006a46 <_malloc_r+0xc2>
 8006a16:	1961      	adds	r1, r4, r5
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	6025      	str	r5, [r4, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	6059      	strne	r1, [r3, #4]
 8006a20:	6863      	ldr	r3, [r4, #4]
 8006a22:	bf08      	it	eq
 8006a24:	f8c8 1000 	streq.w	r1, [r8]
 8006a28:	5162      	str	r2, [r4, r5]
 8006a2a:	604b      	str	r3, [r1, #4]
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f000 f82f 	bl	8006a90 <__malloc_unlock>
 8006a32:	f104 000b 	add.w	r0, r4, #11
 8006a36:	1d23      	adds	r3, r4, #4
 8006a38:	f020 0007 	bic.w	r0, r0, #7
 8006a3c:	1ac2      	subs	r2, r0, r3
 8006a3e:	bf1c      	itt	ne
 8006a40:	1a1b      	subne	r3, r3, r0
 8006a42:	50a3      	strne	r3, [r4, r2]
 8006a44:	e7af      	b.n	80069a6 <_malloc_r+0x22>
 8006a46:	6862      	ldr	r2, [r4, #4]
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	bf0c      	ite	eq
 8006a4c:	f8c8 2000 	streq.w	r2, [r8]
 8006a50:	605a      	strne	r2, [r3, #4]
 8006a52:	e7eb      	b.n	8006a2c <_malloc_r+0xa8>
 8006a54:	4623      	mov	r3, r4
 8006a56:	6864      	ldr	r4, [r4, #4]
 8006a58:	e7ae      	b.n	80069b8 <_malloc_r+0x34>
 8006a5a:	463c      	mov	r4, r7
 8006a5c:	687f      	ldr	r7, [r7, #4]
 8006a5e:	e7b6      	b.n	80069ce <_malloc_r+0x4a>
 8006a60:	461a      	mov	r2, r3
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d1fb      	bne.n	8006a60 <_malloc_r+0xdc>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6053      	str	r3, [r2, #4]
 8006a6c:	e7de      	b.n	8006a2c <_malloc_r+0xa8>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	6033      	str	r3, [r6, #0]
 8006a72:	4630      	mov	r0, r6
 8006a74:	f000 f80c 	bl	8006a90 <__malloc_unlock>
 8006a78:	e794      	b.n	80069a4 <_malloc_r+0x20>
 8006a7a:	6005      	str	r5, [r0, #0]
 8006a7c:	e7d6      	b.n	8006a2c <_malloc_r+0xa8>
 8006a7e:	bf00      	nop
 8006a80:	20000228 	.word	0x20000228

08006a84 <__malloc_lock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	@ (8006a8c <__malloc_lock+0x8>)
 8006a86:	f7ff bf0e 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20000220 	.word	0x20000220

08006a90 <__malloc_unlock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	@ (8006a98 <__malloc_unlock+0x8>)
 8006a92:	f7ff bf09 	b.w	80068a8 <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	20000220 	.word	0x20000220

08006a9c <__sfputc_r>:
 8006a9c:	6893      	ldr	r3, [r2, #8]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	b410      	push	{r4}
 8006aa4:	6093      	str	r3, [r2, #8]
 8006aa6:	da08      	bge.n	8006aba <__sfputc_r+0x1e>
 8006aa8:	6994      	ldr	r4, [r2, #24]
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	db01      	blt.n	8006ab2 <__sfputc_r+0x16>
 8006aae:	290a      	cmp	r1, #10
 8006ab0:	d103      	bne.n	8006aba <__sfputc_r+0x1e>
 8006ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab6:	f7ff bde8 	b.w	800668a <__swbuf_r>
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	1c58      	adds	r0, r3, #1
 8006abe:	6010      	str	r0, [r2, #0]
 8006ac0:	7019      	strb	r1, [r3, #0]
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <__sfputs_r>:
 8006aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006acc:	4606      	mov	r6, r0
 8006ace:	460f      	mov	r7, r1
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	18d5      	adds	r5, r2, r3
 8006ad4:	42ac      	cmp	r4, r5
 8006ad6:	d101      	bne.n	8006adc <__sfputs_r+0x12>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e007      	b.n	8006aec <__sfputs_r+0x22>
 8006adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ffda 	bl	8006a9c <__sfputc_r>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d1f3      	bne.n	8006ad4 <__sfputs_r+0xa>
 8006aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006af0 <_vfiprintf_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	460d      	mov	r5, r1
 8006af6:	b09d      	sub	sp, #116	@ 0x74
 8006af8:	4614      	mov	r4, r2
 8006afa:	4698      	mov	r8, r3
 8006afc:	4606      	mov	r6, r0
 8006afe:	b118      	cbz	r0, 8006b08 <_vfiprintf_r+0x18>
 8006b00:	6a03      	ldr	r3, [r0, #32]
 8006b02:	b90b      	cbnz	r3, 8006b08 <_vfiprintf_r+0x18>
 8006b04:	f7ff fcd8 	bl	80064b8 <__sinit>
 8006b08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b0a:	07d9      	lsls	r1, r3, #31
 8006b0c:	d405      	bmi.n	8006b1a <_vfiprintf_r+0x2a>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	059a      	lsls	r2, r3, #22
 8006b12:	d402      	bmi.n	8006b1a <_vfiprintf_r+0x2a>
 8006b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b16:	f7ff fec6 	bl	80068a6 <__retarget_lock_acquire_recursive>
 8006b1a:	89ab      	ldrh	r3, [r5, #12]
 8006b1c:	071b      	lsls	r3, r3, #28
 8006b1e:	d501      	bpl.n	8006b24 <_vfiprintf_r+0x34>
 8006b20:	692b      	ldr	r3, [r5, #16]
 8006b22:	b99b      	cbnz	r3, 8006b4c <_vfiprintf_r+0x5c>
 8006b24:	4629      	mov	r1, r5
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7ff fdee 	bl	8006708 <__swsetup_r>
 8006b2c:	b170      	cbz	r0, 8006b4c <_vfiprintf_r+0x5c>
 8006b2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b30:	07dc      	lsls	r4, r3, #31
 8006b32:	d504      	bpl.n	8006b3e <_vfiprintf_r+0x4e>
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b38:	b01d      	add	sp, #116	@ 0x74
 8006b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	0598      	lsls	r0, r3, #22
 8006b42:	d4f7      	bmi.n	8006b34 <_vfiprintf_r+0x44>
 8006b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b46:	f7ff feaf 	bl	80068a8 <__retarget_lock_release_recursive>
 8006b4a:	e7f3      	b.n	8006b34 <_vfiprintf_r+0x44>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b50:	2320      	movs	r3, #32
 8006b52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b5a:	2330      	movs	r3, #48	@ 0x30
 8006b5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d0c <_vfiprintf_r+0x21c>
 8006b60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b64:	f04f 0901 	mov.w	r9, #1
 8006b68:	4623      	mov	r3, r4
 8006b6a:	469a      	mov	sl, r3
 8006b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b70:	b10a      	cbz	r2, 8006b76 <_vfiprintf_r+0x86>
 8006b72:	2a25      	cmp	r2, #37	@ 0x25
 8006b74:	d1f9      	bne.n	8006b6a <_vfiprintf_r+0x7a>
 8006b76:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7a:	d00b      	beq.n	8006b94 <_vfiprintf_r+0xa4>
 8006b7c:	465b      	mov	r3, fp
 8006b7e:	4622      	mov	r2, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7ff ffa1 	bl	8006aca <__sfputs_r>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f000 80a7 	beq.w	8006cdc <_vfiprintf_r+0x1ec>
 8006b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b90:	445a      	add	r2, fp
 8006b92:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b94:	f89a 3000 	ldrb.w	r3, [sl]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 809f 	beq.w	8006cdc <_vfiprintf_r+0x1ec>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ba8:	f10a 0a01 	add.w	sl, sl, #1
 8006bac:	9304      	str	r3, [sp, #16]
 8006bae:	9307      	str	r3, [sp, #28]
 8006bb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bb6:	4654      	mov	r4, sl
 8006bb8:	2205      	movs	r2, #5
 8006bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bbe:	4853      	ldr	r0, [pc, #332]	@ (8006d0c <_vfiprintf_r+0x21c>)
 8006bc0:	f7fd fb0e 	bl	80041e0 <memchr>
 8006bc4:	9a04      	ldr	r2, [sp, #16]
 8006bc6:	b9d8      	cbnz	r0, 8006c00 <_vfiprintf_r+0x110>
 8006bc8:	06d1      	lsls	r1, r2, #27
 8006bca:	bf44      	itt	mi
 8006bcc:	2320      	movmi	r3, #32
 8006bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bd2:	0713      	lsls	r3, r2, #28
 8006bd4:	bf44      	itt	mi
 8006bd6:	232b      	movmi	r3, #43	@ 0x2b
 8006bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be2:	d015      	beq.n	8006c10 <_vfiprintf_r+0x120>
 8006be4:	9a07      	ldr	r2, [sp, #28]
 8006be6:	4654      	mov	r4, sl
 8006be8:	2000      	movs	r0, #0
 8006bea:	f04f 0c0a 	mov.w	ip, #10
 8006bee:	4621      	mov	r1, r4
 8006bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf4:	3b30      	subs	r3, #48	@ 0x30
 8006bf6:	2b09      	cmp	r3, #9
 8006bf8:	d94b      	bls.n	8006c92 <_vfiprintf_r+0x1a2>
 8006bfa:	b1b0      	cbz	r0, 8006c2a <_vfiprintf_r+0x13a>
 8006bfc:	9207      	str	r2, [sp, #28]
 8006bfe:	e014      	b.n	8006c2a <_vfiprintf_r+0x13a>
 8006c00:	eba0 0308 	sub.w	r3, r0, r8
 8006c04:	fa09 f303 	lsl.w	r3, r9, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	46a2      	mov	sl, r4
 8006c0e:	e7d2      	b.n	8006bb6 <_vfiprintf_r+0xc6>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	1d19      	adds	r1, r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	9103      	str	r1, [sp, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bfbb      	ittet	lt
 8006c1c:	425b      	neglt	r3, r3
 8006c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c22:	9307      	strge	r3, [sp, #28]
 8006c24:	9307      	strlt	r3, [sp, #28]
 8006c26:	bfb8      	it	lt
 8006c28:	9204      	strlt	r2, [sp, #16]
 8006c2a:	7823      	ldrb	r3, [r4, #0]
 8006c2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c2e:	d10a      	bne.n	8006c46 <_vfiprintf_r+0x156>
 8006c30:	7863      	ldrb	r3, [r4, #1]
 8006c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c34:	d132      	bne.n	8006c9c <_vfiprintf_r+0x1ac>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	1d1a      	adds	r2, r3, #4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	9203      	str	r2, [sp, #12]
 8006c3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c42:	3402      	adds	r4, #2
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d1c <_vfiprintf_r+0x22c>
 8006c4a:	7821      	ldrb	r1, [r4, #0]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	4650      	mov	r0, sl
 8006c50:	f7fd fac6 	bl	80041e0 <memchr>
 8006c54:	b138      	cbz	r0, 8006c66 <_vfiprintf_r+0x176>
 8006c56:	9b04      	ldr	r3, [sp, #16]
 8006c58:	eba0 000a 	sub.w	r0, r0, sl
 8006c5c:	2240      	movs	r2, #64	@ 0x40
 8006c5e:	4082      	lsls	r2, r0
 8006c60:	4313      	orrs	r3, r2
 8006c62:	3401      	adds	r4, #1
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6a:	4829      	ldr	r0, [pc, #164]	@ (8006d10 <_vfiprintf_r+0x220>)
 8006c6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c70:	2206      	movs	r2, #6
 8006c72:	f7fd fab5 	bl	80041e0 <memchr>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d03f      	beq.n	8006cfa <_vfiprintf_r+0x20a>
 8006c7a:	4b26      	ldr	r3, [pc, #152]	@ (8006d14 <_vfiprintf_r+0x224>)
 8006c7c:	bb1b      	cbnz	r3, 8006cc6 <_vfiprintf_r+0x1d6>
 8006c7e:	9b03      	ldr	r3, [sp, #12]
 8006c80:	3307      	adds	r3, #7
 8006c82:	f023 0307 	bic.w	r3, r3, #7
 8006c86:	3308      	adds	r3, #8
 8006c88:	9303      	str	r3, [sp, #12]
 8006c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c8c:	443b      	add	r3, r7
 8006c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c90:	e76a      	b.n	8006b68 <_vfiprintf_r+0x78>
 8006c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c96:	460c      	mov	r4, r1
 8006c98:	2001      	movs	r0, #1
 8006c9a:	e7a8      	b.n	8006bee <_vfiprintf_r+0xfe>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	3401      	adds	r4, #1
 8006ca0:	9305      	str	r3, [sp, #20]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	f04f 0c0a 	mov.w	ip, #10
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cae:	3a30      	subs	r2, #48	@ 0x30
 8006cb0:	2a09      	cmp	r2, #9
 8006cb2:	d903      	bls.n	8006cbc <_vfiprintf_r+0x1cc>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0c6      	beq.n	8006c46 <_vfiprintf_r+0x156>
 8006cb8:	9105      	str	r1, [sp, #20]
 8006cba:	e7c4      	b.n	8006c46 <_vfiprintf_r+0x156>
 8006cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e7f0      	b.n	8006ca8 <_vfiprintf_r+0x1b8>
 8006cc6:	ab03      	add	r3, sp, #12
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	462a      	mov	r2, r5
 8006ccc:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <_vfiprintf_r+0x228>)
 8006cce:	a904      	add	r1, sp, #16
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f3af 8000 	nop.w
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	1c78      	adds	r0, r7, #1
 8006cda:	d1d6      	bne.n	8006c8a <_vfiprintf_r+0x19a>
 8006cdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cde:	07d9      	lsls	r1, r3, #31
 8006ce0:	d405      	bmi.n	8006cee <_vfiprintf_r+0x1fe>
 8006ce2:	89ab      	ldrh	r3, [r5, #12]
 8006ce4:	059a      	lsls	r2, r3, #22
 8006ce6:	d402      	bmi.n	8006cee <_vfiprintf_r+0x1fe>
 8006ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cea:	f7ff fddd 	bl	80068a8 <__retarget_lock_release_recursive>
 8006cee:	89ab      	ldrh	r3, [r5, #12]
 8006cf0:	065b      	lsls	r3, r3, #25
 8006cf2:	f53f af1f 	bmi.w	8006b34 <_vfiprintf_r+0x44>
 8006cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cf8:	e71e      	b.n	8006b38 <_vfiprintf_r+0x48>
 8006cfa:	ab03      	add	r3, sp, #12
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <_vfiprintf_r+0x228>)
 8006d02:	a904      	add	r1, sp, #16
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 f879 	bl	8006dfc <_printf_i>
 8006d0a:	e7e4      	b.n	8006cd6 <_vfiprintf_r+0x1e6>
 8006d0c:	0800731c 	.word	0x0800731c
 8006d10:	08007326 	.word	0x08007326
 8006d14:	00000000 	.word	0x00000000
 8006d18:	08006acb 	.word	0x08006acb
 8006d1c:	08007322 	.word	0x08007322

08006d20 <_printf_common>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	4616      	mov	r6, r2
 8006d26:	4698      	mov	r8, r3
 8006d28:	688a      	ldr	r2, [r1, #8]
 8006d2a:	690b      	ldr	r3, [r1, #16]
 8006d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bfb8      	it	lt
 8006d34:	4613      	movlt	r3, r2
 8006d36:	6033      	str	r3, [r6, #0]
 8006d38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d3c:	4607      	mov	r7, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	b10a      	cbz	r2, 8006d46 <_printf_common+0x26>
 8006d42:	3301      	adds	r3, #1
 8006d44:	6033      	str	r3, [r6, #0]
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	0699      	lsls	r1, r3, #26
 8006d4a:	bf42      	ittt	mi
 8006d4c:	6833      	ldrmi	r3, [r6, #0]
 8006d4e:	3302      	addmi	r3, #2
 8006d50:	6033      	strmi	r3, [r6, #0]
 8006d52:	6825      	ldr	r5, [r4, #0]
 8006d54:	f015 0506 	ands.w	r5, r5, #6
 8006d58:	d106      	bne.n	8006d68 <_printf_common+0x48>
 8006d5a:	f104 0a19 	add.w	sl, r4, #25
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	6832      	ldr	r2, [r6, #0]
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	42ab      	cmp	r3, r5
 8006d66:	dc26      	bgt.n	8006db6 <_printf_common+0x96>
 8006d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d6c:	6822      	ldr	r2, [r4, #0]
 8006d6e:	3b00      	subs	r3, #0
 8006d70:	bf18      	it	ne
 8006d72:	2301      	movne	r3, #1
 8006d74:	0692      	lsls	r2, r2, #26
 8006d76:	d42b      	bmi.n	8006dd0 <_printf_common+0xb0>
 8006d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	4638      	mov	r0, r7
 8006d80:	47c8      	blx	r9
 8006d82:	3001      	adds	r0, #1
 8006d84:	d01e      	beq.n	8006dc4 <_printf_common+0xa4>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	6922      	ldr	r2, [r4, #16]
 8006d8a:	f003 0306 	and.w	r3, r3, #6
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	bf02      	ittt	eq
 8006d92:	68e5      	ldreq	r5, [r4, #12]
 8006d94:	6833      	ldreq	r3, [r6, #0]
 8006d96:	1aed      	subeq	r5, r5, r3
 8006d98:	68a3      	ldr	r3, [r4, #8]
 8006d9a:	bf0c      	ite	eq
 8006d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006da0:	2500      	movne	r5, #0
 8006da2:	4293      	cmp	r3, r2
 8006da4:	bfc4      	itt	gt
 8006da6:	1a9b      	subgt	r3, r3, r2
 8006da8:	18ed      	addgt	r5, r5, r3
 8006daa:	2600      	movs	r6, #0
 8006dac:	341a      	adds	r4, #26
 8006dae:	42b5      	cmp	r5, r6
 8006db0:	d11a      	bne.n	8006de8 <_printf_common+0xc8>
 8006db2:	2000      	movs	r0, #0
 8006db4:	e008      	b.n	8006dc8 <_printf_common+0xa8>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4652      	mov	r2, sl
 8006dba:	4641      	mov	r1, r8
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	47c8      	blx	r9
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d103      	bne.n	8006dcc <_printf_common+0xac>
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dcc:	3501      	adds	r5, #1
 8006dce:	e7c6      	b.n	8006d5e <_printf_common+0x3e>
 8006dd0:	18e1      	adds	r1, r4, r3
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	2030      	movs	r0, #48	@ 0x30
 8006dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dda:	4422      	add	r2, r4
 8006ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006de4:	3302      	adds	r3, #2
 8006de6:	e7c7      	b.n	8006d78 <_printf_common+0x58>
 8006de8:	2301      	movs	r3, #1
 8006dea:	4622      	mov	r2, r4
 8006dec:	4641      	mov	r1, r8
 8006dee:	4638      	mov	r0, r7
 8006df0:	47c8      	blx	r9
 8006df2:	3001      	adds	r0, #1
 8006df4:	d0e6      	beq.n	8006dc4 <_printf_common+0xa4>
 8006df6:	3601      	adds	r6, #1
 8006df8:	e7d9      	b.n	8006dae <_printf_common+0x8e>
	...

08006dfc <_printf_i>:
 8006dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	7e0f      	ldrb	r7, [r1, #24]
 8006e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e04:	2f78      	cmp	r7, #120	@ 0x78
 8006e06:	4691      	mov	r9, r2
 8006e08:	4680      	mov	r8, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	469a      	mov	sl, r3
 8006e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e12:	d807      	bhi.n	8006e24 <_printf_i+0x28>
 8006e14:	2f62      	cmp	r7, #98	@ 0x62
 8006e16:	d80a      	bhi.n	8006e2e <_printf_i+0x32>
 8006e18:	2f00      	cmp	r7, #0
 8006e1a:	f000 80d1 	beq.w	8006fc0 <_printf_i+0x1c4>
 8006e1e:	2f58      	cmp	r7, #88	@ 0x58
 8006e20:	f000 80b8 	beq.w	8006f94 <_printf_i+0x198>
 8006e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e2c:	e03a      	b.n	8006ea4 <_printf_i+0xa8>
 8006e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e32:	2b15      	cmp	r3, #21
 8006e34:	d8f6      	bhi.n	8006e24 <_printf_i+0x28>
 8006e36:	a101      	add	r1, pc, #4	@ (adr r1, 8006e3c <_printf_i+0x40>)
 8006e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006ea9 	.word	0x08006ea9
 8006e44:	08006e25 	.word	0x08006e25
 8006e48:	08006e25 	.word	0x08006e25
 8006e4c:	08006e25 	.word	0x08006e25
 8006e50:	08006e25 	.word	0x08006e25
 8006e54:	08006ea9 	.word	0x08006ea9
 8006e58:	08006e25 	.word	0x08006e25
 8006e5c:	08006e25 	.word	0x08006e25
 8006e60:	08006e25 	.word	0x08006e25
 8006e64:	08006e25 	.word	0x08006e25
 8006e68:	08006fa7 	.word	0x08006fa7
 8006e6c:	08006ed3 	.word	0x08006ed3
 8006e70:	08006f61 	.word	0x08006f61
 8006e74:	08006e25 	.word	0x08006e25
 8006e78:	08006e25 	.word	0x08006e25
 8006e7c:	08006fc9 	.word	0x08006fc9
 8006e80:	08006e25 	.word	0x08006e25
 8006e84:	08006ed3 	.word	0x08006ed3
 8006e88:	08006e25 	.word	0x08006e25
 8006e8c:	08006e25 	.word	0x08006e25
 8006e90:	08006f69 	.word	0x08006f69
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6032      	str	r2, [r6, #0]
 8006e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e09c      	b.n	8006fe2 <_printf_i+0x1e6>
 8006ea8:	6833      	ldr	r3, [r6, #0]
 8006eaa:	6820      	ldr	r0, [r4, #0]
 8006eac:	1d19      	adds	r1, r3, #4
 8006eae:	6031      	str	r1, [r6, #0]
 8006eb0:	0606      	lsls	r6, r0, #24
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0xbc>
 8006eb4:	681d      	ldr	r5, [r3, #0]
 8006eb6:	e003      	b.n	8006ec0 <_printf_i+0xc4>
 8006eb8:	0645      	lsls	r5, r0, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0xb8>
 8006ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	da03      	bge.n	8006ecc <_printf_i+0xd0>
 8006ec4:	232d      	movs	r3, #45	@ 0x2d
 8006ec6:	426d      	negs	r5, r5
 8006ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ecc:	4858      	ldr	r0, [pc, #352]	@ (8007030 <_printf_i+0x234>)
 8006ece:	230a      	movs	r3, #10
 8006ed0:	e011      	b.n	8006ef6 <_printf_i+0xfa>
 8006ed2:	6821      	ldr	r1, [r4, #0]
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	0608      	lsls	r0, r1, #24
 8006ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006edc:	d402      	bmi.n	8006ee4 <_printf_i+0xe8>
 8006ede:	0649      	lsls	r1, r1, #25
 8006ee0:	bf48      	it	mi
 8006ee2:	b2ad      	uxthmi	r5, r5
 8006ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ee6:	4852      	ldr	r0, [pc, #328]	@ (8007030 <_printf_i+0x234>)
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	bf14      	ite	ne
 8006eec:	230a      	movne	r3, #10
 8006eee:	2308      	moveq	r3, #8
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ef6:	6866      	ldr	r6, [r4, #4]
 8006ef8:	60a6      	str	r6, [r4, #8]
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	db05      	blt.n	8006f0a <_printf_i+0x10e>
 8006efe:	6821      	ldr	r1, [r4, #0]
 8006f00:	432e      	orrs	r6, r5
 8006f02:	f021 0104 	bic.w	r1, r1, #4
 8006f06:	6021      	str	r1, [r4, #0]
 8006f08:	d04b      	beq.n	8006fa2 <_printf_i+0x1a6>
 8006f0a:	4616      	mov	r6, r2
 8006f0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f10:	fb03 5711 	mls	r7, r3, r1, r5
 8006f14:	5dc7      	ldrb	r7, [r0, r7]
 8006f16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f1a:	462f      	mov	r7, r5
 8006f1c:	42bb      	cmp	r3, r7
 8006f1e:	460d      	mov	r5, r1
 8006f20:	d9f4      	bls.n	8006f0c <_printf_i+0x110>
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d10b      	bne.n	8006f3e <_printf_i+0x142>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	07df      	lsls	r7, r3, #31
 8006f2a:	d508      	bpl.n	8006f3e <_printf_i+0x142>
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	6861      	ldr	r1, [r4, #4]
 8006f30:	4299      	cmp	r1, r3
 8006f32:	bfde      	ittt	le
 8006f34:	2330      	movle	r3, #48	@ 0x30
 8006f36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f3e:	1b92      	subs	r2, r2, r6
 8006f40:	6122      	str	r2, [r4, #16]
 8006f42:	f8cd a000 	str.w	sl, [sp]
 8006f46:	464b      	mov	r3, r9
 8006f48:	aa03      	add	r2, sp, #12
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	f7ff fee7 	bl	8006d20 <_printf_common>
 8006f52:	3001      	adds	r0, #1
 8006f54:	d14a      	bne.n	8006fec <_printf_i+0x1f0>
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f5a:	b004      	add	sp, #16
 8006f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	f043 0320 	orr.w	r3, r3, #32
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	4832      	ldr	r0, [pc, #200]	@ (8007034 <_printf_i+0x238>)
 8006f6a:	2778      	movs	r7, #120	@ 0x78
 8006f6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	6831      	ldr	r1, [r6, #0]
 8006f74:	061f      	lsls	r7, r3, #24
 8006f76:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f7a:	d402      	bmi.n	8006f82 <_printf_i+0x186>
 8006f7c:	065f      	lsls	r7, r3, #25
 8006f7e:	bf48      	it	mi
 8006f80:	b2ad      	uxthmi	r5, r5
 8006f82:	6031      	str	r1, [r6, #0]
 8006f84:	07d9      	lsls	r1, r3, #31
 8006f86:	bf44      	itt	mi
 8006f88:	f043 0320 	orrmi.w	r3, r3, #32
 8006f8c:	6023      	strmi	r3, [r4, #0]
 8006f8e:	b11d      	cbz	r5, 8006f98 <_printf_i+0x19c>
 8006f90:	2310      	movs	r3, #16
 8006f92:	e7ad      	b.n	8006ef0 <_printf_i+0xf4>
 8006f94:	4826      	ldr	r0, [pc, #152]	@ (8007030 <_printf_i+0x234>)
 8006f96:	e7e9      	b.n	8006f6c <_printf_i+0x170>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	e7f6      	b.n	8006f90 <_printf_i+0x194>
 8006fa2:	4616      	mov	r6, r2
 8006fa4:	e7bd      	b.n	8006f22 <_printf_i+0x126>
 8006fa6:	6833      	ldr	r3, [r6, #0]
 8006fa8:	6825      	ldr	r5, [r4, #0]
 8006faa:	6961      	ldr	r1, [r4, #20]
 8006fac:	1d18      	adds	r0, r3, #4
 8006fae:	6030      	str	r0, [r6, #0]
 8006fb0:	062e      	lsls	r6, r5, #24
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	d501      	bpl.n	8006fba <_printf_i+0x1be>
 8006fb6:	6019      	str	r1, [r3, #0]
 8006fb8:	e002      	b.n	8006fc0 <_printf_i+0x1c4>
 8006fba:	0668      	lsls	r0, r5, #25
 8006fbc:	d5fb      	bpl.n	8006fb6 <_printf_i+0x1ba>
 8006fbe:	8019      	strh	r1, [r3, #0]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	e7bc      	b.n	8006f42 <_printf_i+0x146>
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	6032      	str	r2, [r6, #0]
 8006fce:	681e      	ldr	r6, [r3, #0]
 8006fd0:	6862      	ldr	r2, [r4, #4]
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7fd f903 	bl	80041e0 <memchr>
 8006fda:	b108      	cbz	r0, 8006fe0 <_printf_i+0x1e4>
 8006fdc:	1b80      	subs	r0, r0, r6
 8006fde:	6060      	str	r0, [r4, #4]
 8006fe0:	6863      	ldr	r3, [r4, #4]
 8006fe2:	6123      	str	r3, [r4, #16]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fea:	e7aa      	b.n	8006f42 <_printf_i+0x146>
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	47d0      	blx	sl
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d0ad      	beq.n	8006f56 <_printf_i+0x15a>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	079b      	lsls	r3, r3, #30
 8006ffe:	d413      	bmi.n	8007028 <_printf_i+0x22c>
 8007000:	68e0      	ldr	r0, [r4, #12]
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	4298      	cmp	r0, r3
 8007006:	bfb8      	it	lt
 8007008:	4618      	movlt	r0, r3
 800700a:	e7a6      	b.n	8006f5a <_printf_i+0x15e>
 800700c:	2301      	movs	r3, #1
 800700e:	4632      	mov	r2, r6
 8007010:	4649      	mov	r1, r9
 8007012:	4640      	mov	r0, r8
 8007014:	47d0      	blx	sl
 8007016:	3001      	adds	r0, #1
 8007018:	d09d      	beq.n	8006f56 <_printf_i+0x15a>
 800701a:	3501      	adds	r5, #1
 800701c:	68e3      	ldr	r3, [r4, #12]
 800701e:	9903      	ldr	r1, [sp, #12]
 8007020:	1a5b      	subs	r3, r3, r1
 8007022:	42ab      	cmp	r3, r5
 8007024:	dcf2      	bgt.n	800700c <_printf_i+0x210>
 8007026:	e7eb      	b.n	8007000 <_printf_i+0x204>
 8007028:	2500      	movs	r5, #0
 800702a:	f104 0619 	add.w	r6, r4, #25
 800702e:	e7f5      	b.n	800701c <_printf_i+0x220>
 8007030:	0800732d 	.word	0x0800732d
 8007034:	0800733e 	.word	0x0800733e

08007038 <__sflush_r>:
 8007038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007040:	0716      	lsls	r6, r2, #28
 8007042:	4605      	mov	r5, r0
 8007044:	460c      	mov	r4, r1
 8007046:	d454      	bmi.n	80070f2 <__sflush_r+0xba>
 8007048:	684b      	ldr	r3, [r1, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	dc02      	bgt.n	8007054 <__sflush_r+0x1c>
 800704e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	dd48      	ble.n	80070e6 <__sflush_r+0xae>
 8007054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007056:	2e00      	cmp	r6, #0
 8007058:	d045      	beq.n	80070e6 <__sflush_r+0xae>
 800705a:	2300      	movs	r3, #0
 800705c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007060:	682f      	ldr	r7, [r5, #0]
 8007062:	6a21      	ldr	r1, [r4, #32]
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	d030      	beq.n	80070ca <__sflush_r+0x92>
 8007068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	0759      	lsls	r1, r3, #29
 800706e:	d505      	bpl.n	800707c <__sflush_r+0x44>
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007076:	b10b      	cbz	r3, 800707c <__sflush_r+0x44>
 8007078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	2300      	movs	r3, #0
 800707e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007080:	6a21      	ldr	r1, [r4, #32]
 8007082:	4628      	mov	r0, r5
 8007084:	47b0      	blx	r6
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	d106      	bne.n	800709a <__sflush_r+0x62>
 800708c:	6829      	ldr	r1, [r5, #0]
 800708e:	291d      	cmp	r1, #29
 8007090:	d82b      	bhi.n	80070ea <__sflush_r+0xb2>
 8007092:	4a2a      	ldr	r2, [pc, #168]	@ (800713c <__sflush_r+0x104>)
 8007094:	40ca      	lsrs	r2, r1
 8007096:	07d6      	lsls	r6, r2, #31
 8007098:	d527      	bpl.n	80070ea <__sflush_r+0xb2>
 800709a:	2200      	movs	r2, #0
 800709c:	6062      	str	r2, [r4, #4]
 800709e:	04d9      	lsls	r1, r3, #19
 80070a0:	6922      	ldr	r2, [r4, #16]
 80070a2:	6022      	str	r2, [r4, #0]
 80070a4:	d504      	bpl.n	80070b0 <__sflush_r+0x78>
 80070a6:	1c42      	adds	r2, r0, #1
 80070a8:	d101      	bne.n	80070ae <__sflush_r+0x76>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	b903      	cbnz	r3, 80070b0 <__sflush_r+0x78>
 80070ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80070b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070b2:	602f      	str	r7, [r5, #0]
 80070b4:	b1b9      	cbz	r1, 80070e6 <__sflush_r+0xae>
 80070b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070ba:	4299      	cmp	r1, r3
 80070bc:	d002      	beq.n	80070c4 <__sflush_r+0x8c>
 80070be:	4628      	mov	r0, r5
 80070c0:	f7ff fbf4 	bl	80068ac <_free_r>
 80070c4:	2300      	movs	r3, #0
 80070c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80070c8:	e00d      	b.n	80070e6 <__sflush_r+0xae>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b0      	blx	r6
 80070d0:	4602      	mov	r2, r0
 80070d2:	1c50      	adds	r0, r2, #1
 80070d4:	d1c9      	bne.n	800706a <__sflush_r+0x32>
 80070d6:	682b      	ldr	r3, [r5, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0c6      	beq.n	800706a <__sflush_r+0x32>
 80070dc:	2b1d      	cmp	r3, #29
 80070de:	d001      	beq.n	80070e4 <__sflush_r+0xac>
 80070e0:	2b16      	cmp	r3, #22
 80070e2:	d11e      	bne.n	8007122 <__sflush_r+0xea>
 80070e4:	602f      	str	r7, [r5, #0]
 80070e6:	2000      	movs	r0, #0
 80070e8:	e022      	b.n	8007130 <__sflush_r+0xf8>
 80070ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ee:	b21b      	sxth	r3, r3
 80070f0:	e01b      	b.n	800712a <__sflush_r+0xf2>
 80070f2:	690f      	ldr	r7, [r1, #16]
 80070f4:	2f00      	cmp	r7, #0
 80070f6:	d0f6      	beq.n	80070e6 <__sflush_r+0xae>
 80070f8:	0793      	lsls	r3, r2, #30
 80070fa:	680e      	ldr	r6, [r1, #0]
 80070fc:	bf08      	it	eq
 80070fe:	694b      	ldreq	r3, [r1, #20]
 8007100:	600f      	str	r7, [r1, #0]
 8007102:	bf18      	it	ne
 8007104:	2300      	movne	r3, #0
 8007106:	eba6 0807 	sub.w	r8, r6, r7
 800710a:	608b      	str	r3, [r1, #8]
 800710c:	f1b8 0f00 	cmp.w	r8, #0
 8007110:	dde9      	ble.n	80070e6 <__sflush_r+0xae>
 8007112:	6a21      	ldr	r1, [r4, #32]
 8007114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007116:	4643      	mov	r3, r8
 8007118:	463a      	mov	r2, r7
 800711a:	4628      	mov	r0, r5
 800711c:	47b0      	blx	r6
 800711e:	2800      	cmp	r0, #0
 8007120:	dc08      	bgt.n	8007134 <__sflush_r+0xfc>
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800712a:	81a3      	strh	r3, [r4, #12]
 800712c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007134:	4407      	add	r7, r0
 8007136:	eba8 0800 	sub.w	r8, r8, r0
 800713a:	e7e7      	b.n	800710c <__sflush_r+0xd4>
 800713c:	20400001 	.word	0x20400001

08007140 <_fflush_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	690b      	ldr	r3, [r1, #16]
 8007144:	4605      	mov	r5, r0
 8007146:	460c      	mov	r4, r1
 8007148:	b913      	cbnz	r3, 8007150 <_fflush_r+0x10>
 800714a:	2500      	movs	r5, #0
 800714c:	4628      	mov	r0, r5
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	b118      	cbz	r0, 800715a <_fflush_r+0x1a>
 8007152:	6a03      	ldr	r3, [r0, #32]
 8007154:	b90b      	cbnz	r3, 800715a <_fflush_r+0x1a>
 8007156:	f7ff f9af 	bl	80064b8 <__sinit>
 800715a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f3      	beq.n	800714a <_fflush_r+0xa>
 8007162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007164:	07d0      	lsls	r0, r2, #31
 8007166:	d404      	bmi.n	8007172 <_fflush_r+0x32>
 8007168:	0599      	lsls	r1, r3, #22
 800716a:	d402      	bmi.n	8007172 <_fflush_r+0x32>
 800716c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716e:	f7ff fb9a 	bl	80068a6 <__retarget_lock_acquire_recursive>
 8007172:	4628      	mov	r0, r5
 8007174:	4621      	mov	r1, r4
 8007176:	f7ff ff5f 	bl	8007038 <__sflush_r>
 800717a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800717c:	07da      	lsls	r2, r3, #31
 800717e:	4605      	mov	r5, r0
 8007180:	d4e4      	bmi.n	800714c <_fflush_r+0xc>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	059b      	lsls	r3, r3, #22
 8007186:	d4e1      	bmi.n	800714c <_fflush_r+0xc>
 8007188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800718a:	f7ff fb8d 	bl	80068a8 <__retarget_lock_release_recursive>
 800718e:	e7dd      	b.n	800714c <_fflush_r+0xc>

08007190 <__swhatbuf_r>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	460c      	mov	r4, r1
 8007194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007198:	2900      	cmp	r1, #0
 800719a:	b096      	sub	sp, #88	@ 0x58
 800719c:	4615      	mov	r5, r2
 800719e:	461e      	mov	r6, r3
 80071a0:	da0d      	bge.n	80071be <__swhatbuf_r+0x2e>
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071a8:	f04f 0100 	mov.w	r1, #0
 80071ac:	bf14      	ite	ne
 80071ae:	2340      	movne	r3, #64	@ 0x40
 80071b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071b4:	2000      	movs	r0, #0
 80071b6:	6031      	str	r1, [r6, #0]
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	b016      	add	sp, #88	@ 0x58
 80071bc:	bd70      	pop	{r4, r5, r6, pc}
 80071be:	466a      	mov	r2, sp
 80071c0:	f000 f848 	bl	8007254 <_fstat_r>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	dbec      	blt.n	80071a2 <__swhatbuf_r+0x12>
 80071c8:	9901      	ldr	r1, [sp, #4]
 80071ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071d2:	4259      	negs	r1, r3
 80071d4:	4159      	adcs	r1, r3
 80071d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071da:	e7eb      	b.n	80071b4 <__swhatbuf_r+0x24>

080071dc <__smakebuf_r>:
 80071dc:	898b      	ldrh	r3, [r1, #12]
 80071de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e0:	079d      	lsls	r5, r3, #30
 80071e2:	4606      	mov	r6, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	d507      	bpl.n	80071f8 <__smakebuf_r+0x1c>
 80071e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	6123      	str	r3, [r4, #16]
 80071f0:	2301      	movs	r3, #1
 80071f2:	6163      	str	r3, [r4, #20]
 80071f4:	b003      	add	sp, #12
 80071f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f8:	ab01      	add	r3, sp, #4
 80071fa:	466a      	mov	r2, sp
 80071fc:	f7ff ffc8 	bl	8007190 <__swhatbuf_r>
 8007200:	9f00      	ldr	r7, [sp, #0]
 8007202:	4605      	mov	r5, r0
 8007204:	4639      	mov	r1, r7
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff fbbc 	bl	8006984 <_malloc_r>
 800720c:	b948      	cbnz	r0, 8007222 <__smakebuf_r+0x46>
 800720e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007212:	059a      	lsls	r2, r3, #22
 8007214:	d4ee      	bmi.n	80071f4 <__smakebuf_r+0x18>
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	f043 0302 	orr.w	r3, r3, #2
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	e7e2      	b.n	80071e8 <__smakebuf_r+0xc>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	6020      	str	r0, [r4, #0]
 8007226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	9b01      	ldr	r3, [sp, #4]
 800722e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007232:	b15b      	cbz	r3, 800724c <__smakebuf_r+0x70>
 8007234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007238:	4630      	mov	r0, r6
 800723a:	f000 f81d 	bl	8007278 <_isatty_r>
 800723e:	b128      	cbz	r0, 800724c <__smakebuf_r+0x70>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f023 0303 	bic.w	r3, r3, #3
 8007246:	f043 0301 	orr.w	r3, r3, #1
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	431d      	orrs	r5, r3
 8007250:	81a5      	strh	r5, [r4, #12]
 8007252:	e7cf      	b.n	80071f4 <__smakebuf_r+0x18>

08007254 <_fstat_r>:
 8007254:	b538      	push	{r3, r4, r5, lr}
 8007256:	4d07      	ldr	r5, [pc, #28]	@ (8007274 <_fstat_r+0x20>)
 8007258:	2300      	movs	r3, #0
 800725a:	4604      	mov	r4, r0
 800725c:	4608      	mov	r0, r1
 800725e:	4611      	mov	r1, r2
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	f7fd fc14 	bl	8004a8e <_fstat>
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	d102      	bne.n	8007270 <_fstat_r+0x1c>
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	b103      	cbz	r3, 8007270 <_fstat_r+0x1c>
 800726e:	6023      	str	r3, [r4, #0]
 8007270:	bd38      	pop	{r3, r4, r5, pc}
 8007272:	bf00      	nop
 8007274:	2000021c 	.word	0x2000021c

08007278 <_isatty_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d06      	ldr	r5, [pc, #24]	@ (8007294 <_isatty_r+0x1c>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7fd fc13 	bl	8004aae <_isatty>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_isatty_r+0x1a>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_isatty_r+0x1a>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	2000021c 	.word	0x2000021c

08007298 <_sbrk_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d06      	ldr	r5, [pc, #24]	@ (80072b4 <_sbrk_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7fd fc1c 	bl	8004ae0 <_sbrk>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_sbrk_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_sbrk_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	2000021c 	.word	0x2000021c

080072b8 <_init>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr

080072c4 <_fini>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr
