
tim_ic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005888  08005888  00006888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c94  08005c94  0000722c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c94  08005c94  00006c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c9c  08005c9c  0000722c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c9c  08005c9c  00006c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ca0  08005ca0  00006ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  08005ca4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000022c  08005ed0  0000722c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08005ed0  0000747c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000722c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff7a  00000000  00000000  0000725c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  000171d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008cb7  00000000  00000000  00018fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00021c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000948  00000000  00000000  000228a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017049  00000000  00000000  000231e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107bc  00000000  00000000  0003a231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fd58  00000000  00000000  0004a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da745  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030e8  00000000  00000000  000da788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000dd870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800586c 	.word	0x0800586c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	0800586c 	.word	0x0800586c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b530      	push	{r4, r5, lr}
 8000ee6:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	2400      	movs	r4, #0
 8000eea:	9405      	str	r4, [sp, #20]
 8000eec:	9406      	str	r4, [sp, #24]
 8000eee:	9407      	str	r4, [sp, #28]
 8000ef0:	9408      	str	r4, [sp, #32]
 8000ef2:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef4:	9401      	str	r4, [sp, #4]
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_GPIO_Init+0x8c>)
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efa:	f042 0204 	orr.w	r2, r2, #4
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f02:	f002 0204 	and.w	r2, r2, #4
 8000f06:	9201      	str	r2, [sp, #4]
 8000f08:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	9402      	str	r4, [sp, #8]
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f16:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f1a:	9202      	str	r2, [sp, #8]
 8000f1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	9403      	str	r4, [sp, #12]
 8000f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f2a:	f002 0201 	and.w	r2, r2, #1
 8000f2e:	9203      	str	r2, [sp, #12]
 8000f30:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	9404      	str	r4, [sp, #16]
 8000f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f36:	f042 0202 	orr.w	r2, r2, #2
 8000f3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	9304      	str	r3, [sp, #16]
 8000f44:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f46:	4d0b      	ldr	r5, [pc, #44]	@ (8000f74 <MX_GPIO_Init+0x90>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f000 fce2 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f5a:	2311      	movs	r3, #17
 8000f5c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f62:	a905      	add	r1, sp, #20
 8000f64:	4628      	mov	r0, r5
 8000f66:	f000 fbf3 	bl	8001750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6a:	b00b      	add	sp, #44	@ 0x2c
 8000f6c:	bd30      	pop	{r4, r5, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800

08000f78 <_write>:
    if (fd == 1 || fd == 2) {
 8000f78:	3801      	subs	r0, #1
 8000f7a:	2801      	cmp	r0, #1
 8000f7c:	d80a      	bhi.n	8000f94 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000f7e:	b510      	push	{r4, lr}
 8000f80:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f86:	b292      	uxth	r2, r2
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <_write+0x28>)
 8000f8a:	f001 ff16 	bl	8002dba <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000f8e:	b920      	cbnz	r0, 8000f9a <_write+0x22>
            return len;
 8000f90:	4620      	mov	r0, r4
}
 8000f92:	bd10      	pop	{r4, pc}
    return -1;
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000f98:	4770      	bx	lr
            return -1;
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f9e:	e7f8      	b.n	8000f92 <_write+0x1a>
 8000fa0:	20000250 	.word	0x20000250

08000fa4 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000fa4:	b508      	push	{r3, lr}
    if (htim->Instance == TIM2) {
 8000fa6:	6803      	ldr	r3, [r0, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fac:	d000      	beq.n	8000fb0 <HAL_TIM_IC_CaptureCallback+0xc>
}
 8000fae:	bd08      	pop	{r3, pc}
        cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f001 f8e5 	bl	8002180 <HAL_TIM_ReadCapturedValue>
 8000fb6:	3001      	adds	r0, #1
 8000fb8:	4b01      	ldr	r3, [pc, #4]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8000fba:	6018      	str	r0, [r3, #0]
}
 8000fbc:	e7f7      	b.n	8000fae <HAL_TIM_IC_CaptureCallback+0xa>
 8000fbe:	bf00      	nop
 8000fc0:	20000248 	.word	0x20000248

08000fc4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000fc6:	e7fe      	b.n	8000fc6 <Error_Handler+0x2>

08000fc8 <MX_USART1_UART_Init>:
{
 8000fc8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000fca:	480a      	ldr	r0, [pc, #40]	@ (8000ff4 <MX_USART1_UART_Init+0x2c>)
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_USART1_UART_Init+0x30>)
 8000fce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000fd0:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000fd4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fda:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fdc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fde:	220c      	movs	r2, #12
 8000fe0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe6:	f001 feb8 	bl	8002d5a <HAL_UART_Init>
 8000fea:	b900      	cbnz	r0, 8000fee <MX_USART1_UART_Init+0x26>
}
 8000fec:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fee:	f7ff ffe9 	bl	8000fc4 <Error_Handler>
 8000ff2:	bf00      	nop
 8000ff4:	20000250 	.word	0x20000250
 8000ff8:	40011000 	.word	0x40011000

08000ffc <MX_TIM2_Init>:
{
 8000ffc:	b500      	push	{lr}
 8000ffe:	b08b      	sub	sp, #44	@ 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001000:	2300      	movs	r3, #0
 8001002:	9306      	str	r3, [sp, #24]
 8001004:	9307      	str	r3, [sp, #28]
 8001006:	9308      	str	r3, [sp, #32]
 8001008:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100a:	9304      	str	r3, [sp, #16]
 800100c:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	9303      	str	r3, [sp, #12]
  htim2.Instance = TIM2;
 8001016:	481d      	ldr	r0, [pc, #116]	@ (800108c <MX_TIM2_Init+0x90>)
 8001018:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800101c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 800101e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8001022:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001026:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102c:	f001 f9ca 	bl	80023c4 <HAL_TIM_Base_Init>
 8001030:	bb08      	cbnz	r0, 8001076 <MX_TIM2_Init+0x7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001036:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001038:	a906      	add	r1, sp, #24
 800103a:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_TIM2_Init+0x90>)
 800103c:	f001 fb8b 	bl	8002756 <HAL_TIM_ConfigClockSource>
 8001040:	b9d8      	cbnz	r0, 800107a <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001042:	4812      	ldr	r0, [pc, #72]	@ (800108c <MX_TIM2_Init+0x90>)
 8001044:	f001 fa16 	bl	8002474 <HAL_TIM_IC_Init>
 8001048:	b9c8      	cbnz	r0, 800107e <MX_TIM2_Init+0x82>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001050:	a904      	add	r1, sp, #16
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <MX_TIM2_Init+0x90>)
 8001054:	f001 fd48 	bl	8002ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	b998      	cbnz	r0, 8001082 <MX_TIM2_Init+0x86>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800105a:	2200      	movs	r2, #0
 800105c:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001062:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8001064:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001066:	4669      	mov	r1, sp
 8001068:	4808      	ldr	r0, [pc, #32]	@ (800108c <MX_TIM2_Init+0x90>)
 800106a:	f001 fb01 	bl	8002670 <HAL_TIM_IC_ConfigChannel>
 800106e:	b950      	cbnz	r0, 8001086 <MX_TIM2_Init+0x8a>
}
 8001070:	b00b      	add	sp, #44	@ 0x2c
 8001072:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001076:	f7ff ffa5 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 800107a:	f7ff ffa3 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 800107e:	f7ff ffa1 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 8001082:	f7ff ff9f 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 8001086:	f7ff ff9d 	bl	8000fc4 <Error_Handler>
 800108a:	bf00      	nop
 800108c:	200002e0 	.word	0x200002e0

08001090 <MX_TIM4_Init>:
{
 8001090:	b500      	push	{lr}
 8001092:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001094:	2300      	movs	r3, #0
 8001096:	930a      	str	r3, [sp, #40]	@ 0x28
 8001098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800109a:	930c      	str	r3, [sp, #48]	@ 0x30
 800109c:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109e:	9308      	str	r3, [sp, #32]
 80010a0:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	9303      	str	r3, [sp, #12]
 80010a8:	9304      	str	r3, [sp, #16]
 80010aa:	9305      	str	r3, [sp, #20]
 80010ac:	9306      	str	r3, [sp, #24]
 80010ae:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80010b0:	481d      	ldr	r0, [pc, #116]	@ (8001128 <MX_TIM4_Init+0x98>)
 80010b2:	4a1e      	ldr	r2, [pc, #120]	@ (800112c <MX_TIM4_Init+0x9c>)
 80010b4:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80010b6:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80010ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010be:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010c4:	f001 f97e 	bl	80023c4 <HAL_TIM_Base_Init>
 80010c8:	bb20      	cbnz	r0, 8001114 <MX_TIM4_Init+0x84>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ce:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010d0:	a90a      	add	r1, sp, #40	@ 0x28
 80010d2:	4815      	ldr	r0, [pc, #84]	@ (8001128 <MX_TIM4_Init+0x98>)
 80010d4:	f001 fb3f 	bl	8002756 <HAL_TIM_ConfigClockSource>
 80010d8:	b9f0      	cbnz	r0, 8001118 <MX_TIM4_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010da:	4813      	ldr	r0, [pc, #76]	@ (8001128 <MX_TIM4_Init+0x98>)
 80010dc:	f001 f99e 	bl	800241c <HAL_TIM_PWM_Init>
 80010e0:	b9e0      	cbnz	r0, 800111c <MX_TIM4_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010e8:	a908      	add	r1, sp, #32
 80010ea:	480f      	ldr	r0, [pc, #60]	@ (8001128 <MX_TIM4_Init+0x98>)
 80010ec:	f001 fcfc 	bl	8002ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	b9b0      	cbnz	r0, 8001120 <MX_TIM4_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f2:	2360      	movs	r3, #96	@ 0x60
 80010f4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80010f6:	2200      	movs	r2, #0
 80010f8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fa:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fc:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fe:	a901      	add	r1, sp, #4
 8001100:	4809      	ldr	r0, [pc, #36]	@ (8001128 <MX_TIM4_Init+0x98>)
 8001102:	f001 fa11 	bl	8002528 <HAL_TIM_PWM_ConfigChannel>
 8001106:	b968      	cbnz	r0, 8001124 <MX_TIM4_Init+0x94>
  HAL_TIM_MspPostInit(&htim4);
 8001108:	4807      	ldr	r0, [pc, #28]	@ (8001128 <MX_TIM4_Init+0x98>)
 800110a:	f000 f955 	bl	80013b8 <HAL_TIM_MspPostInit>
}
 800110e:	b00f      	add	sp, #60	@ 0x3c
 8001110:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001114:	f7ff ff56 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 8001118:	f7ff ff54 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 800111c:	f7ff ff52 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 8001120:	f7ff ff50 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 8001124:	f7ff ff4e 	bl	8000fc4 <Error_Handler>
 8001128:	20000298 	.word	0x20000298
 800112c:	40000800 	.word	0x40000800

08001130 <SystemClock_Config>:
{
 8001130:	b500      	push	{lr}
 8001132:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001134:	2230      	movs	r2, #48	@ 0x30
 8001136:	2100      	movs	r1, #0
 8001138:	a808      	add	r0, sp, #32
 800113a:	f002 fd03 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113e:	2300      	movs	r3, #0
 8001140:	9303      	str	r3, [sp, #12]
 8001142:	9304      	str	r3, [sp, #16]
 8001144:	9305      	str	r3, [sp, #20]
 8001146:	9306      	str	r3, [sp, #24]
 8001148:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	4a1f      	ldr	r2, [pc, #124]	@ (80011cc <SystemClock_Config+0x9c>)
 800114e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001150:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001154:	6411      	str	r1, [r2, #64]	@ 0x40
 8001156:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001158:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <SystemClock_Config+0xa0>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001176:	2301      	movs	r3, #1
 8001178:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800117e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001184:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001188:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800118a:	220c      	movs	r2, #12
 800118c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800118e:	2260      	movs	r2, #96	@ 0x60
 8001190:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001192:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001198:	a808      	add	r0, sp, #32
 800119a:	f000 fbcd 	bl	8001938 <HAL_RCC_OscConfig>
 800119e:	b988      	cbnz	r0, 80011c4 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011b0:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011b4:	2103      	movs	r1, #3
 80011b6:	a803      	add	r0, sp, #12
 80011b8:	f000 fe0e 	bl	8001dd8 <HAL_RCC_ClockConfig>
 80011bc:	b920      	cbnz	r0, 80011c8 <SystemClock_Config+0x98>
}
 80011be:	b015      	add	sp, #84	@ 0x54
 80011c0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011c4:	f7ff fefe 	bl	8000fc4 <Error_Handler>
    Error_Handler();
 80011c8:	f7ff fefc 	bl	8000fc4 <Error_Handler>
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <main>:
{
 80011d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d8:	b082      	sub	sp, #8
  HAL_Init();
 80011da:	f000 fa11 	bl	8001600 <HAL_Init>
  SystemClock_Config();
 80011de:	f7ff ffa7 	bl	8001130 <SystemClock_Config>
  MX_GPIO_Init();
 80011e2:	f7ff fe7f 	bl	8000ee4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011e6:	f7ff feef 	bl	8000fc8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011ea:	f7ff ff07 	bl	8000ffc <MX_TIM2_Init>
  MX_TIM4_Init();
 80011ee:	f7ff ff4f 	bl	8001090 <MX_TIM4_Init>
    printf("Firing up PWM\n");
 80011f2:	4830      	ldr	r0, [pc, #192]	@ (80012b4 <main+0xe0>)
 80011f4:	f002 fbc6 	bl	8003984 <puts>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   // Output PWM Generation
 80011f8:	2100      	movs	r1, #0
 80011fa:	482f      	ldr	r0, [pc, #188]	@ (80012b8 <main+0xe4>)
 80011fc:	f001 fb3a 	bl	8002874 <HAL_TIM_PWM_Start>
    printf("Firing up PWM Input Capture\n");
 8001200:	482e      	ldr	r0, [pc, #184]	@ (80012bc <main+0xe8>)
 8001202:	f002 fbbf 	bl	8003984 <puts>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 8001206:	2100      	movs	r1, #0
 8001208:	482d      	ldr	r0, [pc, #180]	@ (80012c0 <main+0xec>)
 800120a:	f001 fbab 	bl	8002964 <HAL_TIM_IC_Start_IT>
    uint32_t now = 0, next_blink = 500, next_print = 1000, next_change = 0;
 800120e:	2600      	movs	r6, #0
 8001210:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
 8001214:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 8001218:	e026      	b.n	8001268 <main+0x94>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800121a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121e:	4829      	ldr	r0, [pc, #164]	@ (80012c4 <main+0xf0>)
 8001220:	f000 fb80 	bl	8001924 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 8001224:	f504 77fa 	add.w	r7, r4, #500	@ 0x1f4
 8001228:	e023      	b.n	8001272 <main+0x9e>
            float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <main+0xf4>)
 800122c:	f8d3 8000 	ldr.w	r8, [r3]
 8001230:	ee07 8a90 	vmov	s15, r8
 8001234:	eef8 7a67 	vcvt.f32.u32	s15, s15
            printf("Tick %5lu count = %8lu freq = %10.2f Hz\n", now / 1000, cnt_full, freq);
 8001238:	4d24      	ldr	r5, [pc, #144]	@ (80012cc <main+0xf8>)
 800123a:	fba5 3504 	umull	r3, r5, r5, r4
 800123e:	09ad      	lsrs	r5, r5, #6
 8001240:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80012d0 <main+0xfc>
 8001244:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f7ff f984 	bl	8000558 <__aeabi_f2d>
 8001250:	e9cd 0100 	strd	r0, r1, [sp]
 8001254:	4642      	mov	r2, r8
 8001256:	4629      	mov	r1, r5
 8001258:	481e      	ldr	r0, [pc, #120]	@ (80012d4 <main+0x100>)
 800125a:	f002 fb2b 	bl	80038b4 <iprintf>
            next_print = now + 1000;
 800125e:	f504 787a 	add.w	r8, r4, #1000	@ 0x3e8
 8001262:	e008      	b.n	8001276 <main+0xa2>
            next_change = now + 2000;
 8001264:	f504 66fa 	add.w	r6, r4, #2000	@ 0x7d0
        now = HAL_GetTick();
 8001268:	f000 f9f0 	bl	800164c <HAL_GetTick>
 800126c:	4604      	mov	r4, r0
        if (now >= next_blink) {
 800126e:	4287      	cmp	r7, r0
 8001270:	d9d3      	bls.n	800121a <main+0x46>
        if (now >= next_print) {
 8001272:	45a0      	cmp	r8, r4
 8001274:	d9d9      	bls.n	800122a <main+0x56>
        if (now >= next_change) {
 8001276:	42a6      	cmp	r6, r4
 8001278:	d8f6      	bhi.n	8001268 <main+0x94>
            printf("Setting prescaler = %lu compare = %lu\n", pwm_vals[pwm_vals_idx][0], pwm_vals[pwm_vals_idx][1]);
 800127a:	4e17      	ldr	r6, [pc, #92]	@ (80012d8 <main+0x104>)
 800127c:	6833      	ldr	r3, [r6, #0]
 800127e:	4d17      	ldr	r5, [pc, #92]	@ (80012dc <main+0x108>)
 8001280:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8001284:	6852      	ldr	r2, [r2, #4]
 8001286:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
 800128a:	4815      	ldr	r0, [pc, #84]	@ (80012e0 <main+0x10c>)
 800128c:	f002 fb12 	bl	80038b4 <iprintf>
            __HAL_TIM_SET_PRESCALER(&htim4, pwm_vals[pwm_vals_idx][0]);
 8001290:	6833      	ldr	r3, [r6, #0]
 8001292:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <main+0xe4>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
 800129a:	6291      	str	r1, [r2, #40]	@ 0x28
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_vals[pwm_vals_idx][1]);
 800129c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80012a0:	6869      	ldr	r1, [r5, #4]
 80012a2:	6351      	str	r1, [r2, #52]	@ 0x34
            ++pwm_vals_idx;
 80012a4:	3301      	adds	r3, #1
 80012a6:	6033      	str	r3, [r6, #0]
            if (pwm_vals_idx >= sizeof(pwm_vals) / sizeof(pwm_vals[0])) {
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d9db      	bls.n	8001264 <main+0x90>
                pwm_vals_idx = 0;
 80012ac:	2200      	movs	r2, #0
 80012ae:	6032      	str	r2, [r6, #0]
 80012b0:	e7d8      	b.n	8001264 <main+0x90>
 80012b2:	bf00      	nop
 80012b4:	08005888 	.word	0x08005888
 80012b8:	20000298 	.word	0x20000298
 80012bc:	08005898 	.word	0x08005898
 80012c0:	200002e0 	.word	0x200002e0
 80012c4:	40020800 	.word	0x40020800
 80012c8:	20000248 	.word	0x20000248
 80012cc:	10624dd3 	.word	0x10624dd3
 80012d0:	4cbebc20 	.word	0x4cbebc20
 80012d4:	080058b4 	.word	0x080058b4
 80012d8:	2000024c 	.word	0x2000024c
 80012dc:	20000000 	.word	0x20000000
 80012e0:	080058e0 	.word	0x080058e0

080012e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2100      	movs	r1, #0
 80012e8:	9100      	str	r1, [sp, #0]
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_MspInit+0x34>)
 80012ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80012f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012f6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	9101      	str	r1, [sp, #4]
 8001300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001302:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001306:	641a      	str	r2, [r3, #64]	@ 0x40
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	b002      	add	sp, #8
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800131c:	b510      	push	{r4, lr}
 800131e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	2300      	movs	r3, #0
 8001322:	9303      	str	r3, [sp, #12]
 8001324:	9304      	str	r3, [sp, #16]
 8001326:	9305      	str	r3, [sp, #20]
 8001328:	9306      	str	r3, [sp, #24]
 800132a:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM2)
 800132c:	6803      	ldr	r3, [r0, #0]
 800132e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001332:	d004      	beq.n	800133e <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001334:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <HAL_TIM_Base_MspInit+0x90>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800133a:	b008      	add	sp, #32
 800133c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	2400      	movs	r4, #0
 8001340:	9400      	str	r4, [sp, #0]
 8001342:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8001346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40
 800134e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001350:	f002 0201 	and.w	r2, r2, #1
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	9401      	str	r4, [sp, #4]
 800135a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800135c:	f042 0201 	orr.w	r2, r2, #1
 8001360:	631a      	str	r2, [r3, #48]	@ 0x30
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800136c:	2320      	movs	r3, #32
 800136e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001374:	2301      	movs	r3, #1
 8001376:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	a903      	add	r1, sp, #12
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <HAL_TIM_Base_MspInit+0x94>)
 800137c:	f000 f9e8 	bl	8001750 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001380:	4622      	mov	r2, r4
 8001382:	4621      	mov	r1, r4
 8001384:	201c      	movs	r0, #28
 8001386:	f000 f9bb 	bl	8001700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138a:	201c      	movs	r0, #28
 800138c:	f000 f9c8 	bl	8001720 <HAL_NVIC_EnableIRQ>
 8001390:	e7d3      	b.n	800133a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <HAL_TIM_Base_MspInit+0x98>)
 8001398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800139a:	f042 0204 	orr.w	r2, r2, #4
 800139e:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	9b02      	ldr	r3, [sp, #8]
}
 80013aa:	e7c6      	b.n	800133a <HAL_TIM_Base_MspInit+0x1e>
 80013ac:	40000800 	.word	0x40000800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b8:	b500      	push	{lr}
 80013ba:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	2300      	movs	r3, #0
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	9303      	str	r3, [sp, #12]
 80013c4:	9304      	str	r3, [sp, #16]
 80013c6:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 80013c8:	6802      	ldr	r2, [r0, #0]
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_TIM_MspPostInit+0x4c>)
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d002      	beq.n	80013d6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013d0:	b007      	add	sp, #28
 80013d2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_TIM_MspPostInit+0x50>)
 80013dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013de:	f042 0202 	orr.w	r2, r2, #2
 80013e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ee:	2340      	movs	r3, #64	@ 0x40
 80013f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	a901      	add	r1, sp, #4
 80013fa:	4804      	ldr	r0, [pc, #16]	@ (800140c <HAL_TIM_MspPostInit+0x54>)
 80013fc:	f000 f9a8 	bl	8001750 <HAL_GPIO_Init>
}
 8001400:	e7e6      	b.n	80013d0 <HAL_TIM_MspPostInit+0x18>
 8001402:	bf00      	nop
 8001404:	40000800 	.word	0x40000800
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b500      	push	{lr}
 8001412:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	2300      	movs	r3, #0
 8001416:	9303      	str	r3, [sp, #12]
 8001418:	9304      	str	r3, [sp, #16]
 800141a:	9305      	str	r3, [sp, #20]
 800141c:	9306      	str	r3, [sp, #24]
 800141e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001420:	6802      	ldr	r2, [r0, #0]
 8001422:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001426:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800142a:	429a      	cmp	r2, r3
 800142c:	d002      	beq.n	8001434 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800142e:	b009      	add	sp, #36	@ 0x24
 8001430:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001434:	2100      	movs	r1, #0
 8001436:	9101      	str	r1, [sp, #4]
 8001438:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800143c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800143e:	f042 0210 	orr.w	r2, r2, #16
 8001442:	645a      	str	r2, [r3, #68]	@ 0x44
 8001444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001446:	f002 0210 	and.w	r2, r2, #16
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	9102      	str	r1, [sp, #8]
 8001450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001462:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001466:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001470:	2307      	movs	r3, #7
 8001472:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	a903      	add	r1, sp, #12
 8001476:	4802      	ldr	r0, [pc, #8]	@ (8001480 <HAL_UART_MspInit+0x70>)
 8001478:	f000 f96a 	bl	8001750 <HAL_GPIO_Init>
}
 800147c:	e7d7      	b.n	800142e <HAL_UART_MspInit+0x1e>
 800147e:	bf00      	nop
 8001480:	40020000 	.word	0x40020000

08001484 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler>

08001486 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler>

08001488 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler>

0800148a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler>

0800148c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler>

0800148e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f8cd 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bd08      	pop	{r3, pc}

0800149c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800149c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800149e:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <TIM2_IRQHandler+0xc>)
 80014a0:	f000 fe8b 	bl	80021ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014a4:	bd08      	pop	{r3, pc}
 80014a6:	bf00      	nop
 80014a8:	200002e0 	.word	0x200002e0

080014ac <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80014ac:	2001      	movs	r0, #1
 80014ae:	4770      	bx	lr

080014b0 <_kill>:

int _kill(int pid, int sig)
{
 80014b0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b2:	f002 fb99 	bl	8003be8 <__errno>
 80014b6:	2316      	movs	r3, #22
 80014b8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014be:	bd08      	pop	{r3, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b508      	push	{r3, lr}
  _kill(status, -1);
 80014c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014c6:	f7ff fff3 	bl	80014b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ca:	e7fe      	b.n	80014ca <_exit+0xa>

080014cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	460c      	mov	r4, r1
 80014d0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	2500      	movs	r5, #0
 80014d4:	e006      	b.n	80014e4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80014d6:	f3af 8000 	nop.w
 80014da:	4621      	mov	r1, r4
 80014dc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80014e2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	42b5      	cmp	r5, r6
 80014e6:	dbf6      	blt.n	80014d6 <_read+0xa>
  }

  return len;
}
 80014e8:	4630      	mov	r0, r6
 80014ea:	bd70      	pop	{r4, r5, r6, pc}

080014ec <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014f0:	4770      	bx	lr

080014f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80014f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80014f8:	2000      	movs	r0, #0
 80014fa:	4770      	bx	lr

080014fc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80014fc:	2001      	movs	r0, #1
 80014fe:	4770      	bx	lr

08001500 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001500:	2000      	movs	r0, #0
 8001502:	4770      	bx	lr

08001504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001504:	b510      	push	{r4, lr}
 8001506:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <_sbrk+0x38>)
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	480d      	ldr	r0, [pc, #52]	@ (8001544 <_sbrk+0x40>)
 800150e:	6800      	ldr	r0, [r0, #0]
 8001510:	b140      	cbz	r0, 8001524 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	480c      	ldr	r0, [pc, #48]	@ (8001544 <_sbrk+0x40>)
 8001514:	6800      	ldr	r0, [r0, #0]
 8001516:	4403      	add	r3, r0
 8001518:	1a52      	subs	r2, r2, r1
 800151a:	4293      	cmp	r3, r2
 800151c:	d806      	bhi.n	800152c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800151e:	4a09      	ldr	r2, [pc, #36]	@ (8001544 <_sbrk+0x40>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001522:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001524:	4807      	ldr	r0, [pc, #28]	@ (8001544 <_sbrk+0x40>)
 8001526:	4c08      	ldr	r4, [pc, #32]	@ (8001548 <_sbrk+0x44>)
 8001528:	6004      	str	r4, [r0, #0]
 800152a:	e7f2      	b.n	8001512 <_sbrk+0xe>
    errno = ENOMEM;
 800152c:	f002 fb5c 	bl	8003be8 <__errno>
 8001530:	230c      	movs	r3, #12
 8001532:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001538:	e7f3      	b.n	8001522 <_sbrk+0x1e>
 800153a:	bf00      	nop
 800153c:	20020000 	.word	0x20020000
 8001540:	00000400 	.word	0x00000400
 8001544:	20000328 	.word	0x20000328
 8001548:	20000480 	.word	0x20000480

0800154c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800154c:	4a03      	ldr	r2, [pc, #12]	@ (800155c <SystemInit+0x10>)
 800154e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001556:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001564:	f7ff fff2 	bl	800154c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f002 fb31 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fe1f 	bl	80011d4 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80015a4:	08005ca4 	.word	0x08005ca4
  ldr r2, =_sbss
 80015a8:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80015ac:	2000047c 	.word	0x2000047c

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b510      	push	{r4, lr}
 80015b6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_InitTick+0x40>)
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <HAL_InitTick+0x44>)
 80015c6:	6810      	ldr	r0, [r2, #0]
 80015c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015cc:	f000 f8ac 	bl	8001728 <HAL_SYSTICK_Config>
 80015d0:	b968      	cbnz	r0, 80015ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	2c0f      	cmp	r4, #15
 80015d4:	d901      	bls.n	80015da <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
 80015d8:	e00a      	b.n	80015f0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015da:	2200      	movs	r2, #0
 80015dc:	4621      	mov	r1, r4
 80015de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015e2:	f000 f88d 	bl	8001700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_InitTick+0x48>)
 80015e8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2000      	movs	r0, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
}
 80015f0:	bd10      	pop	{r4, pc}
 80015f2:	bf00      	nop
 80015f4:	2000005c 	.word	0x2000005c
 80015f8:	20000058 	.word	0x20000058
 80015fc:	20000060 	.word	0x20000060

08001600 <HAL_Init>:
{
 8001600:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_Init+0x30>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800160a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800161a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f85d 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001622:	200f      	movs	r0, #15
 8001624:	f7ff ffc6 	bl	80015b4 <HAL_InitTick>
  HAL_MspInit();
 8001628:	f7ff fe5c 	bl	80012e4 <HAL_MspInit>
}
 800162c:	2000      	movs	r0, #0
 800162e:	bd08      	pop	{r3, pc}
 8001630:	40023c00 	.word	0x40023c00

08001634 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001634:	4a03      	ldr	r2, [pc, #12]	@ (8001644 <HAL_IncTick+0x10>)
 8001636:	6811      	ldr	r1, [r2, #0]
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_IncTick+0x14>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	440b      	add	r3, r1
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000032c 	.word	0x2000032c
 8001648:	2000005c 	.word	0x2000005c

0800164c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800164c:	4b01      	ldr	r3, [pc, #4]	@ (8001654 <HAL_GetTick+0x8>)
 800164e:	6818      	ldr	r0, [r3, #0]
}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000032c 	.word	0x2000032c

08001658 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001658:	2800      	cmp	r0, #0
 800165a:	db07      	blt.n	800166c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165c:	f000 021f 	and.w	r2, r0, #31
 8001660:	0940      	lsrs	r0, r0, #5
 8001662:	2301      	movs	r3, #1
 8001664:	4093      	lsls	r3, r2
 8001666:	4a02      	ldr	r2, [pc, #8]	@ (8001670 <__NVIC_EnableIRQ+0x18>)
 8001668:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001674:	2800      	cmp	r0, #0
 8001676:	db08      	blt.n	800168a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	0109      	lsls	r1, r1, #4
 800167a:	b2c9      	uxtb	r1, r1
 800167c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001680:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001684:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001688:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	f000 000f 	and.w	r0, r0, #15
 800168e:	0109      	lsls	r1, r1, #4
 8001690:	b2c9      	uxtb	r1, r1
 8001692:	4b01      	ldr	r3, [pc, #4]	@ (8001698 <__NVIC_SetPriority+0x24>)
 8001694:	5419      	strb	r1, [r3, r0]
  }
}
 8001696:	4770      	bx	lr
 8001698:	e000ed14 	.word	0xe000ed14

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a2:	f1c0 0c07 	rsb	ip, r0, #7
 80016a6:	f1bc 0f04 	cmp.w	ip, #4
 80016aa:	bf28      	it	cs
 80016ac:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b0:	1d03      	adds	r3, r0, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d90f      	bls.n	80016d6 <NVIC_EncodePriority+0x3a>
 80016b6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80016bc:	fa0e f00c 	lsl.w	r0, lr, ip
 80016c0:	ea21 0100 	bic.w	r1, r1, r0
 80016c4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c6:	fa0e fe03 	lsl.w	lr, lr, r3
 80016ca:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80016ce:	ea41 0002 	orr.w	r0, r1, r2
 80016d2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	2300      	movs	r3, #0
 80016d8:	e7ee      	b.n	80016b8 <NVIC_EncodePriority+0x1c>
	...

080016dc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	0200      	lsls	r0, r0, #8
 80016ea:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80016f8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001700:	b510      	push	{r4, lr}
 8001702:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_NVIC_SetPriority+0x1c>)
 8001706:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001708:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800170c:	f7ff ffc6 	bl	800169c <NVIC_EncodePriority>
 8001710:	4601      	mov	r1, r0
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff ffae 	bl	8001674 <__NVIC_SetPriority>
}
 8001718:	bd10      	pop	{r4, pc}
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001722:	f7ff ff99 	bl	8001658 <__NVIC_EnableIRQ>
}
 8001726:	bd08      	pop	{r3, pc}

08001728 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	3801      	subs	r0, #1
 800172a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800172e:	d20b      	bcs.n	8001748 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001730:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001734:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <HAL_SYSTICK_Config+0x24>)
 8001738:	21f0      	movs	r1, #240	@ 0xf0
 800173a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173e:	2000      	movs	r0, #0
 8001740:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	2207      	movs	r2, #7
 8001744:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001746:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001748:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001750:	2300      	movs	r3, #0
 8001752:	2b0f      	cmp	r3, #15
 8001754:	f200 80d7 	bhi.w	8001906 <HAL_GPIO_Init+0x1b6>
{
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	e065      	b.n	800182a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001760:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001764:	2403      	movs	r4, #3
 8001766:	fa04 f40e 	lsl.w	r4, r4, lr
 800176a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176e:	68cc      	ldr	r4, [r1, #12]
 8001770:	fa04 f40e 	lsl.w	r4, r4, lr
 8001774:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001776:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001778:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177e:	684a      	ldr	r2, [r1, #4]
 8001780:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001788:	6042      	str	r2, [r0, #4]
 800178a:	e05c      	b.n	8001846 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	08dc      	lsrs	r4, r3, #3
 800178e:	3408      	adds	r4, #8
 8001790:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001794:	f003 0507 	and.w	r5, r3, #7
 8001798:	00ad      	lsls	r5, r5, #2
 800179a:	f04f 0e0f 	mov.w	lr, #15
 800179e:	fa0e fe05 	lsl.w	lr, lr, r5
 80017a2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a6:	690a      	ldr	r2, [r1, #16]
 80017a8:	40aa      	lsls	r2, r5
 80017aa:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80017ae:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80017b2:	e05c      	b.n	800186e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b4:	2204      	movs	r2, #4
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x6a>
 80017b8:	2200      	movs	r2, #0
 80017ba:	fa02 f20e 	lsl.w	r2, r2, lr
 80017be:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c0:	3402      	adds	r4, #2
 80017c2:	4d51      	ldr	r5, [pc, #324]	@ (8001908 <HAL_GPIO_Init+0x1b8>)
 80017c4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c8:	4a50      	ldr	r2, [pc, #320]	@ (800190c <HAL_GPIO_Init+0x1bc>)
 80017ca:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	ea6f 020c 	mvn.w	r2, ip
 80017d0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d4:	684e      	ldr	r6, [r1, #4]
 80017d6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80017da:	d001      	beq.n	80017e0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80017dc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80017e0:	4c4a      	ldr	r4, [pc, #296]	@ (800190c <HAL_GPIO_Init+0x1bc>)
 80017e2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80017e4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ea:	684e      	ldr	r6, [r1, #4]
 80017ec:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80017f0:	d001      	beq.n	80017f6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80017f2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80017f6:	4c45      	ldr	r4, [pc, #276]	@ (800190c <HAL_GPIO_Init+0x1bc>)
 80017f8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80017fa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001800:	684e      	ldr	r6, [r1, #4]
 8001802:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001806:	d001      	beq.n	800180c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001808:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800180c:	4c3f      	ldr	r4, [pc, #252]	@ (800190c <HAL_GPIO_Init+0x1bc>)
 800180e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001810:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001812:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001814:	684d      	ldr	r5, [r1, #4]
 8001816:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800181a:	d001      	beq.n	8001820 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800181c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001820:	4c3a      	ldr	r4, [pc, #232]	@ (800190c <HAL_GPIO_Init+0x1bc>)
 8001822:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001824:	3301      	adds	r3, #1
 8001826:	2b0f      	cmp	r3, #15
 8001828:	d86b      	bhi.n	8001902 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 800182a:	2201      	movs	r2, #1
 800182c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	680c      	ldr	r4, [r1, #0]
 8001830:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001834:	ea32 0404 	bics.w	r4, r2, r4
 8001838:	d1f4      	bne.n	8001824 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	684c      	ldr	r4, [r1, #4]
 800183c:	f004 0403 	and.w	r4, r4, #3
 8001840:	3c01      	subs	r4, #1
 8001842:	2c01      	cmp	r4, #1
 8001844:	d98b      	bls.n	800175e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001846:	684a      	ldr	r2, [r1, #4]
 8001848:	f002 0203 	and.w	r2, r2, #3
 800184c:	2a03      	cmp	r2, #3
 800184e:	d009      	beq.n	8001864 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001850:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001852:	005d      	lsls	r5, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	40aa      	lsls	r2, r5
 8001858:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	688a      	ldr	r2, [r1, #8]
 800185e:	40aa      	lsls	r2, r5
 8001860:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001862:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001864:	684a      	ldr	r2, [r1, #4]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	2a02      	cmp	r2, #2
 800186c:	d08e      	beq.n	800178c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800186e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001870:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f20e 	lsl.w	r2, r2, lr
 800187a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187e:	684a      	ldr	r2, [r1, #4]
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	fa02 f20e 	lsl.w	r2, r2, lr
 8001888:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800188a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188c:	684a      	ldr	r2, [r1, #4]
 800188e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001892:	d0c7      	beq.n	8001824 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	2200      	movs	r2, #0
 8001896:	9201      	str	r2, [sp, #4]
 8001898:	4a1d      	ldr	r2, [pc, #116]	@ (8001910 <HAL_GPIO_Init+0x1c0>)
 800189a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800189c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80018a0:	6454      	str	r4, [r2, #68]	@ 0x44
 80018a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80018a4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80018a8:	9201      	str	r2, [sp, #4]
 80018aa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80018ac:	089c      	lsrs	r4, r3, #2
 80018ae:	1ca5      	adds	r5, r4, #2
 80018b0:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <HAL_GPIO_Init+0x1b8>)
 80018b2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b6:	f003 0e03 	and.w	lr, r3, #3
 80018ba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f20e 	lsl.w	r2, r2, lr
 80018c4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <HAL_GPIO_Init+0x1c4>)
 80018ca:	4290      	cmp	r0, r2
 80018cc:	f43f af74 	beq.w	80017b8 <HAL_GPIO_Init+0x68>
 80018d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018d4:	4290      	cmp	r0, r2
 80018d6:	d00e      	beq.n	80018f6 <HAL_GPIO_Init+0x1a6>
 80018d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018dc:	4290      	cmp	r0, r2
 80018de:	d00c      	beq.n	80018fa <HAL_GPIO_Init+0x1aa>
 80018e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018e4:	4290      	cmp	r0, r2
 80018e6:	d00a      	beq.n	80018fe <HAL_GPIO_Init+0x1ae>
 80018e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018ec:	4290      	cmp	r0, r2
 80018ee:	f43f af61 	beq.w	80017b4 <HAL_GPIO_Init+0x64>
 80018f2:	2207      	movs	r2, #7
 80018f4:	e761      	b.n	80017ba <HAL_GPIO_Init+0x6a>
 80018f6:	2201      	movs	r2, #1
 80018f8:	e75f      	b.n	80017ba <HAL_GPIO_Init+0x6a>
 80018fa:	2202      	movs	r2, #2
 80018fc:	e75d      	b.n	80017ba <HAL_GPIO_Init+0x6a>
 80018fe:	2203      	movs	r2, #3
 8001900:	e75b      	b.n	80017ba <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001902:	b002      	add	sp, #8
 8001904:	bd70      	pop	{r4, r5, r6, pc}
 8001906:	4770      	bx	lr
 8001908:	40013800 	.word	0x40013800
 800190c:	40013c00 	.word	0x40013c00
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	b10a      	cbz	r2, 800191e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	6181      	str	r1, [r0, #24]
 800191c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191e:	0409      	lsls	r1, r1, #16
 8001920:	6181      	str	r1, [r0, #24]
  }
}
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001924:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001926:	ea01 0203 	and.w	r2, r1, r3
 800192a:	ea21 0103 	bic.w	r1, r1, r3
 800192e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001932:	6181      	str	r1, [r0, #24]
}
 8001934:	4770      	bx	lr
	...

08001938 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001938:	2800      	cmp	r0, #0
 800193a:	f000 81e0 	beq.w	8001cfe <HAL_RCC_OscConfig+0x3c6>
{
 800193e:	b570      	push	{r4, r5, r6, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001944:	6803      	ldr	r3, [r0, #0]
 8001946:	f013 0f01 	tst.w	r3, #1
 800194a:	d03b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800194c:	4b9f      	ldr	r3, [pc, #636]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b04      	cmp	r3, #4
 8001956:	d02c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001958:	4b9c      	ldr	r3, [pc, #624]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001960:	2b08      	cmp	r3, #8
 8001962:	d021      	beq.n	80019a8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196a:	d04f      	beq.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 800196c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001970:	d052      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe0>
 8001972:	4b96      	ldr	r3, [pc, #600]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001982:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d050      	beq.n	8001a2c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fe5f 	bl	800164c <HAL_GetTick>
 800198e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001990:	4b8e      	ldr	r3, [pc, #568]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001998:	d114      	bne.n	80019c4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199a:	f7ff fe57 	bl	800164c <HAL_GetTick>
 800199e:	1b40      	subs	r0, r0, r5
 80019a0:	2864      	cmp	r0, #100	@ 0x64
 80019a2:	d9f5      	bls.n	8001990 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80019a4:	2003      	movs	r0, #3
 80019a6:	e1b1      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a8:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80019b0:	d0d8      	beq.n	8001964 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b86      	ldr	r3, [pc, #536]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80019ba:	d003      	beq.n	80019c4 <HAL_RCC_OscConfig+0x8c>
 80019bc:	6863      	ldr	r3, [r4, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 819f 	beq.w	8001d02 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	f013 0f02 	tst.w	r3, #2
 80019ca:	d054      	beq.n	8001a76 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019cc:	4b7f      	ldr	r3, [pc, #508]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f013 0f0c 	tst.w	r3, #12
 80019d4:	d03e      	beq.n	8001a54 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d033      	beq.n	8001a4a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e2:	68e3      	ldr	r3, [r4, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d068      	beq.n	8001aba <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b79      	ldr	r3, [pc, #484]	@ (8001bd0 <HAL_RCC_OscConfig+0x298>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff fe2d 	bl	800164c <HAL_GetTick>
 80019f2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b75      	ldr	r3, [pc, #468]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f013 0f02 	tst.w	r3, #2
 80019fc:	d154      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff fe25 	bl	800164c <HAL_GetTick>
 8001a02:	1b40      	subs	r0, r0, r5
 8001a04:	2802      	cmp	r0, #2
 8001a06:	d9f5      	bls.n	80019f4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001a08:	2003      	movs	r0, #3
 8001a0a:	e17f      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0c:	4a6f      	ldr	r2, [pc, #444]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e7b5      	b.n	8001984 <HAL_RCC_OscConfig+0x4c>
 8001a18:	4b6c      	ldr	r3, [pc, #432]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e7ab      	b.n	8001984 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fe0e 	bl	800164c <HAL_GetTick>
 8001a30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001a3a:	d0c3      	beq.n	80019c4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fe06 	bl	800164c <HAL_GetTick>
 8001a40:	1b40      	subs	r0, r0, r5
 8001a42:	2864      	cmp	r0, #100	@ 0x64
 8001a44:	d9f5      	bls.n	8001a32 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e160      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4a:	4b60      	ldr	r3, [pc, #384]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001a52:	d1c6      	bne.n	80019e2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a54:	4b5d      	ldr	r3, [pc, #372]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f013 0f02 	tst.w	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_OscConfig+0x12e>
 8001a5e:	68e3      	ldr	r3, [r4, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	f040 8150 	bne.w	8001d06 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4a59      	ldr	r2, [pc, #356]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001a6e:	6921      	ldr	r1, [r4, #16]
 8001a70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a74:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	f013 0f08 	tst.w	r3, #8
 8001a7c:	d042      	beq.n	8001b04 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7e:	6963      	ldr	r3, [r4, #20]
 8001a80:	b36b      	cbz	r3, 8001ade <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b53      	ldr	r3, [pc, #332]	@ (8001bd0 <HAL_RCC_OscConfig+0x298>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fddf 	bl	800164c <HAL_GetTick>
 8001a8e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a90:	4b4e      	ldr	r3, [pc, #312]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a94:	f013 0f02 	tst.w	r3, #2
 8001a98:	d134      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fdd7 	bl	800164c <HAL_GetTick>
 8001a9e:	1b40      	subs	r0, r0, r5
 8001aa0:	2802      	cmp	r0, #2
 8001aa2:	d9f5      	bls.n	8001a90 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	e131      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4a48      	ldr	r2, [pc, #288]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001ab0:	6921      	ldr	r1, [r4, #16]
 8001ab2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e7dd      	b.n	8001a76 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <HAL_RCC_OscConfig+0x298>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fdc4 	bl	800164c <HAL_GetTick>
 8001ac4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f013 0f02 	tst.w	r3, #2
 8001ace:	d0d2      	beq.n	8001a76 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fdbc 	bl	800164c <HAL_GetTick>
 8001ad4:	1b40      	subs	r0, r0, r5
 8001ad6:	2802      	cmp	r0, #2
 8001ad8:	d9f5      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001ada:	2003      	movs	r0, #3
 8001adc:	e116      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd0 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fdb1 	bl	800164c <HAL_GetTick>
 8001aea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af0:	f013 0f02 	tst.w	r3, #2
 8001af4:	d006      	beq.n	8001b04 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff fda9 	bl	800164c <HAL_GetTick>
 8001afa:	1b40      	subs	r0, r0, r5
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001b00:	2003      	movs	r0, #3
 8001b02:	e103      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	f013 0f04 	tst.w	r3, #4
 8001b0a:	d077      	beq.n	8001bfc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001b14:	d133      	bne.n	8001b7e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b1e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b2e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <HAL_RCC_OscConfig+0x29c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b38:	d023      	beq.n	8001b82 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3a:	68a3      	ldr	r3, [r4, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d034      	beq.n	8001baa <HAL_RCC_OscConfig+0x272>
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d038      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x27e>
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001b46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b50:	f022 0204 	bic.w	r2, r2, #4
 8001b54:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b56:	68a3      	ldr	r3, [r4, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03d      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fd76 	bl	800164c <HAL_GetTick>
 8001b60:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b66:	f013 0f02 	tst.w	r3, #2
 8001b6a:	d146      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fd6e 	bl	800164c <HAL_GetTick>
 8001b70:	1b80      	subs	r0, r0, r6
 8001b72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d9f3      	bls.n	8001b62 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	e0c6      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2500      	movs	r5, #0
 8001b80:	e7d6      	b.n	8001b30 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_RCC_OscConfig+0x29c>)
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fd5e 	bl	800164c <HAL_GetTick>
 8001b90:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_RCC_OscConfig+0x29c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b9a:	d1ce      	bne.n	8001b3a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff fd56 	bl	800164c <HAL_GetTick>
 8001ba0:	1b80      	subs	r0, r0, r6
 8001ba2:	2802      	cmp	r0, #2
 8001ba4:	d9f5      	bls.n	8001b92 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	e0b0      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001bac:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb4:	e7cf      	b.n	8001b56 <HAL_RCC_OscConfig+0x21e>
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_OscConfig+0x294>)
 8001bb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bba:	f042 0204 	orr.w	r2, r2, #4
 8001bbe:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bc0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bc8:	e7c5      	b.n	8001b56 <HAL_RCC_OscConfig+0x21e>
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	42470000 	.word	0x42470000
 8001bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fd38 	bl	800164c <HAL_GetTick>
 8001bdc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b52      	ldr	r3, [pc, #328]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be2:	f013 0f02 	tst.w	r3, #2
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff fd30 	bl	800164c <HAL_GetTick>
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001bf2:	4298      	cmp	r0, r3
 8001bf4:	d9f3      	bls.n	8001bde <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	e088      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfa:	b9ed      	cbnz	r5, 8001c38 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfc:	69a3      	ldr	r3, [r4, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8083 	beq.w	8001d0a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c04:	4a48      	ldr	r2, [pc, #288]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001c06:	6892      	ldr	r2, [r2, #8]
 8001c08:	f002 020c 	and.w	r2, r2, #12
 8001c0c:	2a08      	cmp	r2, #8
 8001c0e:	d051      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d017      	beq.n	8001c44 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b45      	ldr	r3, [pc, #276]	@ (8001d2c <HAL_RCC_OscConfig+0x3f4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fd17 	bl	800164c <HAL_GetTick>
 8001c1e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c20:	4b41      	ldr	r3, [pc, #260]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c28:	d042      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff fd0f 	bl	800164c <HAL_GetTick>
 8001c2e:	1b00      	subs	r0, r0, r4
 8001c30:	2802      	cmp	r0, #2
 8001c32:	d9f5      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c34:	2003      	movs	r0, #3
 8001c36:	e069      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4a3b      	ldr	r2, [pc, #236]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001c3a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001c3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	e7db      	b.n	8001bfc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_RCC_OscConfig+0x3f4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fcff 	bl	800164c <HAL_GetTick>
 8001c4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c50:	4b35      	ldr	r3, [pc, #212]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c58:	d006      	beq.n	8001c68 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fcf7 	bl	800164c <HAL_GetTick>
 8001c5e:	1b40      	subs	r0, r0, r5
 8001c60:	2802      	cmp	r0, #2
 8001c62:	d9f5      	bls.n	8001c50 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001c64:	2003      	movs	r0, #3
 8001c66:	e051      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c68:	69e3      	ldr	r3, [r4, #28]
 8001c6a:	6a22      	ldr	r2, [r4, #32]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001c70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c74:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001c76:	0852      	lsrs	r2, r2, #1
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001c80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c84:	4a28      	ldr	r2, [pc, #160]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001c86:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCC_OscConfig+0x3f4>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fcdd 	bl	800164c <HAL_GetTick>
 8001c92:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c9c:	d106      	bne.n	8001cac <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fcd5 	bl	800164c <HAL_GetTick>
 8001ca2:	1b00      	subs	r0, r0, r4
 8001ca4:	2802      	cmp	r0, #2
 8001ca6:	d9f5      	bls.n	8001c94 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001ca8:	2003      	movs	r0, #3
 8001caa:	e02f      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001cac:	2000      	movs	r0, #0
 8001cae:	e02d      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	e02b      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d02b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_RCC_OscConfig+0x3f0>)
 8001cba:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001cc0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc2:	4291      	cmp	r1, r2
 8001cc4:	d126      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cca:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	428a      	cmp	r2, r1
 8001cce:	d123      	bne.n	8001d18 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001cdc:	d11e      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cde:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001ce2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001cec:	d118      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cee:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001cf2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001cf8:	d114      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	e006      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
}
 8001d00:	4770      	bx	lr
        return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
 8001d04:	e002      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001d06:	2001      	movs	r0, #1
 8001d08:	e000      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001d0a:	2000      	movs	r0, #0
}
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
 8001d12:	e7fb      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
 8001d16:	e7f9      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
 8001d18:	2001      	movs	r0, #1
 8001d1a:	e7f7      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	e7f5      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
 8001d20:	2001      	movs	r0, #1
 8001d22:	e7f3      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
 8001d24:	2001      	movs	r0, #1
 8001d26:	e7f1      	b.n	8001d0c <HAL_RCC_OscConfig+0x3d4>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	42470000 	.word	0x42470000

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d32:	4b26      	ldr	r3, [pc, #152]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d041      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x92>
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d141      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d42:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001d50:	d012      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d5a:	481d      	ldr	r0, [pc, #116]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	fba1 0100 	umull	r0, r1, r1, r0
 8001d62:	f7fe ff29 	bl	8000bb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d66:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001d72:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d76:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d7a:	6858      	ldr	r0, [r3, #4]
 8001d7c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001d80:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001d84:	ebbc 0c00 	subs.w	ip, ip, r0
 8001d88:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001d8c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001d90:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001d94:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001d98:	ebb1 010c 	subs.w	r1, r1, ip
 8001d9c:	eb63 030e 	sbc.w	r3, r3, lr
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001da6:	00c9      	lsls	r1, r1, #3
 8001da8:	eb11 0c00 	adds.w	ip, r1, r0
 8001dac:	f143 0300 	adc.w	r3, r3, #0
 8001db0:	0299      	lsls	r1, r3, #10
 8001db2:	2300      	movs	r3, #0
 8001db4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001db8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001dbc:	f7fe fefc 	bl	8000bb8 <__aeabi_uldivmod>
 8001dc0:	e7d1      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001dc2:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc4:	e7d7      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc6:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001dc8:	e7d5      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x46>
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	017d7840 	.word	0x017d7840
 8001dd4:	00f42400 	.word	0x00f42400

08001dd8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	f000 809b 	beq.w	8001f14 <HAL_RCC_ClockConfig+0x13c>
{
 8001dde:	b570      	push	{r4, r5, r6, lr}
 8001de0:	460d      	mov	r5, r1
 8001de2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	428b      	cmp	r3, r1
 8001dee:	d208      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df0:	b2cb      	uxtb	r3, r1
 8001df2:	4a4c      	ldr	r2, [pc, #304]	@ (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001df4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	f040 808b 	bne.w	8001f18 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	f013 0f02 	tst.w	r3, #2
 8001e08:	d017      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0a:	f013 0f04 	tst.w	r3, #4
 8001e0e:	d004      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4a45      	ldr	r2, [pc, #276]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e12:	6893      	ldr	r3, [r2, #8]
 8001e14:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e18:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	f013 0f08 	tst.w	r3, #8
 8001e20:	d004      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e22:	4a41      	ldr	r2, [pc, #260]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e24:	6893      	ldr	r3, [r2, #8]
 8001e26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e2a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e2e:	6893      	ldr	r3, [r2, #8]
 8001e30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e34:	68a1      	ldr	r1, [r4, #8]
 8001e36:	430b      	orrs	r3, r1
 8001e38:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	f013 0f01 	tst.w	r3, #1
 8001e40:	d032      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d021      	beq.n	8001e8c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e48:	1e9a      	subs	r2, r3, #2
 8001e4a:	2a01      	cmp	r2, #1
 8001e4c:	d925      	bls.n	8001e9a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4a36      	ldr	r2, [pc, #216]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f012 0f02 	tst.w	r2, #2
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e58:	4933      	ldr	r1, [pc, #204]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e5a:	688a      	ldr	r2, [r1, #8]
 8001e5c:	f022 0203 	bic.w	r2, r2, #3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001e64:	f7ff fbf2 	bl	800164c <HAL_GetTick>
 8001e68:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	6862      	ldr	r2, [r4, #4]
 8001e74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e78:	d016      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7a:	f7ff fbe7 	bl	800164c <HAL_GetTick>
 8001e7e:	1b80      	subs	r0, r0, r6
 8001e80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e84:	4298      	cmp	r0, r3
 8001e86:	d9f0      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001e88:	2003      	movs	r0, #3
 8001e8a:	e042      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8c:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001e94:	d1e0      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e96:	2001      	movs	r0, #1
 8001e98:	e03b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001ea2:	d1d9      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	e034      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	42ab      	cmp	r3, r5
 8001eb2:	d907      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb4:	b2ea      	uxtb	r2, r5
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001eb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	42ab      	cmp	r3, r5
 8001ec2:	d12d      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	f013 0f04 	tst.w	r3, #4
 8001eca:	d006      	beq.n	8001eda <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	4a16      	ldr	r2, [pc, #88]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001ece:	6893      	ldr	r3, [r2, #8]
 8001ed0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001ed4:	68e1      	ldr	r1, [r4, #12]
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	f013 0f08 	tst.w	r3, #8
 8001ee0:	d007      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee2:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001ee4:	6893      	ldr	r3, [r2, #8]
 8001ee6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001eea:	6921      	ldr	r1, [r4, #16]
 8001eec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ef0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef2:	f7ff ff1d 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <HAL_RCC_ClockConfig+0x154>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <HAL_RCC_ClockConfig+0x158>)
 8001f06:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001f08:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_RCC_ClockConfig+0x15c>)
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	f7ff fb52 	bl	80015b4 <HAL_InitTick>
  return HAL_OK;
 8001f10:	2000      	movs	r0, #0
}
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
}
 8001f16:	4770      	bx	lr
      return HAL_ERROR;
 8001f18:	2001      	movs	r0, #1
 8001f1a:	e7fa      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	e7f8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001f20:	2001      	movs	r0, #1
 8001f22:	e7f6      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08005910 	.word	0x08005910
 8001f30:	20000058 	.word	0x20000058
 8001f34:	20000060 	.word	0x20000060

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f38:	4b01      	ldr	r3, [pc, #4]	@ (8001f40 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000058 	.word	0x20000058

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f46:	f7ff fff7 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f52:	4a03      	ldr	r2, [pc, #12]	@ (8001f60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f56:	40d8      	lsrs	r0, r3
 8001f58:	bd08      	pop	{r3, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08005908 	.word	0x08005908

08001f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f66:	f7ff ffe7 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f6a:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f72:	4a03      	ldr	r2, [pc, #12]	@ (8001f80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f76:	40d8      	lsrs	r0, r3
 8001f78:	bd08      	pop	{r3, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08005908 	.word	0x08005908

08001f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f84:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f86:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f88:	6a03      	ldr	r3, [r0, #32]
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f90:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f92:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f94:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f98:	680c      	ldr	r4, [r1, #0]
 8001f9a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f9c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fa0:	688b      	ldr	r3, [r1, #8]
 8001fa2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd4 <TIM_OC1_SetConfig+0x50>)
 8001fa6:	4290      	cmp	r0, r2
 8001fa8:	d006      	beq.n	8001fb8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001faa:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fac:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fae:	684a      	ldr	r2, [r1, #4]
 8001fb0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb2:	6203      	str	r3, [r0, #32]
}
 8001fb4:	bc30      	pop	{r4, r5}
 8001fb6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fb8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001fbc:	68ca      	ldr	r2, [r1, #12]
 8001fbe:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fc0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fc4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001fc8:	694a      	ldr	r2, [r1, #20]
 8001fca:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fcc:	698d      	ldr	r5, [r1, #24]
 8001fce:	4315      	orrs	r5, r2
 8001fd0:	e7eb      	b.n	8001faa <TIM_OC1_SetConfig+0x26>
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fd8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fda:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fdc:	6a02      	ldr	r2, [r0, #32]
 8001fde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fe2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fe6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fe8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fec:	680d      	ldr	r5, [r1, #0]
 8001fee:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ff4:	688a      	ldr	r2, [r1, #8]
 8001ff6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <TIM_OC3_SetConfig+0x58>)
 8001ffc:	4290      	cmp	r0, r2
 8001ffe:	d006      	beq.n	800200e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002000:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002002:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002004:	684a      	ldr	r2, [r1, #4]
 8002006:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002008:	6203      	str	r3, [r0, #32]
}
 800200a:	bc30      	pop	{r4, r5}
 800200c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800200e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002012:	68ca      	ldr	r2, [r1, #12]
 8002014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002018:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800201c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002020:	694a      	ldr	r2, [r1, #20]
 8002022:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002026:	698a      	ldr	r2, [r1, #24]
 8002028:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800202c:	e7e8      	b.n	8002000 <TIM_OC3_SetConfig+0x28>
 800202e:	bf00      	nop
 8002030:	40010000 	.word	0x40010000

08002034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002034:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002036:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002038:	6a02      	ldr	r2, [r0, #32]
 800203a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800203e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002040:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002042:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002044:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002048:	680d      	ldr	r5, [r1, #0]
 800204a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800204e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002052:	688d      	ldr	r5, [r1, #8]
 8002054:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002058:	4d07      	ldr	r5, [pc, #28]	@ (8002078 <TIM_OC4_SetConfig+0x44>)
 800205a:	42a8      	cmp	r0, r5
 800205c:	d006      	beq.n	800206c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800205e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002060:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002062:	684a      	ldr	r2, [r1, #4]
 8002064:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002066:	6203      	str	r3, [r0, #32]
}
 8002068:	bc30      	pop	{r4, r5}
 800206a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800206c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002070:	694d      	ldr	r5, [r1, #20]
 8002072:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002076:	e7f2      	b.n	800205e <TIM_OC4_SetConfig+0x2a>
 8002078:	40010000 	.word	0x40010000

0800207c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800207c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800207e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002080:	6a04      	ldr	r4, [r0, #32]
 8002082:	f024 0401 	bic.w	r4, r4, #1
 8002086:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002088:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800208a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800208e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002092:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002096:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002098:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800209a:	6203      	str	r3, [r0, #32]
}
 800209c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80020a2:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020a4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020a6:	6a04      	ldr	r4, [r0, #32]
 80020a8:	f024 0410 	bic.w	r4, r4, #16
 80020ac:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ae:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80020b0:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80020b4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020b8:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80020bc:	031b      	lsls	r3, r3, #12
 80020be:	b29b      	uxth	r3, r3
 80020c0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020c4:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80020c8:	0109      	lsls	r1, r1, #4
 80020ca:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 80020ce:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80020d2:	6201      	str	r1, [r0, #32]
}
 80020d4:	bc30      	pop	{r4, r5}
 80020d6:	4770      	bx	lr

080020d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020d8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020da:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020dc:	6a04      	ldr	r4, [r0, #32]
 80020de:	f024 0410 	bic.w	r4, r4, #16
 80020e2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020e6:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020ea:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80020f2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020f6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80020f8:	6203      	str	r3, [r0, #32]
}
 80020fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002100:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002102:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002104:	6a04      	ldr	r4, [r0, #32]
 8002106:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 800210a:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800210c:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800210e:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8002112:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002116:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	b2db      	uxtb	r3, r3
 800211e:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002122:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002126:	0209      	lsls	r1, r1, #8
 8002128:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 800212c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800212e:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8002130:	6201      	str	r1, [r0, #32]
}
 8002132:	bc30      	pop	{r4, r5}
 8002134:	4770      	bx	lr

08002136 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002136:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002138:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800213a:	6a04      	ldr	r4, [r0, #32]
 800213c:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8002140:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002142:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002144:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002148:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800214c:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002150:	031b      	lsls	r3, r3, #12
 8002152:	b29b      	uxth	r3, r3
 8002154:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002158:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800215c:	0309      	lsls	r1, r1, #12
 800215e:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 8002162:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002164:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8002166:	6201      	str	r1, [r0, #32]
}
 8002168:	bc30      	pop	{r4, r5}
 800216a:	4770      	bx	lr

0800216c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800216c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800216e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002172:	430b      	orrs	r3, r1
 8002174:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002178:	6083      	str	r3, [r0, #8]
}
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_PWM_MspInit>:
}
 800217c:	4770      	bx	lr

0800217e <HAL_TIM_IC_MspInit>:
}
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8002180:	290c      	cmp	r1, #12
 8002182:	d814      	bhi.n	80021ae <HAL_TIM_ReadCapturedValue+0x2e>
 8002184:	e8df f001 	tbb	[pc, r1]
 8002188:	13131307 	.word	0x13131307
 800218c:	1313130a 	.word	0x1313130a
 8002190:	1313130d 	.word	0x1313130d
 8002194:	10          	.byte	0x10
 8002195:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8002196:	6803      	ldr	r3, [r0, #0]
 8002198:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 800219a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 80021a0:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 80021a2:	6803      	ldr	r3, [r0, #0]
 80021a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 80021a6:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 80021a8:	6803      	ldr	r3, [r0, #0]
 80021aa:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 80021ac:	4770      	bx	lr
  switch (Channel)
 80021ae:	2000      	movs	r0, #0
}
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_PeriodElapsedCallback>:
}
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80021b4:	4770      	bx	lr

080021b6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIM_TriggerCallback>:
}
 80021b8:	4770      	bx	lr

080021ba <HAL_TIM_IRQHandler>:
{
 80021ba:	b570      	push	{r4, r5, r6, lr}
 80021bc:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80021be:	6803      	ldr	r3, [r0, #0]
 80021c0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021c2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021c4:	f015 0f02 	tst.w	r5, #2
 80021c8:	d010      	beq.n	80021ec <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021ca:	f016 0f02 	tst.w	r6, #2
 80021ce:	d00d      	beq.n	80021ec <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021d0:	f06f 0202 	mvn.w	r2, #2
 80021d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021da:	6803      	ldr	r3, [r0, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f013 0f03 	tst.w	r3, #3
 80021e2:	d05e      	beq.n	80022a2 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80021e4:	f7fe fede 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e8:	2300      	movs	r3, #0
 80021ea:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021ec:	f015 0f04 	tst.w	r5, #4
 80021f0:	d012      	beq.n	8002218 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021f2:	f016 0f04 	tst.w	r6, #4
 80021f6:	d00f      	beq.n	8002218 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f06f 0204 	mvn.w	r2, #4
 80021fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002200:	2302      	movs	r3, #2
 8002202:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800220c:	d04f      	beq.n	80022ae <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	4620      	mov	r0, r4
 8002210:	f7fe fec8 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002214:	2300      	movs	r3, #0
 8002216:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002218:	f015 0f08 	tst.w	r5, #8
 800221c:	d012      	beq.n	8002244 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800221e:	f016 0f08 	tst.w	r6, #8
 8002222:	d00f      	beq.n	8002244 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	f06f 0208 	mvn.w	r2, #8
 800222a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800222c:	2304      	movs	r3, #4
 800222e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f013 0f03 	tst.w	r3, #3
 8002238:	d040      	beq.n	80022bc <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	4620      	mov	r0, r4
 800223c:	f7fe feb2 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002240:	2300      	movs	r3, #0
 8002242:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002244:	f015 0f10 	tst.w	r5, #16
 8002248:	d012      	beq.n	8002270 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800224a:	f016 0f10 	tst.w	r6, #16
 800224e:	d00f      	beq.n	8002270 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	f06f 0210 	mvn.w	r2, #16
 8002256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002258:	2308      	movs	r3, #8
 800225a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002264:	d031      	beq.n	80022ca <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	4620      	mov	r0, r4
 8002268:	f7fe fe9c 	bl	8000fa4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	2300      	movs	r3, #0
 800226e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002270:	f015 0f01 	tst.w	r5, #1
 8002274:	d002      	beq.n	800227c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002276:	f016 0f01 	tst.w	r6, #1
 800227a:	d12d      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800227c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002280:	d002      	beq.n	8002288 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002282:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002286:	d12f      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002288:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800228c:	d002      	beq.n	8002294 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800228e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002292:	d131      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002294:	f015 0f20 	tst.w	r5, #32
 8002298:	d002      	beq.n	80022a0 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800229a:	f016 0f20 	tst.w	r6, #32
 800229e:	d133      	bne.n	8002308 <HAL_TIM_IRQHandler+0x14e>
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	f7ff ff87 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff ff85 	bl	80021b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80022ac:	e79c      	b.n	80021e8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff ff80 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff ff7e 	bl	80021b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80022ba:	e7ab      	b.n	8002214 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff ff79 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff ff77 	bl	80021b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80022c8:	e7ba      	b.n	8002240 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff ff72 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff ff70 	bl	80021b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80022d6:	e7c9      	b.n	800226c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	f06f 0201 	mvn.w	r2, #1
 80022de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff ff66 	bl	80021b2 <HAL_TIM_PeriodElapsedCallback>
 80022e6:	e7c9      	b.n	800227c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022f0:	4620      	mov	r0, r4
 80022f2:	f000 fc38 	bl	8002b66 <HAL_TIMEx_BreakCallback>
 80022f6:	e7c7      	b.n	8002288 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff ff59 	bl	80021b8 <HAL_TIM_TriggerCallback>
 8002306:	e7c5      	b.n	8002294 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	f06f 0220 	mvn.w	r2, #32
 800230e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002310:	4620      	mov	r0, r4
 8002312:	f000 fc27 	bl	8002b64 <HAL_TIMEx_CommutCallback>
}
 8002316:	e7c3      	b.n	80022a0 <HAL_TIM_IRQHandler+0xe6>

08002318 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002318:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800231a:	4a29      	ldr	r2, [pc, #164]	@ (80023c0 <TIM_Base_SetConfig+0xa8>)
 800231c:	4290      	cmp	r0, r2
 800231e:	d00e      	beq.n	800233e <TIM_Base_SetConfig+0x26>
 8002320:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0x26>
 8002326:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800232a:	4290      	cmp	r0, r2
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0x26>
 800232e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002332:	4290      	cmp	r0, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0x26>
 8002336:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800233a:	4290      	cmp	r0, r2
 800233c:	d103      	bne.n	8002346 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800233e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002342:	684a      	ldr	r2, [r1, #4]
 8002344:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002346:	4a1e      	ldr	r2, [pc, #120]	@ (80023c0 <TIM_Base_SetConfig+0xa8>)
 8002348:	4290      	cmp	r0, r2
 800234a:	d01a      	beq.n	8002382 <TIM_Base_SetConfig+0x6a>
 800234c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002350:	d017      	beq.n	8002382 <TIM_Base_SetConfig+0x6a>
 8002352:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002356:	4290      	cmp	r0, r2
 8002358:	d013      	beq.n	8002382 <TIM_Base_SetConfig+0x6a>
 800235a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800235e:	4290      	cmp	r0, r2
 8002360:	d00f      	beq.n	8002382 <TIM_Base_SetConfig+0x6a>
 8002362:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002366:	4290      	cmp	r0, r2
 8002368:	d00b      	beq.n	8002382 <TIM_Base_SetConfig+0x6a>
 800236a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800236e:	4290      	cmp	r0, r2
 8002370:	d007      	beq.n	8002382 <TIM_Base_SetConfig+0x6a>
 8002372:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002376:	4290      	cmp	r0, r2
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0x6a>
 800237a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800237e:	4290      	cmp	r0, r2
 8002380:	d103      	bne.n	800238a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002386:	68ca      	ldr	r2, [r1, #12]
 8002388:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800238a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800238e:	694a      	ldr	r2, [r1, #20]
 8002390:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002392:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002394:	688b      	ldr	r3, [r1, #8]
 8002396:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002398:	680b      	ldr	r3, [r1, #0]
 800239a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <TIM_Base_SetConfig+0xa8>)
 800239e:	4298      	cmp	r0, r3
 80023a0:	d00a      	beq.n	80023b8 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 80023a2:	2301      	movs	r3, #1
 80023a4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023a6:	6903      	ldr	r3, [r0, #16]
 80023a8:	f013 0f01 	tst.w	r3, #1
 80023ac:	d003      	beq.n	80023b6 <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023ae:	6903      	ldr	r3, [r0, #16]
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6103      	str	r3, [r0, #16]
}
 80023b6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80023b8:	690b      	ldr	r3, [r1, #16]
 80023ba:	6303      	str	r3, [r0, #48]	@ 0x30
 80023bc:	e7f1      	b.n	80023a2 <TIM_Base_SetConfig+0x8a>
 80023be:	bf00      	nop
 80023c0:	40010000 	.word	0x40010000

080023c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80023c4:	b340      	cbz	r0, 8002418 <HAL_TIM_Base_Init+0x54>
{
 80023c6:	b510      	push	{r4, lr}
 80023c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80023ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80023ce:	b1f3      	cbz	r3, 800240e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d6:	4621      	mov	r1, r4
 80023d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80023dc:	f7ff ff9c 	bl	8002318 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80023ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80023ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80023f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80023fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002402:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002406:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800240a:	2000      	movs	r0, #0
}
 800240c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800240e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002412:	f7fe ff83 	bl	800131c <HAL_TIM_Base_MspInit>
 8002416:	e7db      	b.n	80023d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
}
 800241a:	4770      	bx	lr

0800241c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800241c:	b340      	cbz	r0, 8002470 <HAL_TIM_PWM_Init+0x54>
{
 800241e:	b510      	push	{r4, lr}
 8002420:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002422:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002426:	b1f3      	cbz	r3, 8002466 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	2302      	movs	r3, #2
 800242a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800242e:	4621      	mov	r1, r4
 8002430:	f851 0b04 	ldr.w	r0, [r1], #4
 8002434:	f7ff ff70 	bl	8002318 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002438:	2301      	movs	r3, #1
 800243a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002442:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002446:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800244a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002456:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800245a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800245e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002462:	2000      	movs	r0, #0
}
 8002464:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002466:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800246a:	f7ff fe87 	bl	800217c <HAL_TIM_PWM_MspInit>
 800246e:	e7db      	b.n	8002428 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002470:	2001      	movs	r0, #1
}
 8002472:	4770      	bx	lr

08002474 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8002474:	b340      	cbz	r0, 80024c8 <HAL_TIM_IC_Init+0x54>
{
 8002476:	b510      	push	{r4, lr}
 8002478:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800247a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800247e:	b1f3      	cbz	r3, 80024be <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	2302      	movs	r3, #2
 8002482:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002486:	4621      	mov	r1, r4
 8002488:	f851 0b04 	ldr.w	r0, [r1], #4
 800248c:	f7ff ff44 	bl	8002318 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002490:	2301      	movs	r3, #1
 8002492:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800249a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800249e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80024a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80024b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80024ba:	2000      	movs	r0, #0
}
 80024bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80024c2:	f7ff fe5c 	bl	800217e <HAL_TIM_IC_MspInit>
 80024c6:	e7db      	b.n	8002480 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
}
 80024ca:	4770      	bx	lr

080024cc <TIM_OC2_SetConfig>:
{
 80024cc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80024ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d0:	6a02      	ldr	r2, [r0, #32]
 80024d2:	f022 0210 	bic.w	r2, r2, #16
 80024d6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80024d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80024da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024dc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024e0:	680d      	ldr	r5, [r1, #0]
 80024e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80024e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024ea:	688d      	ldr	r5, [r1, #8]
 80024ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024f0:	4d0c      	ldr	r5, [pc, #48]	@ (8002524 <TIM_OC2_SetConfig+0x58>)
 80024f2:	42a8      	cmp	r0, r5
 80024f4:	d006      	beq.n	8002504 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80024f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80024f8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80024fa:	684a      	ldr	r2, [r1, #4]
 80024fc:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80024fe:	6203      	str	r3, [r0, #32]
}
 8002500:	bc30      	pop	{r4, r5}
 8002502:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002508:	68cd      	ldr	r5, [r1, #12]
 800250a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800250e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002512:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002516:	694d      	ldr	r5, [r1, #20]
 8002518:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800251c:	698d      	ldr	r5, [r1, #24]
 800251e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002522:	e7e8      	b.n	80024f6 <TIM_OC2_SetConfig+0x2a>
 8002524:	40010000 	.word	0x40010000

08002528 <HAL_TIM_PWM_ConfigChannel>:
{
 8002528:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800252a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d066      	beq.n	8002600 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002532:	4604      	mov	r4, r0
 8002534:	460d      	mov	r5, r1
 8002536:	2301      	movs	r3, #1
 8002538:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800253c:	2a0c      	cmp	r2, #12
 800253e:	d85a      	bhi.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8002540:	e8df f002 	tbb	[pc, r2]
 8002544:	59595907 	.word	0x59595907
 8002548:	5959591b 	.word	0x5959591b
 800254c:	59595930 	.word	0x59595930
 8002550:	44          	.byte	0x44
 8002551:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002552:	6800      	ldr	r0, [r0, #0]
 8002554:	f7ff fd16 	bl	8001f84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	6993      	ldr	r3, [r2, #24]
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002562:	6822      	ldr	r2, [r4, #0]
 8002564:	6993      	ldr	r3, [r2, #24]
 8002566:	f023 0304 	bic.w	r3, r3, #4
 800256a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	6993      	ldr	r3, [r2, #24]
 8002570:	6929      	ldr	r1, [r5, #16]
 8002572:	430b      	orrs	r3, r1
 8002574:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2000      	movs	r0, #0
      break;
 8002578:	e03e      	b.n	80025f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800257a:	6800      	ldr	r0, [r0, #0]
 800257c:	f7ff ffa6 	bl	80024cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002580:	6822      	ldr	r2, [r4, #0]
 8002582:	6993      	ldr	r3, [r2, #24]
 8002584:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002588:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	6993      	ldr	r3, [r2, #24]
 800258e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002592:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002594:	6822      	ldr	r2, [r4, #0]
 8002596:	6993      	ldr	r3, [r2, #24]
 8002598:	6929      	ldr	r1, [r5, #16]
 800259a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800259e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2000      	movs	r0, #0
      break;
 80025a2:	e029      	b.n	80025f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025a4:	6800      	ldr	r0, [r0, #0]
 80025a6:	f7ff fd17 	bl	8001fd8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	69d3      	ldr	r3, [r2, #28]
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025b4:	6822      	ldr	r2, [r4, #0]
 80025b6:	69d3      	ldr	r3, [r2, #28]
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	69d3      	ldr	r3, [r2, #28]
 80025c2:	6929      	ldr	r1, [r5, #16]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2000      	movs	r0, #0
      break;
 80025ca:	e015      	b.n	80025f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025cc:	6800      	ldr	r0, [r0, #0]
 80025ce:	f7ff fd31 	bl	8002034 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025d2:	6822      	ldr	r2, [r4, #0]
 80025d4:	69d3      	ldr	r3, [r2, #28]
 80025d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025da:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025dc:	6822      	ldr	r2, [r4, #0]
 80025de:	69d3      	ldr	r3, [r2, #28]
 80025e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025e4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	69d3      	ldr	r3, [r2, #28]
 80025ea:	6929      	ldr	r1, [r5, #16]
 80025ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025f0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2000      	movs	r0, #0
      break;
 80025f4:	e000      	b.n	80025f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80025f6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80025f8:	2300      	movs	r3, #0
 80025fa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002600:	2002      	movs	r0, #2
 8002602:	e7fc      	b.n	80025fe <HAL_TIM_PWM_ConfigChannel+0xd6>

08002604 <TIM_TI1_SetConfig>:
{
 8002604:	b470      	push	{r4, r5, r6}
 8002606:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 8002608:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260a:	6a04      	ldr	r4, [r0, #32]
 800260c:	f024 0401 	bic.w	r4, r4, #1
 8002610:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002612:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002614:	4d14      	ldr	r5, [pc, #80]	@ (8002668 <TIM_TI1_SetConfig+0x64>)
 8002616:	42a8      	cmp	r0, r5
 8002618:	d014      	beq.n	8002644 <TIM_TI1_SetConfig+0x40>
 800261a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800261e:	d011      	beq.n	8002644 <TIM_TI1_SetConfig+0x40>
 8002620:	4a12      	ldr	r2, [pc, #72]	@ (800266c <TIM_TI1_SetConfig+0x68>)
 8002622:	4290      	cmp	r0, r2
 8002624:	d00e      	beq.n	8002644 <TIM_TI1_SetConfig+0x40>
 8002626:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800262a:	4290      	cmp	r0, r2
 800262c:	d00a      	beq.n	8002644 <TIM_TI1_SetConfig+0x40>
 800262e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002632:	4290      	cmp	r0, r2
 8002634:	d006      	beq.n	8002644 <TIM_TI1_SetConfig+0x40>
 8002636:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800263a:	4290      	cmp	r0, r2
 800263c:	d002      	beq.n	8002644 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800263e:	f044 0201 	orr.w	r2, r4, #1
 8002642:	e003      	b.n	800264c <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002644:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002648:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800264c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002656:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800265a:	f001 010a 	and.w	r1, r1, #10
 800265e:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8002660:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002662:	6201      	str	r1, [r0, #32]
}
 8002664:	bc70      	pop	{r4, r5, r6}
 8002666:	4770      	bx	lr
 8002668:	40010000 	.word	0x40010000
 800266c:	40000400 	.word	0x40000400

08002670 <HAL_TIM_IC_ConfigChannel>:
{
 8002670:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002672:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d05e      	beq.n	8002738 <HAL_TIM_IC_ConfigChannel+0xc8>
 800267a:	4604      	mov	r4, r0
 800267c:	460d      	mov	r5, r1
 800267e:	2301      	movs	r3, #1
 8002680:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002684:	2a0c      	cmp	r2, #12
 8002686:	d852      	bhi.n	800272e <HAL_TIM_IC_ConfigChannel+0xbe>
 8002688:	e8df f002 	tbb	[pc, r2]
 800268c:	51515107 	.word	0x51515107
 8002690:	51515119 	.word	0x51515119
 8002694:	5151512c 	.word	0x5151512c
 8002698:	3e          	.byte	0x3e
 8002699:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 800269a:	68cb      	ldr	r3, [r1, #12]
 800269c:	684a      	ldr	r2, [r1, #4]
 800269e:	6809      	ldr	r1, [r1, #0]
 80026a0:	6800      	ldr	r0, [r0, #0]
 80026a2:	f7ff ffaf 	bl	8002604 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026a6:	6822      	ldr	r2, [r4, #0]
 80026a8:	6993      	ldr	r3, [r2, #24]
 80026aa:	f023 030c 	bic.w	r3, r3, #12
 80026ae:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026b0:	6822      	ldr	r2, [r4, #0]
 80026b2:	6993      	ldr	r3, [r2, #24]
 80026b4:	68a9      	ldr	r1, [r5, #8]
 80026b6:	430b      	orrs	r3, r1
 80026b8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2000      	movs	r0, #0
 80026bc:	e038      	b.n	8002730 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 80026be:	68cb      	ldr	r3, [r1, #12]
 80026c0:	684a      	ldr	r2, [r1, #4]
 80026c2:	6809      	ldr	r1, [r1, #0]
 80026c4:	6800      	ldr	r0, [r0, #0]
 80026c6:	f7ff fcec 	bl	80020a2 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026ca:	6822      	ldr	r2, [r4, #0]
 80026cc:	6993      	ldr	r3, [r2, #24]
 80026ce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80026d2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	6993      	ldr	r3, [r2, #24]
 80026d8:	68a9      	ldr	r1, [r5, #8]
 80026da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026de:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80026e0:	2000      	movs	r0, #0
 80026e2:	e025      	b.n	8002730 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 80026e4:	68cb      	ldr	r3, [r1, #12]
 80026e6:	684a      	ldr	r2, [r1, #4]
 80026e8:	6809      	ldr	r1, [r1, #0]
 80026ea:	6800      	ldr	r0, [r0, #0]
 80026ec:	f7ff fd08 	bl	8002100 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	69d3      	ldr	r3, [r2, #28]
 80026f4:	f023 030c 	bic.w	r3, r3, #12
 80026f8:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026fa:	6822      	ldr	r2, [r4, #0]
 80026fc:	69d3      	ldr	r3, [r2, #28]
 80026fe:	68a9      	ldr	r1, [r5, #8]
 8002700:	430b      	orrs	r3, r1
 8002702:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2000      	movs	r0, #0
 8002706:	e013      	b.n	8002730 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 8002708:	68cb      	ldr	r3, [r1, #12]
 800270a:	684a      	ldr	r2, [r1, #4]
 800270c:	6809      	ldr	r1, [r1, #0]
 800270e:	6800      	ldr	r0, [r0, #0]
 8002710:	f7ff fd11 	bl	8002136 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002714:	6822      	ldr	r2, [r4, #0]
 8002716:	69d3      	ldr	r3, [r2, #28]
 8002718:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800271c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	69d3      	ldr	r3, [r2, #28]
 8002722:	68a9      	ldr	r1, [r5, #8]
 8002724:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002728:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2000      	movs	r0, #0
 800272c:	e000      	b.n	8002730 <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 800272e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002730:	2300      	movs	r3, #0
 8002732:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002736:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002738:	2002      	movs	r0, #2
 800273a:	e7fc      	b.n	8002736 <HAL_TIM_IC_ConfigChannel+0xc6>

0800273c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800273c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800273e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002740:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002744:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002748:	430a      	orrs	r2, r1
 800274a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800274e:	6082      	str	r2, [r0, #8]
}
 8002750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002756:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d078      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0xfa>
{
 800275e:	b510      	push	{r4, lr}
 8002760:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002762:	2301      	movs	r3, #1
 8002764:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	2302      	movs	r3, #2
 800276a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800276e:	6802      	ldr	r2, [r0, #0]
 8002770:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800277a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800277c:	680b      	ldr	r3, [r1, #0]
 800277e:	2b60      	cmp	r3, #96	@ 0x60
 8002780:	d04c      	beq.n	800281c <HAL_TIM_ConfigClockSource+0xc6>
 8002782:	d823      	bhi.n	80027cc <HAL_TIM_ConfigClockSource+0x76>
 8002784:	2b40      	cmp	r3, #64	@ 0x40
 8002786:	d054      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0xdc>
 8002788:	d811      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x58>
 800278a:	2b20      	cmp	r3, #32
 800278c:	d003      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x40>
 800278e:	d80a      	bhi.n	80027a6 <HAL_TIM_ConfigClockSource+0x50>
 8002790:	b10b      	cbz	r3, 8002796 <HAL_TIM_ConfigClockSource+0x40>
 8002792:	2b10      	cmp	r3, #16
 8002794:	d105      	bne.n	80027a2 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002796:	4619      	mov	r1, r3
 8002798:	6820      	ldr	r0, [r4, #0]
 800279a:	f7ff fce7 	bl	800216c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2000      	movs	r0, #0
      break;
 80027a0:	e028      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80027a2:	2001      	movs	r0, #1
 80027a4:	e026      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80027a6:	2b30      	cmp	r3, #48	@ 0x30
 80027a8:	d0f5      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
 80027ac:	e022      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80027ae:	2b50      	cmp	r3, #80	@ 0x50
 80027b0:	d10a      	bne.n	80027c8 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	68ca      	ldr	r2, [r1, #12]
 80027b4:	6849      	ldr	r1, [r1, #4]
 80027b6:	6800      	ldr	r0, [r0, #0]
 80027b8:	f7ff fc60 	bl	800207c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027bc:	2150      	movs	r1, #80	@ 0x50
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	f7ff fcd4 	bl	800216c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2000      	movs	r0, #0
      break;
 80027c6:	e015      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e013      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d0:	d03a      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0xf2>
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027d6:	d014      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0xac>
 80027d8:	2b70      	cmp	r3, #112	@ 0x70
 80027da:	d137      	bne.n	800284c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80027dc:	68cb      	ldr	r3, [r1, #12]
 80027de:	684a      	ldr	r2, [r1, #4]
 80027e0:	6889      	ldr	r1, [r1, #8]
 80027e2:	6800      	ldr	r0, [r0, #0]
 80027e4:	f7ff ffaa 	bl	800273c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80027f0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80027fa:	2300      	movs	r3, #0
 80027fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002800:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002802:	68cb      	ldr	r3, [r1, #12]
 8002804:	684a      	ldr	r2, [r1, #4]
 8002806:	6889      	ldr	r1, [r1, #8]
 8002808:	6800      	ldr	r0, [r0, #0]
 800280a:	f7ff ff97 	bl	800273c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	6893      	ldr	r3, [r2, #8]
 8002812:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002816:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2000      	movs	r0, #0
      break;
 800281a:	e7eb      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800281c:	68ca      	ldr	r2, [r1, #12]
 800281e:	6849      	ldr	r1, [r1, #4]
 8002820:	6800      	ldr	r0, [r0, #0]
 8002822:	f7ff fc59 	bl	80020d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002826:	2160      	movs	r1, #96	@ 0x60
 8002828:	6820      	ldr	r0, [r4, #0]
 800282a:	f7ff fc9f 	bl	800216c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2000      	movs	r0, #0
      break;
 8002830:	e7e0      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002832:	68ca      	ldr	r2, [r1, #12]
 8002834:	6849      	ldr	r1, [r1, #4]
 8002836:	6800      	ldr	r0, [r0, #0]
 8002838:	f7ff fc20 	bl	800207c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800283c:	2140      	movs	r1, #64	@ 0x40
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	f7ff fc94 	bl	800216c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2000      	movs	r0, #0
      break;
 8002846:	e7d5      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002848:	2000      	movs	r0, #0
 800284a:	e7d3      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 800284c:	2001      	movs	r0, #1
 800284e:	e7d1      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8002850:	2002      	movs	r0, #2
}
 8002852:	4770      	bx	lr

08002854 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002854:	f001 011f 	and.w	r1, r1, #31
 8002858:	f04f 0c01 	mov.w	ip, #1
 800285c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002860:	6a03      	ldr	r3, [r0, #32]
 8002862:	ea23 030c 	bic.w	r3, r3, ip
 8002866:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002868:	6a03      	ldr	r3, [r0, #32]
 800286a:	408a      	lsls	r2, r1
 800286c:	4313      	orrs	r3, r2
 800286e:	6203      	str	r3, [r0, #32]
}
 8002870:	4770      	bx	lr
	...

08002874 <HAL_TIM_PWM_Start>:
{
 8002874:	b510      	push	{r4, lr}
 8002876:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002878:	4608      	mov	r0, r1
 800287a:	2900      	cmp	r1, #0
 800287c:	d132      	bne.n	80028e4 <HAL_TIM_PWM_Start+0x70>
 800287e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	bf18      	it	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d163      	bne.n	8002956 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800288e:	2800      	cmp	r0, #0
 8002890:	d141      	bne.n	8002916 <HAL_TIM_PWM_Start+0xa2>
 8002892:	2302      	movs	r3, #2
 8002894:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002898:	2201      	movs	r2, #1
 800289a:	4601      	mov	r1, r0
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	f7ff ffd9 	bl	8002854 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002960 <HAL_TIM_PWM_Start+0xec>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d045      	beq.n	8002936 <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002960 <HAL_TIM_PWM_Start+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d046      	beq.n	8002940 <HAL_TIM_PWM_Start+0xcc>
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b6:	d043      	beq.n	8002940 <HAL_TIM_PWM_Start+0xcc>
 80028b8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80028bc:	4293      	cmp	r3, r2
 80028be:	d03f      	beq.n	8002940 <HAL_TIM_PWM_Start+0xcc>
 80028c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d03b      	beq.n	8002940 <HAL_TIM_PWM_Start+0xcc>
 80028c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d037      	beq.n	8002940 <HAL_TIM_PWM_Start+0xcc>
 80028d0:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d033      	beq.n	8002940 <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80028e0:	2000      	movs	r0, #0
 80028e2:	e037      	b.n	8002954 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028e4:	2904      	cmp	r1, #4
 80028e6:	d008      	beq.n	80028fa <HAL_TIM_PWM_Start+0x86>
 80028e8:	2908      	cmp	r1, #8
 80028ea:	d00d      	beq.n	8002908 <HAL_TIM_PWM_Start+0x94>
 80028ec:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	bf18      	it	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	e7c7      	b.n	800288a <HAL_TIM_PWM_Start+0x16>
 80028fa:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	bf18      	it	ne
 8002904:	2301      	movne	r3, #1
 8002906:	e7c0      	b.n	800288a <HAL_TIM_PWM_Start+0x16>
 8002908:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	bf18      	it	ne
 8002912:	2301      	movne	r3, #1
 8002914:	e7b9      	b.n	800288a <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002916:	2804      	cmp	r0, #4
 8002918:	d005      	beq.n	8002926 <HAL_TIM_PWM_Start+0xb2>
 800291a:	2808      	cmp	r0, #8
 800291c:	d007      	beq.n	800292e <HAL_TIM_PWM_Start+0xba>
 800291e:	2302      	movs	r3, #2
 8002920:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002924:	e7b8      	b.n	8002898 <HAL_TIM_PWM_Start+0x24>
 8002926:	2302      	movs	r3, #2
 8002928:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800292c:	e7b4      	b.n	8002898 <HAL_TIM_PWM_Start+0x24>
 800292e:	2302      	movs	r3, #2
 8002930:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002934:	e7b0      	b.n	8002898 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8002936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002938:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800293c:	645a      	str	r2, [r3, #68]	@ 0x44
 800293e:	e7b4      	b.n	80028aa <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	2a06      	cmp	r2, #6
 8002948:	d007      	beq.n	800295a <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002952:	2000      	movs	r0, #0
}
 8002954:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
 8002958:	e7fc      	b.n	8002954 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 800295a:	2000      	movs	r0, #0
 800295c:	e7fa      	b.n	8002954 <HAL_TIM_PWM_Start+0xe0>
 800295e:	bf00      	nop
 8002960:	40010000 	.word	0x40010000

08002964 <HAL_TIM_IC_Start_IT>:
{
 8002964:	b510      	push	{r4, lr}
 8002966:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002968:	460b      	mov	r3, r1
 800296a:	2900      	cmp	r1, #0
 800296c:	d13b      	bne.n	80029e6 <HAL_TIM_IC_Start_IT+0x82>
 800296e:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8002972:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002974:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8002978:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800297a:	2801      	cmp	r0, #1
 800297c:	f040 80ab 	bne.w	8002ad6 <HAL_TIM_IC_Start_IT+0x172>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002980:	2a01      	cmp	r2, #1
 8002982:	f040 80a9 	bne.w	8002ad8 <HAL_TIM_IC_Start_IT+0x174>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002986:	2b00      	cmp	r3, #0
 8002988:	d14c      	bne.n	8002a24 <HAL_TIM_IC_Start_IT+0xc0>
 800298a:	2202      	movs	r2, #2
 800298c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002990:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002994:	6821      	ldr	r1, [r4, #0]
 8002996:	68ca      	ldr	r2, [r1, #12]
 8002998:	f042 0202 	orr.w	r2, r2, #2
 800299c:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800299e:	2201      	movs	r2, #1
 80029a0:	4619      	mov	r1, r3
 80029a2:	6820      	ldr	r0, [r4, #0]
 80029a4:	f7ff ff56 	bl	8002854 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	4a4e      	ldr	r2, [pc, #312]	@ (8002ae4 <HAL_TIM_IC_Start_IT+0x180>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	f000 8087 	beq.w	8002ac0 <HAL_TIM_IC_Start_IT+0x15c>
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b6:	f000 8083 	beq.w	8002ac0 <HAL_TIM_IC_Start_IT+0x15c>
 80029ba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80029be:	4293      	cmp	r3, r2
 80029c0:	d07e      	beq.n	8002ac0 <HAL_TIM_IC_Start_IT+0x15c>
 80029c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d07a      	beq.n	8002ac0 <HAL_TIM_IC_Start_IT+0x15c>
 80029ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d076      	beq.n	8002ac0 <HAL_TIM_IC_Start_IT+0x15c>
 80029d2:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d072      	beq.n	8002ac0 <HAL_TIM_IC_Start_IT+0x15c>
      __HAL_TIM_ENABLE(htim);
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	2000      	movs	r0, #0
 80029e4:	e078      	b.n	8002ad8 <HAL_TIM_IC_Start_IT+0x174>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029e6:	2904      	cmp	r1, #4
 80029e8:	d00c      	beq.n	8002a04 <HAL_TIM_IC_Start_IT+0xa0>
 80029ea:	2908      	cmp	r1, #8
 80029ec:	d00e      	beq.n	8002a0c <HAL_TIM_IC_Start_IT+0xa8>
 80029ee:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 80029f2:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00d      	beq.n	8002a14 <HAL_TIM_IC_Start_IT+0xb0>
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d00f      	beq.n	8002a1c <HAL_TIM_IC_Start_IT+0xb8>
 80029fc:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	e7ba      	b.n	800297a <HAL_TIM_IC_Start_IT+0x16>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a04:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8002a08:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a0a:	e7f3      	b.n	80029f4 <HAL_TIM_IC_Start_IT+0x90>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a0c:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002a10:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a12:	e7ef      	b.n	80029f4 <HAL_TIM_IC_Start_IT+0x90>
 8002a14:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	e7ae      	b.n	800297a <HAL_TIM_IC_Start_IT+0x16>
 8002a1c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	e7aa      	b.n	800297a <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d02b      	beq.n	8002a80 <HAL_TIM_IC_Start_IT+0x11c>
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d02d      	beq.n	8002a88 <HAL_TIM_IC_Start_IT+0x124>
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d02c      	beq.n	8002a90 <HAL_TIM_IC_Start_IT+0x12c>
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d033      	beq.n	8002aa2 <HAL_TIM_IC_Start_IT+0x13e>
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  switch (Channel)
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d84a      	bhi.n	8002ada <HAL_TIM_IC_Start_IT+0x176>
 8002a44:	a101      	add	r1, pc, #4	@ (adr r1, 8002a4c <HAL_TIM_IC_Start_IT+0xe8>)
 8002a46:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002995 	.word	0x08002995
 8002a50:	08002adb 	.word	0x08002adb
 8002a54:	08002adb 	.word	0x08002adb
 8002a58:	08002adb 	.word	0x08002adb
 8002a5c:	08002a97 	.word	0x08002a97
 8002a60:	08002adb 	.word	0x08002adb
 8002a64:	08002adb 	.word	0x08002adb
 8002a68:	08002adb 	.word	0x08002adb
 8002a6c:	08002aa9 	.word	0x08002aa9
 8002a70:	08002adb 	.word	0x08002adb
 8002a74:	08002adb 	.word	0x08002adb
 8002a78:	08002adb 	.word	0x08002adb
 8002a7c:	08002ab5 	.word	0x08002ab5
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a80:	2102      	movs	r1, #2
 8002a82:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a86:	e7d4      	b.n	8002a32 <HAL_TIM_IC_Start_IT+0xce>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a88:	2102      	movs	r1, #2
 8002a8a:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a8e:	e7d0      	b.n	8002a32 <HAL_TIM_IC_Start_IT+0xce>
 8002a90:	2202      	movs	r2, #2
 8002a92:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a96:	6821      	ldr	r1, [r4, #0]
 8002a98:	68ca      	ldr	r2, [r1, #12]
 8002a9a:	f042 0204 	orr.w	r2, r2, #4
 8002a9e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002aa0:	e77d      	b.n	800299e <HAL_TIM_IC_Start_IT+0x3a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002aa8:	6821      	ldr	r1, [r4, #0]
 8002aaa:	68ca      	ldr	r2, [r1, #12]
 8002aac:	f042 0208 	orr.w	r2, r2, #8
 8002ab0:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002ab2:	e774      	b.n	800299e <HAL_TIM_IC_Start_IT+0x3a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ab4:	6821      	ldr	r1, [r4, #0]
 8002ab6:	68ca      	ldr	r2, [r1, #12]
 8002ab8:	f042 0210 	orr.w	r2, r2, #16
 8002abc:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002abe:	e76e      	b.n	800299e <HAL_TIM_IC_Start_IT+0x3a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	2a06      	cmp	r2, #6
 8002ac8:	d009      	beq.n	8002ade <HAL_TIM_IC_Start_IT+0x17a>
        __HAL_TIM_ENABLE(htim);
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_TIM_IC_Start_IT+0x174>
    return HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
}
 8002ad8:	bd10      	pop	{r4, pc}
  switch (Channel)
 8002ada:	4610      	mov	r0, r2
 8002adc:	e7fc      	b.n	8002ad8 <HAL_TIM_IC_Start_IT+0x174>
 8002ade:	2000      	movs	r0, #0
 8002ae0:	e7fa      	b.n	8002ad8 <HAL_TIM_IC_Start_IT+0x174>
 8002ae2:	bf00      	nop
 8002ae4:	40010000 	.word	0x40010000

08002ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002aec:	2a01      	cmp	r2, #1
 8002aee:	d035      	beq.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8002af0:	b410      	push	{r4}
 8002af2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002af4:	2201      	movs	r2, #1
 8002af6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	2202      	movs	r2, #2
 8002afc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b00:	6802      	ldr	r2, [r0, #0]
 8002b02:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b06:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0a:	6808      	ldr	r0, [r1, #0]
 8002b0c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b10:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4812      	ldr	r0, [pc, #72]	@ (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8002b16:	4282      	cmp	r2, r0
 8002b18:	d012      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002b1a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002b1e:	d00f      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002b20:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002b24:	4282      	cmp	r2, r0
 8002b26:	d00b      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002b28:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002b2c:	4282      	cmp	r2, r0
 8002b2e:	d007      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002b30:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002b34:	4282      	cmp	r2, r0
 8002b36:	d003      	beq.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002b38:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8002b3c:	4282      	cmp	r2, r0
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b40:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b44:	6849      	ldr	r1, [r1, #4]
 8002b46:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b48:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002b5c:	2002      	movs	r0, #2
}
 8002b5e:	4770      	bx	lr
 8002b60:	40010000 	.word	0x40010000

08002b64 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b66:	4770      	bx	lr

08002b68 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b68:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	f102 030c 	add.w	r3, r2, #12
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	320c      	adds	r2, #12
 8002b78:	e842 3100 	strex	r1, r3, [r2]
 8002b7c:	2900      	cmp	r1, #0
 8002b7e:	d1f3      	bne.n	8002b68 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b80:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	f102 0314 	add.w	r3, r2, #20
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	3214      	adds	r2, #20
 8002b90:	e842 3100 	strex	r1, r3, [r2]
 8002b94:	2900      	cmp	r1, #0
 8002b96:	d1f3      	bne.n	8002b80 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d005      	beq.n	8002baa <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002ba8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002baa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	f102 030c 	add.w	r3, r2, #12
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb8:	320c      	adds	r2, #12
 8002bba:	e842 3100 	strex	r1, r3, [r2]
 8002bbe:	2900      	cmp	r1, #0
 8002bc0:	d1f3      	bne.n	8002baa <UART_EndRxTransfer+0x42>
 8002bc2:	e7ec      	b.n	8002b9e <UART_EndRxTransfer+0x36>

08002bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc8:	6802      	ldr	r2, [r0, #0]
 8002bca:	6913      	ldr	r3, [r2, #16]
 8002bcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bd0:	68c1      	ldr	r1, [r0, #12]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bd6:	6883      	ldr	r3, [r0, #8]
 8002bd8:	6902      	ldr	r2, [r0, #16]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	6943      	ldr	r3, [r0, #20]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	69c3      	ldr	r3, [r0, #28]
 8002be2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002be4:	6801      	ldr	r1, [r0, #0]
 8002be6:	68cb      	ldr	r3, [r1, #12]
 8002be8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002bec:	f023 030c 	bic.w	r3, r3, #12
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bf4:	6802      	ldr	r2, [r0, #0]
 8002bf6:	6953      	ldr	r3, [r2, #20]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfc:	6981      	ldr	r1, [r0, #24]
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c02:	6803      	ldr	r3, [r0, #0]
 8002c04:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <UART_SetConfig+0x108>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d006      	beq.n	8002c18 <UART_SetConfig+0x54>
 8002c0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d002      	beq.n	8002c18 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c12:	f7ff f997 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8002c16:	e001      	b.n	8002c1c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c18:	f7ff f9a4 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c1c:	69e3      	ldr	r3, [r4, #28]
 8002c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c22:	d029      	beq.n	8002c78 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c24:	2100      	movs	r1, #0
 8002c26:	1803      	adds	r3, r0, r0
 8002c28:	4149      	adcs	r1, r1
 8002c2a:	181b      	adds	r3, r3, r0
 8002c2c:	f141 0100 	adc.w	r1, r1, #0
 8002c30:	00c9      	lsls	r1, r1, #3
 8002c32:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	1818      	adds	r0, r3, r0
 8002c3a:	6863      	ldr	r3, [r4, #4]
 8002c3c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002c40:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002c44:	f141 0100 	adc.w	r1, r1, #0
 8002c48:	f7fd ffb6 	bl	8000bb8 <__aeabi_uldivmod>
 8002c4c:	4a20      	ldr	r2, [pc, #128]	@ (8002cd0 <UART_SetConfig+0x10c>)
 8002c4e:	fba2 3100 	umull	r3, r1, r2, r0
 8002c52:	0949      	lsrs	r1, r1, #5
 8002c54:	2364      	movs	r3, #100	@ 0x64
 8002c56:	fb03 0311 	mls	r3, r3, r1, r0
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	3332      	adds	r3, #50	@ 0x32
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c68:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	6821      	ldr	r1, [r4, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }
}
 8002c76:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	1802      	adds	r2, r0, r0
 8002c7c:	eb43 0103 	adc.w	r1, r3, r3
 8002c80:	1812      	adds	r2, r2, r0
 8002c82:	f141 0100 	adc.w	r1, r1, #0
 8002c86:	00c9      	lsls	r1, r1, #3
 8002c88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c8c:	00d2      	lsls	r2, r2, #3
 8002c8e:	1810      	adds	r0, r2, r0
 8002c90:	f141 0100 	adc.w	r1, r1, #0
 8002c94:	6862      	ldr	r2, [r4, #4]
 8002c96:	1892      	adds	r2, r2, r2
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	f7fd ff8d 	bl	8000bb8 <__aeabi_uldivmod>
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd0 <UART_SetConfig+0x10c>)
 8002ca0:	fba2 3100 	umull	r3, r1, r2, r0
 8002ca4:	0949      	lsrs	r1, r1, #5
 8002ca6:	2364      	movs	r3, #100	@ 0x64
 8002ca8:	fb03 0311 	mls	r3, r3, r1, r0
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	3332      	adds	r3, #50	@ 0x32
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	005a      	lsls	r2, r3, #1
 8002cb8:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002cbc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	6821      	ldr	r1, [r4, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
 8002cca:	e7d4      	b.n	8002c76 <UART_SetConfig+0xb2>
 8002ccc:	40011000 	.word	0x40011000
 8002cd0:	51eb851f 	.word	0x51eb851f

08002cd4 <UART_WaitOnFlagUntilTimeout>:
{
 8002cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	4605      	mov	r5, r0
 8002cdc:	460e      	mov	r6, r1
 8002cde:	4617      	mov	r7, r2
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce6:	682b      	ldr	r3, [r5, #0]
 8002ce8:	681c      	ldr	r4, [r3, #0]
 8002cea:	ea36 0404 	bics.w	r4, r6, r4
 8002cee:	bf0c      	ite	eq
 8002cf0:	2401      	moveq	r4, #1
 8002cf2:	2400      	movne	r4, #0
 8002cf4:	42bc      	cmp	r4, r7
 8002cf6:	d128      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002cf8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002cfc:	d0f3      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe fca5 	bl	800164c <HAL_GetTick>
 8002d02:	eba0 0009 	sub.w	r0, r0, r9
 8002d06:	4540      	cmp	r0, r8
 8002d08:	d823      	bhi.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002d0a:	f1b8 0f00 	cmp.w	r8, #0
 8002d0e:	d022      	beq.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	f012 0f04 	tst.w	r2, #4
 8002d18:	d0e5      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x12>
 8002d1a:	2e80      	cmp	r6, #128	@ 0x80
 8002d1c:	d0e3      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x12>
 8002d1e:	2e40      	cmp	r6, #64	@ 0x40
 8002d20:	d0e1      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	f012 0f08 	tst.w	r2, #8
 8002d28:	d0dd      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d2a:	2400      	movs	r4, #0
 8002d2c:	9401      	str	r4, [sp, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	9201      	str	r2, [sp, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f7ff ff15 	bl	8002b68 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d3e:	2308      	movs	r3, #8
 8002d40:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002d42:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
 8002d48:	e000      	b.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002d4a:	2000      	movs	r0, #0
}
 8002d4c:	b003      	add	sp, #12
 8002d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002d52:	2003      	movs	r0, #3
 8002d54:	e7fa      	b.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x78>
 8002d56:	2003      	movs	r0, #3
 8002d58:	e7f8      	b.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x78>

08002d5a <HAL_UART_Init>:
  if (huart == NULL)
 8002d5a:	b360      	cbz	r0, 8002db6 <HAL_UART_Init+0x5c>
{
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d60:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d64:	b313      	cbz	r3, 8002dac <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d66:	2324      	movs	r3, #36	@ 0x24
 8002d68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002d6c:	6822      	ldr	r2, [r4, #0]
 8002d6e:	68d3      	ldr	r3, [r2, #12]
 8002d70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d74:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff ff24 	bl	8002bc4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	6913      	ldr	r3, [r2, #16]
 8002d80:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002d84:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	6953      	ldr	r3, [r2, #20]
 8002d8a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002d8e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d90:	6822      	ldr	r2, [r4, #0]
 8002d92:	68d3      	ldr	r3, [r2, #12]
 8002d94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d98:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da8:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002daa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002dac:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002db0:	f7fe fb2e 	bl	8001410 <HAL_UART_MspInit>
 8002db4:	e7d7      	b.n	8002d66 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
}
 8002db8:	4770      	bx	lr

08002dba <HAL_UART_Transmit>:
{
 8002dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d156      	bne.n	8002e7a <HAL_UART_Transmit+0xc0>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
 8002dd0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d055      	beq.n	8002e82 <HAL_UART_Transmit+0xc8>
 8002dd6:	b90a      	cbnz	r2, 8002ddc <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002dd8:	2001      	movs	r0, #1
 8002dda:	e04f      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de0:	2321      	movs	r3, #33	@ 0x21
 8002de2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002de6:	f7fe fc31 	bl	800164c <HAL_GetTick>
 8002dea:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002dec:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002df0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df4:	68a3      	ldr	r3, [r4, #8]
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dfa:	d002      	beq.n	8002e02 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002dfc:	f04f 0800 	mov.w	r8, #0
 8002e00:	e014      	b.n	8002e2c <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e02:	6923      	ldr	r3, [r4, #16]
 8002e04:	b32b      	cbz	r3, 8002e52 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8002e06:	f04f 0800 	mov.w	r8, #0
 8002e0a:	e00f      	b.n	8002e2c <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002e12:	2003      	movs	r0, #3
 8002e14:	e032      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002e1a:	6822      	ldr	r2, [r4, #0]
 8002e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e20:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002e22:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002e24:	b292      	uxth	r2, r2
 8002e26:	3a01      	subs	r2, #1
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e2c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b193      	cbz	r3, 8002e58 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e32:	9600      	str	r6, [sp, #0]
 8002e34:	463b      	mov	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	2180      	movs	r1, #128	@ 0x80
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ff4a 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002e40:	2800      	cmp	r0, #0
 8002e42:	d1e3      	bne.n	8002e0c <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002e44:	2d00      	cmp	r5, #0
 8002e46:	d0e6      	beq.n	8002e16 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e48:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e50:	e7e7      	b.n	8002e22 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002e52:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002e54:	2500      	movs	r5, #0
 8002e56:	e7e9      	b.n	8002e2c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e58:	9600      	str	r6, [sp, #0]
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	@ 0x40
 8002e60:	4620      	mov	r0, r4
 8002e62:	f7ff ff37 	bl	8002cd4 <UART_WaitOnFlagUntilTimeout>
 8002e66:	b918      	cbnz	r0, 8002e70 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002e6e:	e005      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002e70:	2320      	movs	r3, #32
 8002e72:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002e76:	2003      	movs	r0, #3
 8002e78:	e000      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002e7a:	2002      	movs	r0, #2
}
 8002e7c:	b002      	add	sp, #8
 8002e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002e82:	2001      	movs	r0, #1
 8002e84:	e7fa      	b.n	8002e7c <HAL_UART_Transmit+0xc2>

08002e86 <__cvt>:
 8002e86:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8a:	ec57 6b10 	vmov	r6, r7, d0
 8002e8e:	2f00      	cmp	r7, #0
 8002e90:	460c      	mov	r4, r1
 8002e92:	4619      	mov	r1, r3
 8002e94:	463b      	mov	r3, r7
 8002e96:	bfbb      	ittet	lt
 8002e98:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002e9c:	461f      	movlt	r7, r3
 8002e9e:	2300      	movge	r3, #0
 8002ea0:	232d      	movlt	r3, #45	@ 0x2d
 8002ea2:	700b      	strb	r3, [r1, #0]
 8002ea4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ea6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002eaa:	4691      	mov	r9, r2
 8002eac:	f023 0820 	bic.w	r8, r3, #32
 8002eb0:	bfbc      	itt	lt
 8002eb2:	4632      	movlt	r2, r6
 8002eb4:	4616      	movlt	r6, r2
 8002eb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002eba:	d005      	beq.n	8002ec8 <__cvt+0x42>
 8002ebc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002ec0:	d100      	bne.n	8002ec4 <__cvt+0x3e>
 8002ec2:	3401      	adds	r4, #1
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	e000      	b.n	8002eca <__cvt+0x44>
 8002ec8:	2103      	movs	r1, #3
 8002eca:	ab03      	add	r3, sp, #12
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	ab02      	add	r3, sp, #8
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	ec47 6b10 	vmov	d0, r6, r7
 8002ed6:	4653      	mov	r3, sl
 8002ed8:	4622      	mov	r2, r4
 8002eda:	f000 ff3d 	bl	8003d58 <_dtoa_r>
 8002ede:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	d119      	bne.n	8002f1a <__cvt+0x94>
 8002ee6:	f019 0f01 	tst.w	r9, #1
 8002eea:	d00e      	beq.n	8002f0a <__cvt+0x84>
 8002eec:	eb00 0904 	add.w	r9, r0, r4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	4639      	mov	r1, r7
 8002ef8:	f7fd fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8002efc:	b108      	cbz	r0, 8002f02 <__cvt+0x7c>
 8002efe:	f8cd 900c 	str.w	r9, [sp, #12]
 8002f02:	2230      	movs	r2, #48	@ 0x30
 8002f04:	9b03      	ldr	r3, [sp, #12]
 8002f06:	454b      	cmp	r3, r9
 8002f08:	d31e      	bcc.n	8002f48 <__cvt+0xc2>
 8002f0a:	9b03      	ldr	r3, [sp, #12]
 8002f0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002f0e:	1b5b      	subs	r3, r3, r5
 8002f10:	4628      	mov	r0, r5
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	b004      	add	sp, #16
 8002f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002f1e:	eb00 0904 	add.w	r9, r0, r4
 8002f22:	d1e5      	bne.n	8002ef0 <__cvt+0x6a>
 8002f24:	7803      	ldrb	r3, [r0, #0]
 8002f26:	2b30      	cmp	r3, #48	@ 0x30
 8002f28:	d10a      	bne.n	8002f40 <__cvt+0xba>
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	4630      	mov	r0, r6
 8002f30:	4639      	mov	r1, r7
 8002f32:	f7fd fdd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f36:	b918      	cbnz	r0, 8002f40 <__cvt+0xba>
 8002f38:	f1c4 0401 	rsb	r4, r4, #1
 8002f3c:	f8ca 4000 	str.w	r4, [sl]
 8002f40:	f8da 3000 	ldr.w	r3, [sl]
 8002f44:	4499      	add	r9, r3
 8002f46:	e7d3      	b.n	8002ef0 <__cvt+0x6a>
 8002f48:	1c59      	adds	r1, r3, #1
 8002f4a:	9103      	str	r1, [sp, #12]
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e7d9      	b.n	8002f04 <__cvt+0x7e>

08002f50 <__exponent>:
 8002f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f52:	2900      	cmp	r1, #0
 8002f54:	bfba      	itte	lt
 8002f56:	4249      	neglt	r1, r1
 8002f58:	232d      	movlt	r3, #45	@ 0x2d
 8002f5a:	232b      	movge	r3, #43	@ 0x2b
 8002f5c:	2909      	cmp	r1, #9
 8002f5e:	7002      	strb	r2, [r0, #0]
 8002f60:	7043      	strb	r3, [r0, #1]
 8002f62:	dd29      	ble.n	8002fb8 <__exponent+0x68>
 8002f64:	f10d 0307 	add.w	r3, sp, #7
 8002f68:	461d      	mov	r5, r3
 8002f6a:	270a      	movs	r7, #10
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f72:	fb07 1416 	mls	r4, r7, r6, r1
 8002f76:	3430      	adds	r4, #48	@ 0x30
 8002f78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	2c63      	cmp	r4, #99	@ 0x63
 8002f80:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002f84:	4631      	mov	r1, r6
 8002f86:	dcf1      	bgt.n	8002f6c <__exponent+0x1c>
 8002f88:	3130      	adds	r1, #48	@ 0x30
 8002f8a:	1e94      	subs	r4, r2, #2
 8002f8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f90:	1c41      	adds	r1, r0, #1
 8002f92:	4623      	mov	r3, r4
 8002f94:	42ab      	cmp	r3, r5
 8002f96:	d30a      	bcc.n	8002fae <__exponent+0x5e>
 8002f98:	f10d 0309 	add.w	r3, sp, #9
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	42ac      	cmp	r4, r5
 8002fa0:	bf88      	it	hi
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	4403      	add	r3, r0
 8002fa8:	1a18      	subs	r0, r3, r0
 8002faa:	b003      	add	sp, #12
 8002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002fb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002fb6:	e7ed      	b.n	8002f94 <__exponent+0x44>
 8002fb8:	2330      	movs	r3, #48	@ 0x30
 8002fba:	3130      	adds	r1, #48	@ 0x30
 8002fbc:	7083      	strb	r3, [r0, #2]
 8002fbe:	70c1      	strb	r1, [r0, #3]
 8002fc0:	1d03      	adds	r3, r0, #4
 8002fc2:	e7f1      	b.n	8002fa8 <__exponent+0x58>

08002fc4 <_printf_float>:
 8002fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc8:	b08d      	sub	sp, #52	@ 0x34
 8002fca:	460c      	mov	r4, r1
 8002fcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002fd0:	4616      	mov	r6, r2
 8002fd2:	461f      	mov	r7, r3
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	f000 fdbd 	bl	8003b54 <_localeconv_r>
 8002fda:	6803      	ldr	r3, [r0, #0]
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd f94e 	bl	8000280 <strlen>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fec:	9005      	str	r0, [sp, #20]
 8002fee:	3307      	adds	r3, #7
 8002ff0:	f023 0307 	bic.w	r3, r3, #7
 8002ff4:	f103 0208 	add.w	r2, r3, #8
 8002ff8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002ffc:	f8d4 b000 	ldr.w	fp, [r4]
 8003000:	f8c8 2000 	str.w	r2, [r8]
 8003004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003008:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800300c:	9307      	str	r3, [sp, #28]
 800300e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003012:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800301a:	4b9c      	ldr	r3, [pc, #624]	@ (800328c <_printf_float+0x2c8>)
 800301c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003020:	f7fd fd8c 	bl	8000b3c <__aeabi_dcmpun>
 8003024:	bb70      	cbnz	r0, 8003084 <_printf_float+0xc0>
 8003026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800302a:	4b98      	ldr	r3, [pc, #608]	@ (800328c <_printf_float+0x2c8>)
 800302c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003030:	f7fd fd66 	bl	8000b00 <__aeabi_dcmple>
 8003034:	bb30      	cbnz	r0, 8003084 <_printf_float+0xc0>
 8003036:	2200      	movs	r2, #0
 8003038:	2300      	movs	r3, #0
 800303a:	4640      	mov	r0, r8
 800303c:	4649      	mov	r1, r9
 800303e:	f7fd fd55 	bl	8000aec <__aeabi_dcmplt>
 8003042:	b110      	cbz	r0, 800304a <_printf_float+0x86>
 8003044:	232d      	movs	r3, #45	@ 0x2d
 8003046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800304a:	4a91      	ldr	r2, [pc, #580]	@ (8003290 <_printf_float+0x2cc>)
 800304c:	4b91      	ldr	r3, [pc, #580]	@ (8003294 <_printf_float+0x2d0>)
 800304e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003052:	bf8c      	ite	hi
 8003054:	4690      	movhi	r8, r2
 8003056:	4698      	movls	r8, r3
 8003058:	2303      	movs	r3, #3
 800305a:	6123      	str	r3, [r4, #16]
 800305c:	f02b 0304 	bic.w	r3, fp, #4
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	f04f 0900 	mov.w	r9, #0
 8003066:	9700      	str	r7, [sp, #0]
 8003068:	4633      	mov	r3, r6
 800306a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800306c:	4621      	mov	r1, r4
 800306e:	4628      	mov	r0, r5
 8003070:	f000 f9d2 	bl	8003418 <_printf_common>
 8003074:	3001      	adds	r0, #1
 8003076:	f040 808d 	bne.w	8003194 <_printf_float+0x1d0>
 800307a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800307e:	b00d      	add	sp, #52	@ 0x34
 8003080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003084:	4642      	mov	r2, r8
 8003086:	464b      	mov	r3, r9
 8003088:	4640      	mov	r0, r8
 800308a:	4649      	mov	r1, r9
 800308c:	f7fd fd56 	bl	8000b3c <__aeabi_dcmpun>
 8003090:	b140      	cbz	r0, 80030a4 <_printf_float+0xe0>
 8003092:	464b      	mov	r3, r9
 8003094:	2b00      	cmp	r3, #0
 8003096:	bfbc      	itt	lt
 8003098:	232d      	movlt	r3, #45	@ 0x2d
 800309a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800309e:	4a7e      	ldr	r2, [pc, #504]	@ (8003298 <_printf_float+0x2d4>)
 80030a0:	4b7e      	ldr	r3, [pc, #504]	@ (800329c <_printf_float+0x2d8>)
 80030a2:	e7d4      	b.n	800304e <_printf_float+0x8a>
 80030a4:	6863      	ldr	r3, [r4, #4]
 80030a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80030aa:	9206      	str	r2, [sp, #24]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	d13b      	bne.n	8003128 <_printf_float+0x164>
 80030b0:	2306      	movs	r3, #6
 80030b2:	6063      	str	r3, [r4, #4]
 80030b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80030b8:	2300      	movs	r3, #0
 80030ba:	6022      	str	r2, [r4, #0]
 80030bc:	9303      	str	r3, [sp, #12]
 80030be:	ab0a      	add	r3, sp, #40	@ 0x28
 80030c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80030c4:	ab09      	add	r3, sp, #36	@ 0x24
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	6861      	ldr	r1, [r4, #4]
 80030ca:	ec49 8b10 	vmov	d0, r8, r9
 80030ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80030d2:	4628      	mov	r0, r5
 80030d4:	f7ff fed7 	bl	8002e86 <__cvt>
 80030d8:	9b06      	ldr	r3, [sp, #24]
 80030da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80030dc:	2b47      	cmp	r3, #71	@ 0x47
 80030de:	4680      	mov	r8, r0
 80030e0:	d129      	bne.n	8003136 <_printf_float+0x172>
 80030e2:	1cc8      	adds	r0, r1, #3
 80030e4:	db02      	blt.n	80030ec <_printf_float+0x128>
 80030e6:	6863      	ldr	r3, [r4, #4]
 80030e8:	4299      	cmp	r1, r3
 80030ea:	dd41      	ble.n	8003170 <_printf_float+0x1ac>
 80030ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80030f0:	fa5f fa8a 	uxtb.w	sl, sl
 80030f4:	3901      	subs	r1, #1
 80030f6:	4652      	mov	r2, sl
 80030f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80030fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80030fe:	f7ff ff27 	bl	8002f50 <__exponent>
 8003102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003104:	1813      	adds	r3, r2, r0
 8003106:	2a01      	cmp	r2, #1
 8003108:	4681      	mov	r9, r0
 800310a:	6123      	str	r3, [r4, #16]
 800310c:	dc02      	bgt.n	8003114 <_printf_float+0x150>
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	07d2      	lsls	r2, r2, #31
 8003112:	d501      	bpl.n	8003118 <_printf_float+0x154>
 8003114:	3301      	adds	r3, #1
 8003116:	6123      	str	r3, [r4, #16]
 8003118:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0a2      	beq.n	8003066 <_printf_float+0xa2>
 8003120:	232d      	movs	r3, #45	@ 0x2d
 8003122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003126:	e79e      	b.n	8003066 <_printf_float+0xa2>
 8003128:	9a06      	ldr	r2, [sp, #24]
 800312a:	2a47      	cmp	r2, #71	@ 0x47
 800312c:	d1c2      	bne.n	80030b4 <_printf_float+0xf0>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1c0      	bne.n	80030b4 <_printf_float+0xf0>
 8003132:	2301      	movs	r3, #1
 8003134:	e7bd      	b.n	80030b2 <_printf_float+0xee>
 8003136:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800313a:	d9db      	bls.n	80030f4 <_printf_float+0x130>
 800313c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003140:	d118      	bne.n	8003174 <_printf_float+0x1b0>
 8003142:	2900      	cmp	r1, #0
 8003144:	6863      	ldr	r3, [r4, #4]
 8003146:	dd0b      	ble.n	8003160 <_printf_float+0x19c>
 8003148:	6121      	str	r1, [r4, #16]
 800314a:	b913      	cbnz	r3, 8003152 <_printf_float+0x18e>
 800314c:	6822      	ldr	r2, [r4, #0]
 800314e:	07d0      	lsls	r0, r2, #31
 8003150:	d502      	bpl.n	8003158 <_printf_float+0x194>
 8003152:	3301      	adds	r3, #1
 8003154:	440b      	add	r3, r1
 8003156:	6123      	str	r3, [r4, #16]
 8003158:	65a1      	str	r1, [r4, #88]	@ 0x58
 800315a:	f04f 0900 	mov.w	r9, #0
 800315e:	e7db      	b.n	8003118 <_printf_float+0x154>
 8003160:	b913      	cbnz	r3, 8003168 <_printf_float+0x1a4>
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	07d2      	lsls	r2, r2, #31
 8003166:	d501      	bpl.n	800316c <_printf_float+0x1a8>
 8003168:	3302      	adds	r3, #2
 800316a:	e7f4      	b.n	8003156 <_printf_float+0x192>
 800316c:	2301      	movs	r3, #1
 800316e:	e7f2      	b.n	8003156 <_printf_float+0x192>
 8003170:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003176:	4299      	cmp	r1, r3
 8003178:	db05      	blt.n	8003186 <_printf_float+0x1c2>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	6121      	str	r1, [r4, #16]
 800317e:	07d8      	lsls	r0, r3, #31
 8003180:	d5ea      	bpl.n	8003158 <_printf_float+0x194>
 8003182:	1c4b      	adds	r3, r1, #1
 8003184:	e7e7      	b.n	8003156 <_printf_float+0x192>
 8003186:	2900      	cmp	r1, #0
 8003188:	bfd4      	ite	le
 800318a:	f1c1 0202 	rsble	r2, r1, #2
 800318e:	2201      	movgt	r2, #1
 8003190:	4413      	add	r3, r2
 8003192:	e7e0      	b.n	8003156 <_printf_float+0x192>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	055a      	lsls	r2, r3, #21
 8003198:	d407      	bmi.n	80031aa <_printf_float+0x1e6>
 800319a:	6923      	ldr	r3, [r4, #16]
 800319c:	4642      	mov	r2, r8
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	d12b      	bne.n	8003200 <_printf_float+0x23c>
 80031a8:	e767      	b.n	800307a <_printf_float+0xb6>
 80031aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80031ae:	f240 80dd 	bls.w	800336c <_printf_float+0x3a8>
 80031b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031b6:	2200      	movs	r2, #0
 80031b8:	2300      	movs	r3, #0
 80031ba:	f7fd fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d033      	beq.n	800322a <_printf_float+0x266>
 80031c2:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <_printf_float+0x2dc>)
 80031c4:	2301      	movs	r3, #1
 80031c6:	4631      	mov	r1, r6
 80031c8:	4628      	mov	r0, r5
 80031ca:	47b8      	blx	r7
 80031cc:	3001      	adds	r0, #1
 80031ce:	f43f af54 	beq.w	800307a <_printf_float+0xb6>
 80031d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80031d6:	4543      	cmp	r3, r8
 80031d8:	db02      	blt.n	80031e0 <_printf_float+0x21c>
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	07d8      	lsls	r0, r3, #31
 80031de:	d50f      	bpl.n	8003200 <_printf_float+0x23c>
 80031e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031e4:	4631      	mov	r1, r6
 80031e6:	4628      	mov	r0, r5
 80031e8:	47b8      	blx	r7
 80031ea:	3001      	adds	r0, #1
 80031ec:	f43f af45 	beq.w	800307a <_printf_float+0xb6>
 80031f0:	f04f 0900 	mov.w	r9, #0
 80031f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80031f8:	f104 0a1a 	add.w	sl, r4, #26
 80031fc:	45c8      	cmp	r8, r9
 80031fe:	dc09      	bgt.n	8003214 <_printf_float+0x250>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	079b      	lsls	r3, r3, #30
 8003204:	f100 8103 	bmi.w	800340e <_printf_float+0x44a>
 8003208:	68e0      	ldr	r0, [r4, #12]
 800320a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800320c:	4298      	cmp	r0, r3
 800320e:	bfb8      	it	lt
 8003210:	4618      	movlt	r0, r3
 8003212:	e734      	b.n	800307e <_printf_float+0xba>
 8003214:	2301      	movs	r3, #1
 8003216:	4652      	mov	r2, sl
 8003218:	4631      	mov	r1, r6
 800321a:	4628      	mov	r0, r5
 800321c:	47b8      	blx	r7
 800321e:	3001      	adds	r0, #1
 8003220:	f43f af2b 	beq.w	800307a <_printf_float+0xb6>
 8003224:	f109 0901 	add.w	r9, r9, #1
 8003228:	e7e8      	b.n	80031fc <_printf_float+0x238>
 800322a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	dc39      	bgt.n	80032a4 <_printf_float+0x2e0>
 8003230:	4a1b      	ldr	r2, [pc, #108]	@ (80032a0 <_printf_float+0x2dc>)
 8003232:	2301      	movs	r3, #1
 8003234:	4631      	mov	r1, r6
 8003236:	4628      	mov	r0, r5
 8003238:	47b8      	blx	r7
 800323a:	3001      	adds	r0, #1
 800323c:	f43f af1d 	beq.w	800307a <_printf_float+0xb6>
 8003240:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003244:	ea59 0303 	orrs.w	r3, r9, r3
 8003248:	d102      	bne.n	8003250 <_printf_float+0x28c>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	07d9      	lsls	r1, r3, #31
 800324e:	d5d7      	bpl.n	8003200 <_printf_float+0x23c>
 8003250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003254:	4631      	mov	r1, r6
 8003256:	4628      	mov	r0, r5
 8003258:	47b8      	blx	r7
 800325a:	3001      	adds	r0, #1
 800325c:	f43f af0d 	beq.w	800307a <_printf_float+0xb6>
 8003260:	f04f 0a00 	mov.w	sl, #0
 8003264:	f104 0b1a 	add.w	fp, r4, #26
 8003268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800326a:	425b      	negs	r3, r3
 800326c:	4553      	cmp	r3, sl
 800326e:	dc01      	bgt.n	8003274 <_printf_float+0x2b0>
 8003270:	464b      	mov	r3, r9
 8003272:	e793      	b.n	800319c <_printf_float+0x1d8>
 8003274:	2301      	movs	r3, #1
 8003276:	465a      	mov	r2, fp
 8003278:	4631      	mov	r1, r6
 800327a:	4628      	mov	r0, r5
 800327c:	47b8      	blx	r7
 800327e:	3001      	adds	r0, #1
 8003280:	f43f aefb 	beq.w	800307a <_printf_float+0xb6>
 8003284:	f10a 0a01 	add.w	sl, sl, #1
 8003288:	e7ee      	b.n	8003268 <_printf_float+0x2a4>
 800328a:	bf00      	nop
 800328c:	7fefffff 	.word	0x7fefffff
 8003290:	08005924 	.word	0x08005924
 8003294:	08005920 	.word	0x08005920
 8003298:	0800592c 	.word	0x0800592c
 800329c:	08005928 	.word	0x08005928
 80032a0:	08005930 	.word	0x08005930
 80032a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80032aa:	4553      	cmp	r3, sl
 80032ac:	bfa8      	it	ge
 80032ae:	4653      	movge	r3, sl
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	4699      	mov	r9, r3
 80032b4:	dc36      	bgt.n	8003324 <_printf_float+0x360>
 80032b6:	f04f 0b00 	mov.w	fp, #0
 80032ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032be:	f104 021a 	add.w	r2, r4, #26
 80032c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032c4:	9306      	str	r3, [sp, #24]
 80032c6:	eba3 0309 	sub.w	r3, r3, r9
 80032ca:	455b      	cmp	r3, fp
 80032cc:	dc31      	bgt.n	8003332 <_printf_float+0x36e>
 80032ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032d0:	459a      	cmp	sl, r3
 80032d2:	dc3a      	bgt.n	800334a <_printf_float+0x386>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	07da      	lsls	r2, r3, #31
 80032d8:	d437      	bmi.n	800334a <_printf_float+0x386>
 80032da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032dc:	ebaa 0903 	sub.w	r9, sl, r3
 80032e0:	9b06      	ldr	r3, [sp, #24]
 80032e2:	ebaa 0303 	sub.w	r3, sl, r3
 80032e6:	4599      	cmp	r9, r3
 80032e8:	bfa8      	it	ge
 80032ea:	4699      	movge	r9, r3
 80032ec:	f1b9 0f00 	cmp.w	r9, #0
 80032f0:	dc33      	bgt.n	800335a <_printf_float+0x396>
 80032f2:	f04f 0800 	mov.w	r8, #0
 80032f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032fa:	f104 0b1a 	add.w	fp, r4, #26
 80032fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003300:	ebaa 0303 	sub.w	r3, sl, r3
 8003304:	eba3 0309 	sub.w	r3, r3, r9
 8003308:	4543      	cmp	r3, r8
 800330a:	f77f af79 	ble.w	8003200 <_printf_float+0x23c>
 800330e:	2301      	movs	r3, #1
 8003310:	465a      	mov	r2, fp
 8003312:	4631      	mov	r1, r6
 8003314:	4628      	mov	r0, r5
 8003316:	47b8      	blx	r7
 8003318:	3001      	adds	r0, #1
 800331a:	f43f aeae 	beq.w	800307a <_printf_float+0xb6>
 800331e:	f108 0801 	add.w	r8, r8, #1
 8003322:	e7ec      	b.n	80032fe <_printf_float+0x33a>
 8003324:	4642      	mov	r2, r8
 8003326:	4631      	mov	r1, r6
 8003328:	4628      	mov	r0, r5
 800332a:	47b8      	blx	r7
 800332c:	3001      	adds	r0, #1
 800332e:	d1c2      	bne.n	80032b6 <_printf_float+0x2f2>
 8003330:	e6a3      	b.n	800307a <_printf_float+0xb6>
 8003332:	2301      	movs	r3, #1
 8003334:	4631      	mov	r1, r6
 8003336:	4628      	mov	r0, r5
 8003338:	9206      	str	r2, [sp, #24]
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	f43f ae9c 	beq.w	800307a <_printf_float+0xb6>
 8003342:	9a06      	ldr	r2, [sp, #24]
 8003344:	f10b 0b01 	add.w	fp, fp, #1
 8003348:	e7bb      	b.n	80032c2 <_printf_float+0x2fe>
 800334a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800334e:	4631      	mov	r1, r6
 8003350:	4628      	mov	r0, r5
 8003352:	47b8      	blx	r7
 8003354:	3001      	adds	r0, #1
 8003356:	d1c0      	bne.n	80032da <_printf_float+0x316>
 8003358:	e68f      	b.n	800307a <_printf_float+0xb6>
 800335a:	9a06      	ldr	r2, [sp, #24]
 800335c:	464b      	mov	r3, r9
 800335e:	4442      	add	r2, r8
 8003360:	4631      	mov	r1, r6
 8003362:	4628      	mov	r0, r5
 8003364:	47b8      	blx	r7
 8003366:	3001      	adds	r0, #1
 8003368:	d1c3      	bne.n	80032f2 <_printf_float+0x32e>
 800336a:	e686      	b.n	800307a <_printf_float+0xb6>
 800336c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003370:	f1ba 0f01 	cmp.w	sl, #1
 8003374:	dc01      	bgt.n	800337a <_printf_float+0x3b6>
 8003376:	07db      	lsls	r3, r3, #31
 8003378:	d536      	bpl.n	80033e8 <_printf_float+0x424>
 800337a:	2301      	movs	r3, #1
 800337c:	4642      	mov	r2, r8
 800337e:	4631      	mov	r1, r6
 8003380:	4628      	mov	r0, r5
 8003382:	47b8      	blx	r7
 8003384:	3001      	adds	r0, #1
 8003386:	f43f ae78 	beq.w	800307a <_printf_float+0xb6>
 800338a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800338e:	4631      	mov	r1, r6
 8003390:	4628      	mov	r0, r5
 8003392:	47b8      	blx	r7
 8003394:	3001      	adds	r0, #1
 8003396:	f43f ae70 	beq.w	800307a <_printf_float+0xb6>
 800339a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800339e:	2200      	movs	r2, #0
 80033a0:	2300      	movs	r3, #0
 80033a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80033a6:	f7fd fb97 	bl	8000ad8 <__aeabi_dcmpeq>
 80033aa:	b9c0      	cbnz	r0, 80033de <_printf_float+0x41a>
 80033ac:	4653      	mov	r3, sl
 80033ae:	f108 0201 	add.w	r2, r8, #1
 80033b2:	4631      	mov	r1, r6
 80033b4:	4628      	mov	r0, r5
 80033b6:	47b8      	blx	r7
 80033b8:	3001      	adds	r0, #1
 80033ba:	d10c      	bne.n	80033d6 <_printf_float+0x412>
 80033bc:	e65d      	b.n	800307a <_printf_float+0xb6>
 80033be:	2301      	movs	r3, #1
 80033c0:	465a      	mov	r2, fp
 80033c2:	4631      	mov	r1, r6
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b8      	blx	r7
 80033c8:	3001      	adds	r0, #1
 80033ca:	f43f ae56 	beq.w	800307a <_printf_float+0xb6>
 80033ce:	f108 0801 	add.w	r8, r8, #1
 80033d2:	45d0      	cmp	r8, sl
 80033d4:	dbf3      	blt.n	80033be <_printf_float+0x3fa>
 80033d6:	464b      	mov	r3, r9
 80033d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80033dc:	e6df      	b.n	800319e <_printf_float+0x1da>
 80033de:	f04f 0800 	mov.w	r8, #0
 80033e2:	f104 0b1a 	add.w	fp, r4, #26
 80033e6:	e7f4      	b.n	80033d2 <_printf_float+0x40e>
 80033e8:	2301      	movs	r3, #1
 80033ea:	4642      	mov	r2, r8
 80033ec:	e7e1      	b.n	80033b2 <_printf_float+0x3ee>
 80033ee:	2301      	movs	r3, #1
 80033f0:	464a      	mov	r2, r9
 80033f2:	4631      	mov	r1, r6
 80033f4:	4628      	mov	r0, r5
 80033f6:	47b8      	blx	r7
 80033f8:	3001      	adds	r0, #1
 80033fa:	f43f ae3e 	beq.w	800307a <_printf_float+0xb6>
 80033fe:	f108 0801 	add.w	r8, r8, #1
 8003402:	68e3      	ldr	r3, [r4, #12]
 8003404:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003406:	1a5b      	subs	r3, r3, r1
 8003408:	4543      	cmp	r3, r8
 800340a:	dcf0      	bgt.n	80033ee <_printf_float+0x42a>
 800340c:	e6fc      	b.n	8003208 <_printf_float+0x244>
 800340e:	f04f 0800 	mov.w	r8, #0
 8003412:	f104 0919 	add.w	r9, r4, #25
 8003416:	e7f4      	b.n	8003402 <_printf_float+0x43e>

08003418 <_printf_common>:
 8003418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800341c:	4616      	mov	r6, r2
 800341e:	4698      	mov	r8, r3
 8003420:	688a      	ldr	r2, [r1, #8]
 8003422:	690b      	ldr	r3, [r1, #16]
 8003424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003428:	4293      	cmp	r3, r2
 800342a:	bfb8      	it	lt
 800342c:	4613      	movlt	r3, r2
 800342e:	6033      	str	r3, [r6, #0]
 8003430:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003434:	4607      	mov	r7, r0
 8003436:	460c      	mov	r4, r1
 8003438:	b10a      	cbz	r2, 800343e <_printf_common+0x26>
 800343a:	3301      	adds	r3, #1
 800343c:	6033      	str	r3, [r6, #0]
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	0699      	lsls	r1, r3, #26
 8003442:	bf42      	ittt	mi
 8003444:	6833      	ldrmi	r3, [r6, #0]
 8003446:	3302      	addmi	r3, #2
 8003448:	6033      	strmi	r3, [r6, #0]
 800344a:	6825      	ldr	r5, [r4, #0]
 800344c:	f015 0506 	ands.w	r5, r5, #6
 8003450:	d106      	bne.n	8003460 <_printf_common+0x48>
 8003452:	f104 0a19 	add.w	sl, r4, #25
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	6832      	ldr	r2, [r6, #0]
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	42ab      	cmp	r3, r5
 800345e:	dc26      	bgt.n	80034ae <_printf_common+0x96>
 8003460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	3b00      	subs	r3, #0
 8003468:	bf18      	it	ne
 800346a:	2301      	movne	r3, #1
 800346c:	0692      	lsls	r2, r2, #26
 800346e:	d42b      	bmi.n	80034c8 <_printf_common+0xb0>
 8003470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003474:	4641      	mov	r1, r8
 8003476:	4638      	mov	r0, r7
 8003478:	47c8      	blx	r9
 800347a:	3001      	adds	r0, #1
 800347c:	d01e      	beq.n	80034bc <_printf_common+0xa4>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	6922      	ldr	r2, [r4, #16]
 8003482:	f003 0306 	and.w	r3, r3, #6
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf02      	ittt	eq
 800348a:	68e5      	ldreq	r5, [r4, #12]
 800348c:	6833      	ldreq	r3, [r6, #0]
 800348e:	1aed      	subeq	r5, r5, r3
 8003490:	68a3      	ldr	r3, [r4, #8]
 8003492:	bf0c      	ite	eq
 8003494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003498:	2500      	movne	r5, #0
 800349a:	4293      	cmp	r3, r2
 800349c:	bfc4      	itt	gt
 800349e:	1a9b      	subgt	r3, r3, r2
 80034a0:	18ed      	addgt	r5, r5, r3
 80034a2:	2600      	movs	r6, #0
 80034a4:	341a      	adds	r4, #26
 80034a6:	42b5      	cmp	r5, r6
 80034a8:	d11a      	bne.n	80034e0 <_printf_common+0xc8>
 80034aa:	2000      	movs	r0, #0
 80034ac:	e008      	b.n	80034c0 <_printf_common+0xa8>
 80034ae:	2301      	movs	r3, #1
 80034b0:	4652      	mov	r2, sl
 80034b2:	4641      	mov	r1, r8
 80034b4:	4638      	mov	r0, r7
 80034b6:	47c8      	blx	r9
 80034b8:	3001      	adds	r0, #1
 80034ba:	d103      	bne.n	80034c4 <_printf_common+0xac>
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c4:	3501      	adds	r5, #1
 80034c6:	e7c6      	b.n	8003456 <_printf_common+0x3e>
 80034c8:	18e1      	adds	r1, r4, r3
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	2030      	movs	r0, #48	@ 0x30
 80034ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034d2:	4422      	add	r2, r4
 80034d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034dc:	3302      	adds	r3, #2
 80034de:	e7c7      	b.n	8003470 <_printf_common+0x58>
 80034e0:	2301      	movs	r3, #1
 80034e2:	4622      	mov	r2, r4
 80034e4:	4641      	mov	r1, r8
 80034e6:	4638      	mov	r0, r7
 80034e8:	47c8      	blx	r9
 80034ea:	3001      	adds	r0, #1
 80034ec:	d0e6      	beq.n	80034bc <_printf_common+0xa4>
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7d9      	b.n	80034a6 <_printf_common+0x8e>
	...

080034f4 <_printf_i>:
 80034f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	7e0f      	ldrb	r7, [r1, #24]
 80034fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034fc:	2f78      	cmp	r7, #120	@ 0x78
 80034fe:	4691      	mov	r9, r2
 8003500:	4680      	mov	r8, r0
 8003502:	460c      	mov	r4, r1
 8003504:	469a      	mov	sl, r3
 8003506:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800350a:	d807      	bhi.n	800351c <_printf_i+0x28>
 800350c:	2f62      	cmp	r7, #98	@ 0x62
 800350e:	d80a      	bhi.n	8003526 <_printf_i+0x32>
 8003510:	2f00      	cmp	r7, #0
 8003512:	f000 80d1 	beq.w	80036b8 <_printf_i+0x1c4>
 8003516:	2f58      	cmp	r7, #88	@ 0x58
 8003518:	f000 80b8 	beq.w	800368c <_printf_i+0x198>
 800351c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003520:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003524:	e03a      	b.n	800359c <_printf_i+0xa8>
 8003526:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800352a:	2b15      	cmp	r3, #21
 800352c:	d8f6      	bhi.n	800351c <_printf_i+0x28>
 800352e:	a101      	add	r1, pc, #4	@ (adr r1, 8003534 <_printf_i+0x40>)
 8003530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003534:	0800358d 	.word	0x0800358d
 8003538:	080035a1 	.word	0x080035a1
 800353c:	0800351d 	.word	0x0800351d
 8003540:	0800351d 	.word	0x0800351d
 8003544:	0800351d 	.word	0x0800351d
 8003548:	0800351d 	.word	0x0800351d
 800354c:	080035a1 	.word	0x080035a1
 8003550:	0800351d 	.word	0x0800351d
 8003554:	0800351d 	.word	0x0800351d
 8003558:	0800351d 	.word	0x0800351d
 800355c:	0800351d 	.word	0x0800351d
 8003560:	0800369f 	.word	0x0800369f
 8003564:	080035cb 	.word	0x080035cb
 8003568:	08003659 	.word	0x08003659
 800356c:	0800351d 	.word	0x0800351d
 8003570:	0800351d 	.word	0x0800351d
 8003574:	080036c1 	.word	0x080036c1
 8003578:	0800351d 	.word	0x0800351d
 800357c:	080035cb 	.word	0x080035cb
 8003580:	0800351d 	.word	0x0800351d
 8003584:	0800351d 	.word	0x0800351d
 8003588:	08003661 	.word	0x08003661
 800358c:	6833      	ldr	r3, [r6, #0]
 800358e:	1d1a      	adds	r2, r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6032      	str	r2, [r6, #0]
 8003594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003598:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800359c:	2301      	movs	r3, #1
 800359e:	e09c      	b.n	80036da <_printf_i+0x1e6>
 80035a0:	6833      	ldr	r3, [r6, #0]
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	1d19      	adds	r1, r3, #4
 80035a6:	6031      	str	r1, [r6, #0]
 80035a8:	0606      	lsls	r6, r0, #24
 80035aa:	d501      	bpl.n	80035b0 <_printf_i+0xbc>
 80035ac:	681d      	ldr	r5, [r3, #0]
 80035ae:	e003      	b.n	80035b8 <_printf_i+0xc4>
 80035b0:	0645      	lsls	r5, r0, #25
 80035b2:	d5fb      	bpl.n	80035ac <_printf_i+0xb8>
 80035b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035b8:	2d00      	cmp	r5, #0
 80035ba:	da03      	bge.n	80035c4 <_printf_i+0xd0>
 80035bc:	232d      	movs	r3, #45	@ 0x2d
 80035be:	426d      	negs	r5, r5
 80035c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035c4:	4858      	ldr	r0, [pc, #352]	@ (8003728 <_printf_i+0x234>)
 80035c6:	230a      	movs	r3, #10
 80035c8:	e011      	b.n	80035ee <_printf_i+0xfa>
 80035ca:	6821      	ldr	r1, [r4, #0]
 80035cc:	6833      	ldr	r3, [r6, #0]
 80035ce:	0608      	lsls	r0, r1, #24
 80035d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80035d4:	d402      	bmi.n	80035dc <_printf_i+0xe8>
 80035d6:	0649      	lsls	r1, r1, #25
 80035d8:	bf48      	it	mi
 80035da:	b2ad      	uxthmi	r5, r5
 80035dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80035de:	4852      	ldr	r0, [pc, #328]	@ (8003728 <_printf_i+0x234>)
 80035e0:	6033      	str	r3, [r6, #0]
 80035e2:	bf14      	ite	ne
 80035e4:	230a      	movne	r3, #10
 80035e6:	2308      	moveq	r3, #8
 80035e8:	2100      	movs	r1, #0
 80035ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035ee:	6866      	ldr	r6, [r4, #4]
 80035f0:	60a6      	str	r6, [r4, #8]
 80035f2:	2e00      	cmp	r6, #0
 80035f4:	db05      	blt.n	8003602 <_printf_i+0x10e>
 80035f6:	6821      	ldr	r1, [r4, #0]
 80035f8:	432e      	orrs	r6, r5
 80035fa:	f021 0104 	bic.w	r1, r1, #4
 80035fe:	6021      	str	r1, [r4, #0]
 8003600:	d04b      	beq.n	800369a <_printf_i+0x1a6>
 8003602:	4616      	mov	r6, r2
 8003604:	fbb5 f1f3 	udiv	r1, r5, r3
 8003608:	fb03 5711 	mls	r7, r3, r1, r5
 800360c:	5dc7      	ldrb	r7, [r0, r7]
 800360e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003612:	462f      	mov	r7, r5
 8003614:	42bb      	cmp	r3, r7
 8003616:	460d      	mov	r5, r1
 8003618:	d9f4      	bls.n	8003604 <_printf_i+0x110>
 800361a:	2b08      	cmp	r3, #8
 800361c:	d10b      	bne.n	8003636 <_printf_i+0x142>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	07df      	lsls	r7, r3, #31
 8003622:	d508      	bpl.n	8003636 <_printf_i+0x142>
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	6861      	ldr	r1, [r4, #4]
 8003628:	4299      	cmp	r1, r3
 800362a:	bfde      	ittt	le
 800362c:	2330      	movle	r3, #48	@ 0x30
 800362e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003632:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003636:	1b92      	subs	r2, r2, r6
 8003638:	6122      	str	r2, [r4, #16]
 800363a:	f8cd a000 	str.w	sl, [sp]
 800363e:	464b      	mov	r3, r9
 8003640:	aa03      	add	r2, sp, #12
 8003642:	4621      	mov	r1, r4
 8003644:	4640      	mov	r0, r8
 8003646:	f7ff fee7 	bl	8003418 <_printf_common>
 800364a:	3001      	adds	r0, #1
 800364c:	d14a      	bne.n	80036e4 <_printf_i+0x1f0>
 800364e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003652:	b004      	add	sp, #16
 8003654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	4832      	ldr	r0, [pc, #200]	@ (800372c <_printf_i+0x238>)
 8003662:	2778      	movs	r7, #120	@ 0x78
 8003664:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	6831      	ldr	r1, [r6, #0]
 800366c:	061f      	lsls	r7, r3, #24
 800366e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003672:	d402      	bmi.n	800367a <_printf_i+0x186>
 8003674:	065f      	lsls	r7, r3, #25
 8003676:	bf48      	it	mi
 8003678:	b2ad      	uxthmi	r5, r5
 800367a:	6031      	str	r1, [r6, #0]
 800367c:	07d9      	lsls	r1, r3, #31
 800367e:	bf44      	itt	mi
 8003680:	f043 0320 	orrmi.w	r3, r3, #32
 8003684:	6023      	strmi	r3, [r4, #0]
 8003686:	b11d      	cbz	r5, 8003690 <_printf_i+0x19c>
 8003688:	2310      	movs	r3, #16
 800368a:	e7ad      	b.n	80035e8 <_printf_i+0xf4>
 800368c:	4826      	ldr	r0, [pc, #152]	@ (8003728 <_printf_i+0x234>)
 800368e:	e7e9      	b.n	8003664 <_printf_i+0x170>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	f023 0320 	bic.w	r3, r3, #32
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	e7f6      	b.n	8003688 <_printf_i+0x194>
 800369a:	4616      	mov	r6, r2
 800369c:	e7bd      	b.n	800361a <_printf_i+0x126>
 800369e:	6833      	ldr	r3, [r6, #0]
 80036a0:	6825      	ldr	r5, [r4, #0]
 80036a2:	6961      	ldr	r1, [r4, #20]
 80036a4:	1d18      	adds	r0, r3, #4
 80036a6:	6030      	str	r0, [r6, #0]
 80036a8:	062e      	lsls	r6, r5, #24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	d501      	bpl.n	80036b2 <_printf_i+0x1be>
 80036ae:	6019      	str	r1, [r3, #0]
 80036b0:	e002      	b.n	80036b8 <_printf_i+0x1c4>
 80036b2:	0668      	lsls	r0, r5, #25
 80036b4:	d5fb      	bpl.n	80036ae <_printf_i+0x1ba>
 80036b6:	8019      	strh	r1, [r3, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	6123      	str	r3, [r4, #16]
 80036bc:	4616      	mov	r6, r2
 80036be:	e7bc      	b.n	800363a <_printf_i+0x146>
 80036c0:	6833      	ldr	r3, [r6, #0]
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	6032      	str	r2, [r6, #0]
 80036c6:	681e      	ldr	r6, [r3, #0]
 80036c8:	6862      	ldr	r2, [r4, #4]
 80036ca:	2100      	movs	r1, #0
 80036cc:	4630      	mov	r0, r6
 80036ce:	f7fc fd87 	bl	80001e0 <memchr>
 80036d2:	b108      	cbz	r0, 80036d8 <_printf_i+0x1e4>
 80036d4:	1b80      	subs	r0, r0, r6
 80036d6:	6060      	str	r0, [r4, #4]
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	2300      	movs	r3, #0
 80036de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036e2:	e7aa      	b.n	800363a <_printf_i+0x146>
 80036e4:	6923      	ldr	r3, [r4, #16]
 80036e6:	4632      	mov	r2, r6
 80036e8:	4649      	mov	r1, r9
 80036ea:	4640      	mov	r0, r8
 80036ec:	47d0      	blx	sl
 80036ee:	3001      	adds	r0, #1
 80036f0:	d0ad      	beq.n	800364e <_printf_i+0x15a>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	079b      	lsls	r3, r3, #30
 80036f6:	d413      	bmi.n	8003720 <_printf_i+0x22c>
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	4298      	cmp	r0, r3
 80036fe:	bfb8      	it	lt
 8003700:	4618      	movlt	r0, r3
 8003702:	e7a6      	b.n	8003652 <_printf_i+0x15e>
 8003704:	2301      	movs	r3, #1
 8003706:	4632      	mov	r2, r6
 8003708:	4649      	mov	r1, r9
 800370a:	4640      	mov	r0, r8
 800370c:	47d0      	blx	sl
 800370e:	3001      	adds	r0, #1
 8003710:	d09d      	beq.n	800364e <_printf_i+0x15a>
 8003712:	3501      	adds	r5, #1
 8003714:	68e3      	ldr	r3, [r4, #12]
 8003716:	9903      	ldr	r1, [sp, #12]
 8003718:	1a5b      	subs	r3, r3, r1
 800371a:	42ab      	cmp	r3, r5
 800371c:	dcf2      	bgt.n	8003704 <_printf_i+0x210>
 800371e:	e7eb      	b.n	80036f8 <_printf_i+0x204>
 8003720:	2500      	movs	r5, #0
 8003722:	f104 0619 	add.w	r6, r4, #25
 8003726:	e7f5      	b.n	8003714 <_printf_i+0x220>
 8003728:	08005932 	.word	0x08005932
 800372c:	08005943 	.word	0x08005943

08003730 <std>:
 8003730:	2300      	movs	r3, #0
 8003732:	b510      	push	{r4, lr}
 8003734:	4604      	mov	r4, r0
 8003736:	e9c0 3300 	strd	r3, r3, [r0]
 800373a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800373e:	6083      	str	r3, [r0, #8]
 8003740:	8181      	strh	r1, [r0, #12]
 8003742:	6643      	str	r3, [r0, #100]	@ 0x64
 8003744:	81c2      	strh	r2, [r0, #14]
 8003746:	6183      	str	r3, [r0, #24]
 8003748:	4619      	mov	r1, r3
 800374a:	2208      	movs	r2, #8
 800374c:	305c      	adds	r0, #92	@ 0x5c
 800374e:	f000 f9f9 	bl	8003b44 <memset>
 8003752:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <std+0x58>)
 8003754:	6263      	str	r3, [r4, #36]	@ 0x24
 8003756:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <std+0x5c>)
 8003758:	62a3      	str	r3, [r4, #40]	@ 0x28
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <std+0x60>)
 800375c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <std+0x64>)
 8003760:	6323      	str	r3, [r4, #48]	@ 0x30
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <std+0x68>)
 8003764:	6224      	str	r4, [r4, #32]
 8003766:	429c      	cmp	r4, r3
 8003768:	d006      	beq.n	8003778 <std+0x48>
 800376a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800376e:	4294      	cmp	r4, r2
 8003770:	d002      	beq.n	8003778 <std+0x48>
 8003772:	33d0      	adds	r3, #208	@ 0xd0
 8003774:	429c      	cmp	r4, r3
 8003776:	d105      	bne.n	8003784 <std+0x54>
 8003778:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800377c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003780:	f000 ba5c 	b.w	8003c3c <__retarget_lock_init_recursive>
 8003784:	bd10      	pop	{r4, pc}
 8003786:	bf00      	nop
 8003788:	08003995 	.word	0x08003995
 800378c:	080039b7 	.word	0x080039b7
 8003790:	080039ef 	.word	0x080039ef
 8003794:	08003a13 	.word	0x08003a13
 8003798:	20000330 	.word	0x20000330

0800379c <stdio_exit_handler>:
 800379c:	4a02      	ldr	r2, [pc, #8]	@ (80037a8 <stdio_exit_handler+0xc>)
 800379e:	4903      	ldr	r1, [pc, #12]	@ (80037ac <stdio_exit_handler+0x10>)
 80037a0:	4803      	ldr	r0, [pc, #12]	@ (80037b0 <stdio_exit_handler+0x14>)
 80037a2:	f000 b869 	b.w	8003878 <_fwalk_sglue>
 80037a6:	bf00      	nop
 80037a8:	20000064 	.word	0x20000064
 80037ac:	08005579 	.word	0x08005579
 80037b0:	20000074 	.word	0x20000074

080037b4 <cleanup_stdio>:
 80037b4:	6841      	ldr	r1, [r0, #4]
 80037b6:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <cleanup_stdio+0x34>)
 80037b8:	4299      	cmp	r1, r3
 80037ba:	b510      	push	{r4, lr}
 80037bc:	4604      	mov	r4, r0
 80037be:	d001      	beq.n	80037c4 <cleanup_stdio+0x10>
 80037c0:	f001 feda 	bl	8005578 <_fflush_r>
 80037c4:	68a1      	ldr	r1, [r4, #8]
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <cleanup_stdio+0x38>)
 80037c8:	4299      	cmp	r1, r3
 80037ca:	d002      	beq.n	80037d2 <cleanup_stdio+0x1e>
 80037cc:	4620      	mov	r0, r4
 80037ce:	f001 fed3 	bl	8005578 <_fflush_r>
 80037d2:	68e1      	ldr	r1, [r4, #12]
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <cleanup_stdio+0x3c>)
 80037d6:	4299      	cmp	r1, r3
 80037d8:	d004      	beq.n	80037e4 <cleanup_stdio+0x30>
 80037da:	4620      	mov	r0, r4
 80037dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e0:	f001 beca 	b.w	8005578 <_fflush_r>
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	bf00      	nop
 80037e8:	20000330 	.word	0x20000330
 80037ec:	20000398 	.word	0x20000398
 80037f0:	20000400 	.word	0x20000400

080037f4 <global_stdio_init.part.0>:
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <global_stdio_init.part.0+0x30>)
 80037f8:	4c0b      	ldr	r4, [pc, #44]	@ (8003828 <global_stdio_init.part.0+0x34>)
 80037fa:	4a0c      	ldr	r2, [pc, #48]	@ (800382c <global_stdio_init.part.0+0x38>)
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	4620      	mov	r0, r4
 8003800:	2200      	movs	r2, #0
 8003802:	2104      	movs	r1, #4
 8003804:	f7ff ff94 	bl	8003730 <std>
 8003808:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800380c:	2201      	movs	r2, #1
 800380e:	2109      	movs	r1, #9
 8003810:	f7ff ff8e 	bl	8003730 <std>
 8003814:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003818:	2202      	movs	r2, #2
 800381a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381e:	2112      	movs	r1, #18
 8003820:	f7ff bf86 	b.w	8003730 <std>
 8003824:	20000468 	.word	0x20000468
 8003828:	20000330 	.word	0x20000330
 800382c:	0800379d 	.word	0x0800379d

08003830 <__sfp_lock_acquire>:
 8003830:	4801      	ldr	r0, [pc, #4]	@ (8003838 <__sfp_lock_acquire+0x8>)
 8003832:	f000 ba04 	b.w	8003c3e <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	20000471 	.word	0x20000471

0800383c <__sfp_lock_release>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__sfp_lock_release+0x8>)
 800383e:	f000 b9ff 	b.w	8003c40 <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	20000471 	.word	0x20000471

08003848 <__sinit>:
 8003848:	b510      	push	{r4, lr}
 800384a:	4604      	mov	r4, r0
 800384c:	f7ff fff0 	bl	8003830 <__sfp_lock_acquire>
 8003850:	6a23      	ldr	r3, [r4, #32]
 8003852:	b11b      	cbz	r3, 800385c <__sinit+0x14>
 8003854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003858:	f7ff bff0 	b.w	800383c <__sfp_lock_release>
 800385c:	4b04      	ldr	r3, [pc, #16]	@ (8003870 <__sinit+0x28>)
 800385e:	6223      	str	r3, [r4, #32]
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <__sinit+0x2c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f5      	bne.n	8003854 <__sinit+0xc>
 8003868:	f7ff ffc4 	bl	80037f4 <global_stdio_init.part.0>
 800386c:	e7f2      	b.n	8003854 <__sinit+0xc>
 800386e:	bf00      	nop
 8003870:	080037b5 	.word	0x080037b5
 8003874:	20000468 	.word	0x20000468

08003878 <_fwalk_sglue>:
 8003878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800387c:	4607      	mov	r7, r0
 800387e:	4688      	mov	r8, r1
 8003880:	4614      	mov	r4, r2
 8003882:	2600      	movs	r6, #0
 8003884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003888:	f1b9 0901 	subs.w	r9, r9, #1
 800388c:	d505      	bpl.n	800389a <_fwalk_sglue+0x22>
 800388e:	6824      	ldr	r4, [r4, #0]
 8003890:	2c00      	cmp	r4, #0
 8003892:	d1f7      	bne.n	8003884 <_fwalk_sglue+0xc>
 8003894:	4630      	mov	r0, r6
 8003896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800389a:	89ab      	ldrh	r3, [r5, #12]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d907      	bls.n	80038b0 <_fwalk_sglue+0x38>
 80038a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038a4:	3301      	adds	r3, #1
 80038a6:	d003      	beq.n	80038b0 <_fwalk_sglue+0x38>
 80038a8:	4629      	mov	r1, r5
 80038aa:	4638      	mov	r0, r7
 80038ac:	47c0      	blx	r8
 80038ae:	4306      	orrs	r6, r0
 80038b0:	3568      	adds	r5, #104	@ 0x68
 80038b2:	e7e9      	b.n	8003888 <_fwalk_sglue+0x10>

080038b4 <iprintf>:
 80038b4:	b40f      	push	{r0, r1, r2, r3}
 80038b6:	b507      	push	{r0, r1, r2, lr}
 80038b8:	4906      	ldr	r1, [pc, #24]	@ (80038d4 <iprintf+0x20>)
 80038ba:	ab04      	add	r3, sp, #16
 80038bc:	6808      	ldr	r0, [r1, #0]
 80038be:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c2:	6881      	ldr	r1, [r0, #8]
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	f001 fcbb 	bl	8005240 <_vfiprintf_r>
 80038ca:	b003      	add	sp, #12
 80038cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d0:	b004      	add	sp, #16
 80038d2:	4770      	bx	lr
 80038d4:	20000070 	.word	0x20000070

080038d8 <_puts_r>:
 80038d8:	6a03      	ldr	r3, [r0, #32]
 80038da:	b570      	push	{r4, r5, r6, lr}
 80038dc:	6884      	ldr	r4, [r0, #8]
 80038de:	4605      	mov	r5, r0
 80038e0:	460e      	mov	r6, r1
 80038e2:	b90b      	cbnz	r3, 80038e8 <_puts_r+0x10>
 80038e4:	f7ff ffb0 	bl	8003848 <__sinit>
 80038e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038ea:	07db      	lsls	r3, r3, #31
 80038ec:	d405      	bmi.n	80038fa <_puts_r+0x22>
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	0598      	lsls	r0, r3, #22
 80038f2:	d402      	bmi.n	80038fa <_puts_r+0x22>
 80038f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038f6:	f000 f9a2 	bl	8003c3e <__retarget_lock_acquire_recursive>
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	0719      	lsls	r1, r3, #28
 80038fe:	d502      	bpl.n	8003906 <_puts_r+0x2e>
 8003900:	6923      	ldr	r3, [r4, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d135      	bne.n	8003972 <_puts_r+0x9a>
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f000 f8c5 	bl	8003a98 <__swsetup_r>
 800390e:	b380      	cbz	r0, 8003972 <_puts_r+0x9a>
 8003910:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003916:	07da      	lsls	r2, r3, #31
 8003918:	d405      	bmi.n	8003926 <_puts_r+0x4e>
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	059b      	lsls	r3, r3, #22
 800391e:	d402      	bmi.n	8003926 <_puts_r+0x4e>
 8003920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003922:	f000 f98d 	bl	8003c40 <__retarget_lock_release_recursive>
 8003926:	4628      	mov	r0, r5
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	2b00      	cmp	r3, #0
 800392c:	da04      	bge.n	8003938 <_puts_r+0x60>
 800392e:	69a2      	ldr	r2, [r4, #24]
 8003930:	429a      	cmp	r2, r3
 8003932:	dc17      	bgt.n	8003964 <_puts_r+0x8c>
 8003934:	290a      	cmp	r1, #10
 8003936:	d015      	beq.n	8003964 <_puts_r+0x8c>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	6022      	str	r2, [r4, #0]
 800393e:	7019      	strb	r1, [r3, #0]
 8003940:	68a3      	ldr	r3, [r4, #8]
 8003942:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003946:	3b01      	subs	r3, #1
 8003948:	60a3      	str	r3, [r4, #8]
 800394a:	2900      	cmp	r1, #0
 800394c:	d1ed      	bne.n	800392a <_puts_r+0x52>
 800394e:	2b00      	cmp	r3, #0
 8003950:	da11      	bge.n	8003976 <_puts_r+0x9e>
 8003952:	4622      	mov	r2, r4
 8003954:	210a      	movs	r1, #10
 8003956:	4628      	mov	r0, r5
 8003958:	f000 f85f 	bl	8003a1a <__swbuf_r>
 800395c:	3001      	adds	r0, #1
 800395e:	d0d7      	beq.n	8003910 <_puts_r+0x38>
 8003960:	250a      	movs	r5, #10
 8003962:	e7d7      	b.n	8003914 <_puts_r+0x3c>
 8003964:	4622      	mov	r2, r4
 8003966:	4628      	mov	r0, r5
 8003968:	f000 f857 	bl	8003a1a <__swbuf_r>
 800396c:	3001      	adds	r0, #1
 800396e:	d1e7      	bne.n	8003940 <_puts_r+0x68>
 8003970:	e7ce      	b.n	8003910 <_puts_r+0x38>
 8003972:	3e01      	subs	r6, #1
 8003974:	e7e4      	b.n	8003940 <_puts_r+0x68>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	6022      	str	r2, [r4, #0]
 800397c:	220a      	movs	r2, #10
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e7ee      	b.n	8003960 <_puts_r+0x88>
	...

08003984 <puts>:
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <puts+0xc>)
 8003986:	4601      	mov	r1, r0
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f7ff bfa5 	b.w	80038d8 <_puts_r>
 800398e:	bf00      	nop
 8003990:	20000070 	.word	0x20000070

08003994 <__sread>:
 8003994:	b510      	push	{r4, lr}
 8003996:	460c      	mov	r4, r1
 8003998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800399c:	f000 f900 	bl	8003ba0 <_read_r>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	bfab      	itete	ge
 80039a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039a6:	89a3      	ldrhlt	r3, [r4, #12]
 80039a8:	181b      	addge	r3, r3, r0
 80039aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039ae:	bfac      	ite	ge
 80039b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039b2:	81a3      	strhlt	r3, [r4, #12]
 80039b4:	bd10      	pop	{r4, pc}

080039b6 <__swrite>:
 80039b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ba:	461f      	mov	r7, r3
 80039bc:	898b      	ldrh	r3, [r1, #12]
 80039be:	05db      	lsls	r3, r3, #23
 80039c0:	4605      	mov	r5, r0
 80039c2:	460c      	mov	r4, r1
 80039c4:	4616      	mov	r6, r2
 80039c6:	d505      	bpl.n	80039d4 <__swrite+0x1e>
 80039c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039cc:	2302      	movs	r3, #2
 80039ce:	2200      	movs	r2, #0
 80039d0:	f000 f8d4 	bl	8003b7c <_lseek_r>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039de:	81a3      	strh	r3, [r4, #12]
 80039e0:	4632      	mov	r2, r6
 80039e2:	463b      	mov	r3, r7
 80039e4:	4628      	mov	r0, r5
 80039e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ea:	f000 b8eb 	b.w	8003bc4 <_write_r>

080039ee <__sseek>:
 80039ee:	b510      	push	{r4, lr}
 80039f0:	460c      	mov	r4, r1
 80039f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f6:	f000 f8c1 	bl	8003b7c <_lseek_r>
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	bf15      	itete	ne
 8003a00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a0a:	81a3      	strheq	r3, [r4, #12]
 8003a0c:	bf18      	it	ne
 8003a0e:	81a3      	strhne	r3, [r4, #12]
 8003a10:	bd10      	pop	{r4, pc}

08003a12 <__sclose>:
 8003a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a16:	f000 b8a1 	b.w	8003b5c <_close_r>

08003a1a <__swbuf_r>:
 8003a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1c:	460e      	mov	r6, r1
 8003a1e:	4614      	mov	r4, r2
 8003a20:	4605      	mov	r5, r0
 8003a22:	b118      	cbz	r0, 8003a2c <__swbuf_r+0x12>
 8003a24:	6a03      	ldr	r3, [r0, #32]
 8003a26:	b90b      	cbnz	r3, 8003a2c <__swbuf_r+0x12>
 8003a28:	f7ff ff0e 	bl	8003848 <__sinit>
 8003a2c:	69a3      	ldr	r3, [r4, #24]
 8003a2e:	60a3      	str	r3, [r4, #8]
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	071a      	lsls	r2, r3, #28
 8003a34:	d501      	bpl.n	8003a3a <__swbuf_r+0x20>
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	b943      	cbnz	r3, 8003a4c <__swbuf_r+0x32>
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 f82b 	bl	8003a98 <__swsetup_r>
 8003a42:	b118      	cbz	r0, 8003a4c <__swbuf_r+0x32>
 8003a44:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003a48:	4638      	mov	r0, r7
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	6922      	ldr	r2, [r4, #16]
 8003a50:	1a98      	subs	r0, r3, r2
 8003a52:	6963      	ldr	r3, [r4, #20]
 8003a54:	b2f6      	uxtb	r6, r6
 8003a56:	4283      	cmp	r3, r0
 8003a58:	4637      	mov	r7, r6
 8003a5a:	dc05      	bgt.n	8003a68 <__swbuf_r+0x4e>
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f001 fd8a 	bl	8005578 <_fflush_r>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d1ed      	bne.n	8003a44 <__swbuf_r+0x2a>
 8003a68:	68a3      	ldr	r3, [r4, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	60a3      	str	r3, [r4, #8]
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	6022      	str	r2, [r4, #0]
 8003a74:	701e      	strb	r6, [r3, #0]
 8003a76:	6962      	ldr	r2, [r4, #20]
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d004      	beq.n	8003a88 <__swbuf_r+0x6e>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	07db      	lsls	r3, r3, #31
 8003a82:	d5e1      	bpl.n	8003a48 <__swbuf_r+0x2e>
 8003a84:	2e0a      	cmp	r6, #10
 8003a86:	d1df      	bne.n	8003a48 <__swbuf_r+0x2e>
 8003a88:	4621      	mov	r1, r4
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f001 fd74 	bl	8005578 <_fflush_r>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d0d9      	beq.n	8003a48 <__swbuf_r+0x2e>
 8003a94:	e7d6      	b.n	8003a44 <__swbuf_r+0x2a>
	...

08003a98 <__swsetup_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4b29      	ldr	r3, [pc, #164]	@ (8003b40 <__swsetup_r+0xa8>)
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	b118      	cbz	r0, 8003aac <__swsetup_r+0x14>
 8003aa4:	6a03      	ldr	r3, [r0, #32]
 8003aa6:	b90b      	cbnz	r3, 8003aac <__swsetup_r+0x14>
 8003aa8:	f7ff fece 	bl	8003848 <__sinit>
 8003aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab0:	0719      	lsls	r1, r3, #28
 8003ab2:	d422      	bmi.n	8003afa <__swsetup_r+0x62>
 8003ab4:	06da      	lsls	r2, r3, #27
 8003ab6:	d407      	bmi.n	8003ac8 <__swsetup_r+0x30>
 8003ab8:	2209      	movs	r2, #9
 8003aba:	602a      	str	r2, [r5, #0]
 8003abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac0:	81a3      	strh	r3, [r4, #12]
 8003ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ac6:	e033      	b.n	8003b30 <__swsetup_r+0x98>
 8003ac8:	0758      	lsls	r0, r3, #29
 8003aca:	d512      	bpl.n	8003af2 <__swsetup_r+0x5a>
 8003acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ace:	b141      	cbz	r1, 8003ae2 <__swsetup_r+0x4a>
 8003ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	d002      	beq.n	8003ade <__swsetup_r+0x46>
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f000 ff0d 	bl	80048f8 <_free_r>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ae8:	81a3      	strh	r3, [r4, #12]
 8003aea:	2300      	movs	r3, #0
 8003aec:	6063      	str	r3, [r4, #4]
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f043 0308 	orr.w	r3, r3, #8
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	b94b      	cbnz	r3, 8003b12 <__swsetup_r+0x7a>
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b08:	d003      	beq.n	8003b12 <__swsetup_r+0x7a>
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f001 fd81 	bl	8005614 <__smakebuf_r>
 8003b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b16:	f013 0201 	ands.w	r2, r3, #1
 8003b1a:	d00a      	beq.n	8003b32 <__swsetup_r+0x9a>
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60a2      	str	r2, [r4, #8]
 8003b20:	6962      	ldr	r2, [r4, #20]
 8003b22:	4252      	negs	r2, r2
 8003b24:	61a2      	str	r2, [r4, #24]
 8003b26:	6922      	ldr	r2, [r4, #16]
 8003b28:	b942      	cbnz	r2, 8003b3c <__swsetup_r+0xa4>
 8003b2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b2e:	d1c5      	bne.n	8003abc <__swsetup_r+0x24>
 8003b30:	bd38      	pop	{r3, r4, r5, pc}
 8003b32:	0799      	lsls	r1, r3, #30
 8003b34:	bf58      	it	pl
 8003b36:	6962      	ldrpl	r2, [r4, #20]
 8003b38:	60a2      	str	r2, [r4, #8]
 8003b3a:	e7f4      	b.n	8003b26 <__swsetup_r+0x8e>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e7f7      	b.n	8003b30 <__swsetup_r+0x98>
 8003b40:	20000070 	.word	0x20000070

08003b44 <memset>:
 8003b44:	4402      	add	r2, r0
 8003b46:	4603      	mov	r3, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <_localeconv_r>:
 8003b54:	4800      	ldr	r0, [pc, #0]	@ (8003b58 <_localeconv_r+0x4>)
 8003b56:	4770      	bx	lr
 8003b58:	200001b0 	.word	0x200001b0

08003b5c <_close_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4d06      	ldr	r5, [pc, #24]	@ (8003b78 <_close_r+0x1c>)
 8003b60:	2300      	movs	r3, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	f7fd fcc0 	bl	80014ec <_close>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_close_r+0x1a>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_close_r+0x1a>
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	2000046c 	.word	0x2000046c

08003b7c <_lseek_r>:
 8003b7c:	b538      	push	{r3, r4, r5, lr}
 8003b7e:	4d07      	ldr	r5, [pc, #28]	@ (8003b9c <_lseek_r+0x20>)
 8003b80:	4604      	mov	r4, r0
 8003b82:	4608      	mov	r0, r1
 8003b84:	4611      	mov	r1, r2
 8003b86:	2200      	movs	r2, #0
 8003b88:	602a      	str	r2, [r5, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f7fd fcb8 	bl	8001500 <_lseek>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_lseek_r+0x1e>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_lseek_r+0x1e>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	2000046c 	.word	0x2000046c

08003ba0 <_read_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4d07      	ldr	r5, [pc, #28]	@ (8003bc0 <_read_r+0x20>)
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	4608      	mov	r0, r1
 8003ba8:	4611      	mov	r1, r2
 8003baa:	2200      	movs	r2, #0
 8003bac:	602a      	str	r2, [r5, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7fd fc8c 	bl	80014cc <_read>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <_read_r+0x1e>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	b103      	cbz	r3, 8003bbe <_read_r+0x1e>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	2000046c 	.word	0x2000046c

08003bc4 <_write_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4d07      	ldr	r5, [pc, #28]	@ (8003be4 <_write_r+0x20>)
 8003bc8:	4604      	mov	r4, r0
 8003bca:	4608      	mov	r0, r1
 8003bcc:	4611      	mov	r1, r2
 8003bce:	2200      	movs	r2, #0
 8003bd0:	602a      	str	r2, [r5, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f7fd f9d0 	bl	8000f78 <_write>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	d102      	bne.n	8003be2 <_write_r+0x1e>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	b103      	cbz	r3, 8003be2 <_write_r+0x1e>
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	bd38      	pop	{r3, r4, r5, pc}
 8003be4:	2000046c 	.word	0x2000046c

08003be8 <__errno>:
 8003be8:	4b01      	ldr	r3, [pc, #4]	@ (8003bf0 <__errno+0x8>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000070 	.word	0x20000070

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2600      	movs	r6, #0
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4d0b      	ldr	r5, [pc, #44]	@ (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	@ (8003c38 <__libc_init_array+0x44>)
 8003c08:	f001 fe30 	bl	800586c <_init>
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2600      	movs	r6, #0
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08005c9c 	.word	0x08005c9c
 8003c30:	08005c9c 	.word	0x08005c9c
 8003c34:	08005c9c 	.word	0x08005c9c
 8003c38:	08005ca0 	.word	0x08005ca0

08003c3c <__retarget_lock_init_recursive>:
 8003c3c:	4770      	bx	lr

08003c3e <__retarget_lock_acquire_recursive>:
 8003c3e:	4770      	bx	lr

08003c40 <__retarget_lock_release_recursive>:
 8003c40:	4770      	bx	lr

08003c42 <quorem>:
 8003c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c46:	6903      	ldr	r3, [r0, #16]
 8003c48:	690c      	ldr	r4, [r1, #16]
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	db7e      	blt.n	8003d4e <quorem+0x10c>
 8003c50:	3c01      	subs	r4, #1
 8003c52:	f101 0814 	add.w	r8, r1, #20
 8003c56:	00a3      	lsls	r3, r4, #2
 8003c58:	f100 0514 	add.w	r5, r0, #20
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c74:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c78:	d32e      	bcc.n	8003cd8 <quorem+0x96>
 8003c7a:	f04f 0a00 	mov.w	sl, #0
 8003c7e:	46c4      	mov	ip, r8
 8003c80:	46ae      	mov	lr, r5
 8003c82:	46d3      	mov	fp, sl
 8003c84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c88:	b298      	uxth	r0, r3
 8003c8a:	fb06 a000 	mla	r0, r6, r0, sl
 8003c8e:	0c02      	lsrs	r2, r0, #16
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	fb06 2303 	mla	r3, r6, r3, r2
 8003c96:	f8de 2000 	ldr.w	r2, [lr]
 8003c9a:	b280      	uxth	r0, r0
 8003c9c:	b292      	uxth	r2, r2
 8003c9e:	1a12      	subs	r2, r2, r0
 8003ca0:	445a      	add	r2, fp
 8003ca2:	f8de 0000 	ldr.w	r0, [lr]
 8003ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003cb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003cb4:	b292      	uxth	r2, r2
 8003cb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003cba:	45e1      	cmp	r9, ip
 8003cbc:	f84e 2b04 	str.w	r2, [lr], #4
 8003cc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003cc4:	d2de      	bcs.n	8003c84 <quorem+0x42>
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	58eb      	ldr	r3, [r5, r3]
 8003cca:	b92b      	cbnz	r3, 8003cd8 <quorem+0x96>
 8003ccc:	9b01      	ldr	r3, [sp, #4]
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	429d      	cmp	r5, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	d32f      	bcc.n	8003d36 <quorem+0xf4>
 8003cd6:	613c      	str	r4, [r7, #16]
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f001 f97f 	bl	8004fdc <__mcmp>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	db25      	blt.n	8003d2e <quorem+0xec>
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f858 2b04 	ldr.w	r2, [r8], #4
 8003cea:	f8d1 c000 	ldr.w	ip, [r1]
 8003cee:	fa1f fe82 	uxth.w	lr, r2
 8003cf2:	fa1f f38c 	uxth.w	r3, ip
 8003cf6:	eba3 030e 	sub.w	r3, r3, lr
 8003cfa:	4403      	add	r3, r0
 8003cfc:	0c12      	lsrs	r2, r2, #16
 8003cfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003d02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d0c:	45c1      	cmp	r9, r8
 8003d0e:	f841 3b04 	str.w	r3, [r1], #4
 8003d12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d16:	d2e6      	bcs.n	8003ce6 <quorem+0xa4>
 8003d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d20:	b922      	cbnz	r2, 8003d2c <quorem+0xea>
 8003d22:	3b04      	subs	r3, #4
 8003d24:	429d      	cmp	r5, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	d30b      	bcc.n	8003d42 <quorem+0x100>
 8003d2a:	613c      	str	r4, [r7, #16]
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	4630      	mov	r0, r6
 8003d30:	b003      	add	sp, #12
 8003d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	3b04      	subs	r3, #4
 8003d3a:	2a00      	cmp	r2, #0
 8003d3c:	d1cb      	bne.n	8003cd6 <quorem+0x94>
 8003d3e:	3c01      	subs	r4, #1
 8003d40:	e7c6      	b.n	8003cd0 <quorem+0x8e>
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	3b04      	subs	r3, #4
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	d1ef      	bne.n	8003d2a <quorem+0xe8>
 8003d4a:	3c01      	subs	r4, #1
 8003d4c:	e7ea      	b.n	8003d24 <quorem+0xe2>
 8003d4e:	2000      	movs	r0, #0
 8003d50:	e7ee      	b.n	8003d30 <quorem+0xee>
 8003d52:	0000      	movs	r0, r0
 8003d54:	0000      	movs	r0, r0
	...

08003d58 <_dtoa_r>:
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	69c7      	ldr	r7, [r0, #28]
 8003d5e:	b097      	sub	sp, #92	@ 0x5c
 8003d60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003d64:	ec55 4b10 	vmov	r4, r5, d0
 8003d68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003d6a:	9107      	str	r1, [sp, #28]
 8003d6c:	4681      	mov	r9, r0
 8003d6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003d70:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d72:	b97f      	cbnz	r7, 8003d94 <_dtoa_r+0x3c>
 8003d74:	2010      	movs	r0, #16
 8003d76:	f000 fe09 	bl	800498c <malloc>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f8c9 001c 	str.w	r0, [r9, #28]
 8003d80:	b920      	cbnz	r0, 8003d8c <_dtoa_r+0x34>
 8003d82:	4ba9      	ldr	r3, [pc, #676]	@ (8004028 <_dtoa_r+0x2d0>)
 8003d84:	21ef      	movs	r1, #239	@ 0xef
 8003d86:	48a9      	ldr	r0, [pc, #676]	@ (800402c <_dtoa_r+0x2d4>)
 8003d88:	f001 fcc0 	bl	800570c <__assert_func>
 8003d8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d90:	6007      	str	r7, [r0, #0]
 8003d92:	60c7      	str	r7, [r0, #12]
 8003d94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	b159      	cbz	r1, 8003db4 <_dtoa_r+0x5c>
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	604a      	str	r2, [r1, #4]
 8003da0:	2301      	movs	r3, #1
 8003da2:	4093      	lsls	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
 8003da6:	4648      	mov	r0, r9
 8003da8:	f000 fee6 	bl	8004b78 <_Bfree>
 8003dac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	1e2b      	subs	r3, r5, #0
 8003db6:	bfb9      	ittee	lt
 8003db8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003dbc:	9305      	strlt	r3, [sp, #20]
 8003dbe:	2300      	movge	r3, #0
 8003dc0:	6033      	strge	r3, [r6, #0]
 8003dc2:	9f05      	ldr	r7, [sp, #20]
 8003dc4:	4b9a      	ldr	r3, [pc, #616]	@ (8004030 <_dtoa_r+0x2d8>)
 8003dc6:	bfbc      	itt	lt
 8003dc8:	2201      	movlt	r2, #1
 8003dca:	6032      	strlt	r2, [r6, #0]
 8003dcc:	43bb      	bics	r3, r7
 8003dce:	d112      	bne.n	8003df6 <_dtoa_r+0x9e>
 8003dd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003dd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003ddc:	4323      	orrs	r3, r4
 8003dde:	f000 855a 	beq.w	8004896 <_dtoa_r+0xb3e>
 8003de2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003de4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004044 <_dtoa_r+0x2ec>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 855c 	beq.w	80048a6 <_dtoa_r+0xb4e>
 8003dee:	f10a 0303 	add.w	r3, sl, #3
 8003df2:	f000 bd56 	b.w	80048a2 <_dtoa_r+0xb4a>
 8003df6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	ec51 0b17 	vmov	r0, r1, d7
 8003e00:	2300      	movs	r3, #0
 8003e02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003e06:	f7fc fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e0a:	4680      	mov	r8, r0
 8003e0c:	b158      	cbz	r0, 8003e26 <_dtoa_r+0xce>
 8003e0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003e10:	2301      	movs	r3, #1
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e16:	b113      	cbz	r3, 8003e1e <_dtoa_r+0xc6>
 8003e18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003e1a:	4b86      	ldr	r3, [pc, #536]	@ (8004034 <_dtoa_r+0x2dc>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004048 <_dtoa_r+0x2f0>
 8003e22:	f000 bd40 	b.w	80048a6 <_dtoa_r+0xb4e>
 8003e26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003e2a:	aa14      	add	r2, sp, #80	@ 0x50
 8003e2c:	a915      	add	r1, sp, #84	@ 0x54
 8003e2e:	4648      	mov	r0, r9
 8003e30:	f001 f984 	bl	800513c <__d2b>
 8003e34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003e38:	9002      	str	r0, [sp, #8]
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d078      	beq.n	8003f30 <_dtoa_r+0x1d8>
 8003e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003e40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e58:	4619      	mov	r1, r3
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4b76      	ldr	r3, [pc, #472]	@ (8004038 <_dtoa_r+0x2e0>)
 8003e5e:	f7fc fa1b 	bl	8000298 <__aeabi_dsub>
 8003e62:	a36b      	add	r3, pc, #428	@ (adr r3, 8004010 <_dtoa_r+0x2b8>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f7fc fbce 	bl	8000608 <__aeabi_dmul>
 8003e6c:	a36a      	add	r3, pc, #424	@ (adr r3, 8004018 <_dtoa_r+0x2c0>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc fa13 	bl	800029c <__adddf3>
 8003e76:	4604      	mov	r4, r0
 8003e78:	4630      	mov	r0, r6
 8003e7a:	460d      	mov	r5, r1
 8003e7c:	f7fc fb5a 	bl	8000534 <__aeabi_i2d>
 8003e80:	a367      	add	r3, pc, #412	@ (adr r3, 8004020 <_dtoa_r+0x2c8>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fbbf 	bl	8000608 <__aeabi_dmul>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f7fc fa03 	bl	800029c <__adddf3>
 8003e96:	4604      	mov	r4, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	f7fc fe65 	bl	8000b68 <__aeabi_d2iz>
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	f7fc fe20 	bl	8000aec <__aeabi_dcmplt>
 8003eac:	b140      	cbz	r0, 8003ec0 <_dtoa_r+0x168>
 8003eae:	4638      	mov	r0, r7
 8003eb0:	f7fc fb40 	bl	8000534 <__aeabi_i2d>
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	f7fc fe0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ebc:	b900      	cbnz	r0, 8003ec0 <_dtoa_r+0x168>
 8003ebe:	3f01      	subs	r7, #1
 8003ec0:	2f16      	cmp	r7, #22
 8003ec2:	d852      	bhi.n	8003f6a <_dtoa_r+0x212>
 8003ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800403c <_dtoa_r+0x2e4>)
 8003ec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ed2:	f7fc fe0b 	bl	8000aec <__aeabi_dcmplt>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d049      	beq.n	8003f6e <_dtoa_r+0x216>
 8003eda:	3f01      	subs	r7, #1
 8003edc:	2300      	movs	r3, #0
 8003ede:	9310      	str	r3, [sp, #64]	@ 0x40
 8003ee0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ee2:	1b9b      	subs	r3, r3, r6
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	bf45      	ittet	mi
 8003ee8:	f1c3 0301 	rsbmi	r3, r3, #1
 8003eec:	9300      	strmi	r3, [sp, #0]
 8003eee:	2300      	movpl	r3, #0
 8003ef0:	2300      	movmi	r3, #0
 8003ef2:	9206      	str	r2, [sp, #24]
 8003ef4:	bf54      	ite	pl
 8003ef6:	9300      	strpl	r3, [sp, #0]
 8003ef8:	9306      	strmi	r3, [sp, #24]
 8003efa:	2f00      	cmp	r7, #0
 8003efc:	db39      	blt.n	8003f72 <_dtoa_r+0x21a>
 8003efe:	9b06      	ldr	r3, [sp, #24]
 8003f00:	970d      	str	r7, [sp, #52]	@ 0x34
 8003f02:	443b      	add	r3, r7
 8003f04:	9306      	str	r3, [sp, #24]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9308      	str	r3, [sp, #32]
 8003f0a:	9b07      	ldr	r3, [sp, #28]
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d863      	bhi.n	8003fd8 <_dtoa_r+0x280>
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	bfc4      	itt	gt
 8003f14:	3b04      	subgt	r3, #4
 8003f16:	9307      	strgt	r3, [sp, #28]
 8003f18:	9b07      	ldr	r3, [sp, #28]
 8003f1a:	f1a3 0302 	sub.w	r3, r3, #2
 8003f1e:	bfcc      	ite	gt
 8003f20:	2400      	movgt	r4, #0
 8003f22:	2401      	movle	r4, #1
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d863      	bhi.n	8003ff0 <_dtoa_r+0x298>
 8003f28:	e8df f003 	tbb	[pc, r3]
 8003f2c:	2b375452 	.word	0x2b375452
 8003f30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003f34:	441e      	add	r6, r3
 8003f36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	bfc1      	itttt	gt
 8003f3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f42:	409f      	lslgt	r7, r3
 8003f44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f48:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f4c:	bfd6      	itet	le
 8003f4e:	f1c3 0320 	rsble	r3, r3, #32
 8003f52:	ea47 0003 	orrgt.w	r0, r7, r3
 8003f56:	fa04 f003 	lslle.w	r0, r4, r3
 8003f5a:	f7fc fadb 	bl	8000514 <__aeabi_ui2d>
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f64:	3e01      	subs	r6, #1
 8003f66:	9212      	str	r2, [sp, #72]	@ 0x48
 8003f68:	e776      	b.n	8003e58 <_dtoa_r+0x100>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e7b7      	b.n	8003ede <_dtoa_r+0x186>
 8003f6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8003f70:	e7b6      	b.n	8003ee0 <_dtoa_r+0x188>
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	1bdb      	subs	r3, r3, r7
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	427b      	negs	r3, r7
 8003f7a:	9308      	str	r3, [sp, #32]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8003f80:	e7c3      	b.n	8003f0a <_dtoa_r+0x1b2>
 8003f82:	2301      	movs	r3, #1
 8003f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003f88:	eb07 0b03 	add.w	fp, r7, r3
 8003f8c:	f10b 0301 	add.w	r3, fp, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	9303      	str	r3, [sp, #12]
 8003f94:	bfb8      	it	lt
 8003f96:	2301      	movlt	r3, #1
 8003f98:	e006      	b.n	8003fa8 <_dtoa_r+0x250>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	dd28      	ble.n	8003ff6 <_dtoa_r+0x29e>
 8003fa4:	469b      	mov	fp, r3
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003fac:	2100      	movs	r1, #0
 8003fae:	2204      	movs	r2, #4
 8003fb0:	f102 0514 	add.w	r5, r2, #20
 8003fb4:	429d      	cmp	r5, r3
 8003fb6:	d926      	bls.n	8004006 <_dtoa_r+0x2ae>
 8003fb8:	6041      	str	r1, [r0, #4]
 8003fba:	4648      	mov	r0, r9
 8003fbc:	f000 fd9c 	bl	8004af8 <_Balloc>
 8003fc0:	4682      	mov	sl, r0
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d142      	bne.n	800404c <_dtoa_r+0x2f4>
 8003fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004040 <_dtoa_r+0x2e8>)
 8003fc8:	4602      	mov	r2, r0
 8003fca:	f240 11af 	movw	r1, #431	@ 0x1af
 8003fce:	e6da      	b.n	8003d86 <_dtoa_r+0x2e>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e7e3      	b.n	8003f9c <_dtoa_r+0x244>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e7d5      	b.n	8003f84 <_dtoa_r+0x22c>
 8003fd8:	2401      	movs	r4, #1
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9307      	str	r3, [sp, #28]
 8003fde:	9409      	str	r4, [sp, #36]	@ 0x24
 8003fe0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8cd b00c 	str.w	fp, [sp, #12]
 8003fea:	2312      	movs	r3, #18
 8003fec:	920c      	str	r2, [sp, #48]	@ 0x30
 8003fee:	e7db      	b.n	8003fa8 <_dtoa_r+0x250>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ff4:	e7f4      	b.n	8003fe0 <_dtoa_r+0x288>
 8003ff6:	f04f 0b01 	mov.w	fp, #1
 8003ffa:	f8cd b00c 	str.w	fp, [sp, #12]
 8003ffe:	465b      	mov	r3, fp
 8004000:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004004:	e7d0      	b.n	8003fa8 <_dtoa_r+0x250>
 8004006:	3101      	adds	r1, #1
 8004008:	0052      	lsls	r2, r2, #1
 800400a:	e7d1      	b.n	8003fb0 <_dtoa_r+0x258>
 800400c:	f3af 8000 	nop.w
 8004010:	636f4361 	.word	0x636f4361
 8004014:	3fd287a7 	.word	0x3fd287a7
 8004018:	8b60c8b3 	.word	0x8b60c8b3
 800401c:	3fc68a28 	.word	0x3fc68a28
 8004020:	509f79fb 	.word	0x509f79fb
 8004024:	3fd34413 	.word	0x3fd34413
 8004028:	08005961 	.word	0x08005961
 800402c:	08005978 	.word	0x08005978
 8004030:	7ff00000 	.word	0x7ff00000
 8004034:	08005931 	.word	0x08005931
 8004038:	3ff80000 	.word	0x3ff80000
 800403c:	08005ac8 	.word	0x08005ac8
 8004040:	080059d0 	.word	0x080059d0
 8004044:	0800595d 	.word	0x0800595d
 8004048:	08005930 	.word	0x08005930
 800404c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004050:	6018      	str	r0, [r3, #0]
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	2b0e      	cmp	r3, #14
 8004056:	f200 80a1 	bhi.w	800419c <_dtoa_r+0x444>
 800405a:	2c00      	cmp	r4, #0
 800405c:	f000 809e 	beq.w	800419c <_dtoa_r+0x444>
 8004060:	2f00      	cmp	r7, #0
 8004062:	dd33      	ble.n	80040cc <_dtoa_r+0x374>
 8004064:	4b9c      	ldr	r3, [pc, #624]	@ (80042d8 <_dtoa_r+0x580>)
 8004066:	f007 020f 	and.w	r2, r7, #15
 800406a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800406e:	ed93 7b00 	vldr	d7, [r3]
 8004072:	05f8      	lsls	r0, r7, #23
 8004074:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004078:	ea4f 1427 	mov.w	r4, r7, asr #4
 800407c:	d516      	bpl.n	80040ac <_dtoa_r+0x354>
 800407e:	4b97      	ldr	r3, [pc, #604]	@ (80042dc <_dtoa_r+0x584>)
 8004080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004088:	f7fc fbe8 	bl	800085c <__aeabi_ddiv>
 800408c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004090:	f004 040f 	and.w	r4, r4, #15
 8004094:	2603      	movs	r6, #3
 8004096:	4d91      	ldr	r5, [pc, #580]	@ (80042dc <_dtoa_r+0x584>)
 8004098:	b954      	cbnz	r4, 80040b0 <_dtoa_r+0x358>
 800409a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800409e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040a2:	f7fc fbdb 	bl	800085c <__aeabi_ddiv>
 80040a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040aa:	e028      	b.n	80040fe <_dtoa_r+0x3a6>
 80040ac:	2602      	movs	r6, #2
 80040ae:	e7f2      	b.n	8004096 <_dtoa_r+0x33e>
 80040b0:	07e1      	lsls	r1, r4, #31
 80040b2:	d508      	bpl.n	80040c6 <_dtoa_r+0x36e>
 80040b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80040b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040bc:	f7fc faa4 	bl	8000608 <__aeabi_dmul>
 80040c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80040c4:	3601      	adds	r6, #1
 80040c6:	1064      	asrs	r4, r4, #1
 80040c8:	3508      	adds	r5, #8
 80040ca:	e7e5      	b.n	8004098 <_dtoa_r+0x340>
 80040cc:	f000 80af 	beq.w	800422e <_dtoa_r+0x4d6>
 80040d0:	427c      	negs	r4, r7
 80040d2:	4b81      	ldr	r3, [pc, #516]	@ (80042d8 <_dtoa_r+0x580>)
 80040d4:	4d81      	ldr	r5, [pc, #516]	@ (80042dc <_dtoa_r+0x584>)
 80040d6:	f004 020f 	and.w	r2, r4, #15
 80040da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80040e6:	f7fc fa8f 	bl	8000608 <__aeabi_dmul>
 80040ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040ee:	1124      	asrs	r4, r4, #4
 80040f0:	2300      	movs	r3, #0
 80040f2:	2602      	movs	r6, #2
 80040f4:	2c00      	cmp	r4, #0
 80040f6:	f040 808f 	bne.w	8004218 <_dtoa_r+0x4c0>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1d3      	bne.n	80040a6 <_dtoa_r+0x34e>
 80040fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004100:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8094 	beq.w	8004232 <_dtoa_r+0x4da>
 800410a:	4b75      	ldr	r3, [pc, #468]	@ (80042e0 <_dtoa_r+0x588>)
 800410c:	2200      	movs	r2, #0
 800410e:	4620      	mov	r0, r4
 8004110:	4629      	mov	r1, r5
 8004112:	f7fc fceb 	bl	8000aec <__aeabi_dcmplt>
 8004116:	2800      	cmp	r0, #0
 8004118:	f000 808b 	beq.w	8004232 <_dtoa_r+0x4da>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8087 	beq.w	8004232 <_dtoa_r+0x4da>
 8004124:	f1bb 0f00 	cmp.w	fp, #0
 8004128:	dd34      	ble.n	8004194 <_dtoa_r+0x43c>
 800412a:	4620      	mov	r0, r4
 800412c:	4b6d      	ldr	r3, [pc, #436]	@ (80042e4 <_dtoa_r+0x58c>)
 800412e:	2200      	movs	r2, #0
 8004130:	4629      	mov	r1, r5
 8004132:	f7fc fa69 	bl	8000608 <__aeabi_dmul>
 8004136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800413a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800413e:	3601      	adds	r6, #1
 8004140:	465c      	mov	r4, fp
 8004142:	4630      	mov	r0, r6
 8004144:	f7fc f9f6 	bl	8000534 <__aeabi_i2d>
 8004148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800414c:	f7fc fa5c 	bl	8000608 <__aeabi_dmul>
 8004150:	4b65      	ldr	r3, [pc, #404]	@ (80042e8 <_dtoa_r+0x590>)
 8004152:	2200      	movs	r2, #0
 8004154:	f7fc f8a2 	bl	800029c <__adddf3>
 8004158:	4605      	mov	r5, r0
 800415a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800415e:	2c00      	cmp	r4, #0
 8004160:	d16a      	bne.n	8004238 <_dtoa_r+0x4e0>
 8004162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004166:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <_dtoa_r+0x594>)
 8004168:	2200      	movs	r2, #0
 800416a:	f7fc f895 	bl	8000298 <__aeabi_dsub>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004176:	462a      	mov	r2, r5
 8004178:	4633      	mov	r3, r6
 800417a:	f7fc fcd5 	bl	8000b28 <__aeabi_dcmpgt>
 800417e:	2800      	cmp	r0, #0
 8004180:	f040 8298 	bne.w	80046b4 <_dtoa_r+0x95c>
 8004184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004188:	462a      	mov	r2, r5
 800418a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800418e:	f7fc fcad 	bl	8000aec <__aeabi_dcmplt>
 8004192:	bb38      	cbnz	r0, 80041e4 <_dtoa_r+0x48c>
 8004194:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004198:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800419c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f2c0 8157 	blt.w	8004452 <_dtoa_r+0x6fa>
 80041a4:	2f0e      	cmp	r7, #14
 80041a6:	f300 8154 	bgt.w	8004452 <_dtoa_r+0x6fa>
 80041aa:	4b4b      	ldr	r3, [pc, #300]	@ (80042d8 <_dtoa_r+0x580>)
 80041ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041b0:	ed93 7b00 	vldr	d7, [r3]
 80041b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	ed8d 7b00 	vstr	d7, [sp]
 80041bc:	f280 80e5 	bge.w	800438a <_dtoa_r+0x632>
 80041c0:	9b03      	ldr	r3, [sp, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f300 80e1 	bgt.w	800438a <_dtoa_r+0x632>
 80041c8:	d10c      	bne.n	80041e4 <_dtoa_r+0x48c>
 80041ca:	4b48      	ldr	r3, [pc, #288]	@ (80042ec <_dtoa_r+0x594>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	ec51 0b17 	vmov	r0, r1, d7
 80041d2:	f7fc fa19 	bl	8000608 <__aeabi_dmul>
 80041d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041da:	f7fc fc9b 	bl	8000b14 <__aeabi_dcmpge>
 80041de:	2800      	cmp	r0, #0
 80041e0:	f000 8266 	beq.w	80046b0 <_dtoa_r+0x958>
 80041e4:	2400      	movs	r4, #0
 80041e6:	4625      	mov	r5, r4
 80041e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80041ea:	4656      	mov	r6, sl
 80041ec:	ea6f 0803 	mvn.w	r8, r3
 80041f0:	2700      	movs	r7, #0
 80041f2:	4621      	mov	r1, r4
 80041f4:	4648      	mov	r0, r9
 80041f6:	f000 fcbf 	bl	8004b78 <_Bfree>
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	f000 80bd 	beq.w	800437a <_dtoa_r+0x622>
 8004200:	b12f      	cbz	r7, 800420e <_dtoa_r+0x4b6>
 8004202:	42af      	cmp	r7, r5
 8004204:	d003      	beq.n	800420e <_dtoa_r+0x4b6>
 8004206:	4639      	mov	r1, r7
 8004208:	4648      	mov	r0, r9
 800420a:	f000 fcb5 	bl	8004b78 <_Bfree>
 800420e:	4629      	mov	r1, r5
 8004210:	4648      	mov	r0, r9
 8004212:	f000 fcb1 	bl	8004b78 <_Bfree>
 8004216:	e0b0      	b.n	800437a <_dtoa_r+0x622>
 8004218:	07e2      	lsls	r2, r4, #31
 800421a:	d505      	bpl.n	8004228 <_dtoa_r+0x4d0>
 800421c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004220:	f7fc f9f2 	bl	8000608 <__aeabi_dmul>
 8004224:	3601      	adds	r6, #1
 8004226:	2301      	movs	r3, #1
 8004228:	1064      	asrs	r4, r4, #1
 800422a:	3508      	adds	r5, #8
 800422c:	e762      	b.n	80040f4 <_dtoa_r+0x39c>
 800422e:	2602      	movs	r6, #2
 8004230:	e765      	b.n	80040fe <_dtoa_r+0x3a6>
 8004232:	9c03      	ldr	r4, [sp, #12]
 8004234:	46b8      	mov	r8, r7
 8004236:	e784      	b.n	8004142 <_dtoa_r+0x3ea>
 8004238:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <_dtoa_r+0x580>)
 800423a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800423c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004240:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004244:	4454      	add	r4, sl
 8004246:	2900      	cmp	r1, #0
 8004248:	d054      	beq.n	80042f4 <_dtoa_r+0x59c>
 800424a:	4929      	ldr	r1, [pc, #164]	@ (80042f0 <_dtoa_r+0x598>)
 800424c:	2000      	movs	r0, #0
 800424e:	f7fc fb05 	bl	800085c <__aeabi_ddiv>
 8004252:	4633      	mov	r3, r6
 8004254:	462a      	mov	r2, r5
 8004256:	f7fc f81f 	bl	8000298 <__aeabi_dsub>
 800425a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800425e:	4656      	mov	r6, sl
 8004260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004264:	f7fc fc80 	bl	8000b68 <__aeabi_d2iz>
 8004268:	4605      	mov	r5, r0
 800426a:	f7fc f963 	bl	8000534 <__aeabi_i2d>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004276:	f7fc f80f 	bl	8000298 <__aeabi_dsub>
 800427a:	3530      	adds	r5, #48	@ 0x30
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004284:	f806 5b01 	strb.w	r5, [r6], #1
 8004288:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800428c:	f7fc fc2e 	bl	8000aec <__aeabi_dcmplt>
 8004290:	2800      	cmp	r0, #0
 8004292:	d172      	bne.n	800437a <_dtoa_r+0x622>
 8004294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004298:	4911      	ldr	r1, [pc, #68]	@ (80042e0 <_dtoa_r+0x588>)
 800429a:	2000      	movs	r0, #0
 800429c:	f7fb fffc 	bl	8000298 <__aeabi_dsub>
 80042a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80042a4:	f7fc fc22 	bl	8000aec <__aeabi_dcmplt>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	f040 80b4 	bne.w	8004416 <_dtoa_r+0x6be>
 80042ae:	42a6      	cmp	r6, r4
 80042b0:	f43f af70 	beq.w	8004194 <_dtoa_r+0x43c>
 80042b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <_dtoa_r+0x58c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	f7fc f9a4 	bl	8000608 <__aeabi_dmul>
 80042c0:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <_dtoa_r+0x58c>)
 80042c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80042c6:	2200      	movs	r2, #0
 80042c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042cc:	f7fc f99c 	bl	8000608 <__aeabi_dmul>
 80042d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042d4:	e7c4      	b.n	8004260 <_dtoa_r+0x508>
 80042d6:	bf00      	nop
 80042d8:	08005ac8 	.word	0x08005ac8
 80042dc:	08005aa0 	.word	0x08005aa0
 80042e0:	3ff00000 	.word	0x3ff00000
 80042e4:	40240000 	.word	0x40240000
 80042e8:	401c0000 	.word	0x401c0000
 80042ec:	40140000 	.word	0x40140000
 80042f0:	3fe00000 	.word	0x3fe00000
 80042f4:	4631      	mov	r1, r6
 80042f6:	4628      	mov	r0, r5
 80042f8:	f7fc f986 	bl	8000608 <__aeabi_dmul>
 80042fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004300:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004302:	4656      	mov	r6, sl
 8004304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004308:	f7fc fc2e 	bl	8000b68 <__aeabi_d2iz>
 800430c:	4605      	mov	r5, r0
 800430e:	f7fc f911 	bl	8000534 <__aeabi_i2d>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800431a:	f7fb ffbd 	bl	8000298 <__aeabi_dsub>
 800431e:	3530      	adds	r5, #48	@ 0x30
 8004320:	f806 5b01 	strb.w	r5, [r6], #1
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	42a6      	cmp	r6, r4
 800432a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	d124      	bne.n	800437e <_dtoa_r+0x626>
 8004334:	4baf      	ldr	r3, [pc, #700]	@ (80045f4 <_dtoa_r+0x89c>)
 8004336:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800433a:	f7fb ffaf 	bl	800029c <__adddf3>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004346:	f7fc fbef 	bl	8000b28 <__aeabi_dcmpgt>
 800434a:	2800      	cmp	r0, #0
 800434c:	d163      	bne.n	8004416 <_dtoa_r+0x6be>
 800434e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004352:	49a8      	ldr	r1, [pc, #672]	@ (80045f4 <_dtoa_r+0x89c>)
 8004354:	2000      	movs	r0, #0
 8004356:	f7fb ff9f 	bl	8000298 <__aeabi_dsub>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004362:	f7fc fbc3 	bl	8000aec <__aeabi_dcmplt>
 8004366:	2800      	cmp	r0, #0
 8004368:	f43f af14 	beq.w	8004194 <_dtoa_r+0x43c>
 800436c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800436e:	1e73      	subs	r3, r6, #1
 8004370:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004372:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004376:	2b30      	cmp	r3, #48	@ 0x30
 8004378:	d0f8      	beq.n	800436c <_dtoa_r+0x614>
 800437a:	4647      	mov	r7, r8
 800437c:	e03b      	b.n	80043f6 <_dtoa_r+0x69e>
 800437e:	4b9e      	ldr	r3, [pc, #632]	@ (80045f8 <_dtoa_r+0x8a0>)
 8004380:	f7fc f942 	bl	8000608 <__aeabi_dmul>
 8004384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004388:	e7bc      	b.n	8004304 <_dtoa_r+0x5ac>
 800438a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800438e:	4656      	mov	r6, sl
 8004390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004394:	4620      	mov	r0, r4
 8004396:	4629      	mov	r1, r5
 8004398:	f7fc fa60 	bl	800085c <__aeabi_ddiv>
 800439c:	f7fc fbe4 	bl	8000b68 <__aeabi_d2iz>
 80043a0:	4680      	mov	r8, r0
 80043a2:	f7fc f8c7 	bl	8000534 <__aeabi_i2d>
 80043a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043aa:	f7fc f92d 	bl	8000608 <__aeabi_dmul>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4620      	mov	r0, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80043ba:	f7fb ff6d 	bl	8000298 <__aeabi_dsub>
 80043be:	f806 4b01 	strb.w	r4, [r6], #1
 80043c2:	9d03      	ldr	r5, [sp, #12]
 80043c4:	eba6 040a 	sub.w	r4, r6, sl
 80043c8:	42a5      	cmp	r5, r4
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	d133      	bne.n	8004438 <_dtoa_r+0x6e0>
 80043d0:	f7fb ff64 	bl	800029c <__adddf3>
 80043d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043d8:	4604      	mov	r4, r0
 80043da:	460d      	mov	r5, r1
 80043dc:	f7fc fba4 	bl	8000b28 <__aeabi_dcmpgt>
 80043e0:	b9c0      	cbnz	r0, 8004414 <_dtoa_r+0x6bc>
 80043e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f7fc fb75 	bl	8000ad8 <__aeabi_dcmpeq>
 80043ee:	b110      	cbz	r0, 80043f6 <_dtoa_r+0x69e>
 80043f0:	f018 0f01 	tst.w	r8, #1
 80043f4:	d10e      	bne.n	8004414 <_dtoa_r+0x6bc>
 80043f6:	9902      	ldr	r1, [sp, #8]
 80043f8:	4648      	mov	r0, r9
 80043fa:	f000 fbbd 	bl	8004b78 <_Bfree>
 80043fe:	2300      	movs	r3, #0
 8004400:	7033      	strb	r3, [r6, #0]
 8004402:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004404:	3701      	adds	r7, #1
 8004406:	601f      	str	r7, [r3, #0]
 8004408:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 824b 	beq.w	80048a6 <_dtoa_r+0xb4e>
 8004410:	601e      	str	r6, [r3, #0]
 8004412:	e248      	b.n	80048a6 <_dtoa_r+0xb4e>
 8004414:	46b8      	mov	r8, r7
 8004416:	4633      	mov	r3, r6
 8004418:	461e      	mov	r6, r3
 800441a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800441e:	2a39      	cmp	r2, #57	@ 0x39
 8004420:	d106      	bne.n	8004430 <_dtoa_r+0x6d8>
 8004422:	459a      	cmp	sl, r3
 8004424:	d1f8      	bne.n	8004418 <_dtoa_r+0x6c0>
 8004426:	2230      	movs	r2, #48	@ 0x30
 8004428:	f108 0801 	add.w	r8, r8, #1
 800442c:	f88a 2000 	strb.w	r2, [sl]
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	3201      	adds	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e7a0      	b.n	800437a <_dtoa_r+0x622>
 8004438:	4b6f      	ldr	r3, [pc, #444]	@ (80045f8 <_dtoa_r+0x8a0>)
 800443a:	2200      	movs	r2, #0
 800443c:	f7fc f8e4 	bl	8000608 <__aeabi_dmul>
 8004440:	2200      	movs	r2, #0
 8004442:	2300      	movs	r3, #0
 8004444:	4604      	mov	r4, r0
 8004446:	460d      	mov	r5, r1
 8004448:	f7fc fb46 	bl	8000ad8 <__aeabi_dcmpeq>
 800444c:	2800      	cmp	r0, #0
 800444e:	d09f      	beq.n	8004390 <_dtoa_r+0x638>
 8004450:	e7d1      	b.n	80043f6 <_dtoa_r+0x69e>
 8004452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004454:	2a00      	cmp	r2, #0
 8004456:	f000 80ea 	beq.w	800462e <_dtoa_r+0x8d6>
 800445a:	9a07      	ldr	r2, [sp, #28]
 800445c:	2a01      	cmp	r2, #1
 800445e:	f300 80cd 	bgt.w	80045fc <_dtoa_r+0x8a4>
 8004462:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004464:	2a00      	cmp	r2, #0
 8004466:	f000 80c1 	beq.w	80045ec <_dtoa_r+0x894>
 800446a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800446e:	9c08      	ldr	r4, [sp, #32]
 8004470:	9e00      	ldr	r6, [sp, #0]
 8004472:	9a00      	ldr	r2, [sp, #0]
 8004474:	441a      	add	r2, r3
 8004476:	9200      	str	r2, [sp, #0]
 8004478:	9a06      	ldr	r2, [sp, #24]
 800447a:	2101      	movs	r1, #1
 800447c:	441a      	add	r2, r3
 800447e:	4648      	mov	r0, r9
 8004480:	9206      	str	r2, [sp, #24]
 8004482:	f000 fc2d 	bl	8004ce0 <__i2b>
 8004486:	4605      	mov	r5, r0
 8004488:	b166      	cbz	r6, 80044a4 <_dtoa_r+0x74c>
 800448a:	9b06      	ldr	r3, [sp, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	dd09      	ble.n	80044a4 <_dtoa_r+0x74c>
 8004490:	42b3      	cmp	r3, r6
 8004492:	9a00      	ldr	r2, [sp, #0]
 8004494:	bfa8      	it	ge
 8004496:	4633      	movge	r3, r6
 8004498:	1ad2      	subs	r2, r2, r3
 800449a:	9200      	str	r2, [sp, #0]
 800449c:	9a06      	ldr	r2, [sp, #24]
 800449e:	1af6      	subs	r6, r6, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	9306      	str	r3, [sp, #24]
 80044a4:	9b08      	ldr	r3, [sp, #32]
 80044a6:	b30b      	cbz	r3, 80044ec <_dtoa_r+0x794>
 80044a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80c6 	beq.w	800463c <_dtoa_r+0x8e4>
 80044b0:	2c00      	cmp	r4, #0
 80044b2:	f000 80c0 	beq.w	8004636 <_dtoa_r+0x8de>
 80044b6:	4629      	mov	r1, r5
 80044b8:	4622      	mov	r2, r4
 80044ba:	4648      	mov	r0, r9
 80044bc:	f000 fcc8 	bl	8004e50 <__pow5mult>
 80044c0:	9a02      	ldr	r2, [sp, #8]
 80044c2:	4601      	mov	r1, r0
 80044c4:	4605      	mov	r5, r0
 80044c6:	4648      	mov	r0, r9
 80044c8:	f000 fc20 	bl	8004d0c <__multiply>
 80044cc:	9902      	ldr	r1, [sp, #8]
 80044ce:	4680      	mov	r8, r0
 80044d0:	4648      	mov	r0, r9
 80044d2:	f000 fb51 	bl	8004b78 <_Bfree>
 80044d6:	9b08      	ldr	r3, [sp, #32]
 80044d8:	1b1b      	subs	r3, r3, r4
 80044da:	9308      	str	r3, [sp, #32]
 80044dc:	f000 80b1 	beq.w	8004642 <_dtoa_r+0x8ea>
 80044e0:	9a08      	ldr	r2, [sp, #32]
 80044e2:	4641      	mov	r1, r8
 80044e4:	4648      	mov	r0, r9
 80044e6:	f000 fcb3 	bl	8004e50 <__pow5mult>
 80044ea:	9002      	str	r0, [sp, #8]
 80044ec:	2101      	movs	r1, #1
 80044ee:	4648      	mov	r0, r9
 80044f0:	f000 fbf6 	bl	8004ce0 <__i2b>
 80044f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044f6:	4604      	mov	r4, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 81d8 	beq.w	80048ae <_dtoa_r+0xb56>
 80044fe:	461a      	mov	r2, r3
 8004500:	4601      	mov	r1, r0
 8004502:	4648      	mov	r0, r9
 8004504:	f000 fca4 	bl	8004e50 <__pow5mult>
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	2b01      	cmp	r3, #1
 800450c:	4604      	mov	r4, r0
 800450e:	f300 809f 	bgt.w	8004650 <_dtoa_r+0x8f8>
 8004512:	9b04      	ldr	r3, [sp, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f040 8097 	bne.w	8004648 <_dtoa_r+0x8f0>
 800451a:	9b05      	ldr	r3, [sp, #20]
 800451c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004520:	2b00      	cmp	r3, #0
 8004522:	f040 8093 	bne.w	800464c <_dtoa_r+0x8f4>
 8004526:	9b05      	ldr	r3, [sp, #20]
 8004528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800452c:	0d1b      	lsrs	r3, r3, #20
 800452e:	051b      	lsls	r3, r3, #20
 8004530:	b133      	cbz	r3, 8004540 <_dtoa_r+0x7e8>
 8004532:	9b00      	ldr	r3, [sp, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	9b06      	ldr	r3, [sp, #24]
 800453a:	3301      	adds	r3, #1
 800453c:	9306      	str	r3, [sp, #24]
 800453e:	2301      	movs	r3, #1
 8004540:	9308      	str	r3, [sp, #32]
 8004542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 81b8 	beq.w	80048ba <_dtoa_r+0xb62>
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004550:	6918      	ldr	r0, [r3, #16]
 8004552:	f000 fb79 	bl	8004c48 <__hi0bits>
 8004556:	f1c0 0020 	rsb	r0, r0, #32
 800455a:	9b06      	ldr	r3, [sp, #24]
 800455c:	4418      	add	r0, r3
 800455e:	f010 001f 	ands.w	r0, r0, #31
 8004562:	f000 8082 	beq.w	800466a <_dtoa_r+0x912>
 8004566:	f1c0 0320 	rsb	r3, r0, #32
 800456a:	2b04      	cmp	r3, #4
 800456c:	dd73      	ble.n	8004656 <_dtoa_r+0x8fe>
 800456e:	9b00      	ldr	r3, [sp, #0]
 8004570:	f1c0 001c 	rsb	r0, r0, #28
 8004574:	4403      	add	r3, r0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	9b06      	ldr	r3, [sp, #24]
 800457a:	4403      	add	r3, r0
 800457c:	4406      	add	r6, r0
 800457e:	9306      	str	r3, [sp, #24]
 8004580:	9b00      	ldr	r3, [sp, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	dd05      	ble.n	8004592 <_dtoa_r+0x83a>
 8004586:	9902      	ldr	r1, [sp, #8]
 8004588:	461a      	mov	r2, r3
 800458a:	4648      	mov	r0, r9
 800458c:	f000 fcba 	bl	8004f04 <__lshift>
 8004590:	9002      	str	r0, [sp, #8]
 8004592:	9b06      	ldr	r3, [sp, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	dd05      	ble.n	80045a4 <_dtoa_r+0x84c>
 8004598:	4621      	mov	r1, r4
 800459a:	461a      	mov	r2, r3
 800459c:	4648      	mov	r0, r9
 800459e:	f000 fcb1 	bl	8004f04 <__lshift>
 80045a2:	4604      	mov	r4, r0
 80045a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d061      	beq.n	800466e <_dtoa_r+0x916>
 80045aa:	9802      	ldr	r0, [sp, #8]
 80045ac:	4621      	mov	r1, r4
 80045ae:	f000 fd15 	bl	8004fdc <__mcmp>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	da5b      	bge.n	800466e <_dtoa_r+0x916>
 80045b6:	2300      	movs	r3, #0
 80045b8:	9902      	ldr	r1, [sp, #8]
 80045ba:	220a      	movs	r2, #10
 80045bc:	4648      	mov	r0, r9
 80045be:	f000 fafd 	bl	8004bbc <__multadd>
 80045c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045c4:	9002      	str	r0, [sp, #8]
 80045c6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8177 	beq.w	80048be <_dtoa_r+0xb66>
 80045d0:	4629      	mov	r1, r5
 80045d2:	2300      	movs	r3, #0
 80045d4:	220a      	movs	r2, #10
 80045d6:	4648      	mov	r0, r9
 80045d8:	f000 faf0 	bl	8004bbc <__multadd>
 80045dc:	f1bb 0f00 	cmp.w	fp, #0
 80045e0:	4605      	mov	r5, r0
 80045e2:	dc6f      	bgt.n	80046c4 <_dtoa_r+0x96c>
 80045e4:	9b07      	ldr	r3, [sp, #28]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	dc49      	bgt.n	800467e <_dtoa_r+0x926>
 80045ea:	e06b      	b.n	80046c4 <_dtoa_r+0x96c>
 80045ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80045f2:	e73c      	b.n	800446e <_dtoa_r+0x716>
 80045f4:	3fe00000 	.word	0x3fe00000
 80045f8:	40240000 	.word	0x40240000
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	1e5c      	subs	r4, r3, #1
 8004600:	9b08      	ldr	r3, [sp, #32]
 8004602:	42a3      	cmp	r3, r4
 8004604:	db09      	blt.n	800461a <_dtoa_r+0x8c2>
 8004606:	1b1c      	subs	r4, r3, r4
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f6bf af30 	bge.w	8004470 <_dtoa_r+0x718>
 8004610:	9b00      	ldr	r3, [sp, #0]
 8004612:	9a03      	ldr	r2, [sp, #12]
 8004614:	1a9e      	subs	r6, r3, r2
 8004616:	2300      	movs	r3, #0
 8004618:	e72b      	b.n	8004472 <_dtoa_r+0x71a>
 800461a:	9b08      	ldr	r3, [sp, #32]
 800461c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800461e:	9408      	str	r4, [sp, #32]
 8004620:	1ae3      	subs	r3, r4, r3
 8004622:	441a      	add	r2, r3
 8004624:	9e00      	ldr	r6, [sp, #0]
 8004626:	9b03      	ldr	r3, [sp, #12]
 8004628:	920d      	str	r2, [sp, #52]	@ 0x34
 800462a:	2400      	movs	r4, #0
 800462c:	e721      	b.n	8004472 <_dtoa_r+0x71a>
 800462e:	9c08      	ldr	r4, [sp, #32]
 8004630:	9e00      	ldr	r6, [sp, #0]
 8004632:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004634:	e728      	b.n	8004488 <_dtoa_r+0x730>
 8004636:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800463a:	e751      	b.n	80044e0 <_dtoa_r+0x788>
 800463c:	9a08      	ldr	r2, [sp, #32]
 800463e:	9902      	ldr	r1, [sp, #8]
 8004640:	e750      	b.n	80044e4 <_dtoa_r+0x78c>
 8004642:	f8cd 8008 	str.w	r8, [sp, #8]
 8004646:	e751      	b.n	80044ec <_dtoa_r+0x794>
 8004648:	2300      	movs	r3, #0
 800464a:	e779      	b.n	8004540 <_dtoa_r+0x7e8>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	e777      	b.n	8004540 <_dtoa_r+0x7e8>
 8004650:	2300      	movs	r3, #0
 8004652:	9308      	str	r3, [sp, #32]
 8004654:	e779      	b.n	800454a <_dtoa_r+0x7f2>
 8004656:	d093      	beq.n	8004580 <_dtoa_r+0x828>
 8004658:	9a00      	ldr	r2, [sp, #0]
 800465a:	331c      	adds	r3, #28
 800465c:	441a      	add	r2, r3
 800465e:	9200      	str	r2, [sp, #0]
 8004660:	9a06      	ldr	r2, [sp, #24]
 8004662:	441a      	add	r2, r3
 8004664:	441e      	add	r6, r3
 8004666:	9206      	str	r2, [sp, #24]
 8004668:	e78a      	b.n	8004580 <_dtoa_r+0x828>
 800466a:	4603      	mov	r3, r0
 800466c:	e7f4      	b.n	8004658 <_dtoa_r+0x900>
 800466e:	9b03      	ldr	r3, [sp, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	46b8      	mov	r8, r7
 8004674:	dc20      	bgt.n	80046b8 <_dtoa_r+0x960>
 8004676:	469b      	mov	fp, r3
 8004678:	9b07      	ldr	r3, [sp, #28]
 800467a:	2b02      	cmp	r3, #2
 800467c:	dd1e      	ble.n	80046bc <_dtoa_r+0x964>
 800467e:	f1bb 0f00 	cmp.w	fp, #0
 8004682:	f47f adb1 	bne.w	80041e8 <_dtoa_r+0x490>
 8004686:	4621      	mov	r1, r4
 8004688:	465b      	mov	r3, fp
 800468a:	2205      	movs	r2, #5
 800468c:	4648      	mov	r0, r9
 800468e:	f000 fa95 	bl	8004bbc <__multadd>
 8004692:	4601      	mov	r1, r0
 8004694:	4604      	mov	r4, r0
 8004696:	9802      	ldr	r0, [sp, #8]
 8004698:	f000 fca0 	bl	8004fdc <__mcmp>
 800469c:	2800      	cmp	r0, #0
 800469e:	f77f ada3 	ble.w	80041e8 <_dtoa_r+0x490>
 80046a2:	4656      	mov	r6, sl
 80046a4:	2331      	movs	r3, #49	@ 0x31
 80046a6:	f806 3b01 	strb.w	r3, [r6], #1
 80046aa:	f108 0801 	add.w	r8, r8, #1
 80046ae:	e59f      	b.n	80041f0 <_dtoa_r+0x498>
 80046b0:	9c03      	ldr	r4, [sp, #12]
 80046b2:	46b8      	mov	r8, r7
 80046b4:	4625      	mov	r5, r4
 80046b6:	e7f4      	b.n	80046a2 <_dtoa_r+0x94a>
 80046b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80046bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8101 	beq.w	80048c6 <_dtoa_r+0xb6e>
 80046c4:	2e00      	cmp	r6, #0
 80046c6:	dd05      	ble.n	80046d4 <_dtoa_r+0x97c>
 80046c8:	4629      	mov	r1, r5
 80046ca:	4632      	mov	r2, r6
 80046cc:	4648      	mov	r0, r9
 80046ce:	f000 fc19 	bl	8004f04 <__lshift>
 80046d2:	4605      	mov	r5, r0
 80046d4:	9b08      	ldr	r3, [sp, #32]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d05c      	beq.n	8004794 <_dtoa_r+0xa3c>
 80046da:	6869      	ldr	r1, [r5, #4]
 80046dc:	4648      	mov	r0, r9
 80046de:	f000 fa0b 	bl	8004af8 <_Balloc>
 80046e2:	4606      	mov	r6, r0
 80046e4:	b928      	cbnz	r0, 80046f2 <_dtoa_r+0x99a>
 80046e6:	4b82      	ldr	r3, [pc, #520]	@ (80048f0 <_dtoa_r+0xb98>)
 80046e8:	4602      	mov	r2, r0
 80046ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80046ee:	f7ff bb4a 	b.w	8003d86 <_dtoa_r+0x2e>
 80046f2:	692a      	ldr	r2, [r5, #16]
 80046f4:	3202      	adds	r2, #2
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	f105 010c 	add.w	r1, r5, #12
 80046fc:	300c      	adds	r0, #12
 80046fe:	f000 fff7 	bl	80056f0 <memcpy>
 8004702:	2201      	movs	r2, #1
 8004704:	4631      	mov	r1, r6
 8004706:	4648      	mov	r0, r9
 8004708:	f000 fbfc 	bl	8004f04 <__lshift>
 800470c:	f10a 0301 	add.w	r3, sl, #1
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	eb0a 030b 	add.w	r3, sl, fp
 8004716:	9308      	str	r3, [sp, #32]
 8004718:	9b04      	ldr	r3, [sp, #16]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	462f      	mov	r7, r5
 8004720:	9306      	str	r3, [sp, #24]
 8004722:	4605      	mov	r5, r0
 8004724:	9b00      	ldr	r3, [sp, #0]
 8004726:	9802      	ldr	r0, [sp, #8]
 8004728:	4621      	mov	r1, r4
 800472a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800472e:	f7ff fa88 	bl	8003c42 <quorem>
 8004732:	4603      	mov	r3, r0
 8004734:	3330      	adds	r3, #48	@ 0x30
 8004736:	9003      	str	r0, [sp, #12]
 8004738:	4639      	mov	r1, r7
 800473a:	9802      	ldr	r0, [sp, #8]
 800473c:	9309      	str	r3, [sp, #36]	@ 0x24
 800473e:	f000 fc4d 	bl	8004fdc <__mcmp>
 8004742:	462a      	mov	r2, r5
 8004744:	9004      	str	r0, [sp, #16]
 8004746:	4621      	mov	r1, r4
 8004748:	4648      	mov	r0, r9
 800474a:	f000 fc63 	bl	8005014 <__mdiff>
 800474e:	68c2      	ldr	r2, [r0, #12]
 8004750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004752:	4606      	mov	r6, r0
 8004754:	bb02      	cbnz	r2, 8004798 <_dtoa_r+0xa40>
 8004756:	4601      	mov	r1, r0
 8004758:	9802      	ldr	r0, [sp, #8]
 800475a:	f000 fc3f 	bl	8004fdc <__mcmp>
 800475e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004760:	4602      	mov	r2, r0
 8004762:	4631      	mov	r1, r6
 8004764:	4648      	mov	r0, r9
 8004766:	920c      	str	r2, [sp, #48]	@ 0x30
 8004768:	9309      	str	r3, [sp, #36]	@ 0x24
 800476a:	f000 fa05 	bl	8004b78 <_Bfree>
 800476e:	9b07      	ldr	r3, [sp, #28]
 8004770:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004772:	9e00      	ldr	r6, [sp, #0]
 8004774:	ea42 0103 	orr.w	r1, r2, r3
 8004778:	9b06      	ldr	r3, [sp, #24]
 800477a:	4319      	orrs	r1, r3
 800477c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800477e:	d10d      	bne.n	800479c <_dtoa_r+0xa44>
 8004780:	2b39      	cmp	r3, #57	@ 0x39
 8004782:	d027      	beq.n	80047d4 <_dtoa_r+0xa7c>
 8004784:	9a04      	ldr	r2, [sp, #16]
 8004786:	2a00      	cmp	r2, #0
 8004788:	dd01      	ble.n	800478e <_dtoa_r+0xa36>
 800478a:	9b03      	ldr	r3, [sp, #12]
 800478c:	3331      	adds	r3, #49	@ 0x31
 800478e:	f88b 3000 	strb.w	r3, [fp]
 8004792:	e52e      	b.n	80041f2 <_dtoa_r+0x49a>
 8004794:	4628      	mov	r0, r5
 8004796:	e7b9      	b.n	800470c <_dtoa_r+0x9b4>
 8004798:	2201      	movs	r2, #1
 800479a:	e7e2      	b.n	8004762 <_dtoa_r+0xa0a>
 800479c:	9904      	ldr	r1, [sp, #16]
 800479e:	2900      	cmp	r1, #0
 80047a0:	db04      	blt.n	80047ac <_dtoa_r+0xa54>
 80047a2:	9807      	ldr	r0, [sp, #28]
 80047a4:	4301      	orrs	r1, r0
 80047a6:	9806      	ldr	r0, [sp, #24]
 80047a8:	4301      	orrs	r1, r0
 80047aa:	d120      	bne.n	80047ee <_dtoa_r+0xa96>
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	ddee      	ble.n	800478e <_dtoa_r+0xa36>
 80047b0:	9902      	ldr	r1, [sp, #8]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	4648      	mov	r0, r9
 80047b8:	f000 fba4 	bl	8004f04 <__lshift>
 80047bc:	4621      	mov	r1, r4
 80047be:	9002      	str	r0, [sp, #8]
 80047c0:	f000 fc0c 	bl	8004fdc <__mcmp>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	9b00      	ldr	r3, [sp, #0]
 80047c8:	dc02      	bgt.n	80047d0 <_dtoa_r+0xa78>
 80047ca:	d1e0      	bne.n	800478e <_dtoa_r+0xa36>
 80047cc:	07da      	lsls	r2, r3, #31
 80047ce:	d5de      	bpl.n	800478e <_dtoa_r+0xa36>
 80047d0:	2b39      	cmp	r3, #57	@ 0x39
 80047d2:	d1da      	bne.n	800478a <_dtoa_r+0xa32>
 80047d4:	2339      	movs	r3, #57	@ 0x39
 80047d6:	f88b 3000 	strb.w	r3, [fp]
 80047da:	4633      	mov	r3, r6
 80047dc:	461e      	mov	r6, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80047e4:	2a39      	cmp	r2, #57	@ 0x39
 80047e6:	d04e      	beq.n	8004886 <_dtoa_r+0xb2e>
 80047e8:	3201      	adds	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e501      	b.n	80041f2 <_dtoa_r+0x49a>
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	dd03      	ble.n	80047fa <_dtoa_r+0xaa2>
 80047f2:	2b39      	cmp	r3, #57	@ 0x39
 80047f4:	d0ee      	beq.n	80047d4 <_dtoa_r+0xa7c>
 80047f6:	3301      	adds	r3, #1
 80047f8:	e7c9      	b.n	800478e <_dtoa_r+0xa36>
 80047fa:	9a00      	ldr	r2, [sp, #0]
 80047fc:	9908      	ldr	r1, [sp, #32]
 80047fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004802:	428a      	cmp	r2, r1
 8004804:	d028      	beq.n	8004858 <_dtoa_r+0xb00>
 8004806:	9902      	ldr	r1, [sp, #8]
 8004808:	2300      	movs	r3, #0
 800480a:	220a      	movs	r2, #10
 800480c:	4648      	mov	r0, r9
 800480e:	f000 f9d5 	bl	8004bbc <__multadd>
 8004812:	42af      	cmp	r7, r5
 8004814:	9002      	str	r0, [sp, #8]
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	f04f 020a 	mov.w	r2, #10
 800481e:	4639      	mov	r1, r7
 8004820:	4648      	mov	r0, r9
 8004822:	d107      	bne.n	8004834 <_dtoa_r+0xadc>
 8004824:	f000 f9ca 	bl	8004bbc <__multadd>
 8004828:	4607      	mov	r7, r0
 800482a:	4605      	mov	r5, r0
 800482c:	9b00      	ldr	r3, [sp, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	e777      	b.n	8004724 <_dtoa_r+0x9cc>
 8004834:	f000 f9c2 	bl	8004bbc <__multadd>
 8004838:	4629      	mov	r1, r5
 800483a:	4607      	mov	r7, r0
 800483c:	2300      	movs	r3, #0
 800483e:	220a      	movs	r2, #10
 8004840:	4648      	mov	r0, r9
 8004842:	f000 f9bb 	bl	8004bbc <__multadd>
 8004846:	4605      	mov	r5, r0
 8004848:	e7f0      	b.n	800482c <_dtoa_r+0xad4>
 800484a:	f1bb 0f00 	cmp.w	fp, #0
 800484e:	bfcc      	ite	gt
 8004850:	465e      	movgt	r6, fp
 8004852:	2601      	movle	r6, #1
 8004854:	4456      	add	r6, sl
 8004856:	2700      	movs	r7, #0
 8004858:	9902      	ldr	r1, [sp, #8]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	4648      	mov	r0, r9
 8004860:	f000 fb50 	bl	8004f04 <__lshift>
 8004864:	4621      	mov	r1, r4
 8004866:	9002      	str	r0, [sp, #8]
 8004868:	f000 fbb8 	bl	8004fdc <__mcmp>
 800486c:	2800      	cmp	r0, #0
 800486e:	dcb4      	bgt.n	80047da <_dtoa_r+0xa82>
 8004870:	d102      	bne.n	8004878 <_dtoa_r+0xb20>
 8004872:	9b00      	ldr	r3, [sp, #0]
 8004874:	07db      	lsls	r3, r3, #31
 8004876:	d4b0      	bmi.n	80047da <_dtoa_r+0xa82>
 8004878:	4633      	mov	r3, r6
 800487a:	461e      	mov	r6, r3
 800487c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004880:	2a30      	cmp	r2, #48	@ 0x30
 8004882:	d0fa      	beq.n	800487a <_dtoa_r+0xb22>
 8004884:	e4b5      	b.n	80041f2 <_dtoa_r+0x49a>
 8004886:	459a      	cmp	sl, r3
 8004888:	d1a8      	bne.n	80047dc <_dtoa_r+0xa84>
 800488a:	2331      	movs	r3, #49	@ 0x31
 800488c:	f108 0801 	add.w	r8, r8, #1
 8004890:	f88a 3000 	strb.w	r3, [sl]
 8004894:	e4ad      	b.n	80041f2 <_dtoa_r+0x49a>
 8004896:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004898:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80048f4 <_dtoa_r+0xb9c>
 800489c:	b11b      	cbz	r3, 80048a6 <_dtoa_r+0xb4e>
 800489e:	f10a 0308 	add.w	r3, sl, #8
 80048a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4650      	mov	r0, sl
 80048a8:	b017      	add	sp, #92	@ 0x5c
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ae:	9b07      	ldr	r3, [sp, #28]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	f77f ae2e 	ble.w	8004512 <_dtoa_r+0x7ba>
 80048b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048b8:	9308      	str	r3, [sp, #32]
 80048ba:	2001      	movs	r0, #1
 80048bc:	e64d      	b.n	800455a <_dtoa_r+0x802>
 80048be:	f1bb 0f00 	cmp.w	fp, #0
 80048c2:	f77f aed9 	ble.w	8004678 <_dtoa_r+0x920>
 80048c6:	4656      	mov	r6, sl
 80048c8:	9802      	ldr	r0, [sp, #8]
 80048ca:	4621      	mov	r1, r4
 80048cc:	f7ff f9b9 	bl	8003c42 <quorem>
 80048d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80048d4:	f806 3b01 	strb.w	r3, [r6], #1
 80048d8:	eba6 020a 	sub.w	r2, r6, sl
 80048dc:	4593      	cmp	fp, r2
 80048de:	ddb4      	ble.n	800484a <_dtoa_r+0xaf2>
 80048e0:	9902      	ldr	r1, [sp, #8]
 80048e2:	2300      	movs	r3, #0
 80048e4:	220a      	movs	r2, #10
 80048e6:	4648      	mov	r0, r9
 80048e8:	f000 f968 	bl	8004bbc <__multadd>
 80048ec:	9002      	str	r0, [sp, #8]
 80048ee:	e7eb      	b.n	80048c8 <_dtoa_r+0xb70>
 80048f0:	080059d0 	.word	0x080059d0
 80048f4:	08005954 	.word	0x08005954

080048f8 <_free_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4605      	mov	r5, r0
 80048fc:	2900      	cmp	r1, #0
 80048fe:	d041      	beq.n	8004984 <_free_r+0x8c>
 8004900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004904:	1f0c      	subs	r4, r1, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfb8      	it	lt
 800490a:	18e4      	addlt	r4, r4, r3
 800490c:	f000 f8e8 	bl	8004ae0 <__malloc_lock>
 8004910:	4a1d      	ldr	r2, [pc, #116]	@ (8004988 <_free_r+0x90>)
 8004912:	6813      	ldr	r3, [r2, #0]
 8004914:	b933      	cbnz	r3, 8004924 <_free_r+0x2c>
 8004916:	6063      	str	r3, [r4, #4]
 8004918:	6014      	str	r4, [r2, #0]
 800491a:	4628      	mov	r0, r5
 800491c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004920:	f000 b8e4 	b.w	8004aec <__malloc_unlock>
 8004924:	42a3      	cmp	r3, r4
 8004926:	d908      	bls.n	800493a <_free_r+0x42>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	1821      	adds	r1, r4, r0
 800492c:	428b      	cmp	r3, r1
 800492e:	bf01      	itttt	eq
 8004930:	6819      	ldreq	r1, [r3, #0]
 8004932:	685b      	ldreq	r3, [r3, #4]
 8004934:	1809      	addeq	r1, r1, r0
 8004936:	6021      	streq	r1, [r4, #0]
 8004938:	e7ed      	b.n	8004916 <_free_r+0x1e>
 800493a:	461a      	mov	r2, r3
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	b10b      	cbz	r3, 8004944 <_free_r+0x4c>
 8004940:	42a3      	cmp	r3, r4
 8004942:	d9fa      	bls.n	800493a <_free_r+0x42>
 8004944:	6811      	ldr	r1, [r2, #0]
 8004946:	1850      	adds	r0, r2, r1
 8004948:	42a0      	cmp	r0, r4
 800494a:	d10b      	bne.n	8004964 <_free_r+0x6c>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	4401      	add	r1, r0
 8004950:	1850      	adds	r0, r2, r1
 8004952:	4283      	cmp	r3, r0
 8004954:	6011      	str	r1, [r2, #0]
 8004956:	d1e0      	bne.n	800491a <_free_r+0x22>
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	6053      	str	r3, [r2, #4]
 800495e:	4408      	add	r0, r1
 8004960:	6010      	str	r0, [r2, #0]
 8004962:	e7da      	b.n	800491a <_free_r+0x22>
 8004964:	d902      	bls.n	800496c <_free_r+0x74>
 8004966:	230c      	movs	r3, #12
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	e7d6      	b.n	800491a <_free_r+0x22>
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	1821      	adds	r1, r4, r0
 8004970:	428b      	cmp	r3, r1
 8004972:	bf04      	itt	eq
 8004974:	6819      	ldreq	r1, [r3, #0]
 8004976:	685b      	ldreq	r3, [r3, #4]
 8004978:	6063      	str	r3, [r4, #4]
 800497a:	bf04      	itt	eq
 800497c:	1809      	addeq	r1, r1, r0
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	6054      	str	r4, [r2, #4]
 8004982:	e7ca      	b.n	800491a <_free_r+0x22>
 8004984:	bd38      	pop	{r3, r4, r5, pc}
 8004986:	bf00      	nop
 8004988:	20000478 	.word	0x20000478

0800498c <malloc>:
 800498c:	4b02      	ldr	r3, [pc, #8]	@ (8004998 <malloc+0xc>)
 800498e:	4601      	mov	r1, r0
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	f000 b825 	b.w	80049e0 <_malloc_r>
 8004996:	bf00      	nop
 8004998:	20000070 	.word	0x20000070

0800499c <sbrk_aligned>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4e0f      	ldr	r6, [pc, #60]	@ (80049dc <sbrk_aligned+0x40>)
 80049a0:	460c      	mov	r4, r1
 80049a2:	6831      	ldr	r1, [r6, #0]
 80049a4:	4605      	mov	r5, r0
 80049a6:	b911      	cbnz	r1, 80049ae <sbrk_aligned+0x12>
 80049a8:	f000 fe92 	bl	80056d0 <_sbrk_r>
 80049ac:	6030      	str	r0, [r6, #0]
 80049ae:	4621      	mov	r1, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 fe8d 	bl	80056d0 <_sbrk_r>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	d103      	bne.n	80049c2 <sbrk_aligned+0x26>
 80049ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049be:	4620      	mov	r0, r4
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
 80049c2:	1cc4      	adds	r4, r0, #3
 80049c4:	f024 0403 	bic.w	r4, r4, #3
 80049c8:	42a0      	cmp	r0, r4
 80049ca:	d0f8      	beq.n	80049be <sbrk_aligned+0x22>
 80049cc:	1a21      	subs	r1, r4, r0
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 fe7e 	bl	80056d0 <_sbrk_r>
 80049d4:	3001      	adds	r0, #1
 80049d6:	d1f2      	bne.n	80049be <sbrk_aligned+0x22>
 80049d8:	e7ef      	b.n	80049ba <sbrk_aligned+0x1e>
 80049da:	bf00      	nop
 80049dc:	20000474 	.word	0x20000474

080049e0 <_malloc_r>:
 80049e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e4:	1ccd      	adds	r5, r1, #3
 80049e6:	f025 0503 	bic.w	r5, r5, #3
 80049ea:	3508      	adds	r5, #8
 80049ec:	2d0c      	cmp	r5, #12
 80049ee:	bf38      	it	cc
 80049f0:	250c      	movcc	r5, #12
 80049f2:	2d00      	cmp	r5, #0
 80049f4:	4606      	mov	r6, r0
 80049f6:	db01      	blt.n	80049fc <_malloc_r+0x1c>
 80049f8:	42a9      	cmp	r1, r5
 80049fa:	d904      	bls.n	8004a06 <_malloc_r+0x26>
 80049fc:	230c      	movs	r3, #12
 80049fe:	6033      	str	r3, [r6, #0]
 8004a00:	2000      	movs	r0, #0
 8004a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004adc <_malloc_r+0xfc>
 8004a0a:	f000 f869 	bl	8004ae0 <__malloc_lock>
 8004a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a12:	461c      	mov	r4, r3
 8004a14:	bb44      	cbnz	r4, 8004a68 <_malloc_r+0x88>
 8004a16:	4629      	mov	r1, r5
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f7ff ffbf 	bl	800499c <sbrk_aligned>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	4604      	mov	r4, r0
 8004a22:	d158      	bne.n	8004ad6 <_malloc_r+0xf6>
 8004a24:	f8d8 4000 	ldr.w	r4, [r8]
 8004a28:	4627      	mov	r7, r4
 8004a2a:	2f00      	cmp	r7, #0
 8004a2c:	d143      	bne.n	8004ab6 <_malloc_r+0xd6>
 8004a2e:	2c00      	cmp	r4, #0
 8004a30:	d04b      	beq.n	8004aca <_malloc_r+0xea>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	4639      	mov	r1, r7
 8004a36:	4630      	mov	r0, r6
 8004a38:	eb04 0903 	add.w	r9, r4, r3
 8004a3c:	f000 fe48 	bl	80056d0 <_sbrk_r>
 8004a40:	4581      	cmp	r9, r0
 8004a42:	d142      	bne.n	8004aca <_malloc_r+0xea>
 8004a44:	6821      	ldr	r1, [r4, #0]
 8004a46:	1a6d      	subs	r5, r5, r1
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7ff ffa6 	bl	800499c <sbrk_aligned>
 8004a50:	3001      	adds	r0, #1
 8004a52:	d03a      	beq.n	8004aca <_malloc_r+0xea>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	442b      	add	r3, r5
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	bb62      	cbnz	r2, 8004abc <_malloc_r+0xdc>
 8004a62:	f8c8 7000 	str.w	r7, [r8]
 8004a66:	e00f      	b.n	8004a88 <_malloc_r+0xa8>
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	1b52      	subs	r2, r2, r5
 8004a6c:	d420      	bmi.n	8004ab0 <_malloc_r+0xd0>
 8004a6e:	2a0b      	cmp	r2, #11
 8004a70:	d917      	bls.n	8004aa2 <_malloc_r+0xc2>
 8004a72:	1961      	adds	r1, r4, r5
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	6025      	str	r5, [r4, #0]
 8004a78:	bf18      	it	ne
 8004a7a:	6059      	strne	r1, [r3, #4]
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	bf08      	it	eq
 8004a80:	f8c8 1000 	streq.w	r1, [r8]
 8004a84:	5162      	str	r2, [r4, r5]
 8004a86:	604b      	str	r3, [r1, #4]
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f000 f82f 	bl	8004aec <__malloc_unlock>
 8004a8e:	f104 000b 	add.w	r0, r4, #11
 8004a92:	1d23      	adds	r3, r4, #4
 8004a94:	f020 0007 	bic.w	r0, r0, #7
 8004a98:	1ac2      	subs	r2, r0, r3
 8004a9a:	bf1c      	itt	ne
 8004a9c:	1a1b      	subne	r3, r3, r0
 8004a9e:	50a3      	strne	r3, [r4, r2]
 8004aa0:	e7af      	b.n	8004a02 <_malloc_r+0x22>
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	bf0c      	ite	eq
 8004aa8:	f8c8 2000 	streq.w	r2, [r8]
 8004aac:	605a      	strne	r2, [r3, #4]
 8004aae:	e7eb      	b.n	8004a88 <_malloc_r+0xa8>
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	6864      	ldr	r4, [r4, #4]
 8004ab4:	e7ae      	b.n	8004a14 <_malloc_r+0x34>
 8004ab6:	463c      	mov	r4, r7
 8004ab8:	687f      	ldr	r7, [r7, #4]
 8004aba:	e7b6      	b.n	8004a2a <_malloc_r+0x4a>
 8004abc:	461a      	mov	r2, r3
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	d1fb      	bne.n	8004abc <_malloc_r+0xdc>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6053      	str	r3, [r2, #4]
 8004ac8:	e7de      	b.n	8004a88 <_malloc_r+0xa8>
 8004aca:	230c      	movs	r3, #12
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 f80c 	bl	8004aec <__malloc_unlock>
 8004ad4:	e794      	b.n	8004a00 <_malloc_r+0x20>
 8004ad6:	6005      	str	r5, [r0, #0]
 8004ad8:	e7d6      	b.n	8004a88 <_malloc_r+0xa8>
 8004ada:	bf00      	nop
 8004adc:	20000478 	.word	0x20000478

08004ae0 <__malloc_lock>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	@ (8004ae8 <__malloc_lock+0x8>)
 8004ae2:	f7ff b8ac 	b.w	8003c3e <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	20000470 	.word	0x20000470

08004aec <__malloc_unlock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	@ (8004af4 <__malloc_unlock+0x8>)
 8004aee:	f7ff b8a7 	b.w	8003c40 <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	20000470 	.word	0x20000470

08004af8 <_Balloc>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	69c6      	ldr	r6, [r0, #28]
 8004afc:	4604      	mov	r4, r0
 8004afe:	460d      	mov	r5, r1
 8004b00:	b976      	cbnz	r6, 8004b20 <_Balloc+0x28>
 8004b02:	2010      	movs	r0, #16
 8004b04:	f7ff ff42 	bl	800498c <malloc>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	61e0      	str	r0, [r4, #28]
 8004b0c:	b920      	cbnz	r0, 8004b18 <_Balloc+0x20>
 8004b0e:	4b18      	ldr	r3, [pc, #96]	@ (8004b70 <_Balloc+0x78>)
 8004b10:	4818      	ldr	r0, [pc, #96]	@ (8004b74 <_Balloc+0x7c>)
 8004b12:	216b      	movs	r1, #107	@ 0x6b
 8004b14:	f000 fdfa 	bl	800570c <__assert_func>
 8004b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b1c:	6006      	str	r6, [r0, #0]
 8004b1e:	60c6      	str	r6, [r0, #12]
 8004b20:	69e6      	ldr	r6, [r4, #28]
 8004b22:	68f3      	ldr	r3, [r6, #12]
 8004b24:	b183      	cbz	r3, 8004b48 <_Balloc+0x50>
 8004b26:	69e3      	ldr	r3, [r4, #28]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b2e:	b9b8      	cbnz	r0, 8004b60 <_Balloc+0x68>
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f605 	lsl.w	r6, r1, r5
 8004b36:	1d72      	adds	r2, r6, #5
 8004b38:	0092      	lsls	r2, r2, #2
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 fe04 	bl	8005748 <_calloc_r>
 8004b40:	b160      	cbz	r0, 8004b5c <_Balloc+0x64>
 8004b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b46:	e00e      	b.n	8004b66 <_Balloc+0x6e>
 8004b48:	2221      	movs	r2, #33	@ 0x21
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f000 fdfb 	bl	8005748 <_calloc_r>
 8004b52:	69e3      	ldr	r3, [r4, #28]
 8004b54:	60f0      	str	r0, [r6, #12]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e4      	bne.n	8004b26 <_Balloc+0x2e>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	6802      	ldr	r2, [r0, #0]
 8004b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b66:	2300      	movs	r3, #0
 8004b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b6c:	e7f7      	b.n	8004b5e <_Balloc+0x66>
 8004b6e:	bf00      	nop
 8004b70:	08005961 	.word	0x08005961
 8004b74:	080059e1 	.word	0x080059e1

08004b78 <_Bfree>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	69c6      	ldr	r6, [r0, #28]
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	b976      	cbnz	r6, 8004ba0 <_Bfree+0x28>
 8004b82:	2010      	movs	r0, #16
 8004b84:	f7ff ff02 	bl	800498c <malloc>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	61e8      	str	r0, [r5, #28]
 8004b8c:	b920      	cbnz	r0, 8004b98 <_Bfree+0x20>
 8004b8e:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <_Bfree+0x3c>)
 8004b90:	4809      	ldr	r0, [pc, #36]	@ (8004bb8 <_Bfree+0x40>)
 8004b92:	218f      	movs	r1, #143	@ 0x8f
 8004b94:	f000 fdba 	bl	800570c <__assert_func>
 8004b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b9c:	6006      	str	r6, [r0, #0]
 8004b9e:	60c6      	str	r6, [r0, #12]
 8004ba0:	b13c      	cbz	r4, 8004bb2 <_Bfree+0x3a>
 8004ba2:	69eb      	ldr	r3, [r5, #28]
 8004ba4:	6862      	ldr	r2, [r4, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bac:	6021      	str	r1, [r4, #0]
 8004bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	08005961 	.word	0x08005961
 8004bb8:	080059e1 	.word	0x080059e1

08004bbc <__multadd>:
 8004bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc0:	690d      	ldr	r5, [r1, #16]
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	461e      	mov	r6, r3
 8004bc8:	f101 0c14 	add.w	ip, r1, #20
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f8dc 3000 	ldr.w	r3, [ip]
 8004bd2:	b299      	uxth	r1, r3
 8004bd4:	fb02 6101 	mla	r1, r2, r1, r6
 8004bd8:	0c1e      	lsrs	r6, r3, #16
 8004bda:	0c0b      	lsrs	r3, r1, #16
 8004bdc:	fb02 3306 	mla	r3, r2, r6, r3
 8004be0:	b289      	uxth	r1, r1
 8004be2:	3001      	adds	r0, #1
 8004be4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004be8:	4285      	cmp	r5, r0
 8004bea:	f84c 1b04 	str.w	r1, [ip], #4
 8004bee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004bf2:	dcec      	bgt.n	8004bce <__multadd+0x12>
 8004bf4:	b30e      	cbz	r6, 8004c3a <__multadd+0x7e>
 8004bf6:	68a3      	ldr	r3, [r4, #8]
 8004bf8:	42ab      	cmp	r3, r5
 8004bfa:	dc19      	bgt.n	8004c30 <__multadd+0x74>
 8004bfc:	6861      	ldr	r1, [r4, #4]
 8004bfe:	4638      	mov	r0, r7
 8004c00:	3101      	adds	r1, #1
 8004c02:	f7ff ff79 	bl	8004af8 <_Balloc>
 8004c06:	4680      	mov	r8, r0
 8004c08:	b928      	cbnz	r0, 8004c16 <__multadd+0x5a>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c40 <__multadd+0x84>)
 8004c0e:	480d      	ldr	r0, [pc, #52]	@ (8004c44 <__multadd+0x88>)
 8004c10:	21ba      	movs	r1, #186	@ 0xba
 8004c12:	f000 fd7b 	bl	800570c <__assert_func>
 8004c16:	6922      	ldr	r2, [r4, #16]
 8004c18:	3202      	adds	r2, #2
 8004c1a:	f104 010c 	add.w	r1, r4, #12
 8004c1e:	0092      	lsls	r2, r2, #2
 8004c20:	300c      	adds	r0, #12
 8004c22:	f000 fd65 	bl	80056f0 <memcpy>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f7ff ffa5 	bl	8004b78 <_Bfree>
 8004c2e:	4644      	mov	r4, r8
 8004c30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c34:	3501      	adds	r5, #1
 8004c36:	615e      	str	r6, [r3, #20]
 8004c38:	6125      	str	r5, [r4, #16]
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c40:	080059d0 	.word	0x080059d0
 8004c44:	080059e1 	.word	0x080059e1

08004c48 <__hi0bits>:
 8004c48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	bf36      	itet	cc
 8004c50:	0403      	lslcc	r3, r0, #16
 8004c52:	2000      	movcs	r0, #0
 8004c54:	2010      	movcc	r0, #16
 8004c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c5a:	bf3c      	itt	cc
 8004c5c:	021b      	lslcc	r3, r3, #8
 8004c5e:	3008      	addcc	r0, #8
 8004c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c64:	bf3c      	itt	cc
 8004c66:	011b      	lslcc	r3, r3, #4
 8004c68:	3004      	addcc	r0, #4
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6e:	bf3c      	itt	cc
 8004c70:	009b      	lslcc	r3, r3, #2
 8004c72:	3002      	addcc	r0, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	db05      	blt.n	8004c84 <__hi0bits+0x3c>
 8004c78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c7c:	f100 0001 	add.w	r0, r0, #1
 8004c80:	bf08      	it	eq
 8004c82:	2020      	moveq	r0, #32
 8004c84:	4770      	bx	lr

08004c86 <__lo0bits>:
 8004c86:	6803      	ldr	r3, [r0, #0]
 8004c88:	4602      	mov	r2, r0
 8004c8a:	f013 0007 	ands.w	r0, r3, #7
 8004c8e:	d00b      	beq.n	8004ca8 <__lo0bits+0x22>
 8004c90:	07d9      	lsls	r1, r3, #31
 8004c92:	d421      	bmi.n	8004cd8 <__lo0bits+0x52>
 8004c94:	0798      	lsls	r0, r3, #30
 8004c96:	bf49      	itett	mi
 8004c98:	085b      	lsrmi	r3, r3, #1
 8004c9a:	089b      	lsrpl	r3, r3, #2
 8004c9c:	2001      	movmi	r0, #1
 8004c9e:	6013      	strmi	r3, [r2, #0]
 8004ca0:	bf5c      	itt	pl
 8004ca2:	6013      	strpl	r3, [r2, #0]
 8004ca4:	2002      	movpl	r0, #2
 8004ca6:	4770      	bx	lr
 8004ca8:	b299      	uxth	r1, r3
 8004caa:	b909      	cbnz	r1, 8004cb0 <__lo0bits+0x2a>
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	2010      	movs	r0, #16
 8004cb0:	b2d9      	uxtb	r1, r3
 8004cb2:	b909      	cbnz	r1, 8004cb8 <__lo0bits+0x32>
 8004cb4:	3008      	adds	r0, #8
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	0719      	lsls	r1, r3, #28
 8004cba:	bf04      	itt	eq
 8004cbc:	091b      	lsreq	r3, r3, #4
 8004cbe:	3004      	addeq	r0, #4
 8004cc0:	0799      	lsls	r1, r3, #30
 8004cc2:	bf04      	itt	eq
 8004cc4:	089b      	lsreq	r3, r3, #2
 8004cc6:	3002      	addeq	r0, #2
 8004cc8:	07d9      	lsls	r1, r3, #31
 8004cca:	d403      	bmi.n	8004cd4 <__lo0bits+0x4e>
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	f100 0001 	add.w	r0, r0, #1
 8004cd2:	d003      	beq.n	8004cdc <__lo0bits+0x56>
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4770      	bx	lr
 8004cd8:	2000      	movs	r0, #0
 8004cda:	4770      	bx	lr
 8004cdc:	2020      	movs	r0, #32
 8004cde:	4770      	bx	lr

08004ce0 <__i2b>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	f7ff ff07 	bl	8004af8 <_Balloc>
 8004cea:	4602      	mov	r2, r0
 8004cec:	b928      	cbnz	r0, 8004cfa <__i2b+0x1a>
 8004cee:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <__i2b+0x24>)
 8004cf0:	4805      	ldr	r0, [pc, #20]	@ (8004d08 <__i2b+0x28>)
 8004cf2:	f240 1145 	movw	r1, #325	@ 0x145
 8004cf6:	f000 fd09 	bl	800570c <__assert_func>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	6144      	str	r4, [r0, #20]
 8004cfe:	6103      	str	r3, [r0, #16]
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	080059d0 	.word	0x080059d0
 8004d08:	080059e1 	.word	0x080059e1

08004d0c <__multiply>:
 8004d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	4617      	mov	r7, r2
 8004d12:	690a      	ldr	r2, [r1, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	bfa8      	it	ge
 8004d1a:	463b      	movge	r3, r7
 8004d1c:	4689      	mov	r9, r1
 8004d1e:	bfa4      	itt	ge
 8004d20:	460f      	movge	r7, r1
 8004d22:	4699      	movge	r9, r3
 8004d24:	693d      	ldr	r5, [r7, #16]
 8004d26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	eb05 060a 	add.w	r6, r5, sl
 8004d32:	42b3      	cmp	r3, r6
 8004d34:	b085      	sub	sp, #20
 8004d36:	bfb8      	it	lt
 8004d38:	3101      	addlt	r1, #1
 8004d3a:	f7ff fedd 	bl	8004af8 <_Balloc>
 8004d3e:	b930      	cbnz	r0, 8004d4e <__multiply+0x42>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <__multiply+0x13c>)
 8004d44:	4841      	ldr	r0, [pc, #260]	@ (8004e4c <__multiply+0x140>)
 8004d46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004d4a:	f000 fcdf 	bl	800570c <__assert_func>
 8004d4e:	f100 0414 	add.w	r4, r0, #20
 8004d52:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004d56:	4623      	mov	r3, r4
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4573      	cmp	r3, lr
 8004d5c:	d320      	bcc.n	8004da0 <__multiply+0x94>
 8004d5e:	f107 0814 	add.w	r8, r7, #20
 8004d62:	f109 0114 	add.w	r1, r9, #20
 8004d66:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004d6a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004d6e:	9302      	str	r3, [sp, #8]
 8004d70:	1beb      	subs	r3, r5, r7
 8004d72:	3b15      	subs	r3, #21
 8004d74:	f023 0303 	bic.w	r3, r3, #3
 8004d78:	3304      	adds	r3, #4
 8004d7a:	3715      	adds	r7, #21
 8004d7c:	42bd      	cmp	r5, r7
 8004d7e:	bf38      	it	cc
 8004d80:	2304      	movcc	r3, #4
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	9b02      	ldr	r3, [sp, #8]
 8004d86:	9103      	str	r1, [sp, #12]
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	d80c      	bhi.n	8004da6 <__multiply+0x9a>
 8004d8c:	2e00      	cmp	r6, #0
 8004d8e:	dd03      	ble.n	8004d98 <__multiply+0x8c>
 8004d90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d055      	beq.n	8004e44 <__multiply+0x138>
 8004d98:	6106      	str	r6, [r0, #16]
 8004d9a:	b005      	add	sp, #20
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da0:	f843 2b04 	str.w	r2, [r3], #4
 8004da4:	e7d9      	b.n	8004d5a <__multiply+0x4e>
 8004da6:	f8b1 a000 	ldrh.w	sl, [r1]
 8004daa:	f1ba 0f00 	cmp.w	sl, #0
 8004dae:	d01f      	beq.n	8004df0 <__multiply+0xe4>
 8004db0:	46c4      	mov	ip, r8
 8004db2:	46a1      	mov	r9, r4
 8004db4:	2700      	movs	r7, #0
 8004db6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004dba:	f8d9 3000 	ldr.w	r3, [r9]
 8004dbe:	fa1f fb82 	uxth.w	fp, r2
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8004dc8:	443b      	add	r3, r7
 8004dca:	f8d9 7000 	ldr.w	r7, [r9]
 8004dce:	0c12      	lsrs	r2, r2, #16
 8004dd0:	0c3f      	lsrs	r7, r7, #16
 8004dd2:	fb0a 7202 	mla	r2, sl, r2, r7
 8004dd6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004de0:	4565      	cmp	r5, ip
 8004de2:	f849 3b04 	str.w	r3, [r9], #4
 8004de6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004dea:	d8e4      	bhi.n	8004db6 <__multiply+0xaa>
 8004dec:	9b01      	ldr	r3, [sp, #4]
 8004dee:	50e7      	str	r7, [r4, r3]
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004df6:	3104      	adds	r1, #4
 8004df8:	f1b9 0f00 	cmp.w	r9, #0
 8004dfc:	d020      	beq.n	8004e40 <__multiply+0x134>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	4647      	mov	r7, r8
 8004e02:	46a4      	mov	ip, r4
 8004e04:	f04f 0a00 	mov.w	sl, #0
 8004e08:	f8b7 b000 	ldrh.w	fp, [r7]
 8004e0c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004e10:	fb09 220b 	mla	r2, r9, fp, r2
 8004e14:	4452      	add	r2, sl
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e1c:	f84c 3b04 	str.w	r3, [ip], #4
 8004e20:	f857 3b04 	ldr.w	r3, [r7], #4
 8004e24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e28:	f8bc 3000 	ldrh.w	r3, [ip]
 8004e2c:	fb09 330a 	mla	r3, r9, sl, r3
 8004e30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004e34:	42bd      	cmp	r5, r7
 8004e36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e3a:	d8e5      	bhi.n	8004e08 <__multiply+0xfc>
 8004e3c:	9a01      	ldr	r2, [sp, #4]
 8004e3e:	50a3      	str	r3, [r4, r2]
 8004e40:	3404      	adds	r4, #4
 8004e42:	e79f      	b.n	8004d84 <__multiply+0x78>
 8004e44:	3e01      	subs	r6, #1
 8004e46:	e7a1      	b.n	8004d8c <__multiply+0x80>
 8004e48:	080059d0 	.word	0x080059d0
 8004e4c:	080059e1 	.word	0x080059e1

08004e50 <__pow5mult>:
 8004e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e54:	4615      	mov	r5, r2
 8004e56:	f012 0203 	ands.w	r2, r2, #3
 8004e5a:	4607      	mov	r7, r0
 8004e5c:	460e      	mov	r6, r1
 8004e5e:	d007      	beq.n	8004e70 <__pow5mult+0x20>
 8004e60:	4c25      	ldr	r4, [pc, #148]	@ (8004ef8 <__pow5mult+0xa8>)
 8004e62:	3a01      	subs	r2, #1
 8004e64:	2300      	movs	r3, #0
 8004e66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e6a:	f7ff fea7 	bl	8004bbc <__multadd>
 8004e6e:	4606      	mov	r6, r0
 8004e70:	10ad      	asrs	r5, r5, #2
 8004e72:	d03d      	beq.n	8004ef0 <__pow5mult+0xa0>
 8004e74:	69fc      	ldr	r4, [r7, #28]
 8004e76:	b97c      	cbnz	r4, 8004e98 <__pow5mult+0x48>
 8004e78:	2010      	movs	r0, #16
 8004e7a:	f7ff fd87 	bl	800498c <malloc>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	61f8      	str	r0, [r7, #28]
 8004e82:	b928      	cbnz	r0, 8004e90 <__pow5mult+0x40>
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <__pow5mult+0xac>)
 8004e86:	481e      	ldr	r0, [pc, #120]	@ (8004f00 <__pow5mult+0xb0>)
 8004e88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e8c:	f000 fc3e 	bl	800570c <__assert_func>
 8004e90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e94:	6004      	str	r4, [r0, #0]
 8004e96:	60c4      	str	r4, [r0, #12]
 8004e98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ea0:	b94c      	cbnz	r4, 8004eb6 <__pow5mult+0x66>
 8004ea2:	f240 2171 	movw	r1, #625	@ 0x271
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f7ff ff1a 	bl	8004ce0 <__i2b>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c8 0008 	str.w	r0, [r8, #8]
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	6003      	str	r3, [r0, #0]
 8004eb6:	f04f 0900 	mov.w	r9, #0
 8004eba:	07eb      	lsls	r3, r5, #31
 8004ebc:	d50a      	bpl.n	8004ed4 <__pow5mult+0x84>
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f7ff ff22 	bl	8004d0c <__multiply>
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4680      	mov	r8, r0
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f7ff fe53 	bl	8004b78 <_Bfree>
 8004ed2:	4646      	mov	r6, r8
 8004ed4:	106d      	asrs	r5, r5, #1
 8004ed6:	d00b      	beq.n	8004ef0 <__pow5mult+0xa0>
 8004ed8:	6820      	ldr	r0, [r4, #0]
 8004eda:	b938      	cbnz	r0, 8004eec <__pow5mult+0x9c>
 8004edc:	4622      	mov	r2, r4
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	f7ff ff13 	bl	8004d0c <__multiply>
 8004ee6:	6020      	str	r0, [r4, #0]
 8004ee8:	f8c0 9000 	str.w	r9, [r0]
 8004eec:	4604      	mov	r4, r0
 8004eee:	e7e4      	b.n	8004eba <__pow5mult+0x6a>
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef6:	bf00      	nop
 8004ef8:	08005a94 	.word	0x08005a94
 8004efc:	08005961 	.word	0x08005961
 8004f00:	080059e1 	.word	0x080059e1

08004f04 <__lshift>:
 8004f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	460c      	mov	r4, r1
 8004f0a:	6849      	ldr	r1, [r1, #4]
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	4607      	mov	r7, r0
 8004f16:	4691      	mov	r9, r2
 8004f18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f1c:	f108 0601 	add.w	r6, r8, #1
 8004f20:	42b3      	cmp	r3, r6
 8004f22:	db0b      	blt.n	8004f3c <__lshift+0x38>
 8004f24:	4638      	mov	r0, r7
 8004f26:	f7ff fde7 	bl	8004af8 <_Balloc>
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	b948      	cbnz	r0, 8004f42 <__lshift+0x3e>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b28      	ldr	r3, [pc, #160]	@ (8004fd4 <__lshift+0xd0>)
 8004f32:	4829      	ldr	r0, [pc, #164]	@ (8004fd8 <__lshift+0xd4>)
 8004f34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004f38:	f000 fbe8 	bl	800570c <__assert_func>
 8004f3c:	3101      	adds	r1, #1
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	e7ee      	b.n	8004f20 <__lshift+0x1c>
 8004f42:	2300      	movs	r3, #0
 8004f44:	f100 0114 	add.w	r1, r0, #20
 8004f48:	f100 0210 	add.w	r2, r0, #16
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	4553      	cmp	r3, sl
 8004f50:	db33      	blt.n	8004fba <__lshift+0xb6>
 8004f52:	6920      	ldr	r0, [r4, #16]
 8004f54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f58:	f104 0314 	add.w	r3, r4, #20
 8004f5c:	f019 091f 	ands.w	r9, r9, #31
 8004f60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f68:	d02b      	beq.n	8004fc2 <__lshift+0xbe>
 8004f6a:	f1c9 0e20 	rsb	lr, r9, #32
 8004f6e:	468a      	mov	sl, r1
 8004f70:	2200      	movs	r2, #0
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	fa00 f009 	lsl.w	r0, r0, r9
 8004f78:	4310      	orrs	r0, r2
 8004f7a:	f84a 0b04 	str.w	r0, [sl], #4
 8004f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f82:	459c      	cmp	ip, r3
 8004f84:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f88:	d8f3      	bhi.n	8004f72 <__lshift+0x6e>
 8004f8a:	ebac 0304 	sub.w	r3, ip, r4
 8004f8e:	3b15      	subs	r3, #21
 8004f90:	f023 0303 	bic.w	r3, r3, #3
 8004f94:	3304      	adds	r3, #4
 8004f96:	f104 0015 	add.w	r0, r4, #21
 8004f9a:	4560      	cmp	r0, ip
 8004f9c:	bf88      	it	hi
 8004f9e:	2304      	movhi	r3, #4
 8004fa0:	50ca      	str	r2, [r1, r3]
 8004fa2:	b10a      	cbz	r2, 8004fa8 <__lshift+0xa4>
 8004fa4:	f108 0602 	add.w	r6, r8, #2
 8004fa8:	3e01      	subs	r6, #1
 8004faa:	4638      	mov	r0, r7
 8004fac:	612e      	str	r6, [r5, #16]
 8004fae:	4621      	mov	r1, r4
 8004fb0:	f7ff fde2 	bl	8004b78 <_Bfree>
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	e7c5      	b.n	8004f4e <__lshift+0x4a>
 8004fc2:	3904      	subs	r1, #4
 8004fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8004fcc:	459c      	cmp	ip, r3
 8004fce:	d8f9      	bhi.n	8004fc4 <__lshift+0xc0>
 8004fd0:	e7ea      	b.n	8004fa8 <__lshift+0xa4>
 8004fd2:	bf00      	nop
 8004fd4:	080059d0 	.word	0x080059d0
 8004fd8:	080059e1 	.word	0x080059e1

08004fdc <__mcmp>:
 8004fdc:	690a      	ldr	r2, [r1, #16]
 8004fde:	4603      	mov	r3, r0
 8004fe0:	6900      	ldr	r0, [r0, #16]
 8004fe2:	1a80      	subs	r0, r0, r2
 8004fe4:	b530      	push	{r4, r5, lr}
 8004fe6:	d10e      	bne.n	8005006 <__mcmp+0x2a>
 8004fe8:	3314      	adds	r3, #20
 8004fea:	3114      	adds	r1, #20
 8004fec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004ff0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004ff4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ff8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004ffc:	4295      	cmp	r5, r2
 8004ffe:	d003      	beq.n	8005008 <__mcmp+0x2c>
 8005000:	d205      	bcs.n	800500e <__mcmp+0x32>
 8005002:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005006:	bd30      	pop	{r4, r5, pc}
 8005008:	42a3      	cmp	r3, r4
 800500a:	d3f3      	bcc.n	8004ff4 <__mcmp+0x18>
 800500c:	e7fb      	b.n	8005006 <__mcmp+0x2a>
 800500e:	2001      	movs	r0, #1
 8005010:	e7f9      	b.n	8005006 <__mcmp+0x2a>
	...

08005014 <__mdiff>:
 8005014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	4689      	mov	r9, r1
 800501a:	4606      	mov	r6, r0
 800501c:	4611      	mov	r1, r2
 800501e:	4648      	mov	r0, r9
 8005020:	4614      	mov	r4, r2
 8005022:	f7ff ffdb 	bl	8004fdc <__mcmp>
 8005026:	1e05      	subs	r5, r0, #0
 8005028:	d112      	bne.n	8005050 <__mdiff+0x3c>
 800502a:	4629      	mov	r1, r5
 800502c:	4630      	mov	r0, r6
 800502e:	f7ff fd63 	bl	8004af8 <_Balloc>
 8005032:	4602      	mov	r2, r0
 8005034:	b928      	cbnz	r0, 8005042 <__mdiff+0x2e>
 8005036:	4b3f      	ldr	r3, [pc, #252]	@ (8005134 <__mdiff+0x120>)
 8005038:	f240 2137 	movw	r1, #567	@ 0x237
 800503c:	483e      	ldr	r0, [pc, #248]	@ (8005138 <__mdiff+0x124>)
 800503e:	f000 fb65 	bl	800570c <__assert_func>
 8005042:	2301      	movs	r3, #1
 8005044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005048:	4610      	mov	r0, r2
 800504a:	b003      	add	sp, #12
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	bfbc      	itt	lt
 8005052:	464b      	movlt	r3, r9
 8005054:	46a1      	movlt	r9, r4
 8005056:	4630      	mov	r0, r6
 8005058:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800505c:	bfba      	itte	lt
 800505e:	461c      	movlt	r4, r3
 8005060:	2501      	movlt	r5, #1
 8005062:	2500      	movge	r5, #0
 8005064:	f7ff fd48 	bl	8004af8 <_Balloc>
 8005068:	4602      	mov	r2, r0
 800506a:	b918      	cbnz	r0, 8005074 <__mdiff+0x60>
 800506c:	4b31      	ldr	r3, [pc, #196]	@ (8005134 <__mdiff+0x120>)
 800506e:	f240 2145 	movw	r1, #581	@ 0x245
 8005072:	e7e3      	b.n	800503c <__mdiff+0x28>
 8005074:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005078:	6926      	ldr	r6, [r4, #16]
 800507a:	60c5      	str	r5, [r0, #12]
 800507c:	f109 0310 	add.w	r3, r9, #16
 8005080:	f109 0514 	add.w	r5, r9, #20
 8005084:	f104 0e14 	add.w	lr, r4, #20
 8005088:	f100 0b14 	add.w	fp, r0, #20
 800508c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005090:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	46d9      	mov	r9, fp
 8005098:	f04f 0c00 	mov.w	ip, #0
 800509c:	9b01      	ldr	r3, [sp, #4]
 800509e:	f85e 0b04 	ldr.w	r0, [lr], #4
 80050a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	fa1f f38a 	uxth.w	r3, sl
 80050ac:	4619      	mov	r1, r3
 80050ae:	b283      	uxth	r3, r0
 80050b0:	1acb      	subs	r3, r1, r3
 80050b2:	0c00      	lsrs	r0, r0, #16
 80050b4:	4463      	add	r3, ip
 80050b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80050ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80050be:	b29b      	uxth	r3, r3
 80050c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80050c4:	4576      	cmp	r6, lr
 80050c6:	f849 3b04 	str.w	r3, [r9], #4
 80050ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050ce:	d8e5      	bhi.n	800509c <__mdiff+0x88>
 80050d0:	1b33      	subs	r3, r6, r4
 80050d2:	3b15      	subs	r3, #21
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	3415      	adds	r4, #21
 80050da:	3304      	adds	r3, #4
 80050dc:	42a6      	cmp	r6, r4
 80050de:	bf38      	it	cc
 80050e0:	2304      	movcc	r3, #4
 80050e2:	441d      	add	r5, r3
 80050e4:	445b      	add	r3, fp
 80050e6:	461e      	mov	r6, r3
 80050e8:	462c      	mov	r4, r5
 80050ea:	4544      	cmp	r4, r8
 80050ec:	d30e      	bcc.n	800510c <__mdiff+0xf8>
 80050ee:	f108 0103 	add.w	r1, r8, #3
 80050f2:	1b49      	subs	r1, r1, r5
 80050f4:	f021 0103 	bic.w	r1, r1, #3
 80050f8:	3d03      	subs	r5, #3
 80050fa:	45a8      	cmp	r8, r5
 80050fc:	bf38      	it	cc
 80050fe:	2100      	movcc	r1, #0
 8005100:	440b      	add	r3, r1
 8005102:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005106:	b191      	cbz	r1, 800512e <__mdiff+0x11a>
 8005108:	6117      	str	r7, [r2, #16]
 800510a:	e79d      	b.n	8005048 <__mdiff+0x34>
 800510c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005110:	46e6      	mov	lr, ip
 8005112:	0c08      	lsrs	r0, r1, #16
 8005114:	fa1c fc81 	uxtah	ip, ip, r1
 8005118:	4471      	add	r1, lr
 800511a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800511e:	b289      	uxth	r1, r1
 8005120:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005124:	f846 1b04 	str.w	r1, [r6], #4
 8005128:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800512c:	e7dd      	b.n	80050ea <__mdiff+0xd6>
 800512e:	3f01      	subs	r7, #1
 8005130:	e7e7      	b.n	8005102 <__mdiff+0xee>
 8005132:	bf00      	nop
 8005134:	080059d0 	.word	0x080059d0
 8005138:	080059e1 	.word	0x080059e1

0800513c <__d2b>:
 800513c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005140:	460f      	mov	r7, r1
 8005142:	2101      	movs	r1, #1
 8005144:	ec59 8b10 	vmov	r8, r9, d0
 8005148:	4616      	mov	r6, r2
 800514a:	f7ff fcd5 	bl	8004af8 <_Balloc>
 800514e:	4604      	mov	r4, r0
 8005150:	b930      	cbnz	r0, 8005160 <__d2b+0x24>
 8005152:	4602      	mov	r2, r0
 8005154:	4b23      	ldr	r3, [pc, #140]	@ (80051e4 <__d2b+0xa8>)
 8005156:	4824      	ldr	r0, [pc, #144]	@ (80051e8 <__d2b+0xac>)
 8005158:	f240 310f 	movw	r1, #783	@ 0x30f
 800515c:	f000 fad6 	bl	800570c <__assert_func>
 8005160:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005164:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005168:	b10d      	cbz	r5, 800516e <__d2b+0x32>
 800516a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	f1b8 0300 	subs.w	r3, r8, #0
 8005174:	d023      	beq.n	80051be <__d2b+0x82>
 8005176:	4668      	mov	r0, sp
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	f7ff fd84 	bl	8004c86 <__lo0bits>
 800517e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005182:	b1d0      	cbz	r0, 80051ba <__d2b+0x7e>
 8005184:	f1c0 0320 	rsb	r3, r0, #32
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	430b      	orrs	r3, r1
 800518e:	40c2      	lsrs	r2, r0
 8005190:	6163      	str	r3, [r4, #20]
 8005192:	9201      	str	r2, [sp, #4]
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	61a3      	str	r3, [r4, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2201      	moveq	r2, #1
 800519e:	2202      	movne	r2, #2
 80051a0:	6122      	str	r2, [r4, #16]
 80051a2:	b1a5      	cbz	r5, 80051ce <__d2b+0x92>
 80051a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80051a8:	4405      	add	r5, r0
 80051aa:	603d      	str	r5, [r7, #0]
 80051ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80051b0:	6030      	str	r0, [r6, #0]
 80051b2:	4620      	mov	r0, r4
 80051b4:	b003      	add	sp, #12
 80051b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ba:	6161      	str	r1, [r4, #20]
 80051bc:	e7ea      	b.n	8005194 <__d2b+0x58>
 80051be:	a801      	add	r0, sp, #4
 80051c0:	f7ff fd61 	bl	8004c86 <__lo0bits>
 80051c4:	9b01      	ldr	r3, [sp, #4]
 80051c6:	6163      	str	r3, [r4, #20]
 80051c8:	3020      	adds	r0, #32
 80051ca:	2201      	movs	r2, #1
 80051cc:	e7e8      	b.n	80051a0 <__d2b+0x64>
 80051ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80051d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80051d6:	6038      	str	r0, [r7, #0]
 80051d8:	6918      	ldr	r0, [r3, #16]
 80051da:	f7ff fd35 	bl	8004c48 <__hi0bits>
 80051de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80051e2:	e7e5      	b.n	80051b0 <__d2b+0x74>
 80051e4:	080059d0 	.word	0x080059d0
 80051e8:	080059e1 	.word	0x080059e1

080051ec <__sfputc_r>:
 80051ec:	6893      	ldr	r3, [r2, #8]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	b410      	push	{r4}
 80051f4:	6093      	str	r3, [r2, #8]
 80051f6:	da08      	bge.n	800520a <__sfputc_r+0x1e>
 80051f8:	6994      	ldr	r4, [r2, #24]
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	db01      	blt.n	8005202 <__sfputc_r+0x16>
 80051fe:	290a      	cmp	r1, #10
 8005200:	d103      	bne.n	800520a <__sfputc_r+0x1e>
 8005202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005206:	f7fe bc08 	b.w	8003a1a <__swbuf_r>
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	1c58      	adds	r0, r3, #1
 800520e:	6010      	str	r0, [r2, #0]
 8005210:	7019      	strb	r1, [r3, #0]
 8005212:	4608      	mov	r0, r1
 8005214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005218:	4770      	bx	lr

0800521a <__sfputs_r>:
 800521a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521c:	4606      	mov	r6, r0
 800521e:	460f      	mov	r7, r1
 8005220:	4614      	mov	r4, r2
 8005222:	18d5      	adds	r5, r2, r3
 8005224:	42ac      	cmp	r4, r5
 8005226:	d101      	bne.n	800522c <__sfputs_r+0x12>
 8005228:	2000      	movs	r0, #0
 800522a:	e007      	b.n	800523c <__sfputs_r+0x22>
 800522c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005230:	463a      	mov	r2, r7
 8005232:	4630      	mov	r0, r6
 8005234:	f7ff ffda 	bl	80051ec <__sfputc_r>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d1f3      	bne.n	8005224 <__sfputs_r+0xa>
 800523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005240 <_vfiprintf_r>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	460d      	mov	r5, r1
 8005246:	b09d      	sub	sp, #116	@ 0x74
 8005248:	4614      	mov	r4, r2
 800524a:	4698      	mov	r8, r3
 800524c:	4606      	mov	r6, r0
 800524e:	b118      	cbz	r0, 8005258 <_vfiprintf_r+0x18>
 8005250:	6a03      	ldr	r3, [r0, #32]
 8005252:	b90b      	cbnz	r3, 8005258 <_vfiprintf_r+0x18>
 8005254:	f7fe faf8 	bl	8003848 <__sinit>
 8005258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800525a:	07d9      	lsls	r1, r3, #31
 800525c:	d405      	bmi.n	800526a <_vfiprintf_r+0x2a>
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	059a      	lsls	r2, r3, #22
 8005262:	d402      	bmi.n	800526a <_vfiprintf_r+0x2a>
 8005264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005266:	f7fe fcea 	bl	8003c3e <__retarget_lock_acquire_recursive>
 800526a:	89ab      	ldrh	r3, [r5, #12]
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	d501      	bpl.n	8005274 <_vfiprintf_r+0x34>
 8005270:	692b      	ldr	r3, [r5, #16]
 8005272:	b99b      	cbnz	r3, 800529c <_vfiprintf_r+0x5c>
 8005274:	4629      	mov	r1, r5
 8005276:	4630      	mov	r0, r6
 8005278:	f7fe fc0e 	bl	8003a98 <__swsetup_r>
 800527c:	b170      	cbz	r0, 800529c <_vfiprintf_r+0x5c>
 800527e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005280:	07dc      	lsls	r4, r3, #31
 8005282:	d504      	bpl.n	800528e <_vfiprintf_r+0x4e>
 8005284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005288:	b01d      	add	sp, #116	@ 0x74
 800528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528e:	89ab      	ldrh	r3, [r5, #12]
 8005290:	0598      	lsls	r0, r3, #22
 8005292:	d4f7      	bmi.n	8005284 <_vfiprintf_r+0x44>
 8005294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005296:	f7fe fcd3 	bl	8003c40 <__retarget_lock_release_recursive>
 800529a:	e7f3      	b.n	8005284 <_vfiprintf_r+0x44>
 800529c:	2300      	movs	r3, #0
 800529e:	9309      	str	r3, [sp, #36]	@ 0x24
 80052a0:	2320      	movs	r3, #32
 80052a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80052aa:	2330      	movs	r3, #48	@ 0x30
 80052ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800545c <_vfiprintf_r+0x21c>
 80052b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052b4:	f04f 0901 	mov.w	r9, #1
 80052b8:	4623      	mov	r3, r4
 80052ba:	469a      	mov	sl, r3
 80052bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052c0:	b10a      	cbz	r2, 80052c6 <_vfiprintf_r+0x86>
 80052c2:	2a25      	cmp	r2, #37	@ 0x25
 80052c4:	d1f9      	bne.n	80052ba <_vfiprintf_r+0x7a>
 80052c6:	ebba 0b04 	subs.w	fp, sl, r4
 80052ca:	d00b      	beq.n	80052e4 <_vfiprintf_r+0xa4>
 80052cc:	465b      	mov	r3, fp
 80052ce:	4622      	mov	r2, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	4630      	mov	r0, r6
 80052d4:	f7ff ffa1 	bl	800521a <__sfputs_r>
 80052d8:	3001      	adds	r0, #1
 80052da:	f000 80a7 	beq.w	800542c <_vfiprintf_r+0x1ec>
 80052de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052e0:	445a      	add	r2, fp
 80052e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80052e4:	f89a 3000 	ldrb.w	r3, [sl]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 809f 	beq.w	800542c <_vfiprintf_r+0x1ec>
 80052ee:	2300      	movs	r3, #0
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f8:	f10a 0a01 	add.w	sl, sl, #1
 80052fc:	9304      	str	r3, [sp, #16]
 80052fe:	9307      	str	r3, [sp, #28]
 8005300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005304:	931a      	str	r3, [sp, #104]	@ 0x68
 8005306:	4654      	mov	r4, sl
 8005308:	2205      	movs	r2, #5
 800530a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530e:	4853      	ldr	r0, [pc, #332]	@ (800545c <_vfiprintf_r+0x21c>)
 8005310:	f7fa ff66 	bl	80001e0 <memchr>
 8005314:	9a04      	ldr	r2, [sp, #16]
 8005316:	b9d8      	cbnz	r0, 8005350 <_vfiprintf_r+0x110>
 8005318:	06d1      	lsls	r1, r2, #27
 800531a:	bf44      	itt	mi
 800531c:	2320      	movmi	r3, #32
 800531e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005322:	0713      	lsls	r3, r2, #28
 8005324:	bf44      	itt	mi
 8005326:	232b      	movmi	r3, #43	@ 0x2b
 8005328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800532c:	f89a 3000 	ldrb.w	r3, [sl]
 8005330:	2b2a      	cmp	r3, #42	@ 0x2a
 8005332:	d015      	beq.n	8005360 <_vfiprintf_r+0x120>
 8005334:	9a07      	ldr	r2, [sp, #28]
 8005336:	4654      	mov	r4, sl
 8005338:	2000      	movs	r0, #0
 800533a:	f04f 0c0a 	mov.w	ip, #10
 800533e:	4621      	mov	r1, r4
 8005340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005344:	3b30      	subs	r3, #48	@ 0x30
 8005346:	2b09      	cmp	r3, #9
 8005348:	d94b      	bls.n	80053e2 <_vfiprintf_r+0x1a2>
 800534a:	b1b0      	cbz	r0, 800537a <_vfiprintf_r+0x13a>
 800534c:	9207      	str	r2, [sp, #28]
 800534e:	e014      	b.n	800537a <_vfiprintf_r+0x13a>
 8005350:	eba0 0308 	sub.w	r3, r0, r8
 8005354:	fa09 f303 	lsl.w	r3, r9, r3
 8005358:	4313      	orrs	r3, r2
 800535a:	9304      	str	r3, [sp, #16]
 800535c:	46a2      	mov	sl, r4
 800535e:	e7d2      	b.n	8005306 <_vfiprintf_r+0xc6>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	1d19      	adds	r1, r3, #4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	9103      	str	r1, [sp, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	bfbb      	ittet	lt
 800536c:	425b      	neglt	r3, r3
 800536e:	f042 0202 	orrlt.w	r2, r2, #2
 8005372:	9307      	strge	r3, [sp, #28]
 8005374:	9307      	strlt	r3, [sp, #28]
 8005376:	bfb8      	it	lt
 8005378:	9204      	strlt	r2, [sp, #16]
 800537a:	7823      	ldrb	r3, [r4, #0]
 800537c:	2b2e      	cmp	r3, #46	@ 0x2e
 800537e:	d10a      	bne.n	8005396 <_vfiprintf_r+0x156>
 8005380:	7863      	ldrb	r3, [r4, #1]
 8005382:	2b2a      	cmp	r3, #42	@ 0x2a
 8005384:	d132      	bne.n	80053ec <_vfiprintf_r+0x1ac>
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	1d1a      	adds	r2, r3, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	9203      	str	r2, [sp, #12]
 800538e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005392:	3402      	adds	r4, #2
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800546c <_vfiprintf_r+0x22c>
 800539a:	7821      	ldrb	r1, [r4, #0]
 800539c:	2203      	movs	r2, #3
 800539e:	4650      	mov	r0, sl
 80053a0:	f7fa ff1e 	bl	80001e0 <memchr>
 80053a4:	b138      	cbz	r0, 80053b6 <_vfiprintf_r+0x176>
 80053a6:	9b04      	ldr	r3, [sp, #16]
 80053a8:	eba0 000a 	sub.w	r0, r0, sl
 80053ac:	2240      	movs	r2, #64	@ 0x40
 80053ae:	4082      	lsls	r2, r0
 80053b0:	4313      	orrs	r3, r2
 80053b2:	3401      	adds	r4, #1
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ba:	4829      	ldr	r0, [pc, #164]	@ (8005460 <_vfiprintf_r+0x220>)
 80053bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053c0:	2206      	movs	r2, #6
 80053c2:	f7fa ff0d 	bl	80001e0 <memchr>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d03f      	beq.n	800544a <_vfiprintf_r+0x20a>
 80053ca:	4b26      	ldr	r3, [pc, #152]	@ (8005464 <_vfiprintf_r+0x224>)
 80053cc:	bb1b      	cbnz	r3, 8005416 <_vfiprintf_r+0x1d6>
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	3307      	adds	r3, #7
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	3308      	adds	r3, #8
 80053d8:	9303      	str	r3, [sp, #12]
 80053da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053dc:	443b      	add	r3, r7
 80053de:	9309      	str	r3, [sp, #36]	@ 0x24
 80053e0:	e76a      	b.n	80052b8 <_vfiprintf_r+0x78>
 80053e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e6:	460c      	mov	r4, r1
 80053e8:	2001      	movs	r0, #1
 80053ea:	e7a8      	b.n	800533e <_vfiprintf_r+0xfe>
 80053ec:	2300      	movs	r3, #0
 80053ee:	3401      	adds	r4, #1
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	4619      	mov	r1, r3
 80053f4:	f04f 0c0a 	mov.w	ip, #10
 80053f8:	4620      	mov	r0, r4
 80053fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053fe:	3a30      	subs	r2, #48	@ 0x30
 8005400:	2a09      	cmp	r2, #9
 8005402:	d903      	bls.n	800540c <_vfiprintf_r+0x1cc>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0c6      	beq.n	8005396 <_vfiprintf_r+0x156>
 8005408:	9105      	str	r1, [sp, #20]
 800540a:	e7c4      	b.n	8005396 <_vfiprintf_r+0x156>
 800540c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005410:	4604      	mov	r4, r0
 8005412:	2301      	movs	r3, #1
 8005414:	e7f0      	b.n	80053f8 <_vfiprintf_r+0x1b8>
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	462a      	mov	r2, r5
 800541c:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <_vfiprintf_r+0x228>)
 800541e:	a904      	add	r1, sp, #16
 8005420:	4630      	mov	r0, r6
 8005422:	f7fd fdcf 	bl	8002fc4 <_printf_float>
 8005426:	4607      	mov	r7, r0
 8005428:	1c78      	adds	r0, r7, #1
 800542a:	d1d6      	bne.n	80053da <_vfiprintf_r+0x19a>
 800542c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800542e:	07d9      	lsls	r1, r3, #31
 8005430:	d405      	bmi.n	800543e <_vfiprintf_r+0x1fe>
 8005432:	89ab      	ldrh	r3, [r5, #12]
 8005434:	059a      	lsls	r2, r3, #22
 8005436:	d402      	bmi.n	800543e <_vfiprintf_r+0x1fe>
 8005438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800543a:	f7fe fc01 	bl	8003c40 <__retarget_lock_release_recursive>
 800543e:	89ab      	ldrh	r3, [r5, #12]
 8005440:	065b      	lsls	r3, r3, #25
 8005442:	f53f af1f 	bmi.w	8005284 <_vfiprintf_r+0x44>
 8005446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005448:	e71e      	b.n	8005288 <_vfiprintf_r+0x48>
 800544a:	ab03      	add	r3, sp, #12
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	462a      	mov	r2, r5
 8005450:	4b05      	ldr	r3, [pc, #20]	@ (8005468 <_vfiprintf_r+0x228>)
 8005452:	a904      	add	r1, sp, #16
 8005454:	4630      	mov	r0, r6
 8005456:	f7fe f84d 	bl	80034f4 <_printf_i>
 800545a:	e7e4      	b.n	8005426 <_vfiprintf_r+0x1e6>
 800545c:	08005a3a 	.word	0x08005a3a
 8005460:	08005a44 	.word	0x08005a44
 8005464:	08002fc5 	.word	0x08002fc5
 8005468:	0800521b 	.word	0x0800521b
 800546c:	08005a40 	.word	0x08005a40

08005470 <__sflush_r>:
 8005470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005478:	0716      	lsls	r6, r2, #28
 800547a:	4605      	mov	r5, r0
 800547c:	460c      	mov	r4, r1
 800547e:	d454      	bmi.n	800552a <__sflush_r+0xba>
 8005480:	684b      	ldr	r3, [r1, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	dc02      	bgt.n	800548c <__sflush_r+0x1c>
 8005486:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	dd48      	ble.n	800551e <__sflush_r+0xae>
 800548c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800548e:	2e00      	cmp	r6, #0
 8005490:	d045      	beq.n	800551e <__sflush_r+0xae>
 8005492:	2300      	movs	r3, #0
 8005494:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005498:	682f      	ldr	r7, [r5, #0]
 800549a:	6a21      	ldr	r1, [r4, #32]
 800549c:	602b      	str	r3, [r5, #0]
 800549e:	d030      	beq.n	8005502 <__sflush_r+0x92>
 80054a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	0759      	lsls	r1, r3, #29
 80054a6:	d505      	bpl.n	80054b4 <__sflush_r+0x44>
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054ae:	b10b      	cbz	r3, 80054b4 <__sflush_r+0x44>
 80054b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	2300      	movs	r3, #0
 80054b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054b8:	6a21      	ldr	r1, [r4, #32]
 80054ba:	4628      	mov	r0, r5
 80054bc:	47b0      	blx	r6
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	d106      	bne.n	80054d2 <__sflush_r+0x62>
 80054c4:	6829      	ldr	r1, [r5, #0]
 80054c6:	291d      	cmp	r1, #29
 80054c8:	d82b      	bhi.n	8005522 <__sflush_r+0xb2>
 80054ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005574 <__sflush_r+0x104>)
 80054cc:	40ca      	lsrs	r2, r1
 80054ce:	07d6      	lsls	r6, r2, #31
 80054d0:	d527      	bpl.n	8005522 <__sflush_r+0xb2>
 80054d2:	2200      	movs	r2, #0
 80054d4:	6062      	str	r2, [r4, #4]
 80054d6:	04d9      	lsls	r1, r3, #19
 80054d8:	6922      	ldr	r2, [r4, #16]
 80054da:	6022      	str	r2, [r4, #0]
 80054dc:	d504      	bpl.n	80054e8 <__sflush_r+0x78>
 80054de:	1c42      	adds	r2, r0, #1
 80054e0:	d101      	bne.n	80054e6 <__sflush_r+0x76>
 80054e2:	682b      	ldr	r3, [r5, #0]
 80054e4:	b903      	cbnz	r3, 80054e8 <__sflush_r+0x78>
 80054e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80054e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ea:	602f      	str	r7, [r5, #0]
 80054ec:	b1b9      	cbz	r1, 800551e <__sflush_r+0xae>
 80054ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054f2:	4299      	cmp	r1, r3
 80054f4:	d002      	beq.n	80054fc <__sflush_r+0x8c>
 80054f6:	4628      	mov	r0, r5
 80054f8:	f7ff f9fe 	bl	80048f8 <_free_r>
 80054fc:	2300      	movs	r3, #0
 80054fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005500:	e00d      	b.n	800551e <__sflush_r+0xae>
 8005502:	2301      	movs	r3, #1
 8005504:	4628      	mov	r0, r5
 8005506:	47b0      	blx	r6
 8005508:	4602      	mov	r2, r0
 800550a:	1c50      	adds	r0, r2, #1
 800550c:	d1c9      	bne.n	80054a2 <__sflush_r+0x32>
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0c6      	beq.n	80054a2 <__sflush_r+0x32>
 8005514:	2b1d      	cmp	r3, #29
 8005516:	d001      	beq.n	800551c <__sflush_r+0xac>
 8005518:	2b16      	cmp	r3, #22
 800551a:	d11e      	bne.n	800555a <__sflush_r+0xea>
 800551c:	602f      	str	r7, [r5, #0]
 800551e:	2000      	movs	r0, #0
 8005520:	e022      	b.n	8005568 <__sflush_r+0xf8>
 8005522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005526:	b21b      	sxth	r3, r3
 8005528:	e01b      	b.n	8005562 <__sflush_r+0xf2>
 800552a:	690f      	ldr	r7, [r1, #16]
 800552c:	2f00      	cmp	r7, #0
 800552e:	d0f6      	beq.n	800551e <__sflush_r+0xae>
 8005530:	0793      	lsls	r3, r2, #30
 8005532:	680e      	ldr	r6, [r1, #0]
 8005534:	bf08      	it	eq
 8005536:	694b      	ldreq	r3, [r1, #20]
 8005538:	600f      	str	r7, [r1, #0]
 800553a:	bf18      	it	ne
 800553c:	2300      	movne	r3, #0
 800553e:	eba6 0807 	sub.w	r8, r6, r7
 8005542:	608b      	str	r3, [r1, #8]
 8005544:	f1b8 0f00 	cmp.w	r8, #0
 8005548:	dde9      	ble.n	800551e <__sflush_r+0xae>
 800554a:	6a21      	ldr	r1, [r4, #32]
 800554c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800554e:	4643      	mov	r3, r8
 8005550:	463a      	mov	r2, r7
 8005552:	4628      	mov	r0, r5
 8005554:	47b0      	blx	r6
 8005556:	2800      	cmp	r0, #0
 8005558:	dc08      	bgt.n	800556c <__sflush_r+0xfc>
 800555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800556c:	4407      	add	r7, r0
 800556e:	eba8 0800 	sub.w	r8, r8, r0
 8005572:	e7e7      	b.n	8005544 <__sflush_r+0xd4>
 8005574:	20400001 	.word	0x20400001

08005578 <_fflush_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	690b      	ldr	r3, [r1, #16]
 800557c:	4605      	mov	r5, r0
 800557e:	460c      	mov	r4, r1
 8005580:	b913      	cbnz	r3, 8005588 <_fflush_r+0x10>
 8005582:	2500      	movs	r5, #0
 8005584:	4628      	mov	r0, r5
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	b118      	cbz	r0, 8005592 <_fflush_r+0x1a>
 800558a:	6a03      	ldr	r3, [r0, #32]
 800558c:	b90b      	cbnz	r3, 8005592 <_fflush_r+0x1a>
 800558e:	f7fe f95b 	bl	8003848 <__sinit>
 8005592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f3      	beq.n	8005582 <_fflush_r+0xa>
 800559a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800559c:	07d0      	lsls	r0, r2, #31
 800559e:	d404      	bmi.n	80055aa <_fflush_r+0x32>
 80055a0:	0599      	lsls	r1, r3, #22
 80055a2:	d402      	bmi.n	80055aa <_fflush_r+0x32>
 80055a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055a6:	f7fe fb4a 	bl	8003c3e <__retarget_lock_acquire_recursive>
 80055aa:	4628      	mov	r0, r5
 80055ac:	4621      	mov	r1, r4
 80055ae:	f7ff ff5f 	bl	8005470 <__sflush_r>
 80055b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055b4:	07da      	lsls	r2, r3, #31
 80055b6:	4605      	mov	r5, r0
 80055b8:	d4e4      	bmi.n	8005584 <_fflush_r+0xc>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	059b      	lsls	r3, r3, #22
 80055be:	d4e1      	bmi.n	8005584 <_fflush_r+0xc>
 80055c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055c2:	f7fe fb3d 	bl	8003c40 <__retarget_lock_release_recursive>
 80055c6:	e7dd      	b.n	8005584 <_fflush_r+0xc>

080055c8 <__swhatbuf_r>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	460c      	mov	r4, r1
 80055cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d0:	2900      	cmp	r1, #0
 80055d2:	b096      	sub	sp, #88	@ 0x58
 80055d4:	4615      	mov	r5, r2
 80055d6:	461e      	mov	r6, r3
 80055d8:	da0d      	bge.n	80055f6 <__swhatbuf_r+0x2e>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2340      	movne	r3, #64	@ 0x40
 80055e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055ec:	2000      	movs	r0, #0
 80055ee:	6031      	str	r1, [r6, #0]
 80055f0:	602b      	str	r3, [r5, #0]
 80055f2:	b016      	add	sp, #88	@ 0x58
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	466a      	mov	r2, sp
 80055f8:	f000 f848 	bl	800568c <_fstat_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	dbec      	blt.n	80055da <__swhatbuf_r+0x12>
 8005600:	9901      	ldr	r1, [sp, #4]
 8005602:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005606:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800560a:	4259      	negs	r1, r3
 800560c:	4159      	adcs	r1, r3
 800560e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005612:	e7eb      	b.n	80055ec <__swhatbuf_r+0x24>

08005614 <__smakebuf_r>:
 8005614:	898b      	ldrh	r3, [r1, #12]
 8005616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005618:	079d      	lsls	r5, r3, #30
 800561a:	4606      	mov	r6, r0
 800561c:	460c      	mov	r4, r1
 800561e:	d507      	bpl.n	8005630 <__smakebuf_r+0x1c>
 8005620:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	2301      	movs	r3, #1
 800562a:	6163      	str	r3, [r4, #20]
 800562c:	b003      	add	sp, #12
 800562e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005630:	ab01      	add	r3, sp, #4
 8005632:	466a      	mov	r2, sp
 8005634:	f7ff ffc8 	bl	80055c8 <__swhatbuf_r>
 8005638:	9f00      	ldr	r7, [sp, #0]
 800563a:	4605      	mov	r5, r0
 800563c:	4639      	mov	r1, r7
 800563e:	4630      	mov	r0, r6
 8005640:	f7ff f9ce 	bl	80049e0 <_malloc_r>
 8005644:	b948      	cbnz	r0, 800565a <__smakebuf_r+0x46>
 8005646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800564a:	059a      	lsls	r2, r3, #22
 800564c:	d4ee      	bmi.n	800562c <__smakebuf_r+0x18>
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	e7e2      	b.n	8005620 <__smakebuf_r+0xc>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	6020      	str	r0, [r4, #0]
 800565e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	9b01      	ldr	r3, [sp, #4]
 8005666:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800566a:	b15b      	cbz	r3, 8005684 <__smakebuf_r+0x70>
 800566c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005670:	4630      	mov	r0, r6
 8005672:	f000 f81d 	bl	80056b0 <_isatty_r>
 8005676:	b128      	cbz	r0, 8005684 <__smakebuf_r+0x70>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	431d      	orrs	r5, r3
 8005688:	81a5      	strh	r5, [r4, #12]
 800568a:	e7cf      	b.n	800562c <__smakebuf_r+0x18>

0800568c <_fstat_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	@ (80056ac <_fstat_r+0x20>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	f7fb ff2a 	bl	80014f2 <_fstat>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d102      	bne.n	80056a8 <_fstat_r+0x1c>
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	b103      	cbz	r3, 80056a8 <_fstat_r+0x1c>
 80056a6:	6023      	str	r3, [r4, #0]
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
 80056aa:	bf00      	nop
 80056ac:	2000046c 	.word	0x2000046c

080056b0 <_isatty_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d06      	ldr	r5, [pc, #24]	@ (80056cc <_isatty_r+0x1c>)
 80056b4:	2300      	movs	r3, #0
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fb ff1e 	bl	80014fc <_isatty>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_isatty_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_isatty_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	2000046c 	.word	0x2000046c

080056d0 <_sbrk_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d06      	ldr	r5, [pc, #24]	@ (80056ec <_sbrk_r+0x1c>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fb ff12 	bl	8001504 <_sbrk>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_sbrk_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_sbrk_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	2000046c 	.word	0x2000046c

080056f0 <memcpy>:
 80056f0:	440a      	add	r2, r1
 80056f2:	4291      	cmp	r1, r2
 80056f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80056f8:	d100      	bne.n	80056fc <memcpy+0xc>
 80056fa:	4770      	bx	lr
 80056fc:	b510      	push	{r4, lr}
 80056fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005706:	4291      	cmp	r1, r2
 8005708:	d1f9      	bne.n	80056fe <memcpy+0xe>
 800570a:	bd10      	pop	{r4, pc}

0800570c <__assert_func>:
 800570c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800570e:	4614      	mov	r4, r2
 8005710:	461a      	mov	r2, r3
 8005712:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <__assert_func+0x2c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4605      	mov	r5, r0
 8005718:	68d8      	ldr	r0, [r3, #12]
 800571a:	b14c      	cbz	r4, 8005730 <__assert_func+0x24>
 800571c:	4b07      	ldr	r3, [pc, #28]	@ (800573c <__assert_func+0x30>)
 800571e:	9100      	str	r1, [sp, #0]
 8005720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005724:	4906      	ldr	r1, [pc, #24]	@ (8005740 <__assert_func+0x34>)
 8005726:	462b      	mov	r3, r5
 8005728:	f000 f842 	bl	80057b0 <fiprintf>
 800572c:	f000 f852 	bl	80057d4 <abort>
 8005730:	4b04      	ldr	r3, [pc, #16]	@ (8005744 <__assert_func+0x38>)
 8005732:	461c      	mov	r4, r3
 8005734:	e7f3      	b.n	800571e <__assert_func+0x12>
 8005736:	bf00      	nop
 8005738:	20000070 	.word	0x20000070
 800573c:	08005a55 	.word	0x08005a55
 8005740:	08005a62 	.word	0x08005a62
 8005744:	08005a90 	.word	0x08005a90

08005748 <_calloc_r>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	fba1 5402 	umull	r5, r4, r1, r2
 800574e:	b934      	cbnz	r4, 800575e <_calloc_r+0x16>
 8005750:	4629      	mov	r1, r5
 8005752:	f7ff f945 	bl	80049e0 <_malloc_r>
 8005756:	4606      	mov	r6, r0
 8005758:	b928      	cbnz	r0, 8005766 <_calloc_r+0x1e>
 800575a:	4630      	mov	r0, r6
 800575c:	bd70      	pop	{r4, r5, r6, pc}
 800575e:	220c      	movs	r2, #12
 8005760:	6002      	str	r2, [r0, #0]
 8005762:	2600      	movs	r6, #0
 8005764:	e7f9      	b.n	800575a <_calloc_r+0x12>
 8005766:	462a      	mov	r2, r5
 8005768:	4621      	mov	r1, r4
 800576a:	f7fe f9eb 	bl	8003b44 <memset>
 800576e:	e7f4      	b.n	800575a <_calloc_r+0x12>

08005770 <__ascii_mbtowc>:
 8005770:	b082      	sub	sp, #8
 8005772:	b901      	cbnz	r1, 8005776 <__ascii_mbtowc+0x6>
 8005774:	a901      	add	r1, sp, #4
 8005776:	b142      	cbz	r2, 800578a <__ascii_mbtowc+0x1a>
 8005778:	b14b      	cbz	r3, 800578e <__ascii_mbtowc+0x1e>
 800577a:	7813      	ldrb	r3, [r2, #0]
 800577c:	600b      	str	r3, [r1, #0]
 800577e:	7812      	ldrb	r2, [r2, #0]
 8005780:	1e10      	subs	r0, r2, #0
 8005782:	bf18      	it	ne
 8005784:	2001      	movne	r0, #1
 8005786:	b002      	add	sp, #8
 8005788:	4770      	bx	lr
 800578a:	4610      	mov	r0, r2
 800578c:	e7fb      	b.n	8005786 <__ascii_mbtowc+0x16>
 800578e:	f06f 0001 	mvn.w	r0, #1
 8005792:	e7f8      	b.n	8005786 <__ascii_mbtowc+0x16>

08005794 <__ascii_wctomb>:
 8005794:	4603      	mov	r3, r0
 8005796:	4608      	mov	r0, r1
 8005798:	b141      	cbz	r1, 80057ac <__ascii_wctomb+0x18>
 800579a:	2aff      	cmp	r2, #255	@ 0xff
 800579c:	d904      	bls.n	80057a8 <__ascii_wctomb+0x14>
 800579e:	228a      	movs	r2, #138	@ 0x8a
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057a6:	4770      	bx	lr
 80057a8:	700a      	strb	r2, [r1, #0]
 80057aa:	2001      	movs	r0, #1
 80057ac:	4770      	bx	lr
	...

080057b0 <fiprintf>:
 80057b0:	b40e      	push	{r1, r2, r3}
 80057b2:	b503      	push	{r0, r1, lr}
 80057b4:	4601      	mov	r1, r0
 80057b6:	ab03      	add	r3, sp, #12
 80057b8:	4805      	ldr	r0, [pc, #20]	@ (80057d0 <fiprintf+0x20>)
 80057ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80057be:	6800      	ldr	r0, [r0, #0]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	f7ff fd3d 	bl	8005240 <_vfiprintf_r>
 80057c6:	b002      	add	sp, #8
 80057c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057cc:	b003      	add	sp, #12
 80057ce:	4770      	bx	lr
 80057d0:	20000070 	.word	0x20000070

080057d4 <abort>:
 80057d4:	b508      	push	{r3, lr}
 80057d6:	2006      	movs	r0, #6
 80057d8:	f000 f82c 	bl	8005834 <raise>
 80057dc:	2001      	movs	r0, #1
 80057de:	f7fb fe6f 	bl	80014c0 <_exit>

080057e2 <_raise_r>:
 80057e2:	291f      	cmp	r1, #31
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4605      	mov	r5, r0
 80057e8:	460c      	mov	r4, r1
 80057ea:	d904      	bls.n	80057f6 <_raise_r+0x14>
 80057ec:	2316      	movs	r3, #22
 80057ee:	6003      	str	r3, [r0, #0]
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057f4:	bd38      	pop	{r3, r4, r5, pc}
 80057f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80057f8:	b112      	cbz	r2, 8005800 <_raise_r+0x1e>
 80057fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057fe:	b94b      	cbnz	r3, 8005814 <_raise_r+0x32>
 8005800:	4628      	mov	r0, r5
 8005802:	f000 f831 	bl	8005868 <_getpid_r>
 8005806:	4622      	mov	r2, r4
 8005808:	4601      	mov	r1, r0
 800580a:	4628      	mov	r0, r5
 800580c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005810:	f000 b818 	b.w	8005844 <_kill_r>
 8005814:	2b01      	cmp	r3, #1
 8005816:	d00a      	beq.n	800582e <_raise_r+0x4c>
 8005818:	1c59      	adds	r1, r3, #1
 800581a:	d103      	bne.n	8005824 <_raise_r+0x42>
 800581c:	2316      	movs	r3, #22
 800581e:	6003      	str	r3, [r0, #0]
 8005820:	2001      	movs	r0, #1
 8005822:	e7e7      	b.n	80057f4 <_raise_r+0x12>
 8005824:	2100      	movs	r1, #0
 8005826:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800582a:	4620      	mov	r0, r4
 800582c:	4798      	blx	r3
 800582e:	2000      	movs	r0, #0
 8005830:	e7e0      	b.n	80057f4 <_raise_r+0x12>
	...

08005834 <raise>:
 8005834:	4b02      	ldr	r3, [pc, #8]	@ (8005840 <raise+0xc>)
 8005836:	4601      	mov	r1, r0
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f7ff bfd2 	b.w	80057e2 <_raise_r>
 800583e:	bf00      	nop
 8005840:	20000070 	.word	0x20000070

08005844 <_kill_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4d07      	ldr	r5, [pc, #28]	@ (8005864 <_kill_r+0x20>)
 8005848:	2300      	movs	r3, #0
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	f7fb fe2d 	bl	80014b0 <_kill>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	d102      	bne.n	8005860 <_kill_r+0x1c>
 800585a:	682b      	ldr	r3, [r5, #0]
 800585c:	b103      	cbz	r3, 8005860 <_kill_r+0x1c>
 800585e:	6023      	str	r3, [r4, #0]
 8005860:	bd38      	pop	{r3, r4, r5, pc}
 8005862:	bf00      	nop
 8005864:	2000046c 	.word	0x2000046c

08005868 <_getpid_r>:
 8005868:	f7fb be20 	b.w	80014ac <_getpid>

0800586c <_init>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	bf00      	nop
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr

08005878 <_fini>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr
