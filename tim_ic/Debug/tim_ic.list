
tim_ic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08005810  08005810  00006810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c18  08005c18  0000722c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c20  08005c20  0000722c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c20  08005c20  00006c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c24  08005c24  00006c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  08005c28  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000022c  08005e54  0000722c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08005e54  0000747c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000722c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe6c  00000000  00000000  0000725c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  000170c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000081a8  00000000  00000000  00018eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00021068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000948  00000000  00000000  00021c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fe8  00000000  00000000  000225d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011af5  00000000  00000000  000395b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fc2d  00000000  00000000  0004b0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dacda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030dc  00000000  00000000  000dad20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000dddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057f4 	.word	0x080057f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	080057f4 	.word	0x080057f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b530      	push	{r4, r5, lr}
 8000eaa:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	2400      	movs	r4, #0
 8000eae:	9405      	str	r4, [sp, #20]
 8000eb0:	9406      	str	r4, [sp, #24]
 8000eb2:	9407      	str	r4, [sp, #28]
 8000eb4:	9408      	str	r4, [sp, #32]
 8000eb6:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb8:	9401      	str	r4, [sp, #4]
 8000eba:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <MX_GPIO_Init+0x8c>)
 8000ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ebe:	f042 0204 	orr.w	r2, r2, #4
 8000ec2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec6:	f002 0204 	and.w	r2, r2, #4
 8000eca:	9201      	str	r2, [sp, #4]
 8000ecc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	9402      	str	r4, [sp, #8]
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eda:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000ede:	9202      	str	r2, [sp, #8]
 8000ee0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	9403      	str	r4, [sp, #12]
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eee:	f002 0201 	and.w	r2, r2, #1
 8000ef2:	9203      	str	r2, [sp, #12]
 8000ef4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	9404      	str	r4, [sp, #16]
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efa:	f042 0202 	orr.w	r2, r2, #2
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	9304      	str	r3, [sp, #16]
 8000f08:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f0a:	4d0b      	ldr	r5, [pc, #44]	@ (8000f38 <MX_GPIO_Init+0x90>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f12:	4628      	mov	r0, r5
 8000f14:	f000 fce2 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f1c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f1e:	2311      	movs	r3, #17
 8000f20:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	4628      	mov	r0, r5
 8000f2a:	f000 fbf3 	bl	8001714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2e:	b00b      	add	sp, #44	@ 0x2c
 8000f30:	bd30      	pop	{r4, r5, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020800 	.word	0x40020800

08000f3c <_write>:
    if (fd == 1 || fd == 2) {
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	2801      	cmp	r0, #1
 8000f40:	d80a      	bhi.n	8000f58 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000f42:	b510      	push	{r4, lr}
 8000f44:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len,
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <_write+0x28>)
 8000f4e:	f001 fefc 	bl	8002d4a <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000f52:	b920      	cbnz	r0, 8000f5e <_write+0x22>
            return len;
 8000f54:	4620      	mov	r0, r4
}
 8000f56:	bd10      	pop	{r4, pc}
    return -1;
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000f5c:	4770      	bx	lr
            return -1;
 8000f5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f62:	e7f8      	b.n	8000f56 <_write+0x1a>
 8000f64:	20000250 	.word	0x20000250

08000f68 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f68:	b508      	push	{r3, lr}
    if (htim->Instance == TIM2) {
 8000f6a:	6803      	ldr	r3, [r0, #0]
 8000f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f70:	d000      	beq.n	8000f74 <HAL_TIM_IC_CaptureCallback+0xc>
}
 8000f72:	bd08      	pop	{r3, pc}
        cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;
 8000f74:	2100      	movs	r1, #0
 8000f76:	f001 f8e5 	bl	8002144 <HAL_TIM_ReadCapturedValue>
 8000f7a:	3001      	adds	r0, #1
 8000f7c:	4b01      	ldr	r3, [pc, #4]	@ (8000f84 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8000f7e:	6018      	str	r0, [r3, #0]
}
 8000f80:	e7f7      	b.n	8000f72 <HAL_TIM_IC_CaptureCallback+0xa>
 8000f82:	bf00      	nop
 8000f84:	20000248 	.word	0x20000248

08000f88 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000f8a:	e7fe      	b.n	8000f8a <Error_Handler+0x2>

08000f8c <MX_USART1_UART_Init>:
{
 8000f8c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000f8e:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <MX_USART1_UART_Init+0x2c>)
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_USART1_UART_Init+0x30>)
 8000f92:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8000f94:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8000f98:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	f001 fe9e 	bl	8002cea <HAL_UART_Init>
 8000fae:	b900      	cbnz	r0, 8000fb2 <MX_USART1_UART_Init+0x26>
}
 8000fb0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fb2:	f7ff ffe9 	bl	8000f88 <Error_Handler>
 8000fb6:	bf00      	nop
 8000fb8:	20000250 	.word	0x20000250
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <MX_TIM2_Init>:
{
 8000fc0:	b500      	push	{lr}
 8000fc2:	b08b      	sub	sp, #44	@ 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9306      	str	r3, [sp, #24]
 8000fc8:	9307      	str	r3, [sp, #28]
 8000fca:	9308      	str	r3, [sp, #32]
 8000fcc:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	9305      	str	r3, [sp, #20]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	9303      	str	r3, [sp, #12]
  htim2.Instance = TIM2;
 8000fda:	481d      	ldr	r0, [pc, #116]	@ (8001050 <MX_TIM2_Init+0x90>)
 8000fdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe0:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000fe2:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8000fe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fea:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff0:	f001 f9ca 	bl	8002388 <HAL_TIM_Base_Init>
 8000ff4:	bb08      	cbnz	r0, 800103a <MX_TIM2_Init+0x7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffa:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffc:	a906      	add	r1, sp, #24
 8000ffe:	4814      	ldr	r0, [pc, #80]	@ (8001050 <MX_TIM2_Init+0x90>)
 8001000:	f001 fb87 	bl	8002712 <HAL_TIM_ConfigClockSource>
 8001004:	b9d8      	cbnz	r0, 800103e <MX_TIM2_Init+0x7e>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001006:	4812      	ldr	r0, [pc, #72]	@ (8001050 <MX_TIM2_Init+0x90>)
 8001008:	f001 fa16 	bl	8002438 <HAL_TIM_IC_Init>
 800100c:	b9c8      	cbnz	r0, 8001042 <MX_TIM2_Init+0x82>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001014:	a904      	add	r1, sp, #16
 8001016:	480e      	ldr	r0, [pc, #56]	@ (8001050 <MX_TIM2_Init+0x90>)
 8001018:	f001 fd2e 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	b998      	cbnz	r0, 8001046 <MX_TIM2_Init+0x86>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800101e:	2200      	movs	r2, #0
 8001020:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001026:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 8001028:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	4669      	mov	r1, sp
 800102c:	4808      	ldr	r0, [pc, #32]	@ (8001050 <MX_TIM2_Init+0x90>)
 800102e:	f001 fb01 	bl	8002634 <HAL_TIM_IC_ConfigChannel>
 8001032:	b950      	cbnz	r0, 800104a <MX_TIM2_Init+0x8a>
}
 8001034:	b00b      	add	sp, #44	@ 0x2c
 8001036:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800103a:	f7ff ffa5 	bl	8000f88 <Error_Handler>
    Error_Handler();
 800103e:	f7ff ffa3 	bl	8000f88 <Error_Handler>
    Error_Handler();
 8001042:	f7ff ffa1 	bl	8000f88 <Error_Handler>
    Error_Handler();
 8001046:	f7ff ff9f 	bl	8000f88 <Error_Handler>
    Error_Handler();
 800104a:	f7ff ff9d 	bl	8000f88 <Error_Handler>
 800104e:	bf00      	nop
 8001050:	200002e0 	.word	0x200002e0

08001054 <MX_TIM4_Init>:
{
 8001054:	b500      	push	{lr}
 8001056:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001058:	2300      	movs	r3, #0
 800105a:	930a      	str	r3, [sp, #40]	@ 0x28
 800105c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800105e:	930c      	str	r3, [sp, #48]	@ 0x30
 8001060:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001062:	9308      	str	r3, [sp, #32]
 8001064:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	9303      	str	r3, [sp, #12]
 800106c:	9304      	str	r3, [sp, #16]
 800106e:	9305      	str	r3, [sp, #20]
 8001070:	9306      	str	r3, [sp, #24]
 8001072:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8001074:	481d      	ldr	r0, [pc, #116]	@ (80010ec <MX_TIM4_Init+0x98>)
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_TIM4_Init+0x9c>)
 8001078:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 800107a:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 800107e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001082:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001088:	f001 f97e 	bl	8002388 <HAL_TIM_Base_Init>
 800108c:	bb20      	cbnz	r0, 80010d8 <MX_TIM4_Init+0x84>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001092:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001094:	a90a      	add	r1, sp, #40	@ 0x28
 8001096:	4815      	ldr	r0, [pc, #84]	@ (80010ec <MX_TIM4_Init+0x98>)
 8001098:	f001 fb3b 	bl	8002712 <HAL_TIM_ConfigClockSource>
 800109c:	b9f0      	cbnz	r0, 80010dc <MX_TIM4_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800109e:	4813      	ldr	r0, [pc, #76]	@ (80010ec <MX_TIM4_Init+0x98>)
 80010a0:	f001 f99e 	bl	80023e0 <HAL_TIM_PWM_Init>
 80010a4:	b9e0      	cbnz	r0, 80010e0 <MX_TIM4_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ac:	a908      	add	r1, sp, #32
 80010ae:	480f      	ldr	r0, [pc, #60]	@ (80010ec <MX_TIM4_Init+0x98>)
 80010b0:	f001 fce2 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	b9b0      	cbnz	r0, 80010e4 <MX_TIM4_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	@ 0x60
 80010b8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80010ba:	2200      	movs	r2, #0
 80010bc:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c2:	a901      	add	r1, sp, #4
 80010c4:	4809      	ldr	r0, [pc, #36]	@ (80010ec <MX_TIM4_Init+0x98>)
 80010c6:	f001 fa11 	bl	80024ec <HAL_TIM_PWM_ConfigChannel>
 80010ca:	b968      	cbnz	r0, 80010e8 <MX_TIM4_Init+0x94>
  HAL_TIM_MspPostInit(&htim4);
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM4_Init+0x98>)
 80010ce:	f000 f955 	bl	800137c <HAL_TIM_MspPostInit>
}
 80010d2:	b00f      	add	sp, #60	@ 0x3c
 80010d4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010d8:	f7ff ff56 	bl	8000f88 <Error_Handler>
    Error_Handler();
 80010dc:	f7ff ff54 	bl	8000f88 <Error_Handler>
    Error_Handler();
 80010e0:	f7ff ff52 	bl	8000f88 <Error_Handler>
    Error_Handler();
 80010e4:	f7ff ff50 	bl	8000f88 <Error_Handler>
    Error_Handler();
 80010e8:	f7ff ff4e 	bl	8000f88 <Error_Handler>
 80010ec:	20000298 	.word	0x20000298
 80010f0:	40000800 	.word	0x40000800

080010f4 <SystemClock_Config>:
{
 80010f4:	b500      	push	{lr}
 80010f6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f8:	2230      	movs	r2, #48	@ 0x30
 80010fa:	2100      	movs	r1, #0
 80010fc:	a808      	add	r0, sp, #32
 80010fe:	f002 fceb 	bl	8003ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001102:	2300      	movs	r3, #0
 8001104:	9303      	str	r3, [sp, #12]
 8001106:	9304      	str	r3, [sp, #16]
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	9306      	str	r3, [sp, #24]
 800110c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <SystemClock_Config+0x9c>)
 8001112:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001114:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001118:	6411      	str	r1, [r2, #64]	@ 0x40
 800111a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800111c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <SystemClock_Config+0xa0>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113a:	2301      	movs	r3, #1
 800113c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001142:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800114c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800114e:	220c      	movs	r2, #12
 8001150:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001152:	2260      	movs	r2, #96	@ 0x60
 8001154:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001156:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001158:	2304      	movs	r3, #4
 800115a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	a808      	add	r0, sp, #32
 800115e:	f000 fbcd 	bl	80018fc <HAL_RCC_OscConfig>
 8001162:	b988      	cbnz	r0, 8001188 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001174:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001178:	2103      	movs	r1, #3
 800117a:	a803      	add	r0, sp, #12
 800117c:	f000 fe0e 	bl	8001d9c <HAL_RCC_ClockConfig>
 8001180:	b920      	cbnz	r0, 800118c <SystemClock_Config+0x98>
}
 8001182:	b015      	add	sp, #84	@ 0x54
 8001184:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001188:	f7ff fefe 	bl	8000f88 <Error_Handler>
    Error_Handler();
 800118c:	f7ff fefc 	bl	8000f88 <Error_Handler>
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <main>:
{
 8001198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119c:	b082      	sub	sp, #8
  HAL_Init();
 800119e:	f000 fa11 	bl	80015c4 <HAL_Init>
  SystemClock_Config();
 80011a2:	f7ff ffa7 	bl	80010f4 <SystemClock_Config>
  MX_GPIO_Init();
 80011a6:	f7ff fe7f 	bl	8000ea8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011aa:	f7ff feef 	bl	8000f8c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011ae:	f7ff ff07 	bl	8000fc0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011b2:	f7ff ff4f 	bl	8001054 <MX_TIM4_Init>
    printf("Firing up PWM\n");
 80011b6:	4830      	ldr	r0, [pc, #192]	@ (8001278 <main+0xe0>)
 80011b8:	f002 fbae 	bl	8003918 <puts>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   // Output PWM Generation
 80011bc:	2100      	movs	r1, #0
 80011be:	482f      	ldr	r0, [pc, #188]	@ (800127c <main+0xe4>)
 80011c0:	f001 fb36 	bl	8002830 <HAL_TIM_PWM_Start>
    printf("Firing up PWM Input Capture\n");
 80011c4:	482e      	ldr	r0, [pc, #184]	@ (8001280 <main+0xe8>)
 80011c6:	f002 fba7 	bl	8003918 <puts>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 80011ca:	2100      	movs	r1, #0
 80011cc:	482d      	ldr	r0, [pc, #180]	@ (8001284 <main+0xec>)
 80011ce:	f001 fba7 	bl	8002920 <HAL_TIM_IC_Start_IT>
    uint32_t now = 0, next_blink = 500, next_print = 1000, next_change = 0;
 80011d2:	2600      	movs	r6, #0
 80011d4:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
 80011d8:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 80011dc:	e026      	b.n	800122c <main+0x94>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e2:	4829      	ldr	r0, [pc, #164]	@ (8001288 <main+0xf0>)
 80011e4:	f000 fb80 	bl	80018e8 <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 80011e8:	f504 77fa 	add.w	r7, r4, #500	@ 0x1f4
 80011ec:	e023      	b.n	8001236 <main+0x9e>
            float freq = (float) TIMER_CLOCK_FREQ / (cnt_full);
 80011ee:	4b27      	ldr	r3, [pc, #156]	@ (800128c <main+0xf4>)
 80011f0:	f8d3 8000 	ldr.w	r8, [r3]
 80011f4:	ee07 8a90 	vmov	s15, r8
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
            printf("Tick %5lu count = %8lu freq = %10.2f Hz\n", now / 1000, cnt_full, freq);
 80011fc:	4d24      	ldr	r5, [pc, #144]	@ (8001290 <main+0xf8>)
 80011fe:	fba5 3504 	umull	r3, r5, r5, r4
 8001202:	09ad      	lsrs	r5, r5, #6
 8001204:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001294 <main+0xfc>
 8001208:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800120c:	ee17 0a90 	vmov	r0, s15
 8001210:	f7ff f9a2 	bl	8000558 <__aeabi_f2d>
 8001214:	e9cd 0100 	strd	r0, r1, [sp]
 8001218:	4642      	mov	r2, r8
 800121a:	4629      	mov	r1, r5
 800121c:	481e      	ldr	r0, [pc, #120]	@ (8001298 <main+0x100>)
 800121e:	f002 fb13 	bl	8003848 <iprintf>
            next_print = now + 1000;
 8001222:	f504 787a 	add.w	r8, r4, #1000	@ 0x3e8
 8001226:	e008      	b.n	800123a <main+0xa2>
            next_change = now + 2000;
 8001228:	f504 66fa 	add.w	r6, r4, #2000	@ 0x7d0
        now = HAL_GetTick();
 800122c:	f000 f9f0 	bl	8001610 <HAL_GetTick>
 8001230:	4604      	mov	r4, r0
        if (now >= next_blink) {
 8001232:	4287      	cmp	r7, r0
 8001234:	d9d3      	bls.n	80011de <main+0x46>
        if (now >= next_print) {
 8001236:	45a0      	cmp	r8, r4
 8001238:	d9d9      	bls.n	80011ee <main+0x56>
        if (now >= next_change) {
 800123a:	42a6      	cmp	r6, r4
 800123c:	d8f6      	bhi.n	800122c <main+0x94>
            printf("Setting prescaler = %lu compare = %lu\n", pwm_vals[pwm_vals_idx][0], pwm_vals[pwm_vals_idx][1]);
 800123e:	4e17      	ldr	r6, [pc, #92]	@ (800129c <main+0x104>)
 8001240:	6833      	ldr	r3, [r6, #0]
 8001242:	4d17      	ldr	r5, [pc, #92]	@ (80012a0 <main+0x108>)
 8001244:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8001248:	6852      	ldr	r2, [r2, #4]
 800124a:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
 800124e:	4815      	ldr	r0, [pc, #84]	@ (80012a4 <main+0x10c>)
 8001250:	f002 fafa 	bl	8003848 <iprintf>
            __HAL_TIM_SET_PRESCALER(&htim4, pwm_vals[pwm_vals_idx][0]);
 8001254:	6833      	ldr	r3, [r6, #0]
 8001256:	4a09      	ldr	r2, [pc, #36]	@ (800127c <main+0xe4>)
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
 800125e:	6291      	str	r1, [r2, #40]	@ 0x28
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_vals[pwm_vals_idx][1]);
 8001260:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8001264:	6869      	ldr	r1, [r5, #4]
 8001266:	6351      	str	r1, [r2, #52]	@ 0x34
            ++pwm_vals_idx;
 8001268:	3301      	adds	r3, #1
 800126a:	6033      	str	r3, [r6, #0]
            if (pwm_vals_idx >= sizeof(pwm_vals) / sizeof(pwm_vals[0])) {
 800126c:	2b0a      	cmp	r3, #10
 800126e:	d9db      	bls.n	8001228 <main+0x90>
                pwm_vals_idx = 0;
 8001270:	2200      	movs	r2, #0
 8001272:	6032      	str	r2, [r6, #0]
 8001274:	e7d8      	b.n	8001228 <main+0x90>
 8001276:	bf00      	nop
 8001278:	08005810 	.word	0x08005810
 800127c:	20000298 	.word	0x20000298
 8001280:	08005820 	.word	0x08005820
 8001284:	200002e0 	.word	0x200002e0
 8001288:	40020800 	.word	0x40020800
 800128c:	20000248 	.word	0x20000248
 8001290:	10624dd3 	.word	0x10624dd3
 8001294:	4cbebc20 	.word	0x4cbebc20
 8001298:	0800583c 	.word	0x0800583c
 800129c:	2000024c 	.word	0x2000024c
 80012a0:	20000000 	.word	0x20000000
 80012a4:	08005868 	.word	0x08005868

080012a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2100      	movs	r1, #0
 80012ac:	9100      	str	r1, [sp, #0]
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_MspInit+0x34>)
 80012b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80012b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ba:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	9101      	str	r1, [sp, #4]
 80012c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012c6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	b002      	add	sp, #8
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b510      	push	{r4, lr}
 80012e2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	2300      	movs	r3, #0
 80012e6:	9303      	str	r3, [sp, #12]
 80012e8:	9304      	str	r3, [sp, #16]
 80012ea:	9305      	str	r3, [sp, #20]
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM2)
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f6:	d004      	beq.n	8001302 <HAL_TIM_Base_MspInit+0x22>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012fe:	b008      	add	sp, #32
 8001300:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001302:	2400      	movs	r4, #0
 8001304:	9400      	str	r4, [sp, #0]
 8001306:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800130a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800130c:	f042 0201 	orr.w	r2, r2, #1
 8001310:	641a      	str	r2, [r3, #64]	@ 0x40
 8001312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001314:	f002 0201 	and.w	r2, r2, #1
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	9401      	str	r4, [sp, #4]
 800131e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	631a      	str	r2, [r3, #48]	@ 0x30
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001330:	2320      	movs	r3, #32
 8001332:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001338:	2301      	movs	r3, #1
 800133a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	a903      	add	r1, sp, #12
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <HAL_TIM_Base_MspInit+0x94>)
 8001340:	f000 f9e8 	bl	8001714 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001344:	4622      	mov	r2, r4
 8001346:	4621      	mov	r1, r4
 8001348:	201c      	movs	r0, #28
 800134a:	f000 f9bb 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800134e:	201c      	movs	r0, #28
 8001350:	f000 f9c8 	bl	80016e4 <HAL_NVIC_EnableIRQ>
 8001354:	e7d3      	b.n	80012fe <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <HAL_TIM_Base_MspInit+0x98>)
 800135c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800135e:	f042 0204 	orr.w	r2, r2, #4
 8001362:	641a      	str	r2, [r3, #64]	@ 0x40
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	9b02      	ldr	r3, [sp, #8]
}
 800136e:	e7c6      	b.n	80012fe <HAL_TIM_Base_MspInit+0x1e>
 8001370:	40000800 	.word	0x40000800
 8001374:	40020000 	.word	0x40020000
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800137c:	b500      	push	{lr}
 800137e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	2300      	movs	r3, #0
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	9303      	str	r3, [sp, #12]
 8001388:	9304      	str	r3, [sp, #16]
 800138a:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 800138c:	6802      	ldr	r2, [r0, #0]
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_TIM_MspPostInit+0x4c>)
 8001390:	429a      	cmp	r2, r3
 8001392:	d002      	beq.n	800139a <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001394:	b007      	add	sp, #28
 8001396:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_TIM_MspPostInit+0x50>)
 80013a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013a2:	f042 0202 	orr.w	r2, r2, #2
 80013a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b2:	2340      	movs	r3, #64	@ 0x40
 80013b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	a901      	add	r1, sp, #4
 80013be:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <HAL_TIM_MspPostInit+0x54>)
 80013c0:	f000 f9a8 	bl	8001714 <HAL_GPIO_Init>
}
 80013c4:	e7e6      	b.n	8001394 <HAL_TIM_MspPostInit+0x18>
 80013c6:	bf00      	nop
 80013c8:	40000800 	.word	0x40000800
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b500      	push	{lr}
 80013d6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	2300      	movs	r3, #0
 80013da:	9303      	str	r3, [sp, #12]
 80013dc:	9304      	str	r3, [sp, #16]
 80013de:	9305      	str	r3, [sp, #20]
 80013e0:	9306      	str	r3, [sp, #24]
 80013e2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80013e4:	6802      	ldr	r2, [r0, #0]
 80013e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80013ea:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d002      	beq.n	80013f8 <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80013f2:	b009      	add	sp, #36	@ 0x24
 80013f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f8:	2100      	movs	r1, #0
 80013fa:	9101      	str	r1, [sp, #4]
 80013fc:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001402:	f042 0210 	orr.w	r2, r2, #16
 8001406:	645a      	str	r2, [r3, #68]	@ 0x44
 8001408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800140a:	f002 0210 	and.w	r2, r2, #16
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	9102      	str	r1, [sp, #8]
 8001414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	631a      	str	r2, [r3, #48]	@ 0x30
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001426:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800142a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001434:	2307      	movs	r3, #7
 8001436:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	a903      	add	r1, sp, #12
 800143a:	4802      	ldr	r0, [pc, #8]	@ (8001444 <HAL_UART_MspInit+0x70>)
 800143c:	f000 f96a 	bl	8001714 <HAL_GPIO_Init>
}
 8001440:	e7d7      	b.n	80013f2 <HAL_UART_MspInit+0x1e>
 8001442:	bf00      	nop
 8001444:	40020000 	.word	0x40020000

08001448 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler>

0800144a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler>

0800144c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler>

0800144e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler>

08001450 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler>

08001452 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 f8cd 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bd08      	pop	{r3, pc}

08001460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001462:	4802      	ldr	r0, [pc, #8]	@ (800146c <TIM2_IRQHandler+0xc>)
 8001464:	f000 fe8b 	bl	800217e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001468:	bd08      	pop	{r3, pc}
 800146a:	bf00      	nop
 800146c:	200002e0 	.word	0x200002e0

08001470 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001470:	2001      	movs	r0, #1
 8001472:	4770      	bx	lr

08001474 <_kill>:

int _kill(int pid, int sig)
{
 8001474:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001476:	f002 fb81 	bl	8003b7c <__errno>
 800147a:	2316      	movs	r3, #22
 800147c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800147e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001482:	bd08      	pop	{r3, pc}

08001484 <_exit>:

void _exit (int status)
{
 8001484:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001486:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800148a:	f7ff fff3 	bl	8001474 <_kill>
  while (1) {}    /* Make sure we hang here */
 800148e:	e7fe      	b.n	800148e <_exit+0xa>

08001490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	460c      	mov	r4, r1
 8001494:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2500      	movs	r5, #0
 8001498:	e006      	b.n	80014a8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800149a:	f3af 8000 	nop.w
 800149e:	4621      	mov	r1, r4
 80014a0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80014a6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a8:	42b5      	cmp	r5, r6
 80014aa:	dbf6      	blt.n	800149a <_read+0xa>
  }

  return len;
}
 80014ac:	4630      	mov	r0, r6
 80014ae:	bd70      	pop	{r4, r5, r6, pc}

080014b0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b4:	4770      	bx	lr

080014b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80014b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ba:	604b      	str	r3, [r1, #4]
  return 0;
}
 80014bc:	2000      	movs	r0, #0
 80014be:	4770      	bx	lr

080014c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80014c0:	2001      	movs	r0, #1
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80014c4:	2000      	movs	r0, #0
 80014c6:	4770      	bx	lr

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001500 <_sbrk+0x38>)
 80014ce:	490d      	ldr	r1, [pc, #52]	@ (8001504 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	480d      	ldr	r0, [pc, #52]	@ (8001508 <_sbrk+0x40>)
 80014d2:	6800      	ldr	r0, [r0, #0]
 80014d4:	b140      	cbz	r0, 80014e8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	480c      	ldr	r0, [pc, #48]	@ (8001508 <_sbrk+0x40>)
 80014d8:	6800      	ldr	r0, [r0, #0]
 80014da:	4403      	add	r3, r0
 80014dc:	1a52      	subs	r2, r2, r1
 80014de:	4293      	cmp	r3, r2
 80014e0:	d806      	bhi.n	80014f0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014e2:	4a09      	ldr	r2, [pc, #36]	@ (8001508 <_sbrk+0x40>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80014e6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <_sbrk+0x40>)
 80014ea:	4c08      	ldr	r4, [pc, #32]	@ (800150c <_sbrk+0x44>)
 80014ec:	6004      	str	r4, [r0, #0]
 80014ee:	e7f2      	b.n	80014d6 <_sbrk+0xe>
    errno = ENOMEM;
 80014f0:	f002 fb44 	bl	8003b7c <__errno>
 80014f4:	230c      	movs	r3, #12
 80014f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014fc:	e7f3      	b.n	80014e6 <_sbrk+0x1e>
 80014fe:	bf00      	nop
 8001500:	20020000 	.word	0x20020000
 8001504:	00000400 	.word	0x00000400
 8001508:	20000328 	.word	0x20000328
 800150c:	20000480 	.word	0x20000480

08001510 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001510:	4a03      	ldr	r2, [pc, #12]	@ (8001520 <SystemInit+0x10>)
 8001512:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001516:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800151a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800155c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001528:	f7ff fff2 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	@ (8001570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f002 fb19 	bl	8003b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001556:	f7ff fe1f 	bl	8001198 <main>
  bx  lr    
 800155a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800155c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8001568:	08005c28 	.word	0x08005c28
  ldr r2, =_sbss
 800156c:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8001570:	2000047c 	.word	0x2000047c

08001574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b510      	push	{r4, lr}
 800157a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_InitTick+0x40>)
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001584:	fbb3 f3f2 	udiv	r3, r3, r2
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <HAL_InitTick+0x44>)
 800158a:	6810      	ldr	r0, [r2, #0]
 800158c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001590:	f000 f8ac 	bl	80016ec <HAL_SYSTICK_Config>
 8001594:	b968      	cbnz	r0, 80015b2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	2c0f      	cmp	r4, #15
 8001598:	d901      	bls.n	800159e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800159a:	2001      	movs	r0, #1
 800159c:	e00a      	b.n	80015b4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159e:	2200      	movs	r2, #0
 80015a0:	4621      	mov	r1, r4
 80015a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a6:	f000 f88d 	bl	80016c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_InitTick+0x48>)
 80015ac:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015ae:	2000      	movs	r0, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
}
 80015b4:	bd10      	pop	{r4, pc}
 80015b6:	bf00      	nop
 80015b8:	2000005c 	.word	0x2000005c
 80015bc:	20000058 	.word	0x20000058
 80015c0:	20000060 	.word	0x20000060

080015c4 <HAL_Init>:
{
 80015c4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_Init+0x30>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015de:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f85d 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff ffc6 	bl	8001578 <HAL_InitTick>
  HAL_MspInit();
 80015ec:	f7ff fe5c 	bl	80012a8 <HAL_MspInit>
}
 80015f0:	2000      	movs	r0, #0
 80015f2:	bd08      	pop	{r3, pc}
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015f8:	4a03      	ldr	r2, [pc, #12]	@ (8001608 <HAL_IncTick+0x10>)
 80015fa:	6811      	ldr	r1, [r2, #0]
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <HAL_IncTick+0x14>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	440b      	add	r3, r1
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	2000032c 	.word	0x2000032c
 800160c:	2000005c 	.word	0x2000005c

08001610 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001610:	4b01      	ldr	r3, [pc, #4]	@ (8001618 <HAL_GetTick+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2000032c 	.word	0x2000032c

0800161c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800161c:	2800      	cmp	r0, #0
 800161e:	db07      	blt.n	8001630 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001620:	f000 021f 	and.w	r2, r0, #31
 8001624:	0940      	lsrs	r0, r0, #5
 8001626:	2301      	movs	r3, #1
 8001628:	4093      	lsls	r3, r2
 800162a:	4a02      	ldr	r2, [pc, #8]	@ (8001634 <__NVIC_EnableIRQ+0x18>)
 800162c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001638:	2800      	cmp	r0, #0
 800163a:	db08      	blt.n	800164e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	0109      	lsls	r1, r1, #4
 800163e:	b2c9      	uxtb	r1, r1
 8001640:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001644:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001648:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800164c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	f000 000f 	and.w	r0, r0, #15
 8001652:	0109      	lsls	r1, r1, #4
 8001654:	b2c9      	uxtb	r1, r1
 8001656:	4b01      	ldr	r3, [pc, #4]	@ (800165c <__NVIC_SetPriority+0x24>)
 8001658:	5419      	strb	r1, [r3, r0]
  }
}
 800165a:	4770      	bx	lr
 800165c:	e000ed14 	.word	0xe000ed14

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001662:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001666:	f1c0 0c07 	rsb	ip, r0, #7
 800166a:	f1bc 0f04 	cmp.w	ip, #4
 800166e:	bf28      	it	cs
 8001670:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001674:	1d03      	adds	r3, r0, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d90f      	bls.n	800169a <NVIC_EncodePriority+0x3a>
 800167a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001680:	fa0e f00c 	lsl.w	r0, lr, ip
 8001684:	ea21 0100 	bic.w	r1, r1, r0
 8001688:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168a:	fa0e fe03 	lsl.w	lr, lr, r3
 800168e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001692:	ea41 0002 	orr.w	r0, r1, r2
 8001696:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	2300      	movs	r3, #0
 800169c:	e7ee      	b.n	800167c <NVIC_EncodePriority+0x1c>
	...

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	0200      	lsls	r0, r0, #8
 80016ae:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80016bc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c4:	b510      	push	{r4, lr}
 80016c6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_NVIC_SetPriority+0x1c>)
 80016ca:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016cc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80016d0:	f7ff ffc6 	bl	8001660 <NVIC_EncodePriority>
 80016d4:	4601      	mov	r1, r0
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff ffae 	bl	8001638 <__NVIC_SetPriority>
}
 80016dc:	bd10      	pop	{r4, pc}
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f7ff ff99 	bl	800161c <__NVIC_EnableIRQ>
}
 80016ea:	bd08      	pop	{r3, pc}

080016ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	3801      	subs	r0, #1
 80016ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80016f2:	d20b      	bcs.n	800170c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80016f8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <HAL_SYSTICK_Config+0x24>)
 80016fc:	21f0      	movs	r1, #240	@ 0xf0
 80016fe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001702:	2000      	movs	r0, #0
 8001704:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	2207      	movs	r2, #7
 8001708:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800170c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001714:	2300      	movs	r3, #0
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f200 80d7 	bhi.w	80018ca <HAL_GPIO_Init+0x1b6>
{
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	e065      	b.n	80017ee <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001722:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001728:	2403      	movs	r4, #3
 800172a:	fa04 f40e 	lsl.w	r4, r4, lr
 800172e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	68cc      	ldr	r4, [r1, #12]
 8001734:	fa04 f40e 	lsl.w	r4, r4, lr
 8001738:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800173a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001742:	684a      	ldr	r2, [r1, #4]
 8001744:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800174c:	6042      	str	r2, [r0, #4]
 800174e:	e05c      	b.n	800180a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001750:	08dc      	lsrs	r4, r3, #3
 8001752:	3408      	adds	r4, #8
 8001754:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001758:	f003 0507 	and.w	r5, r3, #7
 800175c:	00ad      	lsls	r5, r5, #2
 800175e:	f04f 0e0f 	mov.w	lr, #15
 8001762:	fa0e fe05 	lsl.w	lr, lr, r5
 8001766:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800176a:	690a      	ldr	r2, [r1, #16]
 800176c:	40aa      	lsls	r2, r5
 800176e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001772:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001776:	e05c      	b.n	8001832 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001778:	2204      	movs	r2, #4
 800177a:	e000      	b.n	800177e <HAL_GPIO_Init+0x6a>
 800177c:	2200      	movs	r2, #0
 800177e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001782:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001784:	3402      	adds	r4, #2
 8001786:	4d51      	ldr	r5, [pc, #324]	@ (80018cc <HAL_GPIO_Init+0x1b8>)
 8001788:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178c:	4a50      	ldr	r2, [pc, #320]	@ (80018d0 <HAL_GPIO_Init+0x1bc>)
 800178e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001790:	ea6f 020c 	mvn.w	r2, ip
 8001794:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001798:	684e      	ldr	r6, [r1, #4]
 800179a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800179e:	d001      	beq.n	80017a4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80017a0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80017a4:	4c4a      	ldr	r4, [pc, #296]	@ (80018d0 <HAL_GPIO_Init+0x1bc>)
 80017a6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80017a8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ae:	684e      	ldr	r6, [r1, #4]
 80017b0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80017b4:	d001      	beq.n	80017ba <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80017b6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80017ba:	4c45      	ldr	r4, [pc, #276]	@ (80018d0 <HAL_GPIO_Init+0x1bc>)
 80017bc:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80017be:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c4:	684e      	ldr	r6, [r1, #4]
 80017c6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80017ca:	d001      	beq.n	80017d0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80017cc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80017d0:	4c3f      	ldr	r4, [pc, #252]	@ (80018d0 <HAL_GPIO_Init+0x1bc>)
 80017d2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d8:	684d      	ldr	r5, [r1, #4]
 80017da:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80017de:	d001      	beq.n	80017e4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80017e0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80017e4:	4c3a      	ldr	r4, [pc, #232]	@ (80018d0 <HAL_GPIO_Init+0x1bc>)
 80017e6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e8:	3301      	adds	r3, #1
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d86b      	bhi.n	80018c6 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80017ee:	2201      	movs	r2, #1
 80017f0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	680c      	ldr	r4, [r1, #0]
 80017f4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80017f8:	ea32 0404 	bics.w	r4, r2, r4
 80017fc:	d1f4      	bne.n	80017e8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	684c      	ldr	r4, [r1, #4]
 8001800:	f004 0403 	and.w	r4, r4, #3
 8001804:	3c01      	subs	r4, #1
 8001806:	2c01      	cmp	r4, #1
 8001808:	d98b      	bls.n	8001722 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180a:	684a      	ldr	r2, [r1, #4]
 800180c:	f002 0203 	and.w	r2, r2, #3
 8001810:	2a03      	cmp	r2, #3
 8001812:	d009      	beq.n	8001828 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001814:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	005d      	lsls	r5, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	40aa      	lsls	r2, r5
 800181c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	688a      	ldr	r2, [r1, #8]
 8001822:	40aa      	lsls	r2, r5
 8001824:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001826:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	684a      	ldr	r2, [r1, #4]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	2a02      	cmp	r2, #2
 8001830:	d08e      	beq.n	8001750 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001832:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001834:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f20e 	lsl.w	r2, r2, lr
 800183e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001842:	684a      	ldr	r2, [r1, #4]
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	fa02 f20e 	lsl.w	r2, r2, lr
 800184c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800184e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001850:	684a      	ldr	r2, [r1, #4]
 8001852:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001856:	d0c7      	beq.n	80017e8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001858:	2200      	movs	r2, #0
 800185a:	9201      	str	r2, [sp, #4]
 800185c:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <HAL_GPIO_Init+0x1c0>)
 800185e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001860:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001864:	6454      	str	r4, [r2, #68]	@ 0x44
 8001866:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001868:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800186c:	9201      	str	r2, [sp, #4]
 800186e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001870:	089c      	lsrs	r4, r3, #2
 8001872:	1ca5      	adds	r5, r4, #2
 8001874:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <HAL_GPIO_Init+0x1b8>)
 8001876:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187a:	f003 0e03 	and.w	lr, r3, #3
 800187e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f20e 	lsl.w	r2, r2, lr
 8001888:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <HAL_GPIO_Init+0x1c4>)
 800188e:	4290      	cmp	r0, r2
 8001890:	f43f af74 	beq.w	800177c <HAL_GPIO_Init+0x68>
 8001894:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001898:	4290      	cmp	r0, r2
 800189a:	d00e      	beq.n	80018ba <HAL_GPIO_Init+0x1a6>
 800189c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018a0:	4290      	cmp	r0, r2
 80018a2:	d00c      	beq.n	80018be <HAL_GPIO_Init+0x1aa>
 80018a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018a8:	4290      	cmp	r0, r2
 80018aa:	d00a      	beq.n	80018c2 <HAL_GPIO_Init+0x1ae>
 80018ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018b0:	4290      	cmp	r0, r2
 80018b2:	f43f af61 	beq.w	8001778 <HAL_GPIO_Init+0x64>
 80018b6:	2207      	movs	r2, #7
 80018b8:	e761      	b.n	800177e <HAL_GPIO_Init+0x6a>
 80018ba:	2201      	movs	r2, #1
 80018bc:	e75f      	b.n	800177e <HAL_GPIO_Init+0x6a>
 80018be:	2202      	movs	r2, #2
 80018c0:	e75d      	b.n	800177e <HAL_GPIO_Init+0x6a>
 80018c2:	2203      	movs	r2, #3
 80018c4:	e75b      	b.n	800177e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80018c6:	b002      	add	sp, #8
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
 80018ca:	4770      	bx	lr
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40013c00 	.word	0x40013c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020000 	.word	0x40020000

080018dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	b10a      	cbz	r2, 80018e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	6181      	str	r1, [r0, #24]
 80018e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e2:	0409      	lsls	r1, r1, #16
 80018e4:	6181      	str	r1, [r0, #24]
  }
}
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018e8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ea:	ea01 0203 	and.w	r2, r1, r3
 80018ee:	ea21 0103 	bic.w	r1, r1, r3
 80018f2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80018f6:	6181      	str	r1, [r0, #24]
}
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018fc:	2800      	cmp	r0, #0
 80018fe:	f000 81e0 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x3c6>
{
 8001902:	b570      	push	{r4, r5, r6, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	f013 0f01 	tst.w	r3, #1
 800190e:	d03b      	beq.n	8001988 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001910:	4b9f      	ldr	r3, [pc, #636]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b04      	cmp	r3, #4
 800191a:	d02c      	beq.n	8001976 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191c:	4b9c      	ldr	r3, [pc, #624]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001924:	2b08      	cmp	r3, #8
 8001926:	d021      	beq.n	800196c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	6863      	ldr	r3, [r4, #4]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800192e:	d04f      	beq.n	80019d0 <HAL_RCC_OscConfig+0xd4>
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001934:	d052      	beq.n	80019dc <HAL_RCC_OscConfig+0xe0>
 8001936:	4b96      	ldr	r3, [pc, #600]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001946:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001948:	6863      	ldr	r3, [r4, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d050      	beq.n	80019f0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff fe5f 	bl	8001610 <HAL_GetTick>
 8001952:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001954:	4b8e      	ldr	r3, [pc, #568]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800195c:	d114      	bne.n	8001988 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195e:	f7ff fe57 	bl	8001610 <HAL_GetTick>
 8001962:	1b40      	subs	r0, r0, r5
 8001964:	2864      	cmp	r0, #100	@ 0x64
 8001966:	d9f5      	bls.n	8001954 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001968:	2003      	movs	r0, #3
 800196a:	e1b1      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196c:	4b88      	ldr	r3, [pc, #544]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001974:	d0d8      	beq.n	8001928 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	4b86      	ldr	r3, [pc, #536]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800197e:	d003      	beq.n	8001988 <HAL_RCC_OscConfig+0x8c>
 8001980:	6863      	ldr	r3, [r4, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 819f 	beq.w	8001cc6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f013 0f02 	tst.w	r3, #2
 800198e:	d054      	beq.n	8001a3a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001990:	4b7f      	ldr	r3, [pc, #508]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f013 0f0c 	tst.w	r3, #12
 8001998:	d03e      	beq.n	8001a18 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d033      	beq.n	8001a0e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a6:	68e3      	ldr	r3, [r4, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d068      	beq.n	8001a7e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b79      	ldr	r3, [pc, #484]	@ (8001b94 <HAL_RCC_OscConfig+0x298>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff fe2d 	bl	8001610 <HAL_GetTick>
 80019b6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b75      	ldr	r3, [pc, #468]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f013 0f02 	tst.w	r3, #2
 80019c0:	d154      	bne.n	8001a6c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff fe25 	bl	8001610 <HAL_GetTick>
 80019c6:	1b40      	subs	r0, r0, r5
 80019c8:	2802      	cmp	r0, #2
 80019ca:	d9f5      	bls.n	80019b8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80019cc:	2003      	movs	r0, #3
 80019ce:	e17f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e7b5      	b.n	8001948 <HAL_RCC_OscConfig+0x4c>
 80019dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e7ab      	b.n	8001948 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80019f0:	f7ff fe0e 	bl	8001610 <HAL_GetTick>
 80019f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80019fe:	d0c3      	beq.n	8001988 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff fe06 	bl	8001610 <HAL_GetTick>
 8001a04:	1b40      	subs	r0, r0, r5
 8001a06:	2864      	cmp	r0, #100	@ 0x64
 8001a08:	d9f5      	bls.n	80019f6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	e160      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b60      	ldr	r3, [pc, #384]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001a16:	d1c6      	bne.n	80019a6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a18:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f013 0f02 	tst.w	r3, #2
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_OscConfig+0x12e>
 8001a22:	68e3      	ldr	r3, [r4, #12]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f040 8150 	bne.w	8001cca <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4a59      	ldr	r2, [pc, #356]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001a32:	6921      	ldr	r1, [r4, #16]
 8001a34:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a38:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	f013 0f08 	tst.w	r3, #8
 8001a40:	d042      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a42:	6963      	ldr	r3, [r4, #20]
 8001a44:	b36b      	cbz	r3, 8001aa2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_RCC_OscConfig+0x298>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fddf 	bl	8001610 <HAL_GetTick>
 8001a52:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a54:	4b4e      	ldr	r3, [pc, #312]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a58:	f013 0f02 	tst.w	r3, #2
 8001a5c:	d134      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fdd7 	bl	8001610 <HAL_GetTick>
 8001a62:	1b40      	subs	r0, r0, r5
 8001a64:	2802      	cmp	r0, #2
 8001a66:	d9f5      	bls.n	8001a54 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001a68:	2003      	movs	r0, #3
 8001a6a:	e131      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001a6e:	6813      	ldr	r3, [r2, #0]
 8001a70:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001a74:	6921      	ldr	r1, [r4, #16]
 8001a76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e7dd      	b.n	8001a3a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b45      	ldr	r3, [pc, #276]	@ (8001b94 <HAL_RCC_OscConfig+0x298>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a84:	f7ff fdc4 	bl	8001610 <HAL_GetTick>
 8001a88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f013 0f02 	tst.w	r3, #2
 8001a92:	d0d2      	beq.n	8001a3a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a94:	f7ff fdbc 	bl	8001610 <HAL_GetTick>
 8001a98:	1b40      	subs	r0, r0, r5
 8001a9a:	2802      	cmp	r0, #2
 8001a9c:	d9f5      	bls.n	8001a8a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	e116      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <HAL_RCC_OscConfig+0x298>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fdb1 	bl	8001610 <HAL_GetTick>
 8001aae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab4:	f013 0f02 	tst.w	r3, #2
 8001ab8:	d006      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff fda9 	bl	8001610 <HAL_GetTick>
 8001abe:	1b40      	subs	r0, r0, r5
 8001ac0:	2802      	cmp	r0, #2
 8001ac2:	d9f5      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	e103      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	f013 0f04 	tst.w	r3, #4
 8001ace:	d077      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001ad8:	d133      	bne.n	8001b42 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ae2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001af2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_RCC_OscConfig+0x29c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001afc:	d023      	beq.n	8001b46 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	68a3      	ldr	r3, [r4, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d034      	beq.n	8001b6e <HAL_RCC_OscConfig+0x272>
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d038      	beq.n	8001b7a <HAL_RCC_OscConfig+0x27e>
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001b0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b14:	f022 0204 	bic.w	r2, r2, #4
 8001b18:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1a:	68a3      	ldr	r3, [r4, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03d      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7ff fd76 	bl	8001610 <HAL_GetTick>
 8001b24:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	f013 0f02 	tst.w	r3, #2
 8001b2e:	d146      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b30:	f7ff fd6e 	bl	8001610 <HAL_GetTick>
 8001b34:	1b80      	subs	r0, r0, r6
 8001b36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b3a:	4298      	cmp	r0, r3
 8001b3c:	d9f3      	bls.n	8001b26 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2003      	movs	r0, #3
 8001b40:	e0c6      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001b42:	2500      	movs	r5, #0
 8001b44:	e7d6      	b.n	8001af4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b46:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <HAL_RCC_OscConfig+0x29c>)
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b50:	f7ff fd5e 	bl	8001610 <HAL_GetTick>
 8001b54:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_RCC_OscConfig+0x29c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b5e:	d1ce      	bne.n	8001afe <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b60:	f7ff fd56 	bl	8001610 <HAL_GetTick>
 8001b64:	1b80      	subs	r0, r0, r6
 8001b66:	2802      	cmp	r0, #2
 8001b68:	d9f5      	bls.n	8001b56 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	e0b0      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001b70:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b78:	e7cf      	b.n	8001b1a <HAL_RCC_OscConfig+0x21e>
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_OscConfig+0x294>)
 8001b7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b7e:	f042 0204 	orr.w	r2, r2, #4
 8001b82:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001b8c:	e7c5      	b.n	8001b1a <HAL_RCC_OscConfig+0x21e>
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	42470000 	.word	0x42470000
 8001b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fd38 	bl	8001610 <HAL_GetTick>
 8001ba0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba2:	4b52      	ldr	r3, [pc, #328]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba6:	f013 0f02 	tst.w	r3, #2
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff fd30 	bl	8001610 <HAL_GetTick>
 8001bb0:	1b80      	subs	r0, r0, r6
 8001bb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001bb6:	4298      	cmp	r0, r3
 8001bb8:	d9f3      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001bba:	2003      	movs	r0, #3
 8001bbc:	e088      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bbe:	b9ed      	cbnz	r5, 8001bfc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc0:	69a3      	ldr	r3, [r4, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8083 	beq.w	8001cce <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bc8:	4a48      	ldr	r2, [pc, #288]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001bca:	6892      	ldr	r2, [r2, #8]
 8001bcc:	f002 020c 	and.w	r2, r2, #12
 8001bd0:	2a08      	cmp	r2, #8
 8001bd2:	d051      	beq.n	8001c78 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d017      	beq.n	8001c08 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b45      	ldr	r3, [pc, #276]	@ (8001cf0 <HAL_RCC_OscConfig+0x3f4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fd17 	bl	8001610 <HAL_GetTick>
 8001be2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be4:	4b41      	ldr	r3, [pc, #260]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001bec:	d042      	beq.n	8001c74 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff fd0f 	bl	8001610 <HAL_GetTick>
 8001bf2:	1b00      	subs	r0, r0, r4
 8001bf4:	2802      	cmp	r0, #2
 8001bf6:	d9f5      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	e069      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001bfe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	e7db      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <HAL_RCC_OscConfig+0x3f4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fcff 	bl	8001610 <HAL_GetTick>
 8001c12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c14:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c1c:	d006      	beq.n	8001c2c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff fcf7 	bl	8001610 <HAL_GetTick>
 8001c22:	1b40      	subs	r0, r0, r5
 8001c24:	2802      	cmp	r0, #2
 8001c26:	d9f5      	bls.n	8001c14 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001c28:	2003      	movs	r0, #3
 8001c2a:	e051      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2c:	69e3      	ldr	r3, [r4, #28]
 8001c2e:	6a22      	ldr	r2, [r4, #32]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001c34:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c38:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001c3a:	0852      	lsrs	r2, r2, #1
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001c44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c48:	4a28      	ldr	r2, [pc, #160]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001c4a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_RCC_OscConfig+0x3f4>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001c52:	f7ff fcdd 	bl	8001610 <HAL_GetTick>
 8001c56:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fcd5 	bl	8001610 <HAL_GetTick>
 8001c66:	1b00      	subs	r0, r0, r4
 8001c68:	2802      	cmp	r0, #2
 8001c6a:	d9f5      	bls.n	8001c58 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	e02f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c70:	2000      	movs	r0, #0
 8001c72:	e02d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
 8001c74:	2000      	movs	r0, #0
 8001c76:	e02b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d02b      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x3f0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c80:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8001c84:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c86:	4291      	cmp	r1, r2
 8001c88:	d126      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c8e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	428a      	cmp	r2, r1
 8001c92:	d123      	bne.n	8001cdc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c94:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c96:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001ca0:	d11e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001ca6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cb2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8001cb6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001cbc:	d114      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	e006      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001cc2:	2001      	movs	r0, #1
}
 8001cc4:	4770      	bx	lr
        return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	e002      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001cce:	2000      	movs	r0, #0
}
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	e7fb      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
 8001cda:	e7f9      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
 8001cdc:	2001      	movs	r0, #1
 8001cde:	e7f7      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	e7f5      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e7f3      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
 8001ce8:	2001      	movs	r0, #1
 8001cea:	e7f1      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3d4>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	42470000 	.word	0x42470000

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d041      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x92>
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d141      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d06:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001d14:	d012      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d18:	6859      	ldr	r1, [r3, #4]
 8001d1a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d1e:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d20:	2300      	movs	r3, #0
 8001d22:	fba1 0100 	umull	r0, r1, r1, r0
 8001d26:	f7fe ff47 	bl	8000bb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d32:	3301      	adds	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001d36:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001d3a:	e027      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d3e:	6858      	ldr	r0, [r3, #4]
 8001d40:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001d44:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001d48:	ebbc 0c00 	subs.w	ip, ip, r0
 8001d4c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001d50:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001d54:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001d58:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001d5c:	ebb1 010c 	subs.w	r1, r1, ip
 8001d60:	eb63 030e 	sbc.w	r3, r3, lr
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d6a:	00c9      	lsls	r1, r1, #3
 8001d6c:	eb11 0c00 	adds.w	ip, r1, r0
 8001d70:	f143 0300 	adc.w	r3, r3, #0
 8001d74:	0299      	lsls	r1, r3, #10
 8001d76:	2300      	movs	r3, #0
 8001d78:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001d7c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001d80:	f7fe ff1a 	bl	8000bb8 <__aeabi_uldivmod>
 8001d84:	e7d1      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001d86:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d8a:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d8c:	bd08      	pop	{r3, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	017d7840 	.word	0x017d7840
 8001d98:	00f42400 	.word	0x00f42400

08001d9c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	f000 809b 	beq.w	8001ed8 <HAL_RCC_ClockConfig+0x13c>
{
 8001da2:	b570      	push	{r4, r5, r6, lr}
 8001da4:	460d      	mov	r5, r1
 8001da6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee8 <HAL_RCC_ClockConfig+0x14c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	428b      	cmp	r3, r1
 8001db2:	d208      	bcs.n	8001dc6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db4:	b2cb      	uxtb	r3, r1
 8001db6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <HAL_RCC_ClockConfig+0x14c>)
 8001db8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	f040 808b 	bne.w	8001edc <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	f013 0f02 	tst.w	r3, #2
 8001dcc:	d017      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dce:	f013 0f04 	tst.w	r3, #4
 8001dd2:	d004      	beq.n	8001dde <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd4:	4a45      	ldr	r2, [pc, #276]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001dd6:	6893      	ldr	r3, [r2, #8]
 8001dd8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ddc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	f013 0f08 	tst.w	r3, #8
 8001de4:	d004      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de6:	4a41      	ldr	r2, [pc, #260]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001de8:	6893      	ldr	r3, [r2, #8]
 8001dea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dee:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4a3e      	ldr	r2, [pc, #248]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001df2:	6893      	ldr	r3, [r2, #8]
 8001df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001df8:	68a1      	ldr	r1, [r4, #8]
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	f013 0f01 	tst.w	r3, #1
 8001e04:	d032      	beq.n	8001e6c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d021      	beq.n	8001e50 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0c:	1e9a      	subs	r2, r3, #2
 8001e0e:	2a01      	cmp	r2, #1
 8001e10:	d925      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4a36      	ldr	r2, [pc, #216]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	f012 0f02 	tst.w	r2, #2
 8001e1a:	d061      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1c:	4933      	ldr	r1, [pc, #204]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001e1e:	688a      	ldr	r2, [r1, #8]
 8001e20:	f022 0203 	bic.w	r2, r2, #3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001e28:	f7ff fbf2 	bl	8001610 <HAL_GetTick>
 8001e2c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	6862      	ldr	r2, [r4, #4]
 8001e38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e3c:	d016      	beq.n	8001e6c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7ff fbe7 	bl	8001610 <HAL_GetTick>
 8001e42:	1b80      	subs	r0, r0, r6
 8001e44:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e48:	4298      	cmp	r0, r3
 8001e4a:	d9f0      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	e042      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e50:	4a26      	ldr	r2, [pc, #152]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001e58:	d1e0      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	e03b      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4a23      	ldr	r2, [pc, #140]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001e66:	d1d9      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	e034      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <HAL_RCC_ClockConfig+0x14c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	42ab      	cmp	r3, r5
 8001e76:	d907      	bls.n	8001e88 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	b2ea      	uxtb	r2, r5
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <HAL_RCC_ClockConfig+0x14c>)
 8001e7c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	42ab      	cmp	r3, r5
 8001e86:	d12d      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	f013 0f04 	tst.w	r3, #4
 8001e8e:	d006      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001e92:	6893      	ldr	r3, [r2, #8]
 8001e94:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001e98:	68e1      	ldr	r1, [r4, #12]
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	f013 0f08 	tst.w	r3, #8
 8001ea4:	d007      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea6:	4a11      	ldr	r2, [pc, #68]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001ea8:	6893      	ldr	r3, [r2, #8]
 8001eaa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001eae:	6921      	ldr	r1, [r4, #16]
 8001eb0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001eb4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eb6:	f7ff ff1d 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001eba:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <HAL_RCC_ClockConfig+0x150>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <HAL_RCC_ClockConfig+0x154>)
 8001ec4:	5cd3      	ldrb	r3, [r2, r3]
 8001ec6:	40d8      	lsrs	r0, r3
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_RCC_ClockConfig+0x158>)
 8001eca:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_RCC_ClockConfig+0x15c>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	f7ff fb52 	bl	8001578 <HAL_InitTick>
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
}
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
}
 8001eda:	4770      	bx	lr
      return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7fa      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	e7f8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e7f6      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x13a>
 8001ee8:	40023c00 	.word	0x40023c00
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08005898 	.word	0x08005898
 8001ef4:	20000058 	.word	0x20000058
 8001ef8:	20000060 	.word	0x20000060

08001efc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001efc:	4b01      	ldr	r3, [pc, #4]	@ (8001f04 <HAL_RCC_GetHCLKFreq+0x8>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000058 	.word	0x20000058

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f0a:	f7ff fff7 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f0e:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f16:	4a03      	ldr	r2, [pc, #12]	@ (8001f24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f1a:	40d8      	lsrs	r0, r3
 8001f1c:	bd08      	pop	{r3, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	08005890 	.word	0x08005890

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f2a:	f7ff ffe7 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f2e:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f36:	4a03      	ldr	r2, [pc, #12]	@ (8001f44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f3a:	40d8      	lsrs	r0, r3
 8001f3c:	bd08      	pop	{r3, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08005890 	.word	0x08005890

08001f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f48:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f4a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4c:	6a03      	ldr	r3, [r0, #32]
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f54:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f56:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f58:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f5c:	680c      	ldr	r4, [r1, #0]
 8001f5e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f60:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f64:	688b      	ldr	r3, [r1, #8]
 8001f66:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f68:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <TIM_OC1_SetConfig+0x50>)
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d006      	beq.n	8001f7c <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f70:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f72:	684a      	ldr	r2, [r1, #4]
 8001f74:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f76:	6203      	str	r3, [r0, #32]
}
 8001f78:	bc30      	pop	{r4, r5}
 8001f7a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f7c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f80:	68ca      	ldr	r2, [r1, #12]
 8001f82:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f84:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f88:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001f8c:	694a      	ldr	r2, [r1, #20]
 8001f8e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f90:	698d      	ldr	r5, [r1, #24]
 8001f92:	4315      	orrs	r5, r2
 8001f94:	e7eb      	b.n	8001f6e <TIM_OC1_SetConfig+0x26>
 8001f96:	bf00      	nop
 8001f98:	40010000 	.word	0x40010000

08001f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f9c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f9e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fa0:	6a02      	ldr	r2, [r0, #32]
 8001fa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001faa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fac:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fb0:	680d      	ldr	r5, [r1, #0]
 8001fb2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fb8:	688a      	ldr	r2, [r1, #8]
 8001fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <TIM_OC3_SetConfig+0x58>)
 8001fc0:	4290      	cmp	r0, r2
 8001fc2:	d006      	beq.n	8001fd2 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fc6:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fc8:	684a      	ldr	r2, [r1, #4]
 8001fca:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fcc:	6203      	str	r3, [r0, #32]
}
 8001fce:	bc30      	pop	{r4, r5}
 8001fd0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fd6:	68ca      	ldr	r2, [r1, #12]
 8001fd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fe0:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fe4:	694a      	ldr	r2, [r1, #20]
 8001fe6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fea:	698a      	ldr	r2, [r1, #24]
 8001fec:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8001ff0:	e7e8      	b.n	8001fc4 <TIM_OC3_SetConfig+0x28>
 8001ff2:	bf00      	nop
 8001ff4:	40010000 	.word	0x40010000

08001ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ff8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ffc:	6a02      	ldr	r2, [r0, #32]
 8001ffe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002002:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002004:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002006:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002008:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800200c:	680d      	ldr	r5, [r1, #0]
 800200e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002012:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002016:	688d      	ldr	r5, [r1, #8]
 8002018:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201c:	4d07      	ldr	r5, [pc, #28]	@ (800203c <TIM_OC4_SetConfig+0x44>)
 800201e:	42a8      	cmp	r0, r5
 8002020:	d006      	beq.n	8002030 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002022:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002024:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002026:	684a      	ldr	r2, [r1, #4]
 8002028:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800202a:	6203      	str	r3, [r0, #32]
}
 800202c:	bc30      	pop	{r4, r5}
 800202e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002030:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002034:	694d      	ldr	r5, [r1, #20]
 8002036:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800203a:	e7f2      	b.n	8002022 <TIM_OC4_SetConfig+0x2a>
 800203c:	40010000 	.word	0x40010000

08002040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002040:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002042:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002044:	6a04      	ldr	r4, [r0, #32]
 8002046:	f024 0401 	bic.w	r4, r4, #1
 800204a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800204e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002052:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002056:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800205a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800205c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800205e:	6203      	str	r3, [r0, #32]
}
 8002060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002064:	4770      	bx	lr

08002066 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002066:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002068:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800206a:	6a04      	ldr	r4, [r0, #32]
 800206c:	f024 0410 	bic.w	r4, r4, #16
 8002070:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002072:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002074:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002078:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800207c:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002080:	031b      	lsls	r3, r3, #12
 8002082:	b29b      	uxth	r3, r3
 8002084:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002088:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800208c:	0109      	lsls	r1, r1, #4
 800208e:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8002092:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002094:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002096:	6201      	str	r1, [r0, #32]
}
 8002098:	bc30      	pop	{r4, r5}
 800209a:	4770      	bx	lr

0800209c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800209c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800209e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020a0:	6a04      	ldr	r4, [r0, #32]
 80020a2:	f024 0410 	bic.w	r4, r4, #16
 80020a6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020aa:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020ae:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80020b6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020ba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80020bc:	6203      	str	r3, [r0, #32]
}
 80020be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80020c4:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80020c6:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020c8:	6a04      	ldr	r4, [r0, #32]
 80020ca:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 80020ce:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020d0:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80020d2:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80020d6:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80020da:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80020e6:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80020ea:	0209      	lsls	r1, r1, #8
 80020ec:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 80020f0:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80020f2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80020f4:	6201      	str	r1, [r0, #32]
}
 80020f6:	bc30      	pop	{r4, r5}
 80020f8:	4770      	bx	lr

080020fa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80020fa:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80020fc:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020fe:	6a04      	ldr	r4, [r0, #32]
 8002100:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8002104:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002106:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002108:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800210c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002110:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002114:	031b      	lsls	r3, r3, #12
 8002116:	b29b      	uxth	r3, r3
 8002118:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800211c:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002120:	0309      	lsls	r1, r1, #12
 8002122:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 8002126:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002128:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800212a:	6201      	str	r1, [r0, #32]
}
 800212c:	bc30      	pop	{r4, r5}
 800212e:	4770      	bx	lr

08002130 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002130:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002136:	430b      	orrs	r3, r1
 8002138:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800213c:	6083      	str	r3, [r0, #8]
}
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_PWM_MspInit>:
}
 8002140:	4770      	bx	lr

08002142 <HAL_TIM_IC_MspInit>:
}
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8002144:	290c      	cmp	r1, #12
 8002146:	d814      	bhi.n	8002172 <HAL_TIM_ReadCapturedValue+0x2e>
 8002148:	e8df f001 	tbb	[pc, r1]
 800214c:	13131307 	.word	0x13131307
 8002150:	1313130a 	.word	0x1313130a
 8002154:	1313130d 	.word	0x1313130d
 8002158:	10          	.byte	0x10
 8002159:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800215a:	6803      	ldr	r3, [r0, #0]
 800215c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 800215e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8002160:	6803      	ldr	r3, [r0, #0]
 8002162:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8002164:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 800216a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 800216c:	6803      	ldr	r3, [r0, #0]
 800216e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8002170:	4770      	bx	lr
  switch (Channel)
 8002172:	2000      	movs	r0, #0
}
 8002174:	4770      	bx	lr

08002176 <HAL_TIM_PeriodElapsedCallback>:
}
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002178:	4770      	bx	lr

0800217a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_TriggerCallback>:
}
 800217c:	4770      	bx	lr

0800217e <HAL_TIM_IRQHandler>:
{
 800217e:	b570      	push	{r4, r5, r6, lr}
 8002180:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002182:	6803      	ldr	r3, [r0, #0]
 8002184:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002186:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002188:	f015 0f02 	tst.w	r5, #2
 800218c:	d010      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800218e:	f016 0f02 	tst.w	r6, #2
 8002192:	d00d      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002194:	f06f 0202 	mvn.w	r2, #2
 8002198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219a:	2301      	movs	r3, #1
 800219c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800219e:	6803      	ldr	r3, [r0, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f013 0f03 	tst.w	r3, #3
 80021a6:	d05e      	beq.n	8002266 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80021a8:	f7fe fede 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ac:	2300      	movs	r3, #0
 80021ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021b0:	f015 0f04 	tst.w	r5, #4
 80021b4:	d012      	beq.n	80021dc <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021b6:	f016 0f04 	tst.w	r6, #4
 80021ba:	d00f      	beq.n	80021dc <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	f06f 0204 	mvn.w	r2, #4
 80021c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80021d0:	d04f      	beq.n	8002272 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7fe fec8 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d8:	2300      	movs	r3, #0
 80021da:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021dc:	f015 0f08 	tst.w	r5, #8
 80021e0:	d012      	beq.n	8002208 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021e2:	f016 0f08 	tst.w	r6, #8
 80021e6:	d00f      	beq.n	8002208 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	f06f 0208 	mvn.w	r2, #8
 80021ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f0:	2304      	movs	r3, #4
 80021f2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f013 0f03 	tst.w	r3, #3
 80021fc:	d040      	beq.n	8002280 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	4620      	mov	r0, r4
 8002200:	f7fe feb2 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002204:	2300      	movs	r3, #0
 8002206:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002208:	f015 0f10 	tst.w	r5, #16
 800220c:	d012      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800220e:	f016 0f10 	tst.w	r6, #16
 8002212:	d00f      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f06f 0210 	mvn.w	r2, #16
 800221a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800221c:	2308      	movs	r3, #8
 800221e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002228:	d031      	beq.n	800228e <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800222a:	4620      	mov	r0, r4
 800222c:	f7fe fe9c 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002230:	2300      	movs	r3, #0
 8002232:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002234:	f015 0f01 	tst.w	r5, #1
 8002238:	d002      	beq.n	8002240 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800223a:	f016 0f01 	tst.w	r6, #1
 800223e:	d12d      	bne.n	800229c <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002240:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002244:	d002      	beq.n	800224c <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002246:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800224a:	d12f      	bne.n	80022ac <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800224c:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002250:	d002      	beq.n	8002258 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002252:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002256:	d131      	bne.n	80022bc <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002258:	f015 0f20 	tst.w	r5, #32
 800225c:	d002      	beq.n	8002264 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800225e:	f016 0f20 	tst.w	r6, #32
 8002262:	d133      	bne.n	80022cc <HAL_TIM_IRQHandler+0x14e>
}
 8002264:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	f7ff ff87 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff ff85 	bl	800217a <HAL_TIM_PWM_PulseFinishedCallback>
 8002270:	e79c      	b.n	80021ac <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	4620      	mov	r0, r4
 8002274:	f7ff ff80 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff ff7e 	bl	800217a <HAL_TIM_PWM_PulseFinishedCallback>
 800227e:	e7ab      	b.n	80021d8 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff ff79 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff ff77 	bl	800217a <HAL_TIM_PWM_PulseFinishedCallback>
 800228c:	e7ba      	b.n	8002204 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff ff72 	bl	8002178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff ff70 	bl	800217a <HAL_TIM_PWM_PulseFinishedCallback>
 800229a:	e7c9      	b.n	8002230 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	f06f 0201 	mvn.w	r2, #1
 80022a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7ff ff66 	bl	8002176 <HAL_TIM_PeriodElapsedCallback>
 80022aa:	e7c9      	b.n	8002240 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022b4:	4620      	mov	r0, r4
 80022b6:	f000 fc1e 	bl	8002af6 <HAL_TIMEx_BreakCallback>
 80022ba:	e7c7      	b.n	800224c <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff59 	bl	800217c <HAL_TIM_TriggerCallback>
 80022ca:	e7c5      	b.n	8002258 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	f06f 0220 	mvn.w	r2, #32
 80022d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80022d4:	4620      	mov	r0, r4
 80022d6:	f000 fc0d 	bl	8002af4 <HAL_TIMEx_CommutCallback>
}
 80022da:	e7c3      	b.n	8002264 <HAL_TIM_IRQHandler+0xe6>

080022dc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80022dc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022de:	4a29      	ldr	r2, [pc, #164]	@ (8002384 <TIM_Base_SetConfig+0xa8>)
 80022e0:	4290      	cmp	r0, r2
 80022e2:	d00e      	beq.n	8002302 <TIM_Base_SetConfig+0x26>
 80022e4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80022e8:	d00b      	beq.n	8002302 <TIM_Base_SetConfig+0x26>
 80022ea:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80022ee:	4290      	cmp	r0, r2
 80022f0:	d007      	beq.n	8002302 <TIM_Base_SetConfig+0x26>
 80022f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022f6:	4290      	cmp	r0, r2
 80022f8:	d003      	beq.n	8002302 <TIM_Base_SetConfig+0x26>
 80022fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022fe:	4290      	cmp	r0, r2
 8002300:	d103      	bne.n	800230a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002306:	684a      	ldr	r2, [r1, #4]
 8002308:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230a:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <TIM_Base_SetConfig+0xa8>)
 800230c:	4290      	cmp	r0, r2
 800230e:	d01a      	beq.n	8002346 <TIM_Base_SetConfig+0x6a>
 8002310:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002314:	d017      	beq.n	8002346 <TIM_Base_SetConfig+0x6a>
 8002316:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800231a:	4290      	cmp	r0, r2
 800231c:	d013      	beq.n	8002346 <TIM_Base_SetConfig+0x6a>
 800231e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002322:	4290      	cmp	r0, r2
 8002324:	d00f      	beq.n	8002346 <TIM_Base_SetConfig+0x6a>
 8002326:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800232a:	4290      	cmp	r0, r2
 800232c:	d00b      	beq.n	8002346 <TIM_Base_SetConfig+0x6a>
 800232e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002332:	4290      	cmp	r0, r2
 8002334:	d007      	beq.n	8002346 <TIM_Base_SetConfig+0x6a>
 8002336:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800233a:	4290      	cmp	r0, r2
 800233c:	d003      	beq.n	8002346 <TIM_Base_SetConfig+0x6a>
 800233e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002342:	4290      	cmp	r0, r2
 8002344:	d103      	bne.n	800234e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234a:	68ca      	ldr	r2, [r1, #12]
 800234c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800234e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002352:	694a      	ldr	r2, [r1, #20]
 8002354:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002356:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002358:	688b      	ldr	r3, [r1, #8]
 800235a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800235c:	680b      	ldr	r3, [r1, #0]
 800235e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <TIM_Base_SetConfig+0xa8>)
 8002362:	4298      	cmp	r0, r3
 8002364:	d00a      	beq.n	800237c <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8002366:	2301      	movs	r3, #1
 8002368:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800236a:	6903      	ldr	r3, [r0, #16]
 800236c:	f013 0f01 	tst.w	r3, #1
 8002370:	d003      	beq.n	800237a <TIM_Base_SetConfig+0x9e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002372:	6903      	ldr	r3, [r0, #16]
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6103      	str	r3, [r0, #16]
}
 800237a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	690b      	ldr	r3, [r1, #16]
 800237e:	6303      	str	r3, [r0, #48]	@ 0x30
 8002380:	e7f1      	b.n	8002366 <TIM_Base_SetConfig+0x8a>
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000

08002388 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002388:	b340      	cbz	r0, 80023dc <HAL_TIM_Base_Init+0x54>
{
 800238a:	b510      	push	{r4, lr}
 800238c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800238e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002392:	b1f3      	cbz	r3, 80023d2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	2302      	movs	r3, #2
 8002396:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239a:	4621      	mov	r1, r4
 800239c:	f851 0b04 	ldr.w	r0, [r1], #4
 80023a0:	f7ff ff9c 	bl	80022dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80023ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80023b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80023b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80023be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80023c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80023ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80023ce:	2000      	movs	r0, #0
}
 80023d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80023d2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80023d6:	f7fe ff83 	bl	80012e0 <HAL_TIM_Base_MspInit>
 80023da:	e7db      	b.n	8002394 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80023dc:	2001      	movs	r0, #1
}
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80023e0:	b340      	cbz	r0, 8002434 <HAL_TIM_PWM_Init+0x54>
{
 80023e2:	b510      	push	{r4, lr}
 80023e4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80023ea:	b1f3      	cbz	r3, 800242a <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	2302      	movs	r3, #2
 80023ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	4621      	mov	r1, r4
 80023f4:	f851 0b04 	ldr.w	r0, [r1], #4
 80023f8:	f7ff ff70 	bl	80022dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002402:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002406:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800240a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800240e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002412:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800241a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800241e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002422:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002426:	2000      	movs	r0, #0
}
 8002428:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800242a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800242e:	f7ff fe87 	bl	8002140 <HAL_TIM_PWM_MspInit>
 8002432:	e7db      	b.n	80023ec <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002434:	2001      	movs	r0, #1
}
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8002438:	b340      	cbz	r0, 800248c <HAL_TIM_IC_Init+0x54>
{
 800243a:	b510      	push	{r4, lr}
 800243c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002442:	b1f3      	cbz	r3, 8002482 <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244a:	4621      	mov	r1, r4
 800244c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002450:	f7ff ff44 	bl	80022dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002454:	2301      	movs	r3, #1
 8002456:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800245e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002462:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002466:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800246e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002472:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002476:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800247a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800247e:	2000      	movs	r0, #0
}
 8002480:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002482:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002486:	f7ff fe5c 	bl	8002142 <HAL_TIM_IC_MspInit>
 800248a:	e7db      	b.n	8002444 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
}
 800248e:	4770      	bx	lr

08002490 <TIM_OC2_SetConfig>:
{
 8002490:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002492:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002494:	6a02      	ldr	r2, [r0, #32]
 8002496:	f022 0210 	bic.w	r2, r2, #16
 800249a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800249c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800249e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024a0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a4:	680d      	ldr	r5, [r1, #0]
 80024a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80024aa:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024ae:	688d      	ldr	r5, [r1, #8]
 80024b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024b4:	4d0c      	ldr	r5, [pc, #48]	@ (80024e8 <TIM_OC2_SetConfig+0x58>)
 80024b6:	42a8      	cmp	r0, r5
 80024b8:	d006      	beq.n	80024c8 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80024ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80024bc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80024be:	684a      	ldr	r2, [r1, #4]
 80024c0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80024c2:	6203      	str	r3, [r0, #32]
}
 80024c4:	bc30      	pop	{r4, r5}
 80024c6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80024c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024cc:	68cd      	ldr	r5, [r1, #12]
 80024ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80024d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024d6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024da:	694d      	ldr	r5, [r1, #20]
 80024dc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024e0:	698d      	ldr	r5, [r1, #24]
 80024e2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80024e6:	e7e8      	b.n	80024ba <TIM_OC2_SetConfig+0x2a>
 80024e8:	40010000 	.word	0x40010000

080024ec <HAL_TIM_PWM_ConfigChannel>:
{
 80024ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80024ee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d066      	beq.n	80025c4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80024f6:	4604      	mov	r4, r0
 80024f8:	460d      	mov	r5, r1
 80024fa:	2301      	movs	r3, #1
 80024fc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002500:	2a0c      	cmp	r2, #12
 8002502:	d85a      	bhi.n	80025ba <HAL_TIM_PWM_ConfigChannel+0xce>
 8002504:	e8df f002 	tbb	[pc, r2]
 8002508:	59595907 	.word	0x59595907
 800250c:	5959591b 	.word	0x5959591b
 8002510:	59595930 	.word	0x59595930
 8002514:	44          	.byte	0x44
 8002515:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002516:	6800      	ldr	r0, [r0, #0]
 8002518:	f7ff fd16 	bl	8001f48 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800251c:	6822      	ldr	r2, [r4, #0]
 800251e:	6993      	ldr	r3, [r2, #24]
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	6993      	ldr	r3, [r2, #24]
 800252a:	f023 0304 	bic.w	r3, r3, #4
 800252e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	6993      	ldr	r3, [r2, #24]
 8002534:	6929      	ldr	r1, [r5, #16]
 8002536:	430b      	orrs	r3, r1
 8002538:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2000      	movs	r0, #0
      break;
 800253c:	e03e      	b.n	80025bc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800253e:	6800      	ldr	r0, [r0, #0]
 8002540:	f7ff ffa6 	bl	8002490 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002544:	6822      	ldr	r2, [r4, #0]
 8002546:	6993      	ldr	r3, [r2, #24]
 8002548:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800254c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	6993      	ldr	r3, [r2, #24]
 8002552:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002556:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002558:	6822      	ldr	r2, [r4, #0]
 800255a:	6993      	ldr	r3, [r2, #24]
 800255c:	6929      	ldr	r1, [r5, #16]
 800255e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002562:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2000      	movs	r0, #0
      break;
 8002566:	e029      	b.n	80025bc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002568:	6800      	ldr	r0, [r0, #0]
 800256a:	f7ff fd17 	bl	8001f9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	69d3      	ldr	r3, [r2, #28]
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002578:	6822      	ldr	r2, [r4, #0]
 800257a:	69d3      	ldr	r3, [r2, #28]
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	69d3      	ldr	r3, [r2, #28]
 8002586:	6929      	ldr	r1, [r5, #16]
 8002588:	430b      	orrs	r3, r1
 800258a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2000      	movs	r0, #0
      break;
 800258e:	e015      	b.n	80025bc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002590:	6800      	ldr	r0, [r0, #0]
 8002592:	f7ff fd31 	bl	8001ff8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	69d3      	ldr	r3, [r2, #28]
 800259a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800259e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	69d3      	ldr	r3, [r2, #28]
 80025a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025a8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	69d3      	ldr	r3, [r2, #28]
 80025ae:	6929      	ldr	r1, [r5, #16]
 80025b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025b4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2000      	movs	r0, #0
      break;
 80025b8:	e000      	b.n	80025bc <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80025ba:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80025bc:	2300      	movs	r3, #0
 80025be:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80025c4:	2002      	movs	r0, #2
 80025c6:	e7fc      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0xd6>

080025c8 <TIM_TI1_SetConfig>:
{
 80025c8:	b470      	push	{r4, r5, r6}
 80025ca:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 80025cc:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ce:	6a04      	ldr	r4, [r0, #32]
 80025d0:	f024 0401 	bic.w	r4, r4, #1
 80025d4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d6:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80025d8:	4d14      	ldr	r5, [pc, #80]	@ (800262c <TIM_TI1_SetConfig+0x64>)
 80025da:	42a8      	cmp	r0, r5
 80025dc:	d014      	beq.n	8002608 <TIM_TI1_SetConfig+0x40>
 80025de:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80025e2:	d011      	beq.n	8002608 <TIM_TI1_SetConfig+0x40>
 80025e4:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <TIM_TI1_SetConfig+0x68>)
 80025e6:	4290      	cmp	r0, r2
 80025e8:	d00e      	beq.n	8002608 <TIM_TI1_SetConfig+0x40>
 80025ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025ee:	4290      	cmp	r0, r2
 80025f0:	d00a      	beq.n	8002608 <TIM_TI1_SetConfig+0x40>
 80025f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025f6:	4290      	cmp	r0, r2
 80025f8:	d006      	beq.n	8002608 <TIM_TI1_SetConfig+0x40>
 80025fa:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80025fe:	4290      	cmp	r0, r2
 8002600:	d002      	beq.n	8002608 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002602:	f044 0201 	orr.w	r2, r4, #1
 8002606:	e003      	b.n	8002610 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002608:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800260c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002610:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800261a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800261e:	f001 010a 	and.w	r1, r1, #10
 8002622:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8002624:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002626:	6201      	str	r1, [r0, #32]
}
 8002628:	bc70      	pop	{r4, r5, r6}
 800262a:	4770      	bx	lr
 800262c:	40010000 	.word	0x40010000
 8002630:	40000400 	.word	0x40000400

08002634 <HAL_TIM_IC_ConfigChannel>:
{
 8002634:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002636:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d05a      	beq.n	80026f4 <HAL_TIM_IC_ConfigChannel+0xc0>
 800263e:	4604      	mov	r4, r0
 8002640:	460d      	mov	r5, r1
 8002642:	2301      	movs	r3, #1
 8002644:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002648:	b152      	cbz	r2, 8002660 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800264a:	2a04      	cmp	r2, #4
 800264c:	d01a      	beq.n	8002684 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 800264e:	2a08      	cmp	r2, #8
 8002650:	d02b      	beq.n	80026aa <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8002652:	2a0c      	cmp	r2, #12
 8002654:	d03b      	beq.n	80026ce <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8002656:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002658:	2300      	movs	r3, #0
 800265a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800265e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8002660:	68cb      	ldr	r3, [r1, #12]
 8002662:	684a      	ldr	r2, [r1, #4]
 8002664:	6809      	ldr	r1, [r1, #0]
 8002666:	6800      	ldr	r0, [r0, #0]
 8002668:	f7ff ffae 	bl	80025c8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	6993      	ldr	r3, [r2, #24]
 8002670:	f023 030c 	bic.w	r3, r3, #12
 8002674:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	6993      	ldr	r3, [r2, #24]
 800267a:	68a9      	ldr	r1, [r5, #8]
 800267c:	430b      	orrs	r3, r1
 800267e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002680:	2000      	movs	r0, #0
 8002682:	e7e9      	b.n	8002658 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8002684:	68cb      	ldr	r3, [r1, #12]
 8002686:	684a      	ldr	r2, [r1, #4]
 8002688:	6809      	ldr	r1, [r1, #0]
 800268a:	6800      	ldr	r0, [r0, #0]
 800268c:	f7ff fceb 	bl	8002066 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	6993      	ldr	r3, [r2, #24]
 8002694:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002698:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800269a:	6822      	ldr	r2, [r4, #0]
 800269c:	6993      	ldr	r3, [r2, #24]
 800269e:	68a9      	ldr	r1, [r5, #8]
 80026a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026a4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2000      	movs	r0, #0
 80026a8:	e7d6      	b.n	8002658 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80026aa:	68cb      	ldr	r3, [r1, #12]
 80026ac:	684a      	ldr	r2, [r1, #4]
 80026ae:	6809      	ldr	r1, [r1, #0]
 80026b0:	6800      	ldr	r0, [r0, #0]
 80026b2:	f7ff fd07 	bl	80020c4 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	69d3      	ldr	r3, [r2, #28]
 80026ba:	f023 030c 	bic.w	r3, r3, #12
 80026be:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	69d3      	ldr	r3, [r2, #28]
 80026c4:	68a9      	ldr	r1, [r5, #8]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2000      	movs	r0, #0
 80026cc:	e7c4      	b.n	8002658 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 80026ce:	68cb      	ldr	r3, [r1, #12]
 80026d0:	684a      	ldr	r2, [r1, #4]
 80026d2:	6809      	ldr	r1, [r1, #0]
 80026d4:	6800      	ldr	r0, [r0, #0]
 80026d6:	f7ff fd10 	bl	80020fa <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	69d3      	ldr	r3, [r2, #28]
 80026de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80026e2:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026e4:	6822      	ldr	r2, [r4, #0]
 80026e6:	69d3      	ldr	r3, [r2, #28]
 80026e8:	68a9      	ldr	r1, [r5, #8]
 80026ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026ee:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80026f0:	2000      	movs	r0, #0
 80026f2:	e7b1      	b.n	8002658 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 80026f4:	2002      	movs	r0, #2
 80026f6:	e7b2      	b.n	800265e <HAL_TIM_IC_ConfigChannel+0x2a>

080026f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026fa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026fc:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002700:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002704:	430a      	orrs	r2, r1
 8002706:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800270a:	6082      	str	r2, [r0, #8]
}
 800270c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002712:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d078      	beq.n	800280c <HAL_TIM_ConfigClockSource+0xfa>
{
 800271a:	b510      	push	{r4, lr}
 800271c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800271e:	2301      	movs	r3, #1
 8002720:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	2302      	movs	r3, #2
 8002726:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800272a:	6802      	ldr	r2, [r0, #0]
 800272c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800272e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002736:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002738:	680b      	ldr	r3, [r1, #0]
 800273a:	2b60      	cmp	r3, #96	@ 0x60
 800273c:	d04c      	beq.n	80027d8 <HAL_TIM_ConfigClockSource+0xc6>
 800273e:	d829      	bhi.n	8002794 <HAL_TIM_ConfigClockSource+0x82>
 8002740:	2b40      	cmp	r3, #64	@ 0x40
 8002742:	d054      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0xdc>
 8002744:	d90c      	bls.n	8002760 <HAL_TIM_ConfigClockSource+0x4e>
 8002746:	2b50      	cmp	r3, #80	@ 0x50
 8002748:	d122      	bne.n	8002790 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274a:	68ca      	ldr	r2, [r1, #12]
 800274c:	6849      	ldr	r1, [r1, #4]
 800274e:	6800      	ldr	r0, [r0, #0]
 8002750:	f7ff fc76 	bl	8002040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002754:	2150      	movs	r1, #80	@ 0x50
 8002756:	6820      	ldr	r0, [r4, #0]
 8002758:	f7ff fcea 	bl	8002130 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800275c:	2000      	movs	r0, #0
      break;
 800275e:	e005      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002760:	2b20      	cmp	r3, #32
 8002762:	d00d      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0x6e>
 8002764:	d909      	bls.n	800277a <HAL_TIM_ConfigClockSource+0x68>
 8002766:	2b30      	cmp	r3, #48	@ 0x30
 8002768:	d00a      	beq.n	8002780 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800276a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800276c:	2301      	movs	r3, #1
 800276e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002772:	2300      	movs	r3, #0
 8002774:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002778:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800277a:	b10b      	cbz	r3, 8002780 <HAL_TIM_ConfigClockSource+0x6e>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d105      	bne.n	800278c <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002780:	4619      	mov	r1, r3
 8002782:	6820      	ldr	r0, [r4, #0]
 8002784:	f7ff fcd4 	bl	8002130 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2000      	movs	r0, #0
      break;
 800278a:	e7ef      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800278c:	2001      	movs	r0, #1
 800278e:	e7ed      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
 8002790:	2001      	movs	r0, #1
 8002792:	e7eb      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002798:	d034      	beq.n	8002804 <HAL_TIM_ConfigClockSource+0xf2>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279e:	d10c      	bne.n	80027ba <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80027a0:	68cb      	ldr	r3, [r1, #12]
 80027a2:	684a      	ldr	r2, [r1, #4]
 80027a4:	6889      	ldr	r1, [r1, #8]
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	f7ff ffa6 	bl	80026f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	6893      	ldr	r3, [r2, #8]
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2000      	movs	r0, #0
      break;
 80027b8:	e7d8      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80027ba:	2b70      	cmp	r3, #112	@ 0x70
 80027bc:	d124      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80027be:	68cb      	ldr	r3, [r1, #12]
 80027c0:	684a      	ldr	r2, [r1, #4]
 80027c2:	6889      	ldr	r1, [r1, #8]
 80027c4:	6800      	ldr	r0, [r0, #0]
 80027c6:	f7ff ff97 	bl	80026f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ce:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80027d2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	2000      	movs	r0, #0
      break;
 80027d6:	e7c9      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d8:	68ca      	ldr	r2, [r1, #12]
 80027da:	6849      	ldr	r1, [r1, #4]
 80027dc:	6800      	ldr	r0, [r0, #0]
 80027de:	f7ff fc5d 	bl	800209c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e2:	2160      	movs	r1, #96	@ 0x60
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	f7ff fca3 	bl	8002130 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2000      	movs	r0, #0
      break;
 80027ec:	e7be      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	68ca      	ldr	r2, [r1, #12]
 80027f0:	6849      	ldr	r1, [r1, #4]
 80027f2:	6800      	ldr	r0, [r0, #0]
 80027f4:	f7ff fc24 	bl	8002040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f8:	2140      	movs	r1, #64	@ 0x40
 80027fa:	6820      	ldr	r0, [r4, #0]
 80027fc:	f7ff fc98 	bl	8002130 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002800:	2000      	movs	r0, #0
      break;
 8002802:	e7b3      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002804:	2000      	movs	r0, #0
 8002806:	e7b1      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002808:	2001      	movs	r0, #1
 800280a:	e7af      	b.n	800276c <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800280c:	2002      	movs	r0, #2
}
 800280e:	4770      	bx	lr

08002810 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002810:	f001 011f 	and.w	r1, r1, #31
 8002814:	f04f 0c01 	mov.w	ip, #1
 8002818:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800281c:	6a03      	ldr	r3, [r0, #32]
 800281e:	ea23 030c 	bic.w	r3, r3, ip
 8002822:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002824:	6a03      	ldr	r3, [r0, #32]
 8002826:	408a      	lsls	r2, r1
 8002828:	4313      	orrs	r3, r2
 800282a:	6203      	str	r3, [r0, #32]
}
 800282c:	4770      	bx	lr
	...

08002830 <HAL_TIM_PWM_Start>:
{
 8002830:	b510      	push	{r4, lr}
 8002832:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002834:	4608      	mov	r0, r1
 8002836:	2900      	cmp	r1, #0
 8002838:	d132      	bne.n	80028a0 <HAL_TIM_PWM_Start+0x70>
 800283a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	bf18      	it	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d163      	bne.n	8002912 <HAL_TIM_PWM_Start+0xe2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800284a:	2800      	cmp	r0, #0
 800284c:	d141      	bne.n	80028d2 <HAL_TIM_PWM_Start+0xa2>
 800284e:	2302      	movs	r3, #2
 8002850:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002854:	2201      	movs	r2, #1
 8002856:	4601      	mov	r1, r0
 8002858:	6820      	ldr	r0, [r4, #0]
 800285a:	f7ff ffd9 	bl	8002810 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	4a2e      	ldr	r2, [pc, #184]	@ (800291c <HAL_TIM_PWM_Start+0xec>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d045      	beq.n	80028f2 <HAL_TIM_PWM_Start+0xc2>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	4a2c      	ldr	r2, [pc, #176]	@ (800291c <HAL_TIM_PWM_Start+0xec>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d046      	beq.n	80028fc <HAL_TIM_PWM_Start+0xcc>
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002872:	d043      	beq.n	80028fc <HAL_TIM_PWM_Start+0xcc>
 8002874:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002878:	4293      	cmp	r3, r2
 800287a:	d03f      	beq.n	80028fc <HAL_TIM_PWM_Start+0xcc>
 800287c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002880:	4293      	cmp	r3, r2
 8002882:	d03b      	beq.n	80028fc <HAL_TIM_PWM_Start+0xcc>
 8002884:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002888:	4293      	cmp	r3, r2
 800288a:	d037      	beq.n	80028fc <HAL_TIM_PWM_Start+0xcc>
 800288c:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002890:	4293      	cmp	r3, r2
 8002892:	d033      	beq.n	80028fc <HAL_TIM_PWM_Start+0xcc>
    __HAL_TIM_ENABLE(htim);
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800289c:	2000      	movs	r0, #0
 800289e:	e037      	b.n	8002910 <HAL_TIM_PWM_Start+0xe0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028a0:	2904      	cmp	r1, #4
 80028a2:	d008      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x86>
 80028a4:	2908      	cmp	r1, #8
 80028a6:	d00d      	beq.n	80028c4 <HAL_TIM_PWM_Start+0x94>
 80028a8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	bf18      	it	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	e7c7      	b.n	8002846 <HAL_TIM_PWM_Start+0x16>
 80028b6:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	bf18      	it	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	e7c0      	b.n	8002846 <HAL_TIM_PWM_Start+0x16>
 80028c4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	bf18      	it	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	e7b9      	b.n	8002846 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d2:	2804      	cmp	r0, #4
 80028d4:	d005      	beq.n	80028e2 <HAL_TIM_PWM_Start+0xb2>
 80028d6:	2808      	cmp	r0, #8
 80028d8:	d007      	beq.n	80028ea <HAL_TIM_PWM_Start+0xba>
 80028da:	2302      	movs	r3, #2
 80028dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80028e0:	e7b8      	b.n	8002854 <HAL_TIM_PWM_Start+0x24>
 80028e2:	2302      	movs	r3, #2
 80028e4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80028e8:	e7b4      	b.n	8002854 <HAL_TIM_PWM_Start+0x24>
 80028ea:	2302      	movs	r3, #2
 80028ec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80028f0:	e7b0      	b.n	8002854 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80028f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80028fa:	e7b4      	b.n	8002866 <HAL_TIM_PWM_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	2a06      	cmp	r2, #6
 8002904:	d007      	beq.n	8002916 <HAL_TIM_PWM_Start+0xe6>
      __HAL_TIM_ENABLE(htim);
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800290e:	2000      	movs	r0, #0
}
 8002910:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002912:	2001      	movs	r0, #1
 8002914:	e7fc      	b.n	8002910 <HAL_TIM_PWM_Start+0xe0>
  return HAL_OK;
 8002916:	2000      	movs	r0, #0
 8002918:	e7fa      	b.n	8002910 <HAL_TIM_PWM_Start+0xe0>
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000

08002920 <HAL_TIM_IC_Start_IT>:
{
 8002920:	b510      	push	{r4, lr}
 8002922:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002924:	460b      	mov	r3, r1
 8002926:	b9f1      	cbnz	r1, 8002966 <HAL_TIM_IC_Start_IT+0x46>
 8002928:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 800292c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800292e:	bb53      	cbnz	r3, 8002986 <HAL_TIM_IC_Start_IT+0x66>
 8002930:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8002934:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002936:	2801      	cmp	r0, #1
 8002938:	f040 8096 	bne.w	8002a68 <HAL_TIM_IC_Start_IT+0x148>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800293c:	2a01      	cmp	r2, #1
 800293e:	f040 8094 	bne.w	8002a6a <HAL_TIM_IC_Start_IT+0x14a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002942:	bb83      	cbnz	r3, 80029a6 <HAL_TIM_IC_Start_IT+0x86>
 8002944:	2102      	movs	r1, #2
 8002946:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800294a:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  switch (Channel)
 800294e:	2b0c      	cmp	r3, #12
 8002950:	f200 808c 	bhi.w	8002a6c <HAL_TIM_IC_Start_IT+0x14c>
 8002954:	e8df f003 	tbb	[pc, r3]
 8002958:	8a8a8a71 	.word	0x8a8a8a71
 800295c:	8a8a8a41 	.word	0x8a8a8a41
 8002960:	8a8a8a6b 	.word	0x8a8a8a6b
 8002964:	77          	.byte	0x77
 8002965:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002966:	2904      	cmp	r1, #4
 8002968:	d005      	beq.n	8002976 <HAL_TIM_IC_Start_IT+0x56>
 800296a:	2908      	cmp	r1, #8
 800296c:	d007      	beq.n	800297e <HAL_TIM_IC_Start_IT+0x5e>
 800296e:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8002972:	b2c0      	uxtb	r0, r0
 8002974:	e7db      	b.n	800292e <HAL_TIM_IC_Start_IT+0xe>
 8002976:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 800297a:	b2c0      	uxtb	r0, r0
 800297c:	e7d7      	b.n	800292e <HAL_TIM_IC_Start_IT+0xe>
 800297e:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002982:	b2c0      	uxtb	r0, r0
 8002984:	e7d3      	b.n	800292e <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002986:	2b04      	cmp	r3, #4
 8002988:	d005      	beq.n	8002996 <HAL_TIM_IC_Start_IT+0x76>
 800298a:	2b08      	cmp	r3, #8
 800298c:	d007      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x7e>
 800298e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	e7cf      	b.n	8002936 <HAL_TIM_IC_Start_IT+0x16>
 8002996:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	e7cb      	b.n	8002936 <HAL_TIM_IC_Start_IT+0x16>
 800299e:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	e7c7      	b.n	8002936 <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d00c      	beq.n	80029c4 <HAL_TIM_IC_Start_IT+0xa4>
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d00e      	beq.n	80029cc <HAL_TIM_IC_Start_IT+0xac>
 80029ae:	2102      	movs	r1, #2
 80029b0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d00d      	beq.n	80029d4 <HAL_TIM_IC_Start_IT+0xb4>
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d035      	beq.n	8002a28 <HAL_TIM_IC_Start_IT+0x108>
 80029bc:	2102      	movs	r1, #2
 80029be:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
 80029c2:	e7c4      	b.n	800294e <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029c4:	2102      	movs	r1, #2
 80029c6:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ca:	e7f3      	b.n	80029b4 <HAL_TIM_IC_Start_IT+0x94>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029cc:	2102      	movs	r1, #2
 80029ce:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d2:	e7ef      	b.n	80029b4 <HAL_TIM_IC_Start_IT+0x94>
 80029d4:	2202      	movs	r2, #2
 80029d6:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80029da:	6821      	ldr	r1, [r4, #0]
 80029dc:	68ca      	ldr	r2, [r1, #12]
 80029de:	f042 0204 	orr.w	r2, r2, #4
 80029e2:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029e4:	2201      	movs	r2, #1
 80029e6:	4619      	mov	r1, r3
 80029e8:	6820      	ldr	r0, [r4, #0]
 80029ea:	f7ff ff11 	bl	8002810 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	4a20      	ldr	r2, [pc, #128]	@ (8002a74 <HAL_TIM_IC_Start_IT+0x154>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02d      	beq.n	8002a52 <HAL_TIM_IC_Start_IT+0x132>
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029fa:	d02a      	beq.n	8002a52 <HAL_TIM_IC_Start_IT+0x132>
 80029fc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d026      	beq.n	8002a52 <HAL_TIM_IC_Start_IT+0x132>
 8002a04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d022      	beq.n	8002a52 <HAL_TIM_IC_Start_IT+0x132>
 8002a0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d01e      	beq.n	8002a52 <HAL_TIM_IC_Start_IT+0x132>
 8002a14:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d01a      	beq.n	8002a52 <HAL_TIM_IC_Start_IT+0x132>
      __HAL_TIM_ENABLE(htim);
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	2000      	movs	r0, #0
 8002a26:	e020      	b.n	8002a6a <HAL_TIM_IC_Start_IT+0x14a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a2e:	6821      	ldr	r1, [r4, #0]
 8002a30:	68ca      	ldr	r2, [r1, #12]
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002a38:	e7d4      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a3a:	6821      	ldr	r1, [r4, #0]
 8002a3c:	68ca      	ldr	r2, [r1, #12]
 8002a3e:	f042 0202 	orr.w	r2, r2, #2
 8002a42:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002a44:	e7ce      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	68ca      	ldr	r2, [r1, #12]
 8002a4a:	f042 0210 	orr.w	r2, r2, #16
 8002a4e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8002a50:	e7c8      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0xc4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	2a06      	cmp	r2, #6
 8002a5a:	d009      	beq.n	8002a70 <HAL_TIM_IC_Start_IT+0x150>
        __HAL_TIM_ENABLE(htim);
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	2000      	movs	r0, #0
 8002a66:	e000      	b.n	8002a6a <HAL_TIM_IC_Start_IT+0x14a>
    return HAL_ERROR;
 8002a68:	2001      	movs	r0, #1
}
 8002a6a:	bd10      	pop	{r4, pc}
  switch (Channel)
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	e7fc      	b.n	8002a6a <HAL_TIM_IC_Start_IT+0x14a>
 8002a70:	2000      	movs	r0, #0
 8002a72:	e7fa      	b.n	8002a6a <HAL_TIM_IC_Start_IT+0x14a>
 8002a74:	40010000 	.word	0x40010000

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a78:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	d035      	beq.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8002a80:	b410      	push	{r4}
 8002a82:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002a84:	2201      	movs	r2, #1
 8002a86:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a90:	6802      	ldr	r2, [r0, #0]
 8002a92:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a96:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a9a:	6808      	ldr	r0, [r1, #0]
 8002a9c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aa0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4812      	ldr	r0, [pc, #72]	@ (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8002aa6:	4282      	cmp	r2, r0
 8002aa8:	d012      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002aaa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002aae:	d00f      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ab0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002ab4:	4282      	cmp	r2, r0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ab8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002abc:	4282      	cmp	r2, r0
 8002abe:	d007      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ac0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002ac4:	4282      	cmp	r2, r0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002ac8:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8002acc:	4282      	cmp	r2, r0
 8002ace:	d104      	bne.n	8002ada <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ad0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad4:	6849      	ldr	r1, [r1, #4]
 8002ad6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aea:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002aec:	2002      	movs	r0, #2
}
 8002aee:	4770      	bx	lr
 8002af0:	40010000 	.word	0x40010000

08002af4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af4:	4770      	bx	lr

08002af6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af6:	4770      	bx	lr

08002af8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	f102 030c 	add.w	r3, r2, #12
 8002afe:	e853 3f00 	ldrex	r3, [r3]
 8002b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	320c      	adds	r2, #12
 8002b08:	e842 3100 	strex	r1, r3, [r2]
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	d1f3      	bne.n	8002af8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b10:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	f102 0314 	add.w	r3, r2, #20
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	3214      	adds	r2, #20
 8002b20:	e842 3100 	strex	r1, r3, [r2]
 8002b24:	2900      	cmp	r1, #0
 8002b26:	d1f3      	bne.n	8002b10 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b34:	2300      	movs	r3, #0
 8002b36:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002b38:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	f102 030c 	add.w	r3, r2, #12
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	320c      	adds	r2, #12
 8002b4a:	e842 3100 	strex	r1, r3, [r2]
 8002b4e:	2900      	cmp	r1, #0
 8002b50:	d1f3      	bne.n	8002b3a <UART_EndRxTransfer+0x42>
 8002b52:	e7ec      	b.n	8002b2e <UART_EndRxTransfer+0x36>

08002b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b58:	6802      	ldr	r2, [r0, #0]
 8002b5a:	6913      	ldr	r3, [r2, #16]
 8002b5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b60:	68c1      	ldr	r1, [r0, #12]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b66:	6883      	ldr	r3, [r0, #8]
 8002b68:	6902      	ldr	r2, [r0, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	6943      	ldr	r3, [r0, #20]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	69c3      	ldr	r3, [r0, #28]
 8002b72:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002b74:	6801      	ldr	r1, [r0, #0]
 8002b76:	68cb      	ldr	r3, [r1, #12]
 8002b78:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002b7c:	f023 030c 	bic.w	r3, r3, #12
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b84:	6802      	ldr	r2, [r0, #0]
 8002b86:	6953      	ldr	r3, [r2, #20]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8c:	6981      	ldr	r1, [r0, #24]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b92:	6803      	ldr	r3, [r0, #0]
 8002b94:	4a31      	ldr	r2, [pc, #196]	@ (8002c5c <UART_SetConfig+0x108>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d006      	beq.n	8002ba8 <UART_SetConfig+0x54>
 8002b9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d002      	beq.n	8002ba8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ba2:	f7ff f9b1 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8002ba6:	e001      	b.n	8002bac <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7ff f9be 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bac:	69e3      	ldr	r3, [r4, #28]
 8002bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb2:	d029      	beq.n	8002c08 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	1803      	adds	r3, r0, r0
 8002bb8:	4149      	adcs	r1, r1
 8002bba:	181b      	adds	r3, r3, r0
 8002bbc:	f141 0100 	adc.w	r1, r1, #0
 8002bc0:	00c9      	lsls	r1, r1, #3
 8002bc2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	1818      	adds	r0, r3, r0
 8002bca:	6863      	ldr	r3, [r4, #4]
 8002bcc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002bd0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002bd4:	f141 0100 	adc.w	r1, r1, #0
 8002bd8:	f7fd ffee 	bl	8000bb8 <__aeabi_uldivmod>
 8002bdc:	4a20      	ldr	r2, [pc, #128]	@ (8002c60 <UART_SetConfig+0x10c>)
 8002bde:	fba2 3100 	umull	r3, r1, r2, r0
 8002be2:	0949      	lsrs	r1, r1, #5
 8002be4:	2364      	movs	r3, #100	@ 0x64
 8002be6:	fb03 0311 	mls	r3, r3, r1, r0
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	3332      	adds	r3, #50	@ 0x32
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bf8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	6821      	ldr	r1, [r4, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }
}
 8002c06:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	1802      	adds	r2, r0, r0
 8002c0c:	eb43 0103 	adc.w	r1, r3, r3
 8002c10:	1812      	adds	r2, r2, r0
 8002c12:	f141 0100 	adc.w	r1, r1, #0
 8002c16:	00c9      	lsls	r1, r1, #3
 8002c18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1c:	00d2      	lsls	r2, r2, #3
 8002c1e:	1810      	adds	r0, r2, r0
 8002c20:	f141 0100 	adc.w	r1, r1, #0
 8002c24:	6862      	ldr	r2, [r4, #4]
 8002c26:	1892      	adds	r2, r2, r2
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	f7fd ffc5 	bl	8000bb8 <__aeabi_uldivmod>
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c60 <UART_SetConfig+0x10c>)
 8002c30:	fba2 3100 	umull	r3, r1, r2, r0
 8002c34:	0949      	lsrs	r1, r1, #5
 8002c36:	2364      	movs	r3, #100	@ 0x64
 8002c38:	fb03 0311 	mls	r3, r3, r1, r0
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	3332      	adds	r3, #50	@ 0x32
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	005a      	lsls	r2, r3, #1
 8002c48:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002c4c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	6821      	ldr	r1, [r4, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
 8002c5a:	e7d4      	b.n	8002c06 <UART_SetConfig+0xb2>
 8002c5c:	40011000 	.word	0x40011000
 8002c60:	51eb851f 	.word	0x51eb851f

08002c64 <UART_WaitOnFlagUntilTimeout>:
{
 8002c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	460e      	mov	r6, r1
 8002c6e:	4617      	mov	r7, r2
 8002c70:	4699      	mov	r9, r3
 8002c72:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	681c      	ldr	r4, [r3, #0]
 8002c7a:	ea36 0404 	bics.w	r4, r6, r4
 8002c7e:	bf0c      	ite	eq
 8002c80:	2401      	moveq	r4, #1
 8002c82:	2400      	movne	r4, #0
 8002c84:	42bc      	cmp	r4, r7
 8002c86:	d128      	bne.n	8002cda <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002c88:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002c8c:	d0f3      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7fe fcbf 	bl	8001610 <HAL_GetTick>
 8002c92:	eba0 0009 	sub.w	r0, r0, r9
 8002c96:	4540      	cmp	r0, r8
 8002c98:	d823      	bhi.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002c9a:	f1b8 0f00 	cmp.w	r8, #0
 8002c9e:	d022      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	f012 0f04 	tst.w	r2, #4
 8002ca8:	d0e5      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x12>
 8002caa:	2e80      	cmp	r6, #128	@ 0x80
 8002cac:	d0e3      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x12>
 8002cae:	2e40      	cmp	r6, #64	@ 0x40
 8002cb0:	d0e1      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f012 0f08 	tst.w	r2, #8
 8002cb8:	d0dd      	beq.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cba:	2400      	movs	r4, #0
 8002cbc:	9401      	str	r4, [sp, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	9201      	str	r2, [sp, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f7ff ff15 	bl	8002af8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cce:	2308      	movs	r3, #8
 8002cd0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002cd2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	e000      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002cda:	2000      	movs	r0, #0
}
 8002cdc:	b003      	add	sp, #12
 8002cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002ce2:	2003      	movs	r0, #3
 8002ce4:	e7fa      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x78>
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e7f8      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x78>

08002cea <HAL_UART_Init>:
  if (huart == NULL)
 8002cea:	b360      	cbz	r0, 8002d46 <HAL_UART_Init+0x5c>
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002cf4:	b313      	cbz	r3, 8002d3c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002cf6:	2324      	movs	r3, #36	@ 0x24
 8002cf8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	68d3      	ldr	r3, [r2, #12]
 8002d00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d04:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff ff24 	bl	8002b54 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6913      	ldr	r3, [r2, #16]
 8002d10:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002d14:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d16:	6822      	ldr	r2, [r4, #0]
 8002d18:	6953      	ldr	r3, [r2, #20]
 8002d1a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002d1e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	68d3      	ldr	r3, [r2, #12]
 8002d24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d28:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d38:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002d3a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002d3c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002d40:	f7fe fb48 	bl	80013d4 <HAL_UART_MspInit>
 8002d44:	e7d7      	b.n	8002cf6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
}
 8002d48:	4770      	bx	lr

08002d4a <HAL_UART_Transmit>:
{
 8002d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d52:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d156      	bne.n	8002e0a <HAL_UART_Transmit+0xc0>
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	460d      	mov	r5, r1
 8002d60:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002d62:	2900      	cmp	r1, #0
 8002d64:	d055      	beq.n	8002e12 <HAL_UART_Transmit+0xc8>
 8002d66:	b90a      	cbnz	r2, 8002d6c <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002d68:	2001      	movs	r0, #1
 8002d6a:	e04f      	b.n	8002e0c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d70:	2321      	movs	r3, #33	@ 0x21
 8002d72:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002d76:	f7fe fc4b 	bl	8001610 <HAL_GetTick>
 8002d7a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002d7c:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d80:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d84:	68a3      	ldr	r3, [r4, #8]
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8a:	d002      	beq.n	8002d92 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002d8c:	f04f 0800 	mov.w	r8, #0
 8002d90:	e014      	b.n	8002dbc <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d92:	6923      	ldr	r3, [r4, #16]
 8002d94:	b32b      	cbz	r3, 8002de2 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8002d96:	f04f 0800 	mov.w	r8, #0
 8002d9a:	e00f      	b.n	8002dbc <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
 8002da4:	e032      	b.n	8002e0c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da6:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002db2:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002db4:	b292      	uxth	r2, r2
 8002db6:	3a01      	subs	r2, #1
 8002db8:	b292      	uxth	r2, r2
 8002dba:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dbc:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b193      	cbz	r3, 8002de8 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dc2:	9600      	str	r6, [sp, #0]
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2180      	movs	r1, #128	@ 0x80
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7ff ff4a 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d1e3      	bne.n	8002d9c <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	d0e6      	beq.n	8002da6 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dd8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de0:	e7e7      	b.n	8002db2 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002de2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002de4:	2500      	movs	r5, #0
 8002de6:	e7e9      	b.n	8002dbc <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de8:	9600      	str	r6, [sp, #0]
 8002dea:	463b      	mov	r3, r7
 8002dec:	2200      	movs	r2, #0
 8002dee:	2140      	movs	r1, #64	@ 0x40
 8002df0:	4620      	mov	r0, r4
 8002df2:	f7ff ff37 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002df6:	b918      	cbnz	r0, 8002e00 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002dfe:	e005      	b.n	8002e0c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8002e00:	2320      	movs	r3, #32
 8002e02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002e06:	2003      	movs	r0, #3
 8002e08:	e000      	b.n	8002e0c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002e0a:	2002      	movs	r0, #2
}
 8002e0c:	b002      	add	sp, #8
 8002e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002e12:	2001      	movs	r0, #1
 8002e14:	e7fa      	b.n	8002e0c <HAL_UART_Transmit+0xc2>

08002e16 <__cvt>:
 8002e16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1a:	ec57 6b10 	vmov	r6, r7, d0
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	460c      	mov	r4, r1
 8002e22:	4619      	mov	r1, r3
 8002e24:	463b      	mov	r3, r7
 8002e26:	bfbb      	ittet	lt
 8002e28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002e2c:	461f      	movlt	r7, r3
 8002e2e:	2300      	movge	r3, #0
 8002e30:	232d      	movlt	r3, #45	@ 0x2d
 8002e32:	700b      	strb	r3, [r1, #0]
 8002e34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002e3a:	4691      	mov	r9, r2
 8002e3c:	f023 0820 	bic.w	r8, r3, #32
 8002e40:	bfbc      	itt	lt
 8002e42:	4632      	movlt	r2, r6
 8002e44:	4616      	movlt	r6, r2
 8002e46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e4a:	d005      	beq.n	8002e58 <__cvt+0x42>
 8002e4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002e50:	d100      	bne.n	8002e54 <__cvt+0x3e>
 8002e52:	3401      	adds	r4, #1
 8002e54:	2102      	movs	r1, #2
 8002e56:	e000      	b.n	8002e5a <__cvt+0x44>
 8002e58:	2103      	movs	r1, #3
 8002e5a:	ab03      	add	r3, sp, #12
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	ab02      	add	r3, sp, #8
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	ec47 6b10 	vmov	d0, r6, r7
 8002e66:	4653      	mov	r3, sl
 8002e68:	4622      	mov	r2, r4
 8002e6a:	f000 ff3d 	bl	8003ce8 <_dtoa_r>
 8002e6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002e72:	4605      	mov	r5, r0
 8002e74:	d119      	bne.n	8002eaa <__cvt+0x94>
 8002e76:	f019 0f01 	tst.w	r9, #1
 8002e7a:	d00e      	beq.n	8002e9a <__cvt+0x84>
 8002e7c:	eb00 0904 	add.w	r9, r0, r4
 8002e80:	2200      	movs	r2, #0
 8002e82:	2300      	movs	r3, #0
 8002e84:	4630      	mov	r0, r6
 8002e86:	4639      	mov	r1, r7
 8002e88:	f7fd fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e8c:	b108      	cbz	r0, 8002e92 <__cvt+0x7c>
 8002e8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8002e92:	2230      	movs	r2, #48	@ 0x30
 8002e94:	9b03      	ldr	r3, [sp, #12]
 8002e96:	454b      	cmp	r3, r9
 8002e98:	d31e      	bcc.n	8002ed8 <__cvt+0xc2>
 8002e9a:	9b03      	ldr	r3, [sp, #12]
 8002e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002e9e:	1b5b      	subs	r3, r3, r5
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	b004      	add	sp, #16
 8002ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eaa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002eae:	eb00 0904 	add.w	r9, r0, r4
 8002eb2:	d1e5      	bne.n	8002e80 <__cvt+0x6a>
 8002eb4:	7803      	ldrb	r3, [r0, #0]
 8002eb6:	2b30      	cmp	r3, #48	@ 0x30
 8002eb8:	d10a      	bne.n	8002ed0 <__cvt+0xba>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	4639      	mov	r1, r7
 8002ec2:	f7fd fe09 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ec6:	b918      	cbnz	r0, 8002ed0 <__cvt+0xba>
 8002ec8:	f1c4 0401 	rsb	r4, r4, #1
 8002ecc:	f8ca 4000 	str.w	r4, [sl]
 8002ed0:	f8da 3000 	ldr.w	r3, [sl]
 8002ed4:	4499      	add	r9, r3
 8002ed6:	e7d3      	b.n	8002e80 <__cvt+0x6a>
 8002ed8:	1c59      	adds	r1, r3, #1
 8002eda:	9103      	str	r1, [sp, #12]
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e7d9      	b.n	8002e94 <__cvt+0x7e>

08002ee0 <__exponent>:
 8002ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ee2:	2900      	cmp	r1, #0
 8002ee4:	bfba      	itte	lt
 8002ee6:	4249      	neglt	r1, r1
 8002ee8:	232d      	movlt	r3, #45	@ 0x2d
 8002eea:	232b      	movge	r3, #43	@ 0x2b
 8002eec:	2909      	cmp	r1, #9
 8002eee:	7002      	strb	r2, [r0, #0]
 8002ef0:	7043      	strb	r3, [r0, #1]
 8002ef2:	dd29      	ble.n	8002f48 <__exponent+0x68>
 8002ef4:	f10d 0307 	add.w	r3, sp, #7
 8002ef8:	461d      	mov	r5, r3
 8002efa:	270a      	movs	r7, #10
 8002efc:	461a      	mov	r2, r3
 8002efe:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f02:	fb07 1416 	mls	r4, r7, r6, r1
 8002f06:	3430      	adds	r4, #48	@ 0x30
 8002f08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	2c63      	cmp	r4, #99	@ 0x63
 8002f10:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002f14:	4631      	mov	r1, r6
 8002f16:	dcf1      	bgt.n	8002efc <__exponent+0x1c>
 8002f18:	3130      	adds	r1, #48	@ 0x30
 8002f1a:	1e94      	subs	r4, r2, #2
 8002f1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f20:	1c41      	adds	r1, r0, #1
 8002f22:	4623      	mov	r3, r4
 8002f24:	42ab      	cmp	r3, r5
 8002f26:	d30a      	bcc.n	8002f3e <__exponent+0x5e>
 8002f28:	f10d 0309 	add.w	r3, sp, #9
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	42ac      	cmp	r4, r5
 8002f30:	bf88      	it	hi
 8002f32:	2300      	movhi	r3, #0
 8002f34:	3302      	adds	r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	1a18      	subs	r0, r3, r0
 8002f3a:	b003      	add	sp, #12
 8002f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002f42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002f46:	e7ed      	b.n	8002f24 <__exponent+0x44>
 8002f48:	2330      	movs	r3, #48	@ 0x30
 8002f4a:	3130      	adds	r1, #48	@ 0x30
 8002f4c:	7083      	strb	r3, [r0, #2]
 8002f4e:	70c1      	strb	r1, [r0, #3]
 8002f50:	1d03      	adds	r3, r0, #4
 8002f52:	e7f1      	b.n	8002f38 <__exponent+0x58>

08002f54 <_printf_float>:
 8002f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f58:	b08d      	sub	sp, #52	@ 0x34
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002f60:	4616      	mov	r6, r2
 8002f62:	461f      	mov	r7, r3
 8002f64:	4605      	mov	r5, r0
 8002f66:	f000 fdbf 	bl	8003ae8 <_localeconv_r>
 8002f6a:	6803      	ldr	r3, [r0, #0]
 8002f6c:	9304      	str	r3, [sp, #16]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd f986 	bl	8000280 <strlen>
 8002f74:	2300      	movs	r3, #0
 8002f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f78:	f8d8 3000 	ldr.w	r3, [r8]
 8002f7c:	9005      	str	r0, [sp, #20]
 8002f7e:	3307      	adds	r3, #7
 8002f80:	f023 0307 	bic.w	r3, r3, #7
 8002f84:	f103 0208 	add.w	r2, r3, #8
 8002f88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002f8c:	f8d4 b000 	ldr.w	fp, [r4]
 8002f90:	f8c8 2000 	str.w	r2, [r8]
 8002f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002f9c:	9307      	str	r3, [sp, #28]
 8002f9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002fa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002faa:	4b9c      	ldr	r3, [pc, #624]	@ (800321c <_printf_float+0x2c8>)
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fb0:	f7fd fdc4 	bl	8000b3c <__aeabi_dcmpun>
 8002fb4:	bb70      	cbnz	r0, 8003014 <_printf_float+0xc0>
 8002fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fba:	4b98      	ldr	r3, [pc, #608]	@ (800321c <_printf_float+0x2c8>)
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fc0:	f7fd fd9e 	bl	8000b00 <__aeabi_dcmple>
 8002fc4:	bb30      	cbnz	r0, 8003014 <_printf_float+0xc0>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2300      	movs	r3, #0
 8002fca:	4640      	mov	r0, r8
 8002fcc:	4649      	mov	r1, r9
 8002fce:	f7fd fd8d 	bl	8000aec <__aeabi_dcmplt>
 8002fd2:	b110      	cbz	r0, 8002fda <_printf_float+0x86>
 8002fd4:	232d      	movs	r3, #45	@ 0x2d
 8002fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fda:	4a91      	ldr	r2, [pc, #580]	@ (8003220 <_printf_float+0x2cc>)
 8002fdc:	4b91      	ldr	r3, [pc, #580]	@ (8003224 <_printf_float+0x2d0>)
 8002fde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002fe2:	bf94      	ite	ls
 8002fe4:	4690      	movls	r8, r2
 8002fe6:	4698      	movhi	r8, r3
 8002fe8:	2303      	movs	r3, #3
 8002fea:	6123      	str	r3, [r4, #16]
 8002fec:	f02b 0304 	bic.w	r3, fp, #4
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	f04f 0900 	mov.w	r9, #0
 8002ff6:	9700      	str	r7, [sp, #0]
 8002ff8:	4633      	mov	r3, r6
 8002ffa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 f9d2 	bl	80033a8 <_printf_common>
 8003004:	3001      	adds	r0, #1
 8003006:	f040 808d 	bne.w	8003124 <_printf_float+0x1d0>
 800300a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800300e:	b00d      	add	sp, #52	@ 0x34
 8003010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	4640      	mov	r0, r8
 800301a:	4649      	mov	r1, r9
 800301c:	f7fd fd8e 	bl	8000b3c <__aeabi_dcmpun>
 8003020:	b140      	cbz	r0, 8003034 <_printf_float+0xe0>
 8003022:	464b      	mov	r3, r9
 8003024:	2b00      	cmp	r3, #0
 8003026:	bfbc      	itt	lt
 8003028:	232d      	movlt	r3, #45	@ 0x2d
 800302a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800302e:	4a7e      	ldr	r2, [pc, #504]	@ (8003228 <_printf_float+0x2d4>)
 8003030:	4b7e      	ldr	r3, [pc, #504]	@ (800322c <_printf_float+0x2d8>)
 8003032:	e7d4      	b.n	8002fde <_printf_float+0x8a>
 8003034:	6863      	ldr	r3, [r4, #4]
 8003036:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800303a:	9206      	str	r2, [sp, #24]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	d13b      	bne.n	80030b8 <_printf_float+0x164>
 8003040:	2306      	movs	r3, #6
 8003042:	6063      	str	r3, [r4, #4]
 8003044:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003048:	2300      	movs	r3, #0
 800304a:	6022      	str	r2, [r4, #0]
 800304c:	9303      	str	r3, [sp, #12]
 800304e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003050:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003054:	ab09      	add	r3, sp, #36	@ 0x24
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	6861      	ldr	r1, [r4, #4]
 800305a:	ec49 8b10 	vmov	d0, r8, r9
 800305e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003062:	4628      	mov	r0, r5
 8003064:	f7ff fed7 	bl	8002e16 <__cvt>
 8003068:	9b06      	ldr	r3, [sp, #24]
 800306a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800306c:	2b47      	cmp	r3, #71	@ 0x47
 800306e:	4680      	mov	r8, r0
 8003070:	d129      	bne.n	80030c6 <_printf_float+0x172>
 8003072:	1cc8      	adds	r0, r1, #3
 8003074:	db02      	blt.n	800307c <_printf_float+0x128>
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	4299      	cmp	r1, r3
 800307a:	dd41      	ble.n	8003100 <_printf_float+0x1ac>
 800307c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003080:	fa5f fa8a 	uxtb.w	sl, sl
 8003084:	3901      	subs	r1, #1
 8003086:	4652      	mov	r2, sl
 8003088:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800308c:	9109      	str	r1, [sp, #36]	@ 0x24
 800308e:	f7ff ff27 	bl	8002ee0 <__exponent>
 8003092:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003094:	1813      	adds	r3, r2, r0
 8003096:	2a01      	cmp	r2, #1
 8003098:	4681      	mov	r9, r0
 800309a:	6123      	str	r3, [r4, #16]
 800309c:	dc02      	bgt.n	80030a4 <_printf_float+0x150>
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	07d2      	lsls	r2, r2, #31
 80030a2:	d501      	bpl.n	80030a8 <_printf_float+0x154>
 80030a4:	3301      	adds	r3, #1
 80030a6:	6123      	str	r3, [r4, #16]
 80030a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0a2      	beq.n	8002ff6 <_printf_float+0xa2>
 80030b0:	232d      	movs	r3, #45	@ 0x2d
 80030b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030b6:	e79e      	b.n	8002ff6 <_printf_float+0xa2>
 80030b8:	9a06      	ldr	r2, [sp, #24]
 80030ba:	2a47      	cmp	r2, #71	@ 0x47
 80030bc:	d1c2      	bne.n	8003044 <_printf_float+0xf0>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1c0      	bne.n	8003044 <_printf_float+0xf0>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e7bd      	b.n	8003042 <_printf_float+0xee>
 80030c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80030ca:	d9db      	bls.n	8003084 <_printf_float+0x130>
 80030cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80030d0:	d118      	bne.n	8003104 <_printf_float+0x1b0>
 80030d2:	2900      	cmp	r1, #0
 80030d4:	6863      	ldr	r3, [r4, #4]
 80030d6:	dd0b      	ble.n	80030f0 <_printf_float+0x19c>
 80030d8:	6121      	str	r1, [r4, #16]
 80030da:	b913      	cbnz	r3, 80030e2 <_printf_float+0x18e>
 80030dc:	6822      	ldr	r2, [r4, #0]
 80030de:	07d0      	lsls	r0, r2, #31
 80030e0:	d502      	bpl.n	80030e8 <_printf_float+0x194>
 80030e2:	3301      	adds	r3, #1
 80030e4:	440b      	add	r3, r1
 80030e6:	6123      	str	r3, [r4, #16]
 80030e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80030ea:	f04f 0900 	mov.w	r9, #0
 80030ee:	e7db      	b.n	80030a8 <_printf_float+0x154>
 80030f0:	b913      	cbnz	r3, 80030f8 <_printf_float+0x1a4>
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	07d2      	lsls	r2, r2, #31
 80030f6:	d501      	bpl.n	80030fc <_printf_float+0x1a8>
 80030f8:	3302      	adds	r3, #2
 80030fa:	e7f4      	b.n	80030e6 <_printf_float+0x192>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e7f2      	b.n	80030e6 <_printf_float+0x192>
 8003100:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003106:	4299      	cmp	r1, r3
 8003108:	db05      	blt.n	8003116 <_printf_float+0x1c2>
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	6121      	str	r1, [r4, #16]
 800310e:	07d8      	lsls	r0, r3, #31
 8003110:	d5ea      	bpl.n	80030e8 <_printf_float+0x194>
 8003112:	1c4b      	adds	r3, r1, #1
 8003114:	e7e7      	b.n	80030e6 <_printf_float+0x192>
 8003116:	2900      	cmp	r1, #0
 8003118:	bfd4      	ite	le
 800311a:	f1c1 0202 	rsble	r2, r1, #2
 800311e:	2201      	movgt	r2, #1
 8003120:	4413      	add	r3, r2
 8003122:	e7e0      	b.n	80030e6 <_printf_float+0x192>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	055a      	lsls	r2, r3, #21
 8003128:	d407      	bmi.n	800313a <_printf_float+0x1e6>
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	4642      	mov	r2, r8
 800312e:	4631      	mov	r1, r6
 8003130:	4628      	mov	r0, r5
 8003132:	47b8      	blx	r7
 8003134:	3001      	adds	r0, #1
 8003136:	d12b      	bne.n	8003190 <_printf_float+0x23c>
 8003138:	e767      	b.n	800300a <_printf_float+0xb6>
 800313a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800313e:	f240 80dd 	bls.w	80032fc <_printf_float+0x3a8>
 8003142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003146:	2200      	movs	r2, #0
 8003148:	2300      	movs	r3, #0
 800314a:	f7fd fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800314e:	2800      	cmp	r0, #0
 8003150:	d033      	beq.n	80031ba <_printf_float+0x266>
 8003152:	4a37      	ldr	r2, [pc, #220]	@ (8003230 <_printf_float+0x2dc>)
 8003154:	2301      	movs	r3, #1
 8003156:	4631      	mov	r1, r6
 8003158:	4628      	mov	r0, r5
 800315a:	47b8      	blx	r7
 800315c:	3001      	adds	r0, #1
 800315e:	f43f af54 	beq.w	800300a <_printf_float+0xb6>
 8003162:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003166:	4543      	cmp	r3, r8
 8003168:	db02      	blt.n	8003170 <_printf_float+0x21c>
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	07d8      	lsls	r0, r3, #31
 800316e:	d50f      	bpl.n	8003190 <_printf_float+0x23c>
 8003170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003174:	4631      	mov	r1, r6
 8003176:	4628      	mov	r0, r5
 8003178:	47b8      	blx	r7
 800317a:	3001      	adds	r0, #1
 800317c:	f43f af45 	beq.w	800300a <_printf_float+0xb6>
 8003180:	f04f 0900 	mov.w	r9, #0
 8003184:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003188:	f104 0a1a 	add.w	sl, r4, #26
 800318c:	45c8      	cmp	r8, r9
 800318e:	dc09      	bgt.n	80031a4 <_printf_float+0x250>
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	079b      	lsls	r3, r3, #30
 8003194:	f100 8103 	bmi.w	800339e <_printf_float+0x44a>
 8003198:	68e0      	ldr	r0, [r4, #12]
 800319a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800319c:	4298      	cmp	r0, r3
 800319e:	bfb8      	it	lt
 80031a0:	4618      	movlt	r0, r3
 80031a2:	e734      	b.n	800300e <_printf_float+0xba>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4652      	mov	r2, sl
 80031a8:	4631      	mov	r1, r6
 80031aa:	4628      	mov	r0, r5
 80031ac:	47b8      	blx	r7
 80031ae:	3001      	adds	r0, #1
 80031b0:	f43f af2b 	beq.w	800300a <_printf_float+0xb6>
 80031b4:	f109 0901 	add.w	r9, r9, #1
 80031b8:	e7e8      	b.n	800318c <_printf_float+0x238>
 80031ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	dc39      	bgt.n	8003234 <_printf_float+0x2e0>
 80031c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003230 <_printf_float+0x2dc>)
 80031c2:	2301      	movs	r3, #1
 80031c4:	4631      	mov	r1, r6
 80031c6:	4628      	mov	r0, r5
 80031c8:	47b8      	blx	r7
 80031ca:	3001      	adds	r0, #1
 80031cc:	f43f af1d 	beq.w	800300a <_printf_float+0xb6>
 80031d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80031d4:	ea59 0303 	orrs.w	r3, r9, r3
 80031d8:	d102      	bne.n	80031e0 <_printf_float+0x28c>
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	07d9      	lsls	r1, r3, #31
 80031de:	d5d7      	bpl.n	8003190 <_printf_float+0x23c>
 80031e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031e4:	4631      	mov	r1, r6
 80031e6:	4628      	mov	r0, r5
 80031e8:	47b8      	blx	r7
 80031ea:	3001      	adds	r0, #1
 80031ec:	f43f af0d 	beq.w	800300a <_printf_float+0xb6>
 80031f0:	f04f 0a00 	mov.w	sl, #0
 80031f4:	f104 0b1a 	add.w	fp, r4, #26
 80031f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031fa:	425b      	negs	r3, r3
 80031fc:	4553      	cmp	r3, sl
 80031fe:	dc01      	bgt.n	8003204 <_printf_float+0x2b0>
 8003200:	464b      	mov	r3, r9
 8003202:	e793      	b.n	800312c <_printf_float+0x1d8>
 8003204:	2301      	movs	r3, #1
 8003206:	465a      	mov	r2, fp
 8003208:	4631      	mov	r1, r6
 800320a:	4628      	mov	r0, r5
 800320c:	47b8      	blx	r7
 800320e:	3001      	adds	r0, #1
 8003210:	f43f aefb 	beq.w	800300a <_printf_float+0xb6>
 8003214:	f10a 0a01 	add.w	sl, sl, #1
 8003218:	e7ee      	b.n	80031f8 <_printf_float+0x2a4>
 800321a:	bf00      	nop
 800321c:	7fefffff 	.word	0x7fefffff
 8003220:	080058a8 	.word	0x080058a8
 8003224:	080058ac 	.word	0x080058ac
 8003228:	080058b0 	.word	0x080058b0
 800322c:	080058b4 	.word	0x080058b4
 8003230:	080058b8 	.word	0x080058b8
 8003234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003236:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800323a:	4553      	cmp	r3, sl
 800323c:	bfa8      	it	ge
 800323e:	4653      	movge	r3, sl
 8003240:	2b00      	cmp	r3, #0
 8003242:	4699      	mov	r9, r3
 8003244:	dc36      	bgt.n	80032b4 <_printf_float+0x360>
 8003246:	f04f 0b00 	mov.w	fp, #0
 800324a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800324e:	f104 021a 	add.w	r2, r4, #26
 8003252:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003254:	9306      	str	r3, [sp, #24]
 8003256:	eba3 0309 	sub.w	r3, r3, r9
 800325a:	455b      	cmp	r3, fp
 800325c:	dc31      	bgt.n	80032c2 <_printf_float+0x36e>
 800325e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003260:	459a      	cmp	sl, r3
 8003262:	dc3a      	bgt.n	80032da <_printf_float+0x386>
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	07da      	lsls	r2, r3, #31
 8003268:	d437      	bmi.n	80032da <_printf_float+0x386>
 800326a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800326c:	ebaa 0903 	sub.w	r9, sl, r3
 8003270:	9b06      	ldr	r3, [sp, #24]
 8003272:	ebaa 0303 	sub.w	r3, sl, r3
 8003276:	4599      	cmp	r9, r3
 8003278:	bfa8      	it	ge
 800327a:	4699      	movge	r9, r3
 800327c:	f1b9 0f00 	cmp.w	r9, #0
 8003280:	dc33      	bgt.n	80032ea <_printf_float+0x396>
 8003282:	f04f 0800 	mov.w	r8, #0
 8003286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800328a:	f104 0b1a 	add.w	fp, r4, #26
 800328e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003290:	ebaa 0303 	sub.w	r3, sl, r3
 8003294:	eba3 0309 	sub.w	r3, r3, r9
 8003298:	4543      	cmp	r3, r8
 800329a:	f77f af79 	ble.w	8003190 <_printf_float+0x23c>
 800329e:	2301      	movs	r3, #1
 80032a0:	465a      	mov	r2, fp
 80032a2:	4631      	mov	r1, r6
 80032a4:	4628      	mov	r0, r5
 80032a6:	47b8      	blx	r7
 80032a8:	3001      	adds	r0, #1
 80032aa:	f43f aeae 	beq.w	800300a <_printf_float+0xb6>
 80032ae:	f108 0801 	add.w	r8, r8, #1
 80032b2:	e7ec      	b.n	800328e <_printf_float+0x33a>
 80032b4:	4642      	mov	r2, r8
 80032b6:	4631      	mov	r1, r6
 80032b8:	4628      	mov	r0, r5
 80032ba:	47b8      	blx	r7
 80032bc:	3001      	adds	r0, #1
 80032be:	d1c2      	bne.n	8003246 <_printf_float+0x2f2>
 80032c0:	e6a3      	b.n	800300a <_printf_float+0xb6>
 80032c2:	2301      	movs	r3, #1
 80032c4:	4631      	mov	r1, r6
 80032c6:	4628      	mov	r0, r5
 80032c8:	9206      	str	r2, [sp, #24]
 80032ca:	47b8      	blx	r7
 80032cc:	3001      	adds	r0, #1
 80032ce:	f43f ae9c 	beq.w	800300a <_printf_float+0xb6>
 80032d2:	9a06      	ldr	r2, [sp, #24]
 80032d4:	f10b 0b01 	add.w	fp, fp, #1
 80032d8:	e7bb      	b.n	8003252 <_printf_float+0x2fe>
 80032da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032de:	4631      	mov	r1, r6
 80032e0:	4628      	mov	r0, r5
 80032e2:	47b8      	blx	r7
 80032e4:	3001      	adds	r0, #1
 80032e6:	d1c0      	bne.n	800326a <_printf_float+0x316>
 80032e8:	e68f      	b.n	800300a <_printf_float+0xb6>
 80032ea:	9a06      	ldr	r2, [sp, #24]
 80032ec:	464b      	mov	r3, r9
 80032ee:	4442      	add	r2, r8
 80032f0:	4631      	mov	r1, r6
 80032f2:	4628      	mov	r0, r5
 80032f4:	47b8      	blx	r7
 80032f6:	3001      	adds	r0, #1
 80032f8:	d1c3      	bne.n	8003282 <_printf_float+0x32e>
 80032fa:	e686      	b.n	800300a <_printf_float+0xb6>
 80032fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003300:	f1ba 0f01 	cmp.w	sl, #1
 8003304:	dc01      	bgt.n	800330a <_printf_float+0x3b6>
 8003306:	07db      	lsls	r3, r3, #31
 8003308:	d536      	bpl.n	8003378 <_printf_float+0x424>
 800330a:	2301      	movs	r3, #1
 800330c:	4642      	mov	r2, r8
 800330e:	4631      	mov	r1, r6
 8003310:	4628      	mov	r0, r5
 8003312:	47b8      	blx	r7
 8003314:	3001      	adds	r0, #1
 8003316:	f43f ae78 	beq.w	800300a <_printf_float+0xb6>
 800331a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800331e:	4631      	mov	r1, r6
 8003320:	4628      	mov	r0, r5
 8003322:	47b8      	blx	r7
 8003324:	3001      	adds	r0, #1
 8003326:	f43f ae70 	beq.w	800300a <_printf_float+0xb6>
 800332a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800332e:	2200      	movs	r2, #0
 8003330:	2300      	movs	r3, #0
 8003332:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003336:	f7fd fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800333a:	b9c0      	cbnz	r0, 800336e <_printf_float+0x41a>
 800333c:	4653      	mov	r3, sl
 800333e:	f108 0201 	add.w	r2, r8, #1
 8003342:	4631      	mov	r1, r6
 8003344:	4628      	mov	r0, r5
 8003346:	47b8      	blx	r7
 8003348:	3001      	adds	r0, #1
 800334a:	d10c      	bne.n	8003366 <_printf_float+0x412>
 800334c:	e65d      	b.n	800300a <_printf_float+0xb6>
 800334e:	2301      	movs	r3, #1
 8003350:	465a      	mov	r2, fp
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	f43f ae56 	beq.w	800300a <_printf_float+0xb6>
 800335e:	f108 0801 	add.w	r8, r8, #1
 8003362:	45d0      	cmp	r8, sl
 8003364:	dbf3      	blt.n	800334e <_printf_float+0x3fa>
 8003366:	464b      	mov	r3, r9
 8003368:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800336c:	e6df      	b.n	800312e <_printf_float+0x1da>
 800336e:	f04f 0800 	mov.w	r8, #0
 8003372:	f104 0b1a 	add.w	fp, r4, #26
 8003376:	e7f4      	b.n	8003362 <_printf_float+0x40e>
 8003378:	2301      	movs	r3, #1
 800337a:	4642      	mov	r2, r8
 800337c:	e7e1      	b.n	8003342 <_printf_float+0x3ee>
 800337e:	2301      	movs	r3, #1
 8003380:	464a      	mov	r2, r9
 8003382:	4631      	mov	r1, r6
 8003384:	4628      	mov	r0, r5
 8003386:	47b8      	blx	r7
 8003388:	3001      	adds	r0, #1
 800338a:	f43f ae3e 	beq.w	800300a <_printf_float+0xb6>
 800338e:	f108 0801 	add.w	r8, r8, #1
 8003392:	68e3      	ldr	r3, [r4, #12]
 8003394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003396:	1a5b      	subs	r3, r3, r1
 8003398:	4543      	cmp	r3, r8
 800339a:	dcf0      	bgt.n	800337e <_printf_float+0x42a>
 800339c:	e6fc      	b.n	8003198 <_printf_float+0x244>
 800339e:	f04f 0800 	mov.w	r8, #0
 80033a2:	f104 0919 	add.w	r9, r4, #25
 80033a6:	e7f4      	b.n	8003392 <_printf_float+0x43e>

080033a8 <_printf_common>:
 80033a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ac:	4616      	mov	r6, r2
 80033ae:	4698      	mov	r8, r3
 80033b0:	688a      	ldr	r2, [r1, #8]
 80033b2:	690b      	ldr	r3, [r1, #16]
 80033b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bfb8      	it	lt
 80033bc:	4613      	movlt	r3, r2
 80033be:	6033      	str	r3, [r6, #0]
 80033c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033c4:	4607      	mov	r7, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	b10a      	cbz	r2, 80033ce <_printf_common+0x26>
 80033ca:	3301      	adds	r3, #1
 80033cc:	6033      	str	r3, [r6, #0]
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	0699      	lsls	r1, r3, #26
 80033d2:	bf42      	ittt	mi
 80033d4:	6833      	ldrmi	r3, [r6, #0]
 80033d6:	3302      	addmi	r3, #2
 80033d8:	6033      	strmi	r3, [r6, #0]
 80033da:	6825      	ldr	r5, [r4, #0]
 80033dc:	f015 0506 	ands.w	r5, r5, #6
 80033e0:	d106      	bne.n	80033f0 <_printf_common+0x48>
 80033e2:	f104 0a19 	add.w	sl, r4, #25
 80033e6:	68e3      	ldr	r3, [r4, #12]
 80033e8:	6832      	ldr	r2, [r6, #0]
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	42ab      	cmp	r3, r5
 80033ee:	dc26      	bgt.n	800343e <_printf_common+0x96>
 80033f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033f4:	6822      	ldr	r2, [r4, #0]
 80033f6:	3b00      	subs	r3, #0
 80033f8:	bf18      	it	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	0692      	lsls	r2, r2, #26
 80033fe:	d42b      	bmi.n	8003458 <_printf_common+0xb0>
 8003400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003404:	4641      	mov	r1, r8
 8003406:	4638      	mov	r0, r7
 8003408:	47c8      	blx	r9
 800340a:	3001      	adds	r0, #1
 800340c:	d01e      	beq.n	800344c <_printf_common+0xa4>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	6922      	ldr	r2, [r4, #16]
 8003412:	f003 0306 	and.w	r3, r3, #6
 8003416:	2b04      	cmp	r3, #4
 8003418:	bf02      	ittt	eq
 800341a:	68e5      	ldreq	r5, [r4, #12]
 800341c:	6833      	ldreq	r3, [r6, #0]
 800341e:	1aed      	subeq	r5, r5, r3
 8003420:	68a3      	ldr	r3, [r4, #8]
 8003422:	bf0c      	ite	eq
 8003424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003428:	2500      	movne	r5, #0
 800342a:	4293      	cmp	r3, r2
 800342c:	bfc4      	itt	gt
 800342e:	1a9b      	subgt	r3, r3, r2
 8003430:	18ed      	addgt	r5, r5, r3
 8003432:	2600      	movs	r6, #0
 8003434:	341a      	adds	r4, #26
 8003436:	42b5      	cmp	r5, r6
 8003438:	d11a      	bne.n	8003470 <_printf_common+0xc8>
 800343a:	2000      	movs	r0, #0
 800343c:	e008      	b.n	8003450 <_printf_common+0xa8>
 800343e:	2301      	movs	r3, #1
 8003440:	4652      	mov	r2, sl
 8003442:	4641      	mov	r1, r8
 8003444:	4638      	mov	r0, r7
 8003446:	47c8      	blx	r9
 8003448:	3001      	adds	r0, #1
 800344a:	d103      	bne.n	8003454 <_printf_common+0xac>
 800344c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003454:	3501      	adds	r5, #1
 8003456:	e7c6      	b.n	80033e6 <_printf_common+0x3e>
 8003458:	18e1      	adds	r1, r4, r3
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	2030      	movs	r0, #48	@ 0x30
 800345e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003462:	4422      	add	r2, r4
 8003464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800346c:	3302      	adds	r3, #2
 800346e:	e7c7      	b.n	8003400 <_printf_common+0x58>
 8003470:	2301      	movs	r3, #1
 8003472:	4622      	mov	r2, r4
 8003474:	4641      	mov	r1, r8
 8003476:	4638      	mov	r0, r7
 8003478:	47c8      	blx	r9
 800347a:	3001      	adds	r0, #1
 800347c:	d0e6      	beq.n	800344c <_printf_common+0xa4>
 800347e:	3601      	adds	r6, #1
 8003480:	e7d9      	b.n	8003436 <_printf_common+0x8e>
	...

08003484 <_printf_i>:
 8003484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	7e0f      	ldrb	r7, [r1, #24]
 800348a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800348c:	2f78      	cmp	r7, #120	@ 0x78
 800348e:	4691      	mov	r9, r2
 8003490:	4680      	mov	r8, r0
 8003492:	460c      	mov	r4, r1
 8003494:	469a      	mov	sl, r3
 8003496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800349a:	d807      	bhi.n	80034ac <_printf_i+0x28>
 800349c:	2f62      	cmp	r7, #98	@ 0x62
 800349e:	d80a      	bhi.n	80034b6 <_printf_i+0x32>
 80034a0:	2f00      	cmp	r7, #0
 80034a2:	f000 80d2 	beq.w	800364a <_printf_i+0x1c6>
 80034a6:	2f58      	cmp	r7, #88	@ 0x58
 80034a8:	f000 80b9 	beq.w	800361e <_printf_i+0x19a>
 80034ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034b4:	e03a      	b.n	800352c <_printf_i+0xa8>
 80034b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034ba:	2b15      	cmp	r3, #21
 80034bc:	d8f6      	bhi.n	80034ac <_printf_i+0x28>
 80034be:	a101      	add	r1, pc, #4	@ (adr r1, 80034c4 <_printf_i+0x40>)
 80034c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034c4:	0800351d 	.word	0x0800351d
 80034c8:	08003531 	.word	0x08003531
 80034cc:	080034ad 	.word	0x080034ad
 80034d0:	080034ad 	.word	0x080034ad
 80034d4:	080034ad 	.word	0x080034ad
 80034d8:	080034ad 	.word	0x080034ad
 80034dc:	08003531 	.word	0x08003531
 80034e0:	080034ad 	.word	0x080034ad
 80034e4:	080034ad 	.word	0x080034ad
 80034e8:	080034ad 	.word	0x080034ad
 80034ec:	080034ad 	.word	0x080034ad
 80034f0:	08003631 	.word	0x08003631
 80034f4:	0800355b 	.word	0x0800355b
 80034f8:	080035eb 	.word	0x080035eb
 80034fc:	080034ad 	.word	0x080034ad
 8003500:	080034ad 	.word	0x080034ad
 8003504:	08003653 	.word	0x08003653
 8003508:	080034ad 	.word	0x080034ad
 800350c:	0800355b 	.word	0x0800355b
 8003510:	080034ad 	.word	0x080034ad
 8003514:	080034ad 	.word	0x080034ad
 8003518:	080035f3 	.word	0x080035f3
 800351c:	6833      	ldr	r3, [r6, #0]
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6032      	str	r2, [r6, #0]
 8003524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800352c:	2301      	movs	r3, #1
 800352e:	e09d      	b.n	800366c <_printf_i+0x1e8>
 8003530:	6833      	ldr	r3, [r6, #0]
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	1d19      	adds	r1, r3, #4
 8003536:	6031      	str	r1, [r6, #0]
 8003538:	0606      	lsls	r6, r0, #24
 800353a:	d501      	bpl.n	8003540 <_printf_i+0xbc>
 800353c:	681d      	ldr	r5, [r3, #0]
 800353e:	e003      	b.n	8003548 <_printf_i+0xc4>
 8003540:	0645      	lsls	r5, r0, #25
 8003542:	d5fb      	bpl.n	800353c <_printf_i+0xb8>
 8003544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003548:	2d00      	cmp	r5, #0
 800354a:	da03      	bge.n	8003554 <_printf_i+0xd0>
 800354c:	232d      	movs	r3, #45	@ 0x2d
 800354e:	426d      	negs	r5, r5
 8003550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003554:	4859      	ldr	r0, [pc, #356]	@ (80036bc <_printf_i+0x238>)
 8003556:	230a      	movs	r3, #10
 8003558:	e011      	b.n	800357e <_printf_i+0xfa>
 800355a:	6821      	ldr	r1, [r4, #0]
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	0608      	lsls	r0, r1, #24
 8003560:	f853 5b04 	ldr.w	r5, [r3], #4
 8003564:	d402      	bmi.n	800356c <_printf_i+0xe8>
 8003566:	0649      	lsls	r1, r1, #25
 8003568:	bf48      	it	mi
 800356a:	b2ad      	uxthmi	r5, r5
 800356c:	2f6f      	cmp	r7, #111	@ 0x6f
 800356e:	4853      	ldr	r0, [pc, #332]	@ (80036bc <_printf_i+0x238>)
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	bf14      	ite	ne
 8003574:	230a      	movne	r3, #10
 8003576:	2308      	moveq	r3, #8
 8003578:	2100      	movs	r1, #0
 800357a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800357e:	6866      	ldr	r6, [r4, #4]
 8003580:	60a6      	str	r6, [r4, #8]
 8003582:	2e00      	cmp	r6, #0
 8003584:	bfa2      	ittt	ge
 8003586:	6821      	ldrge	r1, [r4, #0]
 8003588:	f021 0104 	bicge.w	r1, r1, #4
 800358c:	6021      	strge	r1, [r4, #0]
 800358e:	b90d      	cbnz	r5, 8003594 <_printf_i+0x110>
 8003590:	2e00      	cmp	r6, #0
 8003592:	d04b      	beq.n	800362c <_printf_i+0x1a8>
 8003594:	4616      	mov	r6, r2
 8003596:	fbb5 f1f3 	udiv	r1, r5, r3
 800359a:	fb03 5711 	mls	r7, r3, r1, r5
 800359e:	5dc7      	ldrb	r7, [r0, r7]
 80035a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035a4:	462f      	mov	r7, r5
 80035a6:	42bb      	cmp	r3, r7
 80035a8:	460d      	mov	r5, r1
 80035aa:	d9f4      	bls.n	8003596 <_printf_i+0x112>
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d10b      	bne.n	80035c8 <_printf_i+0x144>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	07df      	lsls	r7, r3, #31
 80035b4:	d508      	bpl.n	80035c8 <_printf_i+0x144>
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	6861      	ldr	r1, [r4, #4]
 80035ba:	4299      	cmp	r1, r3
 80035bc:	bfde      	ittt	le
 80035be:	2330      	movle	r3, #48	@ 0x30
 80035c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80035c8:	1b92      	subs	r2, r2, r6
 80035ca:	6122      	str	r2, [r4, #16]
 80035cc:	f8cd a000 	str.w	sl, [sp]
 80035d0:	464b      	mov	r3, r9
 80035d2:	aa03      	add	r2, sp, #12
 80035d4:	4621      	mov	r1, r4
 80035d6:	4640      	mov	r0, r8
 80035d8:	f7ff fee6 	bl	80033a8 <_printf_common>
 80035dc:	3001      	adds	r0, #1
 80035de:	d14a      	bne.n	8003676 <_printf_i+0x1f2>
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035e4:	b004      	add	sp, #16
 80035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	f043 0320 	orr.w	r3, r3, #32
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	4833      	ldr	r0, [pc, #204]	@ (80036c0 <_printf_i+0x23c>)
 80035f4:	2778      	movs	r7, #120	@ 0x78
 80035f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	6831      	ldr	r1, [r6, #0]
 80035fe:	061f      	lsls	r7, r3, #24
 8003600:	f851 5b04 	ldr.w	r5, [r1], #4
 8003604:	d402      	bmi.n	800360c <_printf_i+0x188>
 8003606:	065f      	lsls	r7, r3, #25
 8003608:	bf48      	it	mi
 800360a:	b2ad      	uxthmi	r5, r5
 800360c:	6031      	str	r1, [r6, #0]
 800360e:	07d9      	lsls	r1, r3, #31
 8003610:	bf44      	itt	mi
 8003612:	f043 0320 	orrmi.w	r3, r3, #32
 8003616:	6023      	strmi	r3, [r4, #0]
 8003618:	b11d      	cbz	r5, 8003622 <_printf_i+0x19e>
 800361a:	2310      	movs	r3, #16
 800361c:	e7ac      	b.n	8003578 <_printf_i+0xf4>
 800361e:	4827      	ldr	r0, [pc, #156]	@ (80036bc <_printf_i+0x238>)
 8003620:	e7e9      	b.n	80035f6 <_printf_i+0x172>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	f023 0320 	bic.w	r3, r3, #32
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	e7f6      	b.n	800361a <_printf_i+0x196>
 800362c:	4616      	mov	r6, r2
 800362e:	e7bd      	b.n	80035ac <_printf_i+0x128>
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	6825      	ldr	r5, [r4, #0]
 8003634:	6961      	ldr	r1, [r4, #20]
 8003636:	1d18      	adds	r0, r3, #4
 8003638:	6030      	str	r0, [r6, #0]
 800363a:	062e      	lsls	r6, r5, #24
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	d501      	bpl.n	8003644 <_printf_i+0x1c0>
 8003640:	6019      	str	r1, [r3, #0]
 8003642:	e002      	b.n	800364a <_printf_i+0x1c6>
 8003644:	0668      	lsls	r0, r5, #25
 8003646:	d5fb      	bpl.n	8003640 <_printf_i+0x1bc>
 8003648:	8019      	strh	r1, [r3, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	6123      	str	r3, [r4, #16]
 800364e:	4616      	mov	r6, r2
 8003650:	e7bc      	b.n	80035cc <_printf_i+0x148>
 8003652:	6833      	ldr	r3, [r6, #0]
 8003654:	1d1a      	adds	r2, r3, #4
 8003656:	6032      	str	r2, [r6, #0]
 8003658:	681e      	ldr	r6, [r3, #0]
 800365a:	6862      	ldr	r2, [r4, #4]
 800365c:	2100      	movs	r1, #0
 800365e:	4630      	mov	r0, r6
 8003660:	f7fc fdbe 	bl	80001e0 <memchr>
 8003664:	b108      	cbz	r0, 800366a <_printf_i+0x1e6>
 8003666:	1b80      	subs	r0, r0, r6
 8003668:	6060      	str	r0, [r4, #4]
 800366a:	6863      	ldr	r3, [r4, #4]
 800366c:	6123      	str	r3, [r4, #16]
 800366e:	2300      	movs	r3, #0
 8003670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003674:	e7aa      	b.n	80035cc <_printf_i+0x148>
 8003676:	6923      	ldr	r3, [r4, #16]
 8003678:	4632      	mov	r2, r6
 800367a:	4649      	mov	r1, r9
 800367c:	4640      	mov	r0, r8
 800367e:	47d0      	blx	sl
 8003680:	3001      	adds	r0, #1
 8003682:	d0ad      	beq.n	80035e0 <_printf_i+0x15c>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	079b      	lsls	r3, r3, #30
 8003688:	d413      	bmi.n	80036b2 <_printf_i+0x22e>
 800368a:	68e0      	ldr	r0, [r4, #12]
 800368c:	9b03      	ldr	r3, [sp, #12]
 800368e:	4298      	cmp	r0, r3
 8003690:	bfb8      	it	lt
 8003692:	4618      	movlt	r0, r3
 8003694:	e7a6      	b.n	80035e4 <_printf_i+0x160>
 8003696:	2301      	movs	r3, #1
 8003698:	4632      	mov	r2, r6
 800369a:	4649      	mov	r1, r9
 800369c:	4640      	mov	r0, r8
 800369e:	47d0      	blx	sl
 80036a0:	3001      	adds	r0, #1
 80036a2:	d09d      	beq.n	80035e0 <_printf_i+0x15c>
 80036a4:	3501      	adds	r5, #1
 80036a6:	68e3      	ldr	r3, [r4, #12]
 80036a8:	9903      	ldr	r1, [sp, #12]
 80036aa:	1a5b      	subs	r3, r3, r1
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	dcf2      	bgt.n	8003696 <_printf_i+0x212>
 80036b0:	e7eb      	b.n	800368a <_printf_i+0x206>
 80036b2:	2500      	movs	r5, #0
 80036b4:	f104 0619 	add.w	r6, r4, #25
 80036b8:	e7f5      	b.n	80036a6 <_printf_i+0x222>
 80036ba:	bf00      	nop
 80036bc:	080058ba 	.word	0x080058ba
 80036c0:	080058cb 	.word	0x080058cb

080036c4 <std>:
 80036c4:	2300      	movs	r3, #0
 80036c6:	b510      	push	{r4, lr}
 80036c8:	4604      	mov	r4, r0
 80036ca:	e9c0 3300 	strd	r3, r3, [r0]
 80036ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036d2:	6083      	str	r3, [r0, #8]
 80036d4:	8181      	strh	r1, [r0, #12]
 80036d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80036d8:	81c2      	strh	r2, [r0, #14]
 80036da:	6183      	str	r3, [r0, #24]
 80036dc:	4619      	mov	r1, r3
 80036de:	2208      	movs	r2, #8
 80036e0:	305c      	adds	r0, #92	@ 0x5c
 80036e2:	f000 f9f9 	bl	8003ad8 <memset>
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <std+0x58>)
 80036e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80036ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003720 <std+0x5c>)
 80036ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <std+0x60>)
 80036f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <std+0x64>)
 80036f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <std+0x68>)
 80036f8:	6224      	str	r4, [r4, #32]
 80036fa:	429c      	cmp	r4, r3
 80036fc:	d006      	beq.n	800370c <std+0x48>
 80036fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003702:	4294      	cmp	r4, r2
 8003704:	d002      	beq.n	800370c <std+0x48>
 8003706:	33d0      	adds	r3, #208	@ 0xd0
 8003708:	429c      	cmp	r4, r3
 800370a:	d105      	bne.n	8003718 <std+0x54>
 800370c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003714:	f000 ba5c 	b.w	8003bd0 <__retarget_lock_init_recursive>
 8003718:	bd10      	pop	{r4, pc}
 800371a:	bf00      	nop
 800371c:	08003929 	.word	0x08003929
 8003720:	0800394b 	.word	0x0800394b
 8003724:	08003983 	.word	0x08003983
 8003728:	080039a7 	.word	0x080039a7
 800372c:	20000330 	.word	0x20000330

08003730 <stdio_exit_handler>:
 8003730:	4a02      	ldr	r2, [pc, #8]	@ (800373c <stdio_exit_handler+0xc>)
 8003732:	4903      	ldr	r1, [pc, #12]	@ (8003740 <stdio_exit_handler+0x10>)
 8003734:	4803      	ldr	r0, [pc, #12]	@ (8003744 <stdio_exit_handler+0x14>)
 8003736:	f000 b869 	b.w	800380c <_fwalk_sglue>
 800373a:	bf00      	nop
 800373c:	20000064 	.word	0x20000064
 8003740:	08005501 	.word	0x08005501
 8003744:	20000074 	.word	0x20000074

08003748 <cleanup_stdio>:
 8003748:	6841      	ldr	r1, [r0, #4]
 800374a:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <cleanup_stdio+0x34>)
 800374c:	4299      	cmp	r1, r3
 800374e:	b510      	push	{r4, lr}
 8003750:	4604      	mov	r4, r0
 8003752:	d001      	beq.n	8003758 <cleanup_stdio+0x10>
 8003754:	f001 fed4 	bl	8005500 <_fflush_r>
 8003758:	68a1      	ldr	r1, [r4, #8]
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <cleanup_stdio+0x38>)
 800375c:	4299      	cmp	r1, r3
 800375e:	d002      	beq.n	8003766 <cleanup_stdio+0x1e>
 8003760:	4620      	mov	r0, r4
 8003762:	f001 fecd 	bl	8005500 <_fflush_r>
 8003766:	68e1      	ldr	r1, [r4, #12]
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <cleanup_stdio+0x3c>)
 800376a:	4299      	cmp	r1, r3
 800376c:	d004      	beq.n	8003778 <cleanup_stdio+0x30>
 800376e:	4620      	mov	r0, r4
 8003770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003774:	f001 bec4 	b.w	8005500 <_fflush_r>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	bf00      	nop
 800377c:	20000330 	.word	0x20000330
 8003780:	20000398 	.word	0x20000398
 8003784:	20000400 	.word	0x20000400

08003788 <global_stdio_init.part.0>:
 8003788:	b510      	push	{r4, lr}
 800378a:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <global_stdio_init.part.0+0x30>)
 800378c:	4c0b      	ldr	r4, [pc, #44]	@ (80037bc <global_stdio_init.part.0+0x34>)
 800378e:	4a0c      	ldr	r2, [pc, #48]	@ (80037c0 <global_stdio_init.part.0+0x38>)
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4620      	mov	r0, r4
 8003794:	2200      	movs	r2, #0
 8003796:	2104      	movs	r1, #4
 8003798:	f7ff ff94 	bl	80036c4 <std>
 800379c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037a0:	2201      	movs	r2, #1
 80037a2:	2109      	movs	r1, #9
 80037a4:	f7ff ff8e 	bl	80036c4 <std>
 80037a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037ac:	2202      	movs	r2, #2
 80037ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b2:	2112      	movs	r1, #18
 80037b4:	f7ff bf86 	b.w	80036c4 <std>
 80037b8:	20000468 	.word	0x20000468
 80037bc:	20000330 	.word	0x20000330
 80037c0:	08003731 	.word	0x08003731

080037c4 <__sfp_lock_acquire>:
 80037c4:	4801      	ldr	r0, [pc, #4]	@ (80037cc <__sfp_lock_acquire+0x8>)
 80037c6:	f000 ba04 	b.w	8003bd2 <__retarget_lock_acquire_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000471 	.word	0x20000471

080037d0 <__sfp_lock_release>:
 80037d0:	4801      	ldr	r0, [pc, #4]	@ (80037d8 <__sfp_lock_release+0x8>)
 80037d2:	f000 b9ff 	b.w	8003bd4 <__retarget_lock_release_recursive>
 80037d6:	bf00      	nop
 80037d8:	20000471 	.word	0x20000471

080037dc <__sinit>:
 80037dc:	b510      	push	{r4, lr}
 80037de:	4604      	mov	r4, r0
 80037e0:	f7ff fff0 	bl	80037c4 <__sfp_lock_acquire>
 80037e4:	6a23      	ldr	r3, [r4, #32]
 80037e6:	b11b      	cbz	r3, 80037f0 <__sinit+0x14>
 80037e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ec:	f7ff bff0 	b.w	80037d0 <__sfp_lock_release>
 80037f0:	4b04      	ldr	r3, [pc, #16]	@ (8003804 <__sinit+0x28>)
 80037f2:	6223      	str	r3, [r4, #32]
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <__sinit+0x2c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f5      	bne.n	80037e8 <__sinit+0xc>
 80037fc:	f7ff ffc4 	bl	8003788 <global_stdio_init.part.0>
 8003800:	e7f2      	b.n	80037e8 <__sinit+0xc>
 8003802:	bf00      	nop
 8003804:	08003749 	.word	0x08003749
 8003808:	20000468 	.word	0x20000468

0800380c <_fwalk_sglue>:
 800380c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003810:	4607      	mov	r7, r0
 8003812:	4688      	mov	r8, r1
 8003814:	4614      	mov	r4, r2
 8003816:	2600      	movs	r6, #0
 8003818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800381c:	f1b9 0901 	subs.w	r9, r9, #1
 8003820:	d505      	bpl.n	800382e <_fwalk_sglue+0x22>
 8003822:	6824      	ldr	r4, [r4, #0]
 8003824:	2c00      	cmp	r4, #0
 8003826:	d1f7      	bne.n	8003818 <_fwalk_sglue+0xc>
 8003828:	4630      	mov	r0, r6
 800382a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800382e:	89ab      	ldrh	r3, [r5, #12]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d907      	bls.n	8003844 <_fwalk_sglue+0x38>
 8003834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003838:	3301      	adds	r3, #1
 800383a:	d003      	beq.n	8003844 <_fwalk_sglue+0x38>
 800383c:	4629      	mov	r1, r5
 800383e:	4638      	mov	r0, r7
 8003840:	47c0      	blx	r8
 8003842:	4306      	orrs	r6, r0
 8003844:	3568      	adds	r5, #104	@ 0x68
 8003846:	e7e9      	b.n	800381c <_fwalk_sglue+0x10>

08003848 <iprintf>:
 8003848:	b40f      	push	{r0, r1, r2, r3}
 800384a:	b507      	push	{r0, r1, r2, lr}
 800384c:	4906      	ldr	r1, [pc, #24]	@ (8003868 <iprintf+0x20>)
 800384e:	ab04      	add	r3, sp, #16
 8003850:	6808      	ldr	r0, [r1, #0]
 8003852:	f853 2b04 	ldr.w	r2, [r3], #4
 8003856:	6881      	ldr	r1, [r0, #8]
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	f001 fcb5 	bl	80051c8 <_vfiprintf_r>
 800385e:	b003      	add	sp, #12
 8003860:	f85d eb04 	ldr.w	lr, [sp], #4
 8003864:	b004      	add	sp, #16
 8003866:	4770      	bx	lr
 8003868:	20000070 	.word	0x20000070

0800386c <_puts_r>:
 800386c:	6a03      	ldr	r3, [r0, #32]
 800386e:	b570      	push	{r4, r5, r6, lr}
 8003870:	6884      	ldr	r4, [r0, #8]
 8003872:	4605      	mov	r5, r0
 8003874:	460e      	mov	r6, r1
 8003876:	b90b      	cbnz	r3, 800387c <_puts_r+0x10>
 8003878:	f7ff ffb0 	bl	80037dc <__sinit>
 800387c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800387e:	07db      	lsls	r3, r3, #31
 8003880:	d405      	bmi.n	800388e <_puts_r+0x22>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	0598      	lsls	r0, r3, #22
 8003886:	d402      	bmi.n	800388e <_puts_r+0x22>
 8003888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800388a:	f000 f9a2 	bl	8003bd2 <__retarget_lock_acquire_recursive>
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	0719      	lsls	r1, r3, #28
 8003892:	d502      	bpl.n	800389a <_puts_r+0x2e>
 8003894:	6923      	ldr	r3, [r4, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d135      	bne.n	8003906 <_puts_r+0x9a>
 800389a:	4621      	mov	r1, r4
 800389c:	4628      	mov	r0, r5
 800389e:	f000 f8c5 	bl	8003a2c <__swsetup_r>
 80038a2:	b380      	cbz	r0, 8003906 <_puts_r+0x9a>
 80038a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80038a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038aa:	07da      	lsls	r2, r3, #31
 80038ac:	d405      	bmi.n	80038ba <_puts_r+0x4e>
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	059b      	lsls	r3, r3, #22
 80038b2:	d402      	bmi.n	80038ba <_puts_r+0x4e>
 80038b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038b6:	f000 f98d 	bl	8003bd4 <__retarget_lock_release_recursive>
 80038ba:	4628      	mov	r0, r5
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da04      	bge.n	80038cc <_puts_r+0x60>
 80038c2:	69a2      	ldr	r2, [r4, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	dc17      	bgt.n	80038f8 <_puts_r+0x8c>
 80038c8:	290a      	cmp	r1, #10
 80038ca:	d015      	beq.n	80038f8 <_puts_r+0x8c>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	6022      	str	r2, [r4, #0]
 80038d2:	7019      	strb	r1, [r3, #0]
 80038d4:	68a3      	ldr	r3, [r4, #8]
 80038d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038da:	3b01      	subs	r3, #1
 80038dc:	60a3      	str	r3, [r4, #8]
 80038de:	2900      	cmp	r1, #0
 80038e0:	d1ed      	bne.n	80038be <_puts_r+0x52>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	da11      	bge.n	800390a <_puts_r+0x9e>
 80038e6:	4622      	mov	r2, r4
 80038e8:	210a      	movs	r1, #10
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 f85f 	bl	80039ae <__swbuf_r>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d0d7      	beq.n	80038a4 <_puts_r+0x38>
 80038f4:	250a      	movs	r5, #10
 80038f6:	e7d7      	b.n	80038a8 <_puts_r+0x3c>
 80038f8:	4622      	mov	r2, r4
 80038fa:	4628      	mov	r0, r5
 80038fc:	f000 f857 	bl	80039ae <__swbuf_r>
 8003900:	3001      	adds	r0, #1
 8003902:	d1e7      	bne.n	80038d4 <_puts_r+0x68>
 8003904:	e7ce      	b.n	80038a4 <_puts_r+0x38>
 8003906:	3e01      	subs	r6, #1
 8003908:	e7e4      	b.n	80038d4 <_puts_r+0x68>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	6022      	str	r2, [r4, #0]
 8003910:	220a      	movs	r2, #10
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e7ee      	b.n	80038f4 <_puts_r+0x88>
	...

08003918 <puts>:
 8003918:	4b02      	ldr	r3, [pc, #8]	@ (8003924 <puts+0xc>)
 800391a:	4601      	mov	r1, r0
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	f7ff bfa5 	b.w	800386c <_puts_r>
 8003922:	bf00      	nop
 8003924:	20000070 	.word	0x20000070

08003928 <__sread>:
 8003928:	b510      	push	{r4, lr}
 800392a:	460c      	mov	r4, r1
 800392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003930:	f000 f900 	bl	8003b34 <_read_r>
 8003934:	2800      	cmp	r0, #0
 8003936:	bfab      	itete	ge
 8003938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800393a:	89a3      	ldrhlt	r3, [r4, #12]
 800393c:	181b      	addge	r3, r3, r0
 800393e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003942:	bfac      	ite	ge
 8003944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003946:	81a3      	strhlt	r3, [r4, #12]
 8003948:	bd10      	pop	{r4, pc}

0800394a <__swrite>:
 800394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	461f      	mov	r7, r3
 8003950:	898b      	ldrh	r3, [r1, #12]
 8003952:	05db      	lsls	r3, r3, #23
 8003954:	4605      	mov	r5, r0
 8003956:	460c      	mov	r4, r1
 8003958:	4616      	mov	r6, r2
 800395a:	d505      	bpl.n	8003968 <__swrite+0x1e>
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	2302      	movs	r3, #2
 8003962:	2200      	movs	r2, #0
 8003964:	f000 f8d4 	bl	8003b10 <_lseek_r>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800396e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	4632      	mov	r2, r6
 8003976:	463b      	mov	r3, r7
 8003978:	4628      	mov	r0, r5
 800397a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	f000 b8eb 	b.w	8003b58 <_write_r>

08003982 <__sseek>:
 8003982:	b510      	push	{r4, lr}
 8003984:	460c      	mov	r4, r1
 8003986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398a:	f000 f8c1 	bl	8003b10 <_lseek_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	bf15      	itete	ne
 8003994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800399a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800399e:	81a3      	strheq	r3, [r4, #12]
 80039a0:	bf18      	it	ne
 80039a2:	81a3      	strhne	r3, [r4, #12]
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <__sclose>:
 80039a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039aa:	f000 b8a1 	b.w	8003af0 <_close_r>

080039ae <__swbuf_r>:
 80039ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b0:	460e      	mov	r6, r1
 80039b2:	4614      	mov	r4, r2
 80039b4:	4605      	mov	r5, r0
 80039b6:	b118      	cbz	r0, 80039c0 <__swbuf_r+0x12>
 80039b8:	6a03      	ldr	r3, [r0, #32]
 80039ba:	b90b      	cbnz	r3, 80039c0 <__swbuf_r+0x12>
 80039bc:	f7ff ff0e 	bl	80037dc <__sinit>
 80039c0:	69a3      	ldr	r3, [r4, #24]
 80039c2:	60a3      	str	r3, [r4, #8]
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	071a      	lsls	r2, r3, #28
 80039c8:	d501      	bpl.n	80039ce <__swbuf_r+0x20>
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	b943      	cbnz	r3, 80039e0 <__swbuf_r+0x32>
 80039ce:	4621      	mov	r1, r4
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 f82b 	bl	8003a2c <__swsetup_r>
 80039d6:	b118      	cbz	r0, 80039e0 <__swbuf_r+0x32>
 80039d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80039dc:	4638      	mov	r0, r7
 80039de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	6922      	ldr	r2, [r4, #16]
 80039e4:	1a98      	subs	r0, r3, r2
 80039e6:	6963      	ldr	r3, [r4, #20]
 80039e8:	b2f6      	uxtb	r6, r6
 80039ea:	4283      	cmp	r3, r0
 80039ec:	4637      	mov	r7, r6
 80039ee:	dc05      	bgt.n	80039fc <__swbuf_r+0x4e>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	f001 fd84 	bl	8005500 <_fflush_r>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d1ed      	bne.n	80039d8 <__swbuf_r+0x2a>
 80039fc:	68a3      	ldr	r3, [r4, #8]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	60a3      	str	r3, [r4, #8]
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	6022      	str	r2, [r4, #0]
 8003a08:	701e      	strb	r6, [r3, #0]
 8003a0a:	6962      	ldr	r2, [r4, #20]
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d004      	beq.n	8003a1c <__swbuf_r+0x6e>
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	07db      	lsls	r3, r3, #31
 8003a16:	d5e1      	bpl.n	80039dc <__swbuf_r+0x2e>
 8003a18:	2e0a      	cmp	r6, #10
 8003a1a:	d1df      	bne.n	80039dc <__swbuf_r+0x2e>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f001 fd6e 	bl	8005500 <_fflush_r>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d0d9      	beq.n	80039dc <__swbuf_r+0x2e>
 8003a28:	e7d6      	b.n	80039d8 <__swbuf_r+0x2a>
	...

08003a2c <__swsetup_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4b29      	ldr	r3, [pc, #164]	@ (8003ad4 <__swsetup_r+0xa8>)
 8003a30:	4605      	mov	r5, r0
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	460c      	mov	r4, r1
 8003a36:	b118      	cbz	r0, 8003a40 <__swsetup_r+0x14>
 8003a38:	6a03      	ldr	r3, [r0, #32]
 8003a3a:	b90b      	cbnz	r3, 8003a40 <__swsetup_r+0x14>
 8003a3c:	f7ff fece 	bl	80037dc <__sinit>
 8003a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a44:	0719      	lsls	r1, r3, #28
 8003a46:	d422      	bmi.n	8003a8e <__swsetup_r+0x62>
 8003a48:	06da      	lsls	r2, r3, #27
 8003a4a:	d407      	bmi.n	8003a5c <__swsetup_r+0x30>
 8003a4c:	2209      	movs	r2, #9
 8003a4e:	602a      	str	r2, [r5, #0]
 8003a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a54:	81a3      	strh	r3, [r4, #12]
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a5a:	e033      	b.n	8003ac4 <__swsetup_r+0x98>
 8003a5c:	0758      	lsls	r0, r3, #29
 8003a5e:	d512      	bpl.n	8003a86 <__swsetup_r+0x5a>
 8003a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a62:	b141      	cbz	r1, 8003a76 <__swsetup_r+0x4a>
 8003a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <__swsetup_r+0x46>
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 feff 	bl	8004870 <_free_r>
 8003a72:	2300      	movs	r3, #0
 8003a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a7c:	81a3      	strh	r3, [r4, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	f043 0308 	orr.w	r3, r3, #8
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	b94b      	cbnz	r3, 8003aa6 <__swsetup_r+0x7a>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9c:	d003      	beq.n	8003aa6 <__swsetup_r+0x7a>
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f001 fd7b 	bl	800559c <__smakebuf_r>
 8003aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aaa:	f013 0201 	ands.w	r2, r3, #1
 8003aae:	d00a      	beq.n	8003ac6 <__swsetup_r+0x9a>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	60a2      	str	r2, [r4, #8]
 8003ab4:	6962      	ldr	r2, [r4, #20]
 8003ab6:	4252      	negs	r2, r2
 8003ab8:	61a2      	str	r2, [r4, #24]
 8003aba:	6922      	ldr	r2, [r4, #16]
 8003abc:	b942      	cbnz	r2, 8003ad0 <__swsetup_r+0xa4>
 8003abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ac2:	d1c5      	bne.n	8003a50 <__swsetup_r+0x24>
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
 8003ac6:	0799      	lsls	r1, r3, #30
 8003ac8:	bf58      	it	pl
 8003aca:	6962      	ldrpl	r2, [r4, #20]
 8003acc:	60a2      	str	r2, [r4, #8]
 8003ace:	e7f4      	b.n	8003aba <__swsetup_r+0x8e>
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e7f7      	b.n	8003ac4 <__swsetup_r+0x98>
 8003ad4:	20000070 	.word	0x20000070

08003ad8 <memset>:
 8003ad8:	4402      	add	r2, r0
 8003ada:	4603      	mov	r3, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <memset+0xa>
 8003ae0:	4770      	bx	lr
 8003ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae6:	e7f9      	b.n	8003adc <memset+0x4>

08003ae8 <_localeconv_r>:
 8003ae8:	4800      	ldr	r0, [pc, #0]	@ (8003aec <_localeconv_r+0x4>)
 8003aea:	4770      	bx	lr
 8003aec:	200001b0 	.word	0x200001b0

08003af0 <_close_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4d06      	ldr	r5, [pc, #24]	@ (8003b0c <_close_r+0x1c>)
 8003af4:	2300      	movs	r3, #0
 8003af6:	4604      	mov	r4, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	f7fd fcd8 	bl	80014b0 <_close>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_close_r+0x1a>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_close_r+0x1a>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	2000046c 	.word	0x2000046c

08003b10 <_lseek_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4d07      	ldr	r5, [pc, #28]	@ (8003b30 <_lseek_r+0x20>)
 8003b14:	4604      	mov	r4, r0
 8003b16:	4608      	mov	r0, r1
 8003b18:	4611      	mov	r1, r2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fd fcd0 	bl	80014c4 <_lseek>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_lseek_r+0x1e>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_lseek_r+0x1e>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	2000046c 	.word	0x2000046c

08003b34 <_read_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4d07      	ldr	r5, [pc, #28]	@ (8003b54 <_read_r+0x20>)
 8003b38:	4604      	mov	r4, r0
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fd fca4 	bl	8001490 <_read>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_read_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_read_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	2000046c 	.word	0x2000046c

08003b58 <_write_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	4d07      	ldr	r5, [pc, #28]	@ (8003b78 <_write_r+0x20>)
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	4608      	mov	r0, r1
 8003b60:	4611      	mov	r1, r2
 8003b62:	2200      	movs	r2, #0
 8003b64:	602a      	str	r2, [r5, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7fd f9e8 	bl	8000f3c <_write>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_write_r+0x1e>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_write_r+0x1e>
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	2000046c 	.word	0x2000046c

08003b7c <__errno>:
 8003b7c:	4b01      	ldr	r3, [pc, #4]	@ (8003b84 <__errno+0x8>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000070 	.word	0x20000070

08003b88 <__libc_init_array>:
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003bc0 <__libc_init_array+0x38>)
 8003b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003bc4 <__libc_init_array+0x3c>)
 8003b8e:	1b64      	subs	r4, r4, r5
 8003b90:	10a4      	asrs	r4, r4, #2
 8003b92:	2600      	movs	r6, #0
 8003b94:	42a6      	cmp	r6, r4
 8003b96:	d109      	bne.n	8003bac <__libc_init_array+0x24>
 8003b98:	4d0b      	ldr	r5, [pc, #44]	@ (8003bc8 <__libc_init_array+0x40>)
 8003b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003bcc <__libc_init_array+0x44>)
 8003b9c:	f001 fe2a 	bl	80057f4 <_init>
 8003ba0:	1b64      	subs	r4, r4, r5
 8003ba2:	10a4      	asrs	r4, r4, #2
 8003ba4:	2600      	movs	r6, #0
 8003ba6:	42a6      	cmp	r6, r4
 8003ba8:	d105      	bne.n	8003bb6 <__libc_init_array+0x2e>
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb0:	4798      	blx	r3
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7ee      	b.n	8003b94 <__libc_init_array+0xc>
 8003bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bba:	4798      	blx	r3
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	e7f2      	b.n	8003ba6 <__libc_init_array+0x1e>
 8003bc0:	08005c20 	.word	0x08005c20
 8003bc4:	08005c20 	.word	0x08005c20
 8003bc8:	08005c20 	.word	0x08005c20
 8003bcc:	08005c24 	.word	0x08005c24

08003bd0 <__retarget_lock_init_recursive>:
 8003bd0:	4770      	bx	lr

08003bd2 <__retarget_lock_acquire_recursive>:
 8003bd2:	4770      	bx	lr

08003bd4 <__retarget_lock_release_recursive>:
 8003bd4:	4770      	bx	lr

08003bd6 <quorem>:
 8003bd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bda:	6903      	ldr	r3, [r0, #16]
 8003bdc:	690c      	ldr	r4, [r1, #16]
 8003bde:	42a3      	cmp	r3, r4
 8003be0:	4607      	mov	r7, r0
 8003be2:	db7e      	blt.n	8003ce2 <quorem+0x10c>
 8003be4:	3c01      	subs	r4, #1
 8003be6:	f101 0814 	add.w	r8, r1, #20
 8003bea:	00a3      	lsls	r3, r4, #2
 8003bec:	f100 0514 	add.w	r5, r0, #20
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c00:	3301      	adds	r3, #1
 8003c02:	429a      	cmp	r2, r3
 8003c04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c0c:	d32e      	bcc.n	8003c6c <quorem+0x96>
 8003c0e:	f04f 0a00 	mov.w	sl, #0
 8003c12:	46c4      	mov	ip, r8
 8003c14:	46ae      	mov	lr, r5
 8003c16:	46d3      	mov	fp, sl
 8003c18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c1c:	b298      	uxth	r0, r3
 8003c1e:	fb06 a000 	mla	r0, r6, r0, sl
 8003c22:	0c02      	lsrs	r2, r0, #16
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	fb06 2303 	mla	r3, r6, r3, r2
 8003c2a:	f8de 2000 	ldr.w	r2, [lr]
 8003c2e:	b280      	uxth	r0, r0
 8003c30:	b292      	uxth	r2, r2
 8003c32:	1a12      	subs	r2, r2, r0
 8003c34:	445a      	add	r2, fp
 8003c36:	f8de 0000 	ldr.w	r0, [lr]
 8003c3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c4e:	45e1      	cmp	r9, ip
 8003c50:	f84e 2b04 	str.w	r2, [lr], #4
 8003c54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c58:	d2de      	bcs.n	8003c18 <quorem+0x42>
 8003c5a:	9b00      	ldr	r3, [sp, #0]
 8003c5c:	58eb      	ldr	r3, [r5, r3]
 8003c5e:	b92b      	cbnz	r3, 8003c6c <quorem+0x96>
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	3b04      	subs	r3, #4
 8003c64:	429d      	cmp	r5, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	d32f      	bcc.n	8003cca <quorem+0xf4>
 8003c6a:	613c      	str	r4, [r7, #16]
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f001 f979 	bl	8004f64 <__mcmp>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	db25      	blt.n	8003cc2 <quorem+0xec>
 8003c76:	4629      	mov	r1, r5
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c7e:	f8d1 c000 	ldr.w	ip, [r1]
 8003c82:	fa1f fe82 	uxth.w	lr, r2
 8003c86:	fa1f f38c 	uxth.w	r3, ip
 8003c8a:	eba3 030e 	sub.w	r3, r3, lr
 8003c8e:	4403      	add	r3, r0
 8003c90:	0c12      	lsrs	r2, r2, #16
 8003c92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003c96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ca0:	45c1      	cmp	r9, r8
 8003ca2:	f841 3b04 	str.w	r3, [r1], #4
 8003ca6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003caa:	d2e6      	bcs.n	8003c7a <quorem+0xa4>
 8003cac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cb4:	b922      	cbnz	r2, 8003cc0 <quorem+0xea>
 8003cb6:	3b04      	subs	r3, #4
 8003cb8:	429d      	cmp	r5, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	d30b      	bcc.n	8003cd6 <quorem+0x100>
 8003cbe:	613c      	str	r4, [r7, #16]
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	b003      	add	sp, #12
 8003cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	3b04      	subs	r3, #4
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	d1cb      	bne.n	8003c6a <quorem+0x94>
 8003cd2:	3c01      	subs	r4, #1
 8003cd4:	e7c6      	b.n	8003c64 <quorem+0x8e>
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	3b04      	subs	r3, #4
 8003cda:	2a00      	cmp	r2, #0
 8003cdc:	d1ef      	bne.n	8003cbe <quorem+0xe8>
 8003cde:	3c01      	subs	r4, #1
 8003ce0:	e7ea      	b.n	8003cb8 <quorem+0xe2>
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e7ee      	b.n	8003cc4 <quorem+0xee>
	...

08003ce8 <_dtoa_r>:
 8003ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cec:	69c7      	ldr	r7, [r0, #28]
 8003cee:	b099      	sub	sp, #100	@ 0x64
 8003cf0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003cf4:	ec55 4b10 	vmov	r4, r5, d0
 8003cf8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003cfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8003cfc:	4683      	mov	fp, r0
 8003cfe:	920e      	str	r2, [sp, #56]	@ 0x38
 8003d00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d02:	b97f      	cbnz	r7, 8003d24 <_dtoa_r+0x3c>
 8003d04:	2010      	movs	r0, #16
 8003d06:	f000 fdfd 	bl	8004904 <malloc>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8003d10:	b920      	cbnz	r0, 8003d1c <_dtoa_r+0x34>
 8003d12:	4ba7      	ldr	r3, [pc, #668]	@ (8003fb0 <_dtoa_r+0x2c8>)
 8003d14:	21ef      	movs	r1, #239	@ 0xef
 8003d16:	48a7      	ldr	r0, [pc, #668]	@ (8003fb4 <_dtoa_r+0x2cc>)
 8003d18:	f001 fcbc 	bl	8005694 <__assert_func>
 8003d1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d20:	6007      	str	r7, [r0, #0]
 8003d22:	60c7      	str	r7, [r0, #12]
 8003d24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d28:	6819      	ldr	r1, [r3, #0]
 8003d2a:	b159      	cbz	r1, 8003d44 <_dtoa_r+0x5c>
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	604a      	str	r2, [r1, #4]
 8003d30:	2301      	movs	r3, #1
 8003d32:	4093      	lsls	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
 8003d36:	4658      	mov	r0, fp
 8003d38:	f000 feda 	bl	8004af0 <_Bfree>
 8003d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	1e2b      	subs	r3, r5, #0
 8003d46:	bfb9      	ittee	lt
 8003d48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d4c:	9303      	strlt	r3, [sp, #12]
 8003d4e:	2300      	movge	r3, #0
 8003d50:	6033      	strge	r3, [r6, #0]
 8003d52:	9f03      	ldr	r7, [sp, #12]
 8003d54:	4b98      	ldr	r3, [pc, #608]	@ (8003fb8 <_dtoa_r+0x2d0>)
 8003d56:	bfbc      	itt	lt
 8003d58:	2201      	movlt	r2, #1
 8003d5a:	6032      	strlt	r2, [r6, #0]
 8003d5c:	43bb      	bics	r3, r7
 8003d5e:	d112      	bne.n	8003d86 <_dtoa_r+0x9e>
 8003d60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003d62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d6c:	4323      	orrs	r3, r4
 8003d6e:	f000 854d 	beq.w	800480c <_dtoa_r+0xb24>
 8003d72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003fcc <_dtoa_r+0x2e4>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 854f 	beq.w	800481c <_dtoa_r+0xb34>
 8003d7e:	f10a 0303 	add.w	r3, sl, #3
 8003d82:	f000 bd49 	b.w	8004818 <_dtoa_r+0xb30>
 8003d86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	ec51 0b17 	vmov	r0, r1, d7
 8003d90:	2300      	movs	r3, #0
 8003d92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003d96:	f7fc fe9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d9a:	4680      	mov	r8, r0
 8003d9c:	b158      	cbz	r0, 8003db6 <_dtoa_r+0xce>
 8003d9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003da0:	2301      	movs	r3, #1
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003da6:	b113      	cbz	r3, 8003dae <_dtoa_r+0xc6>
 8003da8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003daa:	4b84      	ldr	r3, [pc, #528]	@ (8003fbc <_dtoa_r+0x2d4>)
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003fd0 <_dtoa_r+0x2e8>
 8003db2:	f000 bd33 	b.w	800481c <_dtoa_r+0xb34>
 8003db6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003dba:	aa16      	add	r2, sp, #88	@ 0x58
 8003dbc:	a917      	add	r1, sp, #92	@ 0x5c
 8003dbe:	4658      	mov	r0, fp
 8003dc0:	f001 f980 	bl	80050c4 <__d2b>
 8003dc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003dc8:	4681      	mov	r9, r0
 8003dca:	2e00      	cmp	r6, #0
 8003dcc:	d077      	beq.n	8003ebe <_dtoa_r+0x1d6>
 8003dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ddc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003de0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003de4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003de8:	4619      	mov	r1, r3
 8003dea:	2200      	movs	r2, #0
 8003dec:	4b74      	ldr	r3, [pc, #464]	@ (8003fc0 <_dtoa_r+0x2d8>)
 8003dee:	f7fc fa53 	bl	8000298 <__aeabi_dsub>
 8003df2:	a369      	add	r3, pc, #420	@ (adr r3, 8003f98 <_dtoa_r+0x2b0>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fc06 	bl	8000608 <__aeabi_dmul>
 8003dfc:	a368      	add	r3, pc, #416	@ (adr r3, 8003fa0 <_dtoa_r+0x2b8>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc fa4b 	bl	800029c <__adddf3>
 8003e06:	4604      	mov	r4, r0
 8003e08:	4630      	mov	r0, r6
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	f7fc fb92 	bl	8000534 <__aeabi_i2d>
 8003e10:	a365      	add	r3, pc, #404	@ (adr r3, 8003fa8 <_dtoa_r+0x2c0>)
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f7fc fbf7 	bl	8000608 <__aeabi_dmul>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7fc fa3b 	bl	800029c <__adddf3>
 8003e26:	4604      	mov	r4, r0
 8003e28:	460d      	mov	r5, r1
 8003e2a:	f7fc fe9d 	bl	8000b68 <__aeabi_d2iz>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4607      	mov	r7, r0
 8003e32:	2300      	movs	r3, #0
 8003e34:	4620      	mov	r0, r4
 8003e36:	4629      	mov	r1, r5
 8003e38:	f7fc fe58 	bl	8000aec <__aeabi_dcmplt>
 8003e3c:	b140      	cbz	r0, 8003e50 <_dtoa_r+0x168>
 8003e3e:	4638      	mov	r0, r7
 8003e40:	f7fc fb78 	bl	8000534 <__aeabi_i2d>
 8003e44:	4622      	mov	r2, r4
 8003e46:	462b      	mov	r3, r5
 8003e48:	f7fc fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e4c:	b900      	cbnz	r0, 8003e50 <_dtoa_r+0x168>
 8003e4e:	3f01      	subs	r7, #1
 8003e50:	2f16      	cmp	r7, #22
 8003e52:	d851      	bhi.n	8003ef8 <_dtoa_r+0x210>
 8003e54:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc4 <_dtoa_r+0x2dc>)
 8003e56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e62:	f7fc fe43 	bl	8000aec <__aeabi_dcmplt>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	d048      	beq.n	8003efc <_dtoa_r+0x214>
 8003e6a:	3f01      	subs	r7, #1
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8003e70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003e72:	1b9b      	subs	r3, r3, r6
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	bf44      	itt	mi
 8003e78:	f1c3 0801 	rsbmi	r8, r3, #1
 8003e7c:	2300      	movmi	r3, #0
 8003e7e:	9208      	str	r2, [sp, #32]
 8003e80:	bf54      	ite	pl
 8003e82:	f04f 0800 	movpl.w	r8, #0
 8003e86:	9308      	strmi	r3, [sp, #32]
 8003e88:	2f00      	cmp	r7, #0
 8003e8a:	db39      	blt.n	8003f00 <_dtoa_r+0x218>
 8003e8c:	9b08      	ldr	r3, [sp, #32]
 8003e8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003e90:	443b      	add	r3, r7
 8003e92:	9308      	str	r3, [sp, #32]
 8003e94:	2300      	movs	r3, #0
 8003e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	d864      	bhi.n	8003f68 <_dtoa_r+0x280>
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	bfc4      	itt	gt
 8003ea2:	3b04      	subgt	r3, #4
 8003ea4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ea8:	f1a3 0302 	sub.w	r3, r3, #2
 8003eac:	bfcc      	ite	gt
 8003eae:	2400      	movgt	r4, #0
 8003eb0:	2401      	movle	r4, #1
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d863      	bhi.n	8003f7e <_dtoa_r+0x296>
 8003eb6:	e8df f003 	tbb	[pc, r3]
 8003eba:	372a      	.short	0x372a
 8003ebc:	5535      	.short	0x5535
 8003ebe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003ec2:	441e      	add	r6, r3
 8003ec4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	bfc1      	itttt	gt
 8003ecc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003ed0:	409f      	lslgt	r7, r3
 8003ed2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ed6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003eda:	bfd6      	itet	le
 8003edc:	f1c3 0320 	rsble	r3, r3, #32
 8003ee0:	ea47 0003 	orrgt.w	r0, r7, r3
 8003ee4:	fa04 f003 	lslle.w	r0, r4, r3
 8003ee8:	f7fc fb14 	bl	8000514 <__aeabi_ui2d>
 8003eec:	2201      	movs	r2, #1
 8003eee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003ef2:	3e01      	subs	r6, #1
 8003ef4:	9214      	str	r2, [sp, #80]	@ 0x50
 8003ef6:	e777      	b.n	8003de8 <_dtoa_r+0x100>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e7b8      	b.n	8003e6e <_dtoa_r+0x186>
 8003efc:	9012      	str	r0, [sp, #72]	@ 0x48
 8003efe:	e7b7      	b.n	8003e70 <_dtoa_r+0x188>
 8003f00:	427b      	negs	r3, r7
 8003f02:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f04:	2300      	movs	r3, #0
 8003f06:	eba8 0807 	sub.w	r8, r8, r7
 8003f0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f0c:	e7c4      	b.n	8003e98 <_dtoa_r+0x1b0>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	dc35      	bgt.n	8003f84 <_dtoa_r+0x29c>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	9307      	str	r3, [sp, #28]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f22:	e00b      	b.n	8003f3c <_dtoa_r+0x254>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e7f3      	b.n	8003f10 <_dtoa_r+0x228>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	3301      	adds	r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	9307      	str	r3, [sp, #28]
 8003f38:	bfb8      	it	lt
 8003f3a:	2301      	movlt	r3, #1
 8003f3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003f40:	2100      	movs	r1, #0
 8003f42:	2204      	movs	r2, #4
 8003f44:	f102 0514 	add.w	r5, r2, #20
 8003f48:	429d      	cmp	r5, r3
 8003f4a:	d91f      	bls.n	8003f8c <_dtoa_r+0x2a4>
 8003f4c:	6041      	str	r1, [r0, #4]
 8003f4e:	4658      	mov	r0, fp
 8003f50:	f000 fd8e 	bl	8004a70 <_Balloc>
 8003f54:	4682      	mov	sl, r0
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d13c      	bne.n	8003fd4 <_dtoa_r+0x2ec>
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <_dtoa_r+0x2e0>)
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f62:	e6d8      	b.n	8003d16 <_dtoa_r+0x2e>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e7e0      	b.n	8003f2a <_dtoa_r+0x242>
 8003f68:	2401      	movs	r4, #1
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	9307      	str	r3, [sp, #28]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2312      	movs	r3, #18
 8003f7c:	e7d0      	b.n	8003f20 <_dtoa_r+0x238>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f82:	e7f5      	b.n	8003f70 <_dtoa_r+0x288>
 8003f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	9307      	str	r3, [sp, #28]
 8003f8a:	e7d7      	b.n	8003f3c <_dtoa_r+0x254>
 8003f8c:	3101      	adds	r1, #1
 8003f8e:	0052      	lsls	r2, r2, #1
 8003f90:	e7d8      	b.n	8003f44 <_dtoa_r+0x25c>
 8003f92:	bf00      	nop
 8003f94:	f3af 8000 	nop.w
 8003f98:	636f4361 	.word	0x636f4361
 8003f9c:	3fd287a7 	.word	0x3fd287a7
 8003fa0:	8b60c8b3 	.word	0x8b60c8b3
 8003fa4:	3fc68a28 	.word	0x3fc68a28
 8003fa8:	509f79fb 	.word	0x509f79fb
 8003fac:	3fd34413 	.word	0x3fd34413
 8003fb0:	080058e9 	.word	0x080058e9
 8003fb4:	08005900 	.word	0x08005900
 8003fb8:	7ff00000 	.word	0x7ff00000
 8003fbc:	080058b9 	.word	0x080058b9
 8003fc0:	3ff80000 	.word	0x3ff80000
 8003fc4:	080059f8 	.word	0x080059f8
 8003fc8:	08005958 	.word	0x08005958
 8003fcc:	080058e5 	.word	0x080058e5
 8003fd0:	080058b8 	.word	0x080058b8
 8003fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fd8:	6018      	str	r0, [r3, #0]
 8003fda:	9b07      	ldr	r3, [sp, #28]
 8003fdc:	2b0e      	cmp	r3, #14
 8003fde:	f200 80a4 	bhi.w	800412a <_dtoa_r+0x442>
 8003fe2:	2c00      	cmp	r4, #0
 8003fe4:	f000 80a1 	beq.w	800412a <_dtoa_r+0x442>
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	dd33      	ble.n	8004054 <_dtoa_r+0x36c>
 8003fec:	4bad      	ldr	r3, [pc, #692]	@ (80042a4 <_dtoa_r+0x5bc>)
 8003fee:	f007 020f 	and.w	r2, r7, #15
 8003ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ff6:	ed93 7b00 	vldr	d7, [r3]
 8003ffa:	05f8      	lsls	r0, r7, #23
 8003ffc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004000:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004004:	d516      	bpl.n	8004034 <_dtoa_r+0x34c>
 8004006:	4ba8      	ldr	r3, [pc, #672]	@ (80042a8 <_dtoa_r+0x5c0>)
 8004008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800400c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004010:	f7fc fc24 	bl	800085c <__aeabi_ddiv>
 8004014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004018:	f004 040f 	and.w	r4, r4, #15
 800401c:	2603      	movs	r6, #3
 800401e:	4da2      	ldr	r5, [pc, #648]	@ (80042a8 <_dtoa_r+0x5c0>)
 8004020:	b954      	cbnz	r4, 8004038 <_dtoa_r+0x350>
 8004022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800402a:	f7fc fc17 	bl	800085c <__aeabi_ddiv>
 800402e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004032:	e028      	b.n	8004086 <_dtoa_r+0x39e>
 8004034:	2602      	movs	r6, #2
 8004036:	e7f2      	b.n	800401e <_dtoa_r+0x336>
 8004038:	07e1      	lsls	r1, r4, #31
 800403a:	d508      	bpl.n	800404e <_dtoa_r+0x366>
 800403c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004040:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004044:	f7fc fae0 	bl	8000608 <__aeabi_dmul>
 8004048:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800404c:	3601      	adds	r6, #1
 800404e:	1064      	asrs	r4, r4, #1
 8004050:	3508      	adds	r5, #8
 8004052:	e7e5      	b.n	8004020 <_dtoa_r+0x338>
 8004054:	f000 80d2 	beq.w	80041fc <_dtoa_r+0x514>
 8004058:	427c      	negs	r4, r7
 800405a:	4b92      	ldr	r3, [pc, #584]	@ (80042a4 <_dtoa_r+0x5bc>)
 800405c:	4d92      	ldr	r5, [pc, #584]	@ (80042a8 <_dtoa_r+0x5c0>)
 800405e:	f004 020f 	and.w	r2, r4, #15
 8004062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800406e:	f7fc facb 	bl	8000608 <__aeabi_dmul>
 8004072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004076:	1124      	asrs	r4, r4, #4
 8004078:	2300      	movs	r3, #0
 800407a:	2602      	movs	r6, #2
 800407c:	2c00      	cmp	r4, #0
 800407e:	f040 80b2 	bne.w	80041e6 <_dtoa_r+0x4fe>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1d3      	bne.n	800402e <_dtoa_r+0x346>
 8004086:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004088:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80b7 	beq.w	8004200 <_dtoa_r+0x518>
 8004092:	4b86      	ldr	r3, [pc, #536]	@ (80042ac <_dtoa_r+0x5c4>)
 8004094:	2200      	movs	r2, #0
 8004096:	4620      	mov	r0, r4
 8004098:	4629      	mov	r1, r5
 800409a:	f7fc fd27 	bl	8000aec <__aeabi_dcmplt>
 800409e:	2800      	cmp	r0, #0
 80040a0:	f000 80ae 	beq.w	8004200 <_dtoa_r+0x518>
 80040a4:	9b07      	ldr	r3, [sp, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80aa 	beq.w	8004200 <_dtoa_r+0x518>
 80040ac:	9b00      	ldr	r3, [sp, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	dd37      	ble.n	8004122 <_dtoa_r+0x43a>
 80040b2:	1e7b      	subs	r3, r7, #1
 80040b4:	9304      	str	r3, [sp, #16]
 80040b6:	4620      	mov	r0, r4
 80040b8:	4b7d      	ldr	r3, [pc, #500]	@ (80042b0 <_dtoa_r+0x5c8>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	4629      	mov	r1, r5
 80040be:	f7fc faa3 	bl	8000608 <__aeabi_dmul>
 80040c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040c6:	9c00      	ldr	r4, [sp, #0]
 80040c8:	3601      	adds	r6, #1
 80040ca:	4630      	mov	r0, r6
 80040cc:	f7fc fa32 	bl	8000534 <__aeabi_i2d>
 80040d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040d4:	f7fc fa98 	bl	8000608 <__aeabi_dmul>
 80040d8:	4b76      	ldr	r3, [pc, #472]	@ (80042b4 <_dtoa_r+0x5cc>)
 80040da:	2200      	movs	r2, #0
 80040dc:	f7fc f8de 	bl	800029c <__adddf3>
 80040e0:	4605      	mov	r5, r0
 80040e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80040e6:	2c00      	cmp	r4, #0
 80040e8:	f040 808d 	bne.w	8004206 <_dtoa_r+0x51e>
 80040ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f0:	4b71      	ldr	r3, [pc, #452]	@ (80042b8 <_dtoa_r+0x5d0>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	f7fc f8d0 	bl	8000298 <__aeabi_dsub>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004100:	462a      	mov	r2, r5
 8004102:	4633      	mov	r3, r6
 8004104:	f7fc fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8004108:	2800      	cmp	r0, #0
 800410a:	f040 828b 	bne.w	8004624 <_dtoa_r+0x93c>
 800410e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004112:	462a      	mov	r2, r5
 8004114:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004118:	f7fc fce8 	bl	8000aec <__aeabi_dcmplt>
 800411c:	2800      	cmp	r0, #0
 800411e:	f040 8128 	bne.w	8004372 <_dtoa_r+0x68a>
 8004122:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004126:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800412a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800412c:	2b00      	cmp	r3, #0
 800412e:	f2c0 815a 	blt.w	80043e6 <_dtoa_r+0x6fe>
 8004132:	2f0e      	cmp	r7, #14
 8004134:	f300 8157 	bgt.w	80043e6 <_dtoa_r+0x6fe>
 8004138:	4b5a      	ldr	r3, [pc, #360]	@ (80042a4 <_dtoa_r+0x5bc>)
 800413a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800413e:	ed93 7b00 	vldr	d7, [r3]
 8004142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	ed8d 7b00 	vstr	d7, [sp]
 800414a:	da03      	bge.n	8004154 <_dtoa_r+0x46c>
 800414c:	9b07      	ldr	r3, [sp, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f340 8101 	ble.w	8004356 <_dtoa_r+0x66e>
 8004154:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004158:	4656      	mov	r6, sl
 800415a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800415e:	4620      	mov	r0, r4
 8004160:	4629      	mov	r1, r5
 8004162:	f7fc fb7b 	bl	800085c <__aeabi_ddiv>
 8004166:	f7fc fcff 	bl	8000b68 <__aeabi_d2iz>
 800416a:	4680      	mov	r8, r0
 800416c:	f7fc f9e2 	bl	8000534 <__aeabi_i2d>
 8004170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004174:	f7fc fa48 	bl	8000608 <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4620      	mov	r0, r4
 800417e:	4629      	mov	r1, r5
 8004180:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004184:	f7fc f888 	bl	8000298 <__aeabi_dsub>
 8004188:	f806 4b01 	strb.w	r4, [r6], #1
 800418c:	9d07      	ldr	r5, [sp, #28]
 800418e:	eba6 040a 	sub.w	r4, r6, sl
 8004192:	42a5      	cmp	r5, r4
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	f040 8117 	bne.w	80043ca <_dtoa_r+0x6e2>
 800419c:	f7fc f87e 	bl	800029c <__adddf3>
 80041a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041a4:	4604      	mov	r4, r0
 80041a6:	460d      	mov	r5, r1
 80041a8:	f7fc fcbe 	bl	8000b28 <__aeabi_dcmpgt>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f040 80f9 	bne.w	80043a4 <_dtoa_r+0x6bc>
 80041b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041b6:	4620      	mov	r0, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	f7fc fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80041be:	b118      	cbz	r0, 80041c8 <_dtoa_r+0x4e0>
 80041c0:	f018 0f01 	tst.w	r8, #1
 80041c4:	f040 80ee 	bne.w	80043a4 <_dtoa_r+0x6bc>
 80041c8:	4649      	mov	r1, r9
 80041ca:	4658      	mov	r0, fp
 80041cc:	f000 fc90 	bl	8004af0 <_Bfree>
 80041d0:	2300      	movs	r3, #0
 80041d2:	7033      	strb	r3, [r6, #0]
 80041d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80041d6:	3701      	adds	r7, #1
 80041d8:	601f      	str	r7, [r3, #0]
 80041da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 831d 	beq.w	800481c <_dtoa_r+0xb34>
 80041e2:	601e      	str	r6, [r3, #0]
 80041e4:	e31a      	b.n	800481c <_dtoa_r+0xb34>
 80041e6:	07e2      	lsls	r2, r4, #31
 80041e8:	d505      	bpl.n	80041f6 <_dtoa_r+0x50e>
 80041ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041ee:	f7fc fa0b 	bl	8000608 <__aeabi_dmul>
 80041f2:	3601      	adds	r6, #1
 80041f4:	2301      	movs	r3, #1
 80041f6:	1064      	asrs	r4, r4, #1
 80041f8:	3508      	adds	r5, #8
 80041fa:	e73f      	b.n	800407c <_dtoa_r+0x394>
 80041fc:	2602      	movs	r6, #2
 80041fe:	e742      	b.n	8004086 <_dtoa_r+0x39e>
 8004200:	9c07      	ldr	r4, [sp, #28]
 8004202:	9704      	str	r7, [sp, #16]
 8004204:	e761      	b.n	80040ca <_dtoa_r+0x3e2>
 8004206:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <_dtoa_r+0x5bc>)
 8004208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800420a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800420e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004212:	4454      	add	r4, sl
 8004214:	2900      	cmp	r1, #0
 8004216:	d053      	beq.n	80042c0 <_dtoa_r+0x5d8>
 8004218:	4928      	ldr	r1, [pc, #160]	@ (80042bc <_dtoa_r+0x5d4>)
 800421a:	2000      	movs	r0, #0
 800421c:	f7fc fb1e 	bl	800085c <__aeabi_ddiv>
 8004220:	4633      	mov	r3, r6
 8004222:	462a      	mov	r2, r5
 8004224:	f7fc f838 	bl	8000298 <__aeabi_dsub>
 8004228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800422c:	4656      	mov	r6, sl
 800422e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004232:	f7fc fc99 	bl	8000b68 <__aeabi_d2iz>
 8004236:	4605      	mov	r5, r0
 8004238:	f7fc f97c 	bl	8000534 <__aeabi_i2d>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004244:	f7fc f828 	bl	8000298 <__aeabi_dsub>
 8004248:	3530      	adds	r5, #48	@ 0x30
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004252:	f806 5b01 	strb.w	r5, [r6], #1
 8004256:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800425a:	f7fc fc47 	bl	8000aec <__aeabi_dcmplt>
 800425e:	2800      	cmp	r0, #0
 8004260:	d171      	bne.n	8004346 <_dtoa_r+0x65e>
 8004262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004266:	4911      	ldr	r1, [pc, #68]	@ (80042ac <_dtoa_r+0x5c4>)
 8004268:	2000      	movs	r0, #0
 800426a:	f7fc f815 	bl	8000298 <__aeabi_dsub>
 800426e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004272:	f7fc fc3b 	bl	8000aec <__aeabi_dcmplt>
 8004276:	2800      	cmp	r0, #0
 8004278:	f040 8095 	bne.w	80043a6 <_dtoa_r+0x6be>
 800427c:	42a6      	cmp	r6, r4
 800427e:	f43f af50 	beq.w	8004122 <_dtoa_r+0x43a>
 8004282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004286:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <_dtoa_r+0x5c8>)
 8004288:	2200      	movs	r2, #0
 800428a:	f7fc f9bd 	bl	8000608 <__aeabi_dmul>
 800428e:	4b08      	ldr	r3, [pc, #32]	@ (80042b0 <_dtoa_r+0x5c8>)
 8004290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004294:	2200      	movs	r2, #0
 8004296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800429a:	f7fc f9b5 	bl	8000608 <__aeabi_dmul>
 800429e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042a2:	e7c4      	b.n	800422e <_dtoa_r+0x546>
 80042a4:	080059f8 	.word	0x080059f8
 80042a8:	080059d0 	.word	0x080059d0
 80042ac:	3ff00000 	.word	0x3ff00000
 80042b0:	40240000 	.word	0x40240000
 80042b4:	401c0000 	.word	0x401c0000
 80042b8:	40140000 	.word	0x40140000
 80042bc:	3fe00000 	.word	0x3fe00000
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	f7fc f9a0 	bl	8000608 <__aeabi_dmul>
 80042c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80042ce:	4656      	mov	r6, sl
 80042d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042d4:	f7fc fc48 	bl	8000b68 <__aeabi_d2iz>
 80042d8:	4605      	mov	r5, r0
 80042da:	f7fc f92b 	bl	8000534 <__aeabi_i2d>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042e6:	f7fb ffd7 	bl	8000298 <__aeabi_dsub>
 80042ea:	3530      	adds	r5, #48	@ 0x30
 80042ec:	f806 5b01 	strb.w	r5, [r6], #1
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	42a6      	cmp	r6, r4
 80042f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	d124      	bne.n	800434a <_dtoa_r+0x662>
 8004300:	4bac      	ldr	r3, [pc, #688]	@ (80045b4 <_dtoa_r+0x8cc>)
 8004302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004306:	f7fb ffc9 	bl	800029c <__adddf3>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004312:	f7fc fc09 	bl	8000b28 <__aeabi_dcmpgt>
 8004316:	2800      	cmp	r0, #0
 8004318:	d145      	bne.n	80043a6 <_dtoa_r+0x6be>
 800431a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800431e:	49a5      	ldr	r1, [pc, #660]	@ (80045b4 <_dtoa_r+0x8cc>)
 8004320:	2000      	movs	r0, #0
 8004322:	f7fb ffb9 	bl	8000298 <__aeabi_dsub>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800432e:	f7fc fbdd 	bl	8000aec <__aeabi_dcmplt>
 8004332:	2800      	cmp	r0, #0
 8004334:	f43f aef5 	beq.w	8004122 <_dtoa_r+0x43a>
 8004338:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800433a:	1e73      	subs	r3, r6, #1
 800433c:	9315      	str	r3, [sp, #84]	@ 0x54
 800433e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004342:	2b30      	cmp	r3, #48	@ 0x30
 8004344:	d0f8      	beq.n	8004338 <_dtoa_r+0x650>
 8004346:	9f04      	ldr	r7, [sp, #16]
 8004348:	e73e      	b.n	80041c8 <_dtoa_r+0x4e0>
 800434a:	4b9b      	ldr	r3, [pc, #620]	@ (80045b8 <_dtoa_r+0x8d0>)
 800434c:	f7fc f95c 	bl	8000608 <__aeabi_dmul>
 8004350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004354:	e7bc      	b.n	80042d0 <_dtoa_r+0x5e8>
 8004356:	d10c      	bne.n	8004372 <_dtoa_r+0x68a>
 8004358:	4b98      	ldr	r3, [pc, #608]	@ (80045bc <_dtoa_r+0x8d4>)
 800435a:	2200      	movs	r2, #0
 800435c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004360:	f7fc f952 	bl	8000608 <__aeabi_dmul>
 8004364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004368:	f7fc fbd4 	bl	8000b14 <__aeabi_dcmpge>
 800436c:	2800      	cmp	r0, #0
 800436e:	f000 8157 	beq.w	8004620 <_dtoa_r+0x938>
 8004372:	2400      	movs	r4, #0
 8004374:	4625      	mov	r5, r4
 8004376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004378:	43db      	mvns	r3, r3
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	4656      	mov	r6, sl
 800437e:	2700      	movs	r7, #0
 8004380:	4621      	mov	r1, r4
 8004382:	4658      	mov	r0, fp
 8004384:	f000 fbb4 	bl	8004af0 <_Bfree>
 8004388:	2d00      	cmp	r5, #0
 800438a:	d0dc      	beq.n	8004346 <_dtoa_r+0x65e>
 800438c:	b12f      	cbz	r7, 800439a <_dtoa_r+0x6b2>
 800438e:	42af      	cmp	r7, r5
 8004390:	d003      	beq.n	800439a <_dtoa_r+0x6b2>
 8004392:	4639      	mov	r1, r7
 8004394:	4658      	mov	r0, fp
 8004396:	f000 fbab 	bl	8004af0 <_Bfree>
 800439a:	4629      	mov	r1, r5
 800439c:	4658      	mov	r0, fp
 800439e:	f000 fba7 	bl	8004af0 <_Bfree>
 80043a2:	e7d0      	b.n	8004346 <_dtoa_r+0x65e>
 80043a4:	9704      	str	r7, [sp, #16]
 80043a6:	4633      	mov	r3, r6
 80043a8:	461e      	mov	r6, r3
 80043aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043ae:	2a39      	cmp	r2, #57	@ 0x39
 80043b0:	d107      	bne.n	80043c2 <_dtoa_r+0x6da>
 80043b2:	459a      	cmp	sl, r3
 80043b4:	d1f8      	bne.n	80043a8 <_dtoa_r+0x6c0>
 80043b6:	9a04      	ldr	r2, [sp, #16]
 80043b8:	3201      	adds	r2, #1
 80043ba:	9204      	str	r2, [sp, #16]
 80043bc:	2230      	movs	r2, #48	@ 0x30
 80043be:	f88a 2000 	strb.w	r2, [sl]
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	3201      	adds	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e7bd      	b.n	8004346 <_dtoa_r+0x65e>
 80043ca:	4b7b      	ldr	r3, [pc, #492]	@ (80045b8 <_dtoa_r+0x8d0>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	f7fc f91b 	bl	8000608 <__aeabi_dmul>
 80043d2:	2200      	movs	r2, #0
 80043d4:	2300      	movs	r3, #0
 80043d6:	4604      	mov	r4, r0
 80043d8:	460d      	mov	r5, r1
 80043da:	f7fc fb7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80043de:	2800      	cmp	r0, #0
 80043e0:	f43f aebb 	beq.w	800415a <_dtoa_r+0x472>
 80043e4:	e6f0      	b.n	80041c8 <_dtoa_r+0x4e0>
 80043e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	f000 80db 	beq.w	80045a4 <_dtoa_r+0x8bc>
 80043ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043f0:	2a01      	cmp	r2, #1
 80043f2:	f300 80bf 	bgt.w	8004574 <_dtoa_r+0x88c>
 80043f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80043f8:	2a00      	cmp	r2, #0
 80043fa:	f000 80b7 	beq.w	800456c <_dtoa_r+0x884>
 80043fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004402:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004404:	4646      	mov	r6, r8
 8004406:	9a08      	ldr	r2, [sp, #32]
 8004408:	2101      	movs	r1, #1
 800440a:	441a      	add	r2, r3
 800440c:	4658      	mov	r0, fp
 800440e:	4498      	add	r8, r3
 8004410:	9208      	str	r2, [sp, #32]
 8004412:	f000 fc21 	bl	8004c58 <__i2b>
 8004416:	4605      	mov	r5, r0
 8004418:	b15e      	cbz	r6, 8004432 <_dtoa_r+0x74a>
 800441a:	9b08      	ldr	r3, [sp, #32]
 800441c:	2b00      	cmp	r3, #0
 800441e:	dd08      	ble.n	8004432 <_dtoa_r+0x74a>
 8004420:	42b3      	cmp	r3, r6
 8004422:	9a08      	ldr	r2, [sp, #32]
 8004424:	bfa8      	it	ge
 8004426:	4633      	movge	r3, r6
 8004428:	eba8 0803 	sub.w	r8, r8, r3
 800442c:	1af6      	subs	r6, r6, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	9308      	str	r3, [sp, #32]
 8004432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004434:	b1f3      	cbz	r3, 8004474 <_dtoa_r+0x78c>
 8004436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80b7 	beq.w	80045ac <_dtoa_r+0x8c4>
 800443e:	b18c      	cbz	r4, 8004464 <_dtoa_r+0x77c>
 8004440:	4629      	mov	r1, r5
 8004442:	4622      	mov	r2, r4
 8004444:	4658      	mov	r0, fp
 8004446:	f000 fcc7 	bl	8004dd8 <__pow5mult>
 800444a:	464a      	mov	r2, r9
 800444c:	4601      	mov	r1, r0
 800444e:	4605      	mov	r5, r0
 8004450:	4658      	mov	r0, fp
 8004452:	f000 fc17 	bl	8004c84 <__multiply>
 8004456:	4649      	mov	r1, r9
 8004458:	9004      	str	r0, [sp, #16]
 800445a:	4658      	mov	r0, fp
 800445c:	f000 fb48 	bl	8004af0 <_Bfree>
 8004460:	9b04      	ldr	r3, [sp, #16]
 8004462:	4699      	mov	r9, r3
 8004464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004466:	1b1a      	subs	r2, r3, r4
 8004468:	d004      	beq.n	8004474 <_dtoa_r+0x78c>
 800446a:	4649      	mov	r1, r9
 800446c:	4658      	mov	r0, fp
 800446e:	f000 fcb3 	bl	8004dd8 <__pow5mult>
 8004472:	4681      	mov	r9, r0
 8004474:	2101      	movs	r1, #1
 8004476:	4658      	mov	r0, fp
 8004478:	f000 fbee 	bl	8004c58 <__i2b>
 800447c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800447e:	4604      	mov	r4, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 81cf 	beq.w	8004824 <_dtoa_r+0xb3c>
 8004486:	461a      	mov	r2, r3
 8004488:	4601      	mov	r1, r0
 800448a:	4658      	mov	r0, fp
 800448c:	f000 fca4 	bl	8004dd8 <__pow5mult>
 8004490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004492:	2b01      	cmp	r3, #1
 8004494:	4604      	mov	r4, r0
 8004496:	f300 8095 	bgt.w	80045c4 <_dtoa_r+0x8dc>
 800449a:	9b02      	ldr	r3, [sp, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 8087 	bne.w	80045b0 <_dtoa_r+0x8c8>
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f040 8089 	bne.w	80045c0 <_dtoa_r+0x8d8>
 80044ae:	9b03      	ldr	r3, [sp, #12]
 80044b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044b4:	0d1b      	lsrs	r3, r3, #20
 80044b6:	051b      	lsls	r3, r3, #20
 80044b8:	b12b      	cbz	r3, 80044c6 <_dtoa_r+0x7de>
 80044ba:	9b08      	ldr	r3, [sp, #32]
 80044bc:	3301      	adds	r3, #1
 80044be:	9308      	str	r3, [sp, #32]
 80044c0:	f108 0801 	add.w	r8, r8, #1
 80044c4:	2301      	movs	r3, #1
 80044c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80044c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 81b0 	beq.w	8004830 <_dtoa_r+0xb48>
 80044d0:	6923      	ldr	r3, [r4, #16]
 80044d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044d6:	6918      	ldr	r0, [r3, #16]
 80044d8:	f000 fb72 	bl	8004bc0 <__hi0bits>
 80044dc:	f1c0 0020 	rsb	r0, r0, #32
 80044e0:	9b08      	ldr	r3, [sp, #32]
 80044e2:	4418      	add	r0, r3
 80044e4:	f010 001f 	ands.w	r0, r0, #31
 80044e8:	d077      	beq.n	80045da <_dtoa_r+0x8f2>
 80044ea:	f1c0 0320 	rsb	r3, r0, #32
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	dd6b      	ble.n	80045ca <_dtoa_r+0x8e2>
 80044f2:	9b08      	ldr	r3, [sp, #32]
 80044f4:	f1c0 001c 	rsb	r0, r0, #28
 80044f8:	4403      	add	r3, r0
 80044fa:	4480      	add	r8, r0
 80044fc:	4406      	add	r6, r0
 80044fe:	9308      	str	r3, [sp, #32]
 8004500:	f1b8 0f00 	cmp.w	r8, #0
 8004504:	dd05      	ble.n	8004512 <_dtoa_r+0x82a>
 8004506:	4649      	mov	r1, r9
 8004508:	4642      	mov	r2, r8
 800450a:	4658      	mov	r0, fp
 800450c:	f000 fcbe 	bl	8004e8c <__lshift>
 8004510:	4681      	mov	r9, r0
 8004512:	9b08      	ldr	r3, [sp, #32]
 8004514:	2b00      	cmp	r3, #0
 8004516:	dd05      	ble.n	8004524 <_dtoa_r+0x83c>
 8004518:	4621      	mov	r1, r4
 800451a:	461a      	mov	r2, r3
 800451c:	4658      	mov	r0, fp
 800451e:	f000 fcb5 	bl	8004e8c <__lshift>
 8004522:	4604      	mov	r4, r0
 8004524:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004526:	2b00      	cmp	r3, #0
 8004528:	d059      	beq.n	80045de <_dtoa_r+0x8f6>
 800452a:	4621      	mov	r1, r4
 800452c:	4648      	mov	r0, r9
 800452e:	f000 fd19 	bl	8004f64 <__mcmp>
 8004532:	2800      	cmp	r0, #0
 8004534:	da53      	bge.n	80045de <_dtoa_r+0x8f6>
 8004536:	1e7b      	subs	r3, r7, #1
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	4649      	mov	r1, r9
 800453c:	2300      	movs	r3, #0
 800453e:	220a      	movs	r2, #10
 8004540:	4658      	mov	r0, fp
 8004542:	f000 faf7 	bl	8004b34 <__multadd>
 8004546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004548:	4681      	mov	r9, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8172 	beq.w	8004834 <_dtoa_r+0xb4c>
 8004550:	2300      	movs	r3, #0
 8004552:	4629      	mov	r1, r5
 8004554:	220a      	movs	r2, #10
 8004556:	4658      	mov	r0, fp
 8004558:	f000 faec 	bl	8004b34 <__multadd>
 800455c:	9b00      	ldr	r3, [sp, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	4605      	mov	r5, r0
 8004562:	dc67      	bgt.n	8004634 <_dtoa_r+0x94c>
 8004564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004566:	2b02      	cmp	r3, #2
 8004568:	dc41      	bgt.n	80045ee <_dtoa_r+0x906>
 800456a:	e063      	b.n	8004634 <_dtoa_r+0x94c>
 800456c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800456e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004572:	e746      	b.n	8004402 <_dtoa_r+0x71a>
 8004574:	9b07      	ldr	r3, [sp, #28]
 8004576:	1e5c      	subs	r4, r3, #1
 8004578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800457a:	42a3      	cmp	r3, r4
 800457c:	bfbf      	itttt	lt
 800457e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004580:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004582:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004584:	1ae3      	sublt	r3, r4, r3
 8004586:	bfb4      	ite	lt
 8004588:	18d2      	addlt	r2, r2, r3
 800458a:	1b1c      	subge	r4, r3, r4
 800458c:	9b07      	ldr	r3, [sp, #28]
 800458e:	bfbc      	itt	lt
 8004590:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004592:	2400      	movlt	r4, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	bfb5      	itete	lt
 8004598:	eba8 0603 	sublt.w	r6, r8, r3
 800459c:	9b07      	ldrge	r3, [sp, #28]
 800459e:	2300      	movlt	r3, #0
 80045a0:	4646      	movge	r6, r8
 80045a2:	e730      	b.n	8004406 <_dtoa_r+0x71e>
 80045a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80045a8:	4646      	mov	r6, r8
 80045aa:	e735      	b.n	8004418 <_dtoa_r+0x730>
 80045ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045ae:	e75c      	b.n	800446a <_dtoa_r+0x782>
 80045b0:	2300      	movs	r3, #0
 80045b2:	e788      	b.n	80044c6 <_dtoa_r+0x7de>
 80045b4:	3fe00000 	.word	0x3fe00000
 80045b8:	40240000 	.word	0x40240000
 80045bc:	40140000 	.word	0x40140000
 80045c0:	9b02      	ldr	r3, [sp, #8]
 80045c2:	e780      	b.n	80044c6 <_dtoa_r+0x7de>
 80045c4:	2300      	movs	r3, #0
 80045c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80045c8:	e782      	b.n	80044d0 <_dtoa_r+0x7e8>
 80045ca:	d099      	beq.n	8004500 <_dtoa_r+0x818>
 80045cc:	9a08      	ldr	r2, [sp, #32]
 80045ce:	331c      	adds	r3, #28
 80045d0:	441a      	add	r2, r3
 80045d2:	4498      	add	r8, r3
 80045d4:	441e      	add	r6, r3
 80045d6:	9208      	str	r2, [sp, #32]
 80045d8:	e792      	b.n	8004500 <_dtoa_r+0x818>
 80045da:	4603      	mov	r3, r0
 80045dc:	e7f6      	b.n	80045cc <_dtoa_r+0x8e4>
 80045de:	9b07      	ldr	r3, [sp, #28]
 80045e0:	9704      	str	r7, [sp, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	dc20      	bgt.n	8004628 <_dtoa_r+0x940>
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	dd1e      	ble.n	800462c <_dtoa_r+0x944>
 80045ee:	9b00      	ldr	r3, [sp, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f47f aec0 	bne.w	8004376 <_dtoa_r+0x68e>
 80045f6:	4621      	mov	r1, r4
 80045f8:	2205      	movs	r2, #5
 80045fa:	4658      	mov	r0, fp
 80045fc:	f000 fa9a 	bl	8004b34 <__multadd>
 8004600:	4601      	mov	r1, r0
 8004602:	4604      	mov	r4, r0
 8004604:	4648      	mov	r0, r9
 8004606:	f000 fcad 	bl	8004f64 <__mcmp>
 800460a:	2800      	cmp	r0, #0
 800460c:	f77f aeb3 	ble.w	8004376 <_dtoa_r+0x68e>
 8004610:	4656      	mov	r6, sl
 8004612:	2331      	movs	r3, #49	@ 0x31
 8004614:	f806 3b01 	strb.w	r3, [r6], #1
 8004618:	9b04      	ldr	r3, [sp, #16]
 800461a:	3301      	adds	r3, #1
 800461c:	9304      	str	r3, [sp, #16]
 800461e:	e6ae      	b.n	800437e <_dtoa_r+0x696>
 8004620:	9c07      	ldr	r4, [sp, #28]
 8004622:	9704      	str	r7, [sp, #16]
 8004624:	4625      	mov	r5, r4
 8004626:	e7f3      	b.n	8004610 <_dtoa_r+0x928>
 8004628:	9b07      	ldr	r3, [sp, #28]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8104 	beq.w	800483c <_dtoa_r+0xb54>
 8004634:	2e00      	cmp	r6, #0
 8004636:	dd05      	ble.n	8004644 <_dtoa_r+0x95c>
 8004638:	4629      	mov	r1, r5
 800463a:	4632      	mov	r2, r6
 800463c:	4658      	mov	r0, fp
 800463e:	f000 fc25 	bl	8004e8c <__lshift>
 8004642:	4605      	mov	r5, r0
 8004644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d05a      	beq.n	8004700 <_dtoa_r+0xa18>
 800464a:	6869      	ldr	r1, [r5, #4]
 800464c:	4658      	mov	r0, fp
 800464e:	f000 fa0f 	bl	8004a70 <_Balloc>
 8004652:	4606      	mov	r6, r0
 8004654:	b928      	cbnz	r0, 8004662 <_dtoa_r+0x97a>
 8004656:	4b84      	ldr	r3, [pc, #528]	@ (8004868 <_dtoa_r+0xb80>)
 8004658:	4602      	mov	r2, r0
 800465a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800465e:	f7ff bb5a 	b.w	8003d16 <_dtoa_r+0x2e>
 8004662:	692a      	ldr	r2, [r5, #16]
 8004664:	3202      	adds	r2, #2
 8004666:	0092      	lsls	r2, r2, #2
 8004668:	f105 010c 	add.w	r1, r5, #12
 800466c:	300c      	adds	r0, #12
 800466e:	f001 f803 	bl	8005678 <memcpy>
 8004672:	2201      	movs	r2, #1
 8004674:	4631      	mov	r1, r6
 8004676:	4658      	mov	r0, fp
 8004678:	f000 fc08 	bl	8004e8c <__lshift>
 800467c:	f10a 0301 	add.w	r3, sl, #1
 8004680:	9307      	str	r3, [sp, #28]
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	4453      	add	r3, sl
 8004686:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004688:	9b02      	ldr	r3, [sp, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	462f      	mov	r7, r5
 8004690:	930a      	str	r3, [sp, #40]	@ 0x28
 8004692:	4605      	mov	r5, r0
 8004694:	9b07      	ldr	r3, [sp, #28]
 8004696:	4621      	mov	r1, r4
 8004698:	3b01      	subs	r3, #1
 800469a:	4648      	mov	r0, r9
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	f7ff fa9a 	bl	8003bd6 <quorem>
 80046a2:	4639      	mov	r1, r7
 80046a4:	9002      	str	r0, [sp, #8]
 80046a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80046aa:	4648      	mov	r0, r9
 80046ac:	f000 fc5a 	bl	8004f64 <__mcmp>
 80046b0:	462a      	mov	r2, r5
 80046b2:	9008      	str	r0, [sp, #32]
 80046b4:	4621      	mov	r1, r4
 80046b6:	4658      	mov	r0, fp
 80046b8:	f000 fc70 	bl	8004f9c <__mdiff>
 80046bc:	68c2      	ldr	r2, [r0, #12]
 80046be:	4606      	mov	r6, r0
 80046c0:	bb02      	cbnz	r2, 8004704 <_dtoa_r+0xa1c>
 80046c2:	4601      	mov	r1, r0
 80046c4:	4648      	mov	r0, r9
 80046c6:	f000 fc4d 	bl	8004f64 <__mcmp>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4631      	mov	r1, r6
 80046ce:	4658      	mov	r0, fp
 80046d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80046d2:	f000 fa0d 	bl	8004af0 <_Bfree>
 80046d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046da:	9e07      	ldr	r6, [sp, #28]
 80046dc:	ea43 0102 	orr.w	r1, r3, r2
 80046e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046e2:	4319      	orrs	r1, r3
 80046e4:	d110      	bne.n	8004708 <_dtoa_r+0xa20>
 80046e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80046ea:	d029      	beq.n	8004740 <_dtoa_r+0xa58>
 80046ec:	9b08      	ldr	r3, [sp, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dd02      	ble.n	80046f8 <_dtoa_r+0xa10>
 80046f2:	9b02      	ldr	r3, [sp, #8]
 80046f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80046f8:	9b00      	ldr	r3, [sp, #0]
 80046fa:	f883 8000 	strb.w	r8, [r3]
 80046fe:	e63f      	b.n	8004380 <_dtoa_r+0x698>
 8004700:	4628      	mov	r0, r5
 8004702:	e7bb      	b.n	800467c <_dtoa_r+0x994>
 8004704:	2201      	movs	r2, #1
 8004706:	e7e1      	b.n	80046cc <_dtoa_r+0x9e4>
 8004708:	9b08      	ldr	r3, [sp, #32]
 800470a:	2b00      	cmp	r3, #0
 800470c:	db04      	blt.n	8004718 <_dtoa_r+0xa30>
 800470e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004710:	430b      	orrs	r3, r1
 8004712:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004714:	430b      	orrs	r3, r1
 8004716:	d120      	bne.n	800475a <_dtoa_r+0xa72>
 8004718:	2a00      	cmp	r2, #0
 800471a:	dded      	ble.n	80046f8 <_dtoa_r+0xa10>
 800471c:	4649      	mov	r1, r9
 800471e:	2201      	movs	r2, #1
 8004720:	4658      	mov	r0, fp
 8004722:	f000 fbb3 	bl	8004e8c <__lshift>
 8004726:	4621      	mov	r1, r4
 8004728:	4681      	mov	r9, r0
 800472a:	f000 fc1b 	bl	8004f64 <__mcmp>
 800472e:	2800      	cmp	r0, #0
 8004730:	dc03      	bgt.n	800473a <_dtoa_r+0xa52>
 8004732:	d1e1      	bne.n	80046f8 <_dtoa_r+0xa10>
 8004734:	f018 0f01 	tst.w	r8, #1
 8004738:	d0de      	beq.n	80046f8 <_dtoa_r+0xa10>
 800473a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800473e:	d1d8      	bne.n	80046f2 <_dtoa_r+0xa0a>
 8004740:	9a00      	ldr	r2, [sp, #0]
 8004742:	2339      	movs	r3, #57	@ 0x39
 8004744:	7013      	strb	r3, [r2, #0]
 8004746:	4633      	mov	r3, r6
 8004748:	461e      	mov	r6, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004750:	2a39      	cmp	r2, #57	@ 0x39
 8004752:	d052      	beq.n	80047fa <_dtoa_r+0xb12>
 8004754:	3201      	adds	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e612      	b.n	8004380 <_dtoa_r+0x698>
 800475a:	2a00      	cmp	r2, #0
 800475c:	dd07      	ble.n	800476e <_dtoa_r+0xa86>
 800475e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004762:	d0ed      	beq.n	8004740 <_dtoa_r+0xa58>
 8004764:	9a00      	ldr	r2, [sp, #0]
 8004766:	f108 0301 	add.w	r3, r8, #1
 800476a:	7013      	strb	r3, [r2, #0]
 800476c:	e608      	b.n	8004380 <_dtoa_r+0x698>
 800476e:	9b07      	ldr	r3, [sp, #28]
 8004770:	9a07      	ldr	r2, [sp, #28]
 8004772:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004778:	4293      	cmp	r3, r2
 800477a:	d028      	beq.n	80047ce <_dtoa_r+0xae6>
 800477c:	4649      	mov	r1, r9
 800477e:	2300      	movs	r3, #0
 8004780:	220a      	movs	r2, #10
 8004782:	4658      	mov	r0, fp
 8004784:	f000 f9d6 	bl	8004b34 <__multadd>
 8004788:	42af      	cmp	r7, r5
 800478a:	4681      	mov	r9, r0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	f04f 020a 	mov.w	r2, #10
 8004794:	4639      	mov	r1, r7
 8004796:	4658      	mov	r0, fp
 8004798:	d107      	bne.n	80047aa <_dtoa_r+0xac2>
 800479a:	f000 f9cb 	bl	8004b34 <__multadd>
 800479e:	4607      	mov	r7, r0
 80047a0:	4605      	mov	r5, r0
 80047a2:	9b07      	ldr	r3, [sp, #28]
 80047a4:	3301      	adds	r3, #1
 80047a6:	9307      	str	r3, [sp, #28]
 80047a8:	e774      	b.n	8004694 <_dtoa_r+0x9ac>
 80047aa:	f000 f9c3 	bl	8004b34 <__multadd>
 80047ae:	4629      	mov	r1, r5
 80047b0:	4607      	mov	r7, r0
 80047b2:	2300      	movs	r3, #0
 80047b4:	220a      	movs	r2, #10
 80047b6:	4658      	mov	r0, fp
 80047b8:	f000 f9bc 	bl	8004b34 <__multadd>
 80047bc:	4605      	mov	r5, r0
 80047be:	e7f0      	b.n	80047a2 <_dtoa_r+0xaba>
 80047c0:	9b00      	ldr	r3, [sp, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfcc      	ite	gt
 80047c6:	461e      	movgt	r6, r3
 80047c8:	2601      	movle	r6, #1
 80047ca:	4456      	add	r6, sl
 80047cc:	2700      	movs	r7, #0
 80047ce:	4649      	mov	r1, r9
 80047d0:	2201      	movs	r2, #1
 80047d2:	4658      	mov	r0, fp
 80047d4:	f000 fb5a 	bl	8004e8c <__lshift>
 80047d8:	4621      	mov	r1, r4
 80047da:	4681      	mov	r9, r0
 80047dc:	f000 fbc2 	bl	8004f64 <__mcmp>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	dcb0      	bgt.n	8004746 <_dtoa_r+0xa5e>
 80047e4:	d102      	bne.n	80047ec <_dtoa_r+0xb04>
 80047e6:	f018 0f01 	tst.w	r8, #1
 80047ea:	d1ac      	bne.n	8004746 <_dtoa_r+0xa5e>
 80047ec:	4633      	mov	r3, r6
 80047ee:	461e      	mov	r6, r3
 80047f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047f4:	2a30      	cmp	r2, #48	@ 0x30
 80047f6:	d0fa      	beq.n	80047ee <_dtoa_r+0xb06>
 80047f8:	e5c2      	b.n	8004380 <_dtoa_r+0x698>
 80047fa:	459a      	cmp	sl, r3
 80047fc:	d1a4      	bne.n	8004748 <_dtoa_r+0xa60>
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	3301      	adds	r3, #1
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	2331      	movs	r3, #49	@ 0x31
 8004806:	f88a 3000 	strb.w	r3, [sl]
 800480a:	e5b9      	b.n	8004380 <_dtoa_r+0x698>
 800480c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800480e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800486c <_dtoa_r+0xb84>
 8004812:	b11b      	cbz	r3, 800481c <_dtoa_r+0xb34>
 8004814:	f10a 0308 	add.w	r3, sl, #8
 8004818:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4650      	mov	r0, sl
 800481e:	b019      	add	sp, #100	@ 0x64
 8004820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004826:	2b01      	cmp	r3, #1
 8004828:	f77f ae37 	ble.w	800449a <_dtoa_r+0x7b2>
 800482c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800482e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004830:	2001      	movs	r0, #1
 8004832:	e655      	b.n	80044e0 <_dtoa_r+0x7f8>
 8004834:	9b00      	ldr	r3, [sp, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f77f aed6 	ble.w	80045e8 <_dtoa_r+0x900>
 800483c:	4656      	mov	r6, sl
 800483e:	4621      	mov	r1, r4
 8004840:	4648      	mov	r0, r9
 8004842:	f7ff f9c8 	bl	8003bd6 <quorem>
 8004846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800484a:	f806 8b01 	strb.w	r8, [r6], #1
 800484e:	9b00      	ldr	r3, [sp, #0]
 8004850:	eba6 020a 	sub.w	r2, r6, sl
 8004854:	4293      	cmp	r3, r2
 8004856:	ddb3      	ble.n	80047c0 <_dtoa_r+0xad8>
 8004858:	4649      	mov	r1, r9
 800485a:	2300      	movs	r3, #0
 800485c:	220a      	movs	r2, #10
 800485e:	4658      	mov	r0, fp
 8004860:	f000 f968 	bl	8004b34 <__multadd>
 8004864:	4681      	mov	r9, r0
 8004866:	e7ea      	b.n	800483e <_dtoa_r+0xb56>
 8004868:	08005958 	.word	0x08005958
 800486c:	080058dc 	.word	0x080058dc

08004870 <_free_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4605      	mov	r5, r0
 8004874:	2900      	cmp	r1, #0
 8004876:	d041      	beq.n	80048fc <_free_r+0x8c>
 8004878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800487c:	1f0c      	subs	r4, r1, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfb8      	it	lt
 8004882:	18e4      	addlt	r4, r4, r3
 8004884:	f000 f8e8 	bl	8004a58 <__malloc_lock>
 8004888:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <_free_r+0x90>)
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	b933      	cbnz	r3, 800489c <_free_r+0x2c>
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	6014      	str	r4, [r2, #0]
 8004892:	4628      	mov	r0, r5
 8004894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004898:	f000 b8e4 	b.w	8004a64 <__malloc_unlock>
 800489c:	42a3      	cmp	r3, r4
 800489e:	d908      	bls.n	80048b2 <_free_r+0x42>
 80048a0:	6820      	ldr	r0, [r4, #0]
 80048a2:	1821      	adds	r1, r4, r0
 80048a4:	428b      	cmp	r3, r1
 80048a6:	bf01      	itttt	eq
 80048a8:	6819      	ldreq	r1, [r3, #0]
 80048aa:	685b      	ldreq	r3, [r3, #4]
 80048ac:	1809      	addeq	r1, r1, r0
 80048ae:	6021      	streq	r1, [r4, #0]
 80048b0:	e7ed      	b.n	800488e <_free_r+0x1e>
 80048b2:	461a      	mov	r2, r3
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	b10b      	cbz	r3, 80048bc <_free_r+0x4c>
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	d9fa      	bls.n	80048b2 <_free_r+0x42>
 80048bc:	6811      	ldr	r1, [r2, #0]
 80048be:	1850      	adds	r0, r2, r1
 80048c0:	42a0      	cmp	r0, r4
 80048c2:	d10b      	bne.n	80048dc <_free_r+0x6c>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	4401      	add	r1, r0
 80048c8:	1850      	adds	r0, r2, r1
 80048ca:	4283      	cmp	r3, r0
 80048cc:	6011      	str	r1, [r2, #0]
 80048ce:	d1e0      	bne.n	8004892 <_free_r+0x22>
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	6053      	str	r3, [r2, #4]
 80048d6:	4408      	add	r0, r1
 80048d8:	6010      	str	r0, [r2, #0]
 80048da:	e7da      	b.n	8004892 <_free_r+0x22>
 80048dc:	d902      	bls.n	80048e4 <_free_r+0x74>
 80048de:	230c      	movs	r3, #12
 80048e0:	602b      	str	r3, [r5, #0]
 80048e2:	e7d6      	b.n	8004892 <_free_r+0x22>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	1821      	adds	r1, r4, r0
 80048e8:	428b      	cmp	r3, r1
 80048ea:	bf04      	itt	eq
 80048ec:	6819      	ldreq	r1, [r3, #0]
 80048ee:	685b      	ldreq	r3, [r3, #4]
 80048f0:	6063      	str	r3, [r4, #4]
 80048f2:	bf04      	itt	eq
 80048f4:	1809      	addeq	r1, r1, r0
 80048f6:	6021      	streq	r1, [r4, #0]
 80048f8:	6054      	str	r4, [r2, #4]
 80048fa:	e7ca      	b.n	8004892 <_free_r+0x22>
 80048fc:	bd38      	pop	{r3, r4, r5, pc}
 80048fe:	bf00      	nop
 8004900:	20000478 	.word	0x20000478

08004904 <malloc>:
 8004904:	4b02      	ldr	r3, [pc, #8]	@ (8004910 <malloc+0xc>)
 8004906:	4601      	mov	r1, r0
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	f000 b825 	b.w	8004958 <_malloc_r>
 800490e:	bf00      	nop
 8004910:	20000070 	.word	0x20000070

08004914 <sbrk_aligned>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4e0f      	ldr	r6, [pc, #60]	@ (8004954 <sbrk_aligned+0x40>)
 8004918:	460c      	mov	r4, r1
 800491a:	6831      	ldr	r1, [r6, #0]
 800491c:	4605      	mov	r5, r0
 800491e:	b911      	cbnz	r1, 8004926 <sbrk_aligned+0x12>
 8004920:	f000 fe9a 	bl	8005658 <_sbrk_r>
 8004924:	6030      	str	r0, [r6, #0]
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f000 fe95 	bl	8005658 <_sbrk_r>
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	d103      	bne.n	800493a <sbrk_aligned+0x26>
 8004932:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004936:	4620      	mov	r0, r4
 8004938:	bd70      	pop	{r4, r5, r6, pc}
 800493a:	1cc4      	adds	r4, r0, #3
 800493c:	f024 0403 	bic.w	r4, r4, #3
 8004940:	42a0      	cmp	r0, r4
 8004942:	d0f8      	beq.n	8004936 <sbrk_aligned+0x22>
 8004944:	1a21      	subs	r1, r4, r0
 8004946:	4628      	mov	r0, r5
 8004948:	f000 fe86 	bl	8005658 <_sbrk_r>
 800494c:	3001      	adds	r0, #1
 800494e:	d1f2      	bne.n	8004936 <sbrk_aligned+0x22>
 8004950:	e7ef      	b.n	8004932 <sbrk_aligned+0x1e>
 8004952:	bf00      	nop
 8004954:	20000474 	.word	0x20000474

08004958 <_malloc_r>:
 8004958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800495c:	1ccd      	adds	r5, r1, #3
 800495e:	f025 0503 	bic.w	r5, r5, #3
 8004962:	3508      	adds	r5, #8
 8004964:	2d0c      	cmp	r5, #12
 8004966:	bf38      	it	cc
 8004968:	250c      	movcc	r5, #12
 800496a:	2d00      	cmp	r5, #0
 800496c:	4606      	mov	r6, r0
 800496e:	db01      	blt.n	8004974 <_malloc_r+0x1c>
 8004970:	42a9      	cmp	r1, r5
 8004972:	d904      	bls.n	800497e <_malloc_r+0x26>
 8004974:	230c      	movs	r3, #12
 8004976:	6033      	str	r3, [r6, #0]
 8004978:	2000      	movs	r0, #0
 800497a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a54 <_malloc_r+0xfc>
 8004982:	f000 f869 	bl	8004a58 <__malloc_lock>
 8004986:	f8d8 3000 	ldr.w	r3, [r8]
 800498a:	461c      	mov	r4, r3
 800498c:	bb44      	cbnz	r4, 80049e0 <_malloc_r+0x88>
 800498e:	4629      	mov	r1, r5
 8004990:	4630      	mov	r0, r6
 8004992:	f7ff ffbf 	bl	8004914 <sbrk_aligned>
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	4604      	mov	r4, r0
 800499a:	d158      	bne.n	8004a4e <_malloc_r+0xf6>
 800499c:	f8d8 4000 	ldr.w	r4, [r8]
 80049a0:	4627      	mov	r7, r4
 80049a2:	2f00      	cmp	r7, #0
 80049a4:	d143      	bne.n	8004a2e <_malloc_r+0xd6>
 80049a6:	2c00      	cmp	r4, #0
 80049a8:	d04b      	beq.n	8004a42 <_malloc_r+0xea>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	4639      	mov	r1, r7
 80049ae:	4630      	mov	r0, r6
 80049b0:	eb04 0903 	add.w	r9, r4, r3
 80049b4:	f000 fe50 	bl	8005658 <_sbrk_r>
 80049b8:	4581      	cmp	r9, r0
 80049ba:	d142      	bne.n	8004a42 <_malloc_r+0xea>
 80049bc:	6821      	ldr	r1, [r4, #0]
 80049be:	1a6d      	subs	r5, r5, r1
 80049c0:	4629      	mov	r1, r5
 80049c2:	4630      	mov	r0, r6
 80049c4:	f7ff ffa6 	bl	8004914 <sbrk_aligned>
 80049c8:	3001      	adds	r0, #1
 80049ca:	d03a      	beq.n	8004a42 <_malloc_r+0xea>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	442b      	add	r3, r5
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	f8d8 3000 	ldr.w	r3, [r8]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	bb62      	cbnz	r2, 8004a34 <_malloc_r+0xdc>
 80049da:	f8c8 7000 	str.w	r7, [r8]
 80049de:	e00f      	b.n	8004a00 <_malloc_r+0xa8>
 80049e0:	6822      	ldr	r2, [r4, #0]
 80049e2:	1b52      	subs	r2, r2, r5
 80049e4:	d420      	bmi.n	8004a28 <_malloc_r+0xd0>
 80049e6:	2a0b      	cmp	r2, #11
 80049e8:	d917      	bls.n	8004a1a <_malloc_r+0xc2>
 80049ea:	1961      	adds	r1, r4, r5
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	6025      	str	r5, [r4, #0]
 80049f0:	bf18      	it	ne
 80049f2:	6059      	strne	r1, [r3, #4]
 80049f4:	6863      	ldr	r3, [r4, #4]
 80049f6:	bf08      	it	eq
 80049f8:	f8c8 1000 	streq.w	r1, [r8]
 80049fc:	5162      	str	r2, [r4, r5]
 80049fe:	604b      	str	r3, [r1, #4]
 8004a00:	4630      	mov	r0, r6
 8004a02:	f000 f82f 	bl	8004a64 <__malloc_unlock>
 8004a06:	f104 000b 	add.w	r0, r4, #11
 8004a0a:	1d23      	adds	r3, r4, #4
 8004a0c:	f020 0007 	bic.w	r0, r0, #7
 8004a10:	1ac2      	subs	r2, r0, r3
 8004a12:	bf1c      	itt	ne
 8004a14:	1a1b      	subne	r3, r3, r0
 8004a16:	50a3      	strne	r3, [r4, r2]
 8004a18:	e7af      	b.n	800497a <_malloc_r+0x22>
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	bf0c      	ite	eq
 8004a20:	f8c8 2000 	streq.w	r2, [r8]
 8004a24:	605a      	strne	r2, [r3, #4]
 8004a26:	e7eb      	b.n	8004a00 <_malloc_r+0xa8>
 8004a28:	4623      	mov	r3, r4
 8004a2a:	6864      	ldr	r4, [r4, #4]
 8004a2c:	e7ae      	b.n	800498c <_malloc_r+0x34>
 8004a2e:	463c      	mov	r4, r7
 8004a30:	687f      	ldr	r7, [r7, #4]
 8004a32:	e7b6      	b.n	80049a2 <_malloc_r+0x4a>
 8004a34:	461a      	mov	r2, r3
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d1fb      	bne.n	8004a34 <_malloc_r+0xdc>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6053      	str	r3, [r2, #4]
 8004a40:	e7de      	b.n	8004a00 <_malloc_r+0xa8>
 8004a42:	230c      	movs	r3, #12
 8004a44:	6033      	str	r3, [r6, #0]
 8004a46:	4630      	mov	r0, r6
 8004a48:	f000 f80c 	bl	8004a64 <__malloc_unlock>
 8004a4c:	e794      	b.n	8004978 <_malloc_r+0x20>
 8004a4e:	6005      	str	r5, [r0, #0]
 8004a50:	e7d6      	b.n	8004a00 <_malloc_r+0xa8>
 8004a52:	bf00      	nop
 8004a54:	20000478 	.word	0x20000478

08004a58 <__malloc_lock>:
 8004a58:	4801      	ldr	r0, [pc, #4]	@ (8004a60 <__malloc_lock+0x8>)
 8004a5a:	f7ff b8ba 	b.w	8003bd2 <__retarget_lock_acquire_recursive>
 8004a5e:	bf00      	nop
 8004a60:	20000470 	.word	0x20000470

08004a64 <__malloc_unlock>:
 8004a64:	4801      	ldr	r0, [pc, #4]	@ (8004a6c <__malloc_unlock+0x8>)
 8004a66:	f7ff b8b5 	b.w	8003bd4 <__retarget_lock_release_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	20000470 	.word	0x20000470

08004a70 <_Balloc>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	69c6      	ldr	r6, [r0, #28]
 8004a74:	4604      	mov	r4, r0
 8004a76:	460d      	mov	r5, r1
 8004a78:	b976      	cbnz	r6, 8004a98 <_Balloc+0x28>
 8004a7a:	2010      	movs	r0, #16
 8004a7c:	f7ff ff42 	bl	8004904 <malloc>
 8004a80:	4602      	mov	r2, r0
 8004a82:	61e0      	str	r0, [r4, #28]
 8004a84:	b920      	cbnz	r0, 8004a90 <_Balloc+0x20>
 8004a86:	4b18      	ldr	r3, [pc, #96]	@ (8004ae8 <_Balloc+0x78>)
 8004a88:	4818      	ldr	r0, [pc, #96]	@ (8004aec <_Balloc+0x7c>)
 8004a8a:	216b      	movs	r1, #107	@ 0x6b
 8004a8c:	f000 fe02 	bl	8005694 <__assert_func>
 8004a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a94:	6006      	str	r6, [r0, #0]
 8004a96:	60c6      	str	r6, [r0, #12]
 8004a98:	69e6      	ldr	r6, [r4, #28]
 8004a9a:	68f3      	ldr	r3, [r6, #12]
 8004a9c:	b183      	cbz	r3, 8004ac0 <_Balloc+0x50>
 8004a9e:	69e3      	ldr	r3, [r4, #28]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004aa6:	b9b8      	cbnz	r0, 8004ad8 <_Balloc+0x68>
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f605 	lsl.w	r6, r1, r5
 8004aae:	1d72      	adds	r2, r6, #5
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f000 fe0c 	bl	80056d0 <_calloc_r>
 8004ab8:	b160      	cbz	r0, 8004ad4 <_Balloc+0x64>
 8004aba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004abe:	e00e      	b.n	8004ade <_Balloc+0x6e>
 8004ac0:	2221      	movs	r2, #33	@ 0x21
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f000 fe03 	bl	80056d0 <_calloc_r>
 8004aca:	69e3      	ldr	r3, [r4, #28]
 8004acc:	60f0      	str	r0, [r6, #12]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e4      	bne.n	8004a9e <_Balloc+0x2e>
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	6802      	ldr	r2, [r0, #0]
 8004ada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ae4:	e7f7      	b.n	8004ad6 <_Balloc+0x66>
 8004ae6:	bf00      	nop
 8004ae8:	080058e9 	.word	0x080058e9
 8004aec:	08005969 	.word	0x08005969

08004af0 <_Bfree>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	69c6      	ldr	r6, [r0, #28]
 8004af4:	4605      	mov	r5, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	b976      	cbnz	r6, 8004b18 <_Bfree+0x28>
 8004afa:	2010      	movs	r0, #16
 8004afc:	f7ff ff02 	bl	8004904 <malloc>
 8004b00:	4602      	mov	r2, r0
 8004b02:	61e8      	str	r0, [r5, #28]
 8004b04:	b920      	cbnz	r0, 8004b10 <_Bfree+0x20>
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <_Bfree+0x3c>)
 8004b08:	4809      	ldr	r0, [pc, #36]	@ (8004b30 <_Bfree+0x40>)
 8004b0a:	218f      	movs	r1, #143	@ 0x8f
 8004b0c:	f000 fdc2 	bl	8005694 <__assert_func>
 8004b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b14:	6006      	str	r6, [r0, #0]
 8004b16:	60c6      	str	r6, [r0, #12]
 8004b18:	b13c      	cbz	r4, 8004b2a <_Bfree+0x3a>
 8004b1a:	69eb      	ldr	r3, [r5, #28]
 8004b1c:	6862      	ldr	r2, [r4, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b24:	6021      	str	r1, [r4, #0]
 8004b26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	080058e9 	.word	0x080058e9
 8004b30:	08005969 	.word	0x08005969

08004b34 <__multadd>:
 8004b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b38:	690d      	ldr	r5, [r1, #16]
 8004b3a:	4607      	mov	r7, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	461e      	mov	r6, r3
 8004b40:	f101 0c14 	add.w	ip, r1, #20
 8004b44:	2000      	movs	r0, #0
 8004b46:	f8dc 3000 	ldr.w	r3, [ip]
 8004b4a:	b299      	uxth	r1, r3
 8004b4c:	fb02 6101 	mla	r1, r2, r1, r6
 8004b50:	0c1e      	lsrs	r6, r3, #16
 8004b52:	0c0b      	lsrs	r3, r1, #16
 8004b54:	fb02 3306 	mla	r3, r2, r6, r3
 8004b58:	b289      	uxth	r1, r1
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b60:	4285      	cmp	r5, r0
 8004b62:	f84c 1b04 	str.w	r1, [ip], #4
 8004b66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b6a:	dcec      	bgt.n	8004b46 <__multadd+0x12>
 8004b6c:	b30e      	cbz	r6, 8004bb2 <__multadd+0x7e>
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dc19      	bgt.n	8004ba8 <__multadd+0x74>
 8004b74:	6861      	ldr	r1, [r4, #4]
 8004b76:	4638      	mov	r0, r7
 8004b78:	3101      	adds	r1, #1
 8004b7a:	f7ff ff79 	bl	8004a70 <_Balloc>
 8004b7e:	4680      	mov	r8, r0
 8004b80:	b928      	cbnz	r0, 8004b8e <__multadd+0x5a>
 8004b82:	4602      	mov	r2, r0
 8004b84:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb8 <__multadd+0x84>)
 8004b86:	480d      	ldr	r0, [pc, #52]	@ (8004bbc <__multadd+0x88>)
 8004b88:	21ba      	movs	r1, #186	@ 0xba
 8004b8a:	f000 fd83 	bl	8005694 <__assert_func>
 8004b8e:	6922      	ldr	r2, [r4, #16]
 8004b90:	3202      	adds	r2, #2
 8004b92:	f104 010c 	add.w	r1, r4, #12
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	300c      	adds	r0, #12
 8004b9a:	f000 fd6d 	bl	8005678 <memcpy>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	f7ff ffa5 	bl	8004af0 <_Bfree>
 8004ba6:	4644      	mov	r4, r8
 8004ba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bac:	3501      	adds	r5, #1
 8004bae:	615e      	str	r6, [r3, #20]
 8004bb0:	6125      	str	r5, [r4, #16]
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb8:	08005958 	.word	0x08005958
 8004bbc:	08005969 	.word	0x08005969

08004bc0 <__hi0bits>:
 8004bc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	bf36      	itet	cc
 8004bc8:	0403      	lslcc	r3, r0, #16
 8004bca:	2000      	movcs	r0, #0
 8004bcc:	2010      	movcc	r0, #16
 8004bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd2:	bf3c      	itt	cc
 8004bd4:	021b      	lslcc	r3, r3, #8
 8004bd6:	3008      	addcc	r0, #8
 8004bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bdc:	bf3c      	itt	cc
 8004bde:	011b      	lslcc	r3, r3, #4
 8004be0:	3004      	addcc	r0, #4
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be6:	bf3c      	itt	cc
 8004be8:	009b      	lslcc	r3, r3, #2
 8004bea:	3002      	addcc	r0, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db05      	blt.n	8004bfc <__hi0bits+0x3c>
 8004bf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004bf4:	f100 0001 	add.w	r0, r0, #1
 8004bf8:	bf08      	it	eq
 8004bfa:	2020      	moveq	r0, #32
 8004bfc:	4770      	bx	lr

08004bfe <__lo0bits>:
 8004bfe:	6803      	ldr	r3, [r0, #0]
 8004c00:	4602      	mov	r2, r0
 8004c02:	f013 0007 	ands.w	r0, r3, #7
 8004c06:	d00b      	beq.n	8004c20 <__lo0bits+0x22>
 8004c08:	07d9      	lsls	r1, r3, #31
 8004c0a:	d421      	bmi.n	8004c50 <__lo0bits+0x52>
 8004c0c:	0798      	lsls	r0, r3, #30
 8004c0e:	bf49      	itett	mi
 8004c10:	085b      	lsrmi	r3, r3, #1
 8004c12:	089b      	lsrpl	r3, r3, #2
 8004c14:	2001      	movmi	r0, #1
 8004c16:	6013      	strmi	r3, [r2, #0]
 8004c18:	bf5c      	itt	pl
 8004c1a:	6013      	strpl	r3, [r2, #0]
 8004c1c:	2002      	movpl	r0, #2
 8004c1e:	4770      	bx	lr
 8004c20:	b299      	uxth	r1, r3
 8004c22:	b909      	cbnz	r1, 8004c28 <__lo0bits+0x2a>
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	2010      	movs	r0, #16
 8004c28:	b2d9      	uxtb	r1, r3
 8004c2a:	b909      	cbnz	r1, 8004c30 <__lo0bits+0x32>
 8004c2c:	3008      	adds	r0, #8
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	0719      	lsls	r1, r3, #28
 8004c32:	bf04      	itt	eq
 8004c34:	091b      	lsreq	r3, r3, #4
 8004c36:	3004      	addeq	r0, #4
 8004c38:	0799      	lsls	r1, r3, #30
 8004c3a:	bf04      	itt	eq
 8004c3c:	089b      	lsreq	r3, r3, #2
 8004c3e:	3002      	addeq	r0, #2
 8004c40:	07d9      	lsls	r1, r3, #31
 8004c42:	d403      	bmi.n	8004c4c <__lo0bits+0x4e>
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	f100 0001 	add.w	r0, r0, #1
 8004c4a:	d003      	beq.n	8004c54 <__lo0bits+0x56>
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4770      	bx	lr
 8004c50:	2000      	movs	r0, #0
 8004c52:	4770      	bx	lr
 8004c54:	2020      	movs	r0, #32
 8004c56:	4770      	bx	lr

08004c58 <__i2b>:
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	f7ff ff07 	bl	8004a70 <_Balloc>
 8004c62:	4602      	mov	r2, r0
 8004c64:	b928      	cbnz	r0, 8004c72 <__i2b+0x1a>
 8004c66:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <__i2b+0x24>)
 8004c68:	4805      	ldr	r0, [pc, #20]	@ (8004c80 <__i2b+0x28>)
 8004c6a:	f240 1145 	movw	r1, #325	@ 0x145
 8004c6e:	f000 fd11 	bl	8005694 <__assert_func>
 8004c72:	2301      	movs	r3, #1
 8004c74:	6144      	str	r4, [r0, #20]
 8004c76:	6103      	str	r3, [r0, #16]
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	bf00      	nop
 8004c7c:	08005958 	.word	0x08005958
 8004c80:	08005969 	.word	0x08005969

08004c84 <__multiply>:
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	4614      	mov	r4, r2
 8004c8a:	690a      	ldr	r2, [r1, #16]
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	bfa8      	it	ge
 8004c92:	4623      	movge	r3, r4
 8004c94:	460f      	mov	r7, r1
 8004c96:	bfa4      	itt	ge
 8004c98:	460c      	movge	r4, r1
 8004c9a:	461f      	movge	r7, r3
 8004c9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004ca0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	6861      	ldr	r1, [r4, #4]
 8004ca8:	eb0a 0609 	add.w	r6, sl, r9
 8004cac:	42b3      	cmp	r3, r6
 8004cae:	b085      	sub	sp, #20
 8004cb0:	bfb8      	it	lt
 8004cb2:	3101      	addlt	r1, #1
 8004cb4:	f7ff fedc 	bl	8004a70 <_Balloc>
 8004cb8:	b930      	cbnz	r0, 8004cc8 <__multiply+0x44>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b44      	ldr	r3, [pc, #272]	@ (8004dd0 <__multiply+0x14c>)
 8004cbe:	4845      	ldr	r0, [pc, #276]	@ (8004dd4 <__multiply+0x150>)
 8004cc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004cc4:	f000 fce6 	bl	8005694 <__assert_func>
 8004cc8:	f100 0514 	add.w	r5, r0, #20
 8004ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4543      	cmp	r3, r8
 8004cd6:	d321      	bcc.n	8004d1c <__multiply+0x98>
 8004cd8:	f107 0114 	add.w	r1, r7, #20
 8004cdc:	f104 0214 	add.w	r2, r4, #20
 8004ce0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004ce4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	1b13      	subs	r3, r2, r4
 8004cec:	3b15      	subs	r3, #21
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	f104 0715 	add.w	r7, r4, #21
 8004cf8:	42ba      	cmp	r2, r7
 8004cfa:	bf38      	it	cc
 8004cfc:	2304      	movcc	r3, #4
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	9b02      	ldr	r3, [sp, #8]
 8004d02:	9103      	str	r1, [sp, #12]
 8004d04:	428b      	cmp	r3, r1
 8004d06:	d80c      	bhi.n	8004d22 <__multiply+0x9e>
 8004d08:	2e00      	cmp	r6, #0
 8004d0a:	dd03      	ble.n	8004d14 <__multiply+0x90>
 8004d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d05b      	beq.n	8004dcc <__multiply+0x148>
 8004d14:	6106      	str	r6, [r0, #16]
 8004d16:	b005      	add	sp, #20
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1c:	f843 2b04 	str.w	r2, [r3], #4
 8004d20:	e7d8      	b.n	8004cd4 <__multiply+0x50>
 8004d22:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d26:	f1ba 0f00 	cmp.w	sl, #0
 8004d2a:	d024      	beq.n	8004d76 <__multiply+0xf2>
 8004d2c:	f104 0e14 	add.w	lr, r4, #20
 8004d30:	46a9      	mov	r9, r5
 8004d32:	f04f 0c00 	mov.w	ip, #0
 8004d36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8004d3e:	fa1f fb87 	uxth.w	fp, r7
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004d4c:	f8d9 7000 	ldr.w	r7, [r9]
 8004d50:	4463      	add	r3, ip
 8004d52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d56:	fb0a c70b 	mla	r7, sl, fp, ip
 8004d5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d64:	4572      	cmp	r2, lr
 8004d66:	f849 3b04 	str.w	r3, [r9], #4
 8004d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d6e:	d8e2      	bhi.n	8004d36 <__multiply+0xb2>
 8004d70:	9b01      	ldr	r3, [sp, #4]
 8004d72:	f845 c003 	str.w	ip, [r5, r3]
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d7c:	3104      	adds	r1, #4
 8004d7e:	f1b9 0f00 	cmp.w	r9, #0
 8004d82:	d021      	beq.n	8004dc8 <__multiply+0x144>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	f104 0c14 	add.w	ip, r4, #20
 8004d8a:	46ae      	mov	lr, r5
 8004d8c:	f04f 0a00 	mov.w	sl, #0
 8004d90:	f8bc b000 	ldrh.w	fp, [ip]
 8004d94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004d98:	fb09 770b 	mla	r7, r9, fp, r7
 8004d9c:	4457      	add	r7, sl
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004da4:	f84e 3b04 	str.w	r3, [lr], #4
 8004da8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004db0:	f8be 3000 	ldrh.w	r3, [lr]
 8004db4:	fb09 330a 	mla	r3, r9, sl, r3
 8004db8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004dbc:	4562      	cmp	r2, ip
 8004dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dc2:	d8e5      	bhi.n	8004d90 <__multiply+0x10c>
 8004dc4:	9f01      	ldr	r7, [sp, #4]
 8004dc6:	51eb      	str	r3, [r5, r7]
 8004dc8:	3504      	adds	r5, #4
 8004dca:	e799      	b.n	8004d00 <__multiply+0x7c>
 8004dcc:	3e01      	subs	r6, #1
 8004dce:	e79b      	b.n	8004d08 <__multiply+0x84>
 8004dd0:	08005958 	.word	0x08005958
 8004dd4:	08005969 	.word	0x08005969

08004dd8 <__pow5mult>:
 8004dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	4615      	mov	r5, r2
 8004dde:	f012 0203 	ands.w	r2, r2, #3
 8004de2:	4607      	mov	r7, r0
 8004de4:	460e      	mov	r6, r1
 8004de6:	d007      	beq.n	8004df8 <__pow5mult+0x20>
 8004de8:	4c25      	ldr	r4, [pc, #148]	@ (8004e80 <__pow5mult+0xa8>)
 8004dea:	3a01      	subs	r2, #1
 8004dec:	2300      	movs	r3, #0
 8004dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004df2:	f7ff fe9f 	bl	8004b34 <__multadd>
 8004df6:	4606      	mov	r6, r0
 8004df8:	10ad      	asrs	r5, r5, #2
 8004dfa:	d03d      	beq.n	8004e78 <__pow5mult+0xa0>
 8004dfc:	69fc      	ldr	r4, [r7, #28]
 8004dfe:	b97c      	cbnz	r4, 8004e20 <__pow5mult+0x48>
 8004e00:	2010      	movs	r0, #16
 8004e02:	f7ff fd7f 	bl	8004904 <malloc>
 8004e06:	4602      	mov	r2, r0
 8004e08:	61f8      	str	r0, [r7, #28]
 8004e0a:	b928      	cbnz	r0, 8004e18 <__pow5mult+0x40>
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <__pow5mult+0xac>)
 8004e0e:	481e      	ldr	r0, [pc, #120]	@ (8004e88 <__pow5mult+0xb0>)
 8004e10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e14:	f000 fc3e 	bl	8005694 <__assert_func>
 8004e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e1c:	6004      	str	r4, [r0, #0]
 8004e1e:	60c4      	str	r4, [r0, #12]
 8004e20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e28:	b94c      	cbnz	r4, 8004e3e <__pow5mult+0x66>
 8004e2a:	f240 2171 	movw	r1, #625	@ 0x271
 8004e2e:	4638      	mov	r0, r7
 8004e30:	f7ff ff12 	bl	8004c58 <__i2b>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	6003      	str	r3, [r0, #0]
 8004e3e:	f04f 0900 	mov.w	r9, #0
 8004e42:	07eb      	lsls	r3, r5, #31
 8004e44:	d50a      	bpl.n	8004e5c <__pow5mult+0x84>
 8004e46:	4631      	mov	r1, r6
 8004e48:	4622      	mov	r2, r4
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	f7ff ff1a 	bl	8004c84 <__multiply>
 8004e50:	4631      	mov	r1, r6
 8004e52:	4680      	mov	r8, r0
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff fe4b 	bl	8004af0 <_Bfree>
 8004e5a:	4646      	mov	r6, r8
 8004e5c:	106d      	asrs	r5, r5, #1
 8004e5e:	d00b      	beq.n	8004e78 <__pow5mult+0xa0>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	b938      	cbnz	r0, 8004e74 <__pow5mult+0x9c>
 8004e64:	4622      	mov	r2, r4
 8004e66:	4621      	mov	r1, r4
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f7ff ff0b 	bl	8004c84 <__multiply>
 8004e6e:	6020      	str	r0, [r4, #0]
 8004e70:	f8c0 9000 	str.w	r9, [r0]
 8004e74:	4604      	mov	r4, r0
 8004e76:	e7e4      	b.n	8004e42 <__pow5mult+0x6a>
 8004e78:	4630      	mov	r0, r6
 8004e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e7e:	bf00      	nop
 8004e80:	080059c4 	.word	0x080059c4
 8004e84:	080058e9 	.word	0x080058e9
 8004e88:	08005969 	.word	0x08005969

08004e8c <__lshift>:
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	460c      	mov	r4, r1
 8004e92:	6849      	ldr	r1, [r1, #4]
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4691      	mov	r9, r2
 8004ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ea4:	f108 0601 	add.w	r6, r8, #1
 8004ea8:	42b3      	cmp	r3, r6
 8004eaa:	db0b      	blt.n	8004ec4 <__lshift+0x38>
 8004eac:	4638      	mov	r0, r7
 8004eae:	f7ff fddf 	bl	8004a70 <_Balloc>
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	b948      	cbnz	r0, 8004eca <__lshift+0x3e>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b28      	ldr	r3, [pc, #160]	@ (8004f5c <__lshift+0xd0>)
 8004eba:	4829      	ldr	r0, [pc, #164]	@ (8004f60 <__lshift+0xd4>)
 8004ebc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004ec0:	f000 fbe8 	bl	8005694 <__assert_func>
 8004ec4:	3101      	adds	r1, #1
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__lshift+0x1c>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f100 0114 	add.w	r1, r0, #20
 8004ed0:	f100 0210 	add.w	r2, r0, #16
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4553      	cmp	r3, sl
 8004ed8:	db33      	blt.n	8004f42 <__lshift+0xb6>
 8004eda:	6920      	ldr	r0, [r4, #16]
 8004edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ee0:	f104 0314 	add.w	r3, r4, #20
 8004ee4:	f019 091f 	ands.w	r9, r9, #31
 8004ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ef0:	d02b      	beq.n	8004f4a <__lshift+0xbe>
 8004ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ef6:	468a      	mov	sl, r1
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	fa00 f009 	lsl.w	r0, r0, r9
 8004f00:	4310      	orrs	r0, r2
 8004f02:	f84a 0b04 	str.w	r0, [sl], #4
 8004f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0a:	459c      	cmp	ip, r3
 8004f0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f10:	d8f3      	bhi.n	8004efa <__lshift+0x6e>
 8004f12:	ebac 0304 	sub.w	r3, ip, r4
 8004f16:	3b15      	subs	r3, #21
 8004f18:	f023 0303 	bic.w	r3, r3, #3
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	f104 0015 	add.w	r0, r4, #21
 8004f22:	4584      	cmp	ip, r0
 8004f24:	bf38      	it	cc
 8004f26:	2304      	movcc	r3, #4
 8004f28:	50ca      	str	r2, [r1, r3]
 8004f2a:	b10a      	cbz	r2, 8004f30 <__lshift+0xa4>
 8004f2c:	f108 0602 	add.w	r6, r8, #2
 8004f30:	3e01      	subs	r6, #1
 8004f32:	4638      	mov	r0, r7
 8004f34:	612e      	str	r6, [r5, #16]
 8004f36:	4621      	mov	r1, r4
 8004f38:	f7ff fdda 	bl	8004af0 <_Bfree>
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f46:	3301      	adds	r3, #1
 8004f48:	e7c5      	b.n	8004ed6 <__lshift+0x4a>
 8004f4a:	3904      	subs	r1, #4
 8004f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f54:	459c      	cmp	ip, r3
 8004f56:	d8f9      	bhi.n	8004f4c <__lshift+0xc0>
 8004f58:	e7ea      	b.n	8004f30 <__lshift+0xa4>
 8004f5a:	bf00      	nop
 8004f5c:	08005958 	.word	0x08005958
 8004f60:	08005969 	.word	0x08005969

08004f64 <__mcmp>:
 8004f64:	690a      	ldr	r2, [r1, #16]
 8004f66:	4603      	mov	r3, r0
 8004f68:	6900      	ldr	r0, [r0, #16]
 8004f6a:	1a80      	subs	r0, r0, r2
 8004f6c:	b530      	push	{r4, r5, lr}
 8004f6e:	d10e      	bne.n	8004f8e <__mcmp+0x2a>
 8004f70:	3314      	adds	r3, #20
 8004f72:	3114      	adds	r1, #20
 8004f74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f84:	4295      	cmp	r5, r2
 8004f86:	d003      	beq.n	8004f90 <__mcmp+0x2c>
 8004f88:	d205      	bcs.n	8004f96 <__mcmp+0x32>
 8004f8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f8e:	bd30      	pop	{r4, r5, pc}
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	d3f3      	bcc.n	8004f7c <__mcmp+0x18>
 8004f94:	e7fb      	b.n	8004f8e <__mcmp+0x2a>
 8004f96:	2001      	movs	r0, #1
 8004f98:	e7f9      	b.n	8004f8e <__mcmp+0x2a>
	...

08004f9c <__mdiff>:
 8004f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	4689      	mov	r9, r1
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4648      	mov	r0, r9
 8004fa8:	4614      	mov	r4, r2
 8004faa:	f7ff ffdb 	bl	8004f64 <__mcmp>
 8004fae:	1e05      	subs	r5, r0, #0
 8004fb0:	d112      	bne.n	8004fd8 <__mdiff+0x3c>
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f7ff fd5b 	bl	8004a70 <_Balloc>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	b928      	cbnz	r0, 8004fca <__mdiff+0x2e>
 8004fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80050bc <__mdiff+0x120>)
 8004fc0:	f240 2137 	movw	r1, #567	@ 0x237
 8004fc4:	483e      	ldr	r0, [pc, #248]	@ (80050c0 <__mdiff+0x124>)
 8004fc6:	f000 fb65 	bl	8005694 <__assert_func>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	b003      	add	sp, #12
 8004fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd8:	bfbc      	itt	lt
 8004fda:	464b      	movlt	r3, r9
 8004fdc:	46a1      	movlt	r9, r4
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004fe4:	bfba      	itte	lt
 8004fe6:	461c      	movlt	r4, r3
 8004fe8:	2501      	movlt	r5, #1
 8004fea:	2500      	movge	r5, #0
 8004fec:	f7ff fd40 	bl	8004a70 <_Balloc>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	b918      	cbnz	r0, 8004ffc <__mdiff+0x60>
 8004ff4:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <__mdiff+0x120>)
 8004ff6:	f240 2145 	movw	r1, #581	@ 0x245
 8004ffa:	e7e3      	b.n	8004fc4 <__mdiff+0x28>
 8004ffc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005000:	6926      	ldr	r6, [r4, #16]
 8005002:	60c5      	str	r5, [r0, #12]
 8005004:	f109 0310 	add.w	r3, r9, #16
 8005008:	f109 0514 	add.w	r5, r9, #20
 800500c:	f104 0e14 	add.w	lr, r4, #20
 8005010:	f100 0b14 	add.w	fp, r0, #20
 8005014:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005018:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	46d9      	mov	r9, fp
 8005020:	f04f 0c00 	mov.w	ip, #0
 8005024:	9b01      	ldr	r3, [sp, #4]
 8005026:	f85e 0b04 	ldr.w	r0, [lr], #4
 800502a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	fa1f f38a 	uxth.w	r3, sl
 8005034:	4619      	mov	r1, r3
 8005036:	b283      	uxth	r3, r0
 8005038:	1acb      	subs	r3, r1, r3
 800503a:	0c00      	lsrs	r0, r0, #16
 800503c:	4463      	add	r3, ip
 800503e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005042:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005046:	b29b      	uxth	r3, r3
 8005048:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800504c:	4576      	cmp	r6, lr
 800504e:	f849 3b04 	str.w	r3, [r9], #4
 8005052:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005056:	d8e5      	bhi.n	8005024 <__mdiff+0x88>
 8005058:	1b33      	subs	r3, r6, r4
 800505a:	3b15      	subs	r3, #21
 800505c:	f023 0303 	bic.w	r3, r3, #3
 8005060:	3415      	adds	r4, #21
 8005062:	3304      	adds	r3, #4
 8005064:	42a6      	cmp	r6, r4
 8005066:	bf38      	it	cc
 8005068:	2304      	movcc	r3, #4
 800506a:	441d      	add	r5, r3
 800506c:	445b      	add	r3, fp
 800506e:	461e      	mov	r6, r3
 8005070:	462c      	mov	r4, r5
 8005072:	4544      	cmp	r4, r8
 8005074:	d30e      	bcc.n	8005094 <__mdiff+0xf8>
 8005076:	f108 0103 	add.w	r1, r8, #3
 800507a:	1b49      	subs	r1, r1, r5
 800507c:	f021 0103 	bic.w	r1, r1, #3
 8005080:	3d03      	subs	r5, #3
 8005082:	45a8      	cmp	r8, r5
 8005084:	bf38      	it	cc
 8005086:	2100      	movcc	r1, #0
 8005088:	440b      	add	r3, r1
 800508a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800508e:	b191      	cbz	r1, 80050b6 <__mdiff+0x11a>
 8005090:	6117      	str	r7, [r2, #16]
 8005092:	e79d      	b.n	8004fd0 <__mdiff+0x34>
 8005094:	f854 1b04 	ldr.w	r1, [r4], #4
 8005098:	46e6      	mov	lr, ip
 800509a:	0c08      	lsrs	r0, r1, #16
 800509c:	fa1c fc81 	uxtah	ip, ip, r1
 80050a0:	4471      	add	r1, lr
 80050a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80050a6:	b289      	uxth	r1, r1
 80050a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80050ac:	f846 1b04 	str.w	r1, [r6], #4
 80050b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050b4:	e7dd      	b.n	8005072 <__mdiff+0xd6>
 80050b6:	3f01      	subs	r7, #1
 80050b8:	e7e7      	b.n	800508a <__mdiff+0xee>
 80050ba:	bf00      	nop
 80050bc:	08005958 	.word	0x08005958
 80050c0:	08005969 	.word	0x08005969

080050c4 <__d2b>:
 80050c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050c8:	460f      	mov	r7, r1
 80050ca:	2101      	movs	r1, #1
 80050cc:	ec59 8b10 	vmov	r8, r9, d0
 80050d0:	4616      	mov	r6, r2
 80050d2:	f7ff fccd 	bl	8004a70 <_Balloc>
 80050d6:	4604      	mov	r4, r0
 80050d8:	b930      	cbnz	r0, 80050e8 <__d2b+0x24>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b23      	ldr	r3, [pc, #140]	@ (800516c <__d2b+0xa8>)
 80050de:	4824      	ldr	r0, [pc, #144]	@ (8005170 <__d2b+0xac>)
 80050e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80050e4:	f000 fad6 	bl	8005694 <__assert_func>
 80050e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050f0:	b10d      	cbz	r5, 80050f6 <__d2b+0x32>
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	f1b8 0300 	subs.w	r3, r8, #0
 80050fc:	d023      	beq.n	8005146 <__d2b+0x82>
 80050fe:	4668      	mov	r0, sp
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	f7ff fd7c 	bl	8004bfe <__lo0bits>
 8005106:	e9dd 1200 	ldrd	r1, r2, [sp]
 800510a:	b1d0      	cbz	r0, 8005142 <__d2b+0x7e>
 800510c:	f1c0 0320 	rsb	r3, r0, #32
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	430b      	orrs	r3, r1
 8005116:	40c2      	lsrs	r2, r0
 8005118:	6163      	str	r3, [r4, #20]
 800511a:	9201      	str	r2, [sp, #4]
 800511c:	9b01      	ldr	r3, [sp, #4]
 800511e:	61a3      	str	r3, [r4, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2201      	moveq	r2, #1
 8005126:	2202      	movne	r2, #2
 8005128:	6122      	str	r2, [r4, #16]
 800512a:	b1a5      	cbz	r5, 8005156 <__d2b+0x92>
 800512c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005130:	4405      	add	r5, r0
 8005132:	603d      	str	r5, [r7, #0]
 8005134:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005138:	6030      	str	r0, [r6, #0]
 800513a:	4620      	mov	r0, r4
 800513c:	b003      	add	sp, #12
 800513e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005142:	6161      	str	r1, [r4, #20]
 8005144:	e7ea      	b.n	800511c <__d2b+0x58>
 8005146:	a801      	add	r0, sp, #4
 8005148:	f7ff fd59 	bl	8004bfe <__lo0bits>
 800514c:	9b01      	ldr	r3, [sp, #4]
 800514e:	6163      	str	r3, [r4, #20]
 8005150:	3020      	adds	r0, #32
 8005152:	2201      	movs	r2, #1
 8005154:	e7e8      	b.n	8005128 <__d2b+0x64>
 8005156:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800515a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800515e:	6038      	str	r0, [r7, #0]
 8005160:	6918      	ldr	r0, [r3, #16]
 8005162:	f7ff fd2d 	bl	8004bc0 <__hi0bits>
 8005166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800516a:	e7e5      	b.n	8005138 <__d2b+0x74>
 800516c:	08005958 	.word	0x08005958
 8005170:	08005969 	.word	0x08005969

08005174 <__sfputc_r>:
 8005174:	6893      	ldr	r3, [r2, #8]
 8005176:	3b01      	subs	r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	b410      	push	{r4}
 800517c:	6093      	str	r3, [r2, #8]
 800517e:	da08      	bge.n	8005192 <__sfputc_r+0x1e>
 8005180:	6994      	ldr	r4, [r2, #24]
 8005182:	42a3      	cmp	r3, r4
 8005184:	db01      	blt.n	800518a <__sfputc_r+0x16>
 8005186:	290a      	cmp	r1, #10
 8005188:	d103      	bne.n	8005192 <__sfputc_r+0x1e>
 800518a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800518e:	f7fe bc0e 	b.w	80039ae <__swbuf_r>
 8005192:	6813      	ldr	r3, [r2, #0]
 8005194:	1c58      	adds	r0, r3, #1
 8005196:	6010      	str	r0, [r2, #0]
 8005198:	7019      	strb	r1, [r3, #0]
 800519a:	4608      	mov	r0, r1
 800519c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <__sfputs_r>:
 80051a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a4:	4606      	mov	r6, r0
 80051a6:	460f      	mov	r7, r1
 80051a8:	4614      	mov	r4, r2
 80051aa:	18d5      	adds	r5, r2, r3
 80051ac:	42ac      	cmp	r4, r5
 80051ae:	d101      	bne.n	80051b4 <__sfputs_r+0x12>
 80051b0:	2000      	movs	r0, #0
 80051b2:	e007      	b.n	80051c4 <__sfputs_r+0x22>
 80051b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b8:	463a      	mov	r2, r7
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ffda 	bl	8005174 <__sfputc_r>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d1f3      	bne.n	80051ac <__sfputs_r+0xa>
 80051c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051c8 <_vfiprintf_r>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	460d      	mov	r5, r1
 80051ce:	b09d      	sub	sp, #116	@ 0x74
 80051d0:	4614      	mov	r4, r2
 80051d2:	4698      	mov	r8, r3
 80051d4:	4606      	mov	r6, r0
 80051d6:	b118      	cbz	r0, 80051e0 <_vfiprintf_r+0x18>
 80051d8:	6a03      	ldr	r3, [r0, #32]
 80051da:	b90b      	cbnz	r3, 80051e0 <_vfiprintf_r+0x18>
 80051dc:	f7fe fafe 	bl	80037dc <__sinit>
 80051e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051e2:	07d9      	lsls	r1, r3, #31
 80051e4:	d405      	bmi.n	80051f2 <_vfiprintf_r+0x2a>
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	059a      	lsls	r2, r3, #22
 80051ea:	d402      	bmi.n	80051f2 <_vfiprintf_r+0x2a>
 80051ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ee:	f7fe fcf0 	bl	8003bd2 <__retarget_lock_acquire_recursive>
 80051f2:	89ab      	ldrh	r3, [r5, #12]
 80051f4:	071b      	lsls	r3, r3, #28
 80051f6:	d501      	bpl.n	80051fc <_vfiprintf_r+0x34>
 80051f8:	692b      	ldr	r3, [r5, #16]
 80051fa:	b99b      	cbnz	r3, 8005224 <_vfiprintf_r+0x5c>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4630      	mov	r0, r6
 8005200:	f7fe fc14 	bl	8003a2c <__swsetup_r>
 8005204:	b170      	cbz	r0, 8005224 <_vfiprintf_r+0x5c>
 8005206:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005208:	07dc      	lsls	r4, r3, #31
 800520a:	d504      	bpl.n	8005216 <_vfiprintf_r+0x4e>
 800520c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005210:	b01d      	add	sp, #116	@ 0x74
 8005212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005216:	89ab      	ldrh	r3, [r5, #12]
 8005218:	0598      	lsls	r0, r3, #22
 800521a:	d4f7      	bmi.n	800520c <_vfiprintf_r+0x44>
 800521c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800521e:	f7fe fcd9 	bl	8003bd4 <__retarget_lock_release_recursive>
 8005222:	e7f3      	b.n	800520c <_vfiprintf_r+0x44>
 8005224:	2300      	movs	r3, #0
 8005226:	9309      	str	r3, [sp, #36]	@ 0x24
 8005228:	2320      	movs	r3, #32
 800522a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800522e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005232:	2330      	movs	r3, #48	@ 0x30
 8005234:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053e4 <_vfiprintf_r+0x21c>
 8005238:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800523c:	f04f 0901 	mov.w	r9, #1
 8005240:	4623      	mov	r3, r4
 8005242:	469a      	mov	sl, r3
 8005244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005248:	b10a      	cbz	r2, 800524e <_vfiprintf_r+0x86>
 800524a:	2a25      	cmp	r2, #37	@ 0x25
 800524c:	d1f9      	bne.n	8005242 <_vfiprintf_r+0x7a>
 800524e:	ebba 0b04 	subs.w	fp, sl, r4
 8005252:	d00b      	beq.n	800526c <_vfiprintf_r+0xa4>
 8005254:	465b      	mov	r3, fp
 8005256:	4622      	mov	r2, r4
 8005258:	4629      	mov	r1, r5
 800525a:	4630      	mov	r0, r6
 800525c:	f7ff ffa1 	bl	80051a2 <__sfputs_r>
 8005260:	3001      	adds	r0, #1
 8005262:	f000 80a7 	beq.w	80053b4 <_vfiprintf_r+0x1ec>
 8005266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005268:	445a      	add	r2, fp
 800526a:	9209      	str	r2, [sp, #36]	@ 0x24
 800526c:	f89a 3000 	ldrb.w	r3, [sl]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 809f 	beq.w	80053b4 <_vfiprintf_r+0x1ec>
 8005276:	2300      	movs	r3, #0
 8005278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800527c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005280:	f10a 0a01 	add.w	sl, sl, #1
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	9307      	str	r3, [sp, #28]
 8005288:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800528c:	931a      	str	r3, [sp, #104]	@ 0x68
 800528e:	4654      	mov	r4, sl
 8005290:	2205      	movs	r2, #5
 8005292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005296:	4853      	ldr	r0, [pc, #332]	@ (80053e4 <_vfiprintf_r+0x21c>)
 8005298:	f7fa ffa2 	bl	80001e0 <memchr>
 800529c:	9a04      	ldr	r2, [sp, #16]
 800529e:	b9d8      	cbnz	r0, 80052d8 <_vfiprintf_r+0x110>
 80052a0:	06d1      	lsls	r1, r2, #27
 80052a2:	bf44      	itt	mi
 80052a4:	2320      	movmi	r3, #32
 80052a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052aa:	0713      	lsls	r3, r2, #28
 80052ac:	bf44      	itt	mi
 80052ae:	232b      	movmi	r3, #43	@ 0x2b
 80052b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052b4:	f89a 3000 	ldrb.w	r3, [sl]
 80052b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ba:	d015      	beq.n	80052e8 <_vfiprintf_r+0x120>
 80052bc:	9a07      	ldr	r2, [sp, #28]
 80052be:	4654      	mov	r4, sl
 80052c0:	2000      	movs	r0, #0
 80052c2:	f04f 0c0a 	mov.w	ip, #10
 80052c6:	4621      	mov	r1, r4
 80052c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052cc:	3b30      	subs	r3, #48	@ 0x30
 80052ce:	2b09      	cmp	r3, #9
 80052d0:	d94b      	bls.n	800536a <_vfiprintf_r+0x1a2>
 80052d2:	b1b0      	cbz	r0, 8005302 <_vfiprintf_r+0x13a>
 80052d4:	9207      	str	r2, [sp, #28]
 80052d6:	e014      	b.n	8005302 <_vfiprintf_r+0x13a>
 80052d8:	eba0 0308 	sub.w	r3, r0, r8
 80052dc:	fa09 f303 	lsl.w	r3, r9, r3
 80052e0:	4313      	orrs	r3, r2
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	46a2      	mov	sl, r4
 80052e6:	e7d2      	b.n	800528e <_vfiprintf_r+0xc6>
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	1d19      	adds	r1, r3, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	9103      	str	r1, [sp, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bfbb      	ittet	lt
 80052f4:	425b      	neglt	r3, r3
 80052f6:	f042 0202 	orrlt.w	r2, r2, #2
 80052fa:	9307      	strge	r3, [sp, #28]
 80052fc:	9307      	strlt	r3, [sp, #28]
 80052fe:	bfb8      	it	lt
 8005300:	9204      	strlt	r2, [sp, #16]
 8005302:	7823      	ldrb	r3, [r4, #0]
 8005304:	2b2e      	cmp	r3, #46	@ 0x2e
 8005306:	d10a      	bne.n	800531e <_vfiprintf_r+0x156>
 8005308:	7863      	ldrb	r3, [r4, #1]
 800530a:	2b2a      	cmp	r3, #42	@ 0x2a
 800530c:	d132      	bne.n	8005374 <_vfiprintf_r+0x1ac>
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	1d1a      	adds	r2, r3, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	9203      	str	r2, [sp, #12]
 8005316:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800531a:	3402      	adds	r4, #2
 800531c:	9305      	str	r3, [sp, #20]
 800531e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053f4 <_vfiprintf_r+0x22c>
 8005322:	7821      	ldrb	r1, [r4, #0]
 8005324:	2203      	movs	r2, #3
 8005326:	4650      	mov	r0, sl
 8005328:	f7fa ff5a 	bl	80001e0 <memchr>
 800532c:	b138      	cbz	r0, 800533e <_vfiprintf_r+0x176>
 800532e:	9b04      	ldr	r3, [sp, #16]
 8005330:	eba0 000a 	sub.w	r0, r0, sl
 8005334:	2240      	movs	r2, #64	@ 0x40
 8005336:	4082      	lsls	r2, r0
 8005338:	4313      	orrs	r3, r2
 800533a:	3401      	adds	r4, #1
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005342:	4829      	ldr	r0, [pc, #164]	@ (80053e8 <_vfiprintf_r+0x220>)
 8005344:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005348:	2206      	movs	r2, #6
 800534a:	f7fa ff49 	bl	80001e0 <memchr>
 800534e:	2800      	cmp	r0, #0
 8005350:	d03f      	beq.n	80053d2 <_vfiprintf_r+0x20a>
 8005352:	4b26      	ldr	r3, [pc, #152]	@ (80053ec <_vfiprintf_r+0x224>)
 8005354:	bb1b      	cbnz	r3, 800539e <_vfiprintf_r+0x1d6>
 8005356:	9b03      	ldr	r3, [sp, #12]
 8005358:	3307      	adds	r3, #7
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	3308      	adds	r3, #8
 8005360:	9303      	str	r3, [sp, #12]
 8005362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005364:	443b      	add	r3, r7
 8005366:	9309      	str	r3, [sp, #36]	@ 0x24
 8005368:	e76a      	b.n	8005240 <_vfiprintf_r+0x78>
 800536a:	fb0c 3202 	mla	r2, ip, r2, r3
 800536e:	460c      	mov	r4, r1
 8005370:	2001      	movs	r0, #1
 8005372:	e7a8      	b.n	80052c6 <_vfiprintf_r+0xfe>
 8005374:	2300      	movs	r3, #0
 8005376:	3401      	adds	r4, #1
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	4619      	mov	r1, r3
 800537c:	f04f 0c0a 	mov.w	ip, #10
 8005380:	4620      	mov	r0, r4
 8005382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005386:	3a30      	subs	r2, #48	@ 0x30
 8005388:	2a09      	cmp	r2, #9
 800538a:	d903      	bls.n	8005394 <_vfiprintf_r+0x1cc>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0c6      	beq.n	800531e <_vfiprintf_r+0x156>
 8005390:	9105      	str	r1, [sp, #20]
 8005392:	e7c4      	b.n	800531e <_vfiprintf_r+0x156>
 8005394:	fb0c 2101 	mla	r1, ip, r1, r2
 8005398:	4604      	mov	r4, r0
 800539a:	2301      	movs	r3, #1
 800539c:	e7f0      	b.n	8005380 <_vfiprintf_r+0x1b8>
 800539e:	ab03      	add	r3, sp, #12
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	462a      	mov	r2, r5
 80053a4:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <_vfiprintf_r+0x228>)
 80053a6:	a904      	add	r1, sp, #16
 80053a8:	4630      	mov	r0, r6
 80053aa:	f7fd fdd3 	bl	8002f54 <_printf_float>
 80053ae:	4607      	mov	r7, r0
 80053b0:	1c78      	adds	r0, r7, #1
 80053b2:	d1d6      	bne.n	8005362 <_vfiprintf_r+0x19a>
 80053b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053b6:	07d9      	lsls	r1, r3, #31
 80053b8:	d405      	bmi.n	80053c6 <_vfiprintf_r+0x1fe>
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	059a      	lsls	r2, r3, #22
 80053be:	d402      	bmi.n	80053c6 <_vfiprintf_r+0x1fe>
 80053c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053c2:	f7fe fc07 	bl	8003bd4 <__retarget_lock_release_recursive>
 80053c6:	89ab      	ldrh	r3, [r5, #12]
 80053c8:	065b      	lsls	r3, r3, #25
 80053ca:	f53f af1f 	bmi.w	800520c <_vfiprintf_r+0x44>
 80053ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053d0:	e71e      	b.n	8005210 <_vfiprintf_r+0x48>
 80053d2:	ab03      	add	r3, sp, #12
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	462a      	mov	r2, r5
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <_vfiprintf_r+0x228>)
 80053da:	a904      	add	r1, sp, #16
 80053dc:	4630      	mov	r0, r6
 80053de:	f7fe f851 	bl	8003484 <_printf_i>
 80053e2:	e7e4      	b.n	80053ae <_vfiprintf_r+0x1e6>
 80053e4:	08005ac0 	.word	0x08005ac0
 80053e8:	08005aca 	.word	0x08005aca
 80053ec:	08002f55 	.word	0x08002f55
 80053f0:	080051a3 	.word	0x080051a3
 80053f4:	08005ac6 	.word	0x08005ac6

080053f8 <__sflush_r>:
 80053f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	0716      	lsls	r6, r2, #28
 8005402:	4605      	mov	r5, r0
 8005404:	460c      	mov	r4, r1
 8005406:	d454      	bmi.n	80054b2 <__sflush_r+0xba>
 8005408:	684b      	ldr	r3, [r1, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	dc02      	bgt.n	8005414 <__sflush_r+0x1c>
 800540e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	dd48      	ble.n	80054a6 <__sflush_r+0xae>
 8005414:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005416:	2e00      	cmp	r6, #0
 8005418:	d045      	beq.n	80054a6 <__sflush_r+0xae>
 800541a:	2300      	movs	r3, #0
 800541c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005420:	682f      	ldr	r7, [r5, #0]
 8005422:	6a21      	ldr	r1, [r4, #32]
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	d030      	beq.n	800548a <__sflush_r+0x92>
 8005428:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	0759      	lsls	r1, r3, #29
 800542e:	d505      	bpl.n	800543c <__sflush_r+0x44>
 8005430:	6863      	ldr	r3, [r4, #4]
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005436:	b10b      	cbz	r3, 800543c <__sflush_r+0x44>
 8005438:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	2300      	movs	r3, #0
 800543e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005440:	6a21      	ldr	r1, [r4, #32]
 8005442:	4628      	mov	r0, r5
 8005444:	47b0      	blx	r6
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	d106      	bne.n	800545a <__sflush_r+0x62>
 800544c:	6829      	ldr	r1, [r5, #0]
 800544e:	291d      	cmp	r1, #29
 8005450:	d82b      	bhi.n	80054aa <__sflush_r+0xb2>
 8005452:	4a2a      	ldr	r2, [pc, #168]	@ (80054fc <__sflush_r+0x104>)
 8005454:	410a      	asrs	r2, r1
 8005456:	07d6      	lsls	r6, r2, #31
 8005458:	d427      	bmi.n	80054aa <__sflush_r+0xb2>
 800545a:	2200      	movs	r2, #0
 800545c:	6062      	str	r2, [r4, #4]
 800545e:	04d9      	lsls	r1, r3, #19
 8005460:	6922      	ldr	r2, [r4, #16]
 8005462:	6022      	str	r2, [r4, #0]
 8005464:	d504      	bpl.n	8005470 <__sflush_r+0x78>
 8005466:	1c42      	adds	r2, r0, #1
 8005468:	d101      	bne.n	800546e <__sflush_r+0x76>
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	b903      	cbnz	r3, 8005470 <__sflush_r+0x78>
 800546e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005472:	602f      	str	r7, [r5, #0]
 8005474:	b1b9      	cbz	r1, 80054a6 <__sflush_r+0xae>
 8005476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800547a:	4299      	cmp	r1, r3
 800547c:	d002      	beq.n	8005484 <__sflush_r+0x8c>
 800547e:	4628      	mov	r0, r5
 8005480:	f7ff f9f6 	bl	8004870 <_free_r>
 8005484:	2300      	movs	r3, #0
 8005486:	6363      	str	r3, [r4, #52]	@ 0x34
 8005488:	e00d      	b.n	80054a6 <__sflush_r+0xae>
 800548a:	2301      	movs	r3, #1
 800548c:	4628      	mov	r0, r5
 800548e:	47b0      	blx	r6
 8005490:	4602      	mov	r2, r0
 8005492:	1c50      	adds	r0, r2, #1
 8005494:	d1c9      	bne.n	800542a <__sflush_r+0x32>
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0c6      	beq.n	800542a <__sflush_r+0x32>
 800549c:	2b1d      	cmp	r3, #29
 800549e:	d001      	beq.n	80054a4 <__sflush_r+0xac>
 80054a0:	2b16      	cmp	r3, #22
 80054a2:	d11e      	bne.n	80054e2 <__sflush_r+0xea>
 80054a4:	602f      	str	r7, [r5, #0]
 80054a6:	2000      	movs	r0, #0
 80054a8:	e022      	b.n	80054f0 <__sflush_r+0xf8>
 80054aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ae:	b21b      	sxth	r3, r3
 80054b0:	e01b      	b.n	80054ea <__sflush_r+0xf2>
 80054b2:	690f      	ldr	r7, [r1, #16]
 80054b4:	2f00      	cmp	r7, #0
 80054b6:	d0f6      	beq.n	80054a6 <__sflush_r+0xae>
 80054b8:	0793      	lsls	r3, r2, #30
 80054ba:	680e      	ldr	r6, [r1, #0]
 80054bc:	bf08      	it	eq
 80054be:	694b      	ldreq	r3, [r1, #20]
 80054c0:	600f      	str	r7, [r1, #0]
 80054c2:	bf18      	it	ne
 80054c4:	2300      	movne	r3, #0
 80054c6:	eba6 0807 	sub.w	r8, r6, r7
 80054ca:	608b      	str	r3, [r1, #8]
 80054cc:	f1b8 0f00 	cmp.w	r8, #0
 80054d0:	dde9      	ble.n	80054a6 <__sflush_r+0xae>
 80054d2:	6a21      	ldr	r1, [r4, #32]
 80054d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054d6:	4643      	mov	r3, r8
 80054d8:	463a      	mov	r2, r7
 80054da:	4628      	mov	r0, r5
 80054dc:	47b0      	blx	r6
 80054de:	2800      	cmp	r0, #0
 80054e0:	dc08      	bgt.n	80054f4 <__sflush_r+0xfc>
 80054e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f4:	4407      	add	r7, r0
 80054f6:	eba8 0800 	sub.w	r8, r8, r0
 80054fa:	e7e7      	b.n	80054cc <__sflush_r+0xd4>
 80054fc:	dfbffffe 	.word	0xdfbffffe

08005500 <_fflush_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	690b      	ldr	r3, [r1, #16]
 8005504:	4605      	mov	r5, r0
 8005506:	460c      	mov	r4, r1
 8005508:	b913      	cbnz	r3, 8005510 <_fflush_r+0x10>
 800550a:	2500      	movs	r5, #0
 800550c:	4628      	mov	r0, r5
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	b118      	cbz	r0, 800551a <_fflush_r+0x1a>
 8005512:	6a03      	ldr	r3, [r0, #32]
 8005514:	b90b      	cbnz	r3, 800551a <_fflush_r+0x1a>
 8005516:	f7fe f961 	bl	80037dc <__sinit>
 800551a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f3      	beq.n	800550a <_fflush_r+0xa>
 8005522:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005524:	07d0      	lsls	r0, r2, #31
 8005526:	d404      	bmi.n	8005532 <_fflush_r+0x32>
 8005528:	0599      	lsls	r1, r3, #22
 800552a:	d402      	bmi.n	8005532 <_fflush_r+0x32>
 800552c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800552e:	f7fe fb50 	bl	8003bd2 <__retarget_lock_acquire_recursive>
 8005532:	4628      	mov	r0, r5
 8005534:	4621      	mov	r1, r4
 8005536:	f7ff ff5f 	bl	80053f8 <__sflush_r>
 800553a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800553c:	07da      	lsls	r2, r3, #31
 800553e:	4605      	mov	r5, r0
 8005540:	d4e4      	bmi.n	800550c <_fflush_r+0xc>
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	059b      	lsls	r3, r3, #22
 8005546:	d4e1      	bmi.n	800550c <_fflush_r+0xc>
 8005548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800554a:	f7fe fb43 	bl	8003bd4 <__retarget_lock_release_recursive>
 800554e:	e7dd      	b.n	800550c <_fflush_r+0xc>

08005550 <__swhatbuf_r>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	460c      	mov	r4, r1
 8005554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005558:	2900      	cmp	r1, #0
 800555a:	b096      	sub	sp, #88	@ 0x58
 800555c:	4615      	mov	r5, r2
 800555e:	461e      	mov	r6, r3
 8005560:	da0d      	bge.n	800557e <__swhatbuf_r+0x2e>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005568:	f04f 0100 	mov.w	r1, #0
 800556c:	bf14      	ite	ne
 800556e:	2340      	movne	r3, #64	@ 0x40
 8005570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005574:	2000      	movs	r0, #0
 8005576:	6031      	str	r1, [r6, #0]
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	b016      	add	sp, #88	@ 0x58
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	466a      	mov	r2, sp
 8005580:	f000 f848 	bl	8005614 <_fstat_r>
 8005584:	2800      	cmp	r0, #0
 8005586:	dbec      	blt.n	8005562 <__swhatbuf_r+0x12>
 8005588:	9901      	ldr	r1, [sp, #4]
 800558a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800558e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005592:	4259      	negs	r1, r3
 8005594:	4159      	adcs	r1, r3
 8005596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800559a:	e7eb      	b.n	8005574 <__swhatbuf_r+0x24>

0800559c <__smakebuf_r>:
 800559c:	898b      	ldrh	r3, [r1, #12]
 800559e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a0:	079d      	lsls	r5, r3, #30
 80055a2:	4606      	mov	r6, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	d507      	bpl.n	80055b8 <__smakebuf_r+0x1c>
 80055a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	2301      	movs	r3, #1
 80055b2:	6163      	str	r3, [r4, #20]
 80055b4:	b003      	add	sp, #12
 80055b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b8:	ab01      	add	r3, sp, #4
 80055ba:	466a      	mov	r2, sp
 80055bc:	f7ff ffc8 	bl	8005550 <__swhatbuf_r>
 80055c0:	9f00      	ldr	r7, [sp, #0]
 80055c2:	4605      	mov	r5, r0
 80055c4:	4639      	mov	r1, r7
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7ff f9c6 	bl	8004958 <_malloc_r>
 80055cc:	b948      	cbnz	r0, 80055e2 <__smakebuf_r+0x46>
 80055ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d2:	059a      	lsls	r2, r3, #22
 80055d4:	d4ee      	bmi.n	80055b4 <__smakebuf_r+0x18>
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	f043 0302 	orr.w	r3, r3, #2
 80055de:	81a3      	strh	r3, [r4, #12]
 80055e0:	e7e2      	b.n	80055a8 <__smakebuf_r+0xc>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	6020      	str	r0, [r4, #0]
 80055e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055f2:	b15b      	cbz	r3, 800560c <__smakebuf_r+0x70>
 80055f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f81d 	bl	8005638 <_isatty_r>
 80055fe:	b128      	cbz	r0, 800560c <__smakebuf_r+0x70>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	431d      	orrs	r5, r3
 8005610:	81a5      	strh	r5, [r4, #12]
 8005612:	e7cf      	b.n	80055b4 <__smakebuf_r+0x18>

08005614 <_fstat_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	@ (8005634 <_fstat_r+0x20>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	4611      	mov	r1, r2
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	f7fb ff48 	bl	80014b6 <_fstat>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	d102      	bne.n	8005630 <_fstat_r+0x1c>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	b103      	cbz	r3, 8005630 <_fstat_r+0x1c>
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	bd38      	pop	{r3, r4, r5, pc}
 8005632:	bf00      	nop
 8005634:	2000046c 	.word	0x2000046c

08005638 <_isatty_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d06      	ldr	r5, [pc, #24]	@ (8005654 <_isatty_r+0x1c>)
 800563c:	2300      	movs	r3, #0
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	f7fb ff3c 	bl	80014c0 <_isatty>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_isatty_r+0x1a>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_isatty_r+0x1a>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	2000046c 	.word	0x2000046c

08005658 <_sbrk_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	@ (8005674 <_sbrk_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb ff30 	bl	80014c8 <_sbrk>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_sbrk_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_sbrk_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	2000046c 	.word	0x2000046c

08005678 <memcpy>:
 8005678:	440a      	add	r2, r1
 800567a:	4291      	cmp	r1, r2
 800567c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005680:	d100      	bne.n	8005684 <memcpy+0xc>
 8005682:	4770      	bx	lr
 8005684:	b510      	push	{r4, lr}
 8005686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800568a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568e:	4291      	cmp	r1, r2
 8005690:	d1f9      	bne.n	8005686 <memcpy+0xe>
 8005692:	bd10      	pop	{r4, pc}

08005694 <__assert_func>:
 8005694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005696:	4614      	mov	r4, r2
 8005698:	461a      	mov	r2, r3
 800569a:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <__assert_func+0x2c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4605      	mov	r5, r0
 80056a0:	68d8      	ldr	r0, [r3, #12]
 80056a2:	b954      	cbnz	r4, 80056ba <__assert_func+0x26>
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <__assert_func+0x30>)
 80056a6:	461c      	mov	r4, r3
 80056a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056ac:	9100      	str	r1, [sp, #0]
 80056ae:	462b      	mov	r3, r5
 80056b0:	4905      	ldr	r1, [pc, #20]	@ (80056c8 <__assert_func+0x34>)
 80056b2:	f000 f841 	bl	8005738 <fiprintf>
 80056b6:	f000 f851 	bl	800575c <abort>
 80056ba:	4b04      	ldr	r3, [pc, #16]	@ (80056cc <__assert_func+0x38>)
 80056bc:	e7f4      	b.n	80056a8 <__assert_func+0x14>
 80056be:	bf00      	nop
 80056c0:	20000070 	.word	0x20000070
 80056c4:	08005b16 	.word	0x08005b16
 80056c8:	08005ae8 	.word	0x08005ae8
 80056cc:	08005adb 	.word	0x08005adb

080056d0 <_calloc_r>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	fba1 5402 	umull	r5, r4, r1, r2
 80056d6:	b93c      	cbnz	r4, 80056e8 <_calloc_r+0x18>
 80056d8:	4629      	mov	r1, r5
 80056da:	f7ff f93d 	bl	8004958 <_malloc_r>
 80056de:	4606      	mov	r6, r0
 80056e0:	b928      	cbnz	r0, 80056ee <_calloc_r+0x1e>
 80056e2:	2600      	movs	r6, #0
 80056e4:	4630      	mov	r0, r6
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	220c      	movs	r2, #12
 80056ea:	6002      	str	r2, [r0, #0]
 80056ec:	e7f9      	b.n	80056e2 <_calloc_r+0x12>
 80056ee:	462a      	mov	r2, r5
 80056f0:	4621      	mov	r1, r4
 80056f2:	f7fe f9f1 	bl	8003ad8 <memset>
 80056f6:	e7f5      	b.n	80056e4 <_calloc_r+0x14>

080056f8 <__ascii_mbtowc>:
 80056f8:	b082      	sub	sp, #8
 80056fa:	b901      	cbnz	r1, 80056fe <__ascii_mbtowc+0x6>
 80056fc:	a901      	add	r1, sp, #4
 80056fe:	b142      	cbz	r2, 8005712 <__ascii_mbtowc+0x1a>
 8005700:	b14b      	cbz	r3, 8005716 <__ascii_mbtowc+0x1e>
 8005702:	7813      	ldrb	r3, [r2, #0]
 8005704:	600b      	str	r3, [r1, #0]
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	1e10      	subs	r0, r2, #0
 800570a:	bf18      	it	ne
 800570c:	2001      	movne	r0, #1
 800570e:	b002      	add	sp, #8
 8005710:	4770      	bx	lr
 8005712:	4610      	mov	r0, r2
 8005714:	e7fb      	b.n	800570e <__ascii_mbtowc+0x16>
 8005716:	f06f 0001 	mvn.w	r0, #1
 800571a:	e7f8      	b.n	800570e <__ascii_mbtowc+0x16>

0800571c <__ascii_wctomb>:
 800571c:	4603      	mov	r3, r0
 800571e:	4608      	mov	r0, r1
 8005720:	b141      	cbz	r1, 8005734 <__ascii_wctomb+0x18>
 8005722:	2aff      	cmp	r2, #255	@ 0xff
 8005724:	d904      	bls.n	8005730 <__ascii_wctomb+0x14>
 8005726:	228a      	movs	r2, #138	@ 0x8a
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800572e:	4770      	bx	lr
 8005730:	700a      	strb	r2, [r1, #0]
 8005732:	2001      	movs	r0, #1
 8005734:	4770      	bx	lr
	...

08005738 <fiprintf>:
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b503      	push	{r0, r1, lr}
 800573c:	4601      	mov	r1, r0
 800573e:	ab03      	add	r3, sp, #12
 8005740:	4805      	ldr	r0, [pc, #20]	@ (8005758 <fiprintf+0x20>)
 8005742:	f853 2b04 	ldr.w	r2, [r3], #4
 8005746:	6800      	ldr	r0, [r0, #0]
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	f7ff fd3d 	bl	80051c8 <_vfiprintf_r>
 800574e:	b002      	add	sp, #8
 8005750:	f85d eb04 	ldr.w	lr, [sp], #4
 8005754:	b003      	add	sp, #12
 8005756:	4770      	bx	lr
 8005758:	20000070 	.word	0x20000070

0800575c <abort>:
 800575c:	b508      	push	{r3, lr}
 800575e:	2006      	movs	r0, #6
 8005760:	f000 f82c 	bl	80057bc <raise>
 8005764:	2001      	movs	r0, #1
 8005766:	f7fb fe8d 	bl	8001484 <_exit>

0800576a <_raise_r>:
 800576a:	291f      	cmp	r1, #31
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4605      	mov	r5, r0
 8005770:	460c      	mov	r4, r1
 8005772:	d904      	bls.n	800577e <_raise_r+0x14>
 8005774:	2316      	movs	r3, #22
 8005776:	6003      	str	r3, [r0, #0]
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800577c:	bd38      	pop	{r3, r4, r5, pc}
 800577e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005780:	b112      	cbz	r2, 8005788 <_raise_r+0x1e>
 8005782:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005786:	b94b      	cbnz	r3, 800579c <_raise_r+0x32>
 8005788:	4628      	mov	r0, r5
 800578a:	f000 f831 	bl	80057f0 <_getpid_r>
 800578e:	4622      	mov	r2, r4
 8005790:	4601      	mov	r1, r0
 8005792:	4628      	mov	r0, r5
 8005794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005798:	f000 b818 	b.w	80057cc <_kill_r>
 800579c:	2b01      	cmp	r3, #1
 800579e:	d00a      	beq.n	80057b6 <_raise_r+0x4c>
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	d103      	bne.n	80057ac <_raise_r+0x42>
 80057a4:	2316      	movs	r3, #22
 80057a6:	6003      	str	r3, [r0, #0]
 80057a8:	2001      	movs	r0, #1
 80057aa:	e7e7      	b.n	800577c <_raise_r+0x12>
 80057ac:	2100      	movs	r1, #0
 80057ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80057b2:	4620      	mov	r0, r4
 80057b4:	4798      	blx	r3
 80057b6:	2000      	movs	r0, #0
 80057b8:	e7e0      	b.n	800577c <_raise_r+0x12>
	...

080057bc <raise>:
 80057bc:	4b02      	ldr	r3, [pc, #8]	@ (80057c8 <raise+0xc>)
 80057be:	4601      	mov	r1, r0
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	f7ff bfd2 	b.w	800576a <_raise_r>
 80057c6:	bf00      	nop
 80057c8:	20000070 	.word	0x20000070

080057cc <_kill_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4d07      	ldr	r5, [pc, #28]	@ (80057ec <_kill_r+0x20>)
 80057d0:	2300      	movs	r3, #0
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	602b      	str	r3, [r5, #0]
 80057da:	f7fb fe4b 	bl	8001474 <_kill>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	d102      	bne.n	80057e8 <_kill_r+0x1c>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	b103      	cbz	r3, 80057e8 <_kill_r+0x1c>
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	bd38      	pop	{r3, r4, r5, pc}
 80057ea:	bf00      	nop
 80057ec:	2000046c 	.word	0x2000046c

080057f0 <_getpid_r>:
 80057f0:	f7fb be3e 	b.w	8001470 <_getpid>

080057f4 <_init>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr

08005800 <_fini>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr
